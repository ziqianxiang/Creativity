Under review as a conference paper at ICLR 2018
Simple and Efficient Architecture Search for
Convolutional Neural Networks
Anonymous authors
Paper under double-blind review
Ab stract
Neural networks have recently had a lot of success for many tasks. However, neu-
ral network architectures that perform well are still typically designed manually
by experts in a cumbersome trial-and-error process. We propose a new method
to automatically search for well-performing CNN architectures based on a sim-
ple hill climbing procedure whose operators apply network morphisms, followed
by short optimization runs by cosine annealing. Surprisingly, this simple method
yields competitive results, despite only requiring resources in the same order of
magnitude as training a single network. E.g., on CIFAR-10, our method designs
and trains networks with an error rate below 6% in only 12 hours on a single GPU;
training for one day reduces this error further, to almost 5%.
1	Introduction
Neural networks have rapidly gained popularity over the last few years due to their success in a
variety of tasks, such as image recognition (Krizhevsky et al., 2012), speech recognition (Hinton
et al., 2012) and machine translation (Bahdanau et al., 2015). In most cases, these neural networks
are still designed by hand, which is an exhausting, time-consuming process. Additionally, the vast
amount of possible configurations requires expert knowledge to restrict the search. Therefore, a
natural goal is to design optimization algorithms that automate this neural architecture search.
However, most classic optimization algorithms do not apply to this problem, since the architecture
search space is discrete (e.g., number of layers, layer types) and conditional (e.g., the number of pa-
rameters defining a layer depends on the layer type). Thus, methods that rely on, e.g., differentiabil-
ity or independent parameters are not applicable. This led to a growing interest in using evolutionary
algorithms (Real et al., 2017; Suganuma et al., 2017) and reinforcement learning (Baker et al., 2016;
Cai et al., 2017; Zoph & Le, 2017) for automatically designing CNN architectures. Unfortunately,
most proposed methods are either very costly (requiring hundreds or thousands of GPU days) or
yield non-competitive performance.
In this work, we aim to dramatically reduce these computational costs while still achieving compet-
itive performance. Specifically, our contributions are as follows:
•	We propose a baseline method that randomly constructs networks and trains them with SGDR
(Loshchilov & Hutter, 2017). We demonstrate that this simple baseline achieves 6%-7% test error
on CIFAR-10, which already rivals several existing methods for neural archictecture search. Due
to its simplicity, we hope that this baseline provides a valuable starting point for the development
of more sophisticated methods in the future.
•	We formalize and extend the work on network morphisms (Chen et al., 2015; Wei et al., 2016;
Cai et al., 2017) in order to provide popular network building blocks, such as skip connections
and batch normalization.
•	We propose Neural Architecture Search by Hillclimbing (NASH), a simple iterative approach
that, at each step, applies a set of alternative network morphisms to the current network, trains the
resulting child networks with short optimization runs of cosine annealing (Loshchilov & Hutter,
2017), and moves to the most promising child network. NASH finds and trains competitive archi-
tectures at a computational cost of the same order of magnitude as training a single network; e.g.,
on CIFAR-10, NASH finds and trains CNNs with an error rate below 6 % in roughly 12 hours on
1
Under review as a conference paper at ICLR 2018
a single GPU. After one day the error is reduced to almost 5%. Models from different stages of
our algorithm can be combined to achieve an error of 4.7 % within two days on a single GPU. On
CIFAR-100, we achieve an error below 24% in one day and get close to 20% after two days.
•	Our method is easy to use and easy to extend, so it hopefully can serve as a basis for future work.
We first discuss related work in Section 2. Then, we formalize the concept of network morphisms
in Section 3 and propose our architecture search methods based on them in Section 4. We evaluate
our methods in Section 5 and conclude in Section 6.
2	Related work
Hyperparameter optimization. Neural networks are known to be quite sensitive to the setting of
various hyperparameters, such as learning rates and regularization constants. There exists a long
line of research on automated methods for setting these hyperparameters, including, e.g., random
search (Bergstra & Bengio, 2012), Bayesian optimization (Bergstra et al., 2011; Snoek et al., 2012),
bandit-based approaches (Li et al., 2016a), and evolutionary strategies (Loshchilov & Hutter, 2016).
Automated architecture search. In recent years, the research focus has shifted from optimizing hy-
perparameters to optimizing architectures. While architectural choices can be treated as categorical
hyperparameters and be optimized with standard hyperparameter optimization methods (Bergstra
et al., 2011; Mendoza et al., 2016), the current focus is on the development of special techniques
for architectural optimization. One very popular approach is to train a reinforcement learning agent
with the objective of designing well-performing convolutional neural networks (Baker et al., 2016;
Zoph & Le, 2017; Cai et al., 2017). Baker et al. (2016) train an RL agent to sequentially choose the
type of layers (convolution, pooling, fully connected) and their parameters. Zoph & Le (2017) use a
recurrent neural network controller to sequentially generate a string representing the network archi-
tecture. Both approaches train their generated networks from scratch and evaluate their performance
on a validation set, which represents a very costly step. In a follow-up work (Zoph et al., 2017), the
RL agent learned to build cells, which are then used as building blocks for a neural network with a
fixed global structure. Unfortunately, training an RL agent with the objective of designing architec-
ture is extremely expensive: both Baker et al. (2016) and Zoph & Le (2017) required over 10.000
fully trained networks, requiring hundreds to thousands of GPU days. To overcome this drawback,
Cai et al. (2017) proposed to apply the concept of network transformations/morphisms within RL.
As in our (independent, parallel) work, the basic idea is to use the these transformation to generate
new pre-trained architectures to avoid the large cost of training all networks from scratch. Compared
to this work, our approach is much simpler and 15 times faster while obtaining better performance.
Real et al. (2017) and Suganuma et al. (2017) utilized evolutionary algorithms to iteratively generate
powerful networks from a small network. Operations like inserting a layer, modifying the parameters
of a layer or adding skip connections serve as ”mutations” in their framework of evolution. Whereas
Real et al. (2017) also used enormous computational resources (250 GPUs, 10 days), Suganuma
et al. (2017) were restricted to relatively small networks due to handling a population of networks.
In contrast to the previous methods where network capacity increases over time, Saxena & Verbeek
(2016) start with training a large network (a ”convolution neural fabric”) and prune this in the end.
Very recently, Brock et al. (2017) used hypernetworks (Ha et al., 2017) to generate the weights for a
randomly sampled network architecture with the goal of eliminating the costly process of training a
vast amount of networks.
Network morphism/ transformation. Network transformations were (to our knowledge) first in-
troduced by Chen et al. (2015) in the context of transfer learning. The authors described a function
preserving operation to make a network deeper (dubbed ”Net2Deeper”) or wider (”Net2Wider”)
with the goal of speeding up training and exploring network architectures. Wei et al. (2016) pro-
posed additional operations, e.g., for handling non-idempotent activation functions or altering the
kernel size and introduced the term network morphism. As mentioned above, Cai et al. (2017) used
network morphisms for architecture search, though they just employ the Net2Deeper and Net2Wider
operators from Chen et al. (2015) as well as altering the kernel size, i.e., they limit their search space
to simple architectures without, e.g., skip connections.
2
Under review as a conference paper at ICLR 2018
3	Network morphism
Let N(X) denote a set of neural networks defined on X ⊂ Rn. A network morphism is a mapping
M : N(X) × Rk → N(X) × Rj from a neural network fw ∈ N(X) with parameters w ∈ Rk to
another neural network gw ∈ N(X) with parameters W ∈ Rj so that
fW(X)= gw(x) for every X ∈ X.	(1)
In the following we give a few examples of network morphisms and how standard operations for
building neural networks (e.g., adding a convolutional layer) can be expressed as a network mor-
phism. For this, let fiwi (X) be some part of a NN fw (X), e.g., a layer or a subnetwork.
Network morphism Type I. We replace fiwi by
~一~ ...
fWi(x) = AfWi (x) + b,	⑵
with Wi = (wi, A, b)1 . Equation (1) obviously holds for A = 1,b = 0. This morphism can be used
to add a fully-connected or convolutional layer, as these layers are simply linear mappings. Chen
et al. (2015) dubbed this morphism ”Net2DeeperNet”. Alternatively to the above replacement, one
could also choose
~--. .....
fWi (X)= C(AfWi (x)+ b) + d,	(3)
with Wi = (wi, C, d). A, b are fixed, non-learnable. In this case network morphism Equation (1)
holds if C = A-1, d = -Cb. A Batch Normalization layer (or other normalization layers) can
be written in the above form: A, b represent the batch statistics and C, d the learnable scaling and
shifting.
Network morphism Type II. Assume fiWi has the form fiWi (X) = AhWh (X) + b for an arbitrary
function h. We replace fiWi, Wi = (Wh, A, b), by
严(X) = (A A)(hW： (X))+b	(4)
with an arbitrary function hwh (x). The new parameters are Wi = (wi, Wh, A). Again, Equation (1)
can trivially be satisfied by setting A = 0. We think of two modifications of a NN which can be
expressed by this morphism. Firstly, a layer can be widened (i.e., increasing the number of units
in a fully connected layer or the number of channels in a CNN - the Net2WiderNet transformation
from Chen et al. (2015)). Think of h(X) as the layer to be widened. For example, we can then
set h = h to simply double the width. Secondly, skip-connections by concatenation as used by
Huang et al. (2016) can be formulated as a network morphism. If h(X) itself is a sequence of layers,
h(X) = hn(x) ◦•••◦ ho(X), then one could choose h(∕) = X to realize a skip from ho to the layer
subsequent to hn .
Network morphism Type III. By definition, every idempotent function fiWi can simply be replaced
by
Wi) = fwi ◦
(5)
with the initialization Wi = wi. This trivially also holds for idempotent function without weights,
e.g., Relu.
Network morphism Type IV. Every layer fiWi is replaceable by
~ ~ , . .. .
fi i (x)	= λfi	i (x)	+ (1 -	λ)h	h (x),	Wi	=	(Wi,λ,Wh)	(6)
with an arbitrary function h and Equation (1) holds if λ is initialized as 1. This morphism can be
used to incorporate any function, especially any non-linearities. For example, Wei et al. (2016) use
a special case of this operator to deal with non-linear, non-idempotent activation functions. Another
example would be the insertion of an additive skip connection, which were proposed by He et al.
(2016) to simplify training: If fji itself is a sequence of layers, fWi = fjin ◦•••◦ fWi0, then one
could choose h(X) = X to realize a skip from fiWi0 to the layer subsequent to fiWin .
Note that every combinations of the network morphisms again yields a morphism. So one could for
example insert a block ”Conv-BatchNorm-Relu” subsequent to a Relu layer by using equations (2),
(3) and (5).
1In abuse of notation.
3
Under review as a conference paper at ICLR 2018
Figure 1: Visualization of our method. Based on the current best model, new models are generated
and trained afterwards. The best model is than updated.
4	Architecture Search by Network morphisms
Our proposed algorithm is a simple hill climbing strategy (Russell & Norvig, 2009). We start with a
small, (possibly) pretrained network. Then, we apply network morphisms to this initial network to
generate larger ones that may perform better when trained further. These new “child” networks can
be seen as neighbors of the initial “parent” network in the space of network architectures. Due to the
network morphism Equation (1), the child networks start at the same performance as their parent.
In essence, network morphisms can thus be seen as a way to initialize child networks to perform
well, avoiding the expensive step of training them from scratch and thereby reducing the cost of
their evaluation. The various child networks can then be trained further for a brief period of time to
exploit the additional capacity obtained by the network morphism, and the search can move on to
the best resulting child network. This constitutes one step of our proposed algorithm, which we dub
Neural Architecture Search by Hill-climbing (NASH). NASH can execute this step several times
until performance on a validation set saturates; we note that this greedy process may in principle get
stuck in a poorly-performing region, from which it can never escape, but we did not find evidence
for this in our experiments.
Figure 1 visualizes one step of the NASH approach, and Algorithm 1 provides full details for the
algorithm. In our implementation, the function ApplyN etM orph(model, n) (line 15) applies n
network morphisms, each of them sampled uniformly at random from the following three:
•	Make the network deeper, i.e., add a ”Conv-BatchNorm-Relu” block as described at the
end of Section 3. The position where to add the block, as well as the kernel size (∈ {3, 5}),
are uniformly sampled. The number of channels is chosen to be equal to he number of
channels of the closest preceding convolution.
•	Make the network wider, i.e., increase the number of channels by using the network mor-
phism type II. The conv layer to be widened, as well as the widening factor (∈ {2, 4}) are
sampled uniformly at random.
•	Add a skip connection from layer i to layer j (either by concatenation or addition - Uni-
formly sampled) by using network morphism type II or IV, respectively. Layers i and j are
also sampled Uniformly.
Note that the cUrrent best model is also considered as a child, i.e. oUr algorithm is not forced to
select a new model bUt can rather also keep the old one if no other one improves Upon it.
4
Under review as a conference paper at ICLR 2018
Algorithm 1 Network architecture search by hill climbing
1:	function NASH( ImOdel0, n steps, nneigh, nNM, epochneigh, epochfinal, λend, λStart)
2:
3:	# model0 , model to start with, nsteps , number of hill climbining	steps
4:	# nneigh , number of neighbours, nNM , number of net. morph.	applied
5:	# epochneigh , number of epochs for training every neighbour
6:	# epochf inal , number of epochs for final training
7:	# initial LR λstart is annealed to λend during SGDR training
8:
9:	modelbest — modelo
10:	# start hill climbing
11:	for i4-1, . . . , nsteps do
12:	#get nneigh neighbors of model0 by applying nNM network morphisms to modelbest
13：	for j - 1,..., nneigh - 1 do
14:	model j — AppIyNetMorphs(modelbest,nNM)
15:	# train for a few epochs on training set with SGDR
16：	ImodeIj《—SGDRtrain(modelj , epochneigh, λstart, λend)
17:	end for
18:	# in fact, last neighbor is always just the current best
19：	Imodelnneigh V- SGDRtrain(modelbest, epochneigh, λstart, λend)
20:	# get best model on validation set
21:	modelbest V arg max {perf ormancevali (modelj)}
j=1,...,nneigh
22:	end for
23:	# train the final model on training and validation set
24:	modelbest V SGDRtrain(modelbest , epochf inal , λstart , λend )
25:	return modelbest
26:	end function
It is important for our method that child networks only need to be trained for a few epochs2 (line
17). Hence, an optimization algorithm with good anytime performance is required. Therefore, we
chose the cosine annealing strategy from Loshchilov & Hutter (2017), whereas the learning rate is
implicitly restarted: the training in line 17 always starts with a learning rate λstart which is annealed
to λend after epochneigh epochs. We use the same learning rate scheduler in the final training (aside
from a different number of epochs).
While we presented our method as a simple hill-climbing method, we note that it can also be inter-
preted as a very simple evolutionary algorithm with a population size of nneigh, no cross-over, net-
work morphisms as mutations, and a selection mechanism that only considers the best-performing
population member as the parent for the next generation. This interpretation also suggests several
promising possibilities for extending our simple method.
5	Experiments
We evaluate our method on CIFAR-10 and CIFAR-100. First, we investigate whether our consider-
ations from the previous chapter coincide with empirical results. We also check if the interplay of
modifying and training networks harms their eventual performance. Finally, we compare our pro-
posed method with other automated architecture algorithms as well as hand crafted architectures.
We use the same standard data augmentation scheme for both CIFAR datasets used by Loshchilov
& Hutter (2017) in all of the following experiments. The training set (50.000 samples) is split up in
training (40.000) and validation (10.000) set for the purpose of architecture search. Eventually the
performance is evaluated on the test set. All experiments where run on Nvidia Titan X (Maxwell)
2I.e., epochneigh should be small since a lot of networks need to be trained. In fact, the total number of
epochs for training in our algorithm can be computed as epochtotal = epochneighnneighnsteps + epochf inal.
In our later experiments we chose epochneigh = 17.
5
Under review as a conference paper at ICLR 2018
GPUs, with code implemented in Keras (Chollet et al., 2015) with a TensorFlow (Abadi et al., 2015)
backend.
5.1	Experiments on CIFAR- 1 0
5.1.1	Baselines
Before comparing our method to others, we run some baseline experiments to see whether our
considerations from the previous chapter coincide with empirical data.
Random model selection. First, we investigate if the simple hill climbing strategy is able to dis-
tinguish between models with high and low performance. For this, we set nneigh = 1, i.e., there
is no model selction - we simply construct random networks and train them. We then run ex-
periments with nneigh = 8 and compare both results. All other parameters are the same in this
experiment, namely nsteps = 5, nNM = 5, epochneigh = 17, epochf inal = 100. We choose
λstart = 0.05, λend = 0.0 as done in Loshchilov & Hutter (2017). model0 was a simple conv net:
Conv-MaxPool-Conv-MaxPool-Conv-FC-Softmax3, which is pretrained for 20 epochs, achieving
≈ 75% validation accuracy (up to 91% when trained till convergence), see Figure 5 in the appendix.
If our algorithm is able to identify better networks, one would expect to get better results with the
setting nneigh = 8.
Retraining from scratch. In the this experiment we investigate whether the ”weight inheritance”
due to the network morphisms used in our algorithm harms the final performance of the final model.
This weight inheritance can be seen as a strong prior on the weights and one could suspect that
the new, larger model may not be able to overcome a possibly poor prior. Additionally we were
interested in measuring the overhead of the architecture search process, so we compared the times
for generating and training a model with the time needed when training the final model from scratch.
The retraining from scratch is done for the same number of epochs as the total number of epochs
spent to train the model returned by our algorithm4 .
No SGDR. We now turn off the cosine annealing with restarts (SGDR) during the hill climbing
stage, i.e., the training in line 17 of Algorithm 1 is done with a constant learning rate. We tried
λ ∈ {0.01, 0.025, 0.05}, 10 runs each and averaged the results. Note that we still use the cosine
decay for the final training.
No network morphism. Lastly, we turn off the network morphism constraint for initializing the
neighbor networks. In detail, we proceeded as Real et al. (2017): All weights from layer where now
changes occur are inherited, whereas the weights of new/modified layers are initialized by random.
The results for these experiments are summarized in Table 1 . The hill climbing strategy is actually
able to identify better performing models. (first and second line: 5.7% vs. 6.5%). Notice how hill
climbing prefers larger models (5.7 million parameters on average vs. 4.4 million). Performance
slightly decreases when the models are retrained from scratch (line 3). This experiments indicates
that our algorithm does not harm the final performance of a model. Regarding the runtime, the
overhead for first having to search for the architecture is roughly a factor 3. We think this is a
big advantage of our method and shows that architecture search can be done in the same order of
magnitude as training a single model. In line 4 we can see that SGDR plays an important role. The
resulting models chosen by our algorithm when training is done with a constant learning rate perform
similarly to the models without any model selection strategy (6.4% and 6.5%, respectively), which
indicates that the performance after a few epochs on the validation set when trained without SGDR
correlates less with the final performance on the test set as it is the case for training with SGDR.
Indeed, we computed the Pearson correlation coefficient and obtained R2 = 0.64 for training with
SGDR and and R2 = 0.36 for training with a constant learning rate. See appendix A. Also, with
the constant learning rate, the few epochs spent are not sufficient to improve the performance of the
model. Figure 2 shows the progress while running our algorithm with and without SGDR, averaged
over all runs. When turning off the network morphism constraint, performance also decreases.
3By Conv we actually mean Conv-BatchNorm-Relu.
4With the setting nsteps = 5, epochneigh = 17, epochf inal = 100 and pretraining the starting network for
20 epochs, the models that are returned by our algorithm are trained for a total number of of 20 + 17 ∙ 5 + 100 =
205 epochs.
6
Under review as a conference paper at ICLR 2018
①UUPUJ」。七① d Uo=PP=p>
0.950
0.925-
0.900
0.875-
0.850
0.825
0.800
0.775
0.0	0.5	1.0	1.5	2.0
HC iteration
5
Z
5
一工
Figure 2: The best model found by Algorithm 1 tracked over time (in terms of hill climbing itera-
tions). With (red) and without (blue) using SGDR for the training within the hill climbing (line 17).
Final training (line 24) is not plotted. Dashed line denotes mean, shaded area ±2σ intervalls.
Table 1: Baseline experiments. Runtime, # params, and error rates are averaged over 10 runs (for
nneigh = 8) and 30 runs (nneigh = 1) runs, respectively. nsteps = 5 in all experiments.
algorithm setting
nneigh = 8
Random networks (nneigh = 1)
models from line 1 retrained from scratch
nneigh = 8, no SGDR
nneigh = 8, no net. morph.
runtime (hrs) # params (mil.) error ± std. (%)
12.8	5.7	5.7 ± 0.35
4.5	4.4	6.5 ± 0.76
5.3	5.7	6.1 ± 0.92
10.6	5.8	6.4 ± 0.70
6.6	2.9	6.1 ± 0.30
Interestingly the number of parameters heavily decreases. This indicates that our algorithm prefers
models without new parameters.
5.1.2	Comparison to hand crafted and other automatically generated
ARCHITECTURES
We now compare our algorithm against the popular wide residual networks (Zagoruyko & Ko-
modakis, 2016), the state of the art model from Gastaldi (2017) as well as other automated archi-
tecture search methods. Beside our results for nsteps = 5 from the previous section, we also tried
nsteps = 8 to generate larger models.
For further improving the results, we take snapshots of the best models from every iteration while
running our algorithm following the idea of Huang et al. (2017) when using SGDR (Loshchilov &
Hutter, 2017) for training. However different from Huang et al. (2017), we do not immediately get
fully trained models for free, as our snapshots are not yet trained on the validation set but rather only
on the training set. Hence we spent some additional resources and train the snapshots on both sets.
Afterwards the ensemble model is build by combining the snapshot models with uniform weights.
Lastly, we also build an ensemble from the models returned by our algorithm across all runs. Results
are listed in Table 2.
The proposed method is able to generate competitive network architectures in only 12 hours. By
spending another 12 hours, it outperforms most automated architecture search methods although all
of them require (partially far) more time and GPUs. We do not reach the performance of the two
handcrafted architectures as well as the ones found by Zoph & Le (2017) and Brock et al. (2017).
However note that Zoph & Le (2017) spent by far more resources than we did.
Unsurprisingly, the ensemble models perform better. It is a simple and cheap way to improve results
which everyone can consider when the number of parameters is not relevant.
7
Under review as a conference paper at ICLR 2018
Table 2: Results for CIFAR-10. For our methods the stated resources, # parameters and errors are
averaged over all runs. ”Resources spent” denotes training costs in case of the handcrafted models.
model	resources spent	# params (mil.)	error ( %)
Shake-Shake (Gastaldi, 2017)	4 GPU days, 2 GPUs	26	2.9
WRN 28-10 (Loshchilov & Hutter, 2017)	1 GPU day	36.5	3.86
Baker et al. (2016)	80-100 GPU days	11	6.9
Cai et al. (2017)	15 GPU days	19.7	5.7
Zoph & Le (2017)	16.000-24.000 GPU days	37.5	3.65
Real et al. (2017)	2500 GPU days	5.4	5.4
Saxena & Verbeek (2016)	?	21	7.4
Brock et al. (2017)	3 GPU days	16.0	4.0
Ours (random networks, nsteps = 5, nneigh	~0.2 GPU days	4.4	6.5
Ours (nsteps = 5, nneigh = 8, 10 runs)	0.5 GPU days	5.7	5.7
Ours (nsteps = 8, nneigh = 8, 4 runs)	1 GPU day	19.7	5.2
Ours (snapshot ensemble, 4 runs)	2 GPU days	57.8	4.7
Ours (ensemble across runs)	4 GPU days	88	4.4
Table 3: Results for CIFAR-100. For our methods the stated resources, # parameters and errors are
averaged over all runs. ”Resources spent” denotes training costs in case of the handcrafted models.
model	resources spent	# params (mil.)	error ( %)
Shake-Shake (Gastaldi, 2017)	14 GPU days	34.4	15.9
WRN 28-10 (Loshchilov & Hutter, 2017)	1 GPU day	36.5	19.6
Real et al. (2017)	250 GPUS	40.4	23.7
Brock et al. (2017)	3 GPU days	16.0	20.6
Ours (nsteps = 8, nneigh = 8, 5 runs)	1 GPU day	22.3	23.4
Ours (snapshot ensemble, 5 runs)	2 GPU days	73.3	20.9
Ours (ensemble across runs)	5 GPU days	111.5	19.6
5.2	Experiments on CIFAR- 1 00
We repeat the previous experiment on CIFAR-100; hyperparameters were not changed. The results
are listed in Table 3. Unfortunately most automated architecture methods did not consider CIFAR-
100. Our method is on a par with Real et al. (2017) after one day with a single GPU. The snapshot
ensemble performs similar to Brock et al. (2017) and an ensemble model build from the 5 runs can
compete with the hand crafted WRN 28-10. The performance of the Shake-Shake network (Gastaldi,
2017) is again not reached.
6	Conclusion
We proposed NASH, a simple and fast method for automated architecture search based on a hill
climbing strategy, network morphisms, and training via SGDR. Experiments on CIFAR-10 and
CIFAR-100 showed that our method yields competitive results while requiring considerably less
computational resources than most alternative approaches. Our algorithm is easily extendable, e.g.,
by other network morphisms, evolutionary approaches for generating new models, other methods
for cheap performance evaluation (such as, e.g., learning curve prediction (Klein et al., 2017) or
hypernetworks (Ha et al., 2017; Brock et al., 2017)), or better resource handling strategies (such as
Hyperband (Li et al., 2016b)). In this sense, we hope that our approach can serve as a basis for the
development of more sophisticated methods that yield further improvements of performance.
8
Under review as a conference paper at ICLR 2018
References
Martin Abadi, Ashish Agarwal, Paul Barham, Eugene Brevdo, Zhifeng Chen, Craig Citro, Greg S.
Corrado, Andy Davis, Jeffrey Dean, Matthieu Devin, Sanjay Ghemawat, Ian Goodfellow, Andrew
Harp, Geoffrey Irving, Michael Isard, Yangqing Jia, Rafal Jozefowicz, Lukasz Kaiser, Manjunath
Kudlur, Josh Levenberg, Dan Mane, Rajat Monga, Sherry Moore, Derek Murray, Chris Olah,
Mike Schuster, Jonathon Shlens, Benoit Steiner, Ilya Sutskever, Kunal Talwar, Paul Tucker, Vin-
cent Vanhoucke, Vijay Vasudevan, Fernanda Viegas, Oriol Vinyals, Pete Warden, Martin Watten-
berg, Martin Wicke, Yuan Yu, and Xiaoqiang Zheng. TensorFlow: Large-scale machine learning
on heterogeneous systems, 2015. URL https://www.tensorflow.org/. Software avail-
able from tensorflow.org.
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly
learning to align and translate. ICLR, 2015.
Bowen Baker, Otkrist Gupta, Nikhil Naik, and Ramesh Raskar. Designing neural network architec-
tures using reinforcement learning. ICLR 2017, 2016.
J. Bergstra and Y. Bengio. Random search for hyper-parameter optimization. 13(1):281-305, 2012.
J. Bergstra, R. Bardenet, Y. Bengio, and B. KegL Algorithms for hyper-parameter optimization. In
NIPS, 2011.
Andrew Brock, Theodore Lim, James M. Ritchie, and Nick Weston. SMASH: one-shot model
architecture search through hypernetworks. arXiv preprint, 2017.
Han Cai, Tianyao Chen, Weinan Zhang, Yong Yu, and Jun Wang. Reinforcement learning for
architecture search by network transformation. 2017.
Tianqi Chen, Ian J. Goodfellow, and Jonathon Shlens. Net2net: Accelerating learning via knowledge
transfer. arXiv preprint, 2015.
Francois Chollet et al. Keras. https://github.com/fchollet/keras, 2015.
Xavier Gastaldi. Shake-shake regularization. ICLR 2017 Workshop, 2017.
David Ha, Andrew M. Dai, and Quoc V. Le. Hypernetworks. ICLR, 2017.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-
nition. CVPR, 2016.
Geoffrey Hinton, Li Deng, Dong Yu, George Dahl, Abdel rahman Mohamed, Navdeep Jaitly, An-
drew Senior, Vincent Vanhoucke, Patrick Nguyen, Tara Sainath, and Brian Kingsbury. Deep
neural networks for acoustic modeling in speech recognition. IEEE Signal Processing Magazine,
2012.
Gao Huang, Zhuang Liu, and Kilian Q. Weinberger. Densely connected convolutional networks.
2016.
Gao Huang, Yixuan Li, Geoff Pleiss, Zhuang Liu, John E. Hopcroft, and Kilian Q. Weinberger.
Snapshot ensembles: Train 1, get M for free. ICLR 2017, 2017.
A. Klein, S. Falkner, J. T. Springenberg, and F. Hutter. Learning curve prediction with Bayesian neu-
ral networks. In International Conference on Learning Representations (ICLR) 2017 Conference
Track, April 2017.
Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classification with deep convo-
lutional neural networks. In F. Pereira, C. J. C. Burges, L. Bottou, and K. Q. Weinberger (eds.),
Advances in Neural Information Processing Systems 25, pp. 1097-1105. Curran Associates, Inc.,
2012.
L. Li, K. G. Jamieson, G. DeSalvo, A. Rostamizadeh, and A. Talwalkar. Efficient hyperparameter
optimization and infinitely many armed bandits. CoRR, abs/1603.06560, 2016a.
9
Under review as a conference paper at ICLR 2018
Lisha Li, Kevin G. Jamieson, Giulia DeSalvo, Afshin Rostamizadeh, and Ameet Talwalkar. Efficient
hyperparameter optimization and infinitely many armed bandits. arXiv preprint, 2016b.
I.	Loshchilov and F. Hutter. CMA-ES for hyperparameter optimization of deep neural networks.
CoRR, abs/1604.07269, 2016.
I.	Loshchilov and F. Hutter. Sgdr: Stochastic gradient descent with warm restarts. In International
Conference on Learning Representations (ICLR) 2017 Conference Track, April 2017.
H. Mendoza, A. Klein, M. Feurer, T. Springenberg, and F. Hutter. Towards automatically-tuned
neural networks. In AutoML, 2016.
Esteban Real, Sherry Moore, Andrew Selle, Saurabh Saxena, Yutaka Leon Suematsu, Quoc V. Le,
and Alex Kurakin. Large-scale evolution of image classifiers. arXiv preprint, 2017.
Stuart Russell and Peter Norvig. Artificial Intelligence: A Modern Approach (3rd Edition). Pearson,
3 edition, December 2009. ISBN 0136042597.
Shreyas Saxena and Jakob Verbeek. Convolutional neural fabrics. arXiv preprint, 2016.
J.	Snoek, H. Larochelle, and R.P. Adams. Practical Bayesian optimization of machine learning
algorithms. In NIPS, 2012.
Masanori Suganuma, Shinichi Shirakawa, and Tomoharu Nagao. A genetic programming approach
to designing convolutional neural network architectures. arXiv preprint, 2017.
Tao Wei, Changhu Wang, Yong Rui, and Chang Wen Chen. Network morphism. arXiv preprint,
2016.
Sergey Zagoruyko and Nikos Komodakis. Wide residual networks. arXiv preprint, 2016.
Barret Zoph and Quoc V. Le. Neural architecture search with reinforcement learning. 2017.
Barret Zoph, Vijay Vasudevan, Jonathon Shlens, and Quoc V. Le. Learning transferable architectures
for scalable image recognition. 2017.
10
Under review as a conference paper at ICLR 2018
A Correlation between validation and test accuracy
With SGDR - COrreIetion VdIi accu and test accu - RC2=0.635, 45「uns
0.9525-
0.9500
0.9475-
0.9450
0.9425
0.9400
0.9375
0.925
0.940
0.930	0.935
validation accu
0.945
Figure 3:	Initial network for our algorithm.
No SGDR - Correletion vali accu and test accu - R^2=0,361, 31 runs
roɔ(ols ①4->
0.945-
0.940
0.935
0.930-
0.925
0.82	0.83	0.84	0.85	0.86	0.87	0.88	0.89
validation accu
Figure 4:	Initial network for our algorithm.
B Some models
11
Under review as a conference paper at ICLR 2018
Figure 5: Initial network for our algorithm.
12
Under review as a conference paper at ICLR 2018
Figure 6: Network generated by our algorithm with nsteps = 5.
13
Under review as a conference paper at ICLR 2018
Figure 7: Network generated by our algorithm with nsteps = 8.
14