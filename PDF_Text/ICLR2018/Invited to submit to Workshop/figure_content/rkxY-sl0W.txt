Figure 1: Translating a CoffeeScript program into JavaScript. The sub-component in the Coffee-Script program and its corresponding translation in JavaScript are highlighted.
Figure 2: Tree-to-tree workflow: The arrows indicate the computation flow of the encoder-decoderarchitecture. Blue solid arrows indicate the flow from/to the left child, while orange dashed arrowsare for the right child. The black dotted arrow from the source tree root to the target tree rootindicates that the LSTM state is copied. The green box denotes the expanding node, and the greyone denotes the node to be expanded in a queue. The sub-tree of the source tree corresponding tothe expanding node is highlighted in yellow. The right corner lists the formulas to predict the tokenfor the expanding node.
Figure 3: An example of the translation for the synthetic task.
Figure 4: Grammar for the source language FOR in the synthetic task.
Figure 5: Grammar for the target language LAMBDA in the synthetic task.
Figure 6: A subset of the CoffeeScript grammar used to generate the CoffeeScript-JavaScript dataset.
Figure 7: The Python code to translate a FOR program into a LAMBDA program.
