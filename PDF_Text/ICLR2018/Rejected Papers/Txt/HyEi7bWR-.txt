Under review as a conference paper at ICLR 2018
Orthogonal	Recurrent Neural	Networks
with Scaled Cayley Transform
Anonymous authors
Paper under double-blind review
Ab stract
Recurrent Neural Networks (RNNs) are designed to handle sequential data but
suffer from vanishing or exploding gradients. Recent work on Unitary Recurrent
Neural Networks (uRNNs) have been used to address this issue and in some cases,
exceed the capabilities of Long Short-Term Memory networks (LSTMs). We pro-
pose a simpler and novel update scheme to maintain orthogonal recurrent weight
matrices without using complex valued matrices. This is done by parametrizing
with a skew-symmetric matrix using the Cayley transform. Such a parametrization
is unable to represent matrices with negative one eigenvalues, but this limitation is
overcome by scaling the recurrent weight matrix by a diagonal matrix consisting
of ones and negative ones. The proposed training scheme involves a straightfor-
ward gradient calculation and update step. In several experiments, the proposed
scaled Cayley orthogonal recurrent neural network (scoRNN) achieves superior
results with fewer trainable parameters than other unitary RNNs.
1	Introduction
Deep neural networks have been used to solve numerical problems of varying complexity. RNNs
have parameters that are reused at each time step of a sequential data point and have achieved state
of the art performance on many sequential learning tasks. Nearly all optimization algorithms for
neural networks involve some variant of gradient descent. One major obstacle to training RNNs
with gradient descent is due to vanishing or exploding gradients, as described in Bengio et al. (1993)
and Pascanu et al. (2013). This problem refers to the tendency of gradients to grow or decay expo-
nentially in size, resulting in gradient descent steps that are too small to be effective or so large that
the network oversteps the local minimum. This issue significantly diminishes RNNs’ ability to learn
time-based dependencies, particularly in problems with long input sequences.
A variety of architectures have been introduced to overcome this difficulty. The current preferred
RNN architectures are those that introduce gating mechanisms to control when information is re-
tained or discarded, such as LSTMs (Hochreiter & Schmidhuber, 1997) and GRUs (Cho et al.,
2014), at the cost of additional trainable parameters. More recently, the unitary evolution RNN
(uRNN) (Arjovsky et al., 2016) uses a parametrization that forces the recurrent weight matrix to
remain unitary throughout training, and exhibits superior performance to LSTMs on a variety of
synthetic and real-world tasks. For clarity, we follow the convention of Wisdom et al. (2016) and
refer to this network as the restricted-capacity uRNN.
Since the introduction of uRNNs, orthogonal and unitary RNN schemes have increased in both pop-
ularity and complexity. Wisdom et al. (2016) use a multiplicative update method detailed in Tagare
(2011) and Wen & Yin (2013) to expand uRNNs’ capacity to include all unitary matrices. These
networks are referred to as full-capacity uRNNs. Jing et al. (2016)’s EURNN parametrizes this same
space with Givens rotations, while Jing et al. (2017)’s GORU introduces a gating mechanism for uni-
tary RNNs to enable short term memory. Vorontsov et al. (2017) introduced modified optimization
and regularization methods that restrict singular values of the recurrent matrix to an interval around
1. Each of these methods involve complex valued recurrent weights. For other work in addressing
the vanishing and exploding gradient problem, see Henaff et al. (2017) and Le et al. (2015).
In this paper, we consider RNNs with a recurrent weight matrix taken from the set of all orthogonal
matrices. To construct the orthognal weight matrix, we parametrize it with a skew-symmetric matrix
through a scaled Cayley transform. This scaling allows us to avoid the singularity issue occuring
1
Under review as a conference paper at ICLR 2018
for -1 eigenvalues that may arise in the standard Cayley transform. With the parameterization, the
network optimization involves a relatively simple gradient descent update. The resulting method
achieves superior performance on sequential data tasks with a smaller number of trainable parame-
ters and hidden sizes than other unitary RNNs and LSTMs.
The method we present in this paper works entirely with real matrices, and as such, our results deal
only with orthogonal and skew-symmetric matrices. However, the method and all related theory
remain valid for unitary and skew-Hermitian matrices in the complex case. The experimental re-
sults in this paper indicate that state of the art performance can be achieved without the increased
complexity of optimization along the Stiefel manifold and using complex matrices.
2	Background
2.1	Recurrent Neural Networks
A recurrent neural network (RNN) is a function with input parameters U ∈ Rn×m , recurrent pa-
rameters W ∈ Rn×n, recurrent bias b ∈ Rn, output parameters V ∈ Rp×n, and output bias c ∈ Rp
where m is the data input size, n is the number of hidden units, and p is the output data size.
From an input sequence x = (x1, x2, ..., xT) where xi ∈ Rm, the RNN returns an output sequence
y = (y1, y2, ..., yT) where each yi ∈ Rp is given recursively by
ht = σ (Uxt + W ht-1 + b)
yt = V ht + c
where h = (ho,..., hτ-ι), h ∈ Rn is the hidden layer state at time i and σ(∙) is the activation
function, which is often a pointwise nonlinearity such as a hyperbolic tangent function or rectified
linear unit (Nair & Hinton, 2010).
2.2	UNITARY RNNS
A real matrix W is orthogonal ifit satisfies WTW = I. The complex analog of orthogonal matrices
are unitary matrices, which satisfy W * W = I, where * denotes the conjugate transpose. Orthogonal
and unitary matrices have the desirable property that kW xk2 = kxk2 for any vector x. This property
motivates the use of orthogonal or unitary matrices in RNNs to avoid vanishing and exploding
gradients, as detailed in Arjovsky et al. (2016).
Arjovsky et al. (2016) follow the framework of the previous section for their restricted-capacity
uRNN, but introduce a parametrization of the recurrent matrix W using a product of simpler ma-
trices. This parameterization is given by a product consisting of diagonal matrices with complex
norm 1, complex Householder reflection matrices, discrete Fourier transform matrices, and a fixed
permutation matrix with the resulting product being unitary.
Wisdom et al. (2016) note that this representation has only 7n parameters, which is insufficient to
represent all unitary matrices for n > 7. In response, they present the full-capacity uRNN, which
uses a multiplicative update step that is able to reach all unitary matrices of order n.
The full-capacity uRNN aims to construct a unitary matrix W (k+1) from W(k) by moving along
a curve on the Stiefel manifold {W ∈ Cn×n | W*W = I}. For the network optimization, it
is necessary to use a curve that is in a descent direction of the cost function L := L(W). In
Tagare (2011), Wen & Yin (2013), and Wisdom et al. (2016), a descent direction is constructed as
B(k)W (k), which is a representation of the derivative operator DL(W(k)) in the tangent space of
the Stiefel manifold at W(k). Then, with B(k) W(k) defining the direction of a descent curve, an
update along the Stiefel manifold is obtained as
W (k+1)
where λ is the learning rate.
(1)
2
Under review as a conference paper at ICLR 2018
3	S caled Cayley Orthogonal RNN
-0.99999	-√1 - 0.999992
√1 - 0.999992	-0.99999
W
3.1	Cayley Transform
The Cayley transform gives a bijection between the set of orthogonal matrices without -1 eigenval-
ues and the set of skew-symmetric matrices (i.e., matrices where AT = -A):
W = (I+A)-1(I-A),	A= (I+W)-1(I-W).
We can use this bijection to parametrize the set of orthogonal matrices without -1 eigenvalues using
skew-symmetric matrices. This parametrization is attractive from a machine learning perspective
because it is closed under addition: the sum or difference of two skew-symmetric matrices is also
skew-symmetric, so we can use gradient descent algorithms like RMSprop (Tieleman & Hinton,
2012) or Adam (Kingma & Ba, 2014) to train parameters.
However, this parametrization cannot represent orthogonal matrices with -1 eigenvalues, since in
this case I + W, is not invertible. Theoretically, we can still represent matrices with eigenvalues
that are arbitrarily close to -1; however, it can require large entries of A. For example, a 2x2
orthogonal matrix W with eigenvalues ≈ -0.99999 ± 0.00447i and its parametrization A by the
Cayley transform is given below.
0	447.212
-447.212	0
Gradient descent algorithms will learn this A matrix very slowly, if at all. This difficulty can be
overcome through a suitable diagonal scaling according to results from Kahan (2006).
Theorem 3.1 Every orthogonal matrix W can be expressed as
W = (I + A)-1(I - A)D
where A = [aij] is real-valued, skew-symmetric with |aij | ≤ 1, and D is diagonal with all nonzero
entries equal to ±1.
We call the transform in Theorem 3.1 the scaled Cayley transform. Then, with an appropriate
choice of D, the scaled Cayley transform can reach any orthogonal matrix including those with -1
eigenvalues. Further, it ensures that the skew-symmetric matrix A that generates the orthogonal
matrix will be bounded.
Our proposed network, the scaled Cayley orthogonal recurrent neural network (scoRNN), is based
on this theorem. We parametrize the recurrent weight matrix W through a skew-symmetric matrix
A, which results in n(n—1) trainable weights. The recurrent matrix W is formed by the scaled Cayley
transform: W = (I +A)-1(I - A)D. The scoRNN then operates identically to the set of equations
given in Section 2.1, but during training we update the skew-symmetric matrix A using gradient
descent, while D is fixed throughout the training process. The number of -1s on the diagonal of D,
which we call ρ, is considered a hyperparameter in this work and is manually chosen based on the
task.
3.2	Update Scheme
To update the recurrent parameter matrix A as described in Section 3.1, we must find the gradients
of A by backpropagating through the Cayley transform. The following theorem describes these
gradients. A proof is given in Appendix A.
Theorem 3.2 Let L = L(W) : Rn×n → R be some differentiable loss function for an RNN with
the recurrent weight matrix W. Let W = W(A) := (I + A)-1 (I - A) D where A ∈ Rn×n is
skew-symmetric and D ∈ Rn×n is a fixed diagonal matrix consisting of -1 and 1 entries. Then the
gradient of L = L(W (A)) with respect to A is
∂L
∂A
where V = (I + A厂T ∂∂L (D + WT)，彩=[悬]∈ Rn×n，and ∂W = [a⅛] ∈ Rn×n
(2)
3
Under review as a conference paper at ICLR 2018
At each training step of scoRNN, we first use the standard backpropagation algorithm to compute
∂∂WL and then use Theorem 3.2 to compute ∂AL. We then update A with gradient descent (or a related
optimization method), and reconstruct W as follows:
A(k+1) = A(k) - λdL(W("))
∂A
W (k+1) = I + A(k+1)-1 I - A(k+1) D
The skew-symmetry of ∂∂L ensures that A(k+1) will be skew-symmetric and, in turn, W(k+1) will
be orthogonal.
The scoRNN and the full-capacity uRNN from Section 2.2 both have the capacity to optimize an
orthogonal or unitary recurrent matrix W, but they use different update schemes. The full-capacity
uRNN performs a multiplicative update that moves W along the tangent space of the Stiefel man-
ifold, which can be shown to be a descent direction, but not necessarily the steepest one. In con-
trast, scoRNN performs an additive update in the direction of steepest descent with respect to its
parametrization. The scoRNN update proves to be much more resistant to loss of orthogonality
during training; see Appendix B. It also maintains stable hidden state gradients in the sense that the
gradient norm does not change significantly in time; see Appendix C for experimental results. This
is achieved with very little overhead computational costs over the standard RNN; see Appendix D
for experiments comparing computational speeds.
4	Other Architecture Details
The basic architecture of scoRNN is very similar to the standard RNN as presented in Section 2.1.
From a network layer perspective, one can think of the application of the recurrent weight in a three
layer process. Let ht ∈ Rn be the current state of the scoRNN at a particular time step, t. We then
pass ht through the following layers:
•	Layer 1: ht → Dht =: h(t1)
•	Layer 2: h(t1) → (I - A) ht(1) =: ht(2)
•	Layer 3: h(t2) → (I + A)-1 ht(2) =: ht(3)
Note that the above scheme is the same as taking ht → Wht as discussed previously.
4.1	MODRELU Activation Function
The modReLU function was first implemented by Arjovsky et al. (2016) to handle complex valued
functions and weights. Unlike previous methods, our method only uses real-valued functions and
weights. Nevertheless, we have found that the modReLU function in the real case also performed
better than other activation functions. The function is defined as
(、Z 八,ɪ,ʌ ∫∣z∣	(|z| + b)	if |z| + b ≥ 0	小
σmodReLU(Z)=问σReLU (IzI + b)	= ∣0 ∣	if |z| + b< 0	⑶
where b is a trainable bias. In the real case, this simplifies to Sign(Z)σReLU(∣z∣ + b). To implement
this activation function in scoRNN, we replace the computation of ht in Section 2.1 with
Zt = Uxt + W ht-1
ht = σmodReLU (Zt )
We believe that the improved performance of the modReLU over other activation functions, such
as ReLU, is because it admits both positive and negative activation values, which appears to be
important for the state transition in orthogonal RNNs. This is similar to the hyperbolic tangent
function but does not have vanishing gradient issues.
4.2	Initialization
Modifying the initialization of our parameter matrices, in particular our recurrent parameter matrix
A, had a significant effect on performance. The most effective initialization method we found uses
4
Under review as a conference paper at ICLR 2018
a technique inspired by Henaff et al. (2017). We initialize all of the entries of A to be 0 except for
2x2 blocks along the diagonal, which are given as
with sj
B1
A =
Bbn/2c
where Bj
0	sj
-sj	0
q1-cos (tj)
1+cos (tj)
and tj is sampled uniformly from
[0,2].
The Cayley transform of this A
will have eigenvalues equal to ±eitj for each j, which will be distributed uniformly along the right
unit half-circle. Multiplication by the scaling matrix D will reflect ρ of these eigenvalues across the
imaginary axis. We use this method to initialize scoRNN’s A matrix in all of the experiments listed
in section 5.
5 Experiments
For each experiment, we found optimal hyperparameters for scoRNN using a grid search. For other
models, we used the best hyperparameters settings as reported in Wisdom et al. (2016) and Arjovsky
et al. (2016). If not available, we performed a grid search to find the best hyperparameters.
5.1	Copying Problem
This experiment follows descriptions found in Arjovsky et al. (2016) and Wisdom et al. (2016), and
tests an RNN’s ability to reproduce a sequence seen many timesteps earlier. In the problem setup,
there are 10 input classes, which we denote using the digits 0-9, with 0 being used as a ’blank’ class
and 9 being used as a ’marker’ class. The RNN receives an input sequence of length T + 20. This
sequence consists of entirely zeros, except for the first ten elements, which are uniformly sampled
from classes 1-8, and a 9 placed ten timesteps from the end. The goal for the machine is to output
zeros until it sees a 9, at which point it should output the ten elements from the beginning of the
input sequence. Thus, information must propagate from the beginning to the end of the sequence for
a machine to successfully learn this task, making it critical to avoid vanishing/exploding gradients.
A baseline strategy with which to compare machine performance is that of outputting 0 until the
machine sees a9, and then outputting 10 elements randomly sampled from classes 1-8. The expected
cross-entropy for such a strategy is IT.In practice, it is common to see gated RNNs such as
LSTMs converge to this local minimum.
Figure 1: Cross entropy of each machine on the copying problem with T = 1000 (left) and T =
2000 (right).
We vary the number of hidden units of the machines to match the number of parameters, approxi-
mately 22k each. This results in an LSTM with n = 68, a restricted-capacity uRNN with n = 470,
a full-capacity uRNN with n = 128, and a scoRNN with n = 190. We found the best perfor-
mance with the scoRNN came from ρ = n/2, which gives an initial W with eigenvalues distributed
uniformly on the entire unit circle.
5
Under review as a conference paper at ICLR 2018
Figure 1 compares each model’s performance for T = 1000 and T = 2000, with the baseline
cross-entropy given as a dashed line. In both cases, cross-entropy for the restricted-capacity uRNN
and LSTM never drop below the baseline. For the T = 1000 test, the full-capacity uRNN and
scoRNN converge immediately to zero entropy solutions, with the full-capacity uRNN converging
slightly faster. For T = 2000, the full-capacity uRNN remains at the baseline for several thousand
iterations, but is eventually able to find a correct solution. In contrast, the scoRNN error has a smooth
convergence that bypasses the baseline, but does so more slowly than the full-capacity uRNN.
5.2	Adding Problem
We examined a variation of the adding problem as proposed by Arjovsky et al. (2016) which is based
on the work of Hochreiter & Schmidhuber (1997). This variation involves passing two sequences
concurrently into the RNN, each of length T . The first sequence is a sequence of digits sampled
uniformly with values ranging in a half-open interval, U [0, 1). The second sequence is a marker
sequence consisting of all zeros except for two entries that are marked by one. The first 1 is located
uniformly within the interval [1, T) of the sequence and the second 1 is located uniformly within
the interval [T, T) of the sequence. The label for each pair of sequences is the sum of the two
entries that are marked by one, which forces the machine to identify relevant information in the
first sequence among noise. As the sequence length increases, it becomes more crucial to avoid
vanishing/exploding gradients. Naively predicting one regardless of the sequence gives an expected
mean squared error (MSE) of approximately 0.167. This will be considered as the baseline.
The number of hidden units for each network was adjusted so that each had approximately 14k
trainable parameters. This results in n = 170 for the scoRNN, n = 60 for the LSTM, n = 120 for
the Full-Capacity uRNN, and n = 950 hidden units for the restricted-capacity uRNN. The test set
Figure 2: Test set MSE for each machine on the adding problem with sequence lengths of T = 200
(top), T = 400 (middle), and T = 750 (bottom).
MSE results for sequence lengths T = 200, T = 400, and T = 750 can be found in Figure 2. A
training set size of 100,000 and a testing set size of 10,000 were used for each sequence length. For
each case, the networks start at or near the baseline MSE and drop towards zero after a few epochs.
As the sequence length increases, the number of epochs before the drop increases. We found the
best settings for the scoRNN were ρ = n/2 for T = 200 and ρ = 7n/10 forT = 400 and T = 750.
As can be seen, the LSTM error drops precipitously across the board before all other models, while
the unitary and orthogonal RNNs descend more gradually. Although in some cases the full-capacity
uRNN begins to drop below the baseline before scoRNN, the full-capacity uRNN does not drop as
quickly and has a more irregular descent curve.
6
Under review as a conference paper at ICLR 2018
5.3	Pixel-by-Pixel MNIST
We ran two experiments based around classifying samples from the well-known MNIST dataset (Le-
Cun et al.). Following the implementation of Le et al. (2015), each pixel of the image is fed into the
RNN sequentially, resulting in a single pixel sequence length of 784. In the first experiment, which
we refer to as unpermuted MNIST, pixels are arranged in the sequence row-by-row. In the second,
which we call permuted MNIST, a fixed permutation is applied to training and testing sequences.
All scoRNN machines were trained with the RMSProp optimization algorithm. Input and output
weights used a learning rate of 10-3, while the recurrent parameters used a learning rate of 10-4 (for
n = 170) or 10-5 (for n = 360 and n = 512). For unpermuted MNIST, we found ρ to be optimal
at n/10, while the best value of ρ for permuted MNIST was n/2. We suspect that the difference of
these two values comes from the different types of dependencies in each: unpermuted MNIST has
mostly local dependencies, while permuted MNIST requires learning many long-term dependencies,
which appear to be more easily modeled when the diagonal of D has a higher proportion of -1s.
Each experiment used a training set of 55,000 images and a test set of 10,000 testing images. Each
machine was trained for 70 epochs, and test set accuracy, the percentage of test images classified
correctly, was evaluated at the conclusion of each epoch. Figure 3 shows test set accuracy over time
for each machine, and the best performance over all epochs by each machine is given in Table 1.
Table 1: Results for unpermuted and permuted pixel-by-pixel MNIST experiments. Evaluation
accuracies are based on the best test accuracy at the end of every epoch.
Model	n	# parameters	MNIST Test Accuracy	Permuted MNIST Test Accuracy
scoRNN	170	≈ 16k	0.973	0.943
scoRNN	360	≈ 69k	0.983	0.962
scoRNN	512	≈ 137k	0.985	0.966
LSTM	128	≈ 68k	0.987	0.920
LSTM	256	≈ 270k	0.989	0.929
LSTM	512	≈ 1,058k	0.985	0.920
Restricted-capacity uRNN	512	≈ 16k	0.976	0.945
Restricted-capacity uRNN	2170	≈ 69k	0.984	0.953
Full-capacity uRNN	116	≈ 16k	0.947	0.925
Full-capacity uRNN	512	≈ 270k	0.974	0.947
In both experiments, the 170 hidden unit scoRNN gives similar performance to both of the 512
hidden unit uRNNs using a much smaller hidden dimension and, in the case of the full-capacity
uRNN, an order of magnitude fewer parameters. Matching the number of parameters (≈ 69k), the
2170 restricted-capacity uRNN performance was comparable to the 360 hidden unit scoRNN for
unpermuted MNIST, but performed worse for permuted MNIST, and required a much larger hidden
size and a significantly longer run time, see Appendix D. As in experiments presented in Arjovsky
et al. (2016) and Wisdom et al. (2016), orthogonal and unitary RNNs are unable to outperform the
LSTM in the unpermuted case. However, the 360 and 512 hidden unit scoRNNs outperform the
unitary RNNs. On permuted MNIST, the 512 hidden unit scoRNN achieves a test-set accuracy of
96.6%, outperforming all of the uRNNs and LSTMs. We believe this is a state of the art result.
5.4	TIMIT Speech Dataset
To see how the models performed on audio data, speech prediction was performed on the TIMIT
dataset (Garofolo et al., 1993), a collection of real-world speech recordings. Excluding the dialect
SA sentences and using only the core test set, the dataset consisted of 3,696 training and 192 testing
audio files. Similar to experiments in Wisdom et al. (2016), audio files were downsampled to 8kHz
and a short-time Fourier transform (STFT) was applied with a Hann window of 256 samples and a
window hop of 128 samples (16 milliseconds). The result is a set of frames, each with 129 complex-
valued Fourier amplitudes. The log-magnitude of these amplitudes is used as the input data for the
machines. Each frame was fed into the machine sequentially, and at each time step t, the machine’s
7
Under review as a conference paper at ICLR 2018
Figure 3: Test accuracy for unpermuted and permuted MNIST over time. All scoRNN models and
only the best performing models for each other architectures are shown.
target output is to predict the t + 1 frame. For each model, the hidden layer sizes were adjusted such
that each model had approximately equal numbers of trainable parameters. For scoRNN, we used
the Adam optimizer with learning rate 10-3 to train the input and output parameters, and RMSprop
with a learning rate of 10-3 (for n = 224) or 10-4 (for n = 322 and n = 425) to train the recurrent
weight matrix. The number of negative eigenvalues used was ρ = n/10.
The loss function used for training was the mean squared error (MSE) between the predicted and
actual log-magnitudes of the next time frame over the entire sequence. Table 2 contains the MSE
on validation and testing sets, which shows that all scoRNN models achieve a smaller MSE than all
LSTM and unitary RNN models. Similar to Wisdom et al. (2016), we reconstructed audio files using
the predicted log-magnitudes from each machine and evaluated them on several audio metrics. We
found that the scoRNN predictions achieved better scores on the signal-to-noise ratio metric SegSNR
(Brookes et al., 1997), but performed slightly worse than the full-capacity uRNN predictions on the
human intelligibility and perception metrics STOI (Taal et al., 2011) and PESQ (Rix et al., 2001).
Table 2: Results for the TIMIT speech dataset. Evaluation based on MSE and various audio metrics
Model	n	# params	Valid. MSE	Eval. MSE	Model	n	# params	Valid. MSE	Eval. MSE
scoRNN	224	≈ 83k	9.26	8.50	Rest. URNN二	158	≈ 83k	15.57	18.51
scoRNN	322	≈ 135k	8.48	7.82	Rest. uRNN	256	≈ 135k	15.90	15.31
scoRNN	425	≈ 200k	7.97	7.36	Rest. uRNN	378	≈ 200k	16.00	15.15
LSTM	84	≈ 83k	18.43	17.18	FUll URNN	128	≈ 83k	15.07	14.58
LSTM	120	≈ 135k	17.05	15.91	Full uRNN	192	≈ 135k	15.10	14.50
LSTM	158	≈ 200k	16.33	16.06	FUll URNN	256	≈ 200k	14.96	14.69
6 Conclusion
There have been recent breakthroughs with RNN architectures using unitary recurrent weight ma-
trices to address the vanishing/exploding gradient problem. These unitary RNNs are implemented
with complex valued matrices and require additional complexity in computation. Unlike unitary
RNNs, the scoRNN developed in this paper uses real valued orthogonal recurrent weight matri-
ces with a simpler implementation scheme by parametrizing with a skew-symmetric matrix. The
resulting model’s additive update step is in the direction of steepest descent with respect to this
parametrization, and maintains the orthogonality of the recurrent weight matrix in the presence of
roundoff errors. Results from our experiments show that scoRNN can achieve superior performance
to unitary RNNs, in some cases with many fewer trainable parameters than other models.
8
Under review as a conference paper at ICLR 2018
References
Martin Arjovsky, Amar Shah, and Yoshua Bengio. Unitary evolution recurrent neural networks. In
Proceedings of the 2016 International Conference on Machine Learning, volume 48, pp. 1120-
1128, New York, New York, USA, 2016. JMLR.
Yoshua Bengio, Paolo Frasconi, and Patrice Simard. The problem of learning long-term dependen-
cies in recurrent networks. pp. 1183-1195, San Francisco, CA, USA, 1993. IEEE Press.
Mike Brookes et al. Voicebox: Speech processing toolbox for matlab. Software, available [Mar.
2011] from www. ee. ic. ac. uk/hp/staff/dmb/voicebox/voicebox. html, 47, 1997.
Kyunghyun Cho, Bart van Merrienboer, Dzmitry Bahdanau, and Yoshua Bengio. On the properties
of neural machine translation: Encoder-decoder approaches, 2014. URL https://arxiv.
org/abs/1409.1259.
John Garofolo, Lori Lamel, William Fisher, Jonathan Fiscus, David Pallett, Nancy Dahlgren,
and Victor Zue. Timit acoustic-phonetic continuous speech corpus ldc93s1. Technical report,
Philadelphia: Linguistic Data Consortium, 1993.
Mikael Henaff, Arthur Szlam, and Yann LeCun. Recurrent orthogonal networks and long-memory
tasks. In Proceedings of the 33rd International Conference on Machine Learning, volume 48,
New York, NY, USA, 2017. JMLR: W&CP.
Sepp Hochreiter and Jurgen Schmidhuber. Long short-term memory. In Neural Computation 9(8),
pp. 1735-1780, 1997.
Li Jing, Yichen Shen, Tena Dubcek, John Peurifoy, Scott Skirlo, Max Tegmark, and Marin Soljacic.
Tunable efficient unitary neural networks (eunn) and their application to rnn. arXiv preprint
arXiv:1612.05231, 2016.
Li Jing, Calar GUlCehre, John Peurifoy, Yichen Shen, Max Tegmark, Marin Soljacic, and Yoshua
Bengio. Gated orthogonal recurrent units: On learning to forget. 2017. URL https://arxiv.
org/abs/1706.02761.
William Kahan. Is there a small skew cayley transform with zero diagonal? Linear algebra and its
applications, 417(2-3):335-341, 2006.
Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980, 2014.
Quoc V. Le, Navdeep Jaitly, and Geoffrey E. Hinton. A simple way to initialize recurrent networks
of rectified linear units, 2015. URL https://arxiv.org/abs/1504.00941.
Yann LeCun, Corinna Cortes, and Christopher J.C. Burges. The mnist database. URL http:
//yann.lecun.com/exdb/mnist/.
Vinod Nair and Geoffrey E. Hinton. Rectified linear units improve restricted boltzmann machines.
In 27th International Conference on Machine Learning, Haifa, Israel, 2010.
Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio. On the difficulty of training recurrent neural
networks. In 30th International Conference on Machine Learning, Atlanta, Georgia, USA, 2013.
Antony W Rix, John G Beerends, Michael P Hollier, and Andries P Hekstra. Perceptual evaluation
of speech quality (pesq)-a new method for speech quality assessment of telephone networks and
codecs. In Acoustics, Speech, and Signal Processing, 2001. Proceedings.(ICASSP’01). 2001 IEEE
International Conference on, volume 2, pp. 749-752. IEEE, 2001.
Cees H Taal, Richard C Hendriks, Richard Heusdens, and Jesper Jensen. An algorithm for intelligi-
bility prediction of time-frequency weighted noisy speech. IEEE Transactions on Audio, Speech,
and Language Processing, 19(7):2125-2136, 2011.
Hemant D. Tagare. Notes on optimization on stiefel manifolds. Technical report, Yale University,
2011.
9
Under review as a conference paper at ICLR 2018
Tijmen Tieleman and Geoffrey Hinton. Lecture 6.5-rmsprop: Divide the gradient by a running
average of its recent magnitude. COURSERA: Neural networks for machine learning, 4(2):26-
31, 2012.
Eugene Vorontsov, Chiheb Trabelsi, Samuel Kadoury, and Chris Pal. On orthogonality and learning
recurrent networks with long term dependencies. arXiv preprint arXiv:1702.00071, 2017.
Zaiwen Wen and Wotao Yin. A feasible method for optimization with orthogonality constraints. In
Mathematical Programming, volume 142(1-2), pp. 397-434. 2013.
Scott Wisdom, Thomas Powers, John Hershey, Jonathan Le Roux, and Les Atlas. Full-capacity
unitary recurrent neural networks. In D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon, and
R. Garnett (eds.), Advances in Neural Information Processing Systems 29, pp. 4880-4888. Curran
Associates, Inc., 2016.
10
Under review as a conference paper at ICLR 2018
Appendix A:	Proof of Theorem 3.2
For completeness, we restate and prove Theorem 3.2.
Theorem 3.2 Let L = L(W) : Rn×n T R be some differentiable loss function for an RNN with
the recurrent weight matrix W. Let W = W (A) := (I + A)T (I — A) D where A ∈ Rn×n is
SkeW-SymmetriC and D ∈ Rn×n is a fixed diagonal matrix consisting of-1 and 1 entries. Then the
gradient of L = L(W(A)) with respect to A is
∂L
∂A
V t — V
(4)
where V := (I + A)-T 繇(D + WT),能=[悬]∈ Rn×n, and 繇=[*] ∈ R…
Proof: Let Z := (I + A)-1(I — A). We consider the (i,j) entry of 解.Taking the derivative with
respect to Aij where i = j we obtain:
dL _ X dL dWk,l _ X dL D dzk,l _ t ( dL D) dz
E = kykE = kyk 1,1 E =r[IdW ∂ E
Using the identity (I + A) Z = I — A and taking the derivative with respect to AijtO both sides
we obtain:
∂Z	∂A	∂Z ∂A
dAij + ∂Aij + ∂Aij	∂Aij
and rearranging we get:
∂Z
=—(I + A)-1
∂ ∂A + JAzL
IdAij + ∂Aij )
Let Eij denote the matrix whose (i, j) entry is 1 with all others being 0. Since A is skew-symmetric,
we have ∂A = Eij — Ej,i. Combining everything, we have:
∂L
E = — tr
∂L T
∂WD) (I + A)	(Eij- Ej,i + Ei,jZ - EjiZ
—tr (ILD) (i+A)TEij +tr (JdWD) (i+A尸Ej
∂L T
(而D)(I + A)TEj,iz
∂1D)T(I + A)I
i,j
Z (焉D)T(I + A)T
i,j
11
Under review as a conference paper at ICLR 2018
(I+Z)(得 D)T(I+A)
i,j
TT
(IdLD)	(I + A)T)(I + ZT)
i,j
(D+W) (∂dL )T(I+A)-1
i,j
(I+a)-t ∂WW (D + W T)
i,j
—
Using the above formulation, ∂AL- = 0 and ∂L~ = - ∂L So that ∂L isa SkeW-Symmetric matrix.
Finally, by the definition of V we get the desired result.
Appendix B:	Loss of Orthogonality
In the ScoRNN architecture, the recurrent Weight matrix iS parameterized With a SkeW-Symmetric
matrix through the Cayley tranSform. ThiS enSureS the computed recurrent Weight matrix in floating
point arithmetic iS orthogonal to the order of machine preciSion after each update Step. Unlike
ScoRNN, the full-capacity uRNN maintainS a unitary recurrent Weight matrix by a multiplicative
update Scheme. Due to the accumulation of rounding errorS over a large number of repeated matrix
multiplicationS, the recurrent Weight may not remain unitary throughout training. To inveStigate
thiS, We ran the ScoRNN and full-capacity uRNN With equal hidden unit SizeS of n = 512 on the
unpermuted MNIST experiment and checked for loSS of orthogonality at each epoch. The reSultS
of thiS experiment are ShoWn in Figure 4. AS can be Seen, the recurrent Weight matrix for the full-
capacity uRNN becomeS leSS unitary over time, but the orthogonality recurrent Weight matrix for
ScoRNN iS not affected by roundoff errorS.
2	MNlST OrthOgOnal / Unitary SCOreS
ιo-31
φ^ouω XJ£Un / -eu060qt0
—— Full Capacity uRNN
—scoRNN
Epochs
Figure 4: Unitary scores (k W * W — I ||F)for the full-capacity URNN recurrent weight matrix and
orthogonality ScoreS WT W - I F for the ScoRNN recurrent Weight matrix uSing a GPU on the
pixel-by-pixel MNIST experiment.
Appendix C:	Vanishing Gradients
As discussed in Arjovsky et al. (2016), the vanishing/exploding gradient problem is caused by rapid
< 1	1	r∙ . I	ι∙ . ʃ' , 1 1 ∙ 1 1	.	fl II	1 ∙	∙ < 1	/, 1 ,
growth or decay of the gradient of the hidden state ∂hi^ as We move earlier in the sequence (that
is, as t decreases). To see if vanishing/exploding gradients affect the scoRNN model, we examined
hidden state gradients in the scoRNN and LSTM models on the adding problem experiment (see
section 5.2) with sequence length T = 500.
The norms of these gradients are shown at two different points in time during training in Figure 5.
As can be seen, LSTM gradient norms decrease steadily as we move away from the end of the
sequence. The right half of Figure 5 shows that this vanishing effect is exacerbated by training after
300 iterations.
In contrast, scoRNN gradients decay by less than an order of magnitude at the beginning of training,
remaining near 10-2 for all timesteps. Even after 300 iterations of training, scoRNN hidden state
12
Under review as a conference paper at ICLR 2018
gradients decay only slightly, from 10-3 at t = 500 to 10-4 at t = 0. This allows information to
easily propagate from the beginning of the sequence to the end.
Adding Problem Gradients
at Beginning of Training
SuUOU4->u3一 pe」9
Figure 5: Gradient norms ∣∣ 器 k for ScoRNN and LSTM models during training on the adding
problem. The x-axis shows different values of t. The left plot shows gradients at the beginning of
training, and the right shows gradients after 300 training iterations.
Appendix D:	Complexity and Speed
The scoRNN architecture is similar in complexity and memory usage to a standard RNN except for
the additional memory requirement of storing the n(n - 1)/2 entries of the skew-symmetric matrix
A and the additional complexity of forming the recurrent weight matrix W from A with the scaled
Cayley transform. We note that the recurrent weight matrix is generated from the skew-symmetric A
matrix only once per training iteration; this computational cost is small compared to the cost of the
forward and backward propagations through all time steps in a training batch for a standard RNN.
Table 3: Timing results for the unpermuted MNIST dataset.
Model	n	# params	Minutes Per Epoch
scoRNN	170	≈ 16k	5.3
Rest. uRNN	512	≈ 16k	8.2
Full uRNN	116	≈ 16k	10.8
LSTM	128	≈ 68k	5.0
scoRNN	360	≈ 69k	7.4
Rest. uRNN	2,170	≈ 69k	50.1
scoRNN	512	≈ 137k	11.2
Full uRNN	360	≈ 137k	25.8
LSTM	256	≈ 270k	5.2
Full uRNN	512	≈ 270k	27.9
LSTM	512	≈ 1,058k	5.6
To experimentally quantify potential differences between scoRNN and the other models, the real
run-time for the models on the unpermuted MNIST experiment were recorded and are included in
Table 3. All models were run on the same machine, which has an Intel Core i5-7400 processor and
an nVidia GeForce GTX 1080 GPU. The scoRNN and LSTM models were run in Tensorflow, while
the full and restricted capacity uRNNs were run using code provided in Wisdom et al. (2016).
The LSTM model was fastest, and hidden sizes largely did not affect time taken per epoch; we
suspect this is because the LSTM model we used was built in to Tensorflow. The LSTMs are of
13
Under review as a conference paper at ICLR 2018
simialr speed to the n = 170 scoRNN, while they are approximately twice as fast as the n =
512 scoRNN. Matching the number of hidden parameters, the scoRNN model with n = 170 is
approximately 1.5 times faster than the restricted-capacity uRNN with n = 512, and twice as fast
as the full-capacity uRNN with n = 116. This relationship can also be seen in the scoRNN and
full-capacity uRNN models with ≈ 137k parameters, where the scoRNN takes 11.2 minutes per
epoch as compared to 25.8 minutes for the scoRNN.
14