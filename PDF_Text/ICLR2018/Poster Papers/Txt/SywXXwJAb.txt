Published as a conference paper at ICLR 2018
Deep Learning and Quantum Entanglement:
Fundamental Connections with Implications
to Network Design
Yoav Levine, David Yakira, Nadav Cohen & Amnon Shashua
The Hebrew University of Jerusalem
{yoavlevine,davidyakira,cohennadav,shashua}@cs.huji.ac.il
Ab stract
Formal understanding of the inductive bias behind deep convolutional networks,
i.e. the relation between the network’s architectural features and the functions it
is able to model, is limited. In this work, we establish a fundamental connection
between the fields of quantum physics and deep learning, and use it for obtain-
ing novel theoretical observations regarding the inductive bias of convolutional
networks. Specifically, we show a structural equivalence between the function re-
alized by a convolutional arithmetic circuit (ConvAC) and a quantum many-body
wave function, which facilitates the use of quantum entanglement measures as
quantifiers of a deep network’s expressive ability to model correlations. Further-
more, the construction of a deep ConvAC in terms of a quantum Tensor Network
is enabled. This allows us to perform a graph-theoretic analysis of a convolutional
network, tying its expressiveness to a min-cut in its underlying graph. We demon-
strate a practical outcome in the form of a direct control over the inductive bias
via the number of channels (width) of each layer. We empirically validate our
findings on standard convolutional networks which involve ReLU activations and
max pooling. The description of a deep convolutional network in well-defined
graph-theoretic tools and the structural connection to quantum entanglement, are
two interdisciplinary bridges that are brought forth by this work.
1	Introduction
A central factor in the application of machine learning to a given task is the restriction of the hypoth-
esis space of learned functions known as inductive bias. In deep convolutional networks, inductive
bias manifests itself in architectural features such as number of layers, number of channels per layer,
and more (LeCun et al., 2015). Formal understanding of the inductive bias behind convolutional net-
works is limited - the assumptions encoded into these models, which seem to form an excellent prior
knowledge for different types of data (e.g. Krizhevsky et al. (2012); He et al. (2016); van den Oord
et al. (2016)), are for the most part a mystery.
An important aspect of the influence that a certain architectural feature has on the inductive bias, is its
effect on the network’s ability to model correlations between regions of its input. In this regard, one
typically considers partitions that divide input regions into disjoint sets, and asks how far the function
realized by the network is from being separable with respect to these partitions(Cohen and Shashua,
2017; Levine et al., 2017). For example, Cohen and Shashua (2017) show that when separability is
measured through the algebraic notion of separation-rank, deep Convolutional Arithmetic Circuits
(ConvACs) (Cohen et al., 2016b) support exponential (in network size) separation-ranks for certain
input partitions, while being limited to polynomial separation-ranks for others. ConvACs are a
special class of convolutional networks, characterized by linear activations and product pooling,
which served a key role in theoretical analyses of convolutional networks, in virtue of their algebraic
structure.
In this work, we draw upon formal similarities between how physicists describe a system of many-
particles as a quantum mechanical wave function, and how machine learning practitioners map a
high-dimensional input (e.g. image) to a set of output labels through a deep network. In particular,
we show that there is a structural equivalence between a function modeled by a ConvAC and a
many-body quantum wave function, which relies on their underlying tensorial structure. This allows
employment of the well-established physical notion of quantum entanglement measures (Plenio and
Virmani, 2007), which subsumes other algebraic notions of separability such as the separation-rank
mentioned above, for the analysis of correlations modeled by deep convolutional networks.
1
Published as a conference paper at ICLR 2018
Importantly, quantum entanglement is used by physicists as prior knowledge to form compact repre-
sentations of many-body wave functions in what is known as Tensor Networks (TNs) (Ostlund and
Rommer, 1995; Verstraete and Cirac, 2004; Vidal, 2008; Evenbly and Vidal, 2011). In the domain
of machine learning, a network in the form of a ConvAC is effectively a compact representation of a
multi-dimensional array related to the convolutional weights. This has been analyzed to date via ten-
Sor decompositions - where the representations are based on linear combinations of outer-products
between lower-order tensors (Cohen et al., 2016b). A TN, on the other hand, is a way to compactly
represent a higher-order tensor through inner-products among lower-order tensors, which allows a
natural representation of TNs through an underlying graph. Although the fundamental language is
different, we show that a ConvAC can be mapped to a TN, and thus a graph-theoretic setting for
studying functions modeled by deep convolutional networks is brought forth. In particular, notions
of max-flow/min-cut are shown to convey important meaning.
The results we present, connect the inductive bias of deep convolutional networks to the number of
channels in each layer, and indicate how these should be set in order to satisfy prior knowledge on
the task at hand. Specifically, the ability ofa ConvAC to represent correlations between input regions
is shown to be related to a min-cut over all edge-cut sets that separate the corresponding input nodes
in the associated TN. Such results enable one to avoid bottle-necks and adequately tailor the network
architecture through application of prior knowledge. Our results are theoretically proven for a deep
ConvAC architecture; their applicability to a conventional deep convolutional network architecture,
which involves ReLU activations and max pooling, is demonstrated through experiments.
Some empirical reasoning regarding the influence of the channel numbers on the network’s perfor-
mance has been suggested (e.g. Szegedy et al. (2016)), mainly regarding the issue of bottle-necks
which is naturally explained via our theoretical analysis below. Such insights on the architectural
design of deep networks are new to machine learning literature, and rely on TN bounds recently
derived in physics literature, referred to as ‘quantum min-cut max-flow’ (Cui et al., 2016). The
mapping we present between ConvACs and TNs indicates new possibilities for the use of graph-
theory in deep networks, where min-cut analysis could be just the beginning. Additionally, the
connections we derive to quantum entanglement and quantum TNs may open the door to further
well-established physical insights regarding correlation structures modeled by deep networks.
The use of TNs in machine learning has appeared in an empirical context where Stoudenmire and
Schwab (2016) trained a matrix product state (MPS) TN architecture to perform supervised learning
tasks on the MNIST data-set. Additionally, there is a growing interest in the physics community in
RBM based forms for variational many-body wave functions (e.g. Carleo and Troyer (2017)). Chen
et al. (2017) present a theoretical mapping between RBMs and TNs which allows them to connect
the entanglement bounds of a TN state to the expressiveness of the corresponding RBM.
2	Preliminaries
We provide below the minimal tensor analysis background required
for following the analyses of ConvACs and TNs that are carried
out in this paper. The core concept in tensor analysis is a tensor,
which may be thought of as a multi-dimensional array. The order
of a tensor is defined to be the number of indexing entries in the
array, which are referred to as modes. The dimension of a tensor
in a particular mode is defined as the number of values that may
be taken by the index in that mode. If A is a tensor of order N
and dimension Mi in each mode i ∈ [N], its entries are denoted
Ad1...dN, where the index in each mode takes values between 1 and
the appropriate dimension, di ∈ [Mi]. Suppose A is a tensor of
order N, and let (A, B) be a partition of [N] := {1, . . . , N}, i.e. A
Figure 1: Contraction of a
Simple TN.
and B are disjoint subsets of [N] whose union covers the entire set. The matricization of A w.r.t. the
partition (A, B), denoted JAKA,B, is essentially the arrangement of the tensor elements as a matrix
whose rows correspond to A and columns to B (see appendix A for exact definition).
A TN (see overview in OruS (2014) is a weighted graph, where each node corresponds to a tensor
whose order is equal to the degree of the node in the graph. Accordingly, the edges emanating out
of a node, also referred to as its legs, represent the different modes of the corresponding tensor. The
weight of each edge in the graph, is equal to the dimension of the appropriate tensor mode.
2
Published as a conference paper at ICLR 2018
*
hidden layerL-1
1x1 Conv ..
pooling
rL-1
rL-1
dense
(output)
Y
poolL-i(γ)=∩convL-i(j0, Y)
j0 covers space
out(y) =(aL,y, Poo1l-i(：))
Figure 2: The Convolutional Arithmetic Circuit (ConvAC) network (Cohen et al., 2016b).
Moving on to the connectivity properties of a TN, edges which connect two nodes in the TN repre-
sent an operation between the two corresponding tensors. A index which represents such an edge
is called a contracted index, and the operation of contracting that index is a summation over all of
the values it can take. An index representing an edge with one loose end is called an open index.
The tensor represented by the entire TN, whose order is equal to the number of open indices, can
be calculated by summing over all of the contracted indices in the network. In fig. 1, a TN corre-
sponding to the operation of multiplying a vector v ∈ Rr1 by a matrix M ∈ Rr2 ×r1 is depicted.
The computation is performed by summing over the only contracted index, k. Since there is only
one open index, d, the result of contracting the network is an order 1 tensor (a vector): u ∈ Rr2
which upholds u = Mv. Though we use below the contraction of indices in a more elaborate TN,
this operation can be essentially viewed as a generalization of matrix multiplication.
3 Convolutional Networks and Quantum Wave Functions
When describing the quantum mechanical properties of a system composed of many interacting
particles, referred to as a many-body quantum system, physicists are required to employ functions
which are able to express an elaborate relation between the different particles. Similarly, machine
learning tasks require functions with the ability to express a complex relation between many input
elements, e.g. many pixels in an image. In this section, we formulate this analogy.
Our construction will be based on the ConvAC architecture introduced by Cohen et al. (2016b),
illustrated in fig. 2. The ConvAC is a deep convolutional network that operates similarly to a regular
convolutional network, only with linear activations and product pooling layers (which introduce the
non-linearity) instead of the more common non-linear activations (e.g. ReLU) and average/max
pooling. ConvACs are closely related to SimNets (Cohen and Shashua, 2014; Cohen et al., 2016a),
and their underlying operations lend themselves to mathematical analyses based on measure theory
and tensor analysis. From an empirical perspective, ConvACs work well in many practical settings,
e.g. for optimal classification with missing data (Sharir et al.), and for compressed networks (Cohen
et al., 2016a). Importantly, through the concept of generalized tensor decompositions, a ConvAC
can be transformed to a standard convolutional network with ReLU activation and average/max
pooling, which laid the foundation for extending its proof methodologies to such ConvNets (Cohen
and Shashua, 2016). This deep learning architecture was chosen for our analysis below due to its
underlying tensorial structure which resembles the quantum many-body wave function, as will soon
be shown.
The input space of the network, denoted by X = (x1, ..., xN), can be thought of as an image,
where each xj corresponds to a local patch from that image. The Y network outputs, denoted by
hy(x1, ..., xN) for y ∈ [Y], are shown in Cohen et al. (2016b) to have the following form:
MN	M
hy(x1,...,xN)=	Ayd1...dN	fθdj(xj)=	Ady1...dN A(dr1an..k.-d1N) (x1,...,xN), (1)
d1,..,dN =1	j=1	d1,..,dN =1
where Ay and A(rank-1) are tensors of order N and dimension M in each mode. The entries of the
conv-weights tensor Ay are given by polynomials in the network’s convolutional weights, al,j,γ (see
fig. 2 and Cohen et al. (2016b)). The entries of A(rank-1) are given by the application of the M linearly
independent representation functions {fθd }dM=1 on the input patches, which are an initial mapping
of the inputs to an M -dimensional feature space.
We now turn to a brief presentation of the methods with which physicists describe the quantum
mechanical properties of a many-body system (see appendix B for a more detailed introduction).
3
Published as a conference paper at ICLR 2018
A state of a system, which is a complete description of a physical system, is given in quantum
mechanics as a wave function, denoted by ∣ψ). We limit our discussion to states which reside in
finite dimensional Hilbert spaces, as these are at the heart of our analogy to convolutional networks.
We discuss the case of N particles, each corresponding to a local Hilbert space Hj forj ∈ [N] such
that ∀j : dim(Hj) = M. Denoting an orthonormal basis of the local Hilbert space by {∣ψdi}M=ι,
the many-body wave function ∣ψi ∈ H = XN=IHj can be written as:
lψi = X，	,	1 Adl...dN lψdl i x ∙ ∙ ∙ x lψdN i ,	⑵
d1 ...dN =1
where ∣ψdj 0 ∙∙∙ 0 ∣ψdN〉is a basis vector of the MN dimensional Hilbert space H, and the
coefficients tensor Ad1...dN is the tensor holding the corresponding coefficients.
We will tie between the function realized by a ConvAC given in eq. 1, and the many-body quantum
wave function given in eq. 2. First, we consider a special case of N particles which exhibit no
quantum correlations (to be formulated in section 4 below). The state of such a system is called a
product state, and can be written down as a single tensor product of local states ∣φ∕ ∈ Hj: ∣ψ PSi =
∣φιi 0 …0 ∣Φn). By expanding each local state in the respective basis, ∣φj)= PM =ι Vdj) ∣ψdj)，
the product state assumes a form similar to eq. 2:
，
lψ pi = EdI…dN =、Adι...dN lψdJ 0 …0 lψdN i ,	⑶
with the entries of its coefficients tensor given by: Adps...dN = QjN=1 vd(jj). Ifwe compose each local
state ∣φji such that its projection on the local basis vector equals Vy) = fs& (Xj), then the inner
product between the many-body quantum state ∣ψi and the tailored product state ∣ψ PSi is equal to:
，	，N
hψ ps∣ψi =	E	Adι...dN AdIS..dN (X1,…,XN )= E	Adι...dN ∏fθdj (Xj),	(4)
d1 ...dN =1	d1 ...dN =1	j=1
reproducing eq. 1 for a single class y, as Adps...dN = Ad(ra.n..kd-N1) by construction. This result ties
between the function realized by a convolutional network to that which a many-body wave function
models. Specifically, the conv-weights tensor is analogous to the coefficients tensor of the many-
body wave function, while the input to the convolutional network is analogous to the constructed
product state. In the following sections, we will use this analogy to acquire means of analyzing the
expressiveness of a convolutional network via the properties of its underlying tensor.
4	Correlations and Measures of Entanglement
The structural connection between the many-body wave function and the function realized by a Con-
vAC, presented in the previous section, creates an opportunity to employ well-established physical
insights and tools for analyzing the inductive bias of convolutional networks. We present in this sec-
tion the concept of quantum entanglement measures, and use it to motivate and extend previously
suggested means for quantifying correlations of a deep convolutional network.
In Cohen and Shashua (2017); Levine et al. (2017), the algebraic notion of separation-rank is
used as a tool for measuring correlations modeled by a function between two disjoint parts of
its input. Let f (∙) be a function over xι... XN, and let (A, B) be a partition of [N]. The
separation-rank of f (∙) w.r.t. (A, B) measures the strength of correlation that f (∙) models between
input elements corresponding to A ({Xi}i∈A) and those corresponding to B ({Xj}j∈B). If f (∙)
is separable w.r.t. (A, B), meaning there exist functions g(∙) and h(∙) such that f (xi,…，XN) =
g((Xi)i∈A) ∙ h((Xj)j∈B), then under f (∙) there is absolutely no correlation between the inputs of
A and those of B .1 In this case, the separation-rank is equal to 1 by definition. In general, the
separation rank of f (∙) w.r.t. (A, B) is defined to be the minimal number of summands that together
give f (∙), where each summand is separable w.r.t. (A, B). Higher separation rank indicates larger
deviation from separability, i.e. stronger interaction (correlation) modeled between sides of the par-
tition.2 The analysis of separation ranks allows control over the inductive bias when designing a
1 In a statistical setting, where f (∙) is a probability density function, separability w.r.t. (A, B) corresponds
to statistical independence between inputs from A and B.
2 See Cohen and Shashua (2017) for a formalization of this argument.
4
Published as a conference paper at ICLR 2018
deep network architecture - the network can be designed such that characteristic correlations in the
input are modeled, i.e. partitions that split correlated regions have high separation ranks.
In the physics domain, special attention is given to the inter-particle correlation structure charac-
terizing a many-body wave function, as it has broad implications regarding the physical properties
of the examined system. We present below the concept of quantum entanglement measures that is
widely used by physicists as a quantifier of correlations in a many-body quantum system. Remark-
ably, this approach for quantifying correlations is very similar to the above presented tool of the
separation-rank, which in fact corresponds to a particular quantum entanglement measure.
Consider a partition of N particles labeled by integers [N], which splits it into two disjoint subsys-
tems A and B. Let HA and HB be the Hilbert spaces corresponding to particles in subsystems A
and B, respectively. In what is referred to as a ‘Schmidt decomposition’, the many-body quantum
wave function in eq. 2 can be written as (see appendix B.1 for derivation):
lψi = Xα=1λɑlφA) ㊈ lφB〉,	⑸
where r := min(dim(HA), dim(HB)), {λα }rα=1 are the singular values of the matricization
JAKA,B, and {φαA }rα=1, {φαB }rα=1 are r vectors in the bases of HA and HB, respectively, ob-
tained by a singular value decomposition. Eq. 5 represents the N particle wave function in terms
of a sum of tensor products between two disjoint parts of it. Each summand in eq. 5 is a separable
state w.r.t. the partition (A, B), which is analogous to the separable function in the above discus-
sion. Intuitively, as above, the more correlated two sides of a partition are, the more ‘complicated’
the function describing their relation should be. Essentially, a measure of entanglement w.r.t. the
partition (A, B) is a quantity that represents the difference between the state in question and a state
that is separable w.r.t. this partition. There are several different measures, such as the entanglement
entropy (Vedral and Plenio, 1998) - the entropy of JAKA,B’s singular values,3 the geometric mea-
sure (Shimony, 1995) - the minimal L2 distance of ∣ψi from any separable state, and the Schmidt
number (Terhal and Horodecki, 2000) - which is simply the number of JAKA,B’s non-zero singular
values, or equivalently its rank.
This method for quantifying quantum correlations can now be readily transferred into the machine
learning domain. Utilizing the structural analogy that was established in section 3, the measures of
entanglement constitute an instrument for quantifying the correlations that a convolutional network
can model. Specifically, we’ve shown the conv-weights tensor to be analogous to the coefficients
tensor of the many-body wave function, thus the entanglement measures can be analogously defined
using the singular values of a matricization of the conv-weights tensor. Since it was shown by
Cohen and Shashua (2017) that the separation-rank is equal to the rank of the matricized conv-
weights tensor, it is precisely equal to the Schmidt number. The analogy to physics suggests that
correlation measures more sensitive than the separation rank may be borrowed, providing a more
sensitive algebraic perspective on the hypothesis space of convolutional networks, which takes into
account the relative magnitudes of JAKA,B’s non-zero singular values and not merely their number.
Physicists have a rich tool-set for exploiting knowledge regarding quantum entanglement measures
for the design of computational representations of quantum wave functions. We are now in a position
to borrow such tools, and use them for the design of convolutional networks. In particular, we will
establish a relation between the correlations modeled by a ConvAC and the widths of its hidden
layers, and make use of these relations for controlling the inductive bias of the network.
5	Layer Widths Effect on the Expressiveness of a Deep Network
In the previous section, we have seen that the coefficients or conv-weights tensor Ad1...dN, which
has MN entries, encapsulates the information regarding the correlations of the many-body quan-
tum wave function or of the function realized by a ConvAC. The curse of dimensionality manifests
itself in the exponential dependence on the number of particles or image patches. In a quantum
many-body setting, this renders impractical the ability to investigate or even store a wave function
of more than a few dozens of interacting particles. A common tool used to tackle this problem in the
physics community is a Tensor Network, which allows utilizing prior knowledge regarding correla-
tions when attempting to represent an exponentially complicated wave function with a polynomial
3∣ψi is conventionally chosen to be normalized such that the singular values uphold Pa ∣λα∣2 = 1. This
can be relaxed and the entropy may be defined on the normalized singular values.
5
Published as a conference paper at ICLR 2018
amount of resources. In appendix C we provide a thorough introduction to TNs, which were briefly
introduced in section 2. In this section, we draw inspiration from the physics approach and present
a construction of a ConvAC as a TN. This construction will allow us to demonstrate how adequately
tailoring the number of channels in each layer of the deep network can enhance its expressivity by
fitting the form of the function realized by it to given correlations of the input. In this we show
how the parameters of the ConvAC can be most efficiently distributed given prior knowledge on the
nature of the input, which is in fact matching the inductive bias to the task at hand.
Fig. 3 shows the TN which represents a one-
dimensional4 network equivalent to the one
shown in fig. 2, with pooling windows of size
2 and N = 8 (see appendix D for full details
of construction). The round (order 2) nodes in
each layer represent matrices holding the con-
volutional weights of that layer. The triangle
nodes correspond to a special tensor that hosts
1’s on its super-diagonal and 0’s elsewhere, ef-
fectively enforcing the same channel pooling
attribute of the network. The tensor Ayd ...dN is
obtained upon summation over all the indices
Figure 3: TN of the weights tensor Ayd ...dN
which correspond to internal edges, leaving the external edges which correspond to d1 , ..., dN , y
open. As mentioned above, a TN is a weighted graph, and the weights marked next to each edge
in this TN are equal by construction to the number of channels in the corresponding ConvAC layer
l, denoted rl . This last equivalence will allow us to draw a direct relation between the number of
channels in each layer of a deep ConvAC and the functions it is able to model. Accordingly, it will
allow us to provide prescriptions regarding the layer widths for the design of a network that is meant
to support known input correlations.
Our main result, presented in theorem 1, relies on one of the most recent advances in the study
of the quantitative connection between quantum entanglement and TNs, namely ‘quantum min-cut
max-flow’ (Cui et al., 2016). The key accomplishment that the TNs tool brings forth, is the ability to
apply graph-theoretic tools to a deep convolutional network. Specifically, we tie the network’s ability
to model correlations between two disjoint input regions A and B, as measured by the Schmidt
entanglement measure, to the minimal value, over all cuts separating A from B , of the multiplication
of the cut edges’ weights (the multiplicative minimal cut).
Theorem 1. (proof in appendix E) Let (A, B) be a partition of [N], and JAy KA,B be the matri-
cization w.r.t. (A, B) of the conv-weights tensor Ay of the ConvAC depicted in fig. 2 with pooling
windows of size 2. Assume that the channel numbers across the layers are all powers of the same
integer,5 and suppose we randomize the network weights by some continuous distribution. Then,
with probability 1, the rank of the matricization JAy KA,B (the Schmidt measure w.r.t. (A, B)) is
equal to the multiplicative minimal cut separating A from B in the respective TN.
Theorem 1 leads to practical implications regarding the construction of a deep network architec-
ture when there is prior knowledge on the task at hand. If one wishes to construct a deep ConvAC
that is expressive enough to model an intricate correlation structure according to some partition,
it is advisable to choose the channel numbers such that the network is able to support such cor-
relations, by ensuring that all the cuts separating these two parts in the corresponding TN have
high weights. For example, consider the left-right partition in which A and B hold the left and
right input patches, respectively. The multiplicative minimal cut weight is in this case equals
min(rL-1, rL-2, ..., rl2(L-2-l) , ..., r0N/4, MN/2), where L := log2 N (in the example given in fig. 3,
L = 3). We see that choosing a small number of channels for the deeper layers can create an
undesired ‘shortcut’ which harms the expressiveness of the network in a way that prevents it from
modeling the long ranged correlations which correspond to this partition, present for example in
symmetric face images. Alternatively, considering the interleaved partition where A and B hold
4The one-dimensional case is addressed for simplicity, the analysis for a two-dimensional setting is similar.
This can also correspond to a one-dimensional signal, e.g. sound or text.
5In appendix E we prove upper and lower bounds for a general setting of channel numbers. Furthermore,
in appendix G we present simulations which indicate that deviations from the equality stated in theorem 1 are
quite rare and unsubstantial in value.
6
Published as a conference paper at ICLR 2018
the odd and even input patches, respectively, the multiplicative minimal cut weight will be equal to
min(rN/4, MN/2) - dependent only on the first layers, channel numbers, and exponential in N.6
The partitions mentioned above represent two extreme cases that correspond to shortest and longest
ranged correlations. However, the min-cut result applies to any partition of the inputs, so that conclu-
sions regarding the layer widths can be established for any intermediate length-scale of correlations.
For example, the relevant factors that contribute to the min-cut between (A, B) for which both A
and B have contiguous segments ofa certain length ξ are M, r0, ..., rdlog ξe . This is in fact a general-
ization of the treatment above with ξ = 1 for the interleaved partition and ξ = N/2 for the left-right
partition, and can be understood by flow considerations in the graph underlying the TN: a cut that is
located above a certain sub-branch can not assist in cutting the flow between A and B vertices that
reside within that sub-branch. Thus, the addition of more parameters to layers l such that l > log2ξ
would result in an increase of the capacity of edges in the TN which will not belong to the min-cut.
The observation presented in the previous paragraph has practical implications. For a data-set with
features of a characteristic size D (e.g. in a two-dimensional digit classification task, D could be
the size of digits that are to be classified), such partitions of length scales ξ < D are guaranteed to
separate between different parts of a feature placed in any input location. In order to classify a feature
correctly, an elaborate function modeling a strong dependence between different parts of it must
be realized by the network. As discussed above, this means that a high measure of entanglement
w.r.t. partitions that separate the feature must be supported by the network, and theorem 1 allows
us to describe this measure of entanglement in terms of a min-cut in the TN graph. The following
‘rule of thumb’ is thus implied - the channel numbers up to layer l = dlog2 De are more important
than those of deeper layers, therefore it is advisable to concentrate more parameters (in the form of
more channels) in these levels. Additionally, an analysis of the min-cut in the ConvAC TN shows
that among the more important layers l = 1, ..., log2 D, deeper ones need to be wider, as is apparent
for example in the above expression of the minimal cut weight for the high-low partition. In a
more general task it may be hard to point out a single most important length scale D, however the
conclusions presented in this section can be viewed as an incentive to develop adequate means of
characterizing the most relevant data correlations for different tasks.
6	Experiments
The min-cut analysis on the TN representing a deep ConvAC translates prior knowledge on how
correlations among input variables (e.g. image patches) are modeled, into the architectural design
of number of channels per layer in a ConvAC. In this section, we demonstrate empirically that the
theoretical findings established above for the deep ConvAC, apply to a regular convolutional network
architecture which involves the more common ReLU activations and average or max pooling. Two
tasks were designed, one with a short characteristic length to be referred to as the ‘local task’, and
the other with a long characteristic length to be referred to as the ‘global task’. Both tasks are based
on the MNIST data-set and consist of 64 × 64 black background images on top of which resized
binary MNIST images were placed in random positions, to make sure we account for correlation
distances without biasing towards a particular location in the image. For the local task, the digits
were shrunken to 8 × 8 images while for the global task they were enlarged to size 32 × 32. Note
that both tasks are more challenging than the standard MNIST task, and that the local task is even
more challenging than the global one.
We designed two network architectures that tackle these two tasks, with a difference in the channel
ordering scheme. Each architecture was designed to better match the correlation structure of one of
the above tasks, in accordance with the analysis presented in the previous section. In both networks,
the first layer is a representation layer - a 3 × 3 (stride 1) shared convolutional layer. Following it
are 6 hidden layers, each with 1 × 1 shared convolution kernels followed by ReLU activations and
2× 2 max pooling (stride 2). Classification in both networks was performed through Y = 10 outputs,
with prediction following the strongest activation.The difference between the two networks is in the
channel ordering - in the wide-base (WB) network they are wider in the beginning and narrow down
in the deeper layers, while in the wide-tip (WT) network they follow the opposite trend. Specifically,
we set a parameter r to determine each pair of such networks according to WB: [10; 4r; 4r; 2r; 2r; r;
r; 10] and WT: [10; r; r; 2r; 2r; 4r; 4r; 10] (The channel numbers from left to right go from shallow
6The depth efficiency result shown in Cohen et al. (2016b), can be reproduced by similar graph-theoretic
considerations that are related to the exponential dependence in this expression, see appendix F.
7
Published as a conference paper at ICLR 2018
to deep). According to the above conclusions, this choice for increase of widths towards deeper
layers in the WT network makes it fit the global task in which all layers are important. similarly,
the conclusions dictate that the choice WB network makes it fit the local task, in which shallower
layers are more important. The specific channel arrangement ensures that the amount of learned
parameters for both configurations is equal.
Fig. 4 shows the results of applying both the
WB and WT networks to the local and global
tasks. Each task consisted of 60000 training
images and 10000 test images, in correspon-
dence with the MNIST database. Indeed, the
WB network significantly outperforms the WT
network in the local task, whereas a clear oppo-
site trend can be seen for the global task. This
complies with our theoretical analysis, accord-
ing to which the WB network which holds more
parameters in shallow layers should be able to
support short correlation lengths of the input,
whereas the WT network in which deeper lay-
ers are wider is predicted to put focus on longer
correlation lengths. The fact that the global task
Figure 4: Applying ReLU networks with max
pooling to the global and local classification tasks.
gets higher accuracies for all choices of r is unsurprising, as it is clearly an easier task.
Overall, these experiments constitute a demonstration of how prior knowledge regarding a task at
hand may be used to tailor the inductive bias of a deep convolutional network by appropriately
designing layer widths. We have shown how phenomena that were indicated by the theoretical
analysis that was presented in this paper in the context of ConvACs, manifest themselves on the most
prevalent and successful convolutional network architectures (ReLU activation, max pooling).7
7 Discussion
The construction of a deep ConvAC in terms of a TN brought forth the main theoretical achievements
of this paper. This method enabled us to carry a graph-theoretic analysis of a convolutional network,
and tie its expressiveness to a minimal cut in the graph characterizing it. Our construction began
with a structural equivalence between the function realized by a ConvAC and a quantum many-body
wave function. This facilitated the transfer of mathematical and conceptual tools employed by physi-
cists, such as the tool of TNs and the concept of ‘entanglement measures’, providing well-defined
quantifiers for a deep network’s expressive ability to model correlations between regions of its input.
By employing these tools, we were able to present theoretical observations regarding the role that
the number of channels in each layer fulfills in the overall expressiveness of a deep convolutional
network, and how they affect its ability to model given input correlations. Furthermore, practical
implications were presented for the construction of a deep network architecture when there is prior
knowledge regarding the input correlations.
Apart from the direct results discussed above, two important interdisciplinary bridges emerge from
this work. The results we drew between min-cut in the graph representation ofa ConvAC to network
expressivity measures, may constitute an initial example for employing the connection to TNs for the
application of graph-theoretic measures and tools to the analysis of the function realized by a deep
convolutional network. The second bridge, is the mathematical connection between the two fields
of quantum physics and deep learning. The field of quantum TNs is a rapidly evolving one, and the
established construction of a successful deep learning architecture in the language of TNs may allow
applications and insights to be transferred between the two domains. For example, the tree shaped
TN that was shown in this work to be equivalent to a deep convolutional network, has been known
in the physics community for nearly a decade to be inferior to another deep TN architecture by the
name of MERA (Vidal, 2008), in its expressiveness and in its ability to model correlations.
The MERA TN constitutes an exemplar case of how the TNs/deep-learning connection established
in this work allows a bi-directional flow of tools and intuition. MERA architecture introduces over-
7In addition to ReLU ConvNets, we also evaluated ConvACs (results omitted for space). The accuracies
were on average 1 percent lower, however the observed trends were the same - an order of 5 percent advantage
in favor of WB (WT) network on the local (global) task (respectively).
8
Published as a conference paper at ICLR 2018
laps by adding ‘disentangling’ operations prior to the pooling operations, which, in translation to
terms of deep learning, effectively mix activations that are intended to be pooled in different pooling
windows. Physicists have a good grasp of how these specific overlapping operations allow a most
efficient representation of functions that exhibit high correlations at all length scales (Vidal, 2007).
Accordingly, a new view of the role of overlaps in the high expressivity of deep networks as effec-
tively ‘disentangling’ intricate correlations in the data can be established. In the other direction, as
deep convolutional networks are the most empirically successful machine learning architectures to
date, physicists may benefit from trading their current ‘overlaps by disentangling’ scheme to the use
of overlapping convolutional windows (proven to contribute exponentially to the expressive capacity
of neural networks by Sharir and Shashua (2017)), in their search for expressive representations of
quantum wave functions. Overall, We view this work as an exciting bridge for transfer of tools and
ideas between fields, and hope it will reinforce a fruitful interdisciplinary discourse.
References
Jonas Ballani, Lars Grasedyck, and Melanie Kluge. Black box approximation of tensors in hierarchical tucker
format. Linear algebra and its applications, 438(2):639-657, 2013.
Giuseppe Carleo and Matthias Troyer. Solving the quantum many-body problem with artificial neural networks.
Science, 355(6325):602-606, 2017.
Jing Chen, Song Cheng, Haidong Xie, Lei Wang, and Tao Xiang. On the equivalence of restricted boltzmann
machines and tensor network states. arXiv preprint arXiv:1701.04831, 2017.
Nadav Cohen and Amnon Shashua. Simnets: A generalization of convolutional networks. Advances in Neural
Information Processing Systems (NIPS), Deep Learning Workshop, 2014.
Nadav Cohen and Amnon Shashua. Convolutional rectifier networks as generalized tensor decompositions.
International Conference on Machine Learning (ICML), 2016.
Nadav Cohen and Amnon Shashua. Inductive bias of deep convolutional networks through pooling geometry.
In 5th International Conference on Learning Representations (ICLR), 2017.
Nadav Cohen, Or Sharir, and Amnon Shashua. Deep simnets. IEEE Conference on Computer Vision and
Pattern Recognition (CVPR), 2016a.
Nadav Cohen, Or Sharir, and Amnon Shashua. On the expressive power of deep learning: A tensor analysis.
Conference On Learning Theory (COLT), 2016b.
Shawn X Cui, Michael H Freedman, Or Sattath, Richard Stong, and Greg Minton. Quantum max-flow/min-cut.
Journal of Mathematical Physics, 57(6):062206, 2016.
G Bv Dantzig and DR Fulkerson. On the min cut max flow theorem of networks. Annals of Mathematical
Study, 38:215-222, 1956.
Peter Elias, Amiel Feinstein, and Claude Shannon. A note on the maximum flow through a network. IRE
Transactions on Information Theory, 2(4):117-119, 1956.
Glen Evenbly and Guifre Vidal. Tensor network states and geometry. Journal of Statistical Physics, 145(4):
891-918, 2011.
Lester R Ford and Delbert R Fulkerson. Maximal flow through a network. Canadian journal of Mathematics,
8(3):399-404, 1956.
Wolfgang Hackbusch. Tensor Spaces and Numerical Tensor Calculus, volume 42 of Springer Series in Com-
putational Mathematics. Springer Science & Business Media, Berlin, Heidelberg, February 2012.
Brian C Hall. Quantum theory for mathematicians. Springer, 2013.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In
Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 770-778, 2016.
Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. ImageNet Classification with Deep Convolutional
Neural Networks. Advances in Neural Information Processing Systems, pages 1106-1114, 2012.
Yann LeCun, Yoshua Bengio, and Geoffrey Hinton. Deep learning. Nature, 521(7553):436-444, May 2015.
9
Published as a conference paper at ICLR 2018
Yoav Levine, Or Sharir, and Amnon Shashua. Benefits of depth for long-term memory of recurrent networks.
arXiv preprint arXiv:1710.09431, 2017.
Karl Menger. Zur allgemeinen kurventheorie. Fundamenta Mathematicae, 10(1):96-115, 1927.
Roman Orus. A practical introduction to tensor networks: Matrix product states and projected entangled pair
states. Annals of Physics, 349:117-158, 2014.
Ivan V Oseledets. Tensor-train decomposition. SIAM Journal on Scientific Computing, 33(5):2295-2317, 2011.
Ivan V Oseledets and Eugene E Tyrtyshnikov. Breaking the curse of dimensionality, or how to use svd in many
dimensions. SIAM Journal on Scientific Computing, 31(5):3744-3759, 2009.
Stellan Ostlund and Stefan Rommer. Thermodynamic limit of density matrix renormalization. Physical review
letters, 75(19):3537, 1995.
Robert NC Pfeifer, Glen Evenbly, Sukhwinder Singh, and Guifre Vidal. Ncon: A tensor network contractor for
matlab. arXiv preprint arXiv:1402.0939, 2014.
Martin B Plenio and Shashank Virmani. An introduction to entanglement measures. Quantum Information and
Computation, 7(1):001-051, 2007.
John Preskill. Lecture notes for physics 229: Quantum information and computation. California Institute of
Technology, 16, 1998.
Or Sharir and Amnon Shashua. On the expressive power of overlapping operations of deep networks. arXiv
preprint arXiv:1703.02065, 2017.
Or Sharir, Ronen Tamari, Nadav Cohen, and Amnon Shashua. Tractable generative convolutional arithmetic
circuits.
Abner Shimony. Degree of entanglement. Annals of the New York Academy of Sciences, 755(1):675-679, 1995.
Edwin Stoudenmire and David J Schwab. Supervised learning with tensor networks. In D. D. Lee,
M. Sugiyama, U. V. Luxburg, I. Guyon, and R. Garnett, editors, Advances in Neural Information Processing
Systems 29, pages 4799-4807. Curran Associates, Inc., 2016.
Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jon Shlens, and Zbigniew Wojna. Rethinking the in-
ception architecture for computer vision. In Proceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 2818-2826, 2016.
Barbara M. Terhal and PaWeI Horodecki. Schmidt number for density matrices. Phys. Rev. A, 61:040301, Mar
2000. doi: 10.1103/PhysRevA.61.040301.
Aaron van den Oord, Sander Dieleman, Heiga Zen, Karen Simonyan, Oriol Vinyals, Alex Graves, Nal Kalch-
brenner, Andrew Senior, and Koray Kavukcuoglu. Wavenet: A generative model for raw audio. CoRR
abs/1609.03499, 2016.
Vlatko Vedral and Martin B Plenio. Entanglement measures and purification procedures. Physical Review A,
57(3):1619, 1998.
Frank Verstraete and J Ignacio Cirac. Renormalization algorithms for quantum-many body systems in two and
higher dimensions. arXiv preprint cond-mat/0407066, 2004.
Guifre Vidal. Entanglement renormalization. Physical review letters, 99(22):220405, 2007.
GUifre Vidal. Class of quantum many-body states that can be efficiently simulated. Physical review letters, 101
(11):110501, 2008.
10
Published as a conference paper at ICLR 2018
A Definition of Matricization
An important concept we make use of is matricization, which is essentially the rearrangement of a tensor as a
matrix. Suppose A is a tensor of order N and dimension Mi in each mode i ∈ [N] := {1, . . . , N}, and let
(A, B) be a partition of [N], i.e. A and B are disjoint subsets of [N] whose union gives [N]. We may write
A = {αι,...,α∣A∣ } where aι < •… < α∣A∣, and similarly B = {bι,...,b∣B∣} where bi < •… < b∣B∣. The
matricization of A w.r.t. the partition (A, B), denoted JAKA,B , is the Q|tA=|1 Mat -by-Q|tB=|1 Mbt matrix holding
the entries ofA such that Ad1...dN is placed in row index 1 + P|tA=|1(dat - 1) Q|tA0=| t+1 Mat0 and column index
1 + P|tB=|1(dbt - 1) Q|tB0 =| t+1 Mbt0.
B Introduction to Quantum Wave Functions
We provide below a short introduction to the notation used by physicists when describing quantum mechanical
properties of a many-body system. We follow relevant derivations in Preskill (1998) and Hall (2013), refer-
ring the interested reader to these sources for a more comprehensive mathematical introduction to quantum
mechanics.
A state of a system, which is a complete description of a physical system, is given in quantum mechanics as a
ray in a Hilbert space (to be defined below). Relevant Hilbert spaces in quantum mechanics are vector spaces
over the complex numbers. We restrict our discussion to vector spaces over R, as the properties related to
complex numbers are not required for our analysis and do not affect it. Physicists denote such vectors in the
‘ket' notation, in which a vector ψ is denoted by: ∣ψi ∈ H. The Hilbert space H has an inner product denoted
by hφ∣ψi, that maps a pair of two vectors in H to a scalar. This inner product operation is also referred to as
'projecting ∣ψi onto |。〉'. A ray is an equivalence class of vectors that differ by multiplication by a nonzero
scalar. For any nonzero ray, a representative of the class, ∣ψi, is conventionally chosen to have a unit norm:
hψ∣ψi = 1. A 'bra' notation hφ∣, is used for the 'dual vector, which formally is a linear mapping between
vectors to scalars defined as ∣ψi → <φ∣ψ). We can intuitively think of a 'ket' as a column vector and 'bra' as a
row vector.
Relevant Hilbert spaces can be infinite dimensional or finite dimensional. We limit our discussion to quantum
states which reside in finite dimensional Hilbert spaces, as these lie at the heart of our analogy to convolutional
networks. Besides being of interest to us, these spaces are extensively investigated in the physics community
as well. For example, the spin component of a spinful particle's wave function resides in a finite dimensional
Hilbert space. One can represent a general single particle state ∣ψi ∈ Hi, where dim(Hi) = M, as a linear
combination of some orthonormal basis vectors:
M
lΨi = X Vd ∣ψdi ,	(6)
d=i
where V ∈ RM is the vector of coefficients compatible with the basis {∖ψdi}M=ι of Hi, each entry of which
can be calculated by the projection: Vd = hψd∖ψ).
The extension to the case of N particles, each with a wave function residing in a local finite dimensional Hilbert
space Hj for j ∈ [N] (e.g. N spinful particles), is readily available through the tool of a tensor product. In
order to define a Hilbert space which is the tensor product of the local Hilbert spaces: H := ZN=IHj, we
will specify its scalar product. Denote the scalar product in each Hj by h∙∖∙ij, then the scalar product in
the tensor product finite dimensional Hilbert space H = ZjN=iHj between ∖ψi := ZjN=i ψ(j)	∈ H and
∖φi := ZjN=i φ(j)E ∈ H is defined by: hφ∖ψi := QjN=i Dφ(j) ∖ψ(j) E , ∀ ψ(j)E , φ(j)E ∈ Hj.
For simplicity, we set the dimensions of the local Hilbert spaces Hj to be equal for all j, i.e. ∀j : dim(Hj ) =
M. In the spin example, this means that the particles have the same spin, e.g. for N electrons (spin 1/2),
M = 2. Denoting as above the orthonormal basis of the local Hilbert space by {∖ψdi}dM=i, the many-body
quantum wave function ∖ψi ∈ H = ZjN=iHj can be written as:
M
∖Ψi =	X	Adi …dN ∖ψdιi ⑻…⑻ ∖ψdN i ,	⑺
d1 ...dN =i
Reproducing eq. 2.
B.1	Derivation of the Schmidt Decomposition
Consider a partition of the above described system of N particles labeled by integers [N] := {1, . . . , N},
which splits it into two disjoint subsystems A ∪ B = [N] such that A = {ai,..., α∣A∣ } with ai < ... < α∣A∣
11
Published as a conference paper at ICLR 2018
and B = {b1, . . . , b|B| } with b1 < ... < b|B|. Let HA and HB be the Hilbert spaces in which the many-body
wave functions of the particles in subsystems A and B reside, respectively, with H = HA % HB .8 The
many-body wave function in eq.2 can be now written as:
dim(HA) dim(HB)
IΨi = X X JAKa,b)α,β∣ΨA> %∣ΨB) ,	(8)
α=1	β=1
where {|矽像〉}：=(HA) and {∣ψB〉}：=1”") are bases for HA and HB, respectively,9 and JAKa,b is the
matricization of A w.r.t. the partition (A, B). Let us denote the maximal rank of JAKA,B by r :=
min(dim(HA), dim(HB)). A singular value decomposition on JAKA,B results in the following form (also
referred to as the Schmidt decomposition):
r
∣Ψi = X λα 卜A) % ∣ΦB^ ,	(9)
α=1
where λι ≥ •… ≥ λr are the singular values of JAKA,B , and {∣φA)}α=ι, {∣ΦB)}α=ι are r vectors in
new bases for HA and HB, respectively, obtained by the decomposition. It is noteworthy that since ∣ψi is
conventionally chosen to be normalized, the singular values uphold Pa | λα 12 = 1, however this constraint can
be relaxed for our needs.
C Introduction to Tensor Networks
A Tensor Network (TN) is formally represented by an underlying undirected graph that has some special at-
tributes, we elaborate on this formal definition in appendix E.1. In the following, we give a more intuitive
description of a TN, which is nonetheless exact and required for our construction of the ConvAC TN. The basic
building blocks of a TN are tensors, which are represented by nodes in the network. The order of a tensor
represented by a node, is equal to its degree — the number of edges incident to it, also referred to as its legs.
Fig. 5(a) shows three examples: 1) A vector, which is a tensor of order 1, is represented by a node with one
leg. 2) A matrix, which is a tensor of order 2, is represented by a node with two legs. 3) Accordingly, a tensor
of order N is represented in the TN as a node with N legs. In a TN, each edge is associated with a number
called the bond dimension. The bond dimension assigned to a specific leg of a node, is simply the dimension
of the corresponding mode of the tensor represented by this node (see definitions for a mode and its dimension
in section 2).
A TN is a collection of such tensors represented by nodes, with edges that can either be connected to a node
on one end and loose on the other end or connect between two nodes. Each edge in a TN is represented by
an index that runs between 1 and its bond dimension. An index representing an edge which connects between
two tensors is called a contracted index, while an index representing an edge with one loose end is called an
open index. The set of contracted indices will be denoted by K = {k1 , ..., kP } and the set of open indices
will be denoted by D = {d1 , ..., dN }. The operation of contracting the network is defined by summation
over all of the P contracted indices. The tensor represented by the network, Ad1...dN, is of order N, i.e. its
modes correspond to the open indices. Given the entries of the internal tensors of the network, Ad1 ...dN can be
calculated by contracting the entire network.
An example for a contraction of a simple TN is depicted in fig. 5(b). There, a TN corresponding to the
operation of multiplying a vector v ∈ Rr1 by a matrix M ∈ Rr2 ×r1 is performed by summing over the
only contracted index, k. As there is only one open index, d, the result of contracting the network is an order
1 tensor (a vector): u ∈ Rr2 which upholds u = Mv. In fig. 5(c) a somewhat more elaborate example
is illustrated, where a TN composed of order 2 and 3 tensors represents a tensor of order 5. This network
represents a decomposition known as a tensor train (Oseledets (2011)) in the tensor analysis community or a
matrix product state (MPS) (see overview in e.g. OrUS (2014)) in the condensed matter physics community,
which arranges order 3 tensors in such a ‘train’ architecture and allows the representation of an order N tensor
with a linear (in N) amount of parameters. The MPS exemplifies a typical desired quality of TNs. The
decomposition of a higher order tensor into a set of sparsely interconnected lower order tensors, was shown
(Oseledets and Tyrtyshnikov (2009); Ballani et al. (2013)) to greatly diminish effects related to the curse of
dimensionality discussed above.
8Actually, H = HA % HB with equality obtained upon a permutation of the local spaces that is compliant
with the partition (A, B).
9It is possible to write ∣ψA) = ∣ψdaι〉% …％ lΨda∣Α∣ i and ∣ψB〉= ∣ψdbj % …％ lΨdb∣Β∣ i With
some mapping from {a1 , . . . , a|A| } to α and from {b1 , . . . , b|B| } to β which corresponds to the matricization
formula given in appendix A.
12
Published as a conference paper at ICLR 2018
a)
Vector:
Matrix:	Order N tensor:
b)	I d ∈ [r2]
/-----1--------、	d ∈ h]
! 4	I
卜 ∈ h]∣ 二
I	I	U ∈ 史2
--
∈
∀2
£ - ⅜
5
T ------------7α
/ 由
Mv = u
Σ2k=l MdkDk = Ud
左Id2d3d4d5 =	):	fcι ^kι ʤ ⅛2	ʤ ⅛3 ʤ ⅛4 ʤ
k1#2,卜3#4 = 1
Figure 5: A quick introduction to Tensor Networks. (a) Tensors in the TN are represented by
nodes. The degree of the node corresponds to the order of the tensor represented by it. (b) A matrix
multiplying a vector in TN notation. The contracted indices are denoted by k and are summed upon.
The open indices are denoted by d, their number equals the order of the tensor represented by the
entire network. All of the indices receive values that range between 1 and their bond dimension. The
contraction is marked by the dashed line. (c) A more elaborate example, of a network representing a
higher order tensor via contractions over sparsely interconnected lower order tensors. This network
is a simple case of a decomposition known as a tensor train (Oseledets (2011)) in the tensor analysis
community or a matrix product state (See overview in e.g. OruS (2014)) in the condensed matter
physics community.
13
Published as a conference paper at ICLR 2018
Figure 6: The original Convolutional Arithmetic Circuits network as presented by Cohen et al.
(2016b).
D Tensor Network Construction of a ConvAC
We begin by reviewing tensor decompositions of the conv-weights tensor shown in Cohen et al. (2016b) to be
equivalent to the shallow and deep versions of the ConvAC network given in the main text and reproduced for
convenience in fig. 6.
The CP decomposition of the conv-weights tensor corresponds to a ConvAC depicted in fig. 6 with one hidden
layer, which collapses the entire spatial structure through global pooling - a shallow ConvAC. Explicitly, the
CP decomposition of the order N conv-weights tensor of a specific class y is a sum of rank-1 tensors, each of
which is attained by a tensor product of N weights vectors:
K
Ay = X vk ∙ ak,1 ⑥…Z ak,N,	(10)
k=1
where vy ∈ RK,∀y ∈ [Y] and ak,j ∈ RM,∀k ∈ [K],j ∈ [N].
The deep version of fig. 6, where the pooling windows between convolutional layers are of minimal size,
corresponds to a specific tensor decomposition of Ay, which is a restricted version of a hierarchical Tucker
decomposition, referred to in short as the HT decomposition. The restriction is related to the fact that the
pooling scheme of the ConvAC architecture presented in fig. 6 involves only entries from the same channel,
while in the general HT decomposition pooling operations would involve entries from different channels. For
brevity of notation, we will present the expressions for a scenario where the input patches are aligned along
a one-dimensional line (can also correspond to a one-dimensional signal, e.g. sound or text), and the pooling
widows are of size 2. The extension to the two-dimensional case follows quite trivially, and was presented in
Cohen and Shashua (2017). Under the above conditions, the decomposition corresponding to a deep ConvAC
can be defined recursively by (Cohen et al. (2016b)):
r0
φ1,j,γ = X a1α,j,γa0,2j-1,α Z a0,2j,α
α=1
• ∙ ∙
rl-1
φl,j,γ	= X alα,j,γ φl-1,2j-1,α Z φl-1,2j,α
α=ι	`—{z—} `—{z—}
order 2l-1	order 2l-1
•••
rL-1
Ay	= X aαL,y φL-1,1,α Z φL-1,2,α.	(11)
a=1	' -{z- ' ' -{z-'
order N order N
The decomposition in eq. 11 recursively constructs the conv-weights tensor {Ay}y∈[Y] by assembling vectors
{a0,j,γ}j∈[N],γ∈[ro] into tensors {φl,j,γ}1∈[L-i],j∈[N∕2i],γ∈[r1] in an incremental fashion. This is done in the
form of tensor products, which are the natural form for tensor decompositions. The index l stands for the level
in the decomposition, corresponding to the lth layer of the ConvAC network given in fig. 6. j represents the
‘location’ in the feature map of level l, and γ corresponds to the individual tensor in level l and location j .
The index rl is referred to as level-l rank, and is defined to be the number of tensors in each location of level
l (we denote for completeness rL := Y ). In the ConvAC network given in fig. 6, rl is equal to the number of
14
PUbHShed as a ConferenCePaPer ar ICLR 2018
FigUreSThe TN equivalent: Of rhe CP decomposition。ThiSiS a TN represenrarδ∙n Ofrhe order
N WeighrSrenSor Adl∙∙∙dN Underlying rhe CalCUIarion Ofrhe ConVACin bg∙ 6 in Hs shallow form”
i∙e. Wirh One hidden IayerfolOWed by a global POOHng OPerarion WhiCh COIIaPSeS rhe feature maps
ins Y different: ClaSS SCores∙ The mas.CeS 4shold rhe ConVoIUro∙nal WeighrS Of rhe hidden Iayer
and rhe matrix G holds rhe WeighrS Ofrhe final dense Iayer∙ The CenrraI 5 Snsor effectiveIy enforces
rhe Same ChanneI POoHng" as Can be Seen by irs form in eq∙ 12 and Hs role in rhe CalCUlarion Of this
TN given in eq∙ 13∙
ChannelSin fhe Fh Iayer ——This is imporfanf in OUr analysis Offhe role PIayed by fhe ChanneI numbers。The
fensor 0εa is Of Order 2「and We assume for SimPHeify fhaf N — fhe Order Of‰、is a PoWer Of 2 (This is
mereIy a Technical assumption also madeB∙HaCkbUSCh (2012)“ if does noflimi 二 he generality Offhe anaIySiS) ∙
TheParameferS Offhe decomposition arefhe HnalleVeI WeighfS (aLm m 为/ ——1 T∈M二he Wermediafelevels-
Weightxac∙a m 药7Ih 虫LLLj 虫 N、2 二 a∈rτ÷and the Hrs 二evel weights^。Qa m 为同丁虫 Ma 虫 T。.
D∙ 1 TENSOR NETWORK CONSTRUCTlON OF A SHALLOW CONVAC
In Orderfo COnSlTUC 二 he TN equivalent: Offhe ShalloW COnVACWe define fhe Order N+1 fensor 5 m^K XXK
referred fo as fhe 6 TenSOL as follows】
A .——JL 于 U ∙: UkN+1 二Y
#:*N+1 ∙——1 Oy Other υjise 一
Wifh k- m IK- 4j m 12 十 一一" Le∙ Hs entries are equal fo 1 Only On fhe SUPer—diagonal and are Zero OfherWiSe∙
We ShalI draw nodes which CorreSPOnd fo SUCh 6 Snsors as triangles in fhe TN二O remind fhe reader Offhe
resacfion givenB∙eq∙ 12∙ Lef G m %XK be a maaX holding fhe COnVoIUfo∙nal Weighf VeCfor Offhe HnaI
IayerVy m IRK in ifs y-h row and Ief U(j) m IRKX 同 be a matrix holding fhe COnVOlUfiOnaI WeighfS VeCfor
JQ m in ifs Eh row One Can ObSerVe fhaf Per ClaSS 穿 fhe Eh SUmmandB∙eq∙ 1。is equal fo fhe Snsor
ProdUCf Offhe N VeeforS residing in fhe 4 丁 rows Of all fhe matrices U(j)〉j m^L mu≡PHed by a HnaI Weighf
associated Wifh CIaSS y. TenSorS represenfed by nodes in fhe TN w≡have ParenfheSiSB∙fhe SUPerSeriPLWhiCh
denofe IabeIS SUCh as fhe POSifion jB∙fhe above = O diKerenfiafe Them from CrearindiCeS fhaf musf be Taken
info COnSiderafion When contracting fhe TN∙ Per COnVenfiOpsuch Crearindices Wi= be WriIienB∙fhe SUbSCriPf ∙
HaVB∙g defined fhe above 二 he TN equivalent: Offhe CP decomposition is≡usfrafed in Hg∙ 7∙ Indeed 二 hough
They represen 二 he Same exact: quan≡∙y=he form Of eq∙ 1。isnr√apparent: af a HrSf glance Offhe network Pomayed
in Hg∙ 7∙ ESSenfia=y 二 he TN equivalent: Offhe CP decomposition involves COnlTaCfions between fhe maaces
u(j)3 Ga and fhe 5 SnsoL as Can be SeenB∙fhe expression representing iΓr
K
‰dl∙∙∙dN "ME N + l^l)dl …UIZdNGykN + l ∙ (13)
A:11∙⅛n + 1=1
The role Offhe 5 Snsorin eq∙ 13 Can be ObSerVed as Cforcing- elemenfs Offhe 4 row Of any maaX U (j) fo be
mulfipHed Only by elemenfs Of %h rows Offhe Ofher matrices WhiChB∙eKecf enforces Same ChanneI pooling;。
Iolf One Were fo SWifCh fhe δk1…kz F eq∙ 13 by a general fensor Fl …kz m 为KX…XKa a TN equivalent:
Of an additional acclaimed decomposition WoUId be affainep nameIy fhe Theker decomposition. SimiIa二O
Ofhe二ensor decompositions二he TUCker decomposition is more CommOnly given in an OUfer PrOdUCf form
‰u∑x二晨NLaIMNatΘ…Θa 守 N
15
Published as a conference paper at ICLR 2018
Figure 8: The TN equivalent to the HT decomposition with a same channel pooling scheme cor-
responding to the calculation of a deep ConvAC given in fig. 6 with N = 8. Further details in
appendix D.2.
D.2 Tensor Network Construction of a Deep Convolutional Network
We describe below a TN corresponding to the deep ConvAC calculation, given by eq. 1. The ConvAC calcula-
tion is constructed as an inner-product between two tensors: the conv-weights tensor Ayd ...dN which is given
in eq. 11 in terms of a tensor decomposition, and A(dran.k..1d)N (x1, . . . , xN) which is a rank-1 tensor holding the
N ∙ M values of the representation layer (M representation functions applied on N input patches).
Fig. 8 displays in full the TN for an N = 8 ConvAC calculation. The upper block separated by a dashed line
is the TN representing the conv-weights tensor whereas the lower block represents the rank-1 inputs tensor.
Considering the upper block, it is worth noting that it is not a sketch ofa TN but the actual full description com-
pliant with the graph notations described in appendix C. Accordingly, the two legged nodes represent matrices,
where each matrix A(l,j) ∈ Rrl ×rl-1 (with r-1 := M) is constructed such that it holds the convolutional
weight vector al,j,γ ∈ Rrl-1 , γ ∈ [rl] in its γth row. The triangle node appearing between levels l - 1 and l
represents an order 3 tensor δ ∈ Rrl-1 ×rl-1 ×rl-1, obeying eq. 12. The δ tensor is the element which dictates
the same channel pooling in this TN construction.
As mentioned above, the lower block in fig. 8 is the TN representing A(dran.k..1d) (x1 , . . . , x8). This simple TN
is merely a single outer product of N = 8 vectors v(0,j) ∈ RM , j ∈ [N] composing the representation layer
presented in section 3, holding the values vd(0j,j) = fθdj (xj ). In compliance with the analogy between the
function realized by the ConvAC and the projection of a many-body wave function onto a product state shown
in eq. 4, the form A(dr1an.k..1d)8 assumes is exactly the form that the coefficients tensor of a product state assumes
when represented as a TN. As can be seen in fig. 8, a final contraction of the indices d1, ..., d8 results in the
class scores vector calculated by the ConvAC, hy(x1, ..., x8).
The calculation performed by a one-dimensional ConvAC for a general N (s.t. log2N ∈ N), is given by the
recursively defined TN representation shown in fig. 9. v(l,j) ∈ Rrl-1 is a vector of actual activations generated
during a computation across in the lth level of the network shown in fig. 6. Recall that r-1 := M, and that
v(0,j) ∈ RM , j ∈ [N] is a vector in the representation layer (see fig. 8). To demonstrate that this TN indeed
defines the calculations performed by a ConvAC, we conjecture that the equality in fig. 9 holds, namely that for
16
Published as a conference paper at ICLR 2018
Figure 9: A recursive building block of the deep ConvAC TN. This scheme is the TN equivalent
of two feature vectors in the l - 1 level being operated on with the conv→pool sequence of a deep
ConvAC shown in fig. 6, as is demonstrated below.
l = 1, ..., L = log2 N the dth component of each such activations vector is given in terms of the vectors in the
preceding layer by:
rl-1	rl-2
vd(l,j) = X X	A(kl1-k13,2j-1)vk(l3-1,2j-1)A(kl2-k14,2j)vk(l4-1,2j)δk1k2d
k1,k2 =1 k3,k4 =1
rl -1
= X (A(l-1,2j-1)v(l-1,2j-1))k1(A(l-1,2j)v(l-1,2j))k2δk1k2d,
k1,k2 =1
(14)
where d ∈ [rl-1]. In the first line of eq. 14 we simply followed the TN prescription given in appendix C and
wrote a summation over all of the contracted indices in the left hand side of fig. 9, and in the second line we
used the definition of matrix multiplication. According to the construction of A(l,j) given in appendix D.2,
the vector u(l,j) ∈ Rrl defined by u(l,j) := A(l,j)v(l,j), upholds uγ = Dal,j,γ, v(l,j) E , γ ∈ [rl] where the
weights vector al,j,γ ∈ Rrl-1 was introduced in eq. 11 . Thus, eq. 14 is reduced to:
rl -1
vd(l,j) =	X	Dal-1,2j-1,k1,v(l-1,2j-1)E Dal-1,2j,k2,v(l-1,2j)Eδk1k2d.	(15)
k1,k2 =1
Finally, by definition of the δ tensor, the sum vanishes and we obtain the required expression for the operation
of the ConvAC:
vd(l,j) =
l-1,2j-1,d
a
v(l-1,2j-1)
E Dal-1,2j,d
v(l-1,2j)	,
(16)
where an activation in the dth feature map of the lth level holds the multiplicative pooling of the results of two
activation vectors from the previous layer convolved with the dth convolutional weight vector for that layer.
Applying this procedure recursively is exactly the conv→pool→ ... →conv→pool scheme that lies at the heart
of the ConvAC operation (fig. 6). Recalling that rL := Y , the output of the network is given by:
hy(x1..., xN) = A(L,1)v(L,1).
(17)
To conclude this section, we have presented a translation of the computation performed by a ConvAC to a TN.
The convolutional weights are arranged as matrices (two legged nodes) placed along the network, and the same
channel pooling characteristic is made available due to three legged δ tensors in a deep network, and an N + 1
legged δ tensor in a shallow network. Finally, and most importantly for our analysis, the bond dimension of
each level in the TN representing the ConvAC is equal to rl, which is the number of feature maps (i.e. the
number of channels) comprising that level in the corresponding ConvAC architecture.
E Proof of Main Result
Below we provide upper and lower bounds on the ability of a deep ConvAC to model correlations of its inputs,
as measured by the Schmidt entanglement measure (see section 4 for definition). We address a general setting
17
Published as a conference paper at ICLR 2018
Figure 10: The components comprising a ‘ConvAC-weights TN’ φ that describes the weights tensor
Ay of a ConvAC, are an undirected graph G(V, E) and a bond dimensions function c. The bond
dimension is specified next to each edge e ∈ E, and is given by the function c(e). As shown in
appendix D.2, the bond dimension of the edges in each layer of this TN is equal to the number of
channels in the corresponding layer in the ConvAC. The node set in the graph G(V, E) presented
above decomposes to V = Vtn ∪ Vinputs, where Vtn (grey) are vertices which correspond to tensors
in the ConvAC TN and V inputs (blue) are degree 1 vertices which correspond to the N open edges in
the ConvAC TN. The vertices in V inputs are ‘virtual’ — were added for completeness, so G can be
viewed as a legal graph. The open edge emanating from the top-most tensor (marked by a dashed
line) is omitted from the graph, as it does not effect our analysis below — no flow between any two
input groups can pass through it.
of the number of channels in a deep ConvAC. The result stated in theorem 1, which applies when all of the
channel numbers in a deep ConvAC architecture are powers of some integer, is implied (specifically by the
equality of the upper bound in claim 1 and the lower bound in lemma 2 below). We begin by presenting a
description of the TN as a ‘legal’ graph in section E.1 and move on to prove the bounds in sec E.2.
E.1 The ConvAC Tensor Network as a Graph
The ability to represent a deep convolutional network (ConvAC) as a ‘legal’ graph, is a key accomplishment
that the Tensor Networks tool brings forth. Our main results rely on this graph-theoretic description and tie
the expressiveness of a ConvAC to a minimal cut in the graph characterizing it, via the connection to quantum
entanglement measures. This is in fact a utilization of the ‘Quantum min-cut max-flow’ concept presented by
Cui et al. (2016). Essentially, the quantum max-flow between A and B is a measure of the ability of the TN to
model correlations between A and B, and the quantum min-cut is a quantity that bounds this ability and can be
directly inferred from the graph defining it — that of the corresponding TN.
We focus on the TN that describes Ayd ...dN, which is the upper block of fig. 8 and is also reproduced as a
stand-alone TN in fig. 10, referred to as the ‘ConvAC-weights TN’ and denoted by φ. The TN φ has N open
edges with bond dimension M that are to be contracted with the inputs v(0,j) ∈ RM , j ∈ [N] and one open
edge with bond dimension Y representing the values Ady ...dN , y ∈ [Y ] upon such a contraction, as is shown
in fig 8.
To turn φ into a graph we do the following. First, we remove the open edge associated with the output. As our
analysis is going to be based on flow between groups of input vertices, no flow can pass through that open edge
therefore removing it does not influence our analysis. Second, we add N virtual vertices incident to the open
edges associated with the input. Those virtual vertices are the only vertices whose degree is equal to 1 (see
fig. 10). The TN φ is now described below using graph terminology:
•	An undirected graph G(V, E), with a set of vertices V and a set of edges E. The set of nodes is
divided into two subsets V = Vtn ∪ Vinputs, where VinPUtS are the N degree-1 virtual vertices and Vtn
corresponds to tensors of the TN.
18
Published as a conference paper at ICLR 2018
Figure 11: An example for the minimal multiplicative cut between A and B in a simple TN.
•	A function c : E → N, associating a number r ∈ N with each edge in the graph, that equals to the
bond dimension of the corresponding edge in the TN.
Having described the object representing the ConvAC-weights TN φ, let us define an edge-cut set with respect
to a partition of the N nodes of V inputs , and then introduce a cut weight associated with such a set. An edge-cut
set with respect to the partition V A ∪ V B = Vinputs is a set of edges C s.t. there exists a partition V A ∪ V B = V
with V A ⊂ V A , V B ⊂ V B, and C = {(u,v) ∈ E : U ∈ V A, v ∈ V B}. We note that this is a
regular definition of an edge-cut set in a graph G with respect to the partition of vertices (VA , VB). Let
C = {e1, ..., e|C| } be such a set, we define its multiplicative cut weight as:
|C|
WC =	c(ei).	(18)
i=1
The weight definition given in eq. 18 is simply a multiplication of the bond dimensions of all the edges in a cut.
Fig. 11 shows a pictorial demonstration of this weight definition, which is at the center of our results to come.
In the following section, we use a max-flow / min-cut analysis on φ to obtain new results on the expressivity of
the corresponding deep ConvAC via measures of entanglement w.r.t. a bi-partition of its input patches, which
are related to the number of channels in each layer of the ConvAC.
E.2 Bounds on the Entanglement Measure
In claim 1 below, we provide an upper bound on the ability of a deep ConvAC to model correlations of its
inputs, as measured by the Schmidt entanglement measure (see section 4). This claim is closely related to
attributes of TNs that are known in different forms in the literature.
Claim 1. Let (A, B) be a partition of [N], and JAy KA,B be the matricization w.r.t. (A, B) of a conv-weights
tensor Ay realized by a ConvAC depicted in fig. 6 with pooling window of size 2 (the deep ConvAC network).
Let G(V, E, c) be the graph representation of φ corresponding to the ConvAC-weights TN, and let (VA, VB)
be the degree 1 vertices partition in G corresponding to (A, B). Then, the rank of the matricization JAy KA,B
is no greater than: minC WC, where C is a cut w.r.t (VA, VB) and WC is the multiplicative weight defined
by eq. 18.
Proof. We will use the example shown in fig. 12(a) of a general TN with arbitrary connectivity. The edges of
the TN φ are marked by the index associated with them. Any index p ∈ {d, k} runs between 1 and its bond
dimension marked by cp, which upholds cp := c(ep) where ep ∈ E is the edge associated with the index p. For
the given partition (A, B), denote A = {a1 ,…，a∣A∣} , B = {b1,…，b∣B∣} and let IA ∪ IB = {d1,..., dN}
be the corresponding partition of external indices, where IA = {da1 , ..., da|A| } and IB = {db1 , ..., db|B| }.
Let HA and HB be the spaces corresponding to the different configurations of the indices in IA and IB ,
respectively, their dimensions given by:
|A|	|B|
dim(HA)=Ycdai , dim(HB)=Ycdbi.	(19)
i=1	i=1
In the example shown in fig. 12(a), the graph is arranged s.t. A is on the left and B is on the right. The marked
cut C that separates between A and B is arbitrarily chosen as a representative cut, and we denote the indices of
the cut edges by IC = {k1, ..., k|C| }. It is noteworthy, that any index ki in the cut is allowed to be an external
index, i.e. the cut is allowed to contain any amount of external edges.
Now, two contractions can be performed, separately contracting all the tensors to the left of the cut and to the
right of it. We are left with two higher order tensors, Xda1...da|A|k1...k|C| and Yk1...k|C|db1...db|B| each with
19
Published as a conference paper at ICLR 2018
Figure 12: Accompanying illustrations for the proof of claim 1. (a) An example for an arbitrarily
inter-connected TN with N external indices, arranged such that the indices corresponding to group
A are on the left and indices corresponding to group B are on the right. The cut marked in pink
in the middle separates between A and B . (b) A contraction of all the internal indices to the left
and to the right of the cut results in two higher order tensors, each with external indices only from
group A or B, connected to each other by the edges of the cut. (c) Finally coalescing the indices
into three groups, results in a matrix that on one hand is equal to the matricization w.r.t. (A, B) of
the tensor represented by a TN in (a), and on the other is equal to a multiplication of matrices, the
rank of which is upper bounded by Q|iC=|1 cki, thus proving claim 1.
external indices only from IA or IB, connected to each other by the edges of the cut, as is depicted in fig. 12(b).
If any cut index ci is equal to any external index dj, then respective tensor simply includes the term δcidj .
Note that the space corresponding to the different configurations of the cut indices IC is of dimensions
Q|iC=|1 cki, which is exactly equal to WC (see eq. 18), since by definition cki = c(eki). Next, coalesc-
ing the indices in IA into a single index representing all of the external indices to the left of the network:
l ∈ [dim(HA)], the indices in IB into a single index representing all of the external indices to the right of
the network: r ∈ [dim(HB)], and the indices in IC into a single index representing all of the cut indices:
m ∈ [WC], a TN which is equal to the matricization JAKA,B is obtained (fig. 12(c)).
According to the TN in fig. 12(c), the matricization JAKA,B can be written as a multiplication of two matrices.
Component wise, this can be written as:
WC
(JAKA,B)lr = X(JXKA,C)lm(JYKC,B)mr,	(20)
m=1
where any amount of cut indices that are also external indices translate as blocks of the identity matrix on
the diagonal. Finally, since this construction is true for any cut C w.r.t (A, B), the rank of JAKA,B upholds:
rank( JAK a,b ) ≤ mine WC, satisfying the claim for any general TN, and specifically for the ConvAC TN. 口
The upper bound provided above, alerts us when a deep ConvAC is too weak to model a desired correlation
structure, according to the number of channels in each layer. Below, we provide a lower bound similar in spirit
to a bound shown in Cui et al. (2016). Their claim is applicable for a TN with general tensors (no δ tensors),
and we adapt it to the ConvAC-weights TN (that has δ tensors) which in effect ensures us that the entanglement
measure cannot fall below a certain value for any specific arrangement of channels per layer.
Theorem 2. Let (A, B) be a partition of [N], and JAy KA,B be the matricization w.r.t. (A, B) ofa conv-weights
tensor Ay realized by a ConvAC depicted in fig. 6 with pooling window of size 2 (the deep ConvAC network).
Let G(V, E, c) the graph representation of φ corresponding to the ConvAC-weights TN, and let (V A, V B) be
the degree 1 vertices partition in G corresponding to (A, B).
Let φp be the TN represented by G(V, E, cp) where ∀e : cp(e) := maxn∈N pn s.t. pn ≤ c(e). In words,
φp is a TN with the same connectivity as φ, where all of the bond dimensions are modified to be equal the
closest power of p to their value in φ from below. Let WCp be the weight of a cut C w.r.t. (V A, V B) in the
network φp. Then, the rank of the matricization JAy KA,B is at least: maxp minC WCp almost always, i.e. for
all configurations of the ConvAC network weights but a set of Lebesgue measure zero.
20
Published as a conference paper at ICLR 2018
Theorem 2 above implies that the upper bound given in Claim 1 is saturated when all of the channel numbers
in a deep ConvAC architecture are powers of some integer p. For a general arrangement of channel numbers,
the upper bound is not tight and theorem 2 guarantees that the rank will not be lower than that of any ConvAC
architecture with channel numbers which are powers of some integer p yet are not higher than the original
ConvAC channel numbers. Even though this is the lower bound we prove, we have a reason to believe the
actual lower bound is much tighter. In section G, we show simulations which indicate that deviations from the
upper bound are actually quite rare and unsubstantial in value.
In the following we prove theorem 2. Our proof strategy is similar to the one taken in Cui et al. (2016),
however we must deal with the restricted δ tensors present in the network corresponding to a ConvAC (the
triangle nodes in fig. 8). We first quote and show a few results that will be of use to us. We begin by quoting a
claim regarding the prevalence of the maximal matrix rank for matrices whose entries are polynomial functions
— claim 2. Next, we quote a famous graph theory result known as the Undirected Menger’s Theorem (Menger
(1927), Elias et al. (1956), Ford and Fulkerson (1956)) which relates the number of edge disjoint paths in an
undirected graph to the cardinality of the minimal cut — theorem 3. After this, we show that the rank of
matricization of the tensor represented by φp that is defined in theorem 2, is a lower bound on the rank of
matricization of the tensor represented by φ — lemma 1. Then, we prove that the upper bound in claim 1
is tight when all of the channel numbers are any powers of the same integer p ∈ N — lemma 2 (effectively
showing theorem 1). Finally, when all the preliminaries are in place, we show how the result in theorem 2 is
implied.
Claim 2. Let M, N, K ∈ N, 1 ≤ r ≤ min{M, N} and a polynomial mapping A : RK → RM×N, i.e. for
every i ∈ [M] and j ∈ [N] it holds that Aij : RK → R is a polynomial function. If there exists a point
x ∈ RK s.t. rank(A(x)) ≥ r, then the set {x ∈ RK : rank(A(x)) < r} has zero measure (w.r.t. the Lebesgue
measure over RK).
Proof. See Sharir et al..	□
Claim 2 implies that it suffices to show an assignment of the ConvAC network weights achieving a certain
rank of matricization of the conv-weights tensor, in order to show this is the rank for all configurations of the
network weights but a set of Lebesgue measure zero. Essentially, this means that it is enough to provide a
specific assignment that achieves the required bound in theorem 2 in order to prove the theorem. Next, we
present the following well-known graph theory result:
Theorem 3. (Menger (1927), Elias et al. (1956), Ford and Fulkerson (1956)) [Undirected Menger’s Theorem]
Let G = (V, E) be an undirected graph with a specified partition (A, B) of the set of degree 1 vertices. Let
MF (G) be the maximum number of edge disjoint paths (paths which are allowed to share vertices but not
edges) in G connecting a vertex in A to a vertex in B. Let MC(G) be the minimum cardinality of all edge-cut
sets between A and B. Then, MF (G) = MC(G).
Proof. See e.g. Cui et al. (2016).	□
Theorem 3 will assist us in the proof of lemma 2. We will use it in order to assert the existence of edge disjoint
paths in an auxiliary graph (fig. 13), which we eventually utilize in order to provide the required weights
assignment in lemma 2. Next, we show lemma 1, which roughly states that a tensor which ‘contains’ another
tensor in some sense will not have a lower matricization rank than that of the ‘contained’ tensor.
Lemma 1. Let (A, B) be a partition of [N], and JAy KA,B be the matricization w.r.t. (A, B) ofa conv-weights
tensor Ay realized by a ConvAC depicted in fig. 6. Let φ be the TN corresponding to this ConvAC network, and
let φp be a TN with the same connectivity as φ, where all of the bond dimensions are modified to be equal the
closest power ofp to their value in φ from below. Let (Ap)y be the tensor represented by φp and let there exist
an assignment of all of the tensors in the network φp for which rank(J(Ap)y KA,B) = R. Then, rank(JAy KA,B)
is at least R almost always, i.e. for all configurations of the weights of φ but a set of Lebesgue measure zero.
Proof. Consider the specific assignment of all of the tensors in the network φp which achieves
rank(J(Ap)yKA,B) = R, and leads to the resultant tensor (Ap)y upon contraction of the network. Observ-
ing the form of the deep ConvAC TN presented in appendix D.2, we see that it is composed of δ tensors and
of weight matrices A(l,j) ∈ Rrl ×rl-1 . Recalling that the entries of the former are dictated by construction and
obey eq. 12, the assignment of all of the tensors in the network φp is an assignment of all entries of the weight
matrices in φp denoted by (Ap)(l,j), l ∈ [L] ∨ {0}, j ∈ [N/2l].
We denote the bond dimension at level l ∈ [L] ∨ {-1, 0} of φp by rlp (recall that we defined r-1 = M).
By the definition of φp , this bond dimension cannot be higher than the bond dimension in the corresponding
level in φ : ∀l rlp ≤ rl . Accordingly, the matrices in φ do not have lower dimensions (rows or columns) than
the corresponding matrices in φp . Thus, one can choose an assignment of the weights of all the matrices in φ
21
Published as a conference paper at ICLR 2018
to uphold the given assignment for the matrices in φp in their upper left blocks, and assign zeros in the extra
spaces:
(A(l,j))i1i2 =
((Ap)(l,j))i1i2, i1 ≤ rlp, i2 ≤ rlp-1
0,	otherwise
(21)
Next, we consider a contraction of all the internal indices of φ, which by definition results in the conv-weights
tensor Ay. In this contraction, one can split the sum over all of the indices that range in [rl] for which rlp <
rl into two sums: one ranging in [rlp] and the other in rlp + [rl - rlp]. For clarity we will not provide an
expression for the entire contraction of φ which involves many internal indices. To understand the sum splitting
schematically, let kl be an index that ranges in [rl] for which rlp < rl . We perform the following splitting on
the sum over kl :
rl	rlp	rl
X {…} → X {…} + X {•••},	(22)
kl=1	kllow=1	klhigh=rlp+1
where kl is switched into klhigh/low in all of the summands in the respective sums. The overall contraction
will now be split into many sums involving different ‘high’ and ‘low’ indices. According to the assignment
of A(l,j) (eq. 21), all sums that include any index labeled by ‘high’ will vanish, and we will be left with a
single contraction sum over all the indices labeled by ‘low’. It is important to note that a δ tensor of dimen-
sion rl provides that same values as a δ tensor of dimension rlp when observing only its first rlp entries in
each dimension, as is clear from the δ tensor definition in eq. 12. Finally, we observe that this construction
leads to Ay containing the tensor (Ap)y as a hypercube in its entirety and holding zeros elsewhere, lead-
ing to rank(JAy KA,B) = rank(J(Ap)y KA,B) = R. Using claim 2, this specific assignment implies that
rank(JAy KA,B ) is at least R for all configurations of the weights of φ but a set of Lebesgue measure zero,
satisfying the lemma.	口
Lemma 1 basically implies that showing that the upper bound on the rank of the matricization of the deep
ConvAC conv-weights tensor that is presented in claim 1 is tight when all of the channel numbers are powers
of some integer p (which we show below in lemma 2), is enough in order to prove the lower bound stated in
theorem 2.
Lemma 2. Let (A, B) be a partition of [N], and JAy KA,B be the matricization w.r.t. (A, B) of a conv-weights
tensor Ay realized by a ConvAC depicted in fig. 6 with pooling window of size 2 (the deep ConvAC network).
Let G(V, E, c) represent the TN φ corresponding to the ConvAC network s.t. ∀e ∈ E, ∃n ∈ N : c(e) = pn
, and let (V A , V B) be the vertices partition of V inputs in G corresponding to (A, B). Let WC be the weight
of a cut C w.r.t. (V A, V B). Then, the rank of the matricization JAy KA,B is at least minC WC almost always,
i.e. for all configurations of the ConvAC network weights but a set of Lebesgue measure zero.
It is noteworthy, that lemma 2 is stated similarly to claim 1, with two differences: 1) minC WC appears as a
lower bound on the rank of matricization of the conv-weights tensor rather than an upper bound, and 2) all of
the channel numbers are restricted to powers of the same integer p. That is to say, by proving this lemma we in
fact show that the upper bound proven in claim 1 is tight for this quite general setting of channel numbers.
Proof. (of lemma 2)
In the following, we provide an assignment of indices for the tensors in φ for which the rank of the matricization
JAy KA,B is at least: minC WC. In accordance with claim 2, this will satisfy the lemma as it implies this rank
is achieved for all configurations of the ConvAC network weights but a set of Lebesgue measure zero.
The proof of lemma 2 is organized as follows. We begin with the construction of the TN φ* presented in fig. 13
from the original network φ, and the show that it suffices to analyze φ* for our purposes. Next, We elaborate on
the form that the δ tensors in φ assume when constructed in φ*. We then use this form to define the concept of
δ restricted edge disjoint paths, which morally are paths from A to B that are guaranteed to be compliant with
the form of a δ tensor when passing through it. Finally, we use such paths in order to provide an assignment of
the indices for the tensors in φ* which upholds the required δ condition.
φ* and the Equivalence of Ranks:
For the given partition (A, B), denote A = {aι,…，a∣A∣ } , B = {bι,…，b∣B∣} and let IA ∪ IB = {dι,...,dN }
be the corresponding partition of external indices, where IA = {da1 , ..., da|A| } and IB = {db1 , ..., db|B| }. Let
HA and HB with dimensions obeying eq. 19 be the spaces corresponding to the different configurations of the
indices in IA and IB, respectively. We construct a TN φ* with a graph G*(V*, E*) and a bond dimensions
function c* : E* → N for which there is a one-to-one correspondence between the tensor assignments in φ
22
Published as a conference paper at ICLR 2018
Figure 13: An example for the construction of the TN φ* out of the original TN φ which represents
a deep ConvAC (section. D.2), in the case where all of the bond dimensions are powers of some
integer number p. ne edges with bond dimension P are placed in φ* in the position of each edge e in
φ that has a bond dimension pne. This construction preserves the value of the minimal multiplicative
cut between any two groups of external indices, (A, B) in φ (here chosen as the left-right partition
for example) which correspond to (A*, B *) in φ*.
and tensor assignments in φ*, such that the resulting linear maps between HA and HB have the same rank.
For each edge e ∈ E, denote ne := logp c(e). By the conditions of the lemma, ∀e : ne ∈ N as c(e) is an
integer power of P for all edges in E. The graph G* of the network φ* is constructed as follows. Starting with
G* = (V, 0), for each edge e = (u,v) ∈ E we insert n parallel edges connecting U to V in G*, to form the
edge set E*. Additionally, we define the bond dimensions function of the network φ* to assign the value of P
to all of the added edges, i.e. ∀e* ∈ E* : c*(e*) = p. In fig. 13 an example for such a construction of φ* is
shown for some N = 8 ConvAC TN.
In the paragraphs below, we derive eq. 25 which shows that an analysis of φ* suffices for our purposes. This
result is intuitive in some sense, as the construction of φ* keeps intact the architecture of the network and the
distribution of the degrees of freedom to some extent. As it is the key to our proof, we formulate this argument
hereinafter.
As each edge e ∈ E was translated into n edges in E*, there are N* := logp(dim(HA) ∙ dim(HB)) external
edges in φ*. Let A* be the order N* tensor obtained by the contraction of the TN φ*. We denote by (A*, B*)
the partition of [N*] which corresponds to the partition (A, B) of [N]. This means that an index number in
A* corresponding to an edge e* ∈ E* would be in A* (resp. B*) if the edge e ∈ E from which it originated
corresponded to an index number in A that was in A (resp. B). This is easily understood pictorially, see fig. 13.
Accordingly denote the corresponding partition of the degree 1 vertices in G* by (VA* , VB*). We will now
show that the rank of the matricization ofA w.r.t. the partition (A, B) is equal to the rank of the matricization
of A* w.r.t. the partition (A* , B*).
We denote by τv the tensors corresponding to a vertex v ∈ V in the network φ, and by τv* the tensors corre-
sponding to the same vertex v in the network φ*. Let z be the order of τv, and denote the set of edges in E
incident to v by {ek1 , ..., ekz } where k1, ..., kz are the corresponding indices. For every index kj, j ∈ [z], let
K*j	{k*j	k*j
= { 1 , ..., ne
kj
} be the indices corresponding to the edges which were added to φ* in the location of
ekj in φ. According to the construction above, there is a one-to-one correspondence between the elements in
K*j and kj , that can be written as:
kj = h(K*j)
nekj
:= 1 + X Pt-1 (kt*j - 1),
t=1
(23)
where h : [p]^nekj → [plekj ]. Thus, if one has the entries of the tensors in φ*, the following assignment to
the entries of the tensors in φ:
(Tv )kι ...kz = (Tv )h(K *1 )...h(K *z)	(24)
would ensure :
rank(JAKA,B) = rank(JA*KA*,B*).	(25)
23
Published as a conference paper at ICLR 2018
Effectively, we have shown that the claim to be proved regarding rank(JAKA,B) can be equivalently proved for
rank(JA*K a*,b* ).
The Form of the δ Tensor in φ*:
It is worthwhile to elaborate on the form of a tensor in φ* which corresponds to an order 3 δ tensor in φ. We
denote by Tv = δ a δ tensor in φ, and by TjSv the corresponding tensor in φ*. Fig. 14(a) shows an example
for a transformed tensor in φ* that originated in an order 3 δ tensor in φ, all edges of which uphold n = 2.
From eqs. 23 and 24, and from the form of the δ tensor given in eq. 12, it is evident that in this case an entry is
non-zero in TδSv only when k1S1 = k1S2 = k1S3 and k2S1 = k2S2 = k2S3 . In the general case, the condition for an
entry of 1 in TδSv is:
∀t ∈ [ne] : ktS1 = ktS2 = ktS3 ,	(26)
where ne = logp c(e) for any edge e incident to v in G. Hence, a tensor TδSv in φS which corresponds to a δ
tensor in φ can be written as:
T = δ *1 *2 *3 δ *1 *2 *3 ...δ *1 *2 *3 .	(27)
δ k1 k1 k1 k2 k2 k2	kne kne kne
δ Restricted Edge Disjoint Paths
Consider an edge-cut set in G that achieves the minimal multiplicative weight over all cuts w.r.t the partition
(V A, V B) in the graph G: Cmin ∈ argminC WC, and consider the corresponding edge-cut set CmS in in
GS s.t. for each edge e ∈ Cmin, the ne edges constructed from it are in CmS in . By the construction of GS ,
there are exactly L := logp (minC WC) edges in CmS in and their multiplicative weight upholds WCm* in =
WCmin = pL .
A search for a minimal multiplicative cut, can be generally viewed as a classical min-cut problem when defining
a maximum capacity for each edge that is a logarithm of its bond dimension. Then, a min-cut/max-flow value
can be obtained classically in a graph with additive capacities and a final exponentiation of the result provides
the minimal multiplicative value of the min-cut. Since all of the bond dimensions in φS are equal to p, such a
process results in a network with all of its edges assigned capacity 1. From the application of theorem 3 on such
a graph, it follows that the maximal number of edge disjoint paths between V AS and V B S in the graph GS ,
which are paths between V AS and V BS that are allowed to share vertices but are not allowed to share edges, is
equal to the cardinality of the minimum edge-cut set CmS in . In our case, this number is L, as argued above.
Denote these edge disjoint paths by q1 , ..., qL.
In accordance with the form of TδSv , the tensors in φS corresponding to δ tensors in φ given in eq. 27, we
introduce the concept of δ restricted edge disjoint paths between V AS and V BS in the graph GS , which besides
being allowed to share vertices but not to share edges, uphold the following restriction. For every δ tensor Tδv
of order 3 in the graph G, with e ∈ E a representative edge incident to v in G, a maximum of ne such paths
can pass through v in GS , each assigned with a different number t ∈ [ne]. The paths uphold that when passing
through v in GS each path enters through an edge with index ktSijnin and leaves through an edge with index
ktSojuotut only if jin 6= jout : jin , jout ∈ [3] and tin = tout = t, where no two paths can have the same t. This
restriction imposed on the indices of TδSv in φS , to be called hereinafter the δ restriction, is easily understood
pictorially, e.g. in fig. 14(a) the paths crossing the TδSv tensor must only contain edges of the same color in
order to uphold the δ restriction.
We set out to show, that for the network in question one can choose the L edge disjoint paths to uphold the δ
restriction. Then, a weight assignment compliant with the δ tensors in the network can be guaranteed to uphold
the requirements of the lemma, despite the fact that most of the entries in the δ tensors are equal to zero.
Denote the set of ne edges in GS that originated from a certain edge e in G, by XeS ⊂ E S . We first show that
one can choose the L edge disjoint paths s.t. in a flow directed from V AS to V BS w.l.o.g, there is no set of
edges XeS that corresponds to any e ∈ E for which two edges eiS , ejS ∈ XeS ⊂ E S belong to paths qi , qj which
flow in opposite directions. Fig. 14(b) clarifies this claim.
We observe the classical max-flow in the graph G, i.e. when assigning a maximum capacity for each edge e that
is equal to ne := logp c(e), a maximum flow of L is possible between V A and V B in G. Observing the paths
in G that flow w.l.o.g. from V A to V B, together they can transfer a maximum capacity of L. Note that in G,
these paths most certainly do not need to be edge disjoint paths. We argue that one can choose such paths from
V A to V B in G such that on each edge e there is an integer capacity transferred. The existence of such paths
in G follows directly from the integral flow theorem (Dantzig and Fulkerson (1956)), which states that if each
edge has integral capacity, then there exists such an integral maximal flow. Note, that these paths must also
uphold the basic rule that the sum of capacities transferred on a certain edge e ∈ E, even if this is performed
via several paths, is less than the edge maximum capacity ne .
24
Published as a conference paper at ICLR 2018
Figure 14: (a) An example for the tensor in φ* which corresponds to a δ tensor T(V ∈ Rp2 ×p ×p
in φ. According to the construction of φ* presented in fig. 13, each edge is split into ne = 2 edges
of bond dimension p. The δ tensor structure in φ translates into this τ*v tensor holding a non-zero
entry only when the indices corresponding to all of the edges that are marked by the same color are
equal to each other (eq. 27). Additionally, paths crossing this τδ*v tensor must only contain edges
of the same color in order to be called δ restricted edge disjoint paths. (b) There are L guaranteed
edge disjoint paths between V A* and V B*. In a flow directed from V A* to V B* (w.l.o.g), we argue
that one can choose these paths such that they have the same flow direction in all edges in φ* that
originate from a certain edge in φ.
One can now construct L paths in G* in a recursive manner, if a maximum additive capacity for each edge
e* ∈ E* is similarly defined to be logp c* (e*) = logp P := 1. Starting with a single quanta of flow along
some path in G, construct a single path in the corresponding position in G*. Each edge that is part of this path
in G* will transfer exactly one quanta of flow, as that is their maximum capacity that is chosen to be saturated
in order to transfer the same amount of capacity that is transferred in G. Now, remove the full edges in G* and
reduce the capacities of all edges along the original path in G by one. Repeating this process until a capacity of
L is transferred in both graphs, since ne is the number of new edges added to G* in the place of each edge e,
and it is also an upper bound on the integer capacity this path transfers in G, it follows that in G* one finds L
paths between V A* and V B * that correspond exactly to the paths transferring integer capacity in G guaranteed
by integral flow theorem. These paths in G* are edge disjoint since the edges of each path were removed from
the graph when constructed. Choosing precisely these edge disjoint paths in G*, one is guaranteed that the flow
from V A* to V B * in all of the edges in Xe* that belong to these paths would be in the same direction, as they
originated in the same edge e in G that had a flow in that single specific direction from A to B . Pictorially, since
the different edges in Xe* all originate from one single edge that obviously cannot have two opposite directions
of net flow, they can all be chosen to transfer flow in the same direction.
Observing an order 3 δ tensor τδv in φ, denote the three edges incident to v in G by e1 , e2 , e3 ∈ E, and denote
ne := ne1 = ne2 = ne3. Now that we have asserted that all of the L edge disjoint paths in G* may uphold
the above condition, we choose the paths as such, i.e. under this choice all of the edges in each respective set
(namely Xe*1 , Xe*2 or Xe*3) pass flow from V A* to V B* in the same direction. In this case, a maximum of ne
paths can pass through the delta tensor. This can be easily understood by the following argument. Denote a set
Xe*i by ‘I’ if the paths passing through its edges are incoming to the δ tensor in a flow from V A* to V B*, and
by ‘O’ if they are outgoing from the δ tensor in such a flow. W.l.o.g. we assume that Xe*1 , Xe*2 are denoted
by ‘I’ and Xe*3 is denoted by ‘O’. in this case, only ne such edge disjoint paths can flow out of the δ tensor.
In the opposite case, where two groups of edges out of the three are denoted by ‘O’ and only one group is
denoted by ‘I’, only ne such edge disjoint paths can flow into the δ tensor. The contrary, i.e. if more than ne
such paths were to cross the δ tensor, would imply a cross flow of edge disjoint paths in at least one of the sets
Xe*1 , Xe*2 , Xe*3 , in contradiction to this choice of paths.
This provides us with the ability to distribute the paths in the following manner, that upholds the δ restriction
described above. Assume w.l.o.g that Xe*1 is the set for which the most edges are in the chosen edge disjoint
paths. Denote by q1, ..., qN2 the paths that include edges in Xe*1 and Xe*2, and by qN2+1, ..., qN2+N3 the paths
that include edges in Xe*1 and Xe*3 . Finally, assign the index t to the path qt . From the statement above, it is
guaranteed that N2 + N3 ≤ ne . Therefore, this choice of paths is guaranteed to uphold the delta restriction
defined above, which states that each path must receive a different value t ∈ [ne]. Specifically, this implies that
the maximal number of δ restricted edge disjoint paths between V A* and V B * in the graph G* is L.
25
Published as a conference paper at ICLR 2018
The Assignment of Weights:
We give below explicit tensor assignments for all the tensors in φ* so thatrank(JA*』A* ,b* ) = min WC, which
in accordance with eq. 25 implies that rank(JAKA,B) upholds this relation. Together with the translation from
φ* to φ given in eq. 24, this will constitute a specific example of an overall assignment to the TN representing
the ConvAC which achieves the lower bound shown in this lemma.
Observing the form of φ*, an example for which is shown in fig. 13, We see that it is composed of tensors
that correspond to δ tensors in φ, denoted by TjSv, and of tensors that correspond to weight matrices in φ,
denoted by A*(l,j). Recalling that the entries of the former are dictated by construction and obey eq. 27, we
are left with providing in assignment of all the tensors AS(l,j) . The weight matrices in a ConvAC TN uphold
A(Ij) ∈ Rrl×rl-1, thus the corresponding tensors A*(l,j) are of order logp(rι ∙ rι-1) by construction, with
logp rl edges directed upwards in the network and logp rl-1 edges directed downwards. For clarity, we omit
the superscript from AS(l,j) and write the indices of such a weights tensor as:
Ak1...klogp rl
klogp rl + 1...klogp(rl∙rl-1)
(28)
We choose L paths between V AS and V B S in the graph GS which are δ restricted edge disjoint paths, denoted
by q1, ..., qL. We are guaranteed to have this amount of δ restricted edge disjoint paths by the arguments made
in the previous subsection. For any weights tensor A*(l,j) in φ*, let n ∈ [min(L, [2 logp(rι ∙ rι-ι)J)] ∨ {0}
be the number of δ restricted edge disjoint paths crossing it.
Let {giα,gιβ,…,gnα,gnβ} With gix ∈ [logp(r「ri-ι)], i ∈ [n], X ∈ {a,β} be the numbers representing
indices of AS(l,j) which correspond to edges that belong to any path q1, . . . , qL, i.e. the set of such indices is
G ：= {kg1a ,kg1β ,…,kgnα ,kgnβ }. Denoting n := logp(rι ∙ ri-ι) - 2n, let {fι,…,fn} with f ∈ [logp(rι ∙
rι-ι)], i ∈ [n] be the numbers representing the remaining indices of A*(l,j), i.e. the indices which correspond
to edges that are not on any path q§ , j ∈ [L]. The set of such indices is F := {kf1,…，k册}. Since each edge
in the graph connects a weights matrix with a δ tensor (see fig. 13), we may identify each such k ∈ F with an
index ktSj , j ∈ [3], t ∈ [ne] of the adjacent delta tensor. We accordingly define:
δk1
η(k) =	1
∀j, ktSj does not belong to any path q1 , . . . , qL
else
(29)
Finally, the assignment of the entries of AS(l,j) is given by:
Ak1...klogp rl
klogp rι+1 ∙∙∙klogpg∙rι-I)
δkg1α kg1β ∙∙∙ δkgna kg^^kfl )…，Mkf⅛ X
(30)
Effectively, the assignment in eq. 30 for the weights tensors ensures that their indices which correspond to two
edges that are adjacent in one of the paths qi , must be equal in order for the term not to vanish in the contraction
of the entire TN φ . Since the paths qi are δ restricted, the τδSv tensors in φS which corresponds to a δ tensor in
φ are also able uphold this rule a priori. By this assignment, in accordance with the form of τδSv given in eq. 27,
the indices corresponding to all of the edges in a path qi are in fact enforced to receive the same value, ranging
in [p], in order for the term not to vanish in the contraction. An additional result of this assignment, is that all
of the indices in the network which correspond to edges that do not belong to any path qi , must be equal to 1 in
order for the term not to vanish (i.e. when they receive values of 2, ..., p the term vanishes upon contraction).
According to the rules of TNs introduced in appendix C, the overall tensor AS represented by the network φS is
calculated by a global contraction which is a summation over all of the internal indices. Under the assignment
in eq. 30, upon a simple rearrangement of the tensor modes s.t. indices corresponding to AS are on the left,
indices corresponding to B S are on the right and the indices corresponding to paths are first in their respective
regions,11 the only non-zero entries ofAS are:
|A*|-L	|B* |-L
Λ *	Z }	{	Z }	`	1
A dq1...dqL 1 . . . 1dq1...dqL 1 . . . 1 = 1,	(31)
where dq1 , ..., dqL ∈ [p] are the indices corresponding to the paths q1 , ..., qL, respectively. Upon matricization
of AS w.r.t. the partition (AS , BS), it is clear that a matrix of rank pL = minC WC with IpL ×pL on its upper
left block and zeros otherwise is received, and the lemma follows.	口
11This does not affect the rank of matricization as it is still performed w.r.t. the partition (AS , B S ), and
switching rows or columns leaves the rank unchanged.
26
Published as a conference paper at ICLR 2018
With all the preliminaries in place, the proof of theorem 2 readily follows:
Proof. (of theorem 2)
For a specific p, consider the network φp such as defined in theorem 2, i.e. a TN with the same connectivity as
φ, where all of the bond dimensions are modified to be equal the closest power of p to their value in φ from
below. Let (Ap )y be the weights tensor represented by φp . According to lemma 2, such a network upholds
that the rank of the matricization J(Ap)y KA,B is at least: minC WCp almost always. According to lemma 1, a
specific assignment for the weights of the tensors in φp that achieves this value suffices to imply that JAy KA,B
is at least: minC WCp almost always, e.g. the assignment given in lemma 2. Specifically, this holds for φp with
P ∈ argmaXp mine WC, satisfying the theorem.	□
F	Reproducing Depth Efficiency
The exponential depth efficiency result shown in Cohen et al. (2016b), can be straightforwardly reproduced
by similar graph-theoretic considerations. We show below an upper bound on the rank of matricization of the
conv-weights tensor for a case of a general pooling window. The bound implies that any amount of edges in a
cut that are connected to the same δ tensor will contribute their bond dimension only once to the multiplicative
weight of this cut, thus effectively reducing the upper bound when many cut edges belong to the same δ tensor.
This does not affect our analysis of the deep network above, as the δ tensors in that network are only three
legged (see fig. 8). Therefore, in the above analyzed deep ConvAC, a cut containing more than one δ tensor
leg can be replaced by an equivalent cut containing only one leg of that δ tensor, and the value of minC WC is
unchanged.
Formally, in order to apply similar considerations to the ConvAC with general sized pooling windows, such
as the one presented in fig. 6, one must consider more closely the restrictions imposed by the δ tensors. To
this end, we define the object underlying a ConvAC-weights TN with general sized pooling windows φ to be
composed of the following three:
•	An undirected graph G(V, E), with a set of vertices V and a set of edges E. The set of nodes is
divided into two subsets V = Vtn ∪ Vinputs, where Vinputs are the N degree-1 virtual vertices and Vtn
corresponds to tensors of the TN.
•	A function f : E → [b + N], where b is the number of δ tensors in the network. Ifwe label each δ
tensor in the network by a number i ∈ [b], this function upholds f (e) = i for e ∈ E that is incident
to a vertex which represents the ith delta tensor in the ConvAC TN. For each edge e ∈ E incident to
a degree 1 vertex, this function assigns a different number f(e) = i for i ∈ b + [N]. Such an edge is
an external edge in the ConvAC TN, which according to the construction presented in appendix D is
the only type of edge not incident to any δ tensor. In words, the function f divides al the edges in E
into b + N groups, where edges are in the same group if they are incident to the same vertex which
represents a certain δ tensor in the network.
•	A function c : [b + N] → N, associating a bond dimension r ∈ N with each different group of
edges defined by the set: Ei = {e ∈ E : f (e) = i}.
Observing an edge-cut set with respect to the partition (A, B) and the corresponding set GC = {f (e) : e ∈ C}.
We denote the elements of GC by giC , i ∈ [|GC |]. These elements represent the different groups that the edges
in C belong to (by the definition of f, edges incident to the same delta tensor belong to the same group). We
define the modified weight of such an edge-cut set C as:
WC = Y∣gC i c(gi).	(32)
i=1
The weight definition given in eq. 32 can be intuitively viewed as a simple multiplication of the bond dimensions
of all the edges in a cut, with a single restriction: the bond dimension of edges in the cut which are connected
to a certain δ tensor, will only be multiplied once (such edges have equal bond dimensions by definition, see
eq. 12). An example of this modified weight can be seen in fig. 15, where the replacement of a general tensor
by a δ tensor results in a reduction in the minimal cut, due to the rules defined above. In the following claim,
we provide an upper bound on the ability of a ConvAC with a general pooling window to model correlations of
its inputs, as measured by the Schmidt entanglement measure (see section 4).
Claim 3. Let (A, B) be a partition of [N], and JAy KA,B be the matricization w.r.t. (A, B) of a conv-weights
tensor Ay realized by a ConvAC depicted in fig. 6 with a general pooling window. Let G(V, E, f, c) represent
the TN φ corresponding to the ConvAC network, and let (VA , VB) be the vertices partition of V inputs in G
corresponding to (A, B). Then, the rank of the matricization JAy Ka,b is no greater than: mine WC, where
C represents a cut w.r.t (VA, V B) and WC is the modified multiplicative weight defined by eq. 32.
27
Published as a conference paper at ICLR 2018
Figure 15: An example for the effect that a δ tensor has on the upper bound on the rank of the
ʌz
matricization of the overall tensor represented by a TN. minC WC is defined in eq. 32 and shown
in claim 3 to be the upper bound on the rank of the matricization of the conv-weights tensor of a
ConvAC represented by a TN. In this example, the upper bound is reduced upon changing a single
general tensor in the TN shown in (a) (identical to fig. 11), whose entries are free to be equal any
value, with a δ tensor in the TN shown in (b) which obeys the constraint given in eq. 12. The
centrality of the δ tensor in the TN compliant with a shallow ConvAC (that is depicted in fig. 7,
is in effect the element which limits the expressiveness of the shallow network, as is discussed in
appendix F.
Having seen the proof of the claim 1 above and its accompanying graphics, the proof of the upper bound
presented in claim 3 can be readily attained. The only difference between the two lies in the introduction of the
δ tensors to the network, which allows us to derive the tighter lower bound shown in claim 3.
Proof. (of claim 3)
The modification to the above proof of claim 1 focuses on the coalescence of the cut indices IC into a single
index m ∈ [Q|iC=|1 cki]. Assume that any two indices of multiplicands in this product, denoted by ki and kj,
are connected to the same δ tensor that has some bond dimension q := cki = ckj . Upon contraction of the
TN in fig. 12(b), the cut indices are internal indices that are to be summed upon. However, whenever ki ∈ [q]
and kj ∈ [q] are different, by the constraint imposed in the δ tensor definition (eq. 12), the entire term vanishes
and there is no contribution to the final value of Ad1 ...dN calculated by this contraction. Thus, ki, kj and
any other index connected to the same δ tensor can be replaced by a representative index kα ∈ [q] whenever
they appear in the summation. α ∈ GC upholding c(α) = q, is the group index of this δ tensor, given by
α = f(eki) = f (ekj ) with eki and ekj the edges corresponding to the indices ki and kj in the network. Thus,
♦ F ♦	1	1 ♦	1 1	1	FF r	,	一 ΓTTT 1	・，1
the single index m achieved by coalescing all of the cut indices can be defined in the range m ∈ [WC], with
WWcc defined by eq. 32 upholding WC ≤ Qi=1 Cki, where the equality is satisfied when no two edges in the cut
are incident to the same δ tensor. Finally, the matricization JAKA,B can be written as a multiplication of two
matrices as portrayed in fig. 12(c):
WWc
(JAKA,B)lr = X (JX KA,C )lm (JY KC,B)mr,	(33)
m=1
l ∈ [dim(HA)], r ∈ [dim(HB)]. Recalling that as in the proof of claim 1 the edge-cut set may include the
external edges, we attain:
rank( JAK a,b ) ≤ min WC.	(34)
□
Observing fig. 7 which shows the TN corresponding to the shallow ConvAC architecture, the central positioning
of a single δ tensor implies that under any partition of the inputs (A, B) s.t. |A| = |B| = N/2, the minimal
cut will obey WCmin = min(M N/2 , k). Thus,in order to reach the exponential in N measure of entanglement
w.r.t. the interleaved partition that was obtained in section 5 for the deep network, the number of channels
in the single hidden layer of the shallow network k, must grow exponentially with N . Therefore, one must
exponentially enlarge the size of the shallow network in order to achieve the expressiveness that a polynomially
sized deep network achieves, and an exponential depth efficiency is demonstrated.
28
Published as a conference paper at ICLR 2018
G	Upper B ound Deviations S imulation
In this section, we describe simulations performed on an N = 16 deep ConvAC TN (with pooling windows
of size 2), which are aimed at quantifying the prevalence of deviations from the upper bound on the ranks of
the matricization of conv-weights tensor presented in claim 1. In section E.2 we proved theorem 2, showing
in effect that this upper bound is tight when all of the channel numbers are powers of some integer p, and
guaranteeing a positive result in all cases. However, for the general setting of channel numbers there is no
theoretical guarantee that the upper bound is tight. Indeed, Cui et al. (2016) show a counter example where the
matricization rank is effectively lower the minimal multiplicative cut for a general TN (that has no δ tensors
such as in the ConvAC TN). There is no reason to believe that the upper bound is tight for the TN representing
a ConvAC for a general setting of channel numbers, and indeed our simulations below show deviations from
it. However, as is indicated below such deviations are negligible in prevalence and low in value. A theoretical
formulation of this is left for future work.
The experiments were performed in matlab, and tensor contractions were computed using a function introduced
by Pfeifer et al. (2014). An N = 16 with M = 2 ConvAC TN was constructed (see figs. 8 and 9), with the
entries of the weights matrices randomized according to a normal distribution. The bond dimensions of layers
0 through 3 were drawn from the set of the first 6 prime numbers: [2, 3, 5, 7, 11, 13], to a total of 360 different
arrangements of bond dimensions. This was done in order to resemble a situation as distinct as possible from
the case where all of the bond dimensions are powers of the same integer p, for which the tightness of the
upper bound is guaranteed by theorem 2. Per bond dimension arrangement, all of the 2 ∙	= 6435 different
partitions were checked, for a total of 360 ∙ 6435 = 2.3166 ∙ 106 different configurations. As argued in
section E.2, the logarithm of the upper bound on the rank of the conv-weights tensor matricization that is
shown in claim 1, is actually the max-flow in a network with the same connectivity that has edge capacities
which are equal to the logarithm of the respective bond dimensions. Therefore, a configuration for which the
rank of matricization is equal to the exponentiation of the max-flow through such a corresponding network,
effectively reaches the upper bound. We calculated the max-flow independently for each configuration using
the Ford-Fulkerson algorithm (Ford and Fulkerson (1956)), and set out to search for deviations from such an
equivalence.
The results of the above described simulations are as follows. Only 1300 configurations, which constitute a
negligible fraction of the 2.3166 million configurations that were checked, failed to reach the upper bound and
uphold the min-cut max-flow equivalence described above. Moreover, in those rare occasions that a deviation
occurred, the percentage of deviations from the upper bound did not exceed 10% of the value of the upper
bound. This check was performed on a bond setting that is furthest away from all channel numbers being powers
of the same integer, yet the tightness of the upper bound emerges as quite robust, justifying experimentally our
general view of the minimal weight over all cuts in the network, minC WC, as the effective indication for
the matricization rank of the conv-weights tensor w.r.t. the partition of interest. A caveat to be stated with this
conclusion is that we checked only up to N = 16, and the discrepancies that were revealed here might become
more substantial for larger networks. As mentioned above, this is left for future theoretical analysis, however
the lower bound shown in theorem 2 guarantees a positive result regarding the rank of the matricization of the
conv-weights tensor in all of the cases.
29