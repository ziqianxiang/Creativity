Figure 1: Critic’s architecture. Samples are transposed so as to input the neurons’ activities intodifferent channels. The convolutional filters (red box) span all neurons but share weights acrossthe time dimension. The critic consists of two 1D convolutional layers with 256 and 512 features.
Figure 2: Fitting the statistics of simulated population activity patterns. A) Representative samplegenerated by Spike-GAN (black lines) and the resulting spike trains after binarizing (red lines). B-D) Fitting of the average spike-count, pairwise covariances and k-statistics done by Spike-GAN (reddots) and by a MLP GAN (green dots). Line indicates identity. E) Average time courses corre-sponding to the ground truth dataset and to the data obtained with Spike-GAN and the MLP GAN.
Figure 3: Fitting the statistics of real population activity patterns obtained in the retinal salamander.
Figure 4: A) An example pattern showing the different packets highlighted with different colors andsorted to help visualization. The probability of each type of packet to occur was set to 0.1. Packetsof the same type do not overlap in time. B) Realistic neural population pattern (gray spikes do notparticipate in any packet). C) Examples of activity patterns (grayscale panels) in which only one typeof packet is usually present (one or two times) during a period of time from 16 to 32 ms. Packetsare highlighted as white spikes. Heatmaps: importance maps showing the change that disruptingspecific spikes has on the critic’s output. Note that packet spikes normally show higher values.
Figure S1: Fitting the whole probability distribution. Numerical probabilities obtained fromthe ground truth dataset (2 correlated neurons, samples duration=12 ms, firing rate≈160 Hz,correlation≈0.3, refractory period=2 ms) vs probabilities inferred from the surrogate and the gen-erated datasets. Gray line is the identity. Blue tones: probabilities computed with respect to thesurrogate dataset. Red tones: probabilities computed with respect to the generated dataset. Both dis-tributions are obtained by kernel density estimation, with a 2D Gaussian kernel with bandwidth=0.1.
Figure S4:	Negative critic loss corresponding to the training of Spike-GAN on samples comingfrom the simulated activity of a population of 16 neurons whose firing probability follows a uniformdistribution across the whole duration (T=128 ms) of the samples (see Section 3.1).
Figure S5:	Ten generated samples are shown together with their closest sample in the training datasetfor Spike-GAN, the k-pairwise and the DG method. Note that we are measuring sample similarityin terms of L1 distance. This implies that sometimes the closest sample is the one presenting nospikes since non matching spikes are penalized more. For comparison, 10 samples contained in thetraining dataset are shown together with their closest sample in the same training dataset (excludingthe sample itself).
Figure S6:	Comparison of SPike-GAN with the k-pairwise and the DG models in the presence ofnegative correlations (refractory period).
Figure S7: Filters learned by the first layer of Spike-GAN when trained on the dataset described inSection 3.3.
Figure S8: Randomly selected samples and their corresponding importance maps.
