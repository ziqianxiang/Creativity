Figure 1: Single-step (left) and multi-step (right) distribution bootstrapping.
Figure 2: (Left) The model of parallelism of DQN, A3C and Reactor architectures. Each row represents aseparate thread. In Reactorâ€™s case, each worker, consiting of a learner and an actor is run on a separate workermachine. (Right) Comparison of training times and resources for various algorithms. 500m denotes 500 milliontraining frames; otherwise 200m training frames were used.
Figure 3: (Left) Reactor performance as various components are removed. (Right) Performance comparison asa function of training time in hours. Rainbow learning curve provided by HeSSel et al. (2017).
Figure 4: Illustration of Lazy prioritization, where sequences with no explicitly assigned prioritiesget priorities estimated by a linear combination of nearby assigned priorities. Exact boundaries ofblue and red intervals are arbitrary (as long as all conditions described in Section 3.3 are satisfied)thus leading to many possible algorithms. Each square represents an individual sequence of size 32(sequences overlap). Inverse sizes of blue regions work as local density estimates allowing to produceunbiased priority estimates.
Figure 5: Rules used to evaluate summary statistics on each node of a binary search tree where allsequence keys are kept sorted by temporal order. cl and cr are total number of nodes within left andright subtrees. ml and ml are estimated mean priorities per node within the subtree. A central squarenode corresponds to a single key stored within the parent node with its corresponding priority ofp (if set) or ? if not set. Red subtrees do not have any singe child with a set priority, and a resultdo not have priority estimates. A red square shows that priority of the key stored within the parentnode is not known. Unknown mean priorities is marked by a question mark. Empty child nodessimply behave as if c = 0 with p =?. Rules a-f illustrate how mean values are propagated down fromchildren to parents when priorities are only partially known (rules d and e also apply symmetrically).
Figure 6: Example of a balanced priority tree. Dark blue nodes contain keys with known priorities,light blue nodes have at least one child with at least a single known priority, while ping nodes donot have any priority estimates. Nodes 1, 2 and 3 will obtain priority estimates equal to 2/3 of thepriority of key 5 and 1/3 of the priority of node 4. This implies that estimated priorities of keys 1,2 and 3 are implicitly defined by keys 4 and 6. Nodes 8, 9 and 11 are estimated to have the samepriority as node 10.
Figure 7: Network architecture.
