Figure 1: An illustration of the proposed graph pooling layer with k = 2. X and Θ denote matrixmultiplication and element-wise product, respectively. We consider a graph with 4 nodes, and eachnode has 5 features. By processing this graph, We obtain the adjacency matrix A' ∈ R4×4 andthe input feature matrix X' ∈ R4 ×5 of layer '. In the projection stage, P ∈ R5 is a trainableprojection vector. By matrix multiplication and tanh(∙), We obtain y that are scores estimatingscalar projection values of each node to the projection vector. By using k = 2, we select twonodes with the highest scores and record their indices in the top-k-node selection stage. We use theindices to extract the corresponding nodes to form a new graph, resulting in the pooled feature mapX' and new corresponding adjacency matrix A'+1. At the gate stage, we perform element-wisemultiplication between X' and the selected node scores vector y, resulting in X'+1. This graphpooling layer outputs A'+1 and X'+1.
Figure 2: An illustration of the proposed graph unpooling (gUnpool) layer. In this example, a graphwith 7 nodes is down-sampled using a gPool layer, resulting in a coarsened graph with 4 nodesand position information of selected nodes. The corresponding gUnpool layer uses the positioninformation to reconstruct the original graph structure by using empty feature vectors for unselectednodes.
Figure 3: An illustration of the proposed graph U-Net (g-U-Net). In this example, each node inthe input graph has two features. The input feature vectors are transformed into low-dimensionalrepresentations using a GCN layer. After that, we stack two encoder blocks, each of which containsa gPool layer and a GCN layer. In the decoder part, there are also two decoder blocks. Each blockconsists of a gUnpool layer and a GCN layer. For blocks in the same level, encoder block uses skipconnection to fuse the low-level spatial features from the encoder block. The output feature vectorsof nodes in the last layer are network embedding, which can be used for various tasks such as nodeclassification and link prediction.
