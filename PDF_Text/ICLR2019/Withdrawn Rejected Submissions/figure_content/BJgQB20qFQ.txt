Figure 1: The framework of the neural rewriter architecture. Here, the score predictor computesSP(gt), which is the rewriting score; and the rule selector predicts RS(^t), which is the probabilitydistribution of applying each rewriting rule a ∈ A.
Figure 2: The instantiation of neural rewriter architectures for different domains: (a) job scheduling;(b) expression simplification. In (a), St is the dependency graph representation of the job schedule.
Figure 3: An example to illustrate the graph construction approach for the job scheduling problem.
Figure 4: Grammar of the Halide expressions in our evaluation. “select (c, e1, e2)” means thatwhen the condition c is satisfied, this term is equal to e1, otherwise is equal to e2. In our dataset, allconstants are integers ranging in [-1024, 1024], and variables are from the set {v0, v1, ..., v12}.
Figure 5: An example of the rewriting process for Halide expressions. The initial expression is5 ≤ max(v0,3) + 3, which could be reduced to 1, i.e., True.
Figure 6: An example to illustrate the job embedding approach for the job scheduling problem.
Figure 7: The rewriting process that simplifies the expression ((v0 - v1 + 18)/35 * 35 + 35) ≤v0 -v1 + 119 to 34 ≤ (v0 - v1 + 13)%35.
Figure 8: The rewriting process that simplifies the expression ((v0 - v1 + 12)/137 * 137 + 137) ≤min((v0 - v1 + 149)/137 * 137, v0 - v1 + 13) to 136 ≤ (v0 - v1 + 12)%137.
