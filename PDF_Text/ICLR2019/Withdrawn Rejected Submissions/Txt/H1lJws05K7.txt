Under review as a conference paper at ICLR 2019
On the Selection of Initialization and Activa-
tion Function for Deep Neural Networks
Anonymous authors
Paper under double-blind review
Ab stract
The weight initialization and the activation function of deep neural networks have
a crucial impact on the performance of the training procedure. An inappropriate
selection can lead to the loss of information of the input during forward propaga-
tion and the exponential vanishing/exploding of gradients during back-propagation.
Understanding the theoretical properties of untrained random networks is key to
identifying which deep networks may be trained successfully as recently demon-
strated by Schoenholz et al. (2017) who showed that for deep feedforward neural
networks only a specific choice of hyperparameters known as the ‘edge of chaos’
can lead to good performance. We complete this analysis by providing quantitative
results showing that, for a class of ReLU-like activation functions, the information
propagates indeed deeper for an initialization at the edge of chaos. By further
extending this analysis, we identify a class of activation functions that improve the
information propagation over ReLU-like functions. This class includes the Swish
activation, φswish(x) = X ∙ sigmoid(x), used in HendryckS & GimPel (2016),
Elfwing et al. (2017) and Ramachandran et al. (2017). This provides a theoretical
grounding for the excellent emPirical Performance of φswish observed in these
contributions. We comPlement those Previous results by illustrating the benefit of
using a random initialization on the edge of chaos in this context.
1 Introduction
DeeP neural networks have become extremely PoPular as they achieve state-of-the-art Performance
on a variety of imPortant aPPlications including language Processing and comPuter vision; see, e.g.,
LeCun et al. (1998). The success of these models has motivated the use of increasingly deeP networks
and stimulated a large body of work to understand their theoretical ProPerties. It is imPossible to
Provide here a comPrehensive summary of the large number of contributions within this field. To cite
a few results relevant to our contributions, Montufar et al. (2014) have shown that neural networks
have exPonential exPressive Power with resPect to the dePth while Poole et al. (2016) obtained similar
results using a toPological measure of exPressiveness.
We follow here the aPProach of Poole et al. (2016) and Schoenholz et al. (2017) by investigating the
behaviour of random networks in the infinite-width and finite-variance i.i.d. weights context where
they can be aPProximated by a Gaussian Process as established by Matthews et al. (2018) and Lee
et al. (2018).
In this PaPer, our contribution is two-fold. Firstly, we Provide an analysis comPlementing the results
of Poole et al. (2016) and Schoenholz et al. (2017) and show that initializing a network with a
sPecific choice of hyPerParameters known as the ‘edge of chaos’ is linked to a deePer ProPagation
of the information through the network. In Particular, we establish that for a class of ReLU-like
activation functions, the exPonential dePth scale introduced in Schoenholz et al. (2017) is rePlaced by
a Polynomial dePth scale. This imPlies that the information can ProPagate deePer when the network is
initialized on the edge of chaos. Secondly, we outline the limitations of ReLU-like activation functions
by showing that, even on the edge of chaos, the limiting Gaussian Process admits a degenerate kernel
as the number of layers goes to infinity. Our main result (4) gives sufficient conditions for activation
functions to allow a good ‘information flow’ through the network (ProPosition 4) (in addition to being
non-Polynomial and not suffering from the exPloding/vanishing gradient Problem). These conditions
are satisfied by the Swish activation φswish(χ) = X ∙ sigmoid(χ) used in Hendrycks & Gimpel (2016),
1
Under review as a conference paper at ICLR 2019
Elfwing et al. (2017) and Ramachandran et al. (2017). In recent work, Ramachandran et al. (2017)
used automated search techniques to identify new activation functions and found experimentally that
functions of the form φ(χ) = X ∙ sigmoid(βχ) appear to perform indeed better than many alternative
functions, including ReLU. Our paper provides a theoretical grounding for these results. We also
complement previous empirical results by illustrating the benefits of an initialization on the edge of
chaos in this context. All proofs are given in the Supplementary Material.
2 On Gaussian process approximations of neural networks and
THEIR STABILITY
2.1	Setup and notations
We use similar notations to those of Poole et al. (2016) and Lee et al. (2018). Consider a fully
iid	σ2
connected random neural network of depth L, widths (Nl)i≤i≤l, weights Wilj 〜 N(O, NwI)and
Nl-1
bias Bi iid N(0, σ2), where N(μ, σ2) denotes the normal distribution of mean μ and variance σ2.
For some input a ∈ Rd, the propagation of this input through the network is given for an activation
function φ : R → R by
d	Nl-1
yi1(a)=XWi1jaj+Bi1, yil(a)= X Wiljφ(yjl-1(a))+Bil,	forl≥2.	(1)
j=1	j=1
Throughout the paper we assume that for all l the processes yil(.) are independent (across i) centred
Gaussian processes with covariance kernels Kl and write accordingly yil innd GP(0, κl). This is an
idealized version of the true processes corresponding to choosing Nl-1 = +∞ (which implies, using
Central Limit Theorem, that yil (a) is a Gaussian variable for any input a). The approximation of
yil(.) by a Gaussian process was first proposed by Neal (1995) in the single layer case and has been
recently extended to the multiple layer case by Lee et al. (2018) and Matthews et al. (2018). We recall
here the expressions of the limiting Gaussian process kernels. For any input a ∈ Rd, E[yil (a)] = 0 so
that for any inputs a, b ∈ Rd
κl(a, b) = E[yi(a)yi (b)] = σ2 + σW EylT 〜GP (0,κi-i)[φ(yi-1(a))φ(yi-1(b))]
= σb2 + σw2 Fφ(κl-1(a, a), κl-1(a, b), κl-1 (b, b)),
where Fφ is a function that depends only on φ. This gives a recursion to calculate the kernel κl ; see,
e.g., Lee et al. (2018) for more details. We can also express the kernel κl in terms of the correlation
clab in the lth layer used in the rest of this paper
dab := κl(a,b) = E[yi(a)yi(b)] = σ + σWE[φ(Zι)Φ(,qF(clα- 1Zι + /-¢- 1)2Z2))]
where qal-1
qal-a1, resp. cla-b 1 :
qal-b 1/ qal-1qbl-1, is the variance, resp. correlation, in the
(l - 1)th layer and Z1, Z2 are independent standard Gaussian random variables. when it propagates
through the network. qal is updated through the layers by the recursive formula qal = F (qal-1), where
F is the ‘variance function’ given by
F(x) = σb + σWE[φ(√xZ)2],	where Z 〜N(0,1).	(2)
Throughout the paper, Z, Z1 , Z2 will always denote independent standard Gaussian variables.
2.2	Limiting behaviour of the variance and covariance operators
We analyze here the limiting behaviour of qaL and caL,b as the network depth L goes to infinity
under the assumption that φ has a second derivative at least in the distribution sense1. From now
onwards, we will also assume without loss of generality that c1ab ≥ 0 (similar results can be obtained
straightforwardly when c1ab ≤ 0). We first need to define the Domains of Convergence associated
with an activation function φ.
1 ReLU admits a Dirac mass in 0 as second derivative and so is covered by our developments.
2
Under review as a conference paper at ICLR 2019
(a) ReLU network
Figure 1: Two draws of outputs for ReLU and Tanh networks with (σb, σw) = (1, 1) ∈ Dφ,var ∩
Dφ,corr. The output functions are almost constant.
(b) Tanh network
Definition 1. Let φ be an activation function, (σb , σw ) ∈ (R+)2.
(i)	(σb, σw) is in Dφ,var (domain of convergence for the variance) if there exists K > 0, q ≥ 0 such
that for any input a with qa1 ≤ K, liml→∞ qal = q. We denote by Kφ,var(σb, σw) the maximal K
satisfying this condition.
(ii)	(σb, σw) is in Dφ,corr (domain of convergence for the correlation) if there exists K > 0 such
that for any two inputs a, b with qa1 , qb1 ≤ K, liml→∞ clab = 1. We denote by Kφ,corr (σb, σw) the
maximal K satisfying this condition.
Remark : Typically, q in Definition 1 is a fixed point of the variance function defined in equation 2.
Therefore, it is easy to see that for any (σb, σw) such that F is increasing and admits at least one fixed
point, we have Kφ,corr(σb, σw) ≥ q where q is the minimal fixed point; i.e. q := min{x : F(x) = x}.
Thus, if we re-scale the input data to have qa1 ≤ q, the variance qal converges to q. We can also
re-scale the variance σw of the first layer (only) to assume that qa1 ≤ q for all inputs a.
The next result gives sufficient conditions on (σb, σw) to be in the domains of convergence of φ.
Proposition 1. Let Mφ := supχ≥oE[∣φ02(xZ) + φ00(xZ)φ(xZ)|]. Assume Mφ < ∞, then for
σW < M1φ and any σb, we have (σb, σw) ∈ Dφ,var and Kφ,var (σb, σw) = ∞
Let Cφδ := suPχ,y≥0,∣x-y∣≤δ,c∈[0,1]E[lφ0(XZI)φ03(CZI + √1 - c2Z2川∙ Assume Cφ,δ < ∞ for
some δ > 0, then for σ2w < min( M,卷)and any σb, we have (σb, σw) ∈ Dψ,var ∩ Dφ,corr and
Kφ,var (σb
σw ) = Kφ,corr (σb, σw ) = ∞.
The proof of Proposition 1 is straightforward. We prove that sup F0(x) = σw2 Mφ and then apply the
Banach fixed point theorem; similar ideas are used for Cφ,δ .
Example : For ReLU activation function, we have MReLU = 2 and CReLU,δ ≤ 1 for any δ > 0.
In the domain of convergence Dφ,var ∩ Dφ,corr, for all a, b ∈ Rd, yi∞(a) = yi∞(b) almost surely
and the outputs of the network are constant functions. Figure 1 illustrates this behaviour for d = 2
for ReLU and Tanh using a network of depth L = 10 with Nl = 100 neurons per layer. The draws of
outputs of these networks are indeed almost constant.
To refine this convergence analysis, Schoenholz et al. (2017) established the existence of q and c
such that |qt - q| 〜C-1" and 或-11 〜e-l/ec When fixed points exist. The quantities eq and e。are
called ‘depth scales’ since they represent the depth to which the variance and correlation can propagate
without being exponentially close to their limits. More precisely, if we write χι = σWE[φ0(√qZ)2]
and α = χ1 + σWE[φ00(√qZ)φ(√qZ)] then the depth scales are given by e『= -log(α)T and
ec = - log(χ1)-1. The equation χ1 = 1 corresponds to an infinite depth scale of the correlation.
It is called the edge of chaos as it separates two phases: an ordered phase where the correlation
3
Under review as a conference paper at ICLR 2019
converges to 1 if χ1 < 1 and a chaotic phase where χ1 > 1 and the correlations do not converge to 1.
In this chaotic regime, it has been observed in Schoenholz et al. (2017) that the correlations converge
to some random value c < 1 when φ(x) = Tanh(x) and that c is independent of the correlation
between the inputs. This means that very close inputs (in terms of correlation) lead to very different
outputs. Therefore, in the chaotic phase, the output function of the neural network is non-continuous
everywhere.
Definition 2. For (σb, σw) ∈ Dφ,var, let q be the limiting variance2. The Edge of Chaos, hereafter
EOC, is the set ofvalues of (σb, σ.) satisfying χι = σWE[φ0(√qZ)2] = L
To further study the EOC regime, the next lemma introduces a function f called the ‘correlation
function’ simplifying the analysis of the correlations. It states that the correlations have the same
asymptotic behaviour as the time-homogeneous dynamical system cla+b 1 = f (clab).
Lemma 1. Let (σb, σw) ∈ Dφ,var ∩ Dφ,corr such that q > 0, a, b ∈ Rd and φ an activation function
such that supx∈S E[φ(xZ)2] < ∞ for all compact sets S. Define fl by cla+b 1 = fl (clab) and f by
f (x) = σ2+σwE[φ(√qzι)φ(√q(xzι+√τ-χ2z⅛ .Then limι→∞ supχ∈Qi] ∣fι (X)- f (x)| = 0.
The condition on φ in Lemma 1 is violated only by activation functions with exponential growth
(which are not used in practice), so from now onwards, we use this approximation in our analysis.
Note that being on the EOC is equivalent to (σb, σw) satisfying f0(1) = 1. In the next section, we
analyze this phase transition carefully for a large class of activation functions.
3 Edge of Chaos
To illustrate the effect of the initialization on the EOC, we plot
in Figure 2 the output of a ReLU neural network with 20 layers
and 100 neurons per layer with parameters (σb2, σw2 ) = (0, 2)
(as We will see later EOC = {(0, √2)} for ReLU). Unlike
the output in Figure 1, this output displays much more vari-
ability. However, we will prove here that the correlations still
converges to 1 even in the EOC regime, albeit at a slower rate.
3.1	ReLU-like activation functions
We consider activation functions φ of the form: φ(x) = λx
if x > 0 and φ(x) = βx if x ≤ 0. ReLU corresponds to
λ = 1 and β = 0. For this class of activation functions, we
see (Proposition 2) that the variance is unchanged (qal = qa1)
on the EOC, so that q does not formally exist in the sense that
the limit of qal depends on a. However, this does not impact
the analysis of the correlations.
Proposition 2. Let φ be a ReLU-Iike function with λ and β
defined above. Then for any σw < Jλ⅛ and σb ≥ 0, we
have (σb , σw ) ∈ Dφ,var with Kφ,var (σb , σw ) = ∞. More-
over EOC = {(0,分/工产：)} and, on the EOC, F(x) = X
for any x ≥ 0.
Figure 2: A draw from the output
function of a ReLu network with
20 layers, 100 neurons per layer,
(σb2,σw2 ) = (0, 2) (edge of chaos)
This class of activation functions has the interesting property of preserving the variance across layers
when the network is initialized on the EOC. However, we show in Proposition 3 below that, even in
the EOC regime, the correlations converge to 1 but at a slower rate. We only present the result for
ReLU but the generalization to the whole class is straightforward.
Example : ReLU: The EOC is reduced to the singleton (σb2, σw2 ) = (0, 2), which means we should
initialize a ReLU network with the parameters (σb2, σw2 ) = (0, 2). This result coincides with the
2The limiting variance is a function of (σb, σw) but we do not emphasize it notationally.
4
Under review as a conference paper at ICLR 2019
H	---- (ɑð, σw) = (O, /2)(Edge of chaos)
I	--- (θb, σw) = (1∣ 1) (Ordered phase)
6	10	20	30	40	5
Number of Iterations
(a) Convergence of correlation clab to 1 with c0ab = 0.1
Uo 一t5um u。一⅛-θ±lou
---- (% OW) = (0f /2)(edge of chaos)
---- (% OW) = (L 1) (ordered phase)
(b) Correlation function f
Figure 3: Impact of the initialization on the EOC for a ReLU network
recommendation of He et al. (2015) whose objective was to make the variance constant as the input
propagates but did not analyze the propagation of the correlations. Klambauer et al. (2017) also
performed a similar analysis by using the "Scaled Exponential Linear Unit" activation (SELU) that
makes it possible to center the mean and normalize the variance of the post-activation φ(y). The
propagation of the correlation was not discussed therein either. In the next result, we present the
correlation function corresponding to ReLU networks. This was first obtained in Cho & Saul (2009).
We present an alternative derivation of this result and further show that the correlations converge to 1
at a polynomial rate of 1/l2 instead of an exponential rate.
Proposition 3 (ReLU kernel). Consider a ReLU network with parameters (σb2 , σw2 ) = (0, 2) on the
EOC.Wehave	________
(i)for X ∈ [0,1], f (x) = 1X arcsin(x) + ∏√1 — x2 + 2X,
ii) for any (a, b), limι→∞ Cab = 1 and 1 — Cab 〜 ⅜⅛^ as l → ∞∙
Figure 3 displays the correlation function f with two different sets of parameters (σb, σw). The red
graph corresponds to the EOC (σb2 , σw2 ) = (0, 2), and the blue one corresponds to an ordered phase
(σb , σw ) = (1, 1). In unreported experiments, we observed that numerical convergence towards 1 for
l ≥ 50 on the EOC. As the variance qal is preserved by the network (qal = qa1 = 2kak2/d) and the
correlations Cab converge to 1 as l increases, the output function is of the form C ∙ ∣∣ak for a constant
C (notice that in Figure 2, we start observing this effect for depth 20).
3.2 A better class of activation functions
We now introduce a set of sufficient conditions for activation functions which ensures that it is then
possible to tune (σb, σw) to slow the convergence of the correlations to 1. This is achieved by making
the correlation function f sufficiently close to the identity function.
Proposition 4 (Main Result). Let φ be an activation function. Assume that
(i)	φ(0) = 0, and φ has right and left derivatives in zero and φ0(0+) 6= 0 or φ0(0-) 6= 0, and there
exists k > 0 such that ∣ φ(χx) ∣ ≤ k.
(ii)	There exists A > 0 such that for any σb ∈ [0, A], there exists σw > 0 such that (σb, σw) ∈ EOC.
(iii) For any σb ∈ [0, A], the function F with parameters (σb, σw) ∈ EOC is non-decreasing and
limσb→0 q = 0 where q is the minimal fixed point ofF, q := inf {X : F (X) = X}.
(iv) For any σb ∈ [0, A], the correlation function f with parameters (σb, σw) ∈ EOC introduced in
Lemma 1 is convex.
Then, for any σb ∈ [0, A], we have Kφ,var (σb, σw) ≥ q, and
lim sup |f (X) — X| = 0.
σb→0	x∈[0,1]
(σb ,σw)∈EOC
Note that ReLU does not satisfy the condition (ii) since the EOC in this case is the singleton
(σb2 , σw2 ) = (0, 2). The result of Proposition 4 states that we can make f(X) close to X by considering
σb → 0. However, this is under condition (iii) which states that limσb→0 q = 0. Therefore,
practically, we cannot take σb too small. One might wonder whether condition (iii) is necessary for
this result to hold. The next lemma shows that removing this condition results in a useless class of
activation functions.
5
Under review as a conference paper at ICLR 2019
——(σωσJ = (0.1,1.845)
—(σb,σw) = (0.2,1.718)
—(σb,σw) = (0.3,1.616)
(a) The correlation function f of a Swish network for
different values of σb
(b) A draw from the output function of a Swish network
with depth 30 and width 100 on the edge of chaos for
σb = 0.2
Figure 4:	Correlation function and a draw of the output for a Swish network
Lemma 2. Under the conditions of Proposition 4, the only change being limσb→0 q > 0, the result
of Proposition 4 holds if only if the activation function is linear.
The next proposition gives sufficient conditions for bounded activation functions to satisfy all the
conditions of Proposition 4.
Proposition 5. Let φ be a bounded function such that φ(0) = 0, φ0(0) > 0, φ0(x) ≥ 0, φ(-x) =
-φ(x), xφ(x) > 0 and xφ00(x) < 0 for x 6= 0, and φ satisfies (ii) in Proposition 4. Then, φ satisfies
all the conditions of Proposition 4.
The conditions in Proposition 5 are easy to verify and are, for example, satisfied by Tanh and
Arctan. We can also replace the assumption "φ satisfies (ii) in Proposition 4" by a sufficient condition
(see Proposition 7 in the Supplementary Material). Tanh-like activation functions provide better
information flow in deep networks compared to ReLU-like functions. However, these functions suffer
from the vanishing gradient problem during back-propagation; see, e.g., Pascanu et al. (2013) and
Kolen & Kremer (2001). Thus, an activation function that satisfies the conditions of Proposition 4
(in order to have a good ’information flow’) and does not suffer from the vanishing gradient issue is
expected to perform better than ReLU. Swish is a good candidate.
Proposition 6. The Swish activation function φswish(x) = X ∙ sigmoid (x)= 人,-= satisfies all the
conditions of Proposition 4.
It is clear that Swish does not suffer from the vanishing gradient problem as it has a gradient close
to 1 for large inputs like ReLU. Figure 4 (a) displays f for Swish for different values of σb . We see
that f is indeed approaching the identity function when σb is small, preventing the correlations from
converging to 1. Figure 4(b) displays a draw of the output of a neural network of depth 30 and width
100 with Swish activation, and σb = 0.2. The outputs displays much more variability than the ones
of the ReLU network with the same architecture. We present in Table 1 some values of (σb, σw) on
the EOC as well as the corresponding limiting variance for Swish. As condition (iii) of Proposition
4 is satisfied, the limiting variance q decreases with σb.
Table 1: Values of (σb, σw ) on the EOC and limiting variance q for Swish
σb	0.1	0.2	0.3	0.4	0.5
σw	1.845	1.718	1.616	1.537	1.485
q	0.14	0.44	0.61	1.01	2.13
6
Under review as a conference paper at ICLR 2019
Other activation functions that have been shown to outperform empirically ReLU such as ELU
(Clevert et al. (2016)), SELU (Klambauer et al. (2017)) and Softplus also satisfy the conditions
of Proposition 4 (see Supplementary Material for ELU). The comparison of activation functions
satisfying the conditions of Proposition 4 remains an open question.
4	Experimental Results
We demonstrate empirically our results on the MNIST dataset. In all the figures below, we compare
the learning speed (test accuracy with respect to the number of epochs/iterations) for different
activation functions and initialization parameters. We use the Adam optimizer with learning rate
lr = 0.001. The Python code to reproduce all the experiments will be made available on-line.
Initialization on the Edge of Chaos We initialize randomly the deep network by sampling Wj iid
N(0, σW/Nι-ι) and Bi 野 N(0, σb). In Figure 5, we compare the learning speed of a Swish network
for different choices of random initialization. Any initialization other than on the edge of chaos
results in the optimization algorithm being stuck eventually at a very poor test accuracy of 〜0.1 as
the depth L increases (equivalent to selecting the output uniformly at random). To understand what is
happening in this case, let us recall how the optimization algorithm works. Let {(Xi , Yi), 1 ≤ i ≤ N}
be the MNIST dataset. The loss we optimize is given by L(w, b) = PN=I '(yL(Xi), Yi)/N where
yL (x) is the output of the network, and ` is the categorical cross-entropy loss. In the ordered phase,
we know that the output converges exponentially to a fixed value (same value for all Xi), thus a small
change in w and b will not change significantly the value of the loss function, therefore the gradient
is approximately zero and the gradient descent algorithm will be stuck around the initial value.
(。)凫)= (2.952,0.04) (EoC)
(琮,凫)=(L 1) (Ordered phase)
20 2S ⅛	⅛	4
nbepochs
(a)	width = 30, depth = 20
(σ≡,σ2) = (2.952,0.04) (EOC)
(σ≡, σ^) = (1,1) (Ordered phase)
5	16 IS 20	25	30 3S «
nb-epochs
(b)	width = 80, depth = 40
Figure 5:	Impact of the initialization on the edge of chaos for Swish network
ReLU versus Tanh We proved in Section 3.2 that the Tanh activation guarantees better information
propagation through the network when initialized on the EOC. However, Tanh suffers
>us⊃ou< UO-4->ep=e>
(a) width = 10, depth = 5
Tanh with (σ≡j 而)=(1.722,0.04){ErOC)
ReLU with (σ≡, σQ = (2,0)(EoC)
Figure 6: Comparaison of ReLu and Tanh learning curves for different widths and depths
(b) width = 80, depth = 40
7
Under review as a conference paper at ICLR 2019
from the vanishing gradient problem. Consequently, we expect Tanh to perform better than ReLU for
shallow networks as opposed to deep networks, where the problem of the vanishing gradient is not
encountered. Numerical results confirm this fact. Figure 6 shows curves of validation accuracy with
confidence interval 90% (30 simulations). For depth 5, the learning algorithm converges faster for
Tanh compared to ReLu. However, for deeper networks (L ≥ 40), Tanh is stuck at a very low test
accuracy, this is due to the fact that a lot of parameters remain essentially unchanged because the
gradient is very small.
ReLU versus Swish As established in Section 3.2, Swish, like Tanh, propagates the information
better than ReLU and, contrary to Tanh, it does not suffer from the vanishing gradient problem. Hence
our results suggest that Swish should perform better than ReLU, especially for deep architectures.
Numerical results confirm this fact. Figure 7 shows curves of validation accuracy with confidence
interval 90% (30 simulations). Swish performs clearly better than ReLU especially for depth 40. A
comparative study of final accuracy is shown in Table 2. We observe a clear advantage for Swish,
especially for large depths. Additional simulations results on diverse datasets demonstrating better
performance of Swish over many other activation functions can be found in Ramachandran et al.
(2017) (Notice that these authors have already implemented Swish in Tensorflow).
Figure 7
---Swish With (σ⅛,σf)= (2.952,0.04)(EOe)
--ReLUWith (总蟾)=(2,0)(EOC)
10	15	20	25	30	35
nb_epochs
IS 20 2S 30	⅛	40
nb-epochs
(b) width = 80, depth = 40
(a) width = 10, depth = 5
: Convergence across iterations of the learning algorithm for ReLU and Swish networks
Table 2: Accuracy on test set for different values of (width, depth)
	(10,5)	(20,10)	(40,30)	(60,40)
ReLU	94.01	96.01	96.51	91.45
Swish	94.46	96.34	97.09	97.14
5 Conclusion and Discussion
We have complemented here the analysis of Schoenholz et al. (2017) which shows that initializing
networks on the EOC provides a better propagation of information across layers. In the ReLU case,
such an initialization corresponds to the popular approach proposed in He et al. (2015). However,
even on the EOC, the correlations still converge to 1 at a polynomial rate for ReLU networks. We
have obtained a set of sufficient conditions for activation functions which further improve information
propagation when the parameters (σb, σw) are on the EOC. The Tanh activation satisfied those
conditions but, more interestingly, other functions which do not suffer from the vanishing/exploding
gradient problems also verify them. This includes the Swish function used in Hendrycks & Gimpel
(2016), Elfwing et al. (2017) and promoted in Ramachandran et al. (2017) but also ELU Clevert et al.
(2016).
Our results have also interesting implications for Bayesian neural networks which have received
renewed attention lately; see, e.g., Hernandez-Lobato & Adams (2015) and Lee et al. (2018). They
show that if one assigns i.i.d. Gaussian prior distributions to the weights and biases, the resulting
prior distribution will be concentrated on close to constant functions even on the EOC for ReLU-like
activation functions. To obtain much richer priors, our results indicate that we need to select not only
parameters (σb, σw) on the EOC but also an activation function satisfying Proposition 4.
8
Under review as a conference paper at ICLR 2019
References
Y. Cho and L.K. Saul. Kernel methods for deep learning. Advances in Neural Information Processing
Systems, 22:342-350, 2009.
D.A. Clevert, T. Unterthiner, and S. Hochreiter. Fast and accurate deep network learning by exponen-
tial linear units (elus). International Conference on Learning Representations, 2016.
S. Elfwing, E. Uchibe, and K. Doya. Sigmoid-weighted linear units for neural network function
approximation in reinforcement learning. arXiv:1702.03118, 2017.
K. He, X. Zhang, S. Ren, and J. Sun. Delving deep into rectifiers: Surpassing human-level perfor-
mance on imagenet classification. ICCV, 2015.
D.. Hendrycks and K. Gimpel. Bridging nonlinearities and stochastic regularizers with gaussian error
linear units. arXiv:1606.08415, 2016.
J. M. Hernandez-Lobato and R.P. Adams. Probabilistic backpropagation for scalable learning of
bayesian neural networks. ICML, 2015.
G. Klambauer, T. Unterthiner, and A. Mayr. Self-normalizing neural networks. Advances in Neural
Information Processing Systems, 30, 2017.
J.F. Kolen and S.C. Kremer. Gradient flow in recurrent nets: The difficulty of learning longterm
dependencies. A Field Guide to Dynamical Recurrent Network, Wiley-IEEE Press, pp. 464-, 2001.
Y. LeCun, L. Bottou, G. Orr, and K. Muller. Efficient backprop. Neural Networks: Tricks of the trade,
Springer, 1998.
J. Lee, Y. Bahri, R. Novak, S.S. Schoenholz, J. Pennington, and J. Sohl-Dickstein. Deep neural
networks as gaussian processes. 6th International Conference on Learning Representations, 2018.
A.G. Matthews, J. Hron, M. Rowland, R.E. Turner, and Z. Ghahramani. Gaussian process behaviour
in wide deep neural networks. 6th International Conference on Learning Representations, 2018.
G.F. Montufar, R. Pascanu, K. Cho, and Y. Bengio. On the number of linear regions of deep neural
networks. Advances in Neural Information Processing Systems, 27:2924-2932, 2014.
R.M. Neal. Bayesian learning for neural networks. Springer Science & Business Media, 118, 1995.
R. Pascanu, T. Mikolov, and Y. Bengio. On the difficulty of training recurrent neural networks.
Proceedings of the 30th International Conference on Machine Learning, 28:1310-1318, 2013.
B. Poole, S. Lahiri, M. Raghu, J. Sohl-Dickstein, and S. Ganguli. Exponential expressivity in deep
neural networks through transient chaos. 30th Conference on Neural Information Processing
Systems, 2016.
P. Ramachandran, B. Zoph, and Q.V. Le. Searching for activation functions. arXiv e-print 1710.05941,
2017.
S.S. Schoenholz, J. Gilmer, S. Ganguli, and J. Sohl-Dickstein. Deep information propagation. 5th
International Conference on Learning Representations, 2017.
9
Under review as a conference paper at ICLR 2019
A	Proofs
We provide in the supplementary material the proofs of the propositions presented in the main
document, and we give additive theoretical and experimental results. For the sake of clarity we recall
the propositions before giving their proofs.
A. 1 Convergence to the fixed point: Proposition 1
Proposition 1. Let Mφ := supχ≥oE[∣φ02(XZ) + φ00(xZ)φ(xZ)|]. Suppose Mφ < ∞, then for
σW < M1^ and any σb, we have (σb, σw) ∈ Dφ,var and Kφ,var (σb, σw) = ∞
Moreover, let Cφ,δ := supx,y≥0,∣x-y∣≤δ,c∈[0,i]E[∣Φ0(xZ1)Φ0(y(cZ1 + 八-CZ2)∣]. Suppose
Cφ,δ < ∞ for some positive δ, then for σW < min( M,看)and any σb, we have (σb,σw) ∈
Dφ,var ∩ Dφ,corr and Kφ,var (σb, σw ) = Kφ,corr (σb, σw ) = ∞.
Proof. To abbreviate the notation, we use ql := qal for some fixed input a.
Convergence of the variances: We first consider the asymptotic behaviour of ql = qal . Recall that
ql = F (ql-1) where,
F (x) = σ2 + σW E[φ(√xZ )2].
The first derivative of this function is given by:
.	c 一 Z .. 一 .一一	C 一 .. 一 C	—一—一
F 0(x) = σW E[—φ0 (√XZ )φ(√XZ)] = σW E[φ0(√XZ )2 + φ00(√XZ )φ(√XZ)]	(3)
x
where we used Gaussian integration by parts E[ZG(Z)] = E[G0(Z)], an identify satisfied by any
function G such that E[|G0(Z)|] < ∞.
Using the condition on φ, We see that for σW < M1-, the function F is a contraction mapping,
and the Banach fixed-point theorem guarantees the existence of a unique fixed point q of F, with
liml→+∞ ql = q. Note that this fixed point depends only on F, therefore, this is true for any input a,
and Kφ,var (σb, σw ) = ∞.
Convergence of the covariances: Since Mφ < ∞, then for all a, b ∈ Rd there exists l0 such that,
for all l> lo, | Jqa — Jqlh | < δ. Let l > lo, using Gaussian integration by parts, We have
ddCα+1=σw E[∣Φ0(qqi Z1)φo(qqh' (CahZI+qτ-^2^2)∖].
dcah
We cannot use the Banach fixed point theorem directly because the integrated function here depends
on l through ql. For ease of notation, We Write Cl := Clah, We have
cl dCl+1
∖cl+1 - c 1 = 1 L-I ιcr (x)dx∖ ≤ σwCφ∖c - cι∖.
Therefore, for σw2
At the limit
< min(M,卷),Cl is a Cauchy sequence and it converges to a limit C ∈ [0,1].
C= f(C)
σ2 + σWE[^√qzl)以√q(CzI + Vλ1 - c2z2)))]
q
The derivative of this function is given by
f0(x) = σWE[φ0(√qZ1)φ0(√q(xZ1 + √1 - xZ2)]
By assumption on φ and the choice of σw, We have supx∖f0(x)∖ < 1, so that f is a contraction, and
has a unique fixed point. Since f(1) = 1, C = 1. The above result is true for any a, b, therefore,
Kφ,var (σh,σw ) = Kφ,corr (σh,σw ) = ∞.	□
10
Under review as a conference paper at ICLR 2019
As an illustration we plot in Figure 12 the variance for three different inputs with (σb, σw) = (1, 1),
as a function of the layer l. In this example, the convergence for Tanh is faster than that of ReLU.
Figure 8: Convergence of the variance for three different inputs with (σb, σw) = (1, 1)
Lemma 1. Let (σb, σw) ∈ Dφ,var ∩ Dφ,corr such that q > 0, a, b ∈ Rd and φ an activation function
such that supx∈K E[φ(xZ)2] < ∞ for all compact sets K. Define fl by cla+,b1 = fl(cla,b) and f by
f(x) = σ2+σw E[φ(√qZ1)φ(√q(XZ1+√1-χ2z2)) .Then limι→∞ supχ∈[0j] ∣fι(x) - f(x)∣ = 0.
Proof. For x ∈ [0, 1], we have
力(X)- f(x) = (-1= - 1)(σ2 + σWE[φ(qqi。1欣启〃2(x))])
qal qbl	q
+σW (E[Φ(ji zi)Φ(qqι U2(x))] - E[φ(√qzl)φ(√qu2(χ))]),
where u2(x) := xZ1 + λ∕1 - x2Z2. The first term goes to zero uniformly in X using the condition
on φ and Cauchy-Schwartz inequality. As for the second term, it can be written as
Eι(φ(qqa ZI)- φ(√qZι))φ(qqb u2(X))]+E[φ(√qZι)(φ(qqb u2(X))- φ(√qu2(X)))]
again, using Cauchy-Schwartz and the condition on φ, both terms can be controlled uniformly in X
by an integrable upper bound. We conclude using the Dominated convergence.	□
A.2 Results for ReLU-like activation functions: proof of Propositions 2 and 3
Proposition 2. Let φ be a ReLU-Iike function with λ and β defined above. Then for any σw <
Jλ⅛ and σb ≥ 0, we have (σb, σw) ∈ Dφ,var with Kφ,var (σb, σw ) = ∞. Moreover EOC =
{(0, √叫，(Z)2：)} and, on the EOC, F(x) = X for any X ≥ 0.
Proof. We write ql = qal throughout the proof. Note first that the variance satisfies the recursion:
ql+1 = σ2 + σW E[φ(Z )2]ql = σ2 + σW λ2±β2- ql.	1
(4)
For all σw < λj+β+βq,q = σb (1 -σW (λ2 + β2)∕2) 1 is a fixed point. This is true for any input,
therefore Kφ,var(σb, σw ) = ∞ and (i) is proved.
Now, the EOC equation is given by χι = σWE[φ0(Z)2] = σW λ2+β2-. Therefore, σW = 入2;啰.
Replacing σw2 by its critical value in equation 4 yields
ql+1 = σb2 +ql.
11
Under review as a conference paper at ICLR 2019
Thus q = σb2 + q if and only if σb = 0, otherwise ql diverges to infinity. So the frontier is reduced to
a single point (σb2, σw2 ) = (0, E[φ0(Z)2]-1), and the variance does not depend on l.
□
Proposition 3 (ReLU kernel). Consider a ReLU network with parameters (σb2 , σw2 ) = (0, 2) on the
EOC.We have
(i)for X ∈ [0,1], f(x) = ∏1 X arcsin(x) + ɪ √Γ ^x -1- 2 ^x,
ii)for any (a, b), limι→∞ Cab = 1 and 1 一 Cab 〜92∏∏2 as l → ∞.
Proof. In this case the correlation function f is given by f (x) = 2E[(Z1)+(xZ1 + √1 一 x2Z2)+]
where (X)+ := X1x>0.
•	Let X ∈ [0, 1], note that f is differentiable and satisfies,
f0(X) = 2E[1Zι >01χZι +√1-X2z2>o],
which is also differentiable. Simple algebra leads to
f" (X) =	AI~~2.
π 1 一 X2
Since arcsin0(x) = √ι-χτ and f0(0) = 1/2,
f 0 (x) = — arcsin(x) + ɪ.
We conclude using the fact that / arcsin = X arcsin +√1 — x2 and f⑴=1.
•	We first derive a Taylor expansion of f near 1. Consider the change of variable X = 1 一 t2
with t close to 0, then
arcsin(1 — t2) = ∏2 — √2t — ɪ2213 + O(t5),
so that
arcsin(X)= ∏ — √2(1 — x)1/2 — ^^(I — x)3/2 + O((1 — x)5/2),
and
X arcsin(X)= ∏ — √2(1 — x)1/2 + 1；^^(1 — x)3/2 + O((1 — x)5/2).
Since
P - X2 = √2(1 — x)1/2 —彳(1 — x)3/2 + O((1 — x)5/2),
We obtain that
f(x) x→1- X + 23∏2(1 — x)3/2 + O((1 — x)5/2).	(5)
Since (f(x) — x)0 = ∏1 (arcsin(X)— π∏) < 0 and f(1) = 1, for all X ∈ [0,1[, f(x) > x.
If Cl < Cl+1 then by taking the image by f (Which is increasing because f0 ≥ 0) We have
that Cl+1 < Cl+2, and We knoW that C1 = f(C0) ≥ C0, so by induction the sequence Cl is
increasing, and therefore it converges (because it is bounded) to the fixed point of f Which
is 1.
Now let γι := 1 — Cab for a, b fixed. We note S = 23∏2, from the series expansion we have
that γ1+1 = γι — sγ3/2 + O(γ5/2) so that
Y-T=Y-1/2(1 - sγ>2 + O(y3/2))T/2 =YlT/2(1 + 豺/ + O(y3/2))
=Y-1/2 + 2 + O(Yl).
12
Under review as a conference paper at ICLR 2019
Thus, as l goes to infinity
-1/2	-1/2
γl+1	- γl
〜
s
2
and by summing and equivalence of positive divergent series
J2 〜Sl
which terminates the proof.
□
A.3 A better class of activation functions: Proofs of Propositions 4, 5, 6 and
Lemma 2
Proposition 4 (main result). Let φ be an activation function. Recall the definition ofthe variance
function F(x) := σ2 + σWE[φ(√xZ)2]. Assume that
(i)	φ(0) = 0, and φ has right and left derivatives in zero and at least one of them is different from
zero (φ0(0+) = 0 or φo(0-) = 0), and there exists K > 0 such that ∣φ(x)∖ ≤ K.
(ii)	There exists A > 0 such that for any σb ∈ [0, A], there exists σw,EOC > 0 such that (σb, σw,EOC) ∈
EOC.
(iii)	For any σb ∈ [0, A], the function F with parameters (σb, σw,EOC) is non-decreasing and
limσb→0 q = 0 where q is the minimal fixed point ofF, q := inf {x : F(x) = x}).
(iv)	For any σb ∈ [0, A], the correlation function f with parameters (σb, σw,EOC) introduced in
Lemma 1 is convex.
Then, for any σb ∈ [0, A], we have Kφ,var (σb, σw ) ≥ q, and
lim sup |f (x) - x| = 0.
(σb,σσbw→)∈0EOCx∈[0,1]
Proof. We first prove that Kφ,var (σb, σw ) ≥ q. We assume that σb > 0, the case σb = 0 is trivial
since in this case q = 0 (the output of the network is zero in this case).
Since F is continuous and F(0) = σb2 > 0, we have x ≤ F(x) ≤ q for all x ∈ [0, q]. Using the fact
that F is non-decreasing for any input a such that qa1 ≤ q, we have ql is increasing and converges to
the fixed point q. Therefore Kφ,var (σb, σw ) ≥ q.
Now we prove that on the edge of chaos, we have
2
lim —b = 0.	(6)
σb→0 q
The EOC equation is given by σWE[φ0(√qZ)2] = 1. By taking the limit σb → 0 on the edge of
chaos, and using the fact that limσb→o q = 0,we have σW φ(内 +φ (0 ) = 1. Moreover q verifies
F(q) = 1 =遍 + σW E[( T )2],
qq	q
so that by taking the limit σb → 0, and using the dominated convergence theorem, we have that
1 = limσb→0 σb + σW φ(0+^+φ (0 产 =limσb→0 σ^ + 1 and equation 6 holds.
Finally since f is strictly convex, for all x ∈ [0, 1] f0(x) ≤ f0(1) = 1 if (σb, σw) ∈ EOC. Therefore
0 ≤ f (x) - X ≤ f (0) = σq-, we conclude using the fact that limσb→o σq- = 0.
Note however that for all σb > 0, if (σb, σw) ∈ EOC, for any inputs a, b, we have liml→∞ cla,b = 1.
Indeed, since f is usually strictly convex (otherwise, f would be equal to identity on at least a segment
of [0, 1]) and f0(1) = 1, we have that f is a contraction (because f0 ≥ 0), therefore the correlation
converges to the unique fixed point of f which is 1. Therefore, in most of the cases, the result of
Proposition 4 should be seen as a way of slowing down the convergence of the correlation to 1. □
13
Under review as a conference paper at ICLR 2019
Lemma 2. Under the conditions of Proposition 4, the only change being limσb →0 q > 0, the result
of Proposition 4 holds only if the activation function is linear.
Proof. Using the convexity of f and the result of Proposition 4, we have in the limit σb → 0,
f0(θ) = f0(1) = 1, which is equivalent to E[φ0(√qZ)2] = E[φ0(√qZ)]2 which implies that
var(φ0(√qZ)) = 0. Therefore there exists a constant aι such that φ0(√qZ) = aι almost surely. This
implies φ0 = aι almost everywhere.	□
Proposition 5. Let φ be a bounded function such that φ(0) = 0, φ0(0) > 0, φ0(x) ≥ 0, φ(-x) =
-φ(x), xφ(x) > 0 and xφ00(x) < 0 for x 6= 0, and φ satisfies (ii) in Proposition 4. Then, φ satisfies
all the conditions of Proposition 4.
Proof. Let φ be an activation function that satisfies the conditions of Proposition 5.
(i)	we have φ(0) = 0 and φ0(0) > 0. Since φ is bounded and 0 < φ0(0) < ∞, then there exists K
such that ∣φ(χ)∣ ≤ K.
(ii)	The condition (ii) is satisfied by assumption.
(iii)	Let σb > 0 and σw > 0. Using equation 3 together with φ0 > 0, we have F0(x) ≥ 0 so that F
is non-decreasing. Moreover, we have F(R+) ⊂ [B, C] := [σb2, σb2 + σw2 M2], therefore any fixed
point of F should be in [B, C]. We have F (B) ≥ B and F (C) ≤ C and F is strictly increasing,
therefore, there exists a fixed point q of F in [B, C]. Now we prove that limσb→0 q = 0. Using
the EOC equation, q satisfies the equation q = σb + E[Φ((√qZ)j . Now let,s prove that the function
e(x) := X - E[φ(√XZ)j is increasing near 0 which means it is an injection near 0, this is sufficient
to conclude (because we take q to be the minimal fixed point). After some calculus, we have
e0 (x)
—
E[φ00(√XZ)(φ(√XZ)E[φ0(√XZ)2] - √χφ0(√XZ)E[φ(√XZ)2])]
E[φ0(√XZ )2]
Using Taylor expansion near 0, after a detailed but unenlightening calculation the numerator is equal
to -2φ0(0)2φ000 (O)2x√X + O(x2), therefore the function e is increasing near 0.
(iv)	Finally, using the notations Ui := √qZι and U2(x) = √q(xZι + √1 - x2Z2), the first and
second derivatives of the correlation function are given by
f0(x) = σw2 E[φ0(U1)φ0(U2(x))],	f00 (x) = σw2 qE[φ00(U1)φ00(U2(x))]
where we used Gaussian integration by parts. Let x > 0, we have that
E[φ00(U1)φ00(U2(x))] = E[1{U1≥0}φ00(U1)φ00(U2(x))] + E[1{U1≤0}φ00(U1)φ00(U2(x))]
= 2E[1{U1≥0}φ00(U1)φ00(U2(x))]
where we used the fact that (Z1, Z2) = (-Z1, -Z2) (in distribution) and φ00(-y) = -φ00(y) for any
y.
Using xφ00(x) ≤ 0, we have 1{uι≥o}Φ00(uι) ≤ 0. We also have for all y > 0, E[φ00(U2(χ))∣Uι =
y] < 0, this is a consequence of the fact that φ00 is an odd function and that for x > 0 and y > 0, the
mapping z2 → Xy + √1 - x2 z2 moves the center of the Gaussian distribution to a strictly positive
number, we conclude that f00(x) > 0 almost everywhere and assumption (iii) of Proposition 4 is
verified.
□
Proposition 6. The Swish activation function φswish(x) = X ∙ sigmoid (x) = ι+∣-x satisfies all the
conditions of Proposition 4.
14
Under review as a conference paper at ICLR 2019
Figure 9: Graphs of ReLU and Swish
Proof. To abbreviate notation, we note φ := φSwish = xex/(1 + ex) and h := ex/(1 + ex) is the
Sigmoid function. This proof should be seen as a sketch of the ideas and not a rigourous proof.
•	We have φ(0) = 0 and φ0(0) = 1 and ∣φx ∣ ≤ 1
•	As illustrated in Table 1 in the main text, it is easy to see numerically that (ii) is satisfied.
Moreover, We observe that limσb →0 q = 0, Which proves the second part of the (iii).
•	NoW We prove that F0 > 0, We note g(x) := xφ0(x)φ(x). We have
g(x)= χ2(1 + e-x + Xe-X)
g '	(1 + e-x)3
Define G by
G(x) = g(x) ifx ≤ 0
G(x) = -g(-x) ifx > 0
so that G(-x) = -G(x) for all x ∈ R and g(x) ≥ G(x) for all x ≤ 0. Let x > 0, then
g(x) > G(X) ^⇒ 1 + e-x + xe-x ≥ e-3x(-1 — ex + Xex)
which holds true for any positive number x. We thus have g(χ) > G(X) for all real numbers
x. Therefore E[g(√XZ)] > 0 almost everywhere and F0 > 0. The second part of (iii) was
already proven above.
• Let σb > 0 and σw > 0 such that q exists. Recall that
f00(X) = σw2 qE[φ00(U1)φ00(U2(X))]
In Figure 10, we show the graph of E[φ00(U1)φ00(U2(X))] for different values of q (from 0.1
to 10, the darkest line being for q = 10). A rigorous proof can be done but is omitted here.
15
Under review as a conference paper at ICLR 2019
Figure 10: graphs of E[φ00(U1)φ00(U2(x))] for different values of q (from 0.1 to 10, the darkest line
corresponds to q = 10)
We observe that f00 has very small values when q is large, this is a result of the fact that φ00
is concentrated around 0.
Remark: On the edge of chaos, We have σWE[φ0(√qZ)2] = 1. Recall that F0 can also be expressed
as
FO(X) = σW (E[φ0(√χZ )2 ] + E[φ00(√χZ )φ(√χZ)]),
this yields
F 0 (q) = 1 + σW E[φ00(√qz )φ(√qZ)].	(7)
The term E[φ00(√qZ)φ(√qZ)] is very small compared to 1 (〜0.01), therefore F0(q) ≈ 1.
Notice also that the theoretical results corresponds to the equivalent Gaussian process, Which is just
an approximation of the neural netWork. Thus, using a value of (σb, σw ) close to the EOC should
not essentially change the quality of the result.	□
B S upplementary theoretical results
B.1	Sufficient conditions for bounded activation functions
We can replace the conditions "φ satisfies (ii)" in Proposition 5 by a sufficient condition. HoWever,
this condition is not satisfied by Tanh.
Proposition 7. Let φ be a bounded function such that φ(0) = 0, φ0(0) > 0, φ0(x) ≥ 0, φ(-x) =
—φ(x), xφ(x) > 0 and xφ00(x) < 0 for X = 0, and ∣Eφ0(xZ)21 & ∣x∣-2β for large X and some
β ∈ (0, 1). Then, φ satisfies all the conditions of Proposition 4.
Proof. Let φ be an activation function that satisfies the conditions of Proposition 7. The proof is
similar to the one of 5, we only need to show that having ∣Eφ0(xZ)21 & ∣x∣-2β for large X and some
β ∈ (0, 1) implies that (ii) of 4 is verified.
We have that σW∣Eφ0(√qZ)21 & σWq-2β = σW(σ2 + σWE[φ(√qZ)2])-β, so that we can make
the term σW ∣Eφ0(√qZ)21 take any value between 0 and ∞. Therefore, there exists σw such that
(σb , σw ) ∈ EOC, and assumption (ii) of Proposition 4 holds.
□
B.2	Impact of Smoothness
In the proof of Proposition 5, we used the condition on φ00 (odd function) to prove that f00 > 0,
however, in some cases when we can explicitly calculate f, we do not need φ00 to be defined. This is
the case for Hard-Tanh, which is a piecewise-linear version of Tanh. We give an explicit calculation
16
Under review as a conference paper at ICLR 2019
of f00 for the Hard-Tanh activation function which we note HT in what follows. We compare the
performance of HT and Tanh based on a metric which we will define later.
HT is given by
HT (x) = {-1
if x < -1
if -1 ≤ x ≤ 1
if x > 1
Recall the propagation of the variance ql
ql+1= σ + σW E(HT (VV Z )2)
where HT is the Hard-Tanh function. We have
E(HT( VVZ)2) = E(1Z<-√1) + E(1-ι∕√qι<z<ι∕√qιZ 2) + E(1z>ι∕√q∣)
1 -	2/xP( — 2⅛)
This yields
where
ql+1 = g(ql)
g(x) = σb2 + σw2 (1 -
2 exP(- 1))
√x √2π
- Edge of chaos :
To study the correlation behaviour, we will assume that the variance converges to q. We have
E(HT0(√qZ)2) = E(1-√l<z<击) = 2Ψ(√) - 1 (where Ψ is the cumulative distribution function
of a standard normal variable). The edge of chaos is then given by the equation σW (2Ψ( √1q) — 1) = 1.
We fix σw to its value on the edge.
Now let a and b be any two inputs. We have
cl+1 = f(cl)
where
f(x)
σb2 + σw2 E[φ(U1)φ(U2(x))]
q
with Ui := √qZι, and U2(χ) := √q(χZι + √Γ-^2Z2).
Lemma 3. Suppose ql converges to a fixed point q > 0. Then,
∀x ∈ [0, 1], f 00(x) =——σw	(e- q(1+x) — e- q(1-x))
π 1 - x2
Proof. We note a :=1/√q. For X ∈ [0, 1[, we have that:
fO(X) = σWE[1-α<Zι<α X 1-α<xZι+√1-X2Z2<α]
= σw E[1-α<Z1 <α × (1
—α<xZ1 + √1-x2Z2	1α<xZι +√1-x2Z2 )]
17
Under review as a conference paper at ICLR 2019
Figure 11: The correlation function on the edge of order-to-chaos for a Tanh network with small
values of σb
We deal with the first part fi(x) = σWE[1-α<Zι<α X 1-a<xZ1+√1-χ2z2]，we have that ：
f1 (x) = σwE[1-α<Z1 <α ×
2
=w— E[1-a<Zι <α
2π
√1-X2(ZI - √T-X2Z2)δ-α=xzι+√1-χ2z2]
1	Z1 + xα	(xZ1 + α)2
√Γ-^2 T-m exp(-项ET)]
2
σW
—x2
α
-α
z1 + xα
1 — x2
z12 + 2xαz1 + α2
exp(—-2(1—χ2)
)dz1
×
—,w	(e-ι+x — e- J)
2π√1 — x2
we show a similar result for the second part and we conclude.
□
We proved that f00 > 0 for Hard-Tanh, all other conditions of proposition 5 (excluding the
conditions on φ00 since those were only used to prove f00 > 0) are verified, therefore the result of
Proposition 4 holds for Hard-Tanh. we want to compare Tanh and Hard-Tanh when σb is small
since this is the important case. The proof of Proposition 4 gives us an idea on how to compare
them, the ratio σb controls the quality of approximation of f by the identity function, so a smaller
ratio means a better approximation. Figure 2 shows that Tanh outperforms Hard-Tanh in this
sense. This also means that for the same quality of approximation, we have bigger q (bigger
output variance) with Tanh compared to Hard-Tanh. This can particularly be due to the non-
smoothness of Hard-Tanh, which slows down the dominated convergence in the proof of Proposition 4.
C S upplementary experimental results
C.1 ELU activation
We show numerically that the activation function ELU defined by φ(x) = (ex — 1)1x<0 + x1x≥0
satisfies the conditions of Proposition 4. We have φ(χ) = 0, φ0(0+) = 1, φ0(0-) = 1 and ∣ φXχ)∣ ≤ 1.
Other conditions of Proposition 4 are shown numerically in graphs below.
18
Under review as a conference paper at ICLR 2019
(a) EOC curve
(c) Function f for (σb, σw) = (0.2, 1.23)
(d) q as a function of σb
Figure 12: Experimental results for ELU activation
Figure 12a shows the EOC curve (condition (ii) is satisfied). Figure 12b shows that is non-decreasing
and Figure 12d illustrates the fact that limσb→0 q = 0. Finally, Figure 12c shows that function f is
convex. Although the figures of F and f are shown just for one value of (σb, σw), the results are true
for any value of (σb, σw) on the EOC.
C.2 What happens when the depth is larger than the width?
Table 2 presents a comparative analysis of the validation accuracy of ReLU and Swish when the
depth is larger than the width, in which case the approximation by a Gaussian process is not accurate
(notice that in the approximation of a neural network by a Gaussian process, we first let Nl → ∞,
then we consider the limit of large L). ReLU tends to outperforms Swish when the width is smaller
than the depth and both are small, however, we still observe a clear advantage of Swish for deeper
architectures.
Table 3: Validation accuracy for different values of (width, depth)
(5,10)	(10,20)	(30,40)	(40,50)
ReLU	86.65	93.76	93.59	90.77
Swish	86.56	93.21	96.78	97.08
19