Published as a conference paper at ICLR 2019
Adversarial Imitation via Variational Inverse
Reinforcement Learning
Ahmed H. Qureshi
Department of Electrical and Computer Engineering
University of California San Diego,
La Jolla, CA 92093, USA
a1qureshi@ucsd.edu
Byron Boots
College of Computing
Georgia Institute of Technology
Atlanta, GA 30332, USA
bboots@cc.gatech.edu
Michael C. Yip
Department of Electrical and Computer Engineering
University of California San Diego,
La Jolla, CA 92093, USA
yip@ucsd.edu
Ab stract
We consider a problem of learning the reward and policy from expert exam-
ples under unknown dynamics. Our proposed method builds on the framework
of generative adversarial networks and introduces the empowerment-regularized
maximum-entropy inverse reinforcement learning to learn near-optimal rewards
and policies. Empowerment-based regularization prevents the policy from over-
fitting to expert demonstrations, which advantageously leads to more generalized
behaviors that result in learning near-optimal rewards. Our method simultane-
ously learns empowerment through variational information maximization along
with the reward and policy under the adversarial learning formulation. We evalu-
ate our approach on various high-dimensional complex control tasks. We also test
our learned rewards in challenging transfer learning problems where training and
testing environments are made to be different from each other in terms of dynam-
ics or structure. The results show that our proposed method not only learns near-
optimal rewards and policies that are matching expert behavior but also performs
significantly better than state-of-the-art inverse reinforcement learning algorithms.
1	Introduction
Reinforcement learning (RL) has emerged as a promising tool for solving complex decision-making
and control tasks from predefined high-level reward functions (Sutton et al., 1998). However, defin-
ing an optimizable reward function that inculcates the desired behavior can be challenging for many
robotic applications, which include learning social-interaction skills (Qureshi et al., 2018; 2017),
dexterous manipulation (Finn et al., 2016b), and autonomous driving (Kuderer et al., 2015).
Inverse reinforcement learning (IRL) (Ng et al., 2000) addresses the problem of learning reward
functions from expert demonstrations, and it is often considered as a branch of imitation learning
(Argall et al., 2009). The prior work in IRL includes maximum-margin (Abbeel & Ng, 2004; Ratliff
et al., 2006) and maximum-entropy (Ziebart et al., 2008) formulations. Currently, maximum entropy
(MaxEnt) IRL is a widely used approach towards IRL, and has been extended to use non-linear
function approximators such as neural networks in scenarios with unknown dynamics by leveraging
sampling-based techniques (Boularias et al., 2011; Finn et al., 2016b; Kalakrishnan et al., 2013).
However, designing the IRL algorithm is usually complicated as it requires, to some extent, hand
engineering such as deciding domain-specific regularizers (Finn et al., 2016b).
Rather than learning reward functions and solving the IRL problem, imitation learning (IL) learns a
policy directly from expert demonstrations. Prior work addressed the IL problem through behavior
cloning (BC), which learns a policy from expert trajectories using supervised learning (Pomerleau,
1991). Although BC methods are simple solutions to IL, these methods require a large amount of
1
Published as a conference paper at ICLR 2019
data because of compounding errors induced by covariate shift (Ross et al., 2011). To overcome
BC limitations, a generative adversarial imitation learning (GAIL) algorithm (Ho & Ermon, 2016)
was proposed. GAIL uses the formulation of Generative Adversarial Networks (GANs) (Goodfel-
low et al., 2014), i.e., a generator-discriminator framework, where a generator is trained to generate
expert-like trajectories while a discriminator is trained to distinguish between generated and expert
trajectories. Although GAIL is highly effective and efficient framework, it does not recover trans-
ferable/portable reward functions along with the policies, thus narrowing its use cases to similar
problem instances in similar environments. Reward function learning is ultimately preferable, if
possible, over direct imitation learning as rewards are portable functions that represent the most
basic and complete representation of agent intention, and can be re-optimized in new environments
and new agents.
Reward learning is challenging as there can be many optimal policies explaining a set of demonstra-
tions and many reward functions inducing an optimal policy (Ng et al., 2000; Ziebart et al., 2008).
Recently, an adversarial inverse reinforcement learning (AIRL) framework (Fu et al., 2017), an ex-
tension of GAIL, was proposed that offers a solution to the former issue by exploiting the maximum
entropy IRL method (Ziebart et al., 2008) whereas the latter issue is addressed through learning
disentangled reward functions by modeling the reward as a function of state only instead of both
state and action. However, AIRL fails to recover the ground truth reward when the ground truth
reward is a function of both state and action. For example, the reward function in any locomotion
or ambulation tasks contains a penalty term that discourages actions with large magnitudes. This
need for action regularization is well known in optimal control literature and limits the use cases
of a state-only reward function in most practical real-life applications. A more generalizable and
useful approach would be to formulate reward as a function of both states and actions, which in-
duces action-driven reward shaping that has been shown to play a vital role in quickly recovering
the optimal policies (Ng et al., 1999).
In this paper, we propose the empowerment-regularized adversarial inverse reinforcement learning
(EAIRL) algorithm1. Empowerment (Salge et al., 2014) is a mutual information-based theoretic
measure, like state- or action-value functions, that assigns a value to a given state to quantify the
extent to which an agent can influence its environment. Our method uses variational information
maximization (Mohamed & Rezende, 2015) to learn empowerment in parallel to learning the re-
ward and policy from expert data. Empowerment acts as a regularizer to policy updates to prevent
overfitting the expert demonstrations, which in practice leads to learning robust rewards. Our exper-
imentation shows that the proposed method recovers not only near-optimal policies but also recovers
robust, transferable, disentangled, state-action based reward functions that are near-optimal. The re-
sults on reward learning also show that EAIRL outperforms several state-of-the-art IRL methods by
recovering reward functions that leads to optimal, expert-matching behaviors. On policy learning,
results demonstrate that policies learned through EAIRL perform comparably to GAIL and AIRL
with non-disentangled (state-action) reward function but significantly outperform policies learned
through AIRL with disentangled reward (state-only) and GAN interpretation of Guided Cost Learn-
ing (GAN-GCL) (Finn et al., 2016a).
2	Background
We consider a Markov decision process (MDP) represented as a tuple (S, A, P, R, ρ0, γ) where S
denotes the state-space, A denotes the action-space, P represents the transition probability distri-
bution, i.e., P : S × A × S → [0, 1], R(s, a) corresponds to the reward function, ρ0 is the initial
state distribution ρ0 : S → R, and γ ∈ (0, 1) is the discount factor. Let q(a|s, s0) be an inverse
model that maps current state s ∈ S and next state s0 ∈ S to a distribution over actions A, i.e.,
q : S × S × A → [0, 1]. Let π be a stochastic policy that takes a state and outputs a distribution
over actions such that π : S × A → [0, 1]. Let τ and τE denote a set of trajectories, a sequence of
state-action pairs (s0,a0, •…ST ,aτ), generated by a policy ∏ and an expert policy ∏e ,respectively,
where T denotes the terminal time. Finally, let Φ(s) be a potential function that quantifies a utility of
a given state s ∈ S, i.e., Φ : S → R. In our proposed work, we use an empowerment-based potential
function Φ(∙) to regularize policy update under MaxEnt-IRL framework. Therefore, the following
1Supplementary material is available at https://sites.google.com/view/eairl
2
Published as a conference paper at ICLR 2019
sections provide a brief background on MaxEnt-IRL, adversarial reward and policy learning, and
variational information-maximization approach to learn the empowerment.
2.1	MaxEnt-IRL
MaxEnt-IRL (Ziebart et al., 2008) models expert demonstrations as Boltzmann distribution using
parametrized reward rξ (τ) as an energy function, i.e.,
Pξ(T) = -1eχp(rξ (τ))
(1)
where rξ(τ) = PtT=0 rξ(st, at) is a commutative reward over given trajectory τ, parameterized by
ξ, and- is the partition function. In this framework, the demonstration trajectories are assumed to be
sampled from an optimal policy ∏*, therefore, they get the highestlikelihood whereas the SUboPtimal
trajectories are less rewarding and hence, are generated with exponentially decaying probability. The
main compUtational challenge in MaxEnt-IRL is to determine - . The initial work in MaxEnt-IRL
compUted - Using dynamic programming (Ziebart et al., 2008) whereas modern approaches (Finn
et al., 2016b;a; FU et al., 2017) present importance sampling techniqUe to approximate - Under
Unknown dynamics.
2.2	Adversarial Inverse Reinforcement Learning
This section briefly describes Adversarial Inverse Reinforcement Learning (AIRL) (FU et al., 2017)
algorithm which forms a baseline of oUr proposed method. AIRL is the cUrrent state-of-the-art IRL
method that bUilds on GAIL (Ho & Ermon, 2016), maximUm entropy IRL framework (Ziebart et al.,
2008) and GAN-GCL, a GAN interpretation of GUided Cost Learning (Finn et al., 2016b;a).
GAIL is a model-free adversarial learning framework, inspired from GANs (Goodfellow et al.,
2014), where the policy π learns to imitate the expert policy behavior πE by minimizing the Jensen-
Shannon divergence between the state-action distribUtions generated by π and the expert state-action
distribUtion by πE throUgh following objective
min max	Eπ [log D(s, a)] + EπE [log(1 - D(s, a))] - λH (π)	(2)
π D∈(0,1)S×A	E
where D is the discriminator that performs the binary classification to distingUish between sam-
ples generated by π and πE, λ is a hyper-parameter, and H(π) is an entropy regUlarization term
Eπ[logπ]. Note that GAIL does not recover reward; however, Finn et al. (2016a) shows that the
discriminator can be modeled as a reward fUnction. ThUs AIRL (FU et al., 2017) presents a formal
implementation of (Finn et al., 2016a) and extends GAIL to recover reward along with the policy by
imposing a following strUctUre on the discriminator:
Dξ,ψ(s,a, s')
exp[fξ,r (s, a, s')]
exp[fξ,φ(s,a, s')] + ∏(a∣s)
(3)
where fξ,φ(s, a, s') = rξ(s) + γhφ(s') - hφ(s) comprises a disentangled reward term rξ(s) with
training parameters ξ, and a shaping term F = YhW(S') - hφ(s) with training parameters 夕.The
entire Dξ,φ(s, a, s') is trained as a binary classifier to distinguish between expert demonstrations TE
and policy generated demonstrations τ . The policy is trained to maximize the discriminative reward
r(s, a, s') = log(D(s, a, s') — log(1 — D(s, a, s'))). Note that the function F = γhφ(s') — hφ(s)
consists of free-parameters as no structure is imposed on hφ(∙), and as mentioned in (FU et al., 2017),
the reward function rξ(∙) and function F are tied upto a constant (γ - 1)c, where C ∈ R; thus the
impact of F, the shaping term, on the recovered reward r is quite limited and therefore, the benefits
of reward shaping are not fully realized.
2.3	Empowerment as Maximal Mutual Information
Mutual information (MI), an information-theoretic measure, quantifies the dependency between two
random variables. In intrinsically-motivated reinforcement learning, a maximal of mutual infor-
mation between a sequence of K actions a and the final state s0 reached after the execution of a,
3
Published as a conference paper at ICLR 2019
conditioned on current state s is often used as a measure of internal reward (Mohamed & Rezende,
2015), known as Empowerment Φ(s), i.e.,
Φ(s) = max I (a, s0|s) = maxEp(s0|a,s)w(a|s)
l ( p(a, * Sls)
°g (w(a∣s)p(s0∣s)
(4)
where p(s0 |a, s) is a K-step transition probability, w(a|s) is a distribution over a, and p(a, s0|s) is
a joint-distribution of K actions a and final state s02. Intuitively, the empowerment Φ(s) of a state
s quantifies an extent to which an agent can influence its future. Thus, maximizing empowerment
induces an intrinsic motivation in the agent that enforces it to seek the states that have the highest
number of future reachable states.
Empowerment, like value functions, is a potential function that has been previously used in re-
inforcement learning but its applications were limited to small-scale cases due to computational
intractability of MI maximization in higher-dimensional problems. Recently, however, a scalable
method (Mohamed & Rezende, 2015) was proposed that learns the empowerment through the more-
efficient maximization of variational lower bound, which has been shown to be equivalent to max-
imizing MI (Agakov, 2004). The lower bound was derived (for complete derivation see Appendix
A.1) by representing MI in term of the difference in conditional entropies H(∙) and utilizing the
non-negativity property of KL-divergence, i.e.,
IW (S)= H(a∣s) - H (a∣s0,s) ≥ H (a) + EpR&s" (a∣s) [log qφ(a∣s0,s)] = Iw,q (S)	(5)
where H(a|s) = -Ew(a∣s)[logw(a∣s)], H(a∣s0,s) = -Ep(s，|a,s)w(a|s)[logp(a∣s0,s)], qφ(∙) is a
variational distribution with parameters φ and wθ(∙) is a distribution over actions with parameters
θ. Finally, the lower bound in Eqn. 5 is maximized under the constraint H (a|S) < η (prevents
divergence, see (Mohamed & Rezende, 2015)) to compute empowerment as follow:
Φ(S)
max
w,q
(6)
where β is η dependent temperature term.
Mohamed & Rezende (2015) also applied the principles of Expectation-Maximization (EM)
(Agakov, 2004) to learn empowerment, i.e., alternatively maximizing Eqn. 6 with respect to wθ (a|s)
and qφ(a∣s0, s). Given a set of training trajectories T, the maximization ofEqn. 6 w.r.t qφ(∙) is shown
to be a supervised maximum log-likelihood problem whereas the maximization w.r.t wθ(∙) is deter-
mined through the functional derivative ∂I∕∂w = 0 under the constraint Pa w(a∣s) = 1. The opti-
mal w* that maximizes Eqn. 6 turns out to be %：)exp(βEp(s0∣s,a)[log qφ(a|s, s0)]), where Z(S) is
a normalization term. Substituting w* in Eqn. 6 showed that the empowerment Φ(s)
(for full derivation, see Appendix A.2).
1log Z (s)
β
Note that w* (a|S) is implicitly unnormalized as there is no direct mechanism for sampling ac-
tions or computing Z(S). Mohamed & Rezende (2015) introduced an approximation w* (a|S) ≈
log π(a∣s) + Φ(s) where π(a∣s) is a normalized distribution which leaves the scalar function Φ(s)
to account for the normalization term log Z(S). Finally, the parameters of policy π and scalar func-
tion Φ are optimized by minimizing the discrepancy, lI (S, a, S0), between the two approximations
(log π(a∣s) + Φ(s)) and β log qφ(a∣s0, S)) through either absolute (p = 1) or squared error (p = 2),
i.e.,
lι(s,a,s0) = ∣βlog qφ(a∣s0,s) - (log∏θ(a|s) + Φφ(s))∣p	⑺
3 Empowered Adversarial Inverse Reinforcement Learning
We present an inverse reinforcement learning algorithm that learns a robust, transferable reward
function and policy from expert demonstrations. Our proposed method comprises (i) an inverse
model qφ(a∣s0, s) that takes the current state S and the next state s0 to output a distribution over
2In our proposed work, we consider only immediate step transitions i.e., K = 1, hence variables s, a and
s0 will be represented in non-bold notations.
4
Published as a conference paper at ICLR 2019
actions A that resulted in s to s0 transition, (ii) a reward rξ(s, a), with parameters ξ, that is a function
of both state and action, (iii) an empowerment-based potential function Φφ(∙) with parameters 夕
that determines the reward-shaping function F = YΦφ(s0) - Φφ(s) and also regularizes the policy
update, and (iv) a policy model ∏θ (a|s) that outputs a distribution over actions given the current
state s. All these models are trained simultaneously based on the objective functions described in
the following sections to recover optimal policies and generalizable reward functions concurrently.
3.1	Inverse model qφ(a∣s, s0) optimization
As mentioned in Section 2.3, learning the inverse model qφ(a∣s, s0) is a maximum log-likelihood
supervised learning problem. Therefore, given a set of trajectories T 〜∏, where a single trajectory
is a sequence states and actions, i.e., Ti = {s0, a0,…,ST, aτ}i, the inverse model qφ(a∣s0, S) is
trained to minimize the mean-square error between its predicted action q(a|s0, s) and the action a
taken according to the generated trajectory T, i.e.,
Iq (S, a, s0) = (qφ(∙ls, S ) - a尸	(8)
3.2	EMPOWERMENT Φφ(s) OPTIMIZATION
Empowerment will be expressed in terms of normalization function Z(s) of optimal w*(a∣s), i.e.,
Φφ(s) = ɪlog Z(s). Therefore, the estimation of empowerment Φφ(s) is approximated by mini-
β
mizing the loss function l『(s, a, s0), presented in Eqn. 7, w.r.t parameters 夕,and the inputs (s, a, s0)
are sampled from the policy-generated trajectories T .
3.3	REWARD FUNCTION rξ(S, a)
To train the reward function, we first compute the discriminator as follow:
Dξ冲(S,a, SO)
exp[rξ(s,a) + YΦ^(s0) - Φ^(s)]
exp[rξ(S,a) + γΦ”(s0) - Φφ(s)] + ∏(a∣S)
(9)
where rξ(S, a) is the reward function to be learned with parameters ξ. We also maintain the target
夕0 and learning 夕 parameters of the empowerment-based potential function. The target parameters
夕0 are a replica of 夕 except that the target parameters 夕0 are updated to learning parameters 夕
after every n training epochs. Note that keeping a stationary target Φφo stabilizes the learning as
also mentioned in (Mnih et al., 2015). Finally, the discriminator/reward function parameters ξ are
trained via binary logistic regression to discriminate between expert TE and generated T trajectories,
i.e.,
ET[logDξ,φ(S,a, S0)] + ETE [(1 TogDξA,a, S0))]	(10)
3.4	POLICY OPTIMIZATION POLICY ∏(a∣S)
We train our policy ∏θ(a∣S) to maximize the discriminative reward r(S, a, s0) = log(D(S, a, s0)-
log(1 - D(s, a, S0))) and to minimize the loss function lɪ(s, a, s0) = Ie log qφ(a∣S, s0)-
(log ∏θ (a∣S) +Φφ(s))∣p which accounts for empowerment regularization. Hence, the overall policy
training objective is:
ET[log ∏θ(a∣S)r(S, a, s0)] + λιEτ[l∕(s, a, s0)]	(11)
where policy parameters θ are updated using any policy optimization method such as TRPO (Schul-
man et al., 2015) or an approximated step such as PPO (Schulman et al., 2017).
Algorithm 1 outlines the overall training procedure to train all function approximators simultane-
ously. Note that the expert samples TE are seen by the discriminator only, whereas all other models
are trained using the policy generated samples T. Furthermore, the discriminating reward r(S, a, s0)
boils down to the following expression (Appendix B.1):
r(S, a, s0) = f (s, a, s0) — logπ(a∣S)
where f (s, a, s0) = rξ(s, a) + γΦ”(s0) - Φφ(s). Thus, an alternative way to express our policy
training objective is ET[log∏θ(a∣s)r∏(s, a, s0)], where r∏(s, a, s0) = r(s, a, s0) 一 λ∕l∕(s, a, s0),
5
Published as a conference paper at ICLR 2019
Algorithm 1: Empowerment-based Adversarial Inverse Reinforcement Learning
Initialize parameters of policy πθ , and inverse model qφ
Initialize parameters of target Φφo and training Φφ empowerment, and reward rξ functions
Obtain expert demonstrations τE by running expert policy πE
for i J 0 to N do
Collect trajectories τ by executing πθ
Update φi to φi+1 with the gradient Eτ [5φi lq (s, a, s0)]
Update φi to 夕i+ι with the gradient ET5wJi(s, a, s0)]
Update ξi to ξi+1 with the gradient:
ET[▽& log Dξi,ψi+ι (s, a, s')] + ETE 5& (1 - log Dξe+ι (s, a, s'))]
Update θi to θi+1 using natural gradient update rule (i.e., TRPO/PPO) with the gradient:
ET [ 5θi log πθi ⑷S)rξi+ι(S, a, SO)] + λιEτ [ 5θi lι(S, a, SO)]
After every n epochs Sync 夕0 with 夕
(a) Ant environment	(b) Pointmass-maze environment
Figure 1: Transfer learning problems. Fig. (a) represents a problem where agent dynamics are
modified during testing, i.e., a reward learned on a quadruped-ant (left) is transferred to a crippled-
ant (right). Fig (b) represents a problem where environment structure is modified during testing, i.e.,
a reward learned on a maze with left-passage is transferred to a maze with right-passage to the goal
(green).
which would undoubtedly yield the same results as Eqn. 11, i.e., maximize the discriminative reward
and minimize the loss lI . The analysis of this alternative expression is given in Appendix B to
highlight that our policy update rule is equivalent to MaxEnt-IRL policy objective (Finn et al., 2016a)
except that it also maximizes the empowerment, i.e.,
r∏(s, a, s') = rξ(s, a, s') + YΦ(s') + λHH(∙)	(12)
where, λ and Y are hyperparameters, and HH(∙) is the entropy-regularization term depending on ∏(∙)
and q(∙). Hence, our policy is regularized by the empowerment which induces generalized behavior
rather than locally overfitting to the limited expert demonstrations.
4	Results
Our proposed method, EAIRL, learns both reward and policy from expert demonstrations. Thus,
for comparison, we evaluate our method against both state-of-the-art policy and reward learning
techniques on several control tasks in OpenAI Gym. In case of policy learning, we compare our
method against GAIL, GAN-GCL, AIRL with state-only reward, denoted as AIRL(s), and an aug-
mented version of AIRL we implemented for the purposes of comparison that has state-action re-
ward, denoted as AIRL(s, a). In reward learning, we only compare our method against AIRL(s)
and AIRL(s, a) as GAIL does not recover rewards, and GAN-GCL is shown to exhibit inferior per-
formance than AIRL (Fu et al., 2017). Furthermore, in the comparisons, we also include the expert
6
Published as a conference paper at ICLR 2019
(b) Pointmass-maze environment
(a) Ant environment
Figure 2: The performance of policies obtained from maximizing the learned rewards in the transfer
learning problems. It can be seen that our method performs significantly better than AIRL (Fu et al.,
2017) and exhibits expert-like performance in all five randomly-seeded trials which imply that our
method learns near-optimal, transferable reward functions.
performances which represents a policy learned by optimizing a ground-truth reward using TRPO
(Schulman et al., 2015). The performance of different methods are evaluated in term of mean and
standard deviation of total rewards accumulated (denoted as score) by an agent during the trial, and
for each experiment, we run five randomly-seeded trials.
Table 1: The evaluation of reward learning on transfer learning tasks. Mean scores (higher the better)
with standard deviation are presented over 5 trials.
Algorithm	States-Only	Pointmass-Maze	CriPPled-Ant
Expert	N/A	-4.98 ± 0再—	432.66 ± 14.38
AIRL	Yes	-8.07 ± 0.50	175.51 ± 27.31
AIRL	No	-19.28 ± 2.03	-46.12 ± 14.37-
EAIRL(Oursr	No	-7.01 ± 06Γ^	348.43 ± 43.17
4.1	Reward learning performance (Transfer learning experiments)
To evaluate the learned rewards, we consider a transfer learning problem in which the testing en-
vironments are made to be different from the training environments. More precisely, the rewards
learned via IRL in the training environments are used to re-optimize a new policy in the testing
environment using standard RL. We consider two test cases shown in the Fig. 1.
In the first test case, as shown in Fig. 1(a), we modify the agent itself during testing. We trained
a reward function to make a standard quadruped ant to run forward. During testing, we disabled
the front two legs (indicated in red) of the ant (crippled-ant), and the learned reward is used to re-
optimize the policy to make a crippled-ant move forward. Note that the crippled-ant cannot move
sideways (Appendix C.1). Therefore, the agent has to change the gait to run forward. In the second
test case, shown in Fig 1(b), we change the environment structure. The agent learns to navigate a
2D point-mass to the goal region in a simple maze. We re-position the maze central-wall during
testing so that the agent has to take a different path, compared to the training environment, to reach
the target (Appendix C.2).
Fig. 2 compares the policy performance scores over five different trials of EAIRL, AIRL(s) and
AIRL(s, a) in the aforementioned transfer learning tasks. The expert score is shown as a horizontal
line to indicate the standard set by an expert policy. Table 1 summarizes the means and standard
deviations of the scores over five trials. It can be seen that our method recovers near-optimal reward
functions as the policy scores almost reach the expert scores in all five trials even after transfering
to unseen testing environments. Furthermore, our method performs significantly better than both
7
Published as a conference paper at ICLR 2019
(a) HalfCheetah
(b) Ant
Figure 3: Benchmark control tasks for imitation learning
AIRL(s) and AIRL(s, a) in matching an expert’s performance, thus showing no downside to the
EAIRL approach.
4.2	Policy learning performance (Imitation learning)
Next, we considered the performance of the learned policy specifically for an imitation learning
problem in various control tasks.The tasks, shown in Fig. 3, include (i) making a 2D halfchee-
tah robot to run forward, (ii) making a 3D quadruped robot (ant) to move forward, (iii) making a
2D swimmer to swim, and (iv) keeping a friction less pendulum to stand vertically up. For each
algorithm, we provided 20 expert demonstrations generated by a policy trained on a ground-truth
reward using TRPO (Schulman et al., 2015). Table 2 presents the means and standard deviations
of policy learning performance scores, over the five different trials. It can be seen that EAIRL,
AIRL(s, a) and GAIL demonstrate similar performance and successfully learn to imitate the expert
policy, whereas AIRL(s) and GAN-GCL fails to recover a policy.
Table 2: The evaluation of imitation learning on benchmark control tasks. Mean scores (higher the
better) with standard deviation are presented over 5 trials for each method.
Methods	Environments			
	HalfCheetah	Ant	Swimmer	Pendulum
Expert	2139.83 ± 30.22	935.12 ± 10.94	76.21 ± 1.79	--100.11 ± 1.32-
GAIL	1880.05 ± 15.72	-738.72 ± 9.49-	50.21 ± 0.26	--116.01 ± 5.45-
-GCL	-189.90 ± 44.42	-16.74 ± 36.59-	15.75 ± 7.32	-578.18 ± 72.84
AIRL(s,a)	1826.26 ± 19.64	645.90 ± 41.75	49.52 ± 0.48	-118.13 ± 11.33
AIRL(S)-	-121.10 ± 42.31-	-271.31 ± 9.35-	33.21 ± 2.40	-134.82 ± 10.89
EAIRL	1870.10 ± 17.86	641.12 ± 25.92	49.55 ± 0J29-	-116.26 ± 8.313
5	Discussion
This section highlights the importance of empowerment-regularized MaxEnt-IRL and modeling re-
wards as a function of both state and action rather than restricting to state-only formulation on
learning rewards and policies from expert demonstrations.
In the scalable MaxEnt-IRL framework (Finn et al., 2016a; Fu et al., 2017), the normalization term is
approximated by importance sampling where the importance-sampler/policy is trained to minimize
the KL-divergence from the distribution over expert trajectories. However, merely minimizing the
divergence between expert demonstrations and policy-generated samples leads to localized policy
behavior which hinders learning generalized reward functions. In our proposed work, we regularize
the policy update with empowerment i.e., we update our policy to reduce the divergence from expert
data distribution as well as to maximize the empowerment (Eqn.12). The proposed regularization
prevents premature convergence to local behavior which leads to robust state-action based rewards
learning. Furthermore, empowerment quantifies the extent to which an agent can control/influence
its environment in the given state. Thus the agent takes an action a on observing a state s such that
it has maximum control/influence over the environment upon ending up in the future state s0 .
Our experimentation also shows the importance of modeling discriminator/reward functions as a
function of both state and action in reward and policy learning under GANs framework. The re-
8
Published as a conference paper at ICLR 2019
ward learning results show that state-only rewards (AIRL(s)) does not recover the action dependent
terms of the ground-truth reward function that penalizes high torques. Therefore, the agent shows
aggressive behavior and sometimes flips over after few steps (see the accompanying video), which
is also the reason that crippled-ant trained with AIRL’s disentangled reward function reaches only
the half-way to expert scores as shown in Table 1. Therefore, the reward formulation as a function
of both states and actions is crucial to learning action-dependent terms required in most real-world
applications, including any autonomous driving, robot locomotion or manipulation task where large
torque magnitudes are discouraged or are dangerous. The policy learning results further validate the
importance of the state-action reward formulation. Table 2 shows that methods with state-action re-
ward/discriminator formulation can successfully recover expert-like policies. Hence, our empirical
results show that it is crucial to model reward/discriminator as a function of state-action as other-
wise, adversarial imitation learning fails to learn ground-truth rewards and expert-like policies from
expert data.
6	Conclusions and Future Work
We present an approach to adversarial reward and policy learning from expert demonstrations by reg-
ularizing the maximum-entropy inverse reinforcement learning through empowerment. Our method
learns the empowerment through variational information maximization in parallel to learning the
reward and policy. We show that our policy is trained to imitate the expert behavior as well to
maximize the empowerment of the agent over the environment. The proposed regularization pre-
vents premature convergence to local behavior and leads to a generalized policy that in turn guides
the reward-learning process to recover near-optimal reward. We show that our method success-
fully learns near-optimal rewards, policies, and performs significantly better than state-of-the-art
IRL methods in both imitation learning and challenging transfer learning problems. The learned
rewards are shown to be transferable to environments that are dynamically or structurally different
from training environments.
In our future work, we plan to extend our method to learn rewards and policies from diverse hu-
man/expert demonstrations as the proposed method assumes that a single expert generates the train-
ing data. Another exciting direction would be to build an algorithm that learns from sub-optimal
demonstrations that contains both optimal and non-optimal behaviors.
References
Pieter Abbeel and Andrew Y Ng. Apprenticeship learning via inverse reinforcement learning. In
Proceedings of the twenty-first international conference on Machine learning, pp. 1. ACM, 2004.
David Barber Felix Agakov. The im algorithm: a variational approach to information maximization.
Advances in Neural Information Processing Systems, 16:201, 2004.
Brenna D Argall, Sonia Chernova, Manuela Veloso, and Brett Browning. A survey of robot learning
from demonstration. Robotics and autonomous systems, 57(5):469-483, 2009.
Abdeslam Boularias, Jens Kober, and Jan Peters. Relative entropy inverse reinforcement learning. In
Proceedings of the Fourteenth International Conference on Artificial Intelligence and Statistics,
pp. 182-189, 2011.
Chelsea Finn, Paul Christiano, Pieter Abbeel, and Sergey Levine. A connection between generative
adversarial networks, inverse reinforcement learning, and energy-based models. arXiv preprint
arXiv:1611.03852, 2016a.
Chelsea Finn, Sergey Levine, and Pieter Abbeel. Guided cost learning: Deep inverse optimal control
via policy optimization. In International Conference on Machine Learning, pp. 49-58, 2016b.
Justin Fu, Katie Luo, and Sergey Levine. Learning robust rewards with adversarial inverse rein-
forcement learning. arXiv preprint arXiv:1710.11248, 2017.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,
Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Advances in neural infor-
mation processing systems, pp. 2672-2680, 2014.
9
Published as a conference paper at ICLR 2019
Jonathan Ho and Stefano Ermon. Generative adversarial imitation learning. In Advances in Neural
Information Processing Systems,pp. 4565-4573, 2016.
Mrinal Kalakrishnan, Peter Pastor, Ludovic Righetti, and Stefan Schaal. Learning objective func-
tions for manipulation. In Robotics and Automation (ICRA), 2013 IEEE International Conference
on, pp. 1331-1336. IEEE, 2013.
Markus Kuderer, Shilpa Gulati, and Wolfram Burgard. Learning driving styles for autonomous
vehicles from demonstration. In Robotics and Automation (ICRA), 2015 IEEE International Con-
ference on, pp. 2641-2646. IEEE, 2015.
Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A Rusu, Joel Veness, Marc G Belle-
mare, Alex Graves, Martin Riedmiller, Andreas K Fidjeland, Georg Ostrovski, et al. Human-level
control through deep reinforcement learning. Nature, 518(7540):529, 2015.
Shakir Mohamed and Danilo Jimenez Rezende. Variational information maximisation for intrinsi-
cally motivated reinforcement learning. In Advances in neural information processing systems,
pp. 2125-2133, 2015.
Andrew Y Ng, Daishi Harada, and Stuart Russell. Policy invariance under reward transformations:
Theory and application to reward shaping. In ICML, volume 99, pp. 278-287, 1999.
Andrew Y Ng, Stuart J Russell, et al. Algorithms for inverse reinforcement learning. In Icml, pp.
663-670, 2000.
Dean A Pomerleau. Efficient training of artificial neural networks for autonomous navigation. Neu-
ral Computation, 3(1):88-97, 1991.
Ahmed. H Qureshi, Yutaka Nakamura, Yuichiro Yoshikawa, and Hiroshi Ishiguro. Show, attend
and interact: Perceivable human-robot social interaction through neural attention q-network. In
Robotics and Automation (ICRA), 2017 IEEE International Conference on, pp. 1639-1645. IEEE,
2017.
Ahmed. H Qureshi, Yutaka Nakamura, Yuichiro Yoshikawa, and Hiroshi Ishiguro. Intrinsically
motivated reinforcement learning for human-robot interaction in the real-world. Neural Networks,
2018.
Nathan D Ratliff, J Andrew Bagnell, and Martin A Zinkevich. Maximum margin planning. In
Proceedings of the 23rd international conference on Machine learning, pp. 729-736. ACM, 2006.
Stephane Ross, Geoffrey Gordon, and Drew Bagnell. A reduction of imitation learning and StrUc-
tured prediction to no-regret online learning. In Proceedings of the fourteenth international con-
ference on artificial intelligence and statistics, pp. 627-635, 2011.
Christoph Salge, Cornelius Glackin, and Daniel Polani. Empowerment-an introduction. In Guided
Self-Organization: Inception, pp. 67-114. Springer, 2014.
John Schulman, Sergey Levine, Pieter Abbeel, Michael Jordan, and Philipp Moritz. Trust region
policy optimization. In International Conference on Machine Learning, pp. 1889-1897, 2015.
John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. Proximal policy
optimization algorithms. arXiv preprint arXiv:1707.06347, 2017.
Richard S Sutton, Andrew G Barto, et al. Introduction to reinforcement learning, volume 135. MIT
press Cambridge, 1998.
Brian D Ziebart, Andrew L Maas, J Andrew Bagnell, and Anind K Dey. Maximum entropy inverse
reinforcement learning. In AAAI, volume 8, pp. 1433-1438. Chicago, IL, USA, 2008.
10
Published as a conference paper at ICLR 2019
Appendices
A Variational Empowerment
For completeness, we present a derivation of presenting mutual information (MI) as variational
lower bound and maximization of lower bound to learn empowerment.
A. 1 Variational Information Lower B ound
As mentioned in section 2.3, the variational lower bound representation ofMI is computed by defin-
ing MI as a difference in conditional entropies, and the derivation is formalized as follow.
Iw,q(s) = H(a|s) - H(a|s0, s)
H (a|s) + Ep(s0 |a,s)w(a|s) [log p(a|s , s)]
H (a|s) + Ep(s0 |a,s)w(a|s) [log
p(a|s0,s)q(a|s0,S)]
q(a|s0,s)
H (a|s) + Ep(s0 |a,s)w(a|s) [log q(a|s , s)] + Ep(s0 |a,s)w(a|s) [log
p(a|s0, S)
q(a|s0,s)
= H (a|s) + Ep(s0|a,s)w(a|s)[log q(a|s0, s)] + KL[p(a|s0, s)||q(a|s0, s)]
≥ H (a|S) + Ep(s0|a,s)w(a|s)[log q(a|S0, S)]
≥ -Ew(a|s) log w(a|S) + Ep(s0|a,s)w(a|s)[log q(a|S0, S)]
A.2 Variational Information Maximization
The empowerment is a maximal ofMI and it can be formalized as follow by exploiting the variational
lower bound formulation (for details see (Mohamed & Rezende, 2015)).
Φ(S)
(13)
As mentioned in section 2.3, given a training trajectories, the maximization of Eqn. 13 w.r.t in-
verse model q(a|S0, S) is a supervised maximum log-likelihood problem. The maximization of
Eqn. 13 w.r.t w(a∣s) is derived through a functional derivative ∂Iw,q/∂w = 0 under the constraint
Pa w(a|S) = 1. For simplicity, we consider discrete state and action spaces, and the derivation is
as follow:
10
I (s) = Ep(sθ∣a,s)w(a∣s)[-与logw(a∣s) + logq(a∣s
β
s)]+λ(E w(a|s) - 1)
a
XXp(S0|a,s)w(a∣s){-β log w(a∣s) + log q(a∣s0 ,s)} + λ(X w(a∣s) - 1)
∂Iw(s)	,,	,,.	.	,,,…
∂w = E{(λ - β) - log w(a∣s) + βEp(s0∣a,s)[logq(a∣s ,s)]} = 0
a
w(a∣s) = eλ-βeβEP(s0∣a,s)[log q(a|s0，s)]
By using the constraint Pa w(a∣s) = 1, it can be shown that the optimal solution w*(a∣s) =
: exp(u(s,a)), where u(s,a) = βEp(s0∣a,s) [log q(a∣s0, s)] and Z(s) = Pa u(s,a). This solu-
Z(S)
tion maximizes the lower bound since ∂2IW (s)∕∂w2 = - Pa / ∣ 、 < 0.
w(a|S)
11
Published as a conference paper at ICLR 2019
B Empowerment-regularized MaxEnt-IRL Formulation.
In this section we derive the Empowerment-regularized formulation of maximum en-
tropy IRL. Let T be a trajectory sampled from expert demonstrations D and pξ (T) 8
p(s0)ΠtT=-01p(st+1 |st, at) exprξ(st,at) be a distribution over τ. As mentioned in Section 2, the IRL
objective is to maximize the likelihood:
max J(ξ) = max ED [log pξ (T)]
Furthermore, as derived in (Fu et al., 2017), the gradient of above equation w.r.t ξ can be written as:
max J(ξ) = ED [X ∂ξrξ(st，at)] - EPξ [X ∂ξrξ(st，at)]
ξ	t=0 ∂ξ	t=0 ∂ξ
=X ED [ ∂ξrξ (st，at)] - EPξ,t[ ∂ξrξ (st，at)]
where rξ(∙) is a parametrized reward to be learned, andpξ,t =)§,=£ɑ, = Pξ(T) denotes marginal-
ization of state-action at time t. Since, it is unfeasible to draw samples from pξ, Finn et al. (2016a)
proposed to train an importance sampling distribution μ(τ) whose varience is reduced by defining
μ(τ) as a mixture of polices, i.e., μ(a∣s) = ∣(π(a∣s) + p(a∣s)), where P is a rough density estimate
over demonstrations. Thus the above gradient becomes:
T
d	r d / X1 w rPξ,t(st,at) d / X1
∂ξJ (ξ) =入 ED [ ∂ξrξ (st,at)] - Eμt[ μt(st,at) ∂ξrξ (st ,at)]
(14)
We train our importance-sampler/policy ∏ to maximize the empowerment Φ(∙) for generalization
and to reduce divergence from true distribution by minimizing DKL(π(T)kpξ(T)). Since, π(T) =
p(s0)∏τ=0lp(st+1∣st, at)∏(st, at), the matching terms of ∏(τ) andpξ(T) cancel out, resulting into
entropy-regularized policy update. Furthermore, as We also include the empowerment Φ(∙) in the
policy update to be maximized, hence the overall objective becomes:
T-1
maxEn [T rξ(st, at) + Φ(st+ι) - log∏(at∣st)]	(15)
π
t=0
Our discriminator is trained to minimize cross entropy loss as mention in Eqn. 10, and for the
proposed structure of our discriminator Eqn. 9, it can be shown that the discriminator’s gradient
w.r.t its parameters turns out to be equal to Equation 14 (for more details, see (Fu et al., 2017)). On
the other hand, our policy training objective is
rπ (s， a， s0) = log(D(s， a， s0)) - log(1 - D(s， a， s0)) - lI (s， a， s0)	(16)
In the next section, we show that the above policy training objective is equivalent to Equation 15.
B.1 Policy Objective
We train our policy to maximize the discriminative reward r(s, a, s0) = log(D(s, a, s0) 一 log(1 一
D(s， a， s0))) and minimize the information-theoretic loss function lI (s， a， s0). The discriminative
reward r(s, a, s0) simplifies to:
r(s, a, s0) = log(D(s, a, s0)) — log(1 — D(s, a, s0))
ef(S,a,sO)	∏(a∣s)
=log   ----------------———— log   --------------——
ef(s,a,s ) + ∏(a∣s)	ef(S,a,s ) + ∏(a∣s)
=f (s,a, s0) — log∏(a∣s)
where f(s, a, s0) = r(s, a) + γΦ(s0) - Φ(s). The entropy-regularization is usually scaled by the
hyperparameter, let say λh ∈ R, thus r(s, a, s0) = f (s, a, s0) 一 λh log π(a∣s). Hence, assuming
12
Published as a conference paper at ICLR 2019
single-sample (s, a, s0), absolute-error for lι(s, a, s0) = | log qφ(a∖s, s0) - (log π(a∣s) + Φ(s))∣, and
li > 0, the policy is trained to maximize following:
rπ(s,a,s0) = f(s,a,s0) - λh log π(a∖s) - lI(s,a,s0)
= r(s, a) + γΦ(s0) - Φ(s) - λh log π(a∖s) - logq(a∖s,s0) + log π(a∖s) + Φ(s)
= r(s, a) + γΦ(s0) - λh log π(a∖s) - log q(a∖s, s0) + log π(a∖s)
Note that, the potential function Φ(s) cancels out and we scale the leftover terms oflI with a hyper-
parameter λI. Hence, the above equation becomes:
rπ(s, a, s0) = r(s, a, s0) + γΦ(s0) + (λI - λh)logπ(a∖s) - λI log q(a∖s, s0)
We combine the log terms together as:
r∏(s, a, s0) = r(s, a) + λιΦ(s0) + λHH(∙)	(17)
(18)
where λ is a hyperparameter, and HH(∙) is an entropy regularization term depending on q(a∖s, s0) and
π(a∖s). Therefore, it can be seen that the Eqn. 17 is equivalent/approximation to Eqn. 15.
C Transfer learning problems
C.1 Ant environment
The following figures show the difference between the path profiles of standard and crippled Ant. It
can be seen that the standard Ant can move sideways whereas the crippled ant has to rotate in order
to move forward.
C.2 Maze environment
The following figures show the path profiles of a 2D point-mass agent to reach the target in training
and testing environment. It can be seen that in the testing environment the agent has to take the
opposite route compared to the training environment to reach the target.
D Implementation Details
D.1 Network Architectures
We use two-layer ReLU network with 32 units in each layer for the potential function hφ(∙) and
Φ中(∙)，reward function rξ(∙), discriminators of GAIL and GAN-GCL. Furthermore, policy ∏θ(∙) of
13
Published as a conference paper at ICLR 2019
Figure 5: The top and bottom rows show the path followed by a 2D point-mass agent (yellow) to
reach the target (green) in training and testing environment, respectively.
all presented models and the inverse model qφ(∙) of EAIRL are presented by two-layer RELU net-
work with 32 units in each layer, where the network’s output parametrizes the Gaussian distribution,
i.e., we assume a Gaussian policy.
D.2 Hyperparameters
For all experiments, we use the temperature term β = 1. We evaluated both mean-squared and
absolute error forms of lI (s, a, s0) and found that both lead to similar performance in reward and
policy learning. We set entropy regularization weight to 0.1 and 0.001 for reward and policy learn-
ing, respectively. The hyperparameter λI was set to 1.0 for reward learning and 0.001 for policy
learning. The target parameters of the empowerment-based potential function Φφo (∙) were updated
every 5 and 2 epochs during reward and policy learning respectively. Although reward learning
hyperparameters are also applicable to policy learning, we decrease the magnitude of entropy and
information regularizers during policy learning to speed up the policy convergence to optimal val-
ues. Furthermore, we set the batch size to 2000- and 20000-steps per TRPO update for the pendulum
and remaining environments, respectively. For the methods (Fu et al., 2017; Ho & Ermon, 2016)
presented for comparison, we use their suggested hyperparameters. We also use policy samples from
previous 20 iterations as negative data to train the discriminator of all IRL methods presented in this
paper to prevent the parametrized reward functions from overfitting the current policy samples.
14