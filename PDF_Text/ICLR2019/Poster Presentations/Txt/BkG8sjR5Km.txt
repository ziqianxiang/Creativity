Published as a conference paper at ICLR 2019
Emergent Coordination Through Competition
Siqi Liu； Guy Lever； Josh Merel, Saran Tunyasuvunakool, Nicolas Heess, Thore Graepel
DeepMind
London, United Kingdom
{liusiqi,guylever,jsmerel,stunya,heess,thore}@google.com
Ab stract
We study the emergence of cooperative behaviors in reinforcement learning agents
by introducing a challenging competitive multi-agent soccer environment with
continuous simulated physics. We demonstrate that decentralized, population-
based training with co-play can lead to a progression in agents’ behaviors: from
random, to simple ball chasing, and finally showing evidence of cooperation. Our
study highlights several of the challenges encountered in large scale multi-agent
training in continuous control. In particular, we demonstrate that the automatic
optimization of simple shaping rewards, not themselves conducive to co-operative
behavior, can lead to long-horizon team behavior. We further apply an evaluation
scheme, grounded by game theoretic principals, that can assess agent performance
in the absence of pre-defined evaluation tasks or human baselines.
1	Introduction
Competitive games have been grand challenges for artificial intelligence research since at least the
1950s (Samuel, 1959; Tesauro, 1995; Campbell et al., 2002; Vinyals et al., 2017). In recent years, a
number of breakthroughs in AI have been made in these domains by combining deep reinforcement
learning (RL) with self-play, achieving superhuman performance at Go and Poker (Silver et al.,
2016; Moravk et al., 2017). In continuous control domains, competitive games possess a natural
curriculum property, as observed in Bansal et al. (2017), where complex behaviors have the potential
to emerge in simple environments as a result of competition between agents, rather than due to
increasing difficulty of manually designed tasks. Challenging collaborative-competitive multi-agent
environments have only recently been addressed using end-to-end RL by Jaderberg et al. (2018),
which learns visually complex first-person 2v2 video games to human level. One longstanding
challenge in AI has been robot soccer (Kitano et al., 1997), including simulated leagues, which has
been tackled with machine learning techniques (Riedmiller et al., 2009; MacAlpine & Stone, 2018)
but not yet mastered by end-to-end reinforcement learning.
We investigate the emergence of co-operative behaviors through multi-agent competitive games. We
design a simple research environment with simulated physics in which complexity arises primarily
through competition between teams of learning agents. We introduce a challenging multi-agent
soccer environment, using MuJoCo (Todorov et al., 2012) which embeds soccer in a wider universe
of possible environments with consistent simulated physics, already used extensively in the machine
learning research community (Heess et al., 2016; 2017; Bansal et al., 2017; Brockman et al., 2016;
Tassa et al., 2018; Riedmiller et al., 2018). We focus here on multi-agent interaction by using
relatively simple bodies with a 3-dimensional action space (though the environment is scalable to
more agents and more complex bodies).* 1 We use this environment to examine continuous multi-
agent reinforcement learning and some of its challenges including coordination, use of shaping
rewards, exploitability and evaluation.
We study a framework for continuous multi-agent RL based on decentralized population-based train-
ing (PBT) of independent RL learners (Jaderberg et al., 2017; 2018), where individual agents learn
off-policy with recurrent memory and decomposed shaping reward channels. In contrast to some
recent work where some degree of centralized learning was essential for multi-agent coordinated
* Equal contribution.
1The environment is released at https://git.io/dm_control_soccer.
1
Published as a conference paper at ICLR 2019
behaviors (e.g. Lowe et al., 2017; Foerster et al., 2016), we demonstrate that end-to-end PBT can
lead to emergent cooperative behaviors in our soccer domain. While designing shaping rewards
that induce desired cooperative behavior is difficult, PBT provides a mechanism for automatically
evolving simple shaping rewards over time, driven directly by competitive match results. We further
suggest to decompose reward into separate weighted channels, with individual discount factors and
automatically optimize reward weights and corresponding discounts online. We demonstrate that
PBT is able to evolve agents’ shaping rewards from myopically optimizing dense individual shaping
rewards through to focusing relatively more on long-horizon game rewards, i.e. individual agent’s
rewards automatically align more with the team objective over time. Their behavior correspondingly
evolves from random, through simple ball chasing early in the learning process, to more co-operative
and strategic behaviors showing awareness of other agents. These behaviors are demonstrated visu-
ally and we provide quantitative evidence for coordination using game statistics, analysis of value
functions and a new method of analyzing agents’ counterfactual policy divergence.
Finally, evaluation in competitive multi-agent domains remains largely an open question. Tradition-
ally, multi-agent research in competitive domains relies on handcrafted bots or established human
baselines (Jaderberg et al., 2018; Silver et al., 2016), but these are often unavailable and difficult to
design. In this paper, we highlight that diversity and exploitability of evaluators is an issue, by ob-
serving non-transitivities in the agents pairwise rankings using tournaments between trained teams.
We apply an evaluation scheme based on Nash averaging (Balduzzi et al., 2018) and evaluate our
agents based on performance against pre-trained agents in the support set of the Nash average.
2	Preliminaries
We treat our soccer domain as a multi-agent reinforcement learning problem (MARL) which models
a collection of agents interacting with an environment and learning, from these interactions, to opti-
mize individual cumulative reward. MARL can be cooperative, competitive or some mixture of the
two (as is the case in soccer), depending upon the alignment of agents’ rewards. MARL is typically
modelled as a Markov game (Shapley, 1953; Littman, 1994), which comprises: a state space S, n
agents with observation and action sets O1, ..., On and A1, ..., An; a (possibly stochastic) reward
function Ri : S × Ai → R for each agent; observation functions φi : S → Oi ; a transition func-
tion P which defines the conditional distribution over successor states given previous state-actions:
P (St+ι∣St,A1, ...,An), which satisfies the Markov property P (St+ι∖Sτ, A1, ...,An, ∀τ ≤ t)=
P (St+1 |St, At1, ..., Atn); and a start state distribution P0(S0) on S. In our application the state and
action sets are continuous, and the transition distributions should be thought of as densities. Each
agent i sequentially chooses actions, ait, at each timestep t, based on their observations, φit = φi(st),
and these interactions give rise to a trajectory ((st, at1, ..., atn, rt1, ..., rtn))t=1,2,...,H, over a horizon
H, where at each time step St+、〜 P(∙∖st, a1,..., an), and rqi = Ri(st, at). Each agent aims to
maximize expected cumulative reward, E[PtH=0 γtrti] (discounted by a factor γ < 1 to ensure con-
vergence when H is infinite), and chooses actions according to a policy at 〜∏i(∙∖χi), which in
general can be any function of the history xti of the agent’s prior observations and actions at time t,
xit := (φi(s1), ai1, ..., φi(st-1), ait-1, φi(st)). The special case of a Markov game with one agent
is a partially-observed Markov decision process (POMDP) (Sutton & Barto, 1998). In this work all
players have the same action and observation space.
3	Methods
We seek a method of training agents which addresses the exploitability issues of competitive games,
arising from overfitting to a single opponents policy, and provides a method of automatically opti-
mizing hyperparameters and shaping rewards online, which are otherwise hard to tune. Following
Jaderberg et al. (2018), we combine algorithms for single-agent RL (in our case, SVG0 for con-
tinuous control) with population-based training (PBT) (Jaderberg et al., 2017). We describe the
individual components of this framework, and several additional novel algorithmic components in-
troduced in this paper.
3.1	Population Based training
Population Based Training (PBT) (Jaderberg et al., 2017) was proposed as a method to optimize hy-
perparameters via a population of simultaneously learning agents: during training, poor performing
2
Published as a conference paper at ICLR 2019
Algorithm 1 Population-based Training for Multi-Agent RL.
1:	procedure PBT-MARL
2:	{Ai}i∈[1,..,N] N independent agents forming a population.
3:	for agent Ai in {Ai}i∈[1,..,N] do
4:	Initialize agent network parameters θi and agent rating ri to fixed initial rating Rinit .
5:	Sample initial hyper-parameter θih from the initial hyper-parameter distribution.
6:	end for
7:	while true do
8:	Agents play TrainingMatches and update network parameters by Retrace-SVG0.
9:	for match result (si , sj ) ∈ TrainingMatches do
10	:	UpdateRating (ri , rj , si, sj )	. See Appendix B.1
11	:	end for
12	:	for agent Ai ∈ {Ai}i∈[1,..,N] do	. Evolution Procedure
13	:	if Eligible (Ai) then	. See Appendix B.2
14	Aj — Select (Ai, {Ai}i∈[i,..,N]κ=j)	. See Appendix B.3
15	:	if Aj 6= NULL then
16	:	Inherit (θi , θj , θih , θjh)	. Ai inherits from Aj , See Appendix B.4
17	θh — Mutate(θh)	. See Appendix B.5
18	:	end if
19	:	end if
20	:	end for
21	:	end while
22	: end procedure
agents, according to some fitness function, inherit network parameters and some hyperparameters
from stronger agents, with additional mutation. Hyperparameters can continue to evolve during
training, rather than committing to a single fixed value (we show that this is indeed the case in
Section 5.1). PBT was extended to incorporate co-play (Jaderberg et al., 2018) as a method of
optimizing agents for MARL: subsets of agents are selected from the population to play together
in multi-agent games. In any such game each agent in the population effectively treats the other
agents as part of their environment and learns a policy πθ to optimize their expected return, av-
eraged over such games. In any game in which πθ controls player i in the game, if we denote
by ∏∖i := {∏j}j∈{i,2,…,n},j=i the policies of the other agents j = i, We can write the expected
cumulative return over a game as
H
Ji(πθ; π∖i) := E X γtrti πi = πθ, π∖i	(1)
t=0
where the expectation is w.r.t. the environment dynamics and conditioned on the actions being
drawn from policies πθ and π∖i. Each agent in the population attempts to optimize (1) aver-
aged over the draw of all agents from the population P, leading to the PBT objective J(πθ) :=
Ei[E∏∖i~p [Ji(∏θ; ∏∖i) ∣∏i = ∏θ]], where the outer expectation is w.r.t. the probability that the agent
with policy πθ controls player i in the environment, and the inner expectation is the expectation over
the draw of other agents, conditioned on πθ controlling player i in the game. PBT achieves some ro-
bustness to exploitability by training a population of learning agents against each other. Algorithm 1
describes PBT-MARL for a population ofN agents {Ai}i∈[1,..,N], employed in this work.
3.2	Retrace-SVG0
Throughout our experiments we use Stochastic Value Gradients (SVG0) (Heess et al., 2015b) as
our reinforcement learning algorithm for continuous control. This is an actor-critic policy gradient
algorithm, which in our setting is used to estimate gradients 另 Ji(∏θ； ∏∖i) of the objective (1)
for each game. Averaging these gradients over games will effectively optimize the PBT objective
J(πθ). Policies are additionally regularized with an entropy loss H(π) i.e. we maximize J(πθ) :=
J(πθ) + αH(πθ) using the Adam optimizer (Kingma & Ba, 2014) to apply gradient updates where
α represents a multiplicative entropy cost factor. A derivation of SVG0 is provided in Appendix A.
SVG utilizes a differentiable Q-critic. Our critic is learned using experience replay, minimizing
a k-step TD-error with off-policy retrace corrections (Munos et al., 2016), using a separate target
3
Published as a conference paper at ICLR 2019
network for bootstrapping, as is also described in Hausman et al. (2018); Riedmiller et al. (2018).
The identity of other agents ∏∖ in a game are not explicitly revealed but are potentially vital for
accurate action-value estimation (value will differ when playing against weak rather than strong
opponents). Thus, we use a recurrent critic to enable the Q-function to implicitly condition on other
players observed behavior, better estimate the correct value for the current game, and generalize
over the diversity of players in the population of PBT, and, to some extent, the diversity of behaviors
in replay. We find in practice that a recurrent Q-function, learned from partial unrolls, performs very
well. Details of our Q-critic updates, including how memory states are incorporated into replay, are
given in Appendix A.2.
3.3	Decomposed Discounts and action-value estimation for Reward shaping
Reinforcement learning agents learning in environments with sparse rewards often require additional
reward signal to provide more feedback to the optimizer. Reward can be provided to encourage
agents to explore novel states for instance (e.g. Brafman & Tennenholtz, 2001), or some other form
of intrinsic motivation. Reward shaping is particularly challenging in continuous control (e.g. Popov
et al., 2017) where obtaining sparse rewards is often highly unlikely with random exploration, but
shaping can perturb objectives (e.g. Bagnell & Ng, 2005) resulting in degenerate behaviors. Reward
shaping is yet more complicated in the cooperative multi-agent setting in which independent agents
must optimize a joint objective. Team rewards can be difficult to co-optimize due to complex credit
assignment, and can result in degenerate behavior where one agent learns a reasonable policy before
its teammate, discouraging exploration which could interfere with the first agent’s behavior as ob-
served by Hausknecht (2016). On the other hand, it is challenging to design shaping rewards which
induce desired co-operative behavior.
We design n shaping reward functions {r7- : S × A → R}j=ι,…,nr, weighted so that r(∙):=
Pn= ι αjr7-(∙) is the agent,s internal reward and, as in Jaderberg et al. (2018), We use population-
based training to optimize the relative weighting {αj}j=1,...,nr . Our shaping rewards are simple
individual rewards to help with exploration, but which would induce degenerate behaviors if badly
scaled. Since the fitness function used in PBT will typically be the true environment reward (in our
case win/loss signal in soccer), the weighting of shaping rewards can in principle be automatically
optimized online using the environment reward signal. One enhancement we introduce is to optimize
separate discount factors {γj}j=1,...,nr for each individual reward channel. The objective optimized
is then (recalling Equation 1) J (∏θ; ∏∖i) := E [Pnn= ι αj PH=。Yj rj (st, at,..., anl)∣∏i = ∏θ , ∏∖j .
This separation of discount factors enables agents to learn to optimize the sparse environment reward
far in the future with a high discount factor, but optimize dense shaping rewards myopically, which
would also make value-learning easier. This would be impossible if discounts were confounded.
The specific shaping rewards used for soccer are detailed in Section 5.1.
4	Experimental Setup
4.1	MuJoCo Soccer Environment
We simulate 2v2 soccer using the MuJoCo physics engine (Todorov et al., 2012). The 4 players in
the game are a single sphere (the body) with 2 fixed arms, and a box head, and have a 3-dimensional
action space: accelerate the body forwards/backwards, torque can be applied around the vertical
axis to rotate, and apply downwards force to “jump”. Applying torque makes the player spin, gently
for steering, or with more force in order to “kick” the football with its arms. At each timestep, pro-
prioception (position, velocity, accelerometer information), task (egocentric ball position, velocity
and angular velocity, goal and corner positions) and teammate and opponent (orientation, position
and velocity) features are observed making a 93-dimensional input observation vector. Each soc-
cer match lasts upto 45 seconds, and is terminated when the first team scores. We disable contacts
between the players, but enable contacts between the players, the pitch and the ball. This makes it
impossible for players to foul and avoids the need for a complicated contact rules, and led to more
dynamic matches. There is a small border around the pitch which players can enter, but when the
ball is kicked out-of-bounds it is reset by automatic “throw in” a small random distance towards the
center of the pitch, and no penalty is incurred. The players choose a new action every 0.05 seconds.
At the start of an episode the players and ball are positioned uniformly at random on the pitch. We
train agents on a field whose dimensions are randomized in the range 20m × 15m to 28m × 21m,
4
Published as a conference paper at ICLR 2019
Figure 1: Top-down view with individual camera views of 2v2 multi-agent soccer environment.
with fixed aspect ratio, and are tested on a field of fixed size 24m × 18m. We show an example
frame of the game in Figure 1.
4.2	PBT settings
We use population-based training with 32 agents in the population, an agent is chosen for evolution
if its expected win rate against another chosen agent drops below 0.47. The k-factor learning rate for
Elo is 0.1 (this is low, due to the high stochasticity in the game results). Following evolution there
is a grace period where the agent does not learn while its replay buffer refills with fresh data, and a
further “burn-in” period before the agent can evolve again or before its weights can be copied into
another agent, in order to limit the frequency of evolution and maintain diversity in the population.
For each 2v2 training match 4 agents were selected uniformly at random from the population of 32
agents, so that agents are paired with diverse teammates and opponents.
4.3	Evaluation
Unlike multi-agent domains where we possess hand-crafted bots or human baselines, evaluating
agent performance in novel domains where we do not possess such knowledge remains an open
question. A number of solutions have been proposed: for competitive board games, there exits
evaluation metrics such as Elo (Elo, 1978) where ratings of two players should translate to their rel-
ative win-rates; in professional team sports, head-to-head tournaments are typically used to measure
team performance; in Al-Shedivat et al. (2017), survival-of-the-fittest is directly translated to multi-
agent learning as a proxy to relative agent performance. Unfortunately, as shown in Balduzzi et al.
(2018), in a simple game of rock-paper-scissors, a rock-playing agent will attain high Elo score if
we simply introduce more scissor-play agents into a tournament. Survival-of-the-fittest analysis as
shown in Al-Shedivat et al. (2017) would lead to a cycle, and agent ranking would depend on when
measurements are taken (Tuyls et al., 2018).
Nash-Averaging Evaluators: One desirable property for multi-agent evaluation is invariance to
redundant agents: i.e. the presence of multiple agents with similar strategies should not bias the
ranking. In this work, we apply Nash-averaging which possesses this property. Nash-Averaging
consists of a meta-game played using a pair-wise win-rate matrix between N agents. A row player
and a column player simultaneously pick distributions over agents for a mixed strategy, aiming for a
non-exploitable strategy (see Balduzzi et al., 2018).
In order to meaningfully evaluate our learned agents, we need to bootstrap our evaluation process.
Concretely, we choose a set of fixed evaluation teams by Nash-averaging from a population of 10
teams previously produced by diverse training schemes, with 25B frames of learning experience
each. We collected 1M tournament matches between the set of 10 agents. Figure 2 shows the pair-
wise expected goal difference among the 3 agents in the support set. Nash Averaging assigned non-
zero weights to 3 teams that exhibit diverse policies with non-transitive performance which would
not have been apparent under alternative evaluation schemes: agent A wins or draws against agent B
on 59.7% of the games; agent B wins or draws against agent C on 71.1% of the games and agent C
5
Published as a conference paper at ICLR 2019
Figure 2: L1: selected set of agents in Nash support set with their respective support weights. L2: pair-wise
expected goal difference among evaluator agents. L3: Elo ratings for all agents computed from tournament
matches. L4: pair-wise expected goal difference among all agents.
wins or draws against agent A on 65.3% of the matches. We show recordings of example tournament
matches between agent A, B and C to demonstrate qualitatively the diversity in their policies (video
3 on the website 2). Elo rating alone would yield a different picture: agent B is the best agent in the
tournament with an Elo rating of 1084.27, followed by C at 1068.85; Agent A ranks 5th at 1016.48
and we would have incorrectly concluded that agent B ought to beat agent A with a win-rate of
62%. All variants of agents presented in the experimental section are evaluated against the set of 3
agents in terms of their pair-wise expected difference in score, weighted by support weights.
5	Results
We describe in this section a set of experimental results. We first present the incremental effect of
various algorithmic components. We further show that population-based training with co-play and
reward shaping induces a progression from random to simple ball chasing and finally coordinated
behaviors. A tournament between all trained agents is provided in Appendix D.
5.1	Ablation Study
We incrementally introduce algorithmic components and show the effect of each by evaluating them
against the set of 3 evaluation agents. We compare agent performance using expected goal difference
weighted according to the Nash averaging procedure. We annotate a number of algorithmic compo-
nents as follows: ff: feedforward policy and action-value estimator; evo: population-based training
With agents evolving within the population; rwd_shp: providing dense shaping rewards on top of
sparse environment scoring/conceding rewards; lstm: recurrent policy with recurrent action-value
estimator; lstm_q: feedforward policy with recurrent action-value estimator; channels: decomposed
action-value estimation for each reward component; each with its own, individually evolving dis-
count factor.
Population-based Training with Evolution: We first introduce PBT with evolution. Figure 3 (ff
vs ff + evo) shows that Evolution kicks in at 2B steps, which quickly improves agent performance
at the population level. We show in Figure 4 that Population-based training coupled with evolution
yields a natural progression of learning rates, entropy costs as well as the discount factor. Critic
learning rate gradually decreases as training progresses, while discount factor increases over time,
focusing increasingly on long-term return. Entropy costs slowly decreases which reflects a shift
from exploration to exploitation over the course training.
Reward Shaping: We introduced two simple dense shaping rewards in addition to the sparse
scoring and conceding environment rewards: vel-to-ball: player’s linear velocity projected onto its
unit direction vector towards the ball, thresholded at zero; vel-ball-to-goal: ball’s linear velocity
projected onto its unit direction vector towards the center of opponent’s goal. Furthermore the
sparse goal reward and concede penalty are separately evolved, and so can receive separate weight
that trades off between the importance of scoring versus conceding.
2
https://goo.gl/AuHv7V
6
Published as a conference paper at ICLR 2019
Figure 3: Weighted expected goal difference shown in blue line. Agents’ expected goal difference against
each evaluator agent in point plot. A dummy evaluator that takes random actions has been introduced to show
learning progress early in the training, with zero weight in the performance computation.
Figure 4: Evolution of hyper-parameters. Hyperparameters of individual agents within the population in gray.
Dense shaping rewards make learning significantly easier early in training. This is reflected by
agents’ performance against the dummy evaluator where agents with dense shaping rewards quickly
start to win games from the start (Figure 3, ff + evo Vs ff + evo + rwd_shp). On the other hand,
shaping rewards tend to induce sub-optimal policies (Ng et al., 1999; Popov et al., 2017); We show
in Figure 5 howeVer that this is mitigated by coupling training with hyper-parameter eVolution which
adaptiVely adjusts the importance of shaping rewards. Early on in the training, the population as a
whole decreases the penalty of conceding a goal which eVolVes towards zero, assigning this reward
relatiVely lower weight than scoring. This trend is subsequently reVersed towards the end of training,
where the agents eVolVed to pay more attention to conceding goals: i.e. agents first learn to optimize
scoring and then incorporate defending. The dense shaping reward vel-to-ball howeVer quickly
decreases in relatiVe importance which is mirrored in their changing behaVior, see Section 5.2.
Recurrence: The introduction of recurrence in the action-Value function has a significant impact on
agents' performance as shown in Figure 3 (ff + evo + rwd_shp vs lstm + evo + rwd_shp reaching
weighted expected goal difference of 0 at 22B Vs 35B steps). A recurrent policy seems to underper-
form its feedforward counterpart in the presence of a recurrent action-value function. This could be
due to out-of-sample evaluators which suggests that recurrent policy might overfit to the behaviors
of agents from its own population while feedforward policy cannot.
Decomposed Action-Value Function: While we observed empirically that the discount factor in-
creases over time during the evolution process, we hypothesize that different reward components
require different discount factor. We show in Figure 6 that this is indeed the case, for sparse envi-
ronment rewards and vel-ball-to-goal, the agents focus on increasingly long planning horizon. In
contrast, agents quickly evolve to pay attention to short-term returns on vel-to-ball, once they learned
the basic movements. Note that although this agent underperforms lstm + evo + rwd_shp asymptot-
7
Published as a conference paper at ICLR 2019
Figure 5: Evolution of relative importance of dense shaping rewards over the course of training. Hyperparam-
eters of individual agents within the population in gray.
Figure 6: Evolution of discount factor for each reward component. We show hyperparameters of individual
agents within the population in gray.
ically, it achieved faster learning in comparison (reaching 0.2 at 15B vs 35B). This agent also attains
the highest Elo in a tournament between all of our trained agents, see Appendix D. This indicates
that the training population is less diverse than the Nash-averaging evaluation set, motivating future
work on introducing diversity as part of training regime.
5.2	Emergent Multi-Agent B ehaviors
Assessing cooperative behavior in soccer is difficult. We present several indicators ranging from
behavior statistics, policy analysis to behavior probing and qualitative game play in order to demon-
strate the level of cooperation between agents.
We provide birds-eye view videos on the website2 (video 1), where each agent’s value-function is
also plotted, along with a bar plot showing the value-functions for each weighted shaping reward
component. Early in the matches the 2 dense shaping rewards (rightmost channels) dominate the
value, until it becomes apparent that one team has an advantage at which point all agent’s value
functions become dominated by the sparse conceding/scoring reward (first and second channels)
indicating that PBT has learned a balance between sparse environment and dense shaping rewards
so that positions with a clear advantage to score will be preferred. There are recurring motifs in
the videos: for example, evidence that agents have learned a “cross” pass from the sideline to a
teammate in the centre (see Appendix F for example traces), and frequently appear to anticipate
this and change direction to receive. Another camera angle is provided on the website2 (video 2)
showing representative, consecutive games played between two fixed teams. These particular agents
generally kick the ball upfield, avoiding opponents and towards teammates.
5.2.1	Behavior Statistics
Statistics collected during matches are shown in Figure 7. The vel-to-ball plot shows the agents
average velocity towards the ball as training progresses: early in the learning process agents quickly
maximize their velocity towards the ball (optimizing their shaping reward) but gradually fixate less
on simple ball chasing as they learn more useful behaviors, such as kicking the ball upfield. The
teammate-spread-out shows the evolution of the spread of teammates position on the pitch. This
shows the percentage of timesteps where the teammates are spread at least 5m apart: both agents
quickly learn to hog the ball, driving this lower, but over time learn more useful behaviors which
result in diverse player distributions. pass/interception shows that pass, where players from the
same team consecutively kicked the ball and interception, where players from the opposing teams
kicked the ball in sequence, both remain flat throughout training. To pass is the more difficult
8
Published as a conference paper at ICLR 2019
interception
interception_10m
Figure 7: Behavior statistics evolution.
Figure 8: L1: agent’s average velocity towards the ball. L2: percentage of time when players within a team are
spread out. L3: KL divergence incurred by replacing a subset of state with counterfactual information.
behavior as it requires two teammates to coordinate whereas interception only requires one of the
two opponents to position correctly. pass/interception-10m logs pass/interception events over more
than 10m, and here we see a dramatic increase in pass-10m while interception-10m remains flat,
i.e. long range passes become increasingly common over the course of training, reaching equal
frequency as long-range interception.
5.2.2	Counterfactual Policy Divergence
In addition to analyzing behavior statistics, we could ask the following: “had a subset of the ob-
servation been different, how much would I have changed my policy?”. This reveals the extent to
which an agent’s policy is dependent on this subset of the observation space. To quantify this, we
analyze counterfactual policy divergence: at each step, we replace a subset of the observation with
10 valid alternatives, drawn from a fixed distribution, and we measure the KL divergence incurred in
agents’ policy distributions. This cannot be measured for a recurrent policy due to recurrent states
and We investigate ff + evo + rwd_shp instead (Figure 3), where the policy network is feedforward.
We study the effect of five types of counterfactual information over the course of training.
ball-position has a strong impact on agent’s policy distribution, more so than player and opponent
positions. Interestingly, ball-position initially reaches its peak quickly while divergence incurred
by counterfactual player/opponent positions plateau until reaching 5B training steps. This phase
coincides with agent’s greedy optimization of shaping rewards, as reflected in Figure 8. Counterfac-
tual teammate/opponent position increasingly affect agents’ policies from 5B steps, as they spread
out more and run less directly towards the ball. Opponent-0/1-position incur less divergence than
teammate position individually, suggesting that teammate position has relatively large impact than
any single opponent, and increasingly so during 5B-20B steps. This suggests that comparatively
players learn to leverage a coordinating teammate first, before paying attention to competing oppo-
nents. The gap between teammate-position and opponents-position eventually widens, as opponents
become increasingly relevant to the game dynamics. The progression observed in counterfactual
policy divergence provides evidence for emergent cooperative behaviors among the players.
5.2.3	Multi-Agent Behavior Probing
Qualitatively, we could ask the following question: would agents coordinate in scenarios where it’s
clearly advantageous to do so? To this end, we designed a probe task, to test our trained agents for
coordination, where blue0 possesses the ball, while the two opponents are centered on the pitch in
front. A teammate blue1 is introduced to either left or right side. In Figure 9 we show typical traces
of agents’ behaviors (additional probe task video shown at Video 4 on our website2): at 5B steps,
9
Published as a conference paper at ICLR 2019
Figure 9: L1: Comparison between two snapshots (5B vs 80B) of the same agent. L2: number of successful
passes and interception occurred in the first 100 timesteps, aggregated over 100 episodes.
	pass	intercept
5B」eft	0	100
5B_right	31	90
80B_left	76	24
80B_right	56~~	27
when agents play more individualistically, we observe that blue0 always tries to dribble the ball by
itself, regardless of the position of blue1. Later on in the training, blue0 actively seeks to pass and
its behavior is driven by the configuration of its teammate, showing a high-level of coordination. In
“8e10」eft” in particular, We observe two consecutive pass (blue0 to blue1 and back), in the spirit of
2-on-1 passes that emerge frequently in human soccer games.
6	Related Work
The population-based training we use here was introduced by Jaderberg et al. (2018) for the capture-
the-flag domain, whereas our implementation is for continuous control in simulated physics which
is less visually rich but arguably more open-ended, with potential for sophisticated behaviors gen-
erally and allows us to focus on complex multi-agent interactions, which may often be physically
observable and interpretable (as is the case with passing in soccer). Other recent related approaches
to multi-agent training include PSRO (Lanctot et al., 2017) and NFSP (Heinrich & Silver, 2016),
which are motivated by game-theoretic methods (fictitious play and double oracle) for solving ma-
trix games, aiming for some robustness by playing previous best response policies, rather than the
(more data efficient and parallelizable) approach of playing against simultaneous learning agents in
a population. The RoboCup competition is a grand challenge in AI and some top-performing teams
have used elements of reinforcement learning (Riedmiller et al., 2009; MacAlpine & Stone, 2018),
but are not end-to-end RL. Our environment is intended as a research platform, and easily extendable
along several lines of complexity: complex bodies; more agents; multi-task, transfer and continual
learning. Coordination and cooperation has been studied recently in deepRL in, for example, Lowe
et al. (2017); Foerster et al. (2018; 2016); Sukhbaatar et al. (2016); Mordatch & Abbeel (2018), but
all of these require some degree of centralization. Agents in our framework perform fully indepen-
dent asynchronous learning yet demonstrate evidence of complex coordinated behaviors. Bansal
et al. (2017); Al-Shedivat et al. (2017) introduce a MuJoCo Sumo domain with similar motivation
to ours, and observe emergent complexity from competition, in a 1v1 domain. We are explicitly
interested in cooperation within teams as well as competition. Other attempts at optimizing rewards
for multi-agent teams include Liu et al. (2012).
7	Conclusions and Future Work
We have introduced a new 2v2 soccer domain with simulated physics for continuous multi-agent re-
inforcement learning research, and used competition between agents in this simple domain to train
teams of independent RL agents, demonstrating coordinated behavior, including repeated passing
motifs. We demonstrated that a framework of distributed population-based-training with continu-
ous control, combined with automatic optimization of shaping reward channels, can learn in this
environment end-to-end. We introduced the idea of automatically optimizing separate discount fac-
tors for the shaping rewards, to facilitate the transition from myopically optimizing shaping rewards
towards alignment with the sparse long-horizon team rewards and corresponding cooperative behav-
ior. We have introduced novel method of counterfactual policy divergence to analyze agent behavior.
Our evaluation has highlighted non-transitivities in pairwise match results and the practical need for
robustness, which is a topic for future work. Our environment can serve as a platform for multi-
agent research with continuous physical worlds, and can be easily scaled to more agents and more
complex bodies, which we leave for future research.
10
Published as a conference paper at ICLR 2019
References
Maruan Al-Shedivat, Trapit Bansal, Yuri Burda, Ilya Sutskever, Igor Mordatch, and Pieter Abbeel.
Continuous adaptation via meta-learning in nonstationary and competitive environments. arXiv
preprint arXiv:1710.03641, 2017.
J. Andrew Bagnell and Andrew Y. Ng. On local rewards and scaling distributed reinforcement learn-
ing. In Advances in Neural Information Processing Systems 18 [Neural Information Processing
Systems, NIPS 2005, December 5-8, 2005, Vancouver, British Columbia, Canada], pp. 91-98,
2005.
David Balduzzi, Karl Tuyls, Julien Perolat, and Thore Graepel. Re-evaluating evaluation. arXiv
preprint arXiv:1806.02643, 2018.
Trapit Bansal, Jakub Pachocki, Szymon Sidor, Ilya Sutskever, and Igor Mordatch. Emergent com-
plexity via multi-agent competition. arXiv preprint arXiv:1710.03748, 2017.
Ronen I. Brafman and Moshe Tennenholtz. R-MAX - A general polynomial time algorithm for near-
optimal reinforcement learning. In Proceedings of the Seventeenth International Joint Conference
on Artificial Intelligence, IJCAI 2001, Seattle, Washington, USA, August 4-10, 2001, pp. 953-958,
2001.
Greg Brockman, Vicki Cheung, Ludwig Pettersson, Jonas Schneider, John Schulman, Jie Tang, and
Wojciech Zaremba. Openai gym. CoRR, abs/1606.01540, 2016.
Murray Campbell, A. Joseph Hoane Jr., and Feng-hsiung Hsu. Deep blue. Artif. Intell., 134(1-2):
57-83, 2002.
Djork-Ame Clevert, Thomas Unterthiner, and Sepp Hochreiter. Fast and accurate deep network
learning by exponential linear units (elus). CoRR, abs/1511.07289, 2015.
Arpad E. Elo. The rating of chessplayers, past and present. Arco Pub., New
York, 1978. ISBN 0668047216 9780668047210. URL http://www.amazon.com/
Rating-Chess-Players-Past-Present/dp/0668047216.
Jakob N. Foerster, Yannis M. Assael, Nando de Freitas, and Shimon Whiteson. Learning to commu-
nicate with deep multi-agent reinforcement learning. In Advances in Neural Information Process-
ing Systems 29: Annual Conference on Neural Information Processing Systems 2016, December
5-10, 2016, Barcelona, Spain, pp. 2137-2145, 2016.
Jakob N. Foerster, Nantas Nardelli, Gregory Farquhar, Triantafyllos Afouras, Philip H. S. Torr,
Pushmeet Kohli, and Shimon Whiteson. Stabilising experience replay for deep multi-agent rein-
forcement learning. In Proceedings of the 34th International Conference on Machine Learning,
ICML 2017, Sydney, NSW, Australia, 6-11 August 2017, pp. 1146-1155, 2017.
Jakob N. Foerster, Gregory Farquhar, Triantafyllos Afouras, Nantas Nardelli, and Shimon White-
son. Counterfactual multi-agent policy gradients. In Proceedings of the Thirty-Second AAAI
Conference on Artificial Intelligence, New Orleans, Louisiana, USA, February 2-7, 2018, 2018.
Matthew John Hausknecht. Cooperation and communication in multiagent deep reinforcement
learning. PhD thesis, University of Texas at Austin, Austin, USA, 2016.
Karol Hausman, Jost Tobias Springenberg, Ziyu Wang, Nicolas Heess, and Martin Riedmiller.
Learning an embedding space for transferable robot skills. In International Conference on Learn-
ing Representations, 2018.
Nicolas Heess, Jonathan J. Hunt, Timothy P. Lillicrap, and David Silver. Memory-based control
with recurrent neural networks. CoRR, abs/1512.04455, 2015a.
Nicolas Heess, Gregory Wayne, David Silver, Tim Lillicrap, Tom Erez, and Yuval Tassa. Learning
continuous control policies by stochastic value gradients. In Advances in Neural Information
Processing Systems, pp. 2944-2952, 2015b.
11
Published as a conference paper at ICLR 2019
Nicolas Heess, Gregory Wayne, Yuval Tassa, Timothy P. Lillicrap, Martin A. Riedmiller, and David
Silver. Learning and transfer of modulated locomotor controllers. CoRR, abs/1610.05182, 2016.
URL http://arxiv.org/abs/1610.05182.
Nicolas Heess, Dhruva TB, Srinivasan Sriram, Jay Lemmon, Josh Merel, Greg Wayne, Yuval Tassa,
Tom Erez, Ziyu Wang, S. M. Ali Eslami, Martin A. Riedmiller, and David Silver. Emergence
of locomotion behaviours in rich environments. CoRR, abs/1707.02286, 2017. URL http:
//arxiv.org/abs/1707.02286.
Johannes Heinrich and David Silver. Deep reinforcement learning from self-play in imperfect-
information games. CoRR, abs/1603.01121, 2016.
SePP Hochreiter and Jurgen Schmidhuber. Long short-term memory. Neural computation, 9(8):
1735-1780,1997.
Max Jaderberg, Valentin Dalibard, Simon Osindero, Wojciech M Czarnecki, Jeff Donahue, Ali
Razavi, Oriol Vinyals, Tim Green, Iain Dunning, Karen Simonyan, et al. PoPulation based train-
ing of neural networks. arXiv preprint arXiv:1711.09846, 2017.
Max Jaderberg, Wojciech Czarnecki, Iain Dunning, Luke Marris, Guy Lever, Antonio Garcla
Castaneda, Charles Beattie, Neil C. Rabinowitz, Ari S. Morcos, Avraham Ruderman, Nico-
las Sonnerat, Tim Green, Louise Deason, Joel Z. Leibo, David Silver, Demis Hassabis, Koray
Kavukcuoglu, and Thore GraePel. Human-level Performance in first-Person multiPlayer games
with PoPulation-based deeP reinforcement learning. CoRR, abs/1807.01281, 2018.
Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic oPtimization. CoRR,
abs/1412.6980, 2014. URL http://arxiv.org/abs/1412.6980.
Hiroaki Kitano, Minoru Asada, Yasuo Kuniyoshi, Itsuki Noda, and Eiichi Osawa. RobocuP: The
robot world cuP initiative. In Agents, PP. 340-347, 1997.
Marc Lanctot, Vinlcius Flores Zambaldi, Audrunas Gruslys, Angeliki Lazaridou, Karl Tuyls, Julien
Perolat, David Silver, and Thore Graepel. A unified game-theoretic approach to multiagent re-
inforcement learning. In Advances in Neural Information Processing Systems 30: Annual Con-
ference on Neural Information Processing Systems 2017, 4-9 December 2017, Long Beach, CA,
USA, pp. 4193-4206, 2017.
Michael L. Littman. Markov games as a framework for multi-agent reinforcement learning. In
In Proceedings of the Eleventh International Conference on Machine Learning, pp. 157-163.
Morgan Kaufmann, 1994.
Bingyao Liu, Satinder P. Singh, Richard L. Lewis, and Shiyin Qin. Optimal rewards in multiagent
teams. In 2012 IEEE International Conference on Development and Learning and Epigenetic
Robotics, ICDL-EPIROB 2012, San Diego, CA, USA, November 7-9, 2012, pp. 1-8, 2012.
Ryan Lowe, Yi Wu, Aviv Tamar, Jean Harb, OpenAI Pieter Abbeel, and Igor Mordatch. Multi-agent
actor-critic for mixed cooperative-competitive environments. In Advances in Neural Information
Processing Systems, pp. 6379-6390, 2017.
Patrick MacAlpine and Peter Stone. Overlapping layered learning. Artif. Intell., 254:21-43, 2018.
doi: 10.1016/j.artint.2017.09.001. URL https://doi.org/10.1016/j.artint.2017.
09.001.
Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A. Rusu, Joel Veness, Marc G. Belle-
mare, Alex Graves, Martin A. Riedmiller, Andreas Fidjeland, Georg Ostrovski, Stig Petersen,
Charles Beattie, Amir Sadik, Ioannis Antonoglou, Helen King, Dharshan Kumaran, Daan Wier-
stra, Shane Legg, and Demis Hassabis. Human-level control through deep reinforcement learning.
Nature, 518(7540):529-533, 2015.
Matej Moravk, Martin Schmid, Neil Burch, Viliam Lis, Dustin Morrill, Nolan Bard, Trevor Davis,
Kevin Waugh, Michael Johanson, and Michael Bowling. Deepstack: Expert-level artificial intel-
ligence in no-limit poker. 356, 01 2017.
12
Published as a conference paper at ICLR 2019
Igor Mordatch and Pieter Abbeel. Emergence of grounded compositional language in multi-agent
populations. In Proceedings of the Thirty-Second AAAI Conference on Artificial Intelligence, New
Orleans, Louisiana, USA, February 2-7, 2018, 2018.
Remi Munos, Tom StePleton, Anna Harutyunyan, and Marc Bellemare. Safe and efficient off-policy
reinforcement learning. In Advances in Neural Information Processing Systems, pp. 1054-1062,
2016.
Andrew Y. Ng, Daishi Harada, and Stuart J. Russell. Policy invariance under reward transforma-
tions: Theory and application to reward shaping. In Proceedings of the Sixteenth International
Conference on Machine Learning (ICML 1999), Bled, Slovenia, June 27 - 30, 1999, pp. 278-287,
1999.
Ivaylo Popov, Nicolas Heess, Timothy P. Lillicrap, Roland Hafner, Gabriel Barth-Maron, Matej
Vecerik, Thomas Lampe, Yuval Tassa, Tom Erez, and Martin A. Riedmiller. Data-efficient deep
reinforcement learning for dexterous manipulation. CoRR, abs/1704.03073, 2017.
Martin Riedmiller, Roland Hafner, Thomas Lampe, Michael Neunert, Jonas Degrave, Tom Van de
Wiele, Volodymyr Mnih, Nicolas Heess, and Jost Tobias Springenberg. Learning by playing-
solving sparse reward tasks from scratch. arXiv preprint arXiv:1802.10567, 2018.
Martin A. Riedmiller, Thomas Gabel, Roland Hafner, and Sascha Lange. Reinforcement learning
for robot soccer. Auton. Robots, 27(1):55-73, 2009.
A. L. Samuel. Some studies in machine learning using the game of checkers. IBM J. Res. Dev., 3
(3):210-229, July 1959. ISSN 0018-8646.
L. S. Shapley. Stochastic games. Proceedings of the National Academy of Sciences of the United
States of America, 39(10):1095-1100, 1953.
David Silver, Guy Lever, Nicolas Heess, Thomas Degris, Daan Wierstra, and Martin A. Riedmiller.
Deterministic policy gradient algorithms. In Proceedings of the 31th International Conference on
Machine Learning, ICML 2014, Beijing, China, 21-26 June 2014, pp. 387-395, 2014.
David Silver, Aja Huang, Chris J. Maddison, Arthur Guez, Laurent Sifre, George van den Driess-
che, Julian Schrittwieser, Ioannis Antonoglou, Vedavyas Panneershelvam, Marc Lanctot, Sander
Dieleman, Dominik Grewe, John Nham, Nal Kalchbrenner, Ilya Sutskever, Timothy P. Lillicrap,
Madeleine Leach, Koray Kavukcuoglu, Thore Graepel, and Demis Hassabis. Mastering the game
ofgo with deep neural networks and tree search. Nature, 529(7587):484-489, 2016.
Sainbayar Sukhbaatar, Arthur Szlam, and Rob Fergus. Learning multiagent communication with
backpropagation. In Advances in Neural Information Processing Systems 29: Annual Conference
on Neural Information Processing Systems 2016, December 5-10, 2016, Barcelona, Spain, pp.
2244-2252, 2016.
R. Sutton and A. Barto. Reinforcement Learning: An Introduction. MIT Press, 1998.
Yuval Tassa, Yotam Doron, Alistair Muldal, Tom Erez, Yazhe Li, Diego de Las Casas, David Bud-
den, Abbas Abdolmaleki, Josh Merel, Andrew Lefrancq, Timothy P. Lillicrap, and Martin A.
Riedmiller. Deepmind control suite. CoRR, abs/1801.00690, 2018.
G. Tesauro. Temporal difference learning and td-gammon. Commun. ACM, 38(3):58-68, March
1995.
Emanuel Todorov, Tom Erez, and Yuval Tassa. Mujoco: A physics engine for model-based con-
trol. In 2012 IEEE/RSJ International Conference on Intelligent Robots and Systems, IROS 2012,
Vilamoura, Algarve, Portugal, October 7-12, 2012, pp. 5026-5033, 2012.
Karl Tuyls, Julien Perolat, Marc Lanctot, Joel Z Leibo, and Thore Graepel. A generalised method
for empirical game theoretic analysis. arXiv preprint arXiv:1803.06376, 2018.
13
Published as a conference paper at ICLR 2019
Oriol Vinyals, Timo Ewalds, Sergey Bartunov, Petko Georgiev, Alexander Sasha Vezhnevets,
Michelle Yeo, Alireza Makhzani, Heinrich Kuttler, John Agapiou, Julian Schrittwieser, John
Quan, Stephen Gaffney, Stig Petersen, Karen Simonyan, Tom Schaul, Hado van Hasselt, David
Silver, Timothy P. Lillicrap, Kevin Calderone, Paul Keet, Anthony Brunasso, David Lawrence,
Anders Ekermo, Jacob Repp, and Rodney Tsing. Starcraft II: A new challenge for reinforcement
learning. CoRR, abs/1708.04782, 2017.
14
Published as a conference paper at ICLR 2019
A	Off-policy SVG0 Algorithm
A. 1 Policy Updates
The Stochastic Value Gradients (SVG0) algorithm used throughout this work is a special case of
the family of policy gradient algorithms provided by Heess et al. (2015b) in which the gradient of a
value function used to compute the policy gradient, and is closely related to the Deterministic Policy
Gradient algorithm (DPG) (Silver et al., 2014), which is itself a special case of SVG0. For clarity
we provide the specific derivation of SVG0 here.
Using the reparametrization method of Heess et al. (2015b) We write a stochastic policy ∏θ(∙∣s) as
a deterministic policy μθ : SX R → A further conditioned on a random variable η ∈ Rp, so that
a ~ ∏θ(∙∣s) is equivalent to a ~ μe(s, η), where η ~ P for some distribution ρ. Then,
Qπθ(s,a)= r(s,a) + γEs0~p(∙∣s,α)此，~冗(.|§0)[Qπθ(s0,a0)]]
=r(s,a) + γEs0~p(∙∣s,α)叫0~。[Qπθ(s0,μθ(s0,η0))]]
∂Qπθ(s, a)
∂θ
Y Es0~p (∙∣s,a)
∂∂θQπθ (s0,μθ (s0,η'T
Y Es0-P (∙∣s,α) Eη0~ρ
∂
∂θQπθ (s'，。O)
+ 得Qπθ (s0,a0)
a0=μθ (s0,η0)	da
a0=μθ (so”) dθμθ(s0,η0)jj
from which we obtain a recursion for dQ dθs,aɔ. Expanding the recursion we obtain the policy
gradient
∂Qπθ (so,。。)
∂θ
∞
γE γ Est-P(Tst-1,at-1) Eηt~ρ
t=1
×
at=μθ(st,ηt)
∂^μθ(st,ηt) s0,ao,aτ = μθ(sτ,ητ),η ~ ρ∀τ < t
ISLZ (s，n) ∂αQπθ Ga)
∂
μθ(sθ (s,η)dηds
a=μθ(s,η) G
where ζ(s, η) := Pt∞=1 Ytpt(s, η) and wherept(s, η) is the joint density over (state, η) at timestep t
following the policy. Typically Y is replaced with 1 in the definition of ζ to avoid discounting terms
depending on future states in the gradient too severely. This suggests Algorithm 3 given in Heess
et al. (2015b). For details on recurrent policies see Heess et al. (2015a).
Algorithm 2 Off-policy SVG0 algorithm (Heess et al., 2015b).
1	initialize replay buffer B = 0
2	: sample initial state s0 from environment
3	: for t do=0 to ∞ do
4	sample action from current policy at = μθ(∙∣st, η), η 〜P
5	:	observe reward and state observation rt , st
6	train Qπθ (∙, ∙; ψ) off policy using B (see Section A.2)	. Critic update.
7	θ — θ + α∂aQπθ(st,a; ψ)∖a=μθ(Stmt)∂θ4θ(St,η)	. Policy update.
8	: end for
A.2 Q-Value Updates
As in Section 3.1, in any given game, by treating all other players as part of the environment dynam-
ics, we can define action-value function for policy πθ controlling player i:
H
Qπθ,i(s, a;π∖i) := E[XYtrilSO = s, a0 = a;πi = πθ,π∖i]
t=0
15
Published as a conference paper at ICLR 2019
In our soccer environment the reward is invariant over player and we can drop the dependence on i.
SVG requires the critic to learn a differentiable Q-function. The true state of the game s and the
identity of other agents ∏∖i, are not revealed during a game and so identities must be inferred from
their behavior, for example. Further, as noted in Foerster et al. (2017), off-policy replay is not al-
ways fully sound in multi-agent environments since the effective dynamics from any single agent’s
perspective changes as the other agent’s policies change. Because of this, we generally model Q as
a function of an agents history of observations - typically keeping a low dimensional summary in
the internal state of an LSTM: Qπθ (∙, ∙; ψ) : X ×A→ R, where X denotes the space of possible
histories or internal memory state, parameterized by a neural network with weights ψ . This enables
the Q-function to implicitly condition on other players observed behavior and generalize over the
diversity of players in the population and diversity of behaviors in replay, Q is learned using tra-
jectory data stored in an experience replay buffer B, by minimizing the k-step return TD-error with
off-policy retrace correction (Munos et al., 2016), using a separate target network for bootstrapping,
as is also described in Hausman et al. (2018); Riedmiller et al. (2018). Specifically we minimize:
L(ψ) ：= Eξ 〜B [(Qπθ (Xi,。，； Ψ) — Qretrace(ξ))2]
where ξ := ((st, at, rt))it+=ki is a k-step trajectory snippet, where i denotes the timestep of the first
state in the snippet, sampled uniformly from the replay buffer B of prior experience, and Qretrace is
the off-policy corrected retrace target:
k	t+i
Qr
etrace(S) = Q(Xi, a，；ψ+EYt	cs	r(si+t, ai+t)+
t=0	s=i+1
TTTi	「A/	7 M	Z^⅛ /	7 ʌ I
YEa〜∏(∙∣Xi+t+ι)[Q(Xi+t+1, a； ψ)] - Q(Xi+t,ai+t; ψ) I
where, for stability, Q(∙, ∙; ψ) : X×A→ R and π are target network and policies (Mnih et al., 2015)
periodically synced with the online action-value critic and policy (in our experiments we sync after
every 100 gradient steps), and Cs := min(1, ；(：]|：，)), where β denotes the behavior policy which
generated the trajectory snippet ξ sampled from B, and Qis=i+1 cs := 1. In our soccer experiments
k = 40. Though we use off-policy corrections, the replay buffer has a threshold, to ensure that data
is relatively recent.
When modelling Q using an LSTM the agent’s internal memory state at the first timestep of the
snippet is stored in replay, along with the trajectory data. When replaying the experience the LSTM
is primed with this stored internal state but then updates its own state during replay of the snippet.
LSTMs are optimized using backpropagation through time with unrolls truncated to length 40 in our
experiments.
B	Population-based Training Procedure
B.1	Fitness
We use Elo rating (Elo (1978)), introduced to evaluate the strength of human chess players, to
measure an agent’s performance within the population of learning agents and determine eligibility
for evolution. Elo is updated from pairwise match results and can be used to predict expected win
rates against the other members of the population.
For a given pair of agents i, j (or a pair of agent teams), selo estimates the expected win rate of agent
i playing against agent j. We show in Algorithm 3 the update rule for a two player competitive game
for simplicity, for a team of multiple players, we use their average Elo score instead.
By using Elo as the fitness function, driving the evolution of the population’s hyperparamters, the
agents’ internal hyperparameters (see Section 3.3) can be automatically optimized for the objective
we are ultimately interested in - the win rate against other agents. Individual shaping rewards would
otherwise be difficult to handcraft without biasing this objective.
16
Published as a conference paper at ICLR 2019
Algorithm 3 Iterative Elo rating update.
1	: Initialize rating ri for each agent in the agent population.
2	: K: step size of Elo rating update given one match result.
3	: si, sj: score for agent i,j in a given match.
4	: procedure UPDATERATING(ri , rj , si , sj )
5	:	s J (sign(si - sj) + 1)/2
6	:	selo J 1/(1 + 10(rj-ri)/400)
7	:	ri J ri + K(s - selo)
8	:	rj J rj - K(s - selo)
9	: end procedure
B.2	Evolution eligibility
To limit the frequency of evolution and prevent premature convergence of the population, we adopted
the same eligibility criteria introduced in Jaderberg et al. (2017). In particular, we consider an agent
i eligible for evolution if it has:
1.	processed 2 × 109 frames for learning since the beginning of training; and
2.	processed 4 × 108 frames for learning since the last time it became eligible for evolution.
and agent j can be a parent if agent j has
1. processed 4 × 108 frames for learning since it last evolved.
which we refer to as a “burn-in” period.
B.3	Selection
When an agent i becomes eligible for evolution, it is compared against another agent j who has
finished its “burn-in” period for evolution selection. We describe this procedure in Algorithm 4.
Algorithm 4 Given agent i, select an agent j to evolve to.
1:	Tselect : win rate selection threshold below which Ai should evolve to Aj .
2:	ri , rj : Elo ratings of agents i, j.
3:	procedure SELECT(Ai , {Ai}i∈[1,..,N];i6=j)
4:	Choose Aj uniformly at random from {Ai}i∈[1,..,N];i6=j .
5:	Selo J 1∕(1 + 10(rj-ri)/400)	一 ,
6:	if selo <	Tselect then
7:	return Aj
8:	else
9:	return NULL
10:	end if
11:	end procedure
B.4	Inheritance
Upon selection for evolution, agent i inherits hyperparameters from agent j by “cross-over” meaning
that hyperparameters are either inherited or not independently with probability 0.5 as described in
Algorithm 5:
B.5	Mutation
Upon each evolution action the child agent mutates its hyper-parameters with mutation probability
pmutate at a multiplicative perturbation scale pperturb . In this work, we apply a mutation probability
of pmutate = 0.1 and pperturb = 0.2 for all experiments. We limit a subset of hyperparameters to
bounded ranges (e.g. discount factor) such that their values remain valid throughout training.
17
Published as a conference paper at ICLR 2019
Algorithm 5 Agent i inherits from agent j by cross-over.
1:	Agent i, j with respective network parameters θi , θj and hyper-parameters θih , θjh .
2:	procedure INHERIT(θi , θj , θih , θjh)
3:	θi - θj
4:	m = (mk)k, m，k 〜bernouilli(0.5)
5:	θh J mθh + (1 - m)θh
6:	end procedure
C Further Environment details and Agent Parameterization
C.1 Policy Parametrization and Optimization
We parametrize each agent’s policy and critic using neural networks. Observation preprocessing is
first applied to each raw teammate and opponent feature using a shared 2-layer network with 32 and
16 neurons and Elu activations (Clevert et al., 2015) to embed each individual player’s data into a
consistent, learned 16 dimensional embedding space. The maximum, minimum and mean of each
dimension is then passed as input to the remainder of the network, where it is concatenated with the
ball and pitch features. This preprocessing makes the network architecture invariant to the order of
teammates and opponents features.
Both critic and actor then apply 2 feed-forward, elu-activated, layers of size 512 and 256, followed
by a final layer of 256 neurons which is either feed-forward or made recurrent using an LSTM
(Hochreiter & Schmidhuber, 1997). Weights are not shared between critic and actor networks.
We learn the parametrized gaussian policies using SVG0 as detailed in Appendix A, and the critic
as described in Section A.2, with the Adam optimizer (Kingma & Ba, 2014) used to apply gradient
updates.
D Head-to-head tournament of trained agents
We also ran a round robin tournament with 50,000 matches between the best teams from 5 pop-
ulations of agents (selected by Elo within their population), all trained for 5e10 agent steps - i.e.
each learner had processed at least 5e10 frames from the replay buffer, though the number of raw
environment steps would be much lower than that) and computed the Elo score. This shows the
advantage of including shaping rewards, adding a recurrent critic and separate reward and discount
channels, and the further (marginal) contribution of a recurrent actor. The full win rate matrix for
this tournament is given in Figure 10. Note that the agent with full recurrence and separate reward
channels attains the highest Elo in this tournament, though performance against our Nash evaluators
in Section 5.1 is more mixed. This highlights the possibility for non-transitivities in this domain and
the practical need for robustness to opponents.
E Hyperparameter Evolution
To assess the relative importance of hyperparameters we replicated a single experiment (using a
feed-forward policy and critic network) with 3 different seeds, see Figure 11. Critic learning rate
and entropy regularizer evolve consistently over the three training runs. In particular the critic
learning rate tends to be reduced over time. If a certain hyperparameter was not important to agent
performance we would expect less consistency in its evolution across seeds, as selection would be
driven by other hyperparameters: thus indicating performance is more sensitive to critic learning
rate than actor learning rate.
18
Published as a conference paper at ICLR 2019
Team
lstm + evo + rwd_shp + channels
lstm_q + evo + rwd_shp + channels
lstm_q + evo + rwd_shp
ff + evo + rwd_shp
ff + evo
Elo
1071
1069
1006
956
898
Figure 10: Win rate matrix for the Tournament between teams: from top to bottom, ordered by Elo, ascending:
ff + evo; ff + evo + rwd_shp; lstm_q + evo + rwd_shp; lstm_q + evo + rwd_shp + channels; lstm + evo +
rwd_shp + channels. ELo derived from the tournament is given in the table.
critic learning rate
actor learning rate
critic_learning_rate
Figure 11: Hyperparameter evolution for three separate seeds, displayed over three separate rows.
F Behavior Visualizations
As well as the videos at the website3, we provide visualizations of traces of the agent behavior, in
the repeated “cross pass” motif, see Figure 12.
3https://goo.gl/AuHv7V
19
Published as a conference paper at ICLR 2019
Figure 12: On the left red agent 0 has passed to agent 1, who apparently ran into position to receive. On the
right blue agent 1 has passed to agent 0.
20