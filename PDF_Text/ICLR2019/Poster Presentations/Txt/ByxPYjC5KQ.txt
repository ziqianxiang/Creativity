Published as a conference paper at ICLR 2019
Improving Generalization and Stability of
Generative Adversarial Networks
Hoang Thanh-Tung
hoangtha@deakin.edu.au
Truyen Tran
truyen.tran@deakin.edu.au
Svetha Venkatesh
svetha.venkatesh@deakin.edu.au
Ab stract
Generative Adversarial Networks (GANs) are one of the most popular tools for
learning complex high dimensional distributions. However, generalization prop-
erties of GANs have not been well understood. In this paper, we analyze the
generalization of GANs in practical settings. We show that discriminators trained
on discrete datasets with the original GAN loss have poor generalization capabil-
ity and do not approximate the theoretically optimal discriminator. We propose
a zero-centered gradient penalty for improving the generalization of the discrimi-
nator by pushing it toward the optimal discriminator. The penalty guarantees the
generalization and convergence of GANs. Experiments on synthetic and large
scale datasets verify our theoretical analysis.
1	Introduction
GANs (Goodfellow et al., 2014) are one of the most popular tools for modeling high dimensional
data. The original GAN is, however, highly unstable and often suffers from mode collapse. Much of
recent researches has focused on improving the stability of GANs (Radford et al., 2015; Arjovsky
et al., 2017; Heusel et al., 2017; Miyato et al., 2018; Karras et al., 2018). On the theoretical aspect,
Nagarajan & Kolter (2017) proved that gradient based training of the original GAN is locally stable.
Heusel et al. (2017) further proved that GANs trained with Two Timescale Update Rule (TTUR)
converge to local equilibria. However, the generalization of GANs at local equilibria is not discussed
in depth in these papers.
Arora et al. (2017) showed that the generator can win by remembering a polynomial number of
training examples. The result implies that a low capacity discriminator cannot detect the lack of di-
versity. Therefore, it cannot teach the generator to approximate the target distribution. In section 4,
we discuss the generalization capability of high capacity discriminators. We show that high capacity
discriminators trained with the original GAN loss tends to overfit to the mislabeled samples in train-
ing dataset, guiding the generator toward collapsed equilibria (i.e. equilibria where the generator
has mode collapse).
Arora et al. (2018) proposed to measure the generalization capability of GAN by estimating the
number of modes in the model distribution using the birthday paradox. Experiments on several
datasets showed that the number of modes in the model distribution is several times greater than
the number of training examples. The author concluded that although GANs might not be able to
learn distributions, they do exhibit some level of generalization. Our analysis shows that poor gen-
eralization comes from the mismatch between discriminators trained on discrete finite datasets and
the theoretically optimal discriminator. We propose a zero-centered gradient penalty for improving
the generalization capability of (high capacity) discriminators. Our zero-centered gradient penalty
pushes the discriminator toward the optimal one, making GAN to converge to equilibrium with good
generalization capability.
Our contributions are as follow:
1
Published as a conference paper at ICLR 2019
1.	We show that discriminators trained with the original GAN loss have poor generalization
capability. Poor generalization in the discriminator prevents the generator from learning
the target distribution.
2.	We show that the original GAN objective encourages gradient exploding in the discrimina-
tor. Gradient exploding in the discriminator can lead to mode collapse in the generator.
3.	We propose a zero-centered gradient penalty (0-GP) for improving the generalization ca-
pability of the discriminator. We show that non-zero centered GP and the zero-centered GP
proposed in Mescheder et al. (2018) cannot make the discriminator generalize. Our 0-GP
helps GANs to converge to generalizable equilibria. Theoretical results are verified on real
world datasets.
4.	We show that 0-GP helps the discriminator to distribute its capacity more equally between
regions of the space, effectively preventing mode collapse. Experiments on synthetic and
real world datasets verify that 0-GP can prevent mode collapse. GANs with 0-GP is much
more robust to changes in hyper parameters, optimizers, and network architectures than the
original GAN and GANs with other gradient penalties.
Table 1 compares the key properties of our 0-GP with one centered GP (1-GP) (Gulrajani et al.,
2017) and zero centered GP on real/fake samples only (0-GP-sample) (Mescheder et al., 2018).
Notations
pr
pg
pz
dx
dz
supp(p)
X〜Pr
Z〜Pz
y=G(z)
Dr = {x1 , ..., xn }
Dg(t) = ny1(t), ...,ym(t)o
D(t) = Dr ∪ Dg(t)
the target distribution
the model distribution
the noise distribution
the dimensionality of a data sample (real or fake)
the dimensionality of a noise sample
the support of distribution P
a real sample
a noise vector drawn from the noise distribution Pz
a generated sample
the set of n real samples
the set of m generated samples at step t
the training dataset at step t
2	Related works
Gradient penalties are widely used in GANs literature. There are a plethora of works on using
gradient penalty to improve the stability of GANs (Mescheder et al., 2018; Gulrajani et al., 2017;
Petzka et al., 2018; Roth et al., 2017; Qi, 2017). However, these works mostly focused on making
the training of GANs stable and convergent. Our work aims to improve the generalization capability
of GANs via gradient regularization.
Arora et al. (2018) showed that the number of modes in the model distribution grows linearly with
the size of the discriminator. The result implies that higher capacity discriminators are needed for
better approximation of the target distribution. Zhang et al. (2018) studied the tradeoff between
generalization and discrimination in GANs. The authors showed that generalization is guaranteed if
the discriminator set is small enough. In practice, rich discriminators are usually used for better dis-
criminative power. Our GP makes rich discriminators generalizable while remaining discriminative.
Although less mode collapse is not exactly the same as generalization, the ability to produce more
diverse samples implies better generalization. There are a large number of papers on preventing
mode collapse in GANs. Radford et al. (2015); Salimans et al. (2016) introduced a number of
empirical tricks to help stabilizing GANs. Arjovsky & Bottou (2017) showed the importance of
divergences in GAN training, leading to the introduction of Wasserstein GAN (Arjovsky et al.,
2017). The use of weak divergence is further explored by Mroueh & Sercu (2017); Mroueh et al.
(2018). Lucas et al. (2018) advocated the use of mixed-batches, mini-batches of real and fake data,
2
Published as a conference paper at ICLR 2019
GP	Formula	Improve gen- eralization	Prevent grad expoding	Convergence guarantee
OUr 0-GP	λEv∈c [k(VD)v k2], C from y to x	✓	^7	^7
T-GP	λEχ [(k(VD)χ k - 1)2], where X = αx + (1 — α)y	^X	✓	^X
0-GP-sample	λEv∈D [k(VD)vk2]	X	一	X	一	J	一
Table 1: Summary of different gradient penalties
to smooth out the loss surface. The method exploits the distributional information in a mini-batch
to prevent mode collapse. VEEGAN (Srivastava et al., 2017) uses an inverse of the generator to
map the data to the prior distribution. The mismatch between the inverse mapping and the prior is
used to detect mode collapse. If the generator can remember the entire training set, then the inverse
mapping can be arbitrarily close the the prior distribution. It suggests that VEEGAN might not be
able to help GAN to generalize outside of the training dataset. Our method helps GANs to discover
unseen regions of the target distribution, significantly improve the diversity of generated samples.
3	Background
In the original GAN, the discriminator D maximizes the following objective
L = Eχ~pr[log(D(x))]+ Ez~pz[log(1 - D(G(Z)))]	(1)
Goodfellow et al. (2014) showed that if the density functions pg and pr are known, then for a fixed
generator G the optimal discriminator is
D*(v) =	( Pɪv) (、,∀v ∈ supp(pr) ∪ supp(pg)	(2)
pr(v) +pg(v)
In the beginning of the training, pg is very different from pr so we have pr (x) pg (x), for x ∈ Dr
andPg(y)》Pr (y), for y ∈ Dg. Therefore, in the beginning of the training D*(x) ≈ 1, for X ∈
Dr and D*(y) ≈ 0, for y ∈ Dg . As the training progresses, the generator will bring pg closer to
Pr. The game reaches the global equilibrium when Pr = Pg. At the global equilibrium, D*(v)=
2, ∀v ∈ supp(pr) ∪ supp(pg).One important result of the original paper is that, if the discriminator
is optimal at every step of the GAN algorithm, then pg converges to pr .
In practice, density functions are not known and the optimal discriminator is approximated by op-
timizing the classification performance of a parametric discriminator D(∙; Θd) on a discrete finite
dataset D = Dr ∪ Dg . We call a discriminator trained on a discrete finite dataset an empirical
discriminator. The empirically optimal discriminator is denoted by D*.
Arora et al. (2017) defined generalization of a divergence d as follow: A divergence d is said to have
generalization error if
|d(Dg , Dr ) - d(pg, pr)| ≤	(3)
A discriminator D defines a divergence between two distributions. The performance of a discrim-
inator with good generalization capability on the training dataset should be similar to that on the
entire data space. In practice, generalization capability of D can be estimated by measuring the
difference between its performance on the training dataset and a held-out dataset.
4	Generalization capability of discriminators
4.1	The empirically optimal discriminator does not approximate the
THEORETICALLY OPTIMAL DISCRIMINATOR
It has been observed that if the discriminator is too good at discriminating real and fake samples,
the generator cannot learn effectively (Goodfellow et al., 2014; Arjovsky & Bottou, 2017). The phe-
nomenon suggests that D* does not well approximate D*, and does not guarantee the convergence
of Pg to Pr. In the following, We clarify the mismatch between D* and D*, and its implications.
3
Published as a conference paper at ICLR 2019
(a)	(b)	(c)	(d)	(e)
(f)
Figure 1: Value surfaces of discriminators trained for 10,000 iterations with different gradient penal-
ties, on samples from two Gaussian distributions. The discriminator is a 2 hidden layer MLP with 64
hidden neurons.(a) No GP. (b) No GP with more samples. (c) One-centered GP (1-GP) with λ = 1.
(d) Zero-centered GP on real/fake samples only (0-GP-sample) with λ = 1. (e) Our zero-centered
GP with λ = 1. (f) Theoretically optimal discriminator computed using Eqn. 2.
Proposition 1. The two datasets Dr and Dg(t)
the two
distributions pr and p(gt)
are.
are disjoint with probability 1 regardless of how close
Proof. See appendix A.
□
Dr and Dgt) are disjoint with probability 1 even when Pg and Pr are exactly the same. DD* perfectly
classifies the real and the fake datasets, and DD*(x) = 1,∀x ∈ Dr. , DD*(y) = 0,∀y ∈ Dgt). The
value of DD* on D(t) does not depend on the distance between the two distributions and does not
reflect the learning progress. The value of DD* on the training dataset approximates that of D* in the
beginning of the learning process but not when the two distributions are close. When trained using
gradient descent on a discrete finite dataset with the loss in Eqn. 1, the discriminator D is pushed
toward D*, not D*. This behavior does not depend on the size of training set (see Fig. 1a, 1b),
implying that the original GAN is not guaranteed to converge to the target distribution even when
given enough data.
4.2	Empirical discriminators have poor generalization capability
When the generator gets better, generated samples are more similar to samples from the target dis-
tribution. However, regardless of their quality, generated samples are still labeled as fake in Eqn. 1.
The training dataset D is a bad dataset as it contains many mislabeled examples. A discriminator
trained on such dataset will overfit to the mislabeled examples and has poor generalization capabil-
ity. It will misclassify unseen samples and cannot teach the generator to generate these samples.
Figure 1a and 1b demonstrate the problem on a synthetic dataset consisting of samples from two
Gaussian distributions. The discriminator in Fig. 1a overfits to the small dataset and does not
generalize to new samples in Fig. 1b. Although the discriminator in Fig. 1b was trained on a larger
dataset which is sufficient to characterize the two distributions, it still overfits to the data and its
value surface is very different from that of the theoretically optimal discriminator in Fig. 1f.
An overfitted discriminator does not guide the model distribution toward target distribution but to-
ward the real samples in the dataset. This explains why the original GAN usually exhibits mode
collapse behavior. Finding the empirically optimal discriminator using gradient descent usually
requires many iterations. Heuristically, overfitting can be alleviated by limiting the number of dis-
criminator updates per generator update. Goodfellow et al. (2014) recommended to update the
discriminator once every generator update. In the next subsection, we show that limiting the number
of discriminator updates per generator update prevents the discriminator from overfitting.
4.2.	1	-OPTIMAL DISCRIMINATORS
D * is costly to find and maintain. We consider here a weaker notion of optimality which can be
achieved in practical settings.
4
Published as a conference paper at ICLR 2019
Definition 1 (-optimal discriminator). Given two disjoint datasets Dr andDg, anda number > 0,
a discriminator D is -optimal if
D(X)	≥ 2 + 2,∀x ∈ Dr
D(y)	≤ 1 - 2，,∀y ∈ Dg
As observed in GoodfelloW et al. (2014), D* does not generate usable gradient for the generator.
Goodfellow et al. proposed the non-saturating loss for the generator to circumvent this vanishing
gradient problem. For an ，-optimal discriminator, if ， is relatively small, then the gradient of the
discriminator W.r.t. fake datapoints might not vanish and can be used to guide the model distribution
toWard the target distribution.
Proposition 2. Given two disjoint datasets Dr and Dg, and a number ， > 0, an ，-optimal discrimi-
nator D exists and can be constructed as a one hidden layer MLP with O(dx(m + n)) parameters.
Proof. See appendix B.	□
Because deep netWorks are more poWerful than shalloW ones, the size of a deep ，-optimal discrim-
inator can be much smaller than O(dx(m + n)). From the formula, the size of a shalloW ，-optimal
discriminator for real World datasets ranges from a feW to hundreds of millions parameters. That is
comparable to the size of discriminators used in practice. Arjovsky & Bottou (2017) shoWed that
even When the generator can generate realistic samples, a discriminator that can perfectly classify
real and fake samples can be found easily using gradient descent. The experiment verified that
，-optimal discriminator can be found using gradient descent in practical settings.
We observe that the norm of the gradient W.r.t. the discriminator’s parameters decreases as fakes
samples approach real samples. If the discriminator’s learning rate is fixed, then the number of
gradient descent steps that the discriminator has to take to reach ，-optimal state should increase.
Proposition 3. Alternating gradient descent with the same learning rate for discriminator and
generator, and fixed number of discriminator updates per generator update (Fixed-Alt-GD) can-
not maintain the (empirical) optimality of the discriminator.
Fixed-Alt-GD decreases the discriminative poWer of the discriminator to improve its generalization
capability. The proof for linear case is given in appendix C.
In GANs trained With TWo Timescale Update Rule (TTUR) (Heusel et al., 2017), the ratio betWeen
the learning rate of the discriminator and that of the generator goes to infinity as the iteration number
goes to infinity. Therefore, the discriminator can learn much faster than the generator and might be
able to maintain its optimality throughout the learning process.
4.2.2 GRADIENT EXPLODING IN ，-OPTIMAL DISCRIMINATORS
Let’s consider a simplified scenario Where the real and the fake datasets each contains a single
datapoint: Dr = {x}, Dgt) = {y(t)}. Updating the generator according to the gradient from the
discriminator Will push y(t) toWard x. The absolute value of directional derivative of D in the
direction u = x - y(t), at x is
ID(X)- D(y"
∣∣χ - y 叫
, ∀t ∈ N, and
∣(VuD)χ∣ = lim
y(t) -→x
If D is alWays -optimal, then ID(X) - D(y(t))I ≥
∣(VuD)χ∣ ≥ lim
y(t) -→u x
∣∣χ — y(t)∣
The directional derivate of the ，-optimal discriminator explodes as the fake datapoint approaches the
real datapoint. Directional derivative exploding implies gradient exploding at datapoints on the line
5
Published as a conference paper at ICLR 2019
(a)	(b)	(c)	(d)
(e)	(f)	(g)	(h)	(i)
Figure 2: Gradient w.r.t. the input of the discriminator of a GAN trained with different gradient
penalties. The vector associated with a datapoint v points in the direction that increases the value
of log (D(v)) the fastest. The discriminator is a 2 hidden layer MLP with 512 hidden neurons. The
discriminator is updated once every generator update. SGD is used for optimization. (a), (b) No
GP, iter. 1000 and 10,000. (c), (d) No GP with TTUR, iter. 1,000 and 10,000. (e) Our 0-GP with
λ = 10, iter. 10,000. (f), (g) Our 0-GP with TTUR and λ = 10, iter. 10,000 and 20,000. (h) 1-GP
with λ = 10, iter. 10,000. (i) 0-GP-sample with λ = 10, iter. 10,000.
segment connecting x and y(t). If in the next iteration, the generator produces a sample in a region
where the gradient explodes, then the gradient w.r.t. the generator’s parameters explodes.
Let’s consider the following line integral
/(VD)v∙ ds = D(X)- D(y⑴)
(4)
where C is the line segment from y(t) to x. As the model distribution gets closer to the target
distribution, the length of C should be non increasing. Therefore, maximizing D(x) - D(y(t)), or
the discriminative power ofD , leads to the maximization of the directional derivative ofD in the
direction ds. The original GAN loss makes D to maximize its discriminative power, encouraging
gradient exploding to occur.
Gradient exploding happens in the discriminator trained with TTUR in Fig. 2c and 2d. Because
TTUR can help the discriminator to maintain its optimality, gradient exploding happens and persists
throughout the training process. Without TTUR, the discriminator cannot maintain its optimality so
gradient exploding can happen sometimes during the training but does not persist (Fig. 2a and 2b).
Because of the saturated regions in the sigmoid function used in neural network based discrimina-
tors, the gradient w.r.t. datapoints in the training set could vanishes. However, gradient exploding
must happen at some datapoints on the path between a pair of samples, where the sigmoid function
does not saturate. In Fig. 1a, gradient exploding happens near the decision boundary.
In practice, Dr and Dg contain many datapoints and the generator is updated using the average of
gradients of the discriminator w.r.t. fake datapoints in the mini-batch. If a fake datapoint y0 is very
close to a real datapoint x0, the gradient (VD)y0 might explode. When the average gradient is
computed over the mini-batch, (VD)y0 outweighs other gradients. The generator updated with this
average gradient will move many fake datapoints in the direction of (VD )y0, toward x0, making
mode collapse visible.
6
Published as a conference paper at ICLR 2019
5 Improving generalization capability of empirical
DISCRIMINATORS
Although the theoretically optimal discriminator D* is generalizable, the original GAN loss does
not push empirical discriminators toward D*. We aim to improve the generalization capability of
empirical discriminators by pushing them toward D*.
5.1	PUSHING EMPIRICAL DISCRIMINATORS TOWARD D*
For any input V ∈ Supp(Pr) ∪ Supp(Pg), the value of D*(v) goes to 1 and the gradient (VD)v
goes to 0 as pg approaches pr. Consider again the line integral in Eqn. 4. As D* (x) and D* (y)
approach 2 for all X ∈ Supp(Pr) and y ∈ Supp(Pg), We have
D*(x) -
D*(y) =
(VD*)v ∙ ds → 0
(5)
for all pairs of x and y and all paths C from y to x. That means, the discriminative power of D*
must decrease as the two distributions become more similar.
To push an empirical discriminator D toward D*, we force D to satisfy two requirements:
1.	(VD)v → 0, ∀ v ∈ Supp(pr) ∪ Supp(pg)
2.	D(x) 一 D(y) = JC (VD)V ∙ ds → 0, ∀ x 〜pr, y 〜pg, C from y to X
5.2	Zero-centered gradient penalty
The first requirement can be implemented by sampling some datapoints v ∈ Supp(pr) ∪ Supp(pg)
and force (VD)v to be 0. The second requirement can be implemented by sampling pairs of real
and fake datapoints (X, y) and force D(X) 一 D(y) to be 0. The two requirements can be added to
the discriminator’s objective as follows
L = L-λιEv[k(VD)vk2] — λ2Eχ,y[(D(x) - D(y))2]
where L is the objective in Eqn. 1. However, as discussed in section 4.2.2, an -optimal discriminator
can have zero gradient on the training dataset and have gradient exploding outside of the training
dataset. The gradient norm could go to infinity even when D(X) - D(y) is small. Regulating the
difference between D(X) and D(y) is not an efficient way to prevent gradient exploding.
We want to prevent gradient exploding on every path in Supp(pr) ∪ Supp(pg). Because (VD*)v →
0 for all v ∈ Supp(pr) ∪ Supp(pg) as pg approach pr, we could push the gradient w.r.t. every
datapoint on every path C ∈ Supp(pr) ∪ Supp(pg) toward 0. We note that, if (VD)v → 0, ∀ v ∈ C
then JC (VD)v ∙ ds → 0. Therefore, the two requirements can be enforced by a single zero-centered
gradient penalty of the form
λEv∈C[k(VD)vk2]
The remaining problem is how to find the path C from a fake to a real sample which lies inside
Supp(pr) ∪ Supp(pg). Because we do not have access to the full supports ofpr and pg, and the
supports of two distributions could be disjoint in the beginning of the training process, finding a path
which lies completely inside the support is infeasible.
In the current implementation, we approximate C with the straight line connecting a pair of samples,
although there is no guarantee that all datapoints on that straight line are in Supp(pr) ∪ Supp(pg).
That results in the following objective
Lo-gp = L-λEχ [k(VD)χ k2]	⑹
where X = αx +(1 - α)y, X 〜p, y 〜pg, and α 〜U(0,1) 1. We describe a more sophisticated
way of finding a better path in appendix F.
1Wu et al. (2018) independently proposed the Wasserstein divergence for WGAN which uses a gradient
penalty of similar form. Although the two penalties have similar approximate form, they have different moti-
vations and addresses different problems in GANs.
7
Published as a conference paper at ICLR 2019
The larger λ is, the stronger (VD)χ is pushed toward 0. If λ is 0, then the discriminator will only
focus on maximizing its discriminative power. If λ approaches infinity, then the discriminator has
maximum generalization capability and no discriminative power. λ controls the tradeoff between
discrimination and generalization in the discriminator.
5.3	Generalization capability of different gradient penalties
Mescheder et al. (2018) proposed to force the gradient w.r.t. datapoints in the real and/or fake
dataset(s) to be 0 to make the training of GANs convergent. In section 4, we showed that for dis-
crete training dataset, an empirically optimal discriminator D * always exists and could be found
by gradient descent. Although (VD*)v = 0, ∀ v ∈ D, D* does not satisfy the requirement in
Eqn. 5 and have gradient exploding when some fake datapoints approach a real datapoint. The
discriminators in Fig. 1a, 1b, 1d, 2c and 2d have vanishingly small gradients on datapoints in the
training dataset and very large gradients outside. They have poor generalization capability and can-
not teach the generator to generate unseen real datapoints. Therefore, zero-centered gradient penalty
on samples from pr and pg only cannot help improving the generalization of the discriminator.
Non-zero centered GPs do not push an empirical discriminator toward D* because the gradient
does not converge to 0. A commonly used non-zero centered GP is the one-centered GP (1-GP)
(Gulrajani et al., 2017) which has the following form
λEχ[(k(VD)χk - 1)2]	⑺
where X = αx +(1 一 α)y, x 〜Pr, y 〜Pg, and α 〜U (0,1). Although the initial goal of 1-GP was
to enforce Lipschitz constraint on the discriminator 2, Fedus et al. (2018) found that 1-GP prevents
gradient exploding, making the original GAN more stable. 1-GP forces the norm of gradients w.r.t.
datapoints on the line segment connecting x and y to be 1. If all gradients on the line segment have
norm 1, then the line integral in Eqn. 4 could be as large as kx - yk. Because the distance between
random samples grows with the dimensionality, in high dimensional space kx - y k is greater than
1 with high probability. The discriminator could maximize the value of the line integral without
violating the Lipschitz constraint. The discriminator trained with 1-GP, therefore, can overfit to the
training data and have poor generalization capability.
5.4	Convergence analysis for zero-centered gradient penalty
Mescheder et al. (2018) showed that zero-centered GP on real and/or fake samples (0-GP-sample)
makes GANs convergent. The penalty is based on the convergence analysis for the Dirac GAN, an
1-dimensional linear GAN which learns the Dirac distribution. The intuition is that when Pg is the
sameasPr, the gradient of the discriminator w.r.t. the fake datapoints (which are also real datapoints)
should be 0 so that generator will not move away when being updated using this gradient. If the
gradient from the discriminator is not 0, then the generator will oscillate around the equilibrium.
Our GP forces the gradient w.r.t. all datapoints on the line segment between a pair of samples (in-
cluding the two endpoints) to be 0. As a result, our GP also prevents the generator from oscillating.
Therefore, our GP has the same convergence guarantee as the 0-GP-sample.
5.5	Zero-centered gradient penalty improves capacity distribution
Discriminators trained with the original GAN loss tends to focus on the region of the where fake
samples are close to real samples, ignoring other regions. The phenomenon can be seen in Fig. 2a,
2b, 2c, 2d, 2h and 2i. Gradients in the region where fake samples are concentrated are large while
gradients in other regions, including regions where real samples are located, are very small. The
generator cannot discover and generate real datapoints in regions where the gradient vanishes.
When trained with the objective in Eqn. 6, the discriminator will have to balance between
maximizing L and minimizing the GP. For finite λ, the GP term will not be exactly 0. Let
Y = λEχ[k(VD)χ∣∣2]. Among discriminators with the same value of γ, gradient descent will
find the discriminator that maximizes L. As discussed in section 4.2.2, maximizing L leads to the
2Petzka et al. (2018) pointed out that 1-GP is based on the wrong intuition that the gradient of the optimal
critic must be 1 everywhere under pr and pg . The corrected GP is based on the definition of Lipschitzness.
8
Published as a conference paper at ICLR 2019
maximization of norms of gradients on the path from y to x. The discriminator should maximize
the value η = Ex [k(VD)χ ∣∣]. If Y is fixed then η is maximized when ∣∣VDa⅛(i) ∣∣ = ∣∣VDχ(j) ∣∣, ∀ i,j
(Cauchy-Schwarz inequality). Therefore, our zero-centered GP encourages the gradients at different
regions of the real data space to have the same norm. The capacity of D is distributed more equally
between regions of the real data space, effectively reduce mode collapse. The effect can be seen in
Fig. 2e and 2f.
1-GP encourages |||VDx(i)∣∣ 一 1| = |||VDx(j)∣∣ 一 1|,∀ i,j. That allows gradient norms to be
smaller than 1 in some regions and larger than 1 in some other regions. The problem can be seen in
Fig. 2h.
6	Experiments
The code is made available at	https://github.com/htt210/
GeneralizationAndStabilityInGANs.
6.1	Zero-centered gradient penalty prevents overfitting
To test the effectiveness of gradient penalties in preventing overfitting, we designed a dataset with
real and fake samples coming from two Gaussian distributions and trained a MLP based discrimi-
nator on that dataset. The result is shown in Fig. 1. As predicted in section 5.3, 0-GP-sample does
not help to improve generalization. 1-GP helps to improve generalization. The value surface in Fig.
1c is smoother than that in Fig. 1a. However, as discussed in section 5.3, 1-GP cannot help much
in higher dimensional space where the pair-wise distances are large. The discriminator trained with
our 0-GP has the best generalization capability, with a value surface which is the most similar to that
of the theoretically optimal one.
We increased the number of discriminator updates per generator update to 5 to see the effect of GPs
in preventing overfitting. On the MNIST dataset, GAN without GP and with other GPs cannot learn
anything after 10,000 iterations. GAN with our 0-GP can still learn normally and start produce rec-
ognizable digits after only 1,000 iterations. The result confirms that our GP is effective in preventing
overfitting in the discriminator.
6.2	Zero-centered gradient penalty improves generalization and robustness
OF GANS
Synthetic data
We tested different gradient penalties on a number of synthetic datasets to compare their effective-
ness. The first dataset is a mixture of 8 Gaussians. The dataset is scaled up by a factor of 10 to
simulate the situation in high dimensional space where random samples are far from each other.
The result is shown in Fig. 2. GANs with other gradient penalties all fail to learn the distribu-
tion and exhibit mode collapse problem to different extents. GAN with our 0-GP (GAN-0-GP) can
successfully learn the distribution. Furthermore, GAN-0-GP can generate datapoints on the circle,
demonstrating good generalization capability. The original GAN collapses to some disconnected
modes and cannot perform smooth interpolation between modes: small change in the input result in
large, unpredictable change in the output. GAN with zero-centered GP on real/fake samples only
also exhibits the same ”mode jumping” behavior. The behavior suggests that these GANs tend to
remember the training dataset and have poor generalization capability. Fig. 9 in appendix D demon-
strates the problem on MNIST dataset.
We observe that GAN-0-GP behaves similar to Wasserstein GAN as it first learns the overall struc-
ture of the distribution and then focuses on the modes. An evolution sequence of GAN-0-GP is
shown in Fig. 5 in appendix D. Results on other synthetic datasets are shown in appendix D.
MNIST dataset
The result on MNIST dataset is shown in Fig. 3. After 1,000 iterations, all other GANs exhibit
mode collapse or cannot learn anything. GAN-0-GP is robust to changes in hyper parameters such
9
Published as a conference paper at ICLR 2019
(a)	(b)
(c)
(d)	(e)
Figure 3: Result on MNIST. The networks have the same architectures with networks used in syn-
thetic experiment. Batch normalization (Ioffe & Szegedy, 2015) was not used. Adam optimizer
(Kingma & Ba, 2014) with β1 = 0.5, β2 = 0.9 was used. (a) No GP, iter. 1,000. (b) 0-GP-sample,
λ = 100, iter. 1,000. (c) 1-GP, λ = 100, iter. 1,000. (d), (e) 0-GP, λ = 100, iter. 1,000 and 10,000.
Generator iteration
Figure 4: Inception score (Salimans et al., 2016) on ImageNet of GAN-0-GP, GAN-0-GP-sample,
and WGAN-GP. The code for this experiment is adapted from Mescheder et al. (2018). We used
λ = 10 for all GANs as recommended by Mescheder et al. The critic in WGAN-GP was updated 5
times per generator update. To improve convergence, we used TTUR with learning rates of 0.0001
and 0.0003 for the generator and discriminator, respectively.
as learning rate and optimizers. When Adam is initialized with large β1 , e.g. 0.9, GANs with other
GPs cannot learn anything after many iterations. More samples are given in appendix D.
We observe that higher value of λ improves the diversity of generated samples. For λ = 50, we
observe some similar looking samples in the generated data. This is consistent with our conjecture
that larger λ leads to better generalization.
ImageNet
When trained on ImangeNet (Deng et al., 2009), GAN-0-GP can produce high quality samples from
all 1,000 classes. We compared our method with GAN with 0-GP-sample and WGAN-GP. GAN-0-
GP-sample is able to produce samples of state of the art quality without using progressive growing
trick (Karras et al., 2018). The result in Fig. 4 shows that our method consistently outperforms
GAN-0-GP-sample. GAN-0-GP and GAN-0-GP-sample outperform WGAN-GP by a large margin.
Image samples are given in appendix D.
7	Conclusion
In this paper, we clarify the reason behind the poor generalization capability of GAN. We show that
the original GAN loss does not guide the discriminator and the generator toward a generalizable
equilibrium. We propose a zero-centered gradient penalty which pushes empirical discriminators
toward the optimal discriminator with good generalization capability. Our gradient penalty pro-
vides better generalization and convergence guarantee than other gradient penalties. Experiments
on diverse datasets verify that our method significantly improves the generalization and stability of
GANs.
10
Published as a conference paper at ICLR 2019
References
M. Arjovsky and L. Bottou. Towards Principled Methods for Training Generative Adversarial Net-
works. ArXiv e-prints, January 2017.
Martin Arjovsky, SoUmith Chintala, and Leon Bottou. Wasserstein generative adversarial networks.
In Doina Precup and Yee Whye Teh (eds.), Proceedings of the 34th International Conference
on Machine Learning, volume 70 of Proceedings of Machine Learning Research, pp. 214-223,
International Convention Centre, Sydney, Australia, 06-11 Aug 2017. PMLR.
Sanjeev Arora, Rong Ge, Yingyu Liang, Tengyu Ma, and Yi Zhang. Generalization and equilibrium
in generative adversarial nets (GANs). In Doina Precup and Yee Whye Teh (eds.), Proceedings of
the 34th International Conference on Machine Learning, volume 70 of Proceedings of Machine
Learning Research, pp. 224-232, International Convention Centre, Sydney, Australia, 06-11 Aug
2017. PMLR.
Sanjeev Arora, Andrej Risteski, and Yi Zhang. Do GANs learn the distribution? some theory and
empirics. In International Conference on Learning Representations, 2018.
J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei. ImageNet: A Large-Scale Hierarchical
Image Database. In CVPR09, 2009.
William Fedus, Mihaela Rosca, Balaji Lakshminarayanan, Andrew M. Dai, Shakir Mohamed, and
Ian Goodfellow. Many paths to equilibrium: GANs do not need to decrease a divergence at every
step. In International Conference on Learning Representations, 2018.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,
Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Z. Ghahramani, M. Welling,
C. Cortes, N. D. Lawrence, and K. Q. Weinberger (eds.), Advances in Neural Information Pro-
cessing Systems 27, pp. 2672-2680. Curran Associates, Inc., 2014.
Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron C Courville. Im-
proved training of wasserstein gans. In I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus,
S. Vishwanathan, and R. Garnett (eds.), Advances in Neural Information Processing Systems 30,
pp. 5767-5777. Curran Associates, Inc., 2017.
Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochreiter.
Gans trained by a two time-scale update rule converge to a local nash equilibrium. In I. Guyon,
U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett (eds.), Ad-
vances in Neural Information Processing Systems 30, pp. 6626-6637. Curran Associates, Inc.,
2017.
Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by
reducing internal covariate shift. In Francis Bach and David Blei (eds.), Proceedings of the 32nd
International Conference on Machine Learning, volume 37 of Proceedings of Machine Learning
Research, pp. 448-456, Lille, France, 07-09 Jul 2015. PMLR.
Tero Karras, Timo Aila, Samuli Laine, and Jaakko Lehtinen. Progressive growing of GANs for im-
proved quality, stability, and variation. In International Conference on Learning Representations,
2018.
Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. CoRR,
abs/1412.6980, 2014.
Thomas Lucas, Corentin Tallec, Yann Ollivier, and Jakob Verbeek. Mixed batches and symmet-
ric discriminators for GAN training. In Jennifer Dy and Andreas Krause (eds.), Proceedings of
the 35th International Conference on Machine Learning, volume 80 of Proceedings of Machine
Learning Research, pp. 2844-2853, Stockholmsmssan, Stockholm Sweden, 10-15 Jul 2018.
PMLR.
Lars Mescheder, Andreas Geiger, and Sebastian Nowozin. Which training methods for GANs do ac-
tually converge? In Jennifer Dy and Andreas Krause (eds.), Proceedings of the 35th International
Conference on Machine Learning, volume 80 of Proceedings of Machine Learning Research, pp.
3478-3487, Stockholmsmssan, Stockholm Sweden, 10-15 Jul 2018. PMLR.
11
Published as a conference paper at ICLR 2019
Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normalization
for generative adversarial networks. In International Conference on Learning Representations,
2018.
Youssef Mroueh and Tom Sercu. Fisher gan. In I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach,
R. Fergus, S. Vishwanathan, and R. Garnett (eds.), Advances in Neural Information Processing
Systems 30, pp. 2513-2523. Curran Associates, Inc., 2017.
Youssef Mroueh, Chun-Liang Li, Tom Sercu, Anant Raj, and Yu Cheng. Sobolev GAN. In Interna-
tional Conference on Learning Representations, 2018.
Vaishnavh Nagarajan and J. Zico Kolter. Gradient descent gan optimization is locally stable. In
I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett
(eds.), Advances in Neural Information Processing Systems 30, pp. 5585-5595. Curran Asso-
ciates, Inc., 2017.
Adam Paszke, Sam Gross, Soumith Chintala, Gregory Chanan, Edward Yang, Zachary DeVito,
Zeming Lin, Alban Desmaison, Luca Antiga, and Adam Lerer. Automatic differentiation in
pytorch. 2017.
Henning Petzka, Asja Fischer, and Denis Lukovnikov. On the regularization of wasserstein GANs.
In International Conference on Learning Representations, 2018.
G.-J. Qi. Loss-Sensitive Generative Adversarial Networks on Lipschitz Densities. ArXiv e-prints,
January 2017.
Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with deep
convolutional generative adversarial networks. CoRR, abs/1511.06434, 2015.
Kevin Roth, Aurelien Lucchi, Sebastian Nowozin, and Thomas Hofmann. Stabilizing training of
generative adversarial networks through regularization. In I. Guyon, U. V. Luxburg, S. Bengio,
H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett (eds.), Advances in Neural Information
Processing Systems 30, pp. 2018-2028. Curran Associates, Inc., 2017.
Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, Xi Chen, and
Xi Chen. Improved techniques for training gans. In D. D. Lee, M. Sugiyama, U. V. Luxburg,
I. Guyon, and R. Garnett (eds.), Advances in Neural Information Processing Systems 29, pp.
2234-2242. Curran Associates, Inc., 2016.
Akash Srivastava, Lazar Valkoz, Chris Russell, Michael U. Gutmann, and Charles Sutton. Veegan:
Reducing mode collapse in gans using implicit variational learning. In I. Guyon, U. V. Luxburg,
S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett (eds.), Advances in Neural
Information Processing Systems 30, pp. 3308-3318. Curran Associates, Inc., 2017.
Jiqing Wu, Zhiwu Huang, Janine Thoma, Dinesh Acharya, and Luc Van Gool. Wasserstein diver-
gence for gans. In Vittorio Ferrari, Martial Hebert, Cristian Sminchisescu, and Yair Weiss (eds.),
Computer Vision - ECCV 2018, pp. 673-688, Cham, 2018. Springer International Publishing.
ISBN 978-3-030-01228-1.
Pengchuan Zhang, Qiang Liu, Dengyong Zhou, Tao Xu, and Xiaodong He. On the discrimination-
generalization tradeoff in GANs. In International Conference on Learning Representations, 2018.
A	Proof for Proposition 1
For continuous random variable V , P(V = v) = 0 for any v. The probability of finding a noise
vector z such that G(z) is exactly equal to a real datapoint x ∈ Dr via random sampling is 0.
Therefore, the probability of a real datapoint xi being in the fake dataset Dg is 0. Similarly, the
probability of any fake datapoint being in the real dataset is 0.
P(x ∈ Dg(t) ) = 0, ∀x ∈ Dr , t ∈ N
P(y ∈ Dr) = 0,∀y ∈ Dg(t), t ∈ N
P(Dr ∩ Dgt) = 0) = 1, ∀t ∈ N	(8)
12
Published as a conference paper at ICLR 2019
Furthermore, due to the curse of dimensionality, the probability of sampling a datapoint which is
close to another datapoint in high dimensional space also decrease exponentially. The distances
between datapoints are larger in higher dimensional space. That suggests that it is easier to separate
Dr and Dg(t) in higher dimensional space.
B CONSTRUCTING - OPTIMAL DISCRIMINATORS
To make the construction process simpler, let’s assume that samples are normalized:
kxik = kyjk = 1, ∀xi ∈ Dr,yj ∈ Dg
Let’s use the following new notations for real and fake samples:
D = Dr ∪ Dg = {v1, ...,vm+n}
xi, for i = 1, ..., n
yi-n, for i = n + 1, ..., n + m
We construct the -optimal discriminator D as a MLP with 1 hidden layer. Let W1 ∈ R(m+n)×dx
and W2 ∈ Rm+n be the weight matrices of D. The total number of parameters in D is dx (m +
n) + (m + n) = O(dx(m + n)). We set the value of W1 as
>
v1>
Wi	= k .
.
v>
n+m
and W2 as
1
2 + 2 + α, for i
1
————α, for i
1,..., n
n+ 1,...,n+m
0
Given an input v ∈ D, the output is computed as:
D(v) = W2>σ(W1v)
where σ is the softmax function. Let a = W1 v , we have
ai = kvi>v
k,
< k,
if v = vi
if v 6= vi
As k → ∞, σ(W1vi) becomes a one-hot vector with the i-th element being 1, all other elements
being 0. Thus, for large enough k, for any vj ∈ D, the output of the network is
D(vj) = W2>σ(W1vj) ≈ W2,j
D is a -optimal discriminator for dataset D.
e-2-2
+—
1-21-2
><
1,..., n
n+1,...,n+m
C Fixed - Alt- GD cannot maintain the optimality of
-DISCRIMINATORS
Let’s consider the case where the real and the fake dataset each contain a single datapoint Dr = {x},
Dg(t) = y(t), and the discriminator and the generator are linear:
D(v)	=	θD>v
G(z)	=	θGz
13
Published as a conference paper at ICLR 2019
and the objective is also linear (Wasserstein GAN’s objective):
LW = Ex∈Dr [D(x)] - Ey∈D(gt) [D(y)]
= D(x) - D(y(t))
The same learning rate α is used for D and G.
At step t, the discriminator is -optimal
D(x) -	D(y(t))	= θD> x - y(t) ≥	(9)
	kθDk	≥			(10)
		_	∣∣x - y(t)∣∣	
The gradients w.r.t. θD and θG are	∂L --= ∂ Θd	x - y(t)	(11)
	∂L	∂L	>	
	——= ∂ Θg	=可XZ θD × z>	(12)
If the learning rate α is small enough, x - y(t) should decrease as t increases. As the empirical
fake distribution converges to the empirical real distribution, x - y(t) → 0. The norm of gradient
w.r.t. θD, therefore, decreases as t increases and vanishes when the two empirical distributions are
the same. From Eqn. 10, we see that, in order to maintain D’s -optimality when x - y(t)
decreases, kθDk has to increase. From Eqn. 10 and 12, we see that the gradient w.r.t. θG grows as
the two empirical distributions are more similar. As x - y(t) → 0,
∂Lw
∂Θd
∂Lw
^∂θG
→0
(13)
Because the same learning rate α is used for both G and D, G will learn much faster than D .
Furthermore, because x - y(t) decreases as t increases, the difference
I I	i-Γ	Vi	i-i-
∣∣χ - y(t+1)∣∣	∣∣χ - y(t)∣∣
increases with t. The number of gradient steps that D has to take to reach the next -optimal state
increases, and goes to infinity as ∣x - y(t) ∣ → 0. Therefore, gradient descent with fixed number
of updates to θD cannot maintain the optimality of D.
The derivation for the objective in Eqn. 1 is similar.
D Results on different datasets
(a) Iter. 0
(b) Iter. 1,000
(c) Iter. 2,000	(d) Iter. 5,000	(e) Iter. 20,000
Figure 5:	Evolution of GAN-0-GP with λ = 100 on 8 Gaussians dataset.
14
Published as a conference paper at ICLR 2019
(a) GAN-0-GP
(b) GAN-1-GP
Figure 6:	GANs trained with different gradient penalty on swissroll dataset. Although GAN-1-GP
is able to learn the distribution, the gradient field has bad pattern. GAN-1-GP is more sensitive to
change in hyper parameters and optimizers. GAN-1-GP fails to learn the scaled up version of the
distribution.
(a)
7 slthsoa，
J^BΓ⅛Q 雷 4
7j‰>3 夕3'.9a.
M / 1 g⅛7Q 7
7 5 ⅛ O* ʃ QC
4g,e∙r∙③ 4>1s
FG *F>7S4.7
14rε∙7^74cs*
(c)
2 I £ ? 7 .今？，
5 3 5 4 i U, 9 5
¾ 0 56-7/8 1
"/ 夕 QerQ 7 /
T3^7^f4/
一5941J呼第，
qg6 q8J0g
D 0 f 719 3 0
(b)
(d)
Figure 7:	Result on MNIST. Adam was initialized with β1 = 0.5, β2 = 0.9. (a) No GP, iteration
10,000. (b) Zero-centered GP on real samples only with λ = 100, iteration 10,000. (c) One-centered
GP with λ = 100, iteration 10,000. (d) Our zero-centered GP with λ = 100, iteration 10,000.
(a)	(b)
Figure 8:	Result on MNIST. Adam was initialized with β1 = 0.9, β2 = 0.99. (a) Zero-centered
GP on real samples only with λ = 100, iteration 10,000. (b) Our zero-centered GP with λ = 100,
iteration 10,000.
4
7
7夕,
ɪɪz
7<ΓZ
7r Z
夕
7 17
(a)
3333333333333333
SSt99999999yyyy,/
(b)
小
7
Figure 9:	Linear latent space interpolation between two random samples. (a) GAN with 0-GP-
sample cannot perform smooth interpolation between modes. Small changes in input latent variable
result in big difference in the output (red boxes). The result suggest that 0-GP-sample makes GANs
to remember the training dataset and do not generalize to the region between samples in the training
dataset. (b) GAN with our 0-GP can perform smooth interpolation between modes. The behavior
implies that GANs with our 0-GP have better generalization.
15
Published as a conference paper at ICLR 2019
(a) All categories
(b) Welsh springer spaniel
Figure 10: Samples from GAN-0-GP trained on ImageNet.
16
Published as a conference paper at ICLR 2019
E Implementation details
We used Pytorch (Paszke et al., 2017) for development.
E.1 Synthetic and MNIST datasets
Generator architecture in synthetic and MNIST experiments
Fully connected layer 2 X nhidden
J
ReLU
J
Fully connected layer nhidden × nhidden
J
ReLU
J
Fully connected layer nhidden × nhidden
J
Fully connected layer nhidden × 2
Discriminator architecture in synthetic and MNIST experiments
Fully connected layer 2 × nhidden
J
ReLU
J
Fully connected layer nhidden × nhidden
J
ReLU
J
Fully connected layer nhidden × nhidden
J
Fully connected layer nhidden × 1
J
Sigmoid
Hyper parameters for synthetic and MNIST experiments
Learning rate	0.003 for both G and D
Learning rate TTUR-	0.003 for G, 0.009 for D
E.2 ImageNet
The entire ImageNet dataset with all 1000 classes was used in the experiment. Because of our hard-
ware limits, we used images of size 64 × 64. We used the code from Mescheder et al. (2018), avail-
able at https://github.com/LMescheder/GAN_stability, for our experiment. Gener-
ator and Discriminator are ResNets, each contains 5 residual blocks. All GANs in our experiment
have the same architectures and hyper parameters. The configuration for WGAN-GP5 is as follows.
generator:
name: resnet2
kwargs:
nfilter: 32
nfilter_max: 512
embed_size: 128
discriminator:
name: resnet2
kwargs:
17
Published as a conference paper at ICLR 2019
nfilter: 32
nfilter_max: 512
embed_size: 128
z_dist:
type: gauss
dim: 128
training:
out_dir: ../output/imagenet_wgangp5_TTUR
gan_type: wgan
reg_type: wgangp
reg_param: 10.
batch_size: 64
nworkers: 32
take_model_average: true
model_average_beta: 0.999
model_average_reinit: false
monitoring: tensorboard
sample_every: 1000
sample_nlabels: 20
inception_every: 10000
save_every: 900
backup_every: 100000
restart_every: -1
optimizer: adam
lr_g: 0.0001
lr_d: 0.0003
lr_anneal: 1.
lr_anneal_every: 150000
d_steps: 5
equalize_lr: false
F Finding a better path between a pair of samples
Because the set of real data is unlikely to be convex, a linear interpolation between two datapoints
is unlikely to be in the set. For example, the weighted average of two real images is often not a real
image. If the generator is good enough then its output is likely to be on the real data manifold. A
path C from y to x can be found by transforming the straight line between the two corresponding
latent codes, to the data space using the generator G. To get the latent code of real datapoints, we
use an encoder E which is trained to map real data to normally distributed latent codes. The pseudo
code of the path finding algorithm is shown in Alg. 1.
Data: an encoder E; a pair of samples x, y = G(z);
Result: interpolated datapoint X
1	Get the latent code of x: zx = E(x)
2	Calculate the interpolated latent code: Z = αzχ + (1 - α)z
3	Generate the interpolated datapoint: X = G(Z)
Algorithm 1: Path finding algorithm
18