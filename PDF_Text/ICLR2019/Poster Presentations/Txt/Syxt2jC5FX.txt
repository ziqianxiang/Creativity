Published as a conference paper at ICLR 2019
From Hard to Soft: Understanding Deep
Network Nonlinearities via Vector
Quantization and Statistical Inference
Randall Balestriero & Richard G. Baraniuk
Department of Electrical and Computer Engineering
Rice University
Houston, TX 77005, USA
randallbalestriero@gmail.com
Ab stract
Nonlinearity is crucial to the performance of a deep (neural) network (DN). To
date there has been little progress understanding the menagerie of available non-
linearities, but recently progress has been made on understanding the rθle played
by piecewise affine and convex nonlinearities like the ReLU and absolute value
activation functions and max-pooling. In particular, DN layers constructed from
these operations can be interpreted as max-affine spline operators (MASOs) that
have an elegant link to vector quantization (VQ) and K-means. While this is good
theoretical progress, the entire MASO approach is predicated on the requirement
that the nonlinearities be piecewise affine and convex, which precludes important
activation functions like the sigmoid, hyperbolic tangent, and softmax. This pa-
per extends the MASO framework to these and an infinitely large class of new
nonlinearities by linking deterministic MASOs with probabilistic Gaussian Mix-
ture Models (GMMs). We show that, under a GMM, piecewise affine, convex
nonlinearities like ReLU, absolute value, and max-pooling can be interpreted as
solutions to certain natural “hard” VQ inference problems, while sigmoid, hyper-
bolic tangent, and softmax can be interpreted as solutions to corresponding “soft”
VQ inference problems. We further extend the framework by hybridizing the hard
and soft VQ optimizations to create a β-VQ inference that interpolates between
hard, soft, and linear VQ inference. A prime example of a β-VQ DN nonlinearity
is the swish nonlinearity, which offers state-of-the-art performance in a range of
computer vision tasks but was developed ad hoc by experimentation. Finally, we
validate with experiments an important assertion of our theory, namely that DN
performance can be significantly improved by enforcing orthogonality in its linear
filters.
1	Introduction
Deep (neural) networks (DNs) have recently come to the fore in a wide range of machine learning
tasks, from regression to classification and beyond. A DN is typically constructed by composing
a large number of linear/affine transformations interspersed with up/down-sampling operations and
simple scalar nonlinearities such as the ReLU, absolute value, sigmoid, hyperbolic tangent, etc.
Goodfellow et al. (2016). Scalar nonlinearities are crucial to a DN’s performance. Indeed, without
nonlinearity, the entire network would collapse to a simple affine transformation. But to date there
has been little progress understanding and unifying the menagerie of nonlinearities, with few reasons
to choose one over another other than intuition or experimentation.
Recently, progress has been made on understanding the rθle played by piecewise affine and Con-
vex nonlinearities like the ReLU, leaky ReLU, and absolute value activations and downsampling
operations like max-, average-, and channel-pooling Balestriero & Baraniuk (2018a;b). In particu-
lar, these operations can be interpreted as max-affine spline operators (MASOs) Magnani & Boyd
(2009); Hannah & Dunson (2013) that enable a DN to find a locally optimized piecewise affine
approximation to the prediction operator given training data. A spline-based prediction is made in
1
Published as a conference paper at ICLR 2019
two steps. First, given an input signal x, we determine which region of the spline’s partition of the
domain (the input signal space) it falls into. Second, we apply to x the fixed (in this case affine)
function that is assigned to that partition region to obtain the prediction yb = f (x).
The key result of Balestriero & Baraniuk (2018a;b) is any DN layer constructed from a combina-
tion of linear and piecewise affine and convex is a MASO, and hence the entire DN is merely a
composition of MASOs.
MASOs have the attractive property that their partition of the signal space (the collection of multi-
dimensional “knots”) is completely determined by their affine parameters (slopes and offsets). This
provides an elegant link to vector quantization (VQ) and K-means clustering. That is, during learn-
ing, a DN implicitly constructs a hierarchical VQ of the training data that is then used for spline-
based prediction.
This is good progress for DNs based on ReLU, absolute value, and max-pooling, but what about DNs
based on classical, high-performing nonlinearities that are neither piecewise affine nor convex like
the sigmoid, hyperbolic tangent, and softmax or fresh nonlinearities like the swish Ramachandran
et al. (2017) that has been shown to outperform others on a range of tasks?
Contributions. In this paper, we address this gap in the DN theory by developing a new frame-
work that unifies a wide range of DN nonlinearities and inspires and supports the development of
new ones. The key idea is to leverage the yinyang relationship between deterministic VQ/K -means
and probabilistic Gaussian Mixture Models (GMMs) Biernacki et al. (2000). Under a GMM, piece-
wise affine, convex nonlinearities like ReLU and absolute value can be interpreted as solutions to
certain natural hard inference problems, while sigmoid and hyperbolic tangent can be interpreted
as solutions to corresponding soft inference problems. We summarize our primary contributions as
follows:
ContribUtion 1: We leverage the well-understood relationship between VQ, K -means, and GMMs
to propose the Soft MASO (SMASO)model, a probabilistic GMM that extends the concept of a
deterministic MASO DN layer. Under the SMASO model, hard maximum a posteriori (MAP)
inference of the VQ parameters corresponds to conventional deterministic MASO DN operations
that involve piecewise affine and convex functions, such as fully connected and convolution matrix
multiplication; ReLU, leaky-ReLU, and absolute value activation; and max-, average-, and channel-
pooling. These operations assign the layer’s input signal (feature map) to the VQ partition region
corresponding to the closest centroid in terms of the Euclidean distance,
ContribUtion 2: A hard VQ inference contains no information regarding the confidence of the VQ
region selection, which is related to the distance from the input signal to the region boundary. In
response, we develop a method for soft MAP inference of the VQ parameters based on the probability
that the layer input belongs to a given VQ region. Switching from hard to soft VQ inference recovers
several classical and powerful nonlinearities and provides an avenue to derive completely new ones.
We illustrate by showing that the soft versions of ReLU and max-pooling are the sigmoid gated linear
unit and softmax pooling, respectively. We also find a home for the sigmoid, hyperbolic tangent, and
softmax in the framework as a new kind ofDN layer where the MASO output is the VQ probability.
ContribUtion 3: We generalize hard and soft VQ to what We call β-VQ inference, where β ∈ (0,1)
is a free and learnable parameter. This parameter interpolates the VQ from linear (β → 0), to
probabilistic SMASO (β = 0.5), to deterministic MASO (β → 1). We show that the β-VQ version
of the hard ReLU activation is the swish nonlinearity, which offers state-of-the-art performance in a
range of computer vision tasks but was developed ad hoc through experimentation Ramachandran
et al. (2017).
ContribUtion 4: Seen through the MASO lens, current DNS solve a simplistic per-unit (per-neuron),
independent VQ optimization problem at each layer. In response, We extend the SMASO GMM to
a factorial GMM that that supports jointly optimal VQ across all units in a layer. Since the factorial
aspect of the new model would make naive VQ inference exponentially computationally complex,
we develop a simple sufficient condition under which a we can achieve efficient, tractable, jointly op-
timal VQ inference. The condition is that the linear “filters” feeding into any nonlinearity should be
orthogonal. We propose two simple strategies to learn approximately and truly orthogonal weights
and show on three different datasets that both offer significant improvements in classification per-
2
Published as a conference paper at ICLR 2019
formance. Since orthogonalization can be applied to an arbitrary DN, this result and our theoretical
understanding are of independent interest.
This paper is organized as follows. After reviewing the theory of MASOs and VQ for DNs in
Section 2, we formulate the GMM-based extension to SMASOs in Section 3. Section 4 develops the
hybrid β-VQ inference with a special case study on the swish nonlinearity. Section 5 extends the
SMASO to a factorial GMM and shows the power of DN orthogonalization. We wrap up in Section 6
with directions for future research. Proofs of the various results appear in several appendices in the
Supplementary Material.
2	Background on Max-Affine Splines and Deep Networks
We first briefly review max-affine spline operators (MASOs) in the context of understanding the
inner workings of DNs Balestriero & Baraniuk (2018a;b). A MASO is an operator S[A, B] : RD →
RK that maps an input vector of length D into an output vector of length K by concatenating
K independent max-affine splines Magnani & Boyd (2009); Hannah & Dunson (2013), with each
spline formed from R piecewise affine and convex mappings. The MASO parameters consist of
the “slopes” A ∈ RK×R×D and the “offsets/biases” B ∈ RK ×R. See Appendix A for the precise
definition. Given the input x ∈ RD and parameters A, B, a MASO produces the output z ∈ RK via
[z]k = [S [A,B ](x)]k = max (h[A]k,r,∙, Xi + [B]k,r) ,	⑴
r=1,...,R
where [z]k denotes the kth dimension of z. The three subscripts of the slopes tensor [A]k,r,d corre-
spond to output k, partition region r, and input signal index d. The two subscripts of the offsets/bi-
ases tensor [B]k,r correspond to output k and partition region r.
An important consequence of (1) is that a MASO is completely determined by its slope and offset
parameters without needing to specify the partition of the input space (the “knots” when D = 1).
Indeed, solving (1) automatically computes an optimized partition of the input space RD that is
equivalent to a vector quantization (VQ) Nasrabadi & King (1988); Gersho & Gray (2012). We
can make the VQ aspect explicit by rewriting (1) in terms of the Hard-VQ (HVQ) matrix TH ∈
RK ×R. that contains K stacked one-hot row vectors, each with the one-hot position at index [t]k ∈
{1, . . . , R} corresponding to the arg max over r = 1, . . . , R of (1). Given the HVQ matrix, (or
equivalently, a region of the input space), the input-output mapping is affine and fully determined
by
R
[z]k = X [TH]k,r (h[A]k,r,∙, Xi + [B]k,r) .	(2)
r=1
We retrieve (1) from (2) by noting that [t]k = argmax『=i,…,R(([A]k,r,., Xi + [B]k,r).
The key background result for this paper is that the layers of a very large class of DN are MASOs.
Hence, such a DN is a composition of MASOs, where each layer MASO has as input the feature
map Z(ET) ∈ RD(' 1) and produces Z⑶ ∈ RD('), With ' corresponding to the layer. Each MASO
has thus specific parameters A('),B(').
Theorem 1.	Any DN layer comprising a linear operator (e.g., fully connected or convolution) com-
posed with a convex and piecewise affine operator (such as a ReLU, leaky-ReLU, or absolute value
activation; max/average/channel-pooling; maxout; all with or without skip connections) is a MASO
Balestriero & Baraniuk (2018a;b).
Appendix A provides the parameters A('),B(') for the MASO corresponding to the 'th layer of any
DN constructed from linear plus pieceWise affine and convex components. Given this connection, We
will identify Z(ET) above as the input (feature map) to the MASO DN layer and z(') as the output
(feature map). We also identify [z(')]k in (1) and (2) as the output of the kth unit (aka neuron) of the
`th layer. MASOs for higher-dimensional tensor inputs/outputs are easily developed by flattening.
3 Max-Affine Splines meet Gaussian Mixture Models
The MASO/HVQ connection provides deep insights into how a DN clusters and organizes signals
layer by layer in a hierarchical fashion Balestriero & Baraniuk (2018a;b). However, the entire ap-
3
Published as a conference paper at ICLR 2019
proach requires that the nonlinearities be piecewise affine and convex, which precludes important
activation functions like the sigmoid, hyperbolic tangent, and softmax. The goal of this paper is to
extend the MASO analysis framework of Section 2 to these and an infinitely large class of other non-
linearities by linking deterministic MASOs with probabilistic Gaussian Mixture Models (GMMs).
3.1	FROM MASO TO GMM VIA K-MEANS
For now, we focus on a single unit k from layer ` of a MASO DN, which contains both linear and
nonlinear operators; we generalize below in Section 5. The key to the MASO mechanism lies in
the VQ variables [t(`)]k ∀k, since they fully determine the output via (2). For a special choice of
bias, the VQ variable computation is equivalent to the K-means algorithm Balestriero & Baraniuk
(2018a;b).
Proposition 1. Given _ 11∣ [A(')]左 r[=[B(')] k 丁 ,the MASO VQ partition corresponds to a K -
1	(`)	(`)	(` 1) 2
means clustering1 with CentroidS [A(')] k r , computed via [t(')]k = arg min ∣∣ [A(')]：『.一 z(' 1)^ .
For example, consider a layer ` using a ReLU activation function. Unit k of that layer partitions
its input space using a K-means model with R(') = 2 centroids: the origin of the input space and
the unit layer parameter [A(')]k,ι,∙. The input is mapped to the partition region corresponding to the
closest centroid in terms of the Euclidean distance, and the corresponding affine mapping for that
region is used to project the input and produce the layer output as in (2).
We now leverage the well-known relationship between K-means and Gaussian Mixture Models
(GMMs) Bishop (2006) to GMM-ize the deterministic VQ process of max-affine splines. As we
will see, the constraint on the value of [B(')] k r in Proposition 1 will be relaxed thanks to the
GMM’s ability to work with a nonuniform prior over the regions (in contrast to K-means).
To move from a deterministic MASO model to a probabilistic GMM, we reformulate the HVQ
selection variable [t(')]k as an unobserved categorical variable [t(')]k 〜 Cat([∏(`)]k,∙) with param-
eter [∏(')]k,∙ ∈ 4r(')and 4r(')the simplex of dimension R('). Armed with this, We define the
following generative model for the layer input Z(ET) as a mixture of R(') Gaussians with mean
[A(')]k,r,∙ ∈ RD(' 1) and identical isotropic covariance with parameter σ2
R⑶
Z(J) = Xl 俨)]k = r) [H',.+ e,	⑶
r=1
with e 〜 N(0, Iσ2). Note that this GMM generates an independent vector input z('T) for every
unit k = 1,..., D(' in layer '. For reasons that will become clear below in Section 3.3, we will
refer to the GMM model (3) as the Soft MASO (SMASO) model. We develop a joint, factorial model
for the entire MASO layer (and not just one unit) in Section 5.
3.2	Hard VQ Inference
Given the GMM (3) and an input z('-1), we can compute a hard inference of the optimal VQ
selection variable [t(`)]k via the maximum a posteriori (MAP) principle
[t(')]k = arg max p(t∣z(' 1)).	(4)
t=1,…,r(')
The following result is proved in Appendix E.1.
Theorem 2.	Given a GMM with parameters σ2 = 1 and [∏(')]k t = Pexp(B(J[,r+2FA：；("「k L,
,	rex exp([B ]k,r 十 2 k [A ]k,r,∙ k )
(`)
t = 1,..., R(', the MAP inference of the latent selection variable [t(')]k g^ven in (4) can be com-
puted via the MASO HVQ (1)
[t(')]k = argmax ([A(')]k,t,∙, z('T)) + [B(')]k,t,	∀A(') ∀B(').
r=1,…,r(')
(5)
1It would be more accurate to call this R(')-means clustering in this case.
4
Published as a conference paper at ICLR 2019
The optimal HVQ selection matrix is given by [τH''i]k,r = l(r = [t(')]k).
Note in Theorem 2 that the bias constraint of Proposition 1 (which can be interpreted as imposing a
uniform prior [∏(')]k,∙) is completely relaxed.
HVQ inference of the selection matrix sheds light on some of the drawbacks that affect any DN
employing piecewise affine, convex activation functions. First, during gradient-based learning, the
gradient will propagate back only through the activated VQ regions that correspond to the few 1-hot
(`)
entries in TH . The parameters of other regions will not be updated; this is known as the “dying
neurons phenomenon” Trottier et al. (2017); Agarap (2018). Second, the overall MASO mapping is
continuous but not differentiable, which leads to unexpected gradient jumps during learning. Third,
the HVQ inference contains no information regarding the confidence of the VQ region selection,
which is related to the distance of the query point to the region boundary. As we will now see,
this extra information can be very useful and gives rise to a range of classical and new activation
functions.
3.3	Soft VQ Inference
We can overcome many of the limitations of HVQ inference in DNs by replacing the 1-hot entries
of the HVQ selection matrix with the probability that the layer input belongs to a given VQ region
/	. .	.x
[TS )]k,r =P ([t(')]k = T | z('- ))
exp (〈[A(')]k,r,., Z(J))+ [B⑶]k,r )
Pr eXp(〈[A(')]k,r,., Z('-1)〉+ [B⑶]k,r) ,
(6)
which follows from the simple structure of the GMM. This corresponds to a soft inference of the
categorical variable [t(')]k. Note that TS) → TH) as the noise variance in (3) → 0. Given the SVQ
selection matrix, the MASO output is still computed via (2). The SVQ matrix can be computed in-
directly from an entropy-penalized MASO optimization; the following is reproved in Appendix E.2
for completeness.
d(`)
Proposition 2. The entries ofthe SVQ selection matrix [TS)]k,. from (6) solve thefollowing entropy-
penalized maximization, where H(∙) is the Shannon entropy2
R('
k
[tS ]k,∙ = argmaXE [t]r (〈[A(')]k
(`) r=1
t∈4R
,r,., Z('-1)) +[B(')]k,r) + H(t).
(7)
k
Proposition 2, which was first established in Manning & Klein (2003); Mount (2011), unifies HVQ
and SVQ in a single optimization problem. The transition from HVQ (5) to SVQ (7) is obtained
simply by adding the entropy regularization H(t). Notice that removing the Entropy regularization
from (7) leads to the same VQ as (5). We summarize this finding in Table. 1.
3.4	Soft VQ MASO Nonlinearities
Remarkably, switching from HVQ to SVQ MASO inference recovers several classical and powerful
nonlinearities and provides an avenue to derive completely new ones. Given a set of MASO pa-
rameters A('),B(') for calculating the layer-' output of a DN via (1), We can derive two distinctly
different DNs: one based on the HVQ inference of (5) and one based on the SVQ inference of (6).
The following results are proved in Appendix E.5.
Proposition 3. The MASO parameters A('),B(') that induce the ReLU activation under HVQ in-
duce the sigmoid gated linear unit Elfwing et al. (2018) under SVQ.
Proposition 4. The MASO parameters A⑶, B(') that induce the max-pooling nonlinearity under
HVQ induce softmax-pooling Boureau et al. (2010) under SVQ.
Appendix C discusses how the GMM and SVQ formulations shed new light on the impact of pa-
rameter initialization in DC learning plus how these formulations can be extended further.
2The observant reader will recognize this as the E-step of the GMM’s EM learning algorithm.
5
Published as a conference paper at ICLR 2019
VQ Type	VaIUefor [T ⑶]k		Examples
Hard VQ (HVQ)	argmaχt∈4	P(I)	ReLU, max-pooling
Soft VQ (SVQ)	Rk argmaχt∈4	P⑴ + H⑴ r(')	SiGLU, softmax-pooling
β-VQ, β ∈ [0, 1]	k argmaxt∈4	βP(t) + (1 — β)H (t) Rkg)	swish, β-softmax-pooling
Table 1: Impact of different VQ strategies for a MASO layer with P(t)
PRk'l[t]r KM⑶]k,r,., Z('-1)〉+ [B⑶]k,r)∙
3.5	Additional Nonlinearities as Soft DN Layers
Changing viewpoint slightly, we can also derive classical nonlinearities like the sigmoid, tanh, and
softmax Goodfellow et al. (2016) from the soft inference perspective. Consider a new soft DN layer
whose unit output [z(`)]k is not the piecewise affine spline of (2) but rather the probability [z(`)]k =
p([t(')]k = 1|z(`-1)) that the input z(') falls into each VQ region. The following propositions are
proved in Appendix E.6.
Proposition 5. The MASO parameters A⑶，B⑶ that induce the ReLU activation under HVQ in-
duce the sigmoid activation in the corresponding soft DN layer.3
A similar train of thought recovers the softmax nonlinearity typically used at the DN output for
classification problems.
Proposition 6. The MASO parameters A⑶，B⑶ that induce afully-connected-pooling layer under
HVQ (with output dimension D(L) equal to the number of classes C) induce the softmax nonlinearity
in the corresponding soft DN layer.
4 Hybrid Hard/S oft Inference via Entropy Regularization
Combining (5) and (6) yields a hybrid optimization for a new β-VQ that recovers hard, soft, and
linear VQ inference as special cases
R('
k
[T(')]k = argmax	[β(')]k	X	[t]r	(([A(')]k,r,.,/―-∖ +	[B]k,r) +(1	—	[β⑶]k) H(t),	(8)
Rkg)	r=ι
with the new hyper-parameter [β(')]k ∈ (0,1). The β-VQ obtained from the above optimization
problem utilizes [β(')]k to balance the impact of the regularization term (introduced in the SVQ
derivation (7)), allowing to recover and interpolate the VQ between linear, soft and hard (see Ta-
ble. 1). The following is proved in Appendix E.3.
Theorem 3.	The unique global optimum of (8) is given by
[d]	= exp (i⅞⅛ (<[A(')]k,r, Z('-1)〉+ [B(')]k,r))
β k,r — PR=ι exP (⅛⅛ «A⑶]k,j,., Z(J)〉+ [B⑶]k,j
(9)
The β-VQ covers all of the theory developed above as special cases: β = 1 yields HVQ, β = 2
d
yields SVQ, and β = 0 yields a linear MASO With [T0‘限/=r(`) . See Figure 1 for examples
of how the β parameter interacts with three example activation functions. Note also the attractive
property that (9) is differentiable with respect to [β(')]k.
The β-VQ supports the development of new, high-performance DN nonlinearities. For example, the
swish activation σswish(u) = σsig ([η(`)]ku)u extends the sigmoid gated linear unit Elfwing et al.
(2018) with the learnable parameter [η(')]k Ramachandran et al. (2017). Numerous experimental
studies have shown that DNs equipped with a learned swish activation significantly outperform
those with more classical activations like ReLU and sigmoid.4
3The tanh activation is obtained similarly by reparametrizing A(') and B('); see Appendix E.6.
4Best performance was usually achieved with [η(')]k ∈ (0,1) Ramachandran et al. (2017).
6
Published as a conference paper at ICLR 2019
Figure 1: For the MASO parameters A⑷，B⑷ for which HVQ yields the ReLU, absolute value,
and an arbitrary convex activation function, we explore how changing β in the β-VQ alters the
induced activation function. Solid black: HVQ (β = 1), Dashed black: SVQ (β = 1), Red: β-VQ
(β ∈ [0.1, 0.9]). Interestingly, note how some of the functions are nonconvex.
Proposition 7. The MASO A⑷,B⑷ parameters that induce the ReLU nonlinearity under HVQ
induce the swish nonlinearity under β-VQ, with [η(')]k = 方；)'%.
Table 1 summarizes some of the many nonlinearities that are within reach of the β-VQ.
5	Optimal Joint VQ Inference via Orthogonalization
The GMM (3) models the impact of only a single layer unit on the layer-' input z('-1). We can
easily extend this model to a factorial model for z('-1) that enables all D(') units at layer ' to
combine their syntheses:
D⑷R⑷
ZJ) = χχ1([t(')]k = r) [A⑷]k,r,∙ + 3	(10)
k=1 r=1
with 3 〜N(0, Iσ2). This new model is a mixture of R(') Gaussians with means [A(')]k,r,∙ ∈
RD ) and identical isotropic covariances with variance σ2. The factorial aspect of the model
means that the number of possible combinations of the t(`) values grow exponentially with the
number of units. Hence, inferring the latent variables t(`) quickly becomes intractable.
However, we can break this combinatorial barrier and achieve efficient, tractable VQ inference by
constraining the MASO slope parameters A(') to be orthogonal
([A⑷]k,r,., [A(')]k0,r0,.E = 0 ∀k = k0 ∀r,r0.	(11)
Orthogonality is achieved in a fully connected layer (multiplication by the dense matrix W (`) com-
posed with activation or pooling) when the rows of W (`) are orthogonal. Orthogonality is achieved
in a convolution layer (multiplication by the convolution matrix C⑷ composed with activation or
pooling) when the rows of C(') are either non-overlapping or properly apodized; see Appendix E.4
for the details plus the proof of the following result.
Theorem 4. If the slope parameters A(') of a MASO are orthogonal in the sense of (11), then
the random variables [t(')]ι∣z('-1),..., [t(')]ι |z('-1) ofthe model (10) are independent and hence
P ([t⑷]1,..., [t⑷]d(`) |z('T)) = QD='1) P ([t⑷]k 河T)).
In an orthogonal, factorial MASO, optimal inference can be performed independently per factor,
as opposed to jointly over all of the factors. Orthogonality renders the joint MAP inference of the
factorial model’s VQs tractable. The following result is proved in Appendix E.4.
Practically, this not only lowers the computational complexity tremendously but also imparts the
benefit of “uncorrelated unit firing,” which has been shown to be advantageous in DNs Srivastava
et al. (2014). Beyond the scope of this paper, such an orthogonalization strategy can also be applied
to more general factorial models such as factorial GMMs Zemel (1994); Ghahramani (1995) and
factorial HMMs Ghahramani & Jordan (1996).
7
Published as a conference paper at ICLR 2019
Setting	LR = 0.001	LR = 0.0005	LR = 0.0001
SVHN (baseline)	94.3 ± 0.1	94.4 ± 0.1-	93.4 ± 0.0-
SVHN Ortho	94.6 ± 0.2	95.0 ± 0.2	93.8 ± 0.1
CIFAR10 (baseline)	80.3 ± 04	80.2 ± 0.2	76.2 ± 0.3-
CIFAR10 Ortho	84.0 ± 0.3	82.3 ± 0.1	79.1 ± 0.2
CIFAR100 (baseline)	43.6 ± 0.2	44.1 ± 0.4	37.5 ± 0.5-
CIFAR100 Ortho	46.1 ± 0.2	46.3 ± 0.2	42.1 ± 0.3
Table 2: Classification experiment to demonstrate the utility of orthogonal DN layers. For three
datasets and the same largeCNN architecture (detailed in Appendix D), we tabulate the classifica-
tion accuracy (larger is better) and its standard deviation averaged over 5 runs with different Adam
learning rates. In each case, orthogonal fully-connected and convolution matrices improve the clas-
sification accuracy over the baseline.
Corollary 1. When the conditions of Theorem 4 are fulfilled, the joint MAP estimate for the VQs of
the factorial model (10)
|
tf =	arg max	p (t∣z('-)) = [t(')]ι,...,[力⑶仿⑹
t∈{1,…,r(')}×…×{1,…,r(')}
(12)
and thus can be computed with linear complexity in the number of units.
The advantages of orthogonal or near-orthogonal filters have been explored empirically in various
settings, from GANs Brock et al. (2016) to RNNs Huang et al. (2017), typically demonstrating
improved performance. Table 2 tabulates the results of a simple confirmation experiment with the
largeCNN architecture described in Appendix D. We added to the standard cross-entropy loss a term
λ Pk Pk0=k Pr,r0 h[A(')]k,r,∙, [A⑶]k0,r0,∙i2 that penalizes non-orthogonality (recall (11)). We did
not cross-validate the penalty coefficient λ but instead set it equal to 1. The tabulated results show
clearly that favoring orthogonal filters improves accuracy across both different datasets and different
learning settings.
Since the orthogonality penalty does not guarantee true orthogonality but simply favors it, we per-
formed one additional experiment where we reparametrized the fully-connected and convolution
matrices using the Gram-Schmidt (GS) process Daniel et al. (1976) so that they were truly orthog-
onal. Thanks to the differentiability of all of the operations involved in the GS process, we can
backpropagate the loss to the orthogonalized filters in order to update them in learning. We also
used the swish activation, which we showed to be a β-VQ nonlinearity in Section 4. Since the GS
process adds significant computational overhead to the learning algorithm, we conducted only one
experiment on the largest dataset (CIFAR100). The exactly orthogonalized largeCNN achieved a
classification accuracy of 61.2%, which is a major improvement over all of the results in the bottom
(CIFAR100) cell of Table 2. This indicates that there are good reasons to try to improve on the
simple orthogonality-penalty-based approach.
6	Future Work
Our development of the SMASO model opens the door to several new research questions. First,
we have merely scratched the surface in the exploration of new nonlinear activation functions and
pooling operators based on the SVQ and β-VQ. For example, the soft- or β-VQ versions of leaky-
ReLU, absolute value, and other piecewise affine and convex nonlinearities could outperform the
new swish nonlinearity. Second, replacing the entropy penalty in the (7) and (8) with a different
penalty will create entirely new classes of nonlinearities that inherit the rich analytical properties
of MASO DNs. Third, orthogonal DN filters will enable new analysis techniques and DN probing
methods, since from a signal processing point of view problems such as denoising, reconstruction,
compression have been extensively studied in terms of orthogonal filters. This work was partially
supported by NSF grants IIS-17-30574 and IIS-18-38177, AFOSR grant FA9550-18-1-0478, ARO
grant W911NF-15-1-0316, ONR grants N00014-17-1-2551 and N00014-18-12571, DARPA grant
G001534-7500, and a DOD Vannevar Bush Faculty Fellowship (NSSEFF) grant N00014-18-1-2047.
8
Published as a conference paper at ICLR 2019
References
A. F. Agarap. Deep learning using rectified linear units (ReLU). arXiv preprint arXiv:1803.08375, 2018.
R. Balestriero and R. Baraniuk. Mad max: Affine spline insights into deep learning. arXiv preprint
arXiv:1805.06576, 2018a.
R. Balestriero and R. G. Baraniuk. A spline theory of deep networks. In Proc. Int. Conf. Mach. Learn.,
volume 80,pp. 374-383, JuL 2018b.
C. Biernacki, G. Celeux, and G. Govaert. Assessing a mixture model for clustering with the integrated com-
pleted likelihood. IEEE Trans. Pattern Anal. Mach. Intell., 22(7):719-725, 2000.
C. M. Bishop. Pattern Recognition and Machine Learning. Springer-Verlag New York, 2006.
Y. Boureau, J. Ponce, and Y. LeCun. A theoretical analysis of feature pooling in visual recognition. In Proc.
Int. Conf. Mach. Learn., pp. 111-118, 2010.
A.	Brock, T. Lim, J. M. Ritchie, and N. Weston. Neural photo editing with introspective adversarial networks.
arXiv preprint arXiv:1609.07093, 2016.
J.	W. Daniel, W. B. Gragg, L. Kaufman, and G. W. Stewart. Reorthogonalization and stable algorithms for
updating the Gram-Schmidt QR factorization. Math. Comput., 30(136):772-795, 1976.
S.	Elfwing, E. Uchibe, and K. Doya. Sigmoid-weighted linear units for neural network function approximation
in reinforcement learning. Neural Netw., 2018.
A. Gersho and R. M. Gray. Vector Quantization and Signal Compression. Springer, 2012.
Zoubin Ghahramani. Factorial learning and the em algorithm. In Advances in neural information processing
systems, pp. 617-624, 1995.
Zoubin Ghahramani and Michael I Jordan. Factorial hidden Markov models. In Advances in Neural Information
Processing Systems, pp. 472-478, 1996.
X. Glorot and Y. Bengio. Understanding the difficulty of training deep feedforward neural networks. In Proc.
13th Int. Conf. AI Statist., volume 9, pp. 249-256, 2010.
I. Goodfellow, Y. Bengio, and A. Courville. Deep Learning, volume 1. MIT Press, 2016. http://www.
deeplearningbook.org.
L. A. Hannah and D. B. Dunson. Multivariate convex regression with adaptive partitioning. J. Mach. Learn.
Res., 14(1):3261-3294, 2013.
L. Huang, X. Liu, B. Lang, A. W. Yu, Y. Wang, and B. Li. Orthogonal weight normalization: Solu-
tion to optimization over multiple dependent stiefel manifolds in deep neural networks. arXiv preprint
arXiv:1709.06079, 2017.
A. Magnani and S. P. Boyd. Convex piecewise-linear fitting. Optim. Eng., 10(1):1-17, 2009.
Christopher Manning and Dan Klein. Optimization, maxent models, and conditional estimation without magic.
In Proceedings of the 2003 Conference of the North American Chapter of the Association for Computational
Linguistics on Human Language Technology: Tutorials-Volume 5, pp. 8-8. Association for Computational
Linguistics, 2003.
John Mount. The equivalence of logistic regression and maximum entropy models. URL: http://www. win-
vector. com/dfiles/LogisticRegressionMaxEnt. pdf, 2011.
N. M. Nasrabadi and R. A. King. Image coding using vector quantization: A review. IEEE Trans. Commun.,
36(8):957-971, 1988.
P. Ramachandran, B. Zoph, and Q. Le. Searching for activation functions. arXiv:1710.05941v2, Oct. 2017.
R. K. Srivastava, J. Masci, F. Gomez, and J. Schmidhuber. Understanding locally competitive networks. arXiv
preprint arXiv:1410.1165, 2014.
L. Trottier, P. Gigu, and B. Chaib-draa. Parametric exponential linear unit for deep convolutional neural net-
works. pp. 207-214. IEEE, 2017.
E. W. Weisstein. CRC Concise Encyclopedia of Mathematics. CRC press, 2002.
Richard S Zemel. A minimum description length framework for unsupervised learning. Citeseer, 1994.
9
Published as a conference paper at ICLR 2019
S upplementary Materials
A Background
A Deep Network (DN) is an operator fΘ : RD → RC that maps an input signal x ∈ RD to an output prediction
y ∈ RC . All current DNs can be written as a composition of L intermediate mappings called layers
fΘ(X)= (fθL))。…。fθ1)J(X),	(13)
where Θ = θ(1) , . . . , θ(L) is the collection of the network’s parameters from each layer. The DN layer
at level ' is an operator f('')that takes as input the vector-valued signal z('-1) (x) ∈ RD(' 1) and produces
the vector-valued output Z(C)(X) ∈ RD(') with D(L) = C. The signals Z⑷(x),' > 1 are typically called
feature maps an the input is denoted as z(0) (X) = X. For concreteness, we will focus here on processing multi-
channel images x but adjusting the appropriate dimensionalities can be used to adapt our results. We will use
two equivalent representations for the signal and feature maps, one based on tensors and one based on flattened
vectors. In the tensor representation, Z(C) contains C(') channels of size(I(') X j(')) pixels. In the vector
representation, [Z(C) (X)]k represents the entry of the kth dimension of the flattened, vector version Z(C) (X) of
z(C) (X). Hence, D(C) = C(C)I(C) J(C), C(L) = C, I(L) = 1, and J(L) = 1. For conciseness we will often
denote Z(C) (X) as Z(C) . When using nonlinearities and pooling which are piecewise affine and convex, the
layers and whole DN fall under the analysis of max-affine spline operators (MASOs) developed in Balestriero
& Baraniuk (2018a). In this framework, a max-affine spline operator with parameters A(C) ∈ RD(') ×R×D(' 1)
and B(G ∈ RD(')×R is defined as
-maxr=1,…,R〈[A(')]i,r,., Z(J)i + [B(')]ι,r -
z(') = ShA(ZB(I(z('T))=	.	.	(14)
maxr=1,...,Rh[A(C)]K,r,., Z(C-1)i + [B(C)]K,r
Any DN layer made of convex and piecewise affine nonlinearities or pooling can be rewritten exactly as a
MASO. Hence, such operators take place of the layer mappings of (13) We first proceed by modifying (14) to
highlight the internal inference problem. We first introduce the VQ-matrix T(G ∈ RD(') × R which will be used
to make the mapping region specific, as in
-(PR=l[T ⑷]l,r[A⑷hr,.)”
A(O [T ⑷]=	.
.
(PrR=1[T (C)]K,r[A(C)]K,r,.)T
-(PR=ι[T ⑷-,[B")”
B(O [T(C)]=	.
.
(PrR=1[T(C)]K,r[B(C)]K,r,.)T
(15)
effectively making A(C) [T(C)] a matrix of shape (D(C) , D(C-1)) and B(C) [T(C)] a vector of length D(C). Hence
the VQ-matrix is used to combined the per region parameters. In a standard MASO, each row of T(C) is a one-
hot vector at position corresponding to the region in which the input falls into. Due to the one-hot encoding
present in T(C) we refer to this inference as a hard-VQ.
Proposition 8. For a MASO, the VQ-matrix is denoted as TH(C) and is obtained via the internal maximization
process of (14). It corresponds to the (hard-)VQ of the input. Once computed the output is a simple affine
transform of the input as
Z(C) = A(C)[TH(C)]Z(C-1) +B(C)[TH(C)].
(16)
with [TH(C)]k,r
=*{r=argmaχr = ι	Rh[A(')]k,r,.,Z('-1)i+[B(')]k,r }
The VQ matrix TH(C) always belongs to the set of all matrices with different one-hot positions (from 1 to
R) for each of the output dimensions k = 1, . . . , D(C) . We denote this VQ-matrix space as TH(C) =
{[aι,... , aD(`)] ,ak ∈ {eι,... , eR}} with e,=δr, dim(e=) = R.
B Orthogonal Filters Details
The developed results on orthogonality induce orthogonality of the case of fully-connected layers. For the
case on convolutional layer it implies orthogonality as well as non overlapping patches. This is not practical
as it considerably reduces the spatial dimensions making very deep network unsuitable. As such we now
10
Published as a conference paper at ICLR 2019
propose a brief approximation result. Due to the specificity of the convolution operator we are able to provide
a tractable inference coupled with an apodization scheme. To demonstrate this, we first highlight that any input
can be represented as a direct sum of its apodized patches. Then, we see that filtering apodized patches with a
filter is equivalent to convolving the input with apodized filters. We first need to introduce the patch notation.
We define a patch P[z('-1)](pi,pj) ∈ {1,...,I(')} X {1,..., J(')} as the slice of the input With indices
C = 1,..., Kg, i = (all channels) and (i, j) ∈ {pi,...,pi + IC } × {pi,...,pi + JCf)}, hence a patch
starting at position (pi,pj) and of same shape as the filters.
Apodizing a signal in general corresponds to applying an apodization function (or WindoWing func-
tion)Weisstein (2002) h onto it via an Hadamard product. Let define the 2D apodized functions h :
Ω(塔，,JC) → R+ with Ω(ICf), JC) = {1 ,...,IC } X {1,..., JC } and where we remind that (IC), JC)
is the spatial shape of the convolutional filters. Given a function h such that P	(`) (`) h(u) = 1 one can
represent an input by summing the apodized patches as in
[z(')]k,i,j =	X	p[z('-1y](pi,pj) Θ h.
(Pi,Pj )∈{i-lC) ,…,i}×{j-jC) ,…,j}
(17)
The above highlights the ability to treat an input via its collection of patches with the condition to apply the
defined apodization function. With the above, we can demonstrate how minimizing the per patch reconstruction
loss leads to minimizing the overall input modeling
0 ≤ k X(h Θ P[z(')](i,j) - [W("('U))/ ≤ X kh Θ P[z(')](i,j) - [W(')]t(')(i,j)k2,	(18)
i,j	i,j
which represents the internal modeling of the factorial model applied across filters and patches. As a result,
when performing the per position minimization one minimizes an upper bound which ultimately reaches the
global minimum as
kP[z('-1)](pi,Pj) - P[Z('-1)](pi,Pj)k2 → 0 =⇒ kz('T)- X P[z('-1)](pi,pj)∣∣2 = 0.	(19)
(pi,pj)
C Interpretation: Initialization and Input Space Partitioning
The GMM formulation and related inference also allows interpretation of the internal layer parameters. First we
demonstrate how the region prior π(') is affected by the layer parameters especially at initialization. Then we
highlight how our result allows to generalize the input space partitioning results from Balestriero & Baraniuk
(2018b;a).
Region Prior. The region prior of the GMM-MASO model [π(')]k,. (recall Thm. 2) depends on the bias
and norm of the layer weight as [∏(')]k,. (x e[B(')]k，r+1 k[A(')]k，r，.k2. We Can study how this region prior
looks like at initialization. At initialization, common practice uses [B(')]k,r = 0,∀k,r and [A(')]k,r,d 〜
N(0, (v('))2). This bias initialization leads to a cluster prior probability proportional to the norm of the weights.
For example, the case of absolute value leads to E(k [A(')]k,ι,. k2) = E(k [A(')]k,2,. k2) and thus uniform prior
as E([∏(')]k,.) = (0.5, 0.5)T for any initialization standard deviation v('). On the other hand, ReLU has
always ∣∣[A(')]k,2,.∣∣2 = 0 and E (∣∣[A(')]k,r,.∣∣2) = D(')(v('))2. If one uses Xavier initialization Glorot &
Bengio (2010) then D(')(v('))2 = 1 and we thus have as prior probability [∏(')]k,. ≈ (0.62, 0.38)T. THe
latter slightly favors the inactive state of the ReLU and thus sparser activations. In general, the smaller v(`) is,
the more the region prior will favor inactive state of the ReLU.
Input Space Partitioning. We now generalize the ability to study the input space partitioning which was
before limited to the special case of [B(')]k,r = — 2 ∣∣[A(')]k,r,.∣∣2 (recall Prop. 1). Studying the input space
partition is crucial as the MASO property implies that for each input region, an observation is transformed
via a simple linear transformation. However, deriving insights on that is the actual partition is cumbersome as
analytical formula are impractical and one thus has to probe the input space and record the observed VQ for
each point to estimate the input space partitioning. We are now able to derive some clear links between the
MASO partition and standard models which will allows much more efficient computation of the input space
partitions.
Corollary 2. A MASO with arbitrary parameters [A(')]k,r,., [B(')]k,r has an input space partitioning being
the same as a GMM with parameters from Thm. 2.
This augments previous study of the MASO input space partitioning only related to k-mean (recall Prop. 1)
which required specific bias values.
11
Published as a conference paper at ICLR 2019
D	Deep Network Topologies and Datasets
We first present the topologies used in the experiments except for the notation ResNetD-W which is the
standard wide ResNet based topology with depth D and width W. We thus have the following network
architectures for smallCNN and largeCNN:
largeCNN
Conv2DLayer(layers[-1],96,3,pad=’same’)
Conv2DLayer(layers[-1],96,3,pad=’same’)
Conv2DLayer(layers[-1],96,3,pad=’same’,stride=2)
Conv2DLayer(layers[-1],192,3,pad=’same’)
Conv2DLayer(layers[-1],192,3,pad=’same’)
Conv2DLayer(layers[-1],192,3,pad=’same’,stride=2)
Conv2DLayer(layers[-1],192,3,pad=’valid’)
Conv2DLayer(layers[-1],192,1)
Conv2DLayer(layers[-1],10,1)
GlobalPoolLayer(layers[-1],2)
where the Conv2DLayer(layers[-1],192,3,pad=’valid’) denotes a standard 2D convolution with 192
filters of spatial size (3, 3) and with valid padding (no padding).
E Proofs
E.1 Theorem 2
Proof. The log-probability of the model corresponds to
[t(')]k =argmaxh[A(')]k,r,., z('-1)i + [B(')]k,r
= argmaxh[A(')]k,r,., z('-1)i + [B⑶]k,r + 2 ∣∣[A(')]k,r,.k2 - 1 k [A⑶]k,r,. k2
= argmaxh[A(')]k,r,., z('-1)i + [B⑶]k,r + 11∣ [A(')]k,r,. ∣2
-log (X e[B(')]k,r + 2 k[A(') ]k,r,.k2
—
arg max h[A(')]k,r,., z('-1)i + log (e[B(')]k,r+1 k[A(')]k,r,.『
r
-log (X e[B(')]k,r + 2 k[A(') ]k,r,.k2
—
arg maxh[A(')]k,r,., z('-1)i +log (PmAI,]]") — 1 k[A(')]k,r,.k2
arg max log (p(x∣r)p(r)) — U∣∣z('-1)∣∣2
r2
arg max p(x|r)p(r)
r
We also remind the reader that arg max『 p(z('-1)∣r)p(r) = arg max『 log(p(z('T) ∣r)p(r)). Based
on the above it is straightforward to derive (5) from the above.	□
12
Published as a conference paper at ICLR 2019
E.2 Entropy Regularized Optimization
k,r [2σ2 lz('-1) - μrk2 + log(πr )] - X[u(')]k,r log([u(')]k,r ) ).
r
Proof. We are interested into the following optimization problem:
[t(')*]k = arg max F(q[',k],⑼=arg max Eq[log(p(z('-1)∣[t(')]k)p([t(')]k))] + H([t(')]k)
q[',k]	q[',k]
= arg max
u(`) ∈4R
We now use the KKT and Lagrange multiplier to optimize the new loss function (per k) including
the equality constraint
L(U) = X[u]r [2σ12 llz('-1) - μr k2 + log(πr 力—X[u]r log([u(')]r ) + λ(X[u]r — I)
Due to the strong duality we can directly optimize the primal and dual problems and solve jointly
all the partial derivatives to 0. We thus obtain by denoting Ar := [2σ⅛ ∣∣z('-1) - μr ∣2 + log(∏r)]
∂L
∂[u] = Ap - log([u]p) - 1 + λ, ∀p
dL = X[u]r-1
r
we can now set the derivatives to 0 and see that this leads to [u]p = eAp-1+λ, ∀p. We can now sum
over p to obtain
[u]p = eAp-1+λ, ∀p =⇒	[u]p =	eAp-1+λ
pp
=⇒ 1 = X eAp -1+λ
p
eλXeAp-1
p
λ + log(XeAp-1)
p
which leads to λ = - log(Pp eAp-1). Plugging this back into the above equation we obtain
□
E.3 Theorem 3
For the proof of Theorem 3 please refer to the proof in E.2 by applying the convex combination with
coefficients β .
E.4 Theorem 4
Proof. The proof to demonstrate this inference and VQ equality is essentially the same as the one
of GMM-MASO (E.1) with addition of the following first step:
D(')	D(') R(')	D(')
IIzj)- X [W (')]k,r,J∣2 = IIz(J)『-2 X XWRk,[rk],. + X I[W(')]k,[rk],.∣2
k=1	k=1 r=1	k=1
for any configuration r ∈ {1,..., R(') }D('). Using the same results We can re-write the independent
joint optimization as multiple independent optimization problems.	□
13
Published as a conference paper at ICLR 2019
E.5 PropositionS 3 and 4
For Proposition 4 using the developed formula one can extend the following proof for max-pooling.
Proof.
heA(')[k,2],z('-1)(x)i+B(')[k,2]
[z ⑶ (χ)]k = 1 + ehA(')[k,2],z('-1)(χ)i+B(') [k,2] × ((Ae)[k, 2], Ze I)(X)i + Be)[k, 2])
=σsigmoid((A⑶[k, 2], z('T)(x)i + B(')[k, 2])((A⑶[k, 2], ZCT)(x)i + B⑶ [凡如
=σsigmoid (h[C (')]k,., Z(J)(x)i + [bC)]k) × (h[C ⑶]k,., Z(J)(x)i + [bC)]k) (20)
With 1 for the first region exponential as ehA(')[k,2],z(' 1)(x)i+B(')[k,1] = e0 = 1 and the last line
demonstrating the case where ReLU activation and convolution was the internal layer configuration
for illustrative purposes.	□
E.6 PropositionS 5 and 6
Proof.
p([t(')]k = 1∣z('-1))
p(z('-1)|[t(')]k = 1)p([t(')]k = 1)
p(z('T))
___________________P(z('T)|[t(')]k = 1)p([t(')]k = 1)__________________
p(z('T)∣["]k = 0)p([t(')]k = 0) + p(z('T)∣[t(')]k = 1)p([t(')]k = 1)
(_ kz('T)-C(')]k,.k1 2 ) e( 1 k[C(')]k,.k2 + [B(')]k,ι)
e(-	2	) 1+e(2 kC(')]k,.k2 + [B(')]k,ι)__________________________
kz('-1)k2 )	1	1 「(	kz('-1)-[C(')]k,.k2 ) e( 1 k[C(')]k,.k2 + [B(')]k,ι)
2	) 1+e( 1 k[C(')]k,.k2 + [B(')]k,ι)+ e(-	2	) 1+e( 2 k [C(')]k,. k2 + [B(')]k,ι)
e(-kz(i-2c(')]k,.k2)e( 2 k[C(')]k,.k2 + [B(')]k,ι)
e(-kz^) + e(-kz('-1)-2C(')]k，.k2 )e(ɪk [C⑶]k,.k2 + [B⑶]k,ι)
e(hz('-1), [C⑶kJ + [BC)]k,ι)
1 + e((z(J),[C⑶]k,.i + [B(')]k,ι)
σsigmoid([u	]k).
While this is direct for sigmoid DNs, the use of hyperbolic tangent requires to reparametrize the
current and following layer weights and biases to represent the shifting scaling as in C(') := 2C(')
and C('+1) := 2C('+1), bC+1) := bC+1) 一 1 with C replaced by W for fully connected operators.
□
14