Published as a conference paper at ICLR 2019
Graph wavelet neural network
Bingbing Xu1,2 , Huawei Shen1,2, Qi Cao1,2, Yunqi Qiu1,2 & Xueqi Cheng1,2
1 CAS Key Laboratory of Network Data Science and Technology,
Institute of Computing Technology, Chinese Academy of Sciences;
2School of Computer and Control Engineering,
University of Chinese Academy of Sciences
Beijing, China
{xubingbing,shenhuawei,caoqi,qiuyunqi,cxq}@ict.ac.cn
Ab stract
We present graph wavelet neural network (GWNN), a novel graph convolutional
neural network (CNN), leveraging graph wavelet transform to address the short-
comings of previous spectral graph CNN methods that depend on graph Fourier
transform. Different from graph Fourier transform, graph wavelet transform can
be obtained via a fast algorithm without requiring matrix eigendecomposition with
high computational cost. Moreover, graph wavelets are sparse and localized in
vertex domain, offering high efficiency and good interpretability for graph con-
volution. The proposed GWNN significantly outperforms previous spectral graph
CNNs in the task of graph-based semi-supervised classification on three bench-
mark datasets: Cora, Citeseer and Pubmed.
1	Introduction
Convolutional neural networks (CNNs) (LeCun et al., 1998) have been successfully used in many
machine learning problems, such as image classification (He et al., 2016) and speech recogni-
tion (Hinton et al., 2012), where there is an underlying Euclidean structure. The success of CNNs
lies in their ability to leverage the statistical properties of Euclidean data, e.g., translation invariance.
However, in many research areas, data are naturally located in a non-Euclidean space, with graph
or network being one typical case. The non-Euclidean nature of graph is the main obstacle or chal-
lenge when we attempt to generalize CNNs to graph. For example, convolution is not well defined
in graph, due to that the size of neighborhood for each node varies dramatically (Bronstein et al.,
2017).
Existing methods attempting to generalize CNNs to graph data fall into two categories, spatial meth-
ods and spectral methods, according to the way that convolution is defined. Spatial methods define
convolution directly on the vertex domain, following the practice of the conventional CNN. For each
vertex, convolution is defined as a weighted average function over all vertices located in its neigh-
borhood, with the weighting function characterizing the influence exerting to the target vertex by its
neighbors (Monti et al., 2017). The main challenge is to define a convolution operator that can han-
dle neighborhood with different sizes and maintain the weight sharing property of CNN. Although
spatial methods gain some initial success and offer us a flexible framework to generalize CNNs to
graph, it is still elusive to determine appropriate neighborhood.
Spectral methods define convolution via graph Fourier transform and convolution theorem. Spectral
methods leverage graph Fourier transform to convert signals defined in vertex domain into spectral
domain, e.g., the space spanned by the eigenvectors of the graph Laplacian matrix, and then filter is
defined in spectral domain, maintaining the weight sharing property of CNN. As the pioneering work
of spectral methods, spectral CNN (Bruna et al., 2014) exploited graph data with the graph Fourier
transform to implement convolution operator using convolution theorem. Some subsequent works
make spectral methods spectrum-free (Defferrard et al., 2016; Kipf & Welling, 2017; Khasanova &
Frossard, 2017), achieving locality in spatial domain and avoiding high computational cost of the
eigendecomposition of Laplacian matrix.
1
Published as a conference paper at ICLR 2019
In this paper, we present graph wavelet neural network to implement efficient convolution on graph
data. We take graph wavelets instead of the eigenvectors of graph Laplacian as a set of bases, and
define the convolution operator via wavelet transform and convolution theorem. Graph wavelet
neural network distinguishes itself from spectral CNN by its three desirable properties: (1) Graph
wavelets can be obtained via a fast algorithm without requiring the eigendecomposition of Laplacian
matrix, and thus is efficient; (2) Graph wavelets are sparse, while eigenvectors of Laplacian matrix
are dense. As a result, graph wavelet transform is much more efficient than graph Fourier transform;
(3) Graph wavelets are localized in vertex domain, reflecting the information diffusion centered at
each node (Tremblay & Borgnat, 2014). This property eases the understanding of graph convolution
defined by graph wavelets.
We develop an efficient implementation of the proposed graph wavelet neural network. Convolution
in conventional CNN learns an individual convolution kernel for each pair of input feature and out-
put feature, causing a huge number of parameters especially when the number of features is high.
We detach the feature transformation from convolution and learn a sole convolution kernel among
all features, substantially reducing the number of parameters. Finally, we validate the effective-
ness of the proposed graph wavelet neural network by applying it to graph-based semi-supervised
classification. Experimental results demonstrate that our method consistently outperforms previous
spectral CNNs on three benchmark datasets, i.e., Cora, Citeseer, and Pubmed.
2	Our method
2.1	Preliminary
Let G = {V, E, A} be an undirected graph, where V is the set of nodes with |V| = n, E is the set of
edges, and A is adjacency matrix with Ai,j = Aj,i to define the connection between node i and node
j . The graph Laplacian matrix L is defined as L = D - A where D is a diagonal degree matrix with
Di,i = Pj Ai,j, and the normalized Laplacian matrix is L = In - D-1/2AD-1/2 where In is the
identity matrix. Since L is a real symmetric matrix, it has a complete set of orthonormal eigenvectors
U = (u1, u2, ..., un), known as Laplacian eigenvectors. These eigenvectors have associated real,
non-negative eigenvalues {λl}ln=1, identified as the frequencies of graph. Eigenvectors associated
with smaller eigenvalues carry slow varying signals, indicating that connected nodes share similar
values. In contrast, eigenvectors associated with larger eigenvalues carry faster varying signals
across connected nodes.
2.2	Graph Fourier transform
Taking the eigenvectors of normalized Laplacian matrix as a set of bases, graph Fourier transform
of a signal X ∈ Rn on graph G is defined as X = U>x, and the inverse graph Fourier transform is
X = UX (Shuman et al., 2013). Graph Fourier transform, according to convolution theorem, offers
us a way to define the graph convolution operator, denoted as *g. Denoting with y the convolution
kernel, *g is defined as
χ *g y = U((U>y) θ (U>χ)),	(1)
where is the element-wise Hadamard product. Replacing the vector U>y by a diagonal matrix
gθ, then Hadamard product can be written in the form of matrix multiplication. Filtering the signal
x by the filter gθ, we can write Equation (1) as UgθU>X.
However, there are some limitations when using Fourier transform to implement graph convolution:
(1) Eigendecomposition of Laplacian matrix to obtain Fourier basis U is of high computational cost
with O(n3); (2) Graph Fourier transform is inefficient, since it involves the multiplication between
a dense matrix U and the signal X; (3) Graph convolution defined through Fourier transform is
not localized in vertex domain, i.e., the influence to the signal on one node is not localized in its
neighborhood. To address these limitations, ChebyNet (Defferrard et al., 2016) restricts convolution
kernel gθ to a polynomial expansion
K-1
gθ = X θkΛk,	(2)
k=0
2
Published as a conference paper at ICLR 2019
where K is a hyper-parameter to determine the range of node neighborhoods via the shortest path
distance, θ ∈ RK is a vector of polynomial coefficients, and Λ =diag({λl}ln=1). However, such a
polynomial approximation limits the flexibility to define appropriate convolution on graph, i.e., with
a smaller K, it’s hard to approximate the diagonal matrix gθ with n free parameters. While with a
larger K , locality is no longer guaranteed. Different from ChebyNet, we address the aforementioned
three limitations through replacing graph Fourier transform with graph wavelet transform.
2.3	Graph wavelet transform
Similar to graph Fourier transform, graph wavelet transform projects graph signal from vertex do-
main into spectral domain. Graph wavelet transform employs a set of wavelets as bases, defined as
ψs = (ψs1, ψs2, ..., ψsn), where each wavelet ψsi corresponds to a signal on graph diffused away
from node i and s is a scaling parameter. Mathematically, ψsi can be written as
ψs = UGsU>,	(3)
where U is Laplacian eigenvectors, Gs=diag g(sλ1), ..., g(sλn) is a scaling matrix and g(sλi) =
eλis.
Using graph wavelets as bases, graph wavelet transform of a signal X on graph is defined as X =
ψ-1x and the inverse graph wavelet transform is X = ψsX. Note that ψ-1 can be obtained by
simply replacing the g(sλi) in ψs with g(-sλi) corresponding to a heat kernel (Donnat et al., 2018).
Replacing the graph Fourier transform in Equation (1) with graph wavelet transform, we obtain the
graph convolution as
X *g y = ψs((ψ-1 y) 0 W-IX)).	⑷
Compared to graph Fourier transform, graph wavelet transform has the following benefits when
being used to define graph convolution:
1.	High efficiency: graph wavelets can be obtained via a fast algorithm without requiring the
eigendecomposition of Laplacian matrix. In Hammond et al. (2011), a method is proposed to use
Chebyshev polynomials to efficiently approximate ψs and ψs-1, with the computational complexity
O(m × |E|), where |E| is the number of edges and m is the order of Chebyshev polynomials.
2.	High spareness: the matrix ψs and ψs-1 are both sparse for real world networks, given that these
networks are usually sparse. Therefore, graph wavelet transform is much more computationally
efficient than graph Fourier transform. For example, in the Cora dataset, more than 97% elements
in ψs-1 are zero while only less than 1% elements in U> are zero (Table 4).
3.	Localized convolution: each wavelet corresponds to a signal on graph diffused away from a
centered node, highly localized in vertex domain. As a result, the graph convolution defined in
Equation (4) is localized in vertex domain. We show the localization property of graph convolution
in Appendix A. It is the localization property that explains why graph wavelet transform outperforms
Fourier transform in defining graph convolution and the associated tasks like graph-based semi-
supervised learning.
Wavelet Basis, scaling
-1.6
-1.4
-1.2
1.0
0.8
0.6
0.4
0.2
0.0
Wavelet Basis, scaling = 5
-3.0
-2.5
-2.0
I 1.5
卜1.0
F 0.5
L o.o
(a)
(b)
Figure 1: Wavelets on an example graph at (a) small scale and (b) large scale.
3
Published as a conference paper at ICLR 2019
4.	Flexible neighborhood: graph wavelets are more flexible to adjust node’s neighborhoods. Dif-
ferent from previous methods which constrain neighborhoods by the discrete shortest path distance,
our method leverages a continuous manner, i.e., varying the scaling parameter s. A small value of
s generally corresponds to a smaller neighborhood. Figure 1 shows two wavelet bases at different
scale on an example network, depicted using GSP toolbox (Perraudin et al., 2014).
2.4	Graph wavelet neural network
Replacing Fourier transform with wavelet transform, graph wavelet neural network (GWNN) is a
multi-layer convolutional neural network. The structure of the m-th layer is
p
Xm+1 = h(ψsXFimΨ-1Xmi])	j = ι,…，q,	(5)
i=1
where ψs is wavelet bases, ψs-1 is the graph wavelet transform matrix at scale s which projects
signal in vertex domain into spectral domain, X[m:,i] with dimensions n × 1 is the i-th column of
Xm, Fim,j is a diagonal filter matrix learned in spectral domain, and h is a non-linear activation
function. This layer transforms an input tensor Xm with dimensions n × p into an output tensor
Xm+1 with dimensions n × q.
In this paper, we consider a two-layer GWNN for semi-supervised node classification on graph. The
formulation of our model is
p
first layer: X2,j] = ReLU(ψs X FI Ψ-1X[1,i])	j = 1,…，q,	(6)
i=1
q
second layer : Zj = Softmax(ψs ɪ2 F2jΨ-1X2 i]) j = 1, ∙∙∙ ,c,	(7)
i=1
where c is the number of classes in node classification, Z of dimensions n × c is the prediction
result. The loss function is the cross-entropy error over all labeled examples:
c
Loss = - X X YlilnZli ,	(8)
l∈yL i=1
where yL is the labeled node set, Yli = 1 if the label of node l is i, and Yli = 0 otherwise. The
weights F are trained using gradient descent.
2.5	Reducing Parameter Complexity
In Equation (5), the parameter complexity of each layer is O(n × p × q), where n is the number of
nodes, p is the number of features of each vertex in current layer, and q is the number of features of
each vertex in next layer. Conventional CNN methods learn convolution kernel for each pair of input
feature and output feature. This results in a huge number of parameters and generally requires huge
training data for parameter learning. This is prohibited for graph-based semi-supervised learning.
To combat this issue, we detach the feature transformation from graph convolution. Each layer in
GWNN is divided into two components: feature transformation and graph convolution. Spectially,
we have
feature transformation : Xm = XmW,	(9)
graph convolution : Xm+1 = h(ψsFmψs-1Xm0).	(10)
where W ∈ Rp×q is the parameter matrix for feature transformation, Xm0 with dimensions n × q
is the feature matrix after feature transformation, Fm is the diagonal matrix for graph convolution
kernel, and h is a non-linear activation function.
After detaching feature transformation from graph convolution, the parameter complexity is reduced
from O(n × p × q) to O(n +p × q). The reduction of parameters is particularly valuable fro graph-
based semi-supervised learning where labels are quite limited.
4
Published as a conference paper at ICLR 2019
3	Related works
Graph convolutional neural networks on graphs. The success of CNNs when dealing with im-
ages, videos, and speeches motivates researchers to design graph convolutional neural network on
graphs. The key of generalizing CNNs to graphs is defining convolution operator on graphs. Exist-
ing methods are classified into two categories, i.e., spectral methods and spatial methods.
Spectral methods define convolution via convolution theorem. Spectral CNN (Bruna et al., 2014)
is the first attempt at implementing CNNs on graphs, leveraging graph Fourier transform and defin-
ing convolution kernel in spectral domain. Boscaini et al. (2015) developed a local spectral CNN
approach based on the graph Windowed Fourier Transform. Defferrard et al. (2016) introduced a
Chebyshev polynomial parametrization for spectral filter, offering us a fast localized spectral fil-
tering method. Kipf & Welling (2017) provided a simplified version of ChebyNet, gaining success
in graph-based semi-supervised learning task. Khasanova & Frossard (2017) represented images
as signals on graph and learned their transformation invariant representations. They used Cheby-
shev approximations to implement graph convolution, avoiding matrix eigendecomposition. Levie
et al. (2017) used rational functions instead of polynomials and created anisotropic spectral filters
on manifolds.
Spatial methods define convolution as a weighted average function over neighborhood of target ver-
tex. GraphSAGE takes one-hop neighbors as neighborhoods and defines the weighting function as
various aggregators over neighborhood (Hamilton et al., 2017). Graph attention network (GAT) pro-
poses to learn the weighting function via self-attention mechanism (Velickovic et al., 2017). MoNet
offers us a general framework for design spatial methods, taking convolution as the weighted average
of multiple weighting functions defined over neighborhood (Monti et al., 2017). Some works devote
to making graph convolutional networks more powerful. Monti et al. (2018) alternated convolutions
on vertices and edges, generalizing GAT and leading to better performance. GraphsGAN (Ding
et al., 2018) generalizes GANs to graph, and generates fake samples in low-density areas between
subgraphs to improve the performance on graph-based semi-supervised learning.
Graph wavelets. Sweldens (1998) presented a lifting scheme, a simple construction of wavelets
that can be adapted to graphs without learning process. Hammond et al. (2011) proposed a method
to construct wavelet transform on graphs. Moreover, they designed an efficient way to bypass
the eigendecomposition of the Laplacian and approximated wavelets with Chebyshev polynomi-
als. Tremblay & Borgnat (2014) leveraged graph wavelets for multi-scale community mining by
modulating a scaling parameter. Owing to the property of describing information diffusion, Donnat
et al. (2018) learned structural node embeddings via wavelets. All these works prove that graph
wavelets are not only local and sparse but also valuable for signal processiong on graph.
4	Experiments
4.1	Datasets
To evaluate the proposed GWNN, we apply GWNN on semi-supervised node classification, and
conduct experiments on three benchmark datasets, namely, Cora, Citeseer and Pubmed (Sen et al.,
2008). In the three citation network datasets, nodes represent documents and edges are citation links.
Details of these datasets are demonstrated in Table 1. Here, the label rate denotes the proportion of
labeled nodes used for training. Following the experimental setup of GCN (Kipf & Welling, 2017),
we fetch 20 labeled nodes per class in each dataset to train the model.
Table 1: The Statistics of Datasets
Dataset	Nodes	Edges	Classes	Features	Label Rate
Cora	2,708	5,429	7~	1,433	0.052
Citeseer	3,327	4,732	6	3,703	0.036
Pubmed	19,717	44,338	3	500	0.003
5
Published as a conference paper at ICLR 2019
4.2	Baselines
We compare with several traditional semi-supervised learning methods, including label propagation
(LP) (Zhu et al., 2003), semi-supervised embedding (SemiEmb) (Weston et al., 2012), manifold
regularization (ManiReg) (Belkin et al., 2006), graph embeddings (DeepWalk) (Perozzi et al., 2014),
iterative classification algorithm (ICA) (Lu & Getoor, 2003) and Planetoid (Yang et al., 2016).
Furthermore, along with the development of deep learning on graph, graph convolutional networks
are proved to be effective in semi-supervised learning. Since our method is a spectral method based
on convolution theorem, we compare it with the Spectral CNN (Bruna et al., 2014). ChebyNet (Def-
ferrard et al., 2016) and GCN (Kipf & Welling, 2017), two variants of the Spectral CNN, are also
included as our baselines. Considering spatial methods, we take MoNet (Monti et al., 2017) as our
baseline, which also depends on Laplacian matrix.
4.3	Experimental Settings
We train a two-layer graph wavelet neural network with 16 hidden units, and prediction accu-
racy is evaluated on a test set of 1000 labeled samples. The partition of datasets is the same as
GCN (Kipf & Welling, 2017) with an additional validation set of 500 labeled samples to determine
hyper-parameters.
Weights are initialized following Glorot & Bengio (2010). We adopt the Adam optimizer (Kingma
& Ba, 2014) for parameter optimization with an initial learning rate lr = 0.01. For computational
efficiency, we set the elements of ψs and ψs-1 smaller than a threshold t to 0. We find the optimal
hyper-parameters s and t through grid search, and the detailed discussion about the two hyper-
parameters is introduced in Appendix B. For Cora, s = 1.0 and t = 1e - 4. For Citeseer, s = 0.7
and t = 1e - 5. For Pubmed, s = 0.5 and t = 1e - 7. To avoid overfitting, dropout (Srivastava
et al., 2014) is applied. Meanwhile, we terminate the training if the validation loss does not decrease
for 100 consecutive epochs.
4.4	Analysis on detaching feature transformation from convolution
Since the number of parameters for the undetached version of GWNN is O(n × p × q), we can
hardly implement this version in the case of networks with a large number n of nodes and a huge
number p of input features. Here, we validate the effectiveness of detaching feature transformation
form convolution on ChebyNet (introduced in Section 2.2), whose parameter complexity is O(K ×
p × q). For ChebyNet of detaching feature transformation from graph convolution, the number
of parameters is reduced to O(K + p × q). Table 2 shows the performance and the number of
parameters on three datasets. Here, the reported performance is the optimal performance varying
the order K = 2, 3, 4.
Table 2: Results of Detaching Feature Transformation from Convolution
	Method	Cora	Citeseer	Pubmed
Prediction Accuracy	ChebyNet DetaChing-ChebyNet	81.2% 81.6%	69.8% 68.5%	74.4% 78.6%
Number of Parameters	ChebyNet Detaching-ChebyNet	46,080 (K=2) 23,048 (K=4)	178,032 (K=3) 59,348 (K=2)	24,144 (K=3) 8,054 (K=3)
As demonstrated in Table 2, with fewer parameters, we improve the accuracy on Pubmed by a large
margin. This is due to that the label rate of Pubmed is only 0.003. By detaching feature transfor-
mation from convolution, the parameter complexity is significantly reduced, alleviating overfitting
in semi-supervised learning and thus remarkably improving prediction accuracy. On Citeseer, there
is a little drop on the accuracy. One possible explanation is that reducing the number of parameters
may restrict the modeling capacity to some degree.
4.5	Performance of GWNN
We now validate the effectiveness of GWNN with detaching technique on node classification. Exper-
imental results are reported in Table 3. GWNN improves the classification accuracy on all the three
6
Published as a conference paper at ICLR 2019
Table 3: Results of Node Classification
Method	Cora	Citeseer	Pubmed
MLP	55.1%	46.5%	71.4%
ManiReg	59.5%	60.1%	70.7%
SemiEmb	59.0%	59.6%	71.7%
LP	68.0%	45.3%	63.0%
DeepWalk	67.2%	43.2%	65.3%
ICA	75.1%	69.1%	73.9%
Planetoid	75.7%	64.7%	77.2%
Spectral CNN	73.3%	58.9%	73.9%
ChebyNet	81.2%	69.8%	74.4%
GCN	81.5%	70.3%	79.0%
MoNet	81.7±0.5%	—	78.8±0.3%
GWNN	82.8%	一	71.7%	79.1%
datasets. In particular, replacing Fourier transform with wavelet transform, the proposed GWNN
is comfortably ahead of Spectral CNN, achieving 10% improvement on Cora and Citeseer, and 5%
improvement on Pubmed. The large improvement could be explained from two perspectives: (1)
Convolution in Spectral CNN is non-local in vertex domain, and thus the range of feature diffusion
is not restricted to neighboring nodes; (2) The scaling parameter s of wavelet transform is flexible to
adjust the diffusion range to suit different applications and different networks. GWNN consistently
outperforms ChebyNet, since it has enough degree of freedom to learn the convolution kernel, while
ChebyNet is a kind of approximation with limited degree of freedom. Furthermore, our GWNN also
performs better than GCN and MoNet, reflecting that it is promising to design appropriate bases for
spectral methods to achieve good performance.
4.6	Analysis on sparsity
Besides the improvement on prediction accuracy, wavelet transform with localized and sparse trans-
form matrix holds sparsity in both spatial domain and spectral domain. Here, we take Cora as an
example to illustrate the sparsity of graph wavelet transform.
The sparsity of transform matrix. There are 2,708 nodes in Cora. Thus, the wavelet transform
matrix ψs-1 and the Fourier transform matrix U> both belong to R2,708×2,708 . The first two rows
in Table 4 demonstrate that ψs-1 is much sparser than U>. Sparse wavelets not only accelerate the
computation, but also well capture the neighboring topology centered at each node.
The sparsity of projected signal. As mentioned above, each node in Cora represents a document
and has a sparse bag-of-words feature. The input feature X ∈ Rn×p is a binary matrix, and X[i,j] =
1 when the i-th document contains the j -th word in the bag of words, it equals 0 otherwise. Here,
X[:,j] denotes the j-th column of X, and each column represents the feature vector of a word.
Considering a specific signal X[:,984] , we project the spatial signal into spectral domain, and get
its projected vector. Here, P = ψ-1X[∖984] denotes the projected vector via wavelet transform,
q = U>X[:,984] denotes the projected vector via Fourier transform, and p, q ∈ R2,708. The last row
in Table 4 lists the numbers of non-zero elements in p and q. As shown in Table 4, with wavelet
transform, the projected signal is much sparser.
Table 4: Statistics of wavelet transform and Fourier transform on Cora
	Statistical Property	wavelet transform	Fourier transform
Transform Matrix	Density Number of Non-zero Elements	2.8% 205,774	99.1% 7,274,383
Projected Signal	Density Number of Non-zero Elements	10.9% 297	100% 2,708
4.7	Analysis on Interpretab ility
Compare with graph convolution network using Fourier transform, GWNN provides good inter-
pretability. Here, we show the interpretability with specific examples in Cora.
7
Published as a conference paper at ICLR 2019
Each feature, i.e. word in the bag of words, has a projected vector, and each element in this vector
is associated with a spectral wavelet basis. Here, each basis is centered at a node, corresponding
to a document. The value can be regarded as the relation between the word and the document.
Thus, each value in p can be interpreted as the relation between W ord984 and a document. In order
to elaborate the interpretability of wavelet transform, we analyze the projected values of different
feature as following.
Considering two features W ord984 and W ord1177, we select the top-10 active bases, which have
the 10 largest projected values of each feature. As illustrated in Figure 2, for clarity, we magnify the
local structure of corresponding nodes and marked them with bold rims. The central network in each
subgraph denotes the dataset Cora, each node represents a document, and 7 different colors represent
7 classes. These nodes are clustered by OpenOrd (Martin et al., 2011) based on the adjacency matrix.
Figure 2a shows the top-10 active bases of W ord984. In Cora, this word only appears 8 times,
and all the documents containing W ord984 belong to the class “ Case-Based ”. Consistently, all
top-10 nodes activated by W ord984 are concentrated and belong to the class “ Case-Based ”. And,
the frequencies of W ord1177 appearing in different classes are similar, indicating that W ord1177 is
a universal word. In concordance with our expectation, the top-10 active bases of Word1177 are
discrete and belong to different classes in Figure 2b.
(a)	(b)
Figure 2: Top-10 active bases of two words in Cora. The central network of each subgraph represents
the dataset Cora, which is split into 7 classes. Each node represents a document, and its color
indicates its label. The nodes that represent the top-10 active bases are marked with bold rims. (a)
W ord984 only appears in documents of the class “ Case-Based ” in Cora. Consistently, all its 10
active bases also belong to the class “ Case-Based ”. (b) The frequencies of W ord1177 appearing in
different classes are similar in Cora. As expected, the top-10 active bases of W ord1177 also belong
to different classes.
Owing to the properties of graph wavelets, which describe the neighboring topology centered at
each node, the projected values of wavelet transform can be explained as the correlation between
features and nodes. These properties provide an interpretable domain transformation and ease the
understanding of graph convolution.
5	Conclusion
Replacing graph Fourier transform with graph wavelet transform, we proposed GWNN. Graph
wavelet transform has three desirable properties: (1) Graph wavelets are local and sparse; (2) Graph
wavelet transform is computationally efficient; (3) Convolution is localized in vertex domain. These
advantages make the whole learning process interpretable and efficient. Moreover, to reduce the
number of parameters and the dependence on huge training data, we detached the feature transfor-
mation from convolution. This practice makes GWNN applicable to large graphs, with remarkable
performance improvement on graph-based semi-supervised learning.
8
Published as a conference paper at ICLR 2019
6	Acknowledgements
This work is funded by the National Natural Science Foundation of China under grant numbers
61425016, 61433014, and 91746301. Huawei Shen is also funded by K.C. Wong Education Foun-
dation and the Youth Innovation Promotion Association of the Chinese Academy of Sciences.
References
Mikhail Belkin, Partha Niyogi, and Vikas Sindhwani. Manifold regularization: A geometric frame-
work for learning from labeled and unlabeled examples. Journal of machine learning research, 7
(Nov):2399-2434, 2006.
Davide Boscaini, Jonathan Masci, Simone Melzi, Michael M Bronstein, Umberto Castellani, and
Pierre Vandergheynst. Learning class-specific descriptors for deformable shapes using localized
spectral convolutional networks. In Computer Graphics Forum, volume 34, pp. 13-23. Wiley
Online Library, 2015.
Michael M Bronstein, Joan Bruna, Yann LeCun, Arthur Szlam, and Pierre Vandergheynst. Geomet-
ric deep learning: going beyond euclidean data. IEEE Signal Processing Magazine, 34(4):18-42,
2017.
Joan Bruna, Wojciech Zaremba, Arthur Szlam, and Yann Lecun. Spectral networks and lo-
cally connected networks on graphs. In International Conference on Learning Representations
(ICLR2014), CBLS, April 2014, 2014.
Michael Defferrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks
on graphs with fast localized spectral filtering. In Advances in Neural Information Processing
Systems, pp. 3844-3852, 2016.
Ming Ding, Jie Tang, and Jie Zhang. Semi-supervised learning on graphs with generative adversarial
nets. In Proceedings of the 27th ACM International Conference on Information and Knowledge
Management, pp. 913-922. ACM, 2018.
Claire Donnat, Marinka Zitnik, David Hallac, and Jure Leskovec. Learning structural node embed-
dings via diffusion wavelets. 2018.
Xavier Glorot and Yoshua Bengio. Understanding the difficulty of training deep feedforward neural
networks. In Proceedings of the thirteenth international conference on artificial intelligence and
statistics, pp. 249-256, 2010.
Will Hamilton, Zhitao Ying, and Jure Leskovec. Inductive representation learning on large graphs.
In Advances in Neural Information Processing Systems, pp. 1024-1034, 2017.
David K Hammond, Pierre Vandergheynst, and Remi Gribonval. Wavelets on graphs via spectral
graph theory. Applied and Computational Harmonic Analysis, 30(2):129-150, 2011.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-
nition. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp.
770-778, 2016.
Geoffrey Hinton, Li Deng, Dong Yu, George E Dahl, Abdel-rahman Mohamed, Navdeep Jaitly,
Andrew Senior, Vincent Vanhoucke, Patrick Nguyen, Tara N Sainath, et al. Deep neural networks
for acoustic modeling in speech recognition: The shared views of four research groups. IEEE
Signal processing magazine, 29(6):82-97, 2012.
Renata Khasanova and Pascal Frossard. Graph-based isometry invariant representation learning. In
International Conference on Machine Learning, pp. 1847-1856, 2017.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980, 2014.
Thomas N. Kipf and Max Welling. Semi-supervised classification with graph convolutional net-
works. In International Conference on Learning Representations (ICLR), 2017.
9
Published as a conference paper at ICLR 2019
Yann LeCun, Leon Bottou, YoshUa Bengio, and Patrick Haffner. Gradient-based learning applied to
document recognition. Proceedings of the IEEE, 86(11):2278-2324,1998.
Ron Levie, Federico Monti, Xavier Bresson, and Michael M Bronstein. Cayleynets: Graph convo-
lutional neural networks with complex rational spectral filters. arXiv preprint arXiv:1705.07664,
2017.
Qing Lu and Lise Getoor. Link-based classification. In Proceedings of the 20th International
Conference on Machine Learning (ICML-03), pp. 496-503, 2003.
Shawn Martin, W Michael Brown, Richard Klavans, and Kevin W Boyack. Openord: an open-
source toolbox for large graph layout. In Visualization and Data Analysis 2011, volume 7868, pp.
786806. International Society for Optics and Photonics, 2011.
Federico Monti, Davide Boscaini, Jonathan Masci, Emanuele Rodola, Jan Svoboda, and Michael M
Bronstein. Geometric deep learning on graphs and manifolds using mixture model cnns. In Proc.
CVPR, volume 1, pp. 3, 2017.
Federico Monti, Oleksandr Shchur, Aleksandar Bojchevski, Or Litany, Stephan GUnnemann,
and Michael M Bronstein. Dual-primal graph convolutional networks. arXiv preprint
arXiv:1806.00770, 2018.
Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. Deepwalk: Online learning of social repre-
sentations. In Proceedings of the 20th ACM SIGKDD international conference on Knowledge
discovery and data mining, pp. 701-710. ACM, 2014.
Nathanael Perraudin, Johan Paratte, David Shuman, Lionel Martin, Vassilis Kalofolias, Pierre Van-
dergheynst, and David K Hammond. Gspbox: A toolbox for signal processing on graphs. arXiv
preprint arXiv:1408.5781, 2014.
Prithviraj Sen, Galileo Namata, Mustafa Bilgic, Lise Getoor, Brian Galligher, and Tina Eliassi-Rad.
Collective classification in network data. AI magazine, 29(3):93, 2008.
David I Shuman, Sunil K Narang, Pascal Frossard, Antonio Ortega, and Pierre Vandergheynst. The
emerging field of signal processing on graphs: Extending high-dimensional data analysis to net-
works and other irregular domains. IEEE Signal Processing Magazine, 30(3):83-98, 2013.
Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov.
Dropout: a simple way to prevent neural networks from overfitting. The Journal of Machine
Learning Research, 15(1):1929-1958, 2014.
Wim Sweldens. The lifting scheme: A construction of second generation wavelets. SIAM journal
on mathematical analysis, 29(2):511-546, 1998.
Nicolas Tremblay and Pierre Borgnat. Graph wavelets for multiscale community mining. IEEE
Transactions on Signal Processing, 62(20):5227-5239, 2014.
Petar Velickovic, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro Lio, and Yoshua
Bengio. Graph attention networks. arXiv preprint arXiv:1710.10903, 2017.
Jason Weston, Frederic Ratle, Hossein Mobahi, and Ronan Collobert. Deep learning via semi-
supervised embedding. In Neural Networks: Tricks of the Trade, pp. 639-655. Springer, 2012.
Zhilin Yang, William Cohen, and Ruslan Salakhudinov. Revisiting semi-supervised learning with
graph embeddings. In International Conference on Machine Learning, pp. 40-48, 2016.
Xiaojin Zhu, Zoubin Ghahramani, and John D Lafferty. Semi-supervised learning using gaussian
fields and harmonic functions. In Proceedings of the 20th International conference on Machine
learning (ICML-03), pp. 912-919, 2003.
10
Published as a conference paper at ICLR 2019
Appendix A	Localized graph convolution via wavelet transform
We use a diagonal matrix Θ to represent the learned kernel transformed by wavelets ψs-1y, and
replace the Hadamard product with matrix muplication. Then Equation (4) is:
X *g y = ψs Θψ-1 x.	(11)
We set ψs = (ψsi,ψs2,…,ψsn), ψ-1 = (ΨSι,ΨS2, ...,ΨSn), and Θ = diag({θkV=J Equation
(11) becomes :
n
X *G y =)] θkψsk(ψSk ) ^∣^χ.	(12)
k=1
As proved by Hammond et al. (2011), both ψs and ψs-1 are local in small scale (s). Figure 3 shows
the locality of ψs1 and ψ*1, i.e., the first column in ψs and ψ-1 when S = 3. Each column in ψs and
ψs-1 describes the neighboring topology of target node, which means that ψs and ψs-1 are local. The
locality of ψsk and ψ*k leads to the locality of the resulting matrix of multiplication between the
column vector ψsk and row vector (ψ*k)>. For convenience, We set Mk = ψsk(ψ*k)>, Mk[i,j] > 0
only when ψsk[i] > 0 and (ψ*k)>[j] > 0. In other words, if Mk[i,j] > 0, vertex i and vertex j can
correlate with each other through vertex k.
- 0.20
■ 0.15
0.10
0.05
(a)
0.00
(b)
■2.5
■ 1.5
■0.5
Figure 3: Locality of (a) ψs1 and (b) ψ*1.
Since each Mk is local, for any convolution kernel Θ, ψs Θψs-1 is local, and it means that convolu-
tion is localized in vertex domain. By replacing Θ with an identity matrix in Equation (12), we get
x *g y = Pn=I Mkx. We define H = Pn=I Mk, and Figure 4 shows H[1,:] in different scal-
ing, i.e., correlation between the first node and other nodes during convolution. The locality of H
suggests that graph convolution is localized in vertex domain. Moreover, as the scaling parameter s
becomes larger, the range of feature diffusion becomes larger.
scaling = 0.8
-0.8
scaling = 1.5
o.o
(a)	(b)
Figure 4:	Correlation between first node and other nodes at (a) small scale and (b) large scale. Non-
zero value of node represents correlation between this node and target node during convolution.
Locality of H suggests that graph convolution is localized in vertex domain. Moreover, with scaling
parameter s becoming larger, the range of feature diffusion becomes larger.
11
Published as a conference paper at ICLR 2019
Appendix B Influence of Hyper-parameters
Figure 5:	Influence of s and t on Cora.
GWNN leverages graph wavelets to implement graph convolution, where s is used to modulate
the range of neighborhoods. From Figure 5, as s becomes larger starting from 0, the range of
neighboring nodes becomes large, resulting the increase of accuracy on Cora. However when s
becomes too large, some irrelevant nodes are included, leading to decreasing of accuracy. The hyper-
parameter t only used for computational efficiency, has any slight influence on its performance.
For experiments on specific dataset, s and t are choosen via grid search using validation. Generally,
a appropriate s is in the range of [0.5, 1], which can not only capture the graph structure but also
guarantee the locality of convolution, and t is less insensive to dataset.
Appendix C	Parameter complexity of Node Classification
We show the parameter complexity of node classification in Table 5. The high parameter complex-
ity O(n * P * q) of Spectral CNN makes it difficult to generalize to real world networks. ChebyNet
approximates the convolution kernel via polynomial function of the diagonal matrix of Laplacian
eigenvalues, reducing parameter complexity to O (K * p * q) with K being the order of polyno-
mial function. GCN simplifies ChebyNet via setting K=1. We detach feature transformation from
graph convolution to implement GWNN and Spectral CNN in our experiments, which can reduce
parameter to O(n +p * q).
Table 5: Parameter complexity of Node Classification
Method	Cora	Citeseer	Pubmed
Spectral CNN	-62,392,320	197,437,488	158,682,416
Spectral CNN (detaching)	28,456	65,379	47,482
ChebyNet	46,080 (K=2)	178,032 (K=3)	24,144 (K=3)
GCN	23,040	59,344	8,048
GWNN	28,456	65,379	47,482
In Cora and Citeseer, with smaller parameter complexity, GWNN achieves better performance than
ChebyNet, reflecting that it is promising to implement convolution via graph wavelet transform. As
Pubmed has a large number of nodes, the parameter complexity of GWNN is larger than ChebyNet.
As future work, it is an interesting attempt to select wavelets associated with a subset of nodes,
further reducing parameter complexity with potential loss of performance.
12
Published as a conference paper at ICLR 2019
Appendix D	Fast Graph wavelets with Chebyshev polynomial
APPROXIMATION
Hammond et al. (2011) proposed a method, using Chebyshev polynomials to efficiently approximate
ψs and ψs-1. The computational complexity is O(m × |E|), where |E| is the number of edges
and m is the order of Chebyshev polynomials. We give the details of the approximation proposed
in Hammond et al. (2011).
With the stable recurrence relation Tk(y) = 2yTk-1(y) - Tk-2 (y), we can generate the Chebyshev
polynomials Tk(y). Here T0 = 1 and T1 = y. For y sampled between -1 and 1, the trigonometric
expression Tk (y) = cos(k arccos(y)) is satisfied. It shows that Tk (y) ∈ [-1, 1] when y ∈ [-1, 1].
Through the Chebyshev polynomials, an orthogonal basis for the Hilbert space of square integrable
functions L2([-1,1], Zdy—) is formed. For each h in this Hilbert space, We have a uniformly
1-y2
convergent Chebyshev series h(y) = 1 co + Pk=I CkTk (y), and the Chebyshev coefficients Ck =
∏ R-I Tkk(y)h(y dy = 2 R∏ cos(kθ)h(cos(θ))dθ. A fixed scale S is assumed. To approximate g(sx)
1-y
for x ∈ [0, λmax], We can shift the domain through the transformation x = a(y + 1), Where a =
λm2ax. Tk(x) = Tk(x-a) denotes the shifted Chebyshev polynomials, with x-a ∈ [-1,1]. Then we
have g(sx) = 2co + P∞=1 CkTk(x), and X ∈ [0, λmɑx], Ck = ∏ R； cos(kθ)g(s(a(cos(θ) + 1)))dθ.
we truncate the Chebyshev expansion to m terms and achieve Polynomial approximation.
Here we give the example of the ψs-1 and g(sx) = e-sx, the graph signal is f ∈ Rn. Then we can
give the fast approximation wavelets by ψ-1f = 1 cof + Pm=I CkTk(L) f. The efficient compu-
tation of Tk (L) determines the utility of this approach, where Tk (L) f = 2 (L - I，(Tk-I(Lf)-
Tk0-2(L)f.
Appendix E	Analysis on spasity of spectral transform and
Laplacian matrix
The sparsity of the graph wavelets depends on the sparsity of the Laplacian matrix and the hyper-
parameter s, We show the sparsity of spectral transform matrix and Laplacian matrix in Table 6.
Table 6: Statistics of spectral transform and Laplacian matrix on Cora
	Density	Num of Non-zero Elements
wavelet transform	^^8%~~	205,774
Fourier transform	99.1%	7,274,383
Laplacian matrix	0.15%	10,858
The sparsity of Laplacian matrix is sparser than graph wavelets, and this property limits our method,
i.e., the higher time complexity than some methods depending on Laplacian matrix and identity ma-
trix, e.g., GCN. Specifically, both our method and GCN aim to improve Spectral CNN via designing
localized graph convolution. GCN, as a simplified version of ChebyNet, leverages Laplacian ma-
trix as weighted matrix and expresses the spectral graph convolution in spatial domain, acting as
spatial-like method (Monti et al., 2017). However, our method resorts to using graph wavelets as a
new set of bases, directly designing localized spectral graph convolution. GWNN offers a localized
graph convolution via replacing graph Fourier transform with graph wavelet transform, finding good
spectral basis with localization property and good interpretability. This distinguishes GWNN from
ChebyNet and GCN, which express the graph convolution defined via graph Fourier transform in
vertex domain.
13