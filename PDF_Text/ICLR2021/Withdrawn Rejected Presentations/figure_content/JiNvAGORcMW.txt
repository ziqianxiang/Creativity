Figure 1: Model structure and CSSC concept(b) Intuition for cross-state feature matchingTo measure the improvement on generalization to unseen environment levels, We test CSSC across16 games on the OpenAI ProcGen benchmark(Cobbe et al., 2020). We see significant improvementon generalization capability for most ProcGen games in comparison with base Rainbow model.
Figure 2: Mean normalized score curve on OpenAI ProcGen environment. We normalized theepisodic return of each game by the constants from Cobbe et al. (2020) and report the mean score.
Figure 3: Learning Curve of Rainbow with bigram CSSC in 12 ProcGen Games. We report the rawepisodic return for both training and testing. All final scores are listed in Table 5. Every curve issmoothed with an exponential moving average of 0.95 to improve readability.
Figure 4: Learning Curve of Rainbow with bigram CSSC in 8 ProcGen Games. We report the meanraw episodic return for training and testing. Every mean return is shown across 3 seeds and all finalscores are listed in Table 6. Every curve is smoothed with an exponential moving average of 0.95 toimprove readability.
Figure 5: Left: Mean normalized score curve on OpenAI ProcGen environment. We normalized theepisodic return of each game by the constants from Cobbe et al. (2020) and report the mean score.
Figure 6: Representation embedding projected to 2D space by PCA. We use the same 4096 stateframes to extract representation using the bigram-CSSC and vanilla Rainbow model and display thedistribution across all state representation.
Figure 7: Neural network architecture used for the Rainbow CSSC experiment. The output of thefeature vector for each input state is taken as the state embedding for CSSC loss.
Figure 8: Neural network architecture used for the PPO CSSC experiment. The output of the featurevector for each input state is taken as the state embedding for CSSC loss.
Figure 9: Dodgeball: representation embedding projected to 2D space by PCA(a) Starpilot: Rainbow bigram CSSC	(b) Starpilot: RainbowFigure 10: Starpilot: representation embedding projected to 2D space by PCA(a) Coinrun: Rainbow bigram CSSC	(b) Coinrun: RainbowFigure 11: Coinrun: representation embedding projected to 2D space by PCAA.4 Visualization of Representation Embedding on OpenAI ProcGen GamesA.5 Generalization on ProcGen In Easy Mode for Rainbow unigram-CSSCA.6 Generalization on ProcGen in Easy Mode for PPO with CSSCA.7 Pseudocode for CSSC experimentA.8 Evaluation of bigram CSSC with Rainbow on Gym Atari Benchmark15Under review as a conference paper at ICLR 2021Algorithm 1 Rainbow + CSSC (unigram)1:2:3:4:5:6:7:
Figure 10: Starpilot: representation embedding projected to 2D space by PCA(a) Coinrun: Rainbow bigram CSSC	(b) Coinrun: RainbowFigure 11: Coinrun: representation embedding projected to 2D space by PCAA.4 Visualization of Representation Embedding on OpenAI ProcGen GamesA.5 Generalization on ProcGen In Easy Mode for Rainbow unigram-CSSCA.6 Generalization on ProcGen in Easy Mode for PPO with CSSCA.7 Pseudocode for CSSC experimentA.8 Evaluation of bigram CSSC with Rainbow on Gym Atari Benchmark15Under review as a conference paper at ICLR 2021Algorithm 1 Rainbow + CSSC (unigram)1:2:3:4:5:6:7:8:9:
Figure 11: Coinrun: representation embedding projected to 2D space by PCAA.4 Visualization of Representation Embedding on OpenAI ProcGen GamesA.5 Generalization on ProcGen In Easy Mode for Rainbow unigram-CSSCA.6 Generalization on ProcGen in Easy Mode for PPO with CSSCA.7 Pseudocode for CSSC experimentA.8 Evaluation of bigram CSSC with Rainbow on Gym Atari Benchmark15Under review as a conference paper at ICLR 2021Algorithm 1 Rainbow + CSSC (unigram)1:2:3:4:5:6:7:8:9:10:11:
Figure 12: Mean normalized score on OpenAI ProcGen environment in easy mode. Every curve issmoothed with an exponential moving average of 0.95 to improve readability.
Figure 13: Learning Curve of Rainbow with unigram CSSC in 12 ProcGen Games. We report theraw episodic return for both training and testing. Every curve is smoothed with an exponentialmoving average of 0.95 to improve readability.
Figure 14: Learning Curves of PPO in 16 ProcGen Games on training levels. Every curve is averagedacross 3 seeds and smoothed with an exponential moving average of 0.95 to improve readability.
Figure 15: Learning Curves of PPO with CSSC in 16 ProcGen Games on testing levels. Every curveis averaged across 3 seeds and smoothed with an exponential moving average of 0.95 to improvereadability.
