Figure 1: OcCo consists of two steps: (a) occlusion o(∙) of a point cloud P based on a random cameraview-point jnto a partial point cloud P, and (b) a model c(∙) that completes the occluded point cloudP so that P ≈ P. We demonstrate that the completion model c(∙) can be used as initialization fordownstream tasks, leading to faster training and better generalization over existing methods.
Figure 2: Examples of self-occluded objects generated by our method.
Figure 3: Visualisation on the learned features and embeddings of OcCo-initialised encoders. Abovehalf illustrates the location of learned features in the architecture of PointNet (Qi et al., 2017a).
Figure 4: Number of (unique) detected object parts in the feature maps of random, Jigsaw andOcCo-initialised PointNet. Digit in the bracket is the number of parts in that object category.
Figure 5: Learning curves of random, Jigsaw and OcCo , ‘10%’ is the portion of used training dataTable 5: Overall point prediction accuracy (mAcc) and mean class intersection of union (mIoU) onthe S3DIS averaged across 6-cv-fold over three runs. OcCo encoders are pre-trained on ModelNet40.
Figure 6: OcCo pre-training with PCN encoder on occluded ModelNet40.
Figure 7: OcCo pre-training with PointNet encoder on occluded ModelNet40.
Figure 8: OcCo pre-training with DGCNN encoder on occluded ModelNet40.
Figure 9: Failure completed examples during OcCo pre-training.
Figure 10: Learned features in OcCo pre-trainingD Analys is on the Effects of OcCo Pre-Training DatasetsWe compare the occluded datasets based on ModelNet40 and ShapeNet8 for the OcCo pre-training.
Figure 11: Examples from ShapeNet Occluded which fail to depict the underlying object shapesE Detailed Results on training a Linear SVM for ClassificationWe first described the benchmark datasets that are used for classification in Table 8.
