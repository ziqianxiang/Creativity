Figure 1: Evolution of synchronous (left) and asynchronous (right) SH for optimization the hy-perparameters of a MLP. x-axis: wall-clock time (150 secs), y-axis: training epochs done (logscale). Coloured lines trace training jobs for HP configurations, with marker size proportional tovalidation error (smaller is better). Lines not reaching the maximum number of authorized epochs(27) are stopped early. For synchronous SH, rungs (epochs 1, 3, 9) need to be filled completelybefore any configuration can be promoted, and each synchronization results in some idle time. Inasychronous SH, configurations proceed to higher epochs faster. Without synchronization overhead,more configurations are promoted to the highest rung in the same wall-clock time (figure best seen incolours).
Figure 2: This cartoon on toy data shows the differ-ence between the promotion and stopping variantsof SH. The three curves correspond to the evalu-ations of three configs. The blue curve reachesthe smallest rung level first, which triggers thescheduling process. While the stopping variantwould continue the evaluation (shaded blue curve),the promotion variant would stop, and proceedwith a new configuration (shaded red curve). Theevaluation of blue would only be continued onceenough datapoints at this rung level have been ob-served. As shown in the experiments, the stoppingvariant achieves often better performance in earlyiterations, whereas the promotion variant obtainsusually a better final performance.
Figure 3: Comparison of asynchronous Hyperband and SH (stopping / promotion scheduling variantsand sampling from model / random) on the MLP benchmark (top) and NASBench201 (bottom). SHwith the most aggressive bracket works as well and often better than Hyperband across all variants.
Figure 4: Top: Effect of the kernel choice on the MLP benchmark (left, left middle) and NAS-Bench201 (right middle, right). We also include ASHA (random choices) for comparison. There isnot a consistent trend across the difference kernels (note the standard error of the mean). Bottom:Comparison of ASHA and MOBSTER (stopping and promotion variant). Left: MLP on electricity(4 workers). Left Middle: NASBench201 on CIFAR-10 (8 workers). Right Middle: scaling withthe number of workers of ASHA (dashed line) and MoB ster (solid line) for stopping (left) andpromotion (right)and random sampling. Also, the most aggressive bracket, where rmin = 1 epoch, works as good oreven better than Hyperband, most distinctly for the promotion based scheduling. For the remainingexperiments we therefore use SH with a minimum rung level of rmin = 1 epoch.
Figure 5: Comparison to various baselines across multiple processes on a single instance (left) andacross instances (right) for the MLP and NASBench201 benchmarks. We performed 20 runs for eachmethod. See main text for an analysis.
Figure 6: Left: Results of the LSTM benchmark. Right: Results for the ResNet benchmark.
Figure 7:	Synchronous. Base rung of the bracket has yet to be filled (6/27). Therefore, the idle workerwill be assigned to evaluate a new configuration at this rung. Proposing this new configuration withGP-BO is straightforward, even in the presence of pending evaluations, since they are all pending atthe same rung.
Figure 8:	Synchronous, edge case. Base rung of the bracket is soon to be filled (23/27). With 4workers assigned to evaluate the last 4 configurations necessary to fill this rung, the idle worker willbe assigned to evaluating a new configuration at the base rung of the next bracket. Again, all pendingevaluations are pending at the same rung.
Figure 9: Asynchronous.
Figure 10: Comparison to various baselines across multiple processes on a single instance (left)and across instances (right) for the three different NASBench201 benchmarks. See main text for ananalysis.
