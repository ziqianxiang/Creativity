Figure 1: An illustration of our problem setup. (a) top view of the room where the agent wants to travel to aparticular location while avoiding obstacles; (b) the agent has been given the location of the positive datapairsthat are needed to be covered in its trajectory. Since the number of these observed points is low, the agent is notable to avoid the obstruction (coffee table) while forecasting its course; (c) the agent is given both the positivedatapairs which it needs to reach along with negative datapairs (area of influence is given by shaded red region)that should be avoided during the modeling of future trajectory.
Figure 2: Visualizing GP-NC regression framework: The figures compare how the SVGP regression fits usingthe classical GP framework (left) VS the GP-NC framework (right). The aim is to fit the regression targetsmarked in 'black' (positive datapairs) and avoid the targets marked in 'red’ (negative datapairs). The classicalGP framework only uses the positive datapairs whereas our proposed GP-NC framework uses both the positiveand negative datapairs for fitting the regression curve. The points in 'yellow' are the inducing points used to fitthe GP. We used two inducing points setting. Top figures: locations of inducing points were taken at the start ofcurve. Bottom figures: we randomly sampled the inducing points from the whole range of training inputs. ForGP-NC framework (right), hyper-parameters were selected as λ = 0.1 and σ∏eg = 1.2for optimization. Furthermore, recent works (Wilson & Nickisch, 2015; Wilson et al., 2015; 2016)have improved scalability by reducing the learning to O(n) and test prediction to O(1) under someassumptions.
Figure 3: Comparison on real world data: We plot test negative log-likelihoods (NLL) for 6 univariate regressiondatasets (lower is better). Results are averaged over 10 random train/test/valid splits.
Figure 4: Trajectory prediction with GP -NC regression framework: The figures compare trajectory predictionin a 2D-virtual environment using the classical GP framework (a) vs. the GP-NC framework (b,c). The caris navigating through the forest and our aim is to avoid the roadblocks marked in ‘red while maintaining thecar’s proximity to the ‘black’ trajectory markers. The classical GP framework only uses the positive datapairswhereas our proposed GP-NC framework uses both the positive & negative datapairs for prediction of agent’strajectory. (b) depicts the GP-NC framework with the hyper parameter λ = 1 (c) depicts the GP-NC frameworkwith the hyper parameter λ = 0.1datapairs as can be observed from Fig 4.b vs. Fig 4.c. However, it can be observed by juxtaposingboth the figures (Fig 4.a and Fig 4.c) that predicted mean trajectory by classical GP and GP-NC withλ = 0.1, the latter fits better to the black trajectory markers. Hence, for saftey critical applicationslike navigation GP -NC is superior than the classical GP in incorporating negative constraints.
Figure 5: RMSE plots on real world data (top - Exact GP ; middle - SVGP; bottom - PPGPR): Plots show thetest RMSE for six univariate regression datasets (lower is better). Models are fitted by using cross validation ontraining data. Convergence of GP-NC framework is consistently faster than its classical GP counterpart for allthe models.
