Figure 1: A string transformation task with 4 input-output examples a possible program in the stringtransformation DSL that is consistent with the examples.
Figure 2: High-level architecture for the Latent Programmer system. The latent predictor generatesprobabilities over latent sequences, which can be decoded into a predicted latent sequence Z0 . Z0 isfitted to a ground-truth latent sequence Z generated by a program encoder, and used during decodingto by the latent program decoder to generate programs.
Figure 3: (a): Influence of hidden size on beam-10 accuracy. (b): Beam-10 accuracy of baselinetransformer and LP by ground truth program length.
Figure 4: Illustrative string transformation problem where the ground-truth program was long buthad repetitive structure. The baseline Transformer was unable to generate the program but our LPmodel, which first predicts a coarse latent sequence, was able to.
Figure 5:	(a): Effect of latent beam size on beam-10 accuracy and number of distinct n-grams(normalized by total number of tokens). (b): Effect of latent length compression ` and vocabularysize K on beam-10 accuracy.
Figure 6:	Example problems from the Python code generation dataset.
Figure 7:	The DSL for string transformation tasks (Devlin et al., 2017)A	Extended Description of DSL and RobustFill ModelThe DSL for string transformations we use is the same as used in RobustFill (Devlin et al., 2017),and is shown in Figure 7. The top-level operator for programs in the DSL is a Concat operatorthat concatenates a random number (up to 10) of expressions ei . Each expression e can either be asubstring expression f, a nesting expression n, or a constant string c. A substring expression caneither return the substring between left k1 and right k2 indices, or between the i1-th occurence ofregex r1 and i2-th occurence of regex r2. The nesting expressions also return substrings of the input,such as extracting the i-th occurrence of a regex, but can also be composed with existing substringor nesting expressions for more complex string transformations.
Figure 8:	Latent codes and programs found by Latent Programmer in string transformation tasks.
Figure 9:	Programs found by Latent Programmer in Python code generation dataset. Red denotesares where the predicted program deviates from human code.
