Figure 1: Categoric encoding examplesThe categoric encoding defaults in general are based on assumptions of training models in the de-cision tree paradigms (e.g. Random Forest, Gradient Boosting, etc.), particularly considering thata binary representation may sacrifice compatibility for an entity embedding of categorical variables[4] as may be applied in the context of a neural network (for which we recommend a seeded repre-sentation of ‘ord3’ for ordinal encoding by frequency). The defaults for automation are all config-urable, and alternate root categories of transformations may also be specified to distinct columns tooverwrite the automation defaults.
Figure 2: String parsing for bounded sets4 Parsing Unbounded SetsThe transformations of the preceding section were somewhat constrained toward use against cate-goric sets with a bounded range of unique entries in the training data due to the complexity scalingon train set implementation. For cases where categoric sets may be presented with an unboundedrange of unique entries, such as in cases for all unique entries or otherwise unbounded, Automungeoffers a few more string parsing transformations to extract grammatical structure prior to categoricencodings.
Figure 3: Numeric extraction and search for unbounded sets5 Family Tree AggregationsAn example composition of string parsing transformation aggregations, including generations andbranches of derivations by way of entries to the family tree primitives, are now demonstrated for theroot transformation category ‘or19’ [Fig. 4], which is available for assignment to source columnsin context of an automunge(.) call. This transformation set is intended to automatically extractgrammatical context from tabular data categoric features with a bounded range of unique entries.
Figure 4: Example family tree aggregations for bounded categoric setsThe sequence of four character keys represent transformation functions based on the transformationcategories applied to a column. Note that each key represents a set of functions which may includeone for application to train/test set(s) in an automunge(.) call for initial fitting of transformations toproperties of a train set or a corresponding function for processing of a comparably formatted testset in postmunge(.) on the basis of properties from the train set. The steps of transformations foreach returned column are logged by way of transformation function specific suffix appenders to theoriginal column headers. Note also that some of the intermediate steps of transformations may notbe retained in the returned set based on presence of downstream replacement primitive entries tofamily tree primitives as described further below.
Figure 5: Demonstration of ‘or19’ returned dataFig. 5 demonstrates the numerical encodings as would be returned from the application of the ‘or19’root category to a small example feature set of categoric strings. It might be worth restating that dueto the complexity scaling of the string parsing operation this type of operation is intended preferablyfor categoric sets with a bounded range of unique entries in the train set. The composition of returnedsets are derived based on properties of the source column received in a designated train set, and thesesame bases are applied to consistently prepare data for test sets, such as sets that may be intended foran inference operation. In other words, when preparing corresponding test data, the same type andorder of columns are returned, with equivalent encodings for corresponding entries and equivalentactivations for specific string subset overlap partitions that were found in the train set.
Figure 6: Family tree primitivesTransformation category family tree sets may be passed to an automunge(.) call by way of a “trans-formdict” data structure, which is complemented by a second “processdict” data structure populatedfor each transformation category containing entries for the associated transformation functions anddata properties. The transformdict with transformation category entries to family tree primitives andcorresponding processdict transformation function entries associated with various columns returnedfrom the ‘or19’ root category set are demonstrated here [Fig. 7]. Here the single processdict entryof the transformation function associated with a transformation category is an abstraction for the setof corresponding transformation functions to be directed at train and/or test set feature sets.
Figure 7: ‘or19’ specifications7Under review as a conference paper at ICLR 20217	ExperimentsSome experiments were run to evaluate comparison between standard tabular categoric representa-tion techniques and parsed categoric encodings. The data set from the IEEE-CIS Kaggle competition(Vesta, 2019) was selected based on known instances of feature sets containing serial number entrieswhich were expected as a good candidate for string parsing.
