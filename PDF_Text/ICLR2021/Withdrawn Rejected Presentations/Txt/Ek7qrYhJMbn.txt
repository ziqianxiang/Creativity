Under review as a conference paper at ICLR 2021
Central Server Free Federated Learning over
Single-sided Trust Social Networks
Anonymous authors
Paper under double-blind review
Ab stract
Federated learning has become increasingly important for modern machine learn-
ing, especially for data privacy-sensitive scenarios. Existing federated learning
mostly adopts the central server-based architecture or centralized architecture.
However, in many social network scenarios, centralized federated learning is not
applicable (e.g., a central agent or server connecting all users may not exist, or
the communication cost to the central server is not affordable). In this paper, we
consider a generic setting: 1) the central server may not exist, and 2) the social
network is unidirectional or of single-sided trust (i.e., user A trusts user B but user
B may not trust user A). We propose a central server free federated learning al-
gorithm, named Online Push-Sum (OPS) method, to handle this challenging but
generic scenario. A rigorous regret analysis is also provided, which shows inter-
esting results on how users can benefit from communication with trusted users in
the federated learning scenario. This work builds upon the fundamental algorithm
framework and theoretical guarantees for federated learning in the generic social
network scenario.
1	Introduction
Federated learning has been well recognized as a framework able to protect data privacy Konecny
et al. (2016); Smith et al. (2017a); Yang et al. (2019). State-of-the-art federated learning adopts
the centralized network architecture where a centralized node collects the gradients sent from child
agents to update the global model. Despite its simplicity, the centralized method suffers from com-
munication and computational bottlenecks in the central node, especially for federated learning,
where a large number of clients are usually involved. Moreover, to prevent reverse engineering of
the user’s identity, a certain amount of noise must be added to the gradient to protect user privacy,
which partially sacrifices the efficiency and the accuracy Shokri and Shmatikov (2015).
To further protect the data privacy and avoid the communication bottleneck, the decentralized ar-
chitecture has been recently proposed Vanhaesebrouck et al. (2017); Bellet et al. (2018), where the
centralized node has been removed, and each node only communicates with its neighbors (with
mutual trust) by exchanging their local models. Exchanging local models is usually favored to the
data privacy protection over sending private gradients because the local model is the aggregation
or mixture of quite a large amount of data while the local gradient directly reflects only one or a
batch of private data samples. Although advantages of decentralized architecture have been well
recognized over the state-of-the-art method (its centralized counterpart), it usually can only be run
on the network with mutual trusts. That is, two nodes (or users) can exchange their local models
only if they trust each other reciprocally (e.g., node A may trust node B, but if node B does not trust
node A, they cannot communicate). Given a social network, one can only use the edges with mutual
trust to run decentralized federated learning algorithms. Two immediate drawbacks will be: (1) If
all mutual trust edges do not form a connected network, the federated learning does not apply; (2)
Removing all single-sided edges from the communication network could significantly reduce the
efficiency of communication. These drawbacks lead to the question: How do we effectively utilize
the single-sided trust edges under decentralized federated learning framework?
In this paper, we consider the social network scenario, where the centralized network is unavailable
(e.g., there does not exist a central node that can build up the connection with all users, or the
centralized communication cost is not affordable). We make a minimal assumption on the social
1
Under review as a conference paper at ICLR 2021
(a) Centralized
(c) Decentralized with singe-sided
(b) Decentralized with mutual trust trust
Figure 1: Different types of architectures.
network: The data may come in a streaming fashion on each user node as the federated learning
algorithm runs; the trust between users may be single-sided, where user A trusts user B, but user B
may not trust user A (“trust” means “would like to send information to”).
For the setting mentioned above, we develop a decentralized learning algorithm called online push-
sum (OPS) which possesses the following features:
•	Only models rather than local gradients are exchanged among clients in our algorithm. This
scheme can reduce the risk of exposing clients’ data privacy Aono et al. (2017).
•	Our algorithm removes some constraints imposed by typical decentralized methods, which
makes it more flexible in allowing arbitrary network topology. Each node only needs to
know its out neighbors instead of the global topology.
•	We provide the rigorous regret analysis for the proposed algorithm and specifically dis-
tinguish two components in the online loss function: the adversary component and the
stochastic component, which can model clients’ private data and internal connections be-
tween clients, respectively.
Notation We adopt the following notation in this paper:
•	For random variable ξt(i) subject to distribution Dt(i) , we use Ξn,T and Dn,T to denote the
set of random variables and distributions, respectively:
un,T = {ξt ^}ι<≤inn≤t^tτ,,	Dn,T = {Dt ^}ι<≤in∏≤<^tτ..
Notation Ξn,T 〜Dn,T implies ξ(i) 〜D(i) for any i ∈ [n] and t ∈ [T].
•	For a decentralized network with n nodes, we use W ∈ Rn×n to present the confusion
matrix, where Wij ≥ 0 is the weight that node i sends to node j (i, j ∈ [n]). Niout = {j ∈
[n] : Wij > 0} and Niin = {k ∈ [n] : Wki > 0} are also used for denoting the sets of in
neighbors of and out neighbors of node i respectively.
•	Norm k ∙ k denotes the '2 norm ∣∣ ∙ ∣∣2 by default. 2
2	Related Work
The concept of federated learning was first proposed in McMahan et al. (2016), which advocates a
novel learning setting that learns a shared model by aggregating locally-computed gradient updates
without centralizing distributed data on devices. Early examples of research into federated learning
also include Konecny et al. (2015; 2016), and a widespread blog article posted by Google AI MCMa-
han and Ramage (2017). To address both statistical and system challenges, Smith et al. (2017b) and
Caldas et al. (2018) propose a multi-task learning framework for federated learning and its related
optimization algorithm, which extends early works SDCA Shalev-Shwartz and Zhang (2013); Yang
(2013); Yang et al. (2013) and COCOA Jaggi et al. (2014); Ma et al. (2015); Smith et al. (2016) to
the federated learning setting. Among these optimization methods, Federated Averaging (FedAvg),
proposed by McMahan et al. (2016), beats conventional synchronized mini-batch SGD regarding
communication rounds as well as converges on non-IID and unbalanced data. Recent rigorous the-
oretical analysis Stich (2018); Wang and Joshi (2018); Yu et al. (2018); Lin et al. (2018) shows that
FedAvg is a special case of averaging periodic SGD (also called “local SGD”) which allows nodes
2
Under review as a conference paper at ICLR 2021
to perform local updates and infrequent synchronization between them to communicate less while
converging quickly. However, they cannot be applied to the single-sided trust network (asymmetric
topology matrix).
Decentralized learning is a typical parallel strategy where each worker is only required to commu-
nicate with its neighbors, which means the communication bottleneck (in the parameter server) is
removed. It has already been proved that decentralized learning can outperform the traditional cen-
tralized learning when the worker number is comparably large under a poor network condition Lian
et al. (2017). There are two main types of decentralized learning algorithms: fixed network topology
He et al. (2018), and time-varying Nedic and Olshevsky (2015); Lian et al. (2018) during training.
Wu et al. (2017); Shen et al. (2018) shows that the decentralized SGD would converge with a com-
parable convergence rate to the centralized algorithm with less communication to make large-scale
model training feasible. Li et al. (2018) provides a systematic analysis of the decentralized learning
pipeline.
Online learning has been studied for decades. It is well known that the lower bounds of online
optimization methods are O( √T) and O (log T) for convex and strongly convex loss functions re-
spectively Hazan et al. (2016); Shalev-Shwartz et al. (2012). In recent years, due to the increasing
volume of data, distributed online learning, especially decentralized methods, has attracted much
attention. Examples of these works include Kamp et al. (2014); Shahrampour and Jadbabaie (2017);
Lee et al. (2016). Notably, Zhao et al. (2019) shares a similar problem definition and theoretical
result as our paper. However, single-sided communication is not allowed in their setting, restricting
their results.
3 Problem Setting
In this paper, we consider federated learning with n clients (a.k.a., nodes). Each client can be either
an edge server or some other kind of computing device such as smart phone, which has local private
data and the local machine learning model xi stored on it. We assume the topological structure of
the network of these n nodes can be represented by a directed graph G = (nodes : [n], edges : E)
with vertex set [n] = {1, 2, . . . , n} and edge set E ⊂ [n] × [n]. If there exist an edge (u, v) ∈ E, it
means node u and node v have network connection and u can directly send messages to v.
Let xt(i) denote the local model on the i-th node at iteration t. In each iteration, node i receives a
new sample and computes a prediction for this new sample according to the current model xt(i) (e.g.,
it may recommend some items to the user in the online recommendation system). After that, a loss
function, fi,t(∙) associated with that new sample is received by node i. The typical goal of online
learning is to minimize the regret, which is defined as the difference between the summation of the
losses incurred by the nodes, prediction and the corresponding loss of the global optimal model x":
Tn
RRτ ：= XX fi,t(χ(i))- fi,t(χ*)),
t=1 i=1
where x* = arg minχ PT=I Pn=ι fi,t(x) is the optimal solution.
However, here we consider a more general online setting: the loss function of the i-th node at
iteration t is fi,t(∙; ξi,t), which is additionally parametrized by a random variable ξi,t. This ξi,t
is drawn from the distribution Di,t, and is mutually independent in terms of i and t, and we call
this part as the stochastic component of loss function fi,t(∙; ξi,t). The stochastic component can
be utilized to characterize the internal randomness of nodes’ data, and the potential connection
among different nodes. For example, music preference may be impacted by popular trends on the
Internet, which can be formulated by our model by letting Di,t ≡ Dt for all i ∈ [n] with some
time-varying distribution Dt. On the other hand, function fi,t(∙; ∙) is the adversarial component of
the loss, which may include, for example, user’s profile, location, etc. Therefore, the objective regret
naturally becomes the expectation of all the past losses:
Rτ :=	E
Ξn,T 〜Dn,T
-fi,t(x*; ξ(i)))}
(1)
with x* = argminx EΞn,T 〜Dn,T PT=I Pn=1 fi,t(X； ξ(i)).
3
Under review as a conference paper at ICLR 2021
One benefit of the above formulation is that it partially resolves the non-I.I.D. issue in federated
learning. A fundamental assumption in many traditional distributed machine learning methods is
that the data samples stored on all nodes are I.I.D., which fails to hold for federated learning since
the data on each user’s device is highly correlated to that user’s preferences and habits. However,
our formulation does not require the I.I.D. assumption to hold for the adversarial component at all.
Even though the random samples for the stochastic component still need to be independent, they are
allowed to be drawn from different distributions.
Finally, one should note that online optimization also includes stochastic optimization (i.e., data
samples are drawn from a fixed distribution) and offline optimization (i.e., data are already collected
before optimization begins) as its typical cases Shalev-Shwartz et al. (2012). Hence, our setting
covers a wide range of applications.
4 Online Push-Sum Algorithm
In this section, we define the construction of the confusion matrix and introduce the proposed algo-
rithm.
4.1	Construction of Confusion Matrix
One important parameter of the algorithm is the confusion matrix W. W is a matrix depending
on the network topology G, which means Wij = 0 if there is no directed edge (i, j) in G. If the
value of Wij is large, the node i will have a stronger impact on node j . However, W still allows
flexibility where users can specify their weights associated with existing edges, meaning that even
if there is a physical connection between two nodes, the nodes can decide against using the channel.
For example, even if (i, j) ∈ E, user still can set Wij = 0 if user i thinks node j is not trustworthy
and therefore chooses to exclude the channel from i to j .
Of course, there are still some constraints over W. W must be a row stochastic matrix (i.e., each
entry in W is non-negative, and the summation of each row is 1). This assumption is different from
the one in classical decentralized distributed optimization, which typically assumes W is symmetric
and doubly stochastic (e.g., Duchi et al. (2011)) (i.e., the summations of both rows and columns are
all 1). Such a requirement is quite restrictive, because not all networks admit a doubly stochastic
matrix (Gharesifard and Cortes (2010)), and relinquishing double Stochasticity can introduce bias
in optimization Ram et al. (2010); Tsianos and Rabbat (2012). As a comparison, our assumption
that W is row stochastic will avoid such concerns since any non-negative matrix with at least one
positive entry on each row (which is already implied by the connectivity of the graph) can be easily
normalized into row stochastic. The relaxation of this assumption is crucial for federated learning,
considering that the federated learning system usually involves complex network topology due to
its large number of clients. Moreover, since each node only needs to make sure the summation
of its out-weights is 1, there is no need for it to be aware of the global network topology, which
significantly benefits the implementation of the federated learning system. Meanwhile, requiring
W to be symmetric rules out the possibility of using asymmetric network topology and adopting
sing-sided trust, while our method does not have such restriction.
4.2	Algorithm Description
The proposed online push-sum algorithm is presented in Algorithm 1. The algorithm design mainly
follows the pattern of push-sum algorithm Tsianos et al. (2012), but here we further generalize it
into the online setting.
The algorithm mainly consists of three steps:
1.	Local update: each client i applies the current local model xt(i) to obtain the loss function,
based on which an intermediate local model z(i) 1 is computed;
t+ 2
2.	Push: the weighted variable Wij z(? 1 is sent to j for all its out neighbors j;
t+ 2 3
3. Sum: all the received Wjiz(} is summed and normalized to obtain the new model x*.
4
Under review as a conference paper at ICLR 2021
Algorithm 1 Online Push-Sum (OPS) Algorithm
Require: Learning rate γ , number of iterations
T , and the confusion matrix W.
1:	Initialize x(0i) = z0(i) = 0, ω0(i) = 1 for all
i ∈ [n]
2:	for t = 0, 1, ..., T - 1 do
3:	// For all users (say the i-th node i ∈
[n])
4:	Apply local model xt(i) and suffer loss
fi,t(x(i); ξ(i))
5:	Locally computes the intermedia vari-
able
6:	Send (WijZ(+ ι,Wjω(i)) to all j ∈
NOUt	2
7:	Update
Z(ti+)1
(i)
ωt+1
x(ti+)1
X WkiZ(A
k∈Niin
X Wkiωt(k)
k∈Niin
Z(i)
Zt+1
JiT
ωt+1
8:	end for
(i)
9:	return x to node i
It should be noted an auxiliary variables z(i) 1 and z(i+ι are used in the algorithm. Actually, they
t+ 2
are used in the algorithm to clarify the description but may be easily removed in the practical im-
plementation. Besides, another variable ωt(+i)1 is also introduced, which is the normalizing factor of
Zt(i+)1. ωt(+i)1 plays an important role in the push-sum algorithm, since W is not doubly stochastic in
our setting, and it is possible that the total weight i receives does not equal to 1. The introduction
of the normalizing factor ωt(i) helps the algorithm avoid issues brought by that W is not doubly
stochastic. Furthermore, when W becomes doubly stochastic, it can be easily verified that ωt(i) ≡ 1
(i)	(i)
and xt ≡ Zt for any i and t, then Algorithm 1 reduces to the distributed online gradient method
proposed by Zhao et al. (2019).
In the algorithm, the local data, which is encoded in the gradient fi,t(xt(i); ξt) Shokri and Shmatikov
(2015), is only utilized in updating local model. What neighboring nodes exchanges are only limited
to the local models.
4.3 Regret Analysis
In this subsection, we provide regret bound analysis of OPS algorithm. Due to the limitation of
space, the detail proof is deferred to the appendix. For convenience, we first denote
Fi,t(x) :=	E	fi,t (x; ξi,t).
ξi,t 〜Di,t
To carry out the analysis, the following assumptions are required:
Assumption 1. We make the following assumptions throughout this paper: (1) The topological
graph G is strongly connected; W is row stochastic; (2) For any i ∈ [n] and t ∈ [T], the loss
function fi,t (x; ξi,t) is convex in x; (3) The problem domain is bounded such that for any two
vectors X and y we always have ∣∣x 一 y∣∣2 ≤ R; (4) The norm of the expected gradient VFi,t (∙) is
bounded, i.e., there exist constant G > 0 such that ∣∣VFi,t(x)k2 ≤ G2 for any i, t and X; (5) The
gradient variance is also bounded by σ2, namely,
E	∣Vfi,t(x; ξi,t)-VFi,t(x)∣2 ≤ σ2.
ξi,t 〜Di,t
Here constant G provides an upper bound for the adversarial component. On the other hand, σ
measures the magnitude of stochasticity brought by the stochastic component. When σ = 0, the
problem setting simply reduces back to normal distributed online learning. The strong connectivity
assumption is necessary to ensure that the information can be exchanged between any two nodes.
As for the convexity and the domain boundedness assumptions, they are quite common in online
learning literature, such as Hazan et al. (2016).
Equipped with these assumptions, now we are ready to present the convergence result:
5
Under review as a conference paper at ICLR 2021
Theorem 2.	Ifwe set
√nR
Y =—,	=-----,
σ σ √1 + nC2 + G√nC1T
the regret of OPS can be bounded by:
(2)
(3)
RT ≤ O (nGR√T + σR(1 + PnC^ √nT),
where C1 and C2 are two constants defined in the appendix.
Note that when n = 1 and σ = 0, where the problem setting just reduces to normal online optimiza-
tion, the implied regret bound O(GRvT) exactly matches the lower bound of online optimization
Hazan et al. (2016). Moreover, our result also matches the convergence rate of centralized online
learning where q = 0 for fully connected networks. Hence, we can conclude that the OPS algorithm
has optimal dependence on T.
This bound has a linear dependence on the number of nodes n, but it is easy to understand. First, we
have defined the regret to be the summation of the losses on all the nodes. Increasing n makes the
regret naturally larger. Second, our federated learning setting is different from the typical distributed
learning in that I.I.D. assumption does not hold here. Each node contains distinct local data that
may be drawn from totally different distributions. Therefore, adding more nodes is not helpful for
decreasing the regret of existing clients.
Moreover, we also prove that the difference of the model xt(i) on each worker could be bounded
using the following theorem:
Theorem 3.	If we set γ as (2), the difference of the model xt(i) on each worker admits a faster
convergence rate than regret:
T X XXX H+1- ZtM2 ≤O (nGRT^).
i t=0
Hence, the models on all clients’ devices will finally converge to the same one with rate O(1/T).
4.4 Privacy Protection
Our proposed algorithm has several advantages concerning privacy protection.
First, as we have mentioned, OPS runs in a decentralized way and exchanges models instead of
gradients or training samples, which is already proven effective for reducing the risk of privacy
leakage Bellet et al. (2017). Second, OPS runs in a decentralized and asymmetric fashion. These
properties create difficulties for many attacking methods such as Nasr et al. (2018). In order to infer
the data of other clients, the attacker needs to know the reactions of other nodes after the attack is
injected, which is impossible when the connections are single-sided. Even though the attack will
spread among the whole network and finally return to the attacker, it is still hard for the attacker to
distinguish whether the information he receives from its neighbors is already affected by the attack
or not, since he is unaware of the global topology.
5 Experiments
We compare the performance of our proposed Online Push-Sum (OPS) method with that of Decen-
tralized Online Gradient method (DOL) and Centralized Online Gradient method (COL), and then
evaluate the effectiveness of OPS in different network size and network topology density settings.
5.1 Implementation and Settings
We consider online logistic regression with squared `2 norm regularization:
fi,t(X; ξi,t) = log (1 + exp (-yi,tA>tχ)) + 2 Ilxk2,
6
Under review as a conference paper at ICLR 2021
(a) stochastic=100% (b) stochastic=50% (c) stochastic=100%
(n = 128, #Neighb.=32) (n = 128, #Neighb.=32) (n = 20, #Neighb.=10)
Figure 2: Comparison among OPS, DOL (Decentralized Online Learning) and COL (Centralized
Online Learning)
(d) stochastic=50%
(n = 20, #Neighb.=10)
where regularization coefficient λ is set to 10-4. ξi,t is the stochastic component of the function fi,t
introduced in Section § 3, which is encoded in the random data sample (Ai,t, yi,t). We evaluate the
learning performance by measuring the average loss
1	nT
nτ EΞn,τ E E fi,t (xi,t; ξi,t),
i=1 t=1
instead of using the dynamic regret (1) directly, since the optimal reference point x* is the same for
all the methods. The learning rate γ in Algorithm 1 is tuned to be optimal for each dataset separately.
The experiment implementation is based on Python 3.7.0, PyTorch 1.2.0, NetworkX 2.3, and scikit-
learn 0.20.3. The source code along with other information concerning the experiment such as the
setting of the hyper-parameters is provided in the supplementary materials.
Dataset Experiments were run on two real-world public datasets: SUSY1 and Room-Occupancy1 2.
SUSY and Room-Occupancy are both large-scale binary classification datasets, containing
5,000,000 and 20,566 samples, respectively. Each dataset is split into two subsets: the stochas-
tic data and the adversarial data. The stochastic data is generated by allocating a fraction of samples
(e.g., 50% of the whole dataset) to nodes randomly and uniformly. The adversarial data is gener-
ated by conducting on the remaining dataset to produce n clusters and then allocating every cluster
to a node. As we analyzed previously, only the scattered stochastic data can boost the model per-
formance by intra-node communication. For each node, this pre-acquired data is transformed into
streaming data to simulate online learning.
5.2 Comparison with DOL and COL
To compare OPS with DOL and COL, a network size with 128 nodes and 20 nodes are selected
for SUSY and Room-Occupancy, respectively. For COL, its confusion matrix W is fully-connected
(doubly stochastic matrix). For DOL and OPS, they are run with the same network topology and
the same row stochastic matrix (asymmetric confusion matrix) to maintain a fair comparison. Such
asymmetric confusion is constructed by setting each node’s number of neighbors as a random value
which is smaller than a fixed upper bound and also ensures the strong connectivity of the whole
network (this upper-bound neighbor number is set to 32 for the SUSY dataset, while 10 is set for
the Room-Occupancy dataset). Since DOL typically requires the network to be the symmetric and
doubly stochastic confusion matrix, DOL is run in two settings for comparison. In the first set-
ting, in order to meet the assumption of the symmetry and doubly stochasticity, all unidirectional
connections are removed in the confusion matrix so that the row stochastic confusion matrix degen-
erates into a doubly stochastic matrix. This setting is labeled as DOL-Symm in Figure 2. In another
setting, DOL is forced to run on the asymmetric network where each node naively aggregates its
received models without considering whether its sending weights are equal to its receiving weights.
DOL-Asymm is used to label this setting in Figure 2.
As illustrated in Figure 2, in both two datasets, OPS outperforms DOL-Symm in the row stochastic
confusion matrix. This demonstrates that incorporating unidirectional communication can help to
boost the model performance. In other words, OPS gains better performance in the single-sided
1https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary.html#
SUSY
2https://archive.ics.uci.edu/ml/datasets/Occupancy+Detection+
7
Under review as a conference paper at ICLR 2021
(a) stochastic=100%
(b) stochastic=50% (c) stochastic=100% (d) stochastic=50%
Figure 3: Evaluation on different network sizes and densities
trust network under the setting of federated learning. OPS also works better than DOL-Asymm.
Although DOL-Asymm utilizes additional unidirectional connections, in some cases its performance
is even worse than DOL-Symm (e.g., Figure 2a). This phenomenon is most likely attributed to its
simple aggregation pattern, which causes decreased performance in DOL-Asymm when removing
the doubly stochastic matrix assumption. These two observations confirm the effectiveness of OPS
in a row stochastic confusion matrix, which is consistent with our theoretical analysis.
Comparing Figure 2c and Figure 2d, we also observe that when increasing the ratio of the stochastic
component, the average loss (regret) becomes smaller. It is reasonable that OPS achieves slightly
worse performance than COL because OPS works in a sparsely connected network where informa-
tion exchanging is much less than COL. We use the COL as the baseline in all experiments.
Only the number of iterations instead of the actual running time is considered in the experiment. It
is redundant to present the actual running time. Because the centralized method requires more time
for each iteration due to the network congestion in the central node, OPS usually outperforms COL
in terms of running time.
5.3	Evaluation on Different Network Sizes
Figure 3a and 3b summarizes the evaluation of OPS in different network sizes (in the SUSY dataset,
128, 256, 512, 1024 are set). The upper-bound neighbor number is aligned to the same value among
different network sizes to isolate its impact. As we can see, in every dataset, the average loss (regret)
curve in different network sizes is close on a small scale. These observations demonstrate OPS is
robust to the network size. Furthermore, the average loss (regret) is smaller in larger network size
(i.e., the curve of the n = 1024 network size is lower than others), which also demonstrates that
more stochastic samples provided by more nodes can naturally accelerate the convergence. Due to
limitation of space, the results on the other dataset is deferred to the appendix.
5.4	Evaluation on Network Density
We also evaluate the performance of OPS in different network densities. We fix the network size to
512 for SUSY dataset. Network density is defined as the ratio of the upper-bound random neighbor
number per node to the size of the network (e.g., if the ratio is 0.5 in SUSY, it means 256 is set as
the upper-bound neighbor number for each node). We can see from Figure 3c and 3d that as the
network density increased, the average loss (regret) decreased. This observation also proves that our
proposed OPS algorithm can work well in different network densities, and can gain more benefits
from a denser row stochastic matrix. This benefit can also be understood intuitively: in a federated
learning network, a user’s model performance will improve ifit communicates with more users. The
results of Room Occupancy are also deferred to the appendix.
6 Conclusions
Decentralized federated learning with single-sided trust is a promising framework for solving a wide
range of problems. In this paper, the online push-sum algorithm is developed for this setting, which
is able to handle complex network topology and is proven to have an optimal convergence rate. The
regret-based online problem formulation also extends its applications. We tested the proposed OPS
algorithm in various experiments, which have empirically justified its efficiency.
8
Under review as a conference paper at ICLR 2021
References
Aono, Y., Hayashi, T., Wang, L., Moriai, S., et al. (2017). Privacy-preserving deep learning via
additively homomorphic encryption. IEEE Transactions on Information Forensics and Security,
13(5):1333-1345.
Assran, M., Loizou, N., Ballas, N., and Rabbat, M. (2018). Stochastic gradient push for distributed
deep learning. arXiv preprint arXiv:1811.10792.
Assran, M. and Rabbat, M. (2018). Asynchronous subgradient-push. arXiv preprint
arXiv:1803.08950.
Bellet, A., Guerraoui, R., Taziki, M., and Tommasi, M. (2017). Personalized and private peer-to-peer
machine learning. arXiv preprint arXiv:1705.08435.
Bellet, A., Guerraoui, R., Taziki, M., and Tommasi, M. (2018). Personalized and private peer-to-
peer machine learning. In International Conference on Artificial Intelligence and Statistics, pages
473-481.
Caldas, S., Smith, V., and Talwalkar, A. (2018). Federated Kernelized Multi-Task Learning. The
Conference on Systems and Machine Learning, page 3.
Duchi, J. C., Agarwal, A., and Wainwright, M. J. (2011). Dual averaging for distributed opti-
mization: Convergence analysis and network scaling. IEEE Transactions on Automatic control,
57(3):592-606.
Gharesifard, B. and Cortes, J. (2010). When does a digraph admit a doubly stochastic adjacency
matrix? In Proceedings of the 2010 American Control Conference, pages 2440-2445. IEEE.
Hazan, E. et al. (2016). Introduction to online convex optimization. Foundations and TrendsR in
Optimization, 2(3-4):157-325.
He, L., Bian, A., and Jaggi, M. (2018). Cola: Decentralized linear learning. In Advances in Neural
Information Processing Systems, pages 4541-4551.
Jaggi, M., Smith, V., Takac, M., Terhorst, J., Krishnan, S., Hofmann, T., and Jordan, M. I. (2014).
Communication-efficient distributed dual coordinate ascent. In Advances in neural information
processing systems, pages 3068-3076.
Kamp, M., Boley, M., Keren, D., Schuster, A., and Sharfman, I. (2014). Communication-efficient
distributed online prediction by dynamic model synchronization. In Joint European Conference
on Machine Learning and Knowledge Discovery in Databases, pages 623-639. Springer.
Konecny, J., McMahan, H. B., Yu, F. X., Richtarik, P., Suresh, A. T., and Bacon, D.
(2016). Federated learning: Strategies for improving communication efficiency. arXiv preprint
arXiv:1610.05492.
Konecny, J., McMahan, B., and Ramage, D. (2015). Federated OptirnizationQistributed OPtimiza-
tion Beyond the Datacenter. arXiv:1511.03575 [cs, math]. arXiv: 1511.03575.
Konecny, J., McMahan, H. B., Yu, F. X., Richtarik, P., Suresh, A. T., and Bacon, D. (2016). Fed-
erated Learning: Strategies for Improving Communication Efficiency. arXiv:1610.05492 [cs].
arXiv: 1610.05492.
Lee, S., Nedic, A., and Raginsky, M. (2016). Coordinate dual averaging for decentralized online
optimization with nonseparable global objectives. IEEE Transactions on Control of Network
Systems, 5(1):34-44.
Li, Y., Yu, M., Li, S., Avestimehr, S., Kim, N. S., and Schwing, A. (2018). Pipe-sgd: A decentralized
pipelined sgd framework for distributed deep net training. In Bengio, S., Wallach, H., Larochelle,
H., Grauman, K., Cesa-Bianchi, N., and Garnett, R., editors, Advances in Neural Information
Processing Systems 31, pages 8056-8067. Curran Associates, Inc.
9
Under review as a conference paper at ICLR 2021
Lian, X., Zhang, C., Zhang, H., Hsieh, C.-J., Zhang, W., and Liu, J. (2017). Can decentralized
algorithms outperform centralized algorithms? a case study for decentralized parallel stochastic
gradient descent. In Advances in Neural Information Processing Systems, pages 5330-5340.
Lian, X., Zhang, W., Zhang, C., and Liu, J. (2018). Asynchronous decentralized parallel stochastic
gradient descent. In International Conference on Machine Learning.
Lin, T., Stich, S. U., and Jaggi, M. (2018). Don’t Use Large Mini-Batches, Use Local SGD.
arXiv:1808.07217 [cs, stat]. arXiv: 1808.07217.
Ma, C., Smith, V., Jaggi, M., Jordan, M. I., Richtarik, P., and Takac, M. (2015). Adding vs. Averag-
ing in Distributed Primal-Dual Optimization. arXiv:1502.03508 [cs]. arXiv: 1502.03508.
McMahan, B. and Ramage, D. (2017). Google AI Blog: Federated Learning: Collaborative Machine
Learning without Centralized Training Data.
McMahan, H. B., Moore, E., Ramage, D., Hampson, S., and Arcas, B. A. y. (2016). Communication-
Efficient Learning of Deep Networks from Decentralized Data. arXiv:1602.05629 [cs]. arXiv:
1602.05629.
Nasr, M., Shokri, R., and Houmansadr, A. (2018). Comprehensive privacy analysis of deep learning:
Stand-alone and federated learning under passive and active white-box inference attacks. arXiv
preprint arXiv:1812.00910.
Nedic, A. and Olshevsky, A. (2014). Distributed optimization over time-varying directed graphs.
IEEE Transactions on Automatic Control, 60(3):601-615.
Nedic, A. and Olshevsky, A. (2015). Distributed optimization over time-varying directed graphs.
IEEE Transactions on Automatic Control, 60(3):601-615.
Nedic, A. and Olshevsky, A. (2016). Stochastic gradient-push for strongly convex functions on
time-varying directed graphs. IEEE Transactions on Automatic Control, 61(12):3936-3947.
Ram, S. S., Nedic, A., and Veeravalli, V. V. (2010). Distributed stochastic subgradient projection
algorithms for convex optimization. Journal of optimization theory and applications, 147(3):516-
545.
Shahrampour, S. and Jadbabaie, A. (2017). Distributed online optimization in dynamic environments
using mirror descent. IEEE Transactions on Automatic Control, 63(3):714-725.
Shalev-Shwartz, S. et al. (2012). Online learning and online convex optimization. Foundations and
TrendsR in Machine Learning, 4(2):107-194.
Shalev-Shwartz, S. and Zhang, T. (2013). Stochastic dual coordinate ascent methods for regularized
loss minimization. Journal of Machine Learning Research, 14(Feb):567-599.
Shen, Z., Mokhtari, A., Zhou, T., Zhao, P., and Qian, H. (2018). Towards more efficient stochastic
decentralized learning: Faster convergence and sparse communication. In Dy, J. and Krause, A.,
editors, Proceedings of the 35th International Conference on Machine Learning, volume 80 of
Proceedings of Machine Learning Research, pages 4624U633, Stockholmsmassan, Stockholm
Sweden. PMLR.
Shokri, R. and Shmatikov, V. (2015). Privacy-preserving deep learning. In Proceedings of the 22nd
ACM SIGSAC conference on computer and communications security, pages 1310-1321. ACM.
Smith, V., Chiang, C.-K., Sanjabi, M., and Talwalkar, A. S. (2017a). Federated multi-task learning.
In Advances in Neural Information Processing Systems, pages 4424-4434.
Smith, V., Chiang, C.-K., Sanjabi, M., and Talwalkar, A. S. (2017b). Federated multi-task learning.
In Advances in Neural Information Processing Systems, pages 4424-4434.
Smith, V., Forte, S., Ma, C., Takac, M., Jordan, M. I., and Jaggi, M. (2016). CoCoA: A Gen-
eral Framework for Communication-Efficient Distributed Optimization. arXiv:1611.02189 [cs].
arXiv: 1611.02189.
10
Under review as a conference paper at ICLR 2021
Stich, S. U. (2018). Local SGD Converges Fast and Communicates Little.
Tsianos, K. I., Lawlor, S., and Rabbat, M. G. (2012). Push-sum distributed dual averaging for convex
optimization. In 2012 IEEE 51st IEEE Conference on Decision and Control (CDC), pages 5453-
5458. IEEE.
Tsianos, K. I. and Rabbat, M. G. (2012). Distributed dual averaging for convex optimization under
communication delays. In 2012 American Control Conference (ACC), pages 1067-1072. IEEE.
Vanhaesebrouck, P., Bellet, A., and Tommasi, M. (2017). Decentralized collaborative learning of
personalized models over networks. In International Conference on Artificial Intelligence and
Statistics (AISTATS).
Wang, J. and Joshi, G. (2018). Cooperative SGD: A unified Framework for the Design and Analysis
of Communication-Efficient SGD Algorithms.
Wu, T., Yuan, K., Ling, Q., Yin, W., and H. Sayed, A. (2017). Decentralized consensus optimization
with asynchrony and delays. IEEE Transactions on Signal and Information Processing over
Networks, PP:1-1.
Y	ang, Q., Liu, Y., Chen, T., and Tong, Y. (2019). Federated machine learning: Concept and applica-
tions. ACM Transactions on Intelligent Systems and Technology (TIST), 10(2):12.
Y	ang, T. (2013). Trading computation for communication: Distributed stochastic dual coordinate
ascent. In Advances in Neural Information Processing Systems, pages 629-637.
Y	ang, T., Zhu, S., Jin, R., and Lin, Y. (2013). Analysis of distributed stochastic dual coordinate
ascent. arXiv preprint arXiv:1312.1031.
Y	u, H., Yang, S., and Zhu, S. (2018). Parallel Restarted SGD with Faster Convergence
and Less Communication: Demystifying Why Model Averaging Works for Deep Learning.
arXiv:1807.06629 [cs, math]. arXiv: 1807.06629.
Zhao, Y., Yu, C., Zhao, P., and Liu, J. (2019). Decentralized online learning: Take benefits from
others’ data without sharing your own to track global trend. arXiv preprint arXiv:1901.10593.
A Proofs
Notations: Below we use the following notation in our proof
•	VFt(Xt) := [vFι,t (X(I)),…，VFn,t (x(n))]
•	Xt := hxt(1),xt(2), ...,x(tn)i
•	Gt：= [Vfι,t(x1; ξ1),..., Vfn,t(x* ξn)]
Here we first present the proof Theorem 2, then we will present some key lemmas along with the
proof of Theorem 3. The following theorem is the key to prove Theorem 2:
Theorem 4. For the online push-sum algorithm with step size γ > 0, it holds that
nR2
RT ≤ G2TnγC1 + σ2Tγ(1 + nC2) +、,
(4)
where
c ：=	8Cq +1 C ：=	2Cq
1	δmm(1-q)+ ,	2	δmm(1-q)
and C, q and δmin are some constants defined in later lemmas.
11
Under review as a conference paper at ICLR 2021
Proof. Since the loss function fi,t(∙) is assumed to be convex, which leads to
n
Et X fi,t (Xti);消-nFt(x*)
i=1
n
=Et X (fi,t (Xti); ξ(i)) - fi,t (x*;靖))
i=1
n
≤Et XDVfi,t (Xti)； ξ(i)
i=1
n
=Et XDVfi,t (Xti)； ξ(i)
i=1
|------------------
x(ti) -x*
,Zt- x*).
{z^^^
:=I1t
™{^™
:=I2t
—
} 1
For I2t, we have
n
Et XDVfi,t(x(i)； ξ(i)), Zt - x*E
i=1
=YEt *n X Vfi,t (x(i); ξ(i)) ,Zt - x* +
n
=2Y Et
n
=5- Et
2γ
n
YX Vfi,t (x(i);ξ(i))
i=1
n
YX Vfi,t (x(i);ξ(i))
i=1
2
+ kZt
2
+ kZt
-X*k2
-X*k2
Zt - x*
-kzt+1 -
X*k2
n
-n x vfi,t W ； ξ(i))
i=1
—
22
≤2YEt (γ2G2+ F + kzt -x*k2-kzt+1 -x*k2
Notice that for COL, we have I1t
need to bound the difference
=0 because x(i) = Zt. So for DOL, in order to bound lit, we
一 ZtIl (using Lemma 8).
n
Et XDVfi,t (x(i); ξ(i)) , x(i) - ZtE
i=1
n
=Et X (VFi,t(x" XItii- Zt)
i=1
≤Et X (α ∣∣V% (Xti))∣∣2 + 1 忖i-Zt∣∣2
i=1
12
Under review as a conference paper at ICLR 2021
Summing up the inequality above from t = 1 to t = T , we get
Tn
≤ X Et Xfα 卜 Fi,t (x(i))∣∣ + IHi)-Ztll
t=1 i=1
X (αEt kVFt(Xt)kF + 1 Et kXt- ZtkF
t=1	α
T
≤αXEt kvFt (Xt)k2F
t=1
T
≤αXEt kvFt (Xt)k2F
t=1
Choosing α = δm2YC-q) , We have
+α
+α
4γ2C2q2	X E IIG ∣∣2
δL(i-q)2 ⅛EtkGtkF
⅛SC2⅛ X (Et kvFt(Xt)kF+nσ2
Tn
X Et X<Vfi,t (x(i);或),Xf)- ZtE ≤
t=1	i=1
8nγCTqG2 2nγCqσ2T
δmin(1 - q) δmin(1 - q)
So We have
Tn
X Et X fi,t (z(i); ξ(i)) - nF(x*)
t=1	i=1
8nγCTqG2	2γCqσ2 T
δ δmin(l - q) + δmin(l - q) 十
γ2G2 +  -+ Et kzt - x*『-Et kzt+1
n
-X*k2
≤G2Tnγ
8Cq
δmin(1 - q)
+1 + σ2Tγ 1+
2nCq
δmin(1 - q)
x*『-Et ∣∣zt+1 -
x*k2)
《「2干 8 8Cq ,八, 2τ A , 2nCq 、 nR2
≤G TnY Umin(1 - q) +1J+ σTγ (1+ δmm(1 - q) ) + F
nR2
=C1nG2Tγ + (1 + nC2)σ2Tγ + ~2γ^.
Notice that Theorem 2 can be easily verified by setting Y = / 亘R ,	—
(	(	&(	√(l+ηC2)σ2 + √ηC1G2T
□
Next, We Will present tWo lemmas for our proof of Lemma 8. The proofs of folloWing tWo lemmas
can be found in existing literature Nedic and Olshevsky (2014; 2016); Assran and Rabbat (2018);
Assran et al. (2018).
Lemma 5. Under the Assumption 1, there exists a constant δmin > 0 such that for any t, the
following holds
n
X[Wt>Wt>
j=1
…W0% ≥ δmiη ≥ nn，∀i
(5)
where Wt is a row stochastic matrix.
13
Under review as a conference paper at ICLR 2021
Lemma 6. Under the Assumption 1, for any t, there always exists a stochastic vector ψ(t) and two
constants C = 4 and q = 1 - n-n < 1 such that for any s satisfying s ≤ t, the following inequality
holds
∣[wt>wt> …ws+1>ws>]ij - ψi(t)∣ ≤ Cj-S ∀i,j
where Wt is a row stochastic matrix, and ψ(t)is a vector with ψi(t)being its i-th entry.
Lemma 7. Given two non-negative sequences {at}t∞=1 and {bt}t∞=1 that satisfying
t
at = X Pt-s bs ,
s=1
(6)
with ρ ∈ [0, 1), we have
k
Dk :=Xat2
t=1
1k
≤ (1⅛ X b2.
Proof. From the definition, we have
kt
kk
k k-s
Sk=	P
t=1 s=1
kt
Dk=XXP
t-sbs =	Pt-sbs =	Ptbs
s=1 t=s
t
s=1 t=0
k
≤ X工,
≤ s=11 - P
(7)
t=1 s=1
ktt
t-sbs	P
r=1
t-rbr
=P
t=1 s=1 r=1
ktt
≤XXXP
t=1 s=1 r=1
ktt
=XXXP
t=1 s=1 r=1
2t-s-rbsbr
,2t-s-r b2 + br
2
1
≤-----
—1-P
kt
XXPt-sbs2
k
≤ (1 - PY
b2s.
s=1
Based on the above three lemmas, we can obtain the following lemma.
Lemma 8. Under the Assumption 1, the updating rule of Algorithm 1 leads to the following in-
equality
X X 2-ZtM2 ≤「XkGskF，
where γ is the step size, and C = 4, δmin ≥ n-n, q = 1 - n-n are constants. Gs is the matrix for
the stochastic gradient at time s (e.g., the i-th column is the stochastic gradient vector on node i at
time s).
Proof. The updating rule of OPS can be formulated as
Zt+1 = (Zt - γGt )W
ωt+1 = W>ωt
Xt+1 = Zt+1[diag(ωt+1 )]-1
1
□
14
Under review as a conference paper at ICLR 2021
where W is a row stochastic matrix. Xt = [xt(1) , xt(2) , ..., x(tn)] is a matrix whose each column is
xt(i) . Gt is the matrix of gradient, whose each column is the stochastic gradient at zt(i) on node i.
Zt = [zt(1), ..., zt(n)] is the matrix whose each column is zt(i).
Assuming X0 = O and ω0 = 1, then we have
t
Zt+1 =(Zt-γGt)W=...=-γXGsWt-s+1,	(8)
s=0
t
zt+1 = Zt - Ygt = ... = - X γgs,	⑼
s=0
ωt+1 = Wt+1>ω0,	(10)
where Xt = Xt 1 is the average of all variables on the n nodes, and gt = Gt 1 is the averaged
gradient. We have W1 = 1 since W is a row stochastic matrix.
For ωt+1 , according to Lemma 6, we decompose it as follows
ωt+1 =Wt+1>ω0 = [Wt+1> - ψ(t)1>]ω0 + ψ(t)1>ω0 = [Wt+1> - ψ(t)1>]1 + nψ(t), (11)
since ω0 = 1.
On the other hand, according to Lemma 5, we also have
n
ωt(+i)1 = [Wt+1>1]>ei = X[Wt+1>]ij ≥ nδmin,
j=1
(12)
where ei is a vector with only the i-th entry being 1 and 0 for others.
We need to further bound the following term
=γXs=t0
Gs Wt-s+1ei
1>Wt+1ei
=γ
t
X
s=0
nGsWt-s+1ei - Gs11>Wt+1ei
(i)
nωt+1
where the second equality is by (8), (9), and (10). We turn to bound the following term
t
X
s=0
nGsWt-s+1ei - Gs11>Wt+1ei
(i)
nωt+1
V 1
n2δmin
t
X (nGsWt-s+1ei - GsΠ>Wt+1ei)
s=0
where the first inequality is accordng to (12). Therefore, combining the results above, we can have
n
X||xt+i - zt+1
i=1
2nt
≤ n⅛ X X(nGsWiei-G"wt"
Y 2
n4δ2in
E (nGsWtfr - GsΠ>Wt+1)
s=0	|F
where the second inequality is due to Pin=1 kAei k22 = kAk2F .
≤
2
2
15
Under review as a conference paper at ICLR 2021
It remains to bound the following term
E (nGsWt-s+1 - GsΠ>Wt+1)
s=0	F
t
X (nGsWt-s+1 - Gs1[1>(Wt+1 - ψ(t)1>)> + nψ(t)>])
s=0
t	2
X (nGs[Wt-s+1 - 1ψ(t)>] - Gs11>[Wt+1 - 1ψ(t)>])
s=0	F
2
F
≤Xt nGs[Wt-s+1	-	1ψ(t)>]F +	Xt Gs11>[Wt+1 -	1ψ(t)>]F !
s=0	s=0
≤n	Xt GskFk[Wt-s+1-1ψ(t)>]F+Xt GskF k11>kF k[Wt+1 - 1ψ(t)>]F !
s=0	s=0
≤2
≤2
Xt GskFk[Wt-s+1-1ψ(t)>]F+Xt GskF k[Wt+1 - 1ψ(t)>]F !
s=0	s=0
XtnCqt-s+1kGskF+XtnCqt+1kGskF!
s=0	s=0
≤4n4C2q2Xt qt-skGskF!
where the third inequality is due to k11> kF =n	and the fourth inequality is by Lemma 6 and the
factthat kA∣∣F ≤ n ∙ maxij |Aj| if A ∈ Rn×n.
Therefore, if we combining all the above inequalities together, we can obtain
2
X 2-ZtM2 ≤ 4γ≡ (X qt-skGs kF!
Using Lemma 7, we have
Tt	2	T
X (Xqt-skGskF) ≤ (i⅛ XkGtkF，
which leads to
Tn
xxM+i-ZtM2
t=0 i=1
≤ ； X kGt kF，
which completes the proof.
□
Actually, Theorem 3 is a corollary of Lemma 8 by setting γ as the appropriate value.
B	Extra Experiment Results
B.1	EVALUATION ON Room Occupancy DATASET
Due to the limitation of space, we only present the experiment results on SUSY dataset in Section
5.3 and 5.4. Related presents on Room Occupancy is shown in Figure 4 and Figure 5.
In Figure 4, we vary the number of clients in the network, from 6 to 20. In Figure 5, the network
density is varied. All the results are consistent with the ones on SUSY.
16
Under review as a conference paper at ICLR 2021
(a) stochastic=100%
#Neighbors=2
(b) stochastic=50%
#Neighbors=2
(a) stochastic=100%
Figure 5: Evaluation on the Network Density
Figure 4: Evaluation on the Network Sizes
(b) stochastic=50%
B.2	Comparison with local online gradient descent
To justify the necessity of communication, we also compare OPS with the local online gradient
descent (local OGD), where every node trains a local model without communicating with others.
We run experiments in different ratios of the adversary and stochastic components based on settings
in Figure 2. As we can see in Figure 6, we empirically prove that communication does have benefits
in reducing regret. Moreover, as the ratio of the stochastic components increased, the regret of OPS
decreases further. This also empirically proves that the stochastic component can benefit from the
communication while the adversarial component does not.
(a) stochastic=100%
(n = 128, #Neighbors=32)
(b) stochastic=50%
(n = 128, #Neighbors=32)
Figure 6: Comparison between OPS and Local OGD.
17