Figure 1: Schematic overview of the search procedure and representational scheme. We charac-terize program synthesis as a goal-conditioned search through the space of partial programs (left),and propose a novel representational scheme (blended abstract semantics) to facilitate this searchprocess. Left: a particular trajectory through the space of partial programs, where the goal is to finda program satisfying the target image. Right: three encoding schemes for partial programs, whichcan each be used as the basis of a code-writing search policy and code-assessing value function.
Figure 2: (a) Example applications of the Embed function. (b) Neural abstract module for +. (C)Neural placeholder module encoding a HOLE with the context {x = 3}. (d) Neural abstract semanticencoding of the partial program 1 + HOLE with the context {x = 3}.
Figure 3: Example tower-building constructions.
Figure 4: Left: Overall synthesis results in the tower-building domain. We plot the percentage of testproblems solved as a function of the number of partial programs considered per synthesis problem.
Figure 5: Example programs from the list processing (left) and string editing (right) domains.
Figure 6: Synthesis results for list process-ing. Models were trained and tested on pro-grams each containing 2-3 higher order func-tions with lambdas of depth 3.
Figure 7: Synthesis results for string edit-ing. Blended semantics outperforms all base-lines, except for the execution-guided REPLmodel, which relies on domain-specific lan-guage modifications.
Figure 8: Variations on the list processing task. Top Left: using integer values in the range [-32, 32]instead of [-64, 64]. Top Right: using sample-based search instead of best-first search, including acomparison to RobustFill. Bottom Left: extending the training and testing data to allow for [int]â†’ int functions and with [-32,32] as the range. Bottom Right: the original model tested on deeperDeepCoder programs with 3-6 higher-order functions.
