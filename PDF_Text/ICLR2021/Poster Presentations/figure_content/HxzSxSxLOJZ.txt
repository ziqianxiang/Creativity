Figure 1: The Neural ODE Was trained on a clas-sification task With a small (a) and large (b) stepsize. (a) and (b) shoW the trajectories for the tWodifferent solvers. The colors of the trajectories in-dicate the label for each IVP. Panels (c) and (d)shoW the test accuracy of the Neural ODE solverusing different step sizes for testing. ( ) indicatesthe number of steps used for testing are the sameas the number of steps used for training. ()- thenumber of steps used for testing are different fromthe number of steps used for training.
Figure 2: Output of the Neural ODE block for different step sizes The mode is the same as in Figure1, trained with a step size of 1/2. The points indicate the output of the Neural ODE block, the colorof the points shows their true label, and the light color in the background indicates the label assignedby the classifier to this region. The model was tested with a step size of 1/2 in (a) and 1/4 in (b).
Figure 3: Solutions to Eq. 4 using Euler’s method with step size h = 10-2.5 (a) and h = 10-3.5(b). The points indicate where each IVP ends up in phase space and the color indicates the class thesolution belongs to. The trajectories taken by the numerical solver are shown in the color indicatingthe respective class. In (a) the black dotted line indicates one possibility how to separate the datalinearly. (c) shows for which step sizes the solution is linearly separable (1) or not (0).
Figure 4: A Neural ODE was trained with different step sizes on Sphere2 (a), (b) and differenttolerances on CIFAR10 (c), (d). The model was tested with different solvers and different stepsizes/tolerances. In (a) the model was trained using Euler’s method. Dark circles indicate that thesame solver is used for training and testing. Light data indicates different step sizes used for testing.
Figure 5: Using the step adaptation algorithm for training on CIFAR10 (a), (b). (a) shows the testaccuracy over the course of training for five different seeds. (b) shows the number of steps chosen bythe algorithm over the course of training. (c) shows the test accuracy. At certain points in time (alsomarked in (d)), the model is evaluated with solvers of smaller discretization error (orange green andred data points). Triangles correspond to a 4th order Runge Kutta method, crosses to the midpointmethod. (d) shows the number of steps chosen by the algorithm.
Figure 6: Visualizationof the vector field definedin Eq. (6)We also Want to emphasize that observed behavior for the different stepsizes is dependent on the set of IVPs. To illustrate this point We add additional IVPs to our originaldataset, Where for the neW IVP x(t = 0) = 1.4 (the additional IVPs are shoWn in orange in Figure 7).
Figure 7: Numerical solutions to Eq.6 using Euler’s method. In blue is the set of IVPs for Whichx(0) = 0 and in orange is an additional set of IVPs for Which x(t = 0) = 1.5. The ODE is solvedusing different step size, h = 1 in (a), h = 2-1 in (b), and h = 2-5 in (c).
Figure 8: The concentric sphere dataset (Sphere2).
Figure 9:	A Neural ODE was trained with different step sizes (plotted in different colors) on CIFAR10(a), (b) . The model was tested with different solvers and different step sizes. In (a) the model wastrained using Euler’s method. Results obtained by using the same solver for training and testing aremarked by dark circles. Light data indicated different step sizes used for testing. Circles correspondto Euler’s method, cross to the midpoint method and triangles to a 4th order Rung Kutta method. In(b) a 4th order Runge Kutta methods was used for training (dark circles) and testing (light circles).
Figure 10:	A Neural ODE was trained with different step sizes (plotted in different colors) on MNIST(a), (b) . The model was tested with different solvers and different step sizes. In (a) the model wastrained using Euler’s method. Results obtained by using the same solver for training and testing aremarked by dark circles. Light data indicated different step sizes used for testing. Circles correspondto Euler’s method, cross to the midpoint method and triangles to a 4th order Rung Kutta method. In(b) a 4th order Runge Kutta methods was used for training (dark circles) and testing (light circles).
Figure 11:	A Neural ODE was trained with different step sizes (plotted in different colors) on the3 dimensional concentric sphere dataset (a), (b). The model was tested with different solvers anddifferent step sizes. In (a) the model was trained using Euler’s method. Results obtained by usingthe same solver for training and testing are marked by dark circles. Light data indicated differentstep sizes used for testing. Circles correspond to Euler’s method, cross to the midpoint method andtriangles to a 4th order Rung Kutta method. In (b) a 4th order Runge Kutta methods was used fortraining (dark circles) and testing (light circles).
Figure 12:	A Neural ODE was trained with different step sizes (plotted in different colors) on the3 dimensional concentric sphere dataset (a), (b). The model was tested with different solvers anddifferent step sizes. In (a) the model was trained using Euler’s method. Results obtained by usingthe same solver for training and testing are marked by dark circles. Light data indicated differentstep sizes used for testing. Circles correspond to Euler’s method, cross to the midpoint method andtriangles to a 4th order Rung Kutta method. In (b) a 4th order Runge Kutta methods was used fortraining (dark circles) and testing (light circles).
Figure 13:	A Neural ODE was trained with different step sizes (plotted in different colors) on the10 dimensional concentric sphere dataset (a), (b). The model was tested with different solvers anddifferent step sizes. In (a) the model was trained using Euler’s method. Results obtained by usingthe same solver for training and testing are marked by dark circles. Light data indicated differentstep sizes used for testing. Circles correspond to Euler’s method, cross to the midpoint method andtriangles to a 4th order Rung Kutta method. In (b) a 4th order Runge Kutta methods was used fortraining (dark circles) and testing (light circles).
Figure 14:	A Neural ODE was trained with different step sizes (plotted in different colors) on the900 dimensional concentric sphere dataset (a), (b). The model was tested with different solvers anddifferent step sizes. In (a) the model was trained using Euler’s method. Results obtained by usingthe same solver for training and testing are marked by dark circles. Light data indicated differentstep sizes used for testing. Circles correspond to Euler’s method, cross to the midpoint method andtriangles to a 4th order Rung Kutta method. In (b) a 4th order Runge Kutta methods was used fortraining (dark circles) and testing (light circles).
Figure 15:	A Neural ODE was trained with different tolerances (plotted in different colors)onCIFAR10 (a), (b). The model was tested with different solvers and different tolerances. In (a) themodel was trained using the Fehlberg21 method. Results obtained by using the same solver fortraining and testing are marked by dark circles. Light data indicated different step sizes used fortesting. Circles correspond to Fehlberg21 method, cross to the Dopri54 method. In (b) Dopri54 wasused for training (dark circles) and testing (light circles).
Figure 16:	A Neural ODE was trained with different tolerances (plotted in different colors)on MNIST(a), (b). The model was tested with different solvers and different tolerances. In (a) the model wastrained using the Fehlberg21 method. Results obtained by using the same solver for training andtesting are marked by dark circles. Light data indicated different step sizes used for testing. Circlescorrespond to Fehlberg21 method, cross to the Dopri54 method. In (b) Dopri54 was used for training(dark circles) and testing (light circles).
Figure 17:	A Neural ODE was trained with different tolerances (plotted in different colors)on Sphere2(a), (b) and on Sphere2 using the adjoint method (c), (d). The model was tested with different solversand different tolerances. In (a), (c) the model was trained using the Fehlberg21 method. Resultsobtained by using the same solver for training and testing are marked by dark circles. Light dataindicated different step sizes used for testing. Circles correspond to Fehlberg21 method, cross to theDopri54 method. In (b), (d) Dopri54 was used for training (dark circles) and testing (light circles).
Figure 18: Using the step adaptation algorithm for training on CIFAR10. (a), (b) using Euler as trainsolver and rk4 as the test solver and (c), (d) using Midpoint as train solver and rk4 as the test solver.
Figure 19: Using the step adaptation algorithm for training on MNIST. (a), (b) using Euler as thetrain solver and Midpoints as the test solver. (a) show the test accuracy over the course of training forfive different seeds. (b) show the number of steps chosen by the algorithm over the course of training.
Figure 20: Using the step adaptation algorithm for training on Sphere2. (a), (b) using Euler as thetrain solver and Midpoints as the test solver (c), (d) using Euler as train solver and rk4 as the testsolver and (e), (f) using Midpoint as train solver and rk4 as the test solver. (a), (c), (e) show the testaccuracy over the course of training for five different seeds. (b), (d), (f) show the number of stepschosen by the algorithm over the course of training.
Figure 21: Using the tolerance adaptation algorithm for training on Sphere2 for Fehlberg21 as trainsolver, and Dopri54 as test solver (a), (b), (c). (d), (e), (f) Dopri54 was used as train and test solverwhere the test solver uses a reduced tolerance. (a), (d) shows the test accuracy over the course oftraining for five different seeds. (b), (e) shows the number of function evaluations the course oftraining. (c), (f) show the tolerance chosen by the algorithm over the course of training23Published as a conference paper at ICLR 2021D Architecture and hyper-parametersWe chose the architecture for our network similar to the architecture proposed by Dupont et al. (2019).
Figure 22: A Neural ODE was trained with different step sizes ((a), (b) 1 step, (c),(d) 2 steps, (e),(f) 4 steps) on the two dimensional concentric sphere dataset. The model was tested with differentsolvers and different step sizes. In (a), (c), (e) the model was trained using Euler’s method. Resultsobtained by using the same solver for training and testing are marked by dark circles. Light dataindicated different step sizes used for testing. Circles correspond to Euler’s method, cross to themidpoint method and triangles to a 4th order Rung Kutta method. In (b), (d), (f) a 4th order RungeKutta methods was used for training (dark circles) and testing (light circles). Excluded seeds areshown as grey circles.
Figure 23: A Neural ODE was trained with different step sizes ((a), (b) 8 steps, (c),(d) 16 steps, (e),(f) 32 steps) on the two dimensional concentric sphere dataset. The model was tested with differentsolvers and different step sizes. In (a), (c), (e) the model was trained using Euler’s method. Resultsobtained by using the same solver for training and testing are marked by dark circles. Light dataindicated different step sizes used for testing. Circles correspond to Euler’s method, cross to themidpoint method and triangles to a 4th order Rung Kutta method. In (b), (d), (f) a 4th order RungeKutta methods was used for training (dark circles) and testing (light circles). Excluded seeds areshown as grey circles.
Figure 24: A Neural ODE was trained with different step sizes ((a), (b) 64 steps, (c),(d) 128 steps, (e)256 steps) on the two dimensional concentric sphere dataset. The model was tested with differentsolvers and different step sizes. In (a), (c), (e) the model was trained using Euler’s method. Resultsobtained by using the same solver for training and testing are marked by dark circles. Light dataindicated different step sizes used for testing. Circles correspond to Euler’s method, cross to themidpoint method and triangles to a 4th order Rung Kutta method. In (b), (d) a 4th order Runge Kuttamethods was used for training (dark circles) and testing (light circles). Excluded seeds are shown asgrey circles.
Figure 25: A Neural ODE was trained with different step sizes ((a), (b) 1 step, (c),(d) 2 steps, (e), (f)4 steps) on the cifar10 dataset. The model was tested with different solvers and different step sizes.
Figure 26: A Neural ODE was trained with different step sizes ((a), (b) 8 step, (c),(d) 16 steps, (e) 32steps, (f) 64 steps) on the cifar10 dataset. The model was tested with different solvers and differentstep sizes. In (a), (c), (e), (f) the model was trained using Euler’s method. Results obtained by usingthe same solver for training and testing are marked by dark circles. Light data indicated differentstep sizes used for testing. Circles correspond to Euler’s method, cross to the midpoint method andtriangles to a 4th order Rung Kutta method. In (b), (d) a 4th order Runge Kutta methods was used fortraining (dark circles) and testing (light circles). Excluded seeds are shown as grey circles.
