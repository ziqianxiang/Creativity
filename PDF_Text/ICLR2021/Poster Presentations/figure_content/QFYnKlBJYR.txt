Figure 1: A delayedenvironment can be decomposedinto an undelayed environmentand delayed communicationdynamics.
Figure 3: Influence of actions on delayed observations in delayed environments.
Figure 2: Histogram ofreal-world WiFi delays.
Figure 5: Visual example in a 1D-world with random delays (K = 3). The original trajectory hasbeen sampled under the policy μ: ‘always go left’. The current policy is π: 'alWays go right’.
Figure 6: ω = 2, α = 3 (constant delays). With a constant total delay of five time-steps, DCAC exhibits a verystrong advantage in performance. All tested algorithms use the same rdmdp augmented observations.
Figure 7: α, ω 〜WiFi (random delays). DCAC clearly dominates the baselines. Ant became too difficult for alltested algorithms. HalfCheetah also became difficult and only dcac escapes from local minima.
Figure 8: Left: Example of Constantly Delayed MDP, with an action delay of three time-steps and anobservation delay of two time-steps. Here, actions are indexed by the time at which they started being produced.
Figure 9: ω = 0, α = 1: We illustrate the importance of the augmented observation space in delayedsettings using our simplest task (constant 1-step action delay). Even with this small 1-step constantdelay, the delayed observations are not Markov and a naive algorithm using only these observations(here: SAC naive) has near-random results. By comparison, an algorithm using the RDMDPaugmented observations instead (here: sac) is able to learn in delayed environments.
Figure 10: ω = 0, α = 1: This specific setting is equivalent to the RTRL setting (Ramstedt & Pal,2019), in which dcac reduces to the vanilla rtac algorithm (without output normalization andmerged networks). dcac (rtac) slightly outperforms sac in this setting.
Figure 11: ω = 1, α = 2: In this more difficult setting (total constant delay of 3 instead of 1), DCACstarts really showing its potential, clearly outperforming all other approaches.
Figure 12: ω ∈ [0; 2], α ∈ [1; 3] (uniformly sampled delays): This experiment is perhaps even moredifficult than the WiFi experiment featured in the main paper, because it gives equal probability to allpossible delays in the specified ranges (but delays are smaller here which makes it easier for rtac,because these delays are closer to 1). All tested approaches fail on randomly delayed Ant. For othertasks, the advantage of dcac is very clear over sac.
