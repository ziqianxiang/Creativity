Published as a conference paper at ICLR 2021
Interactive Weak Supervision:
Learning Useful Heuristics for Data Labeling
Benedikt Boecking1, Willie Neiswanger2, Eric P. Xing1, & Artur Dubrawski1
1 Carnegie Mellon University
{boecking,epxing,awd}@cs.cmu.edu
2Stanford University
neiswanger@cs.stanford.edu
Ab stract
Obtaining large annotated datasets is critical for training successful machine learn-
ing models and it is often a bottleneck in practice. Weak supervision offers a
promising alternative for producing labeled datasets without ground truth annota-
tions by generating probabilistic labels using multiple noisy heuristics. This process
can scale to large datasets and has demonstrated state of the art performance in
diverse domains such as healthcare and e-commerce. One practical issue with
learning from user-generated heuristics is that their creation requires creativity,
foresight, and domain expertise from those who hand-craft them, a process which
can be tedious and subjective. We develop the first framework for interactive weak
supervision in which a method proposes heuristics and learns from user feedback
given on each proposed heuristic. Our experiments demonstrate that only a small
number of feedback iterations are needed to train models that achieve highly com-
petitive test set performance without access to ground truth training labels. We
conduct user studies, which show that users are able to effectively provide feedback
on heuristics and that test set results track the performance of simulated oracles.
1 Introduction
The performance of supervised machine learning (ML) hinges on the availability of labeled data
in sufficient quantity and quality. However, labeled data for applications of ML can be scarce, and
the common process of obtaining labels by having annotators inspect individual samples is often
expensive and time consuming. Additionally, this cost is frequently exacerbated by factors such as
privacy concerns, required expert knowledge, and shifting problem definitions.
Weak supervision provides a promising alternative, reducing the need for humans to hand label large
datasets to train ML models (Riedel et al., 2010; Hoffmann et al., 2011; Ratner et al., 2016; Dehghani
et al., 2018). A recent approach called data programming (Ratner et al., 2016) combines multiple
weak supervision sources by using an unsupervised label model to estimate the latent true class label,
an idea that has close connections to modeling workers in crowd-sourcing (Dawid & Skene, 1979;
Karger et al., 2011; Dalvi et al., 2013; Zhang et al., 2014). The approach enables subject matter
experts to specify labeling functions (LFs)—functions that encode domain knowledge and noisily
annotate subsets of data, such as user-specified heuristics or external knowledge bases—instead of
needing to inspect and label individual samples. These weak supervision approaches have been used
on a wide variety of data types such as MRI sequences and unstructured text, and in various domains
such as healthcare and e-commerce (Fries et al., 2019; HaIPem et al., 2014; Bach et al., 2019; Re
et al., 2020). Not only does the use of multiple sources of weak supervision provide a scalable
framework for creating large labeled datasets, but it can also be viewed as a vehicle to incorPorate
high level, concePtual feedback into the data labeling Process.
In data Programming, each LF is an imPerfect but reasonably accurate heuristic, such as a Pre-trained
classifier or keyword lookuP. For examPle, for the PoPular 20 newsgroups dataset, an LF to identify
the class ‘sci.space’ may look for the token ‘launch’ in documents and would be right about 70%
of the time. While data Programming can be very effective when done right, exPerts may sPend a
significant amount of time designing the weak supervision sources (Varma & Re, 2018) and must
1
Published as a conference paper at ICLR 2021
An LF family generates a large set L
of candidate heuristics (LFS) for an
unlabeled dataset X
Interactive Weak Supervision (IWS)
proposes LFs from L to experts and
learns from feedback on these LFs
Figure 1: Interactive Weak Supervision (IWS) helps experts discover good labeling functions (LFs).
IWS chooses a final set of LFs, which
are used to estimate labels for X and
train an end classifier
often inspect samples at random to generate ideas (Cohen-Wang et al., 2019). In our 20 newsgroups
example, we may randomly see a document mentioning ‘Salman Rushdie’ and realize that the
name of a famous atheist could be a good heuristic to identify posts in ‘alt.atheism’. While such
a heuristic seems obvious after the fact, we have to chance upon the right documents to generate
these ideas. In practice, coming up with effective LFs becomes difficult after the first few. Substantial
foresight (Ramos et al., 2020) is required to create a new function that applies to a non-negligible
subset of given data, is novel, and adds predictive value.
We propose a new approach for training supervised ML models with weak supervision through an
interactive process, supporting domain experts in fast discovery of good LFs. The method queries
users in an active fashion for feedback about candidate LFs, from which a model learns to identify
LFs likely to have good accuracy. Upon completion, our approach produces a final set of LFs. We
use this set to create an estimate of the latent class label via an unsupervised label model and train
a final, weakly supervised end classifier using a noise aware loss function on the estimated labels
as in Ratner et al. (2016). The approach relies on the observation that many applications allow for
heuristics of varying quality to be generated at scale (similar to Varma & Re (2018)), and that experts
can provide good judgment by identifying some LFs that have reasonable accuracy. The full pipeline
of the proposed approach, termed Interactive Weak Supervision (IWS)1, is illustrated in Fig. 1. Our
contributions are:
1.	We propose, to the best of our knowledge, the first interactive method for weak supervision in
which queries to be annotated are not data points but labeling functions. This approach automates
the discovery of useful data labeling heuristics.
2.	We conduct experiments with real users on three classification tasks, using both text and image
datasets. Our results support our modeling assumptions, demonstrate competitive test set perfor-
mance of the downstream end classifier, and show that users can provide accurate feedback on
automatically generated LFs.
3.	In our results, IWS shows superior performance compared to standard active learning, i.e. we
achieve better test set performance with a smaller number of queries to users. In text experiments
with real users, IWS achieves a mean test set AUC after 200 LF annotations that requires at least
three times as many active learning iterations annotating data points. In addition, the average user
response time for LF queries was shorter than for the active learning queries on data points.
2	Related Work
Active strategies for weak supervision sources have largely focused on combinations of data pro-
gramming with traditional active learning on data points, while our work has similarities to active
learning on features (Druck et al., 2009) and active learning of virtual evidence (Lang & Poon, 2021).
In Nashaat et al. (2018), a pool of samples is created on which LFs disagree, and active learning
strategies are then applied to obtain labels for some of the samples. In Cohen-Wang et al. (2019),
samples where LFs abstain or disagree most are selected and presented to users in order to inspire
the creation of new LFs. In Hancock et al. (2018), natural language explanations provided during
text labeling are used to generate heuristics. The proposed system uses a semantic parser to convert
explanations into logical forms, which represent labeling functions.
1Code is available at https://github.com/benbo/interactive-weak-supervision
2
Published as a conference paper at ICLR 2021
Prior work has emphasized that LFs defined by experts frequently have a recurring structure in which
elements are swapped to change the higher level concept a function corresponds to (Varma & Re,
2018; Varma et al., 2017; Bach et al., 2019). As an example, in tasks involving text documents,
LFs often follow a repetitive structure in which key terms or phrases and syntactical relationships
change, e.g. mentions of specific words (Varma & Re, 2018; Cohen-Wang et al., 2019; Varma et 1
2019). Prior work relies on this observation to create heuristic generators (Varma & Re, 2018), LF
templates (Bach et al., 2019), and domain-specific primitives (Varma et al., 2017). In particular, in
a semi-supervised data programming setting, Varma & Re (2018) propose a system for automatic
generation of labeling functions without user interaction, by using a small set of labeled data.
Additional related work has investigated weak supervision for neural networks in information
retrieval (Dehghani et al., 2017; Zamani et al., 2018; Zamani & Croft, 2018), the modeling of
dependencies among heuristics in data programming (Bach et al., 2017; Varma et al., 2019), the
multi-task data programming setting (Ratner et al., 2019), handling of multi-resolution sources (Sala
et al., 2019), the use of noisy pairwise labeling functions (Boecking & Dubrawski, 2019), addressing
latent subsets in the data (Varma et al., 2016), LFs with noisy continuous scores (Chatterjee et al.,
2020), and fast model iteration via the use of pre-trained embeddings (Chen et al., 2020).
3	Methods
We propose an interactive weak supervision (IWS) approach to assist experts in finding good labeling
functions (LFs) for training a classifier on datasets without ground truth labels. We will first describe
the general problem setting of learning to classify without ground truth samples by modeling multiple
weak supervision sources, as well as the concept of LF families. We then dive into the details of the
proposed IWS approach. For brevity, we limit the scope of the end classifier to binary classification,
but the presented background and ideas do extend to the multi-class settings.
3.1	Preliminaries
Learning with Multiple Weak Supervision Sources Assume each data point x ∈ X has a latent
class label y* ∈ Y = {-1,1}. Given n unlabeled, i.i.d. datapoints X = {χi}n=ι, our goal is to train
an end classifier f : X → Y such that f (x) = y*. In data programming (Ratner et al., 2016; 2020),
a user provides m LFs {λj}jm=1, where λj : X → Y ∪ {0}. An LF λj noisily labels the data with
λj (x) ∈ Y or abstains with λj (x) = 0. The corresponding LF output matrix is Λ ∈ {-1, 0, 1}n×m,
where Λi,j = λj(xi). In this paper, we assume that each LF λj has the same accuracy on each class,
αj = P(λj(x) = y*∣λj(x) = 0), where accuracy is defined on items where j does not abstain.
Further, we denote by lj = P(λj (x) 6= 0) the LF propensity (sometimes called LF coverage), i.e.
the frequency at which LF j does not abstain.
In data programming, an unsupervised label model pθ(Y, Λ) produces probabilistic estimates of the
latent class labels Y * = {yi*}in=1 using the observed LF outputs Λ by modeling the LF accuracies,
propensities, and possibly their dependencies. A number of label model approaches exist in the crowd-
sourcing (Dawid & Skene, 1979; Zhang et al., 2014) and the weak supervision literature (Ratner
et al., 2020). In this paper, we use a factor graph as proposed in Ratner et al. (2016; 2020) to
obtain probabilistic labels by modeling the LF accuracies via factor φAjc(Λ, Y)，l{Λj = yi}
and labeling propensity by factor φLab(Λ, Y)，l{Λj = 0}, and for simplicity assume LFs are
independent conditional on Y . The label model is defined as
pθ(Y,Λ) , Zθ-1 exp Xθ>φi(Λi,yi) ,	(1)
where Zθ is a normalizing constant and φi(Λi, yi) defined to be the concatenation of the factors for
all LFs j = 1, . . . , m for sample i. We learn θ by minimizing the negative log marginal likelihood
given the observed Λ. Finally, following Ratner et al. (2016) an end classifier f is trained using
probabilistic labels pθ(Y∣Λ).
Labeling Function Families We define LF families as sets of expert-interpretable LFs described
by functions zφ : X 7→ {-1, 0, 1}, for parameters φ ∈ Φ. An example are shallow decision trees
zφ parameterized by variables and splitting rules φ (Varma & Re, 2018), or a function zφ defining a
regular expression for two words where φ parameterizes the word choices from a vocabulary and
3
Published as a conference paper at ICLR 2021
the target label. Given such an LF family, we can generate a large set of p candidate heuristics
L = {λj (x) = zφj (x)}jp=1, where φj ∈ Φ, e.g. by sampling from Φ and pruning low coverage
candidates. These families often arise naturally in the form of LFs with repetitive structure that
experts write from scratch, where template variables—such as keywords—can be sampled from the
unlabeled data to create candidates. For text, we can find n-grams within a document frequency range
to generate key term lookups, fill placeholders in regular expressions, or generate shallow decision
trees (Ratner et al., 2016; Varma & Re, 2018; Varma et al., 2019). For time series, We can create a
large set of LFs based on motifs (Lonardi & Patel, 2002) or graphs of temporal constraints (Guillame-
Bert & DubraWski, 2017). For images, We can create a library of pre-trained object detectors as
in Chen et al. (2019), or in some applications combine primitives of geometric properties of the
images (Varma & Re, 2018).
An LF family has to be chosen With domain expert input. Compared to standard data programming,
the burden of creating LFs from scratch is shifted to choosing an appropriate LF family and then
judging recommended candidates. We argue that domain experts often have the foresight to choose
an LF family such that a sufficiently sized subset of LFs is predictive of the latent class label. Such
LF families may not exist for all data types and classification tasks. But When they exist they offer
the opportunity to quickly build large, labeled datasets. Once created, it is reasonable to expect that
the same LF generation procedure can be reused for similar classification tasks Without additional
effort (e.g. We use a single LF family procedure for all text datasets in our experiments).
3.2	Interactive Weak Supervision
Instead of having users provide m good Weak supervision sources up front, We Want to assist users in
discovering them. Successful applications of data programming have established that human experts
are able to construct accurate LFs from scratch. Our Work leverages the assumption that human
experts can also judge these properties When presented With pre-generated LFs of the same form.
Suppose again that We have an unlabeled dataset X = {xi}in=1, and that our goal is to train an end
classifier f without access to labels Y * = {y*}n=ι. Assume also that we defined a large pool of P
candidate LFs L = {λj(x)}jp=1 from an LF family (folloWing Sec. 3.1), of varying accuracy and
coverage. In IWS, our goal is to identify an optimal subset of LFs L* ⊂ L to pass to the label model
in Eq. (1). Below, we will quantify how L* depends on certain properties of LFs. While we can
observe some of these properties—such as coverage, agreement, and conflicts—an important property
that we cannot observe is the accuracy of each LF.
Our goal will thus be to infer quantities related to the latent accuracies αj ∈ [0, 1] of LFs λj ∈ L,
given a small amount expert feedback. To do this, we define an expert-feedback model, which
can be used to infer LF accuracies given a set of user feedback. To efficiently train this model, our
IWS procedure sequentially chooses an LF λj ∈ L and shows a description of λj to an expert, who
provides binary feedback about λj . We follow ideas from active learning for sequential decision
making under uncertainty, in which a probabilistic model guides data collection to efficiently infer
quantities of interest within T iterations. After a sequence of feedback iterations, we use the expert-
feedback model to provide an estimate L ⊂ L of the optimal subset L*. The label model then uses L
to produce a probabilistic estimate of Y*, which is used to train the end classifier f. The full IWS
procedure is illustrated in Fig. 1 and described in detail below.
Expert-Feedback Model We first define a generative model of human expert feedback about LFs,
given the latent LF accuracies. This model will form the basis for an online procedure that selects a
sequence of LFs to show to human experts. We task experts to classify LFs as either useful or not
useful uj ∈ {0, 1}, corresponding to their belief that LF λj is predictive of Y* at better than random
accuracy for the samples where λj does not abstain. Note that prior data programming work (Ratner
et al., 2016; 2019; Dunnmon et al., 2020; Saab et al., 2020) assumes and demonstrates that experts
are able to use their domain knowledge to make this judgment when creating LFs from scratch. We
model the generative process for this feedback and the latent LF accuracies as, for j = 1, . . . , t:
Uj 〜BernoUlli(Vj), Vj = hω(λj), ω 〜Prior(∙)	(2)
where vj can be viewed as the average probability that a human will label a given LF λj as uj = 1,
and hω (λj) is a parameterized function (such as a neural network), mapping each LF λj to Vj .
Finally, to model the connection between accuracy αj and Vj, we assume that Vj = g(αj), where
g : [0, 1] → [0, 1] is a monotonic increasing function mapping unknown LF accuracy αj to Vj.
4
Published as a conference paper at ICLR 2021
After t queries of user feedback on LFs, we have produced a query dataset Qt = {(λj , uj)}tj=1
Given Qt , we infer unknown quantities in the above model, which are used to choose the next LF λj
to query, by constructing an acquisition function 夕t : L → R and optimizing it over λ ∈ L.
Acquisition Strategy and Final Set of LFs To derive an online procedure for our user queries
about LFs, We need to define the properties of the ideal subset of generated LFS L ⊂ L which We
want to select. Prior data programming work of Ratner et al. (2016; 2019; 2020) with label models as
in Eq. (1) does not provide an explicit analysis of ideal metrics of LF sets and their trade-offs to help
define this set. We provide the following theorem, which will motivate our definition for L.
Theorem 3.1. Assume a binary classification setting, m independent labeling functions with accuracy
αj ∈ [0, 1] and labeling propensity lj ∈ [0, 1]. Fora label model as in Eq. (1) with given label model
parameters θ ∈ R2m, andfor any i ∈ {1,..., n},
P(0i =第)≥ 1 - exp
(j θj (2j 1)j )2
2∣∣θ(1)∣∣2
where θ(I) are the m weights of φACC, and y% ∈ { — 1,1} is the label model estimatefor y*.
Proof. The proof is given in Appendix C.	□
This theorem indicates that one can rank LFs according to (2αj - 1)lj where αj, lj are the unknown
accuracy and observed coverage of LF j , respectively. We provide additional analysis in Appendix C.
Our analysis further suggests the importance of obtaining LFs with an accuracy gap above chance.
Intuitively, we do not want to add excessive noise by including LFs too close to random. Below, we
assume that our final set of LFs is sufficient to accurately learn label model parameters θ, and leave
analysis of the influence of additional LF properties on learning θ to future work.
To define the ideal final subset of LFs, we distinguish three scenarios: (A) there are no restrictions on
the size of the final set and any LF can be included, (B) the final set is limited in size (e.g. due to
computational considerations) but any LF can be included, (C) only LFs inspected and validated by
experts may be included, e.g. due to security or legal considerations.
For each of these scenarios, at each step t we maximize an acquisition function over the set of
candidate LFs, i.e. compute λt = arg maXλ∈L∖Qt-1 夕t(λ). We then query a human expert to obtain
(λt, ut) and update the query dataset Qt = Qt-1 ∪ {(λt, ut)}. After a sequence of T queries we
return an estimate of L, denoted by L. The corresponding LF output matrix Λ comprised of all
λj ∈ L, is then used to produce an estimate Y of the true class labels Via the label model Pθ(Y∣Λ).
Finally, a noise-aware discriminative end classifier f is trained on (X, Y).
Scenario (A): Unbounded LF Set. In the absence of restrictions on the final set of LFs, our analysis in
Appendix C indicates that the ideal subset of LFs L includes all those with accuracy greater than a
gap above chance, i.e. αj> r > 0.5. Thus, we define the optimal subset in this scenario as
L = {λj ∈ L : αj >r} .	(3)
This is a variation of the task of active level set estimation (LSE), where the goal is to identify all
elements in a superlevel set of L (Zanette et al., 2018; Gotovos, 2013; Bryan et al., 2006). Thus,
at each step t we use the straddle acquisition function (Bryan et al., 2006) for LSE, defined for a
candidate λj∈ L \ Qt-1 to score LFs highest that are unknown and near the boundary threshold r:
夕LSE(，j) = 1.96 σj(Qt-1) — lμj(Qt-I) - r|	(4)
where σj (Qt-I) = ,Var[p(αj∣Qt-ι)] is the standard deviation and μj (Qt-I) = E[p(αj ∣Qt-ι)] the
mean of the posterior LF accuracy. At the end of Sec. 3.2 we describe how we perform approximate
inference of p(αj ∣Qt-ι) via an ensemble model. After a sequence of T queries we return the
following estimate of L*:
L = {λj ∈ L : μj (Qt) > r} .	(5)
We denote the algorithm for scenario (A) by IWS-LSE-a. See Algorithm 1 for pseudocode describing
this full IWS-LSE-a procedure. In our experiments, we set r = 0.7, though an ablation study shows
5
Published as a conference paper at ICLR 2021
that IWS-LSE works well for a range of thresholds r > 0.5 (Appendix B.6, Fig. 9). Note that the
LSE acquisition function aims to reduce uncertainty around r, and therefore tends to explore LFs that
have coverage on parts of Y that we are still uncertain about.
Scenario (B): Bounded LF Set. If the final set is restricted in size to m LFs, e.g. due to computational
considerations when learning the label model in Eq. (1), we need to take the trade-off of LF accuracy
and LF coverage into account. Let lj be the observed empirical coverage of LF λj . We want to
identify LFs with accuracy above r and rank them according to their accuracy-coverage trade-off,
thus our analysis in the appendix suggests the optimal subset is
L
arg max ɪs (ɪ(ɑj>r}(2 * * * αj - I* ) * lj).
D⊆L,∣D∣=mλj ∈d'	)
(6)
Since the LF accuracy-coverage trade-off only comes into effect if αj > r, this yields the
same acquisition function 夕LSE in Eq. (4), and we then select the final set as L= {λj- ∈ D :
argmaxD⊆L,∣D∣=mΣλj-∈D(1{"j(Qτ)>r}(2 * 〃j(QT) - 1) * Ij)} WhiCh COrreSPOndS tθ a S * *lmPIe
thresholding and sorting operation. We denote the algorithm for scenario (B) by IWS-LSE-ac.
Scenario (C): Validated LF Set. Finally, in some aPPlication scenarios, only LFs insPected and
validated by experts should be used to estimate Y*, e.g. due to security or legal considerations. An
LF j is validated if it is shown to an exPert who then resPonds with Uj = 1. This leads to an active
search problem (Garnett et al., 2015) where our aim is to identify a maximum number of validated
LFs (i.e. U = 1) in L given a budget of T user queries, i.e. to compute
LAS = arg max	Uj,	L = {λj ∈ QT : Uj = 1}.
D⊂L,D∣=τλj ∈d
(7)
As in (Garnett et al., 2015; Jiang et al., 2017), we use a one-step look ahead active search acquisition
function defined for a candidate λj ∈ L \ Qt-1 to be the posterior probability that the usefulness
label Uj is positive, i.e.夕AS(λj) = μj(Qt-1). We denote the algorithm for scenario (C) by IWS-AS.
Approximate Inference Details We now
describe how we use our expert-feedback
model in Eq. (2) to infer p(αj∙|Qt), a quan-
tity used in the acquisition functions and final
set estimates. Recall that we defined a gener-
ative model of human feedback Uj on query
LF λj with latent variables vj and ω . We as-
sumed a connection between vj and the latent
LF accuracy αj via a monotonic increasing
function αj = g(vj). Similar to existing work
on high dimensional uncertainty estimation
(Beluch et al., 2018; Chitta et al., 2018), we
-~ -
1
2
3
4
5
6
use an ensemble {h幻⑸}S=ι of S neural networks hω with parameters ω to predict Uj given input
λj. To perform this prediction, we need a feature representation τ(λj) for LFs that is general and
works for any data type and task. To create these features, we use the LF output over our unlabeled
dataset τ0(λj) = (λj(x1), . . . , λj(xn)). We then project τ0(λj) to d0 dimensions using PCA for a
final feature representation τ(λj), which is given as input to each hω. Our neural network ensemble
can now learn functions h : Rd → [0,1], which map from LF features T(λj) to Vj = P(Uj = 1∣Qt).
This yields an ensemble of estimates for vj, and through g-1, of αj. These are treated as approximate
samples from p(aj∙∣Qt), and used to form sample-estimates used in the acquisition functions.
Algorithm 1: Interactive Weak Supervision
(IWS-LSE-a).
Input: L: set of LFs, T: max iterations.
Qo — 0
for t = 1, 2, . . . , T do
λt — argmaχλ∈L∖Qt-ι 中t(λ) . Eq.(4)
Ut J ExpertQuery(λt)
Qt — Qt-I ∪ {(λt, Ut)}
end
L J {λj ∈ L : E[p(αj- |Qt)] > r} . Eq. (5)
7
〜
4	Experiments
Our experiments show that heuristics obtained via a small number of iterations of IWS can be used to
train a downstream end classifier f with highly competitive test set performance. We first present
results obtained with a simulated IWS oracle instead of human users. Oracle experiments allow us
to answer how our method would perform if users had perfect knowledge about LF accuracies. We
then show results from a user study on text data in which the query feedback is given by humans. In
Appendix B.1 we provide results of a user study on images, using image based LFs. A comprehensive
description of the datasets and implementation details can be found in Appendix B.2.
6
Published as a conference paper at ICLR 2021
0
50
100
150
200
Number of annotations
IMDB
Bias Bios： journalist or photographer
1.0
0.9
0.8
0.7
0.5
50
0
50
100
150
200
Bias Bios: professor or physician
1.0
0.9
0.8
D.7
50
100
150
50
100
150
200
Number of annotations
Number of annotations
----Active learning
All ground truth labels
+ IWS-LSE a
+ IWS-LSE-ac, m = 100
-!-■ SnubaZReef
100
150
Bias Bios: professor or teacher

Figure 2: Test set AUC of end classifiers vs. number of iterations. IWS-LSE is compared to active
learning, Snuba, and to using all training ground truth labels. Note that one iteration in this plot
corresponds to one expert label. A comparison of true user effort needed to answer each type of query
(label for one sample vs. label for one LF) will vary by application.
Datasets Text Classification: We create six binary text classification tasks on the basis of three
public datasets: Amazon reviews (He & McAuley, 2016), IMDB reviews (Maas et al., 2011), and
BiasBios biographies (De-Arteaga et al., 2019). The tasks are chosen such that most English speakers
can provide sensible expert feedback on LFs, for ease of reproducibility.
Cross-modal classification: As in Varma & Re (2018), We take the COCO dataset (Lin et al., 2014)
and generate LFs over captions, while classification is performed on the associated images. The two
binary tasks are to identify a ‘person’ in an image, and to identify ‘sports’ in an image.
Image classification: For image classification tasks With image LFs, We use the COCO dataset and
create tWo binary classification tasks to identify ‘sports’ in an image and ‘vehicle’ in an image. For
these image-only experiments, We generate nearest-neighbor based LFs directly on the images.
Approaches All approaches train the same doWnstream end classifier f on the same inputs X .
We shoW results for IWS-LSE-a (unbounded LF set), IWS-LSE-ac (bounded LF set), and IWS-AS
(validated LF set). For IWS-LSE-ac, We bound the size of the final set of LFs at each iteration t
by m = Pt-1 Ui + m, i.e. the number of LFs so far annotated as u = 1 plus a constant m. . We
compare the test set performance of IWS to a set of alternatives including (1) annotation of samples
via active learning (uncertainty sampling) by a noiseless oracle, (2) the Snuba system (Varma &
Re, 2018), and (3) using all ground truth training labels. In Appendix B.3 we provide additional
results comparing IWS to itself using a random acquisition function (IWS-random). In our figures,
annotations on the x-axis correspond to labeled samples for Snuba and active learning, and to labeled
LFs for IWS. We note that this head to head comparison of user effort is application dependent. We
provide a timing study to showcase the effort required to carry out IWS versus labeling of samples in
our specific user experiments on text in Table 1.
LF Families For text tasks, prior work such as Ratner et al. (2020) and Varma et al. (2019)
demonstrates that word and phrase LFs can provide good weak supervision sources. To generate
LFs, we define a uni-gram vocabulary over all documents and discard high and low frequency
terms. We then exhaustively generate LFs from an LF family zφ which outputs a target label if a
uni-gram appears in a document, where φ specifies the uni-gram and target label. We also evaluated
combinations of higher-order n-grams, but did not observe a significant change in performance.
For COCO images, it is difficult to obtain strong domain primitives to create weak supervision
sources, even for data programming from scratch. We hence choose the images and their embeddings
themselves to do this job for us, by relying on k-nearest neighbor functions. To generate LFs with
high coverage, we first create small, unique clusters of up to k1 mutual nearest neighbors (MkNN)2.
2Image A is a k1 nearest neighbor of image B, and image B is also a k1 nearest neighbor of image A.
7
Published as a conference paper at ICLR 2021
Number of labeling functions annotated
Figure 3: Human user study, text data. Top: Test AUC of end classifiers trained on soft labels
obtained via IWS-AS. Test set performance of humans closely tracks performance using a simulated
oracle after 〜100 iterations. Bottom: scatter plots of human responses to queries showing the true LF
accuracy vs LF coverage by one user (lower left) and all users (lower middle and lower right). An
‘unsure’ response does not provide a label to an LF query but is counted as an annotation.
For each member of a cluster, we then find the k2 nearest neighbors, and keep ones shared by at
least one other cluster member. Finally, each extended cluster defines an LF, which assigns the same
label to each member of the extended cluster. The MkNN symmetry produces good initial clusters
of varying size, while the second kNN step produces LFs with large and varying coverage. User
experiments in Appendix B.1 show that real users can judge the latent LF usefulness quickly by
visually inspecting the consistency of the initial cluster and a small selection of the cluster nearest
neighbors.
4.1	Oracle experiments
The simulated oracle labels an LF as useful if it has an accuracy of at least 0.7. Measured by test-set
AUC of final classifier f, IWS-LSE outperforms other approaches significantly on five out of six
text datasets, and matches the best performance also attained by Snuba on one dataset (Fig. 2).
IWS-AS (Fig. 6, Appendix) performs similarly well on four text datasets, and competitively on the
other two. Both IWS approaches outperform active learning by a wide margin on all text datasets.
IWS also quickly approaches the performance achieved by an end model trained on the full ground
truth training labels. We provide ablation results for IWS-LSE varying the final set size as well as
thresholds r in Appendix B.3. For the COCO image tasks, LFs were created using image captions
as in (Varma & Re, 2018) (Fig. 4, first and second plot), as well as on images directly via nearest
neighbors (Fig. 4, third and fourth plot). IWS also performs competitively on these image tasks and
quickly approaches the performance achieved using all training ground truth.
4.2	User experiments on text
We conduct experiments of IWS-AS with real
users on the Amazon and IMDB review senti-
ment classification tasks. The results demon-
strate that users judge high accuracy functions
as useful and make few mistakes. In our ex-
periments, users are shown a description of the
Table 1: Median (mean) user response time.
Dataset Annotate LF Annotate sample
Amazon ∣	4.2s (8.3s)	7.9s (10.3s)
IMDB I	3.2s (6.0s) I	19.s (24.3s)
heuristic (the key term pattern) and the intended label. Users can also view four snippets of random
documents where the LF applied, but are instructed to only consider the examples if necessary. See
Appendix B.4 for a screenshot of the query interface and details regarding the user prompts. The top
8
Published as a conference paper at ICLR 2021
0.9
ɔ 0.8
<
tn
,0.7
0.6
0	50	100
Number of annotations
ɪ 0 (2) COCO sports, caption LFs
0.8
0.6
0.4
0	50	100
Number of annotations
ɪ 0	(4) COCO sports, image LFs
0.8
0.6
0.4
0	50	100
Number of annotations
-Active learning
- All ground truth labels
∣- IWS-LSE a
-H Snuba/Reef
Figure 4: COCO image classification. Images (1) and (2): Test AUC of image classifiers trained
using probabilistic labels obtained from LFs on captions, compared to training with active learning
and the full training ground truth. Images (3) and (4): Test AUC of image classifiers trained using
nearest neighbor based image LFs compared to training with active learning and the full training
ground truth. Due to the low coverage of LFs, we only use IWS-LSE-a in our image experiments.
of Fig. 3 shows that mean test set performance of IWS-AS using LFs obtained from human feedback
closely tracks the simulated oracle performance after about 100 iterations. Fig. 3 further shows the
queried LFs and corresponding user responses by their true accuracy vs. their non-abstain votes. To
match the mean test AUC of IWS-AS obtained after 200 iterations on the Amazon dataset, active
learning (uncertainty sampling) requires about 600 iterations. For the IMDB dataset, to achieve the
same mean test AUC of IWS-AS obtained after 200 iterations, active learning requires more than
1000 iterations. For both datasets, the average response time to each query was fast. We conducted a
manual labeling exercise of samples for the IMDB and Amazon datasets (Table 1) with real users.
Assuming the original ratings are true, our users incorrectly classified 〜9% of IMDB reviews while
taking significantly longer compared to the response times to LF queries. For the Amazon dataset,
users mislabeled 〜2% of samples and were also slower at labeling samples than LFs. The user-study
experiments involved nine persons with a computer science background. Neither the true accuracy of
each heuristic nor the end model train or test set results were revealed to the users at any stage of the
experiment. Appendix B.1 provides results for a similar user study on the COCO sports task with
image LFs. These results are consistent with those for text, showing that users are able to distinguish
accurate vs. inaccurate image LFs well, and that the full IWS procedure with real users achieves
similar performance as the one using a simulated oracle.
5	Conclusion
We have proposed methods for interactively discovering weak supervision sources. Our results
show that a small number of expert interactions can suffice to select good weak supervision sources
from a large pool of candidates, leading to competitive end classifiers. The proposed methodology
shows promise as a way to significantly speed up the process of weak supervision source discovery
by domain experts as an alternative to devising such sources from scratch. On a large number of
tasks, we obtain superior predictive performance on downstream test sets compared to the automatic
selection of LFs with Snuba (Varma & Re, 2018) and standard active learning (where users annotate
samples instead of LFs), when measured with respect to the number of user annotations. We conduct
experiments with real users on two text benchmark datasets and one image dataset and find that
humans recognize and approve high accuracy LFs, yielding models that match performance attainable
with a simulated oracle. Our text experiments also suggest that tasks exist where users are able to
annotate heuristics faster than individual samples.
There are limitations to the approaches we propose in their current form. While our experiments on
text and image data show promise, future work is required to investigate appropriate LF families for
a wider variety of tasks and data types. Furthermore, we rely on a domain expert’s ability to judge
the quality of LFs generated from an LF family. While it is true that experts similarly have to judge
the quality of LFs they create from scratch, the level of interpretability required of an LF family in
IWS may be difficult to achieve for some tasks and data types. Additionally, datasets with a large
number of classes may lead to very large sets of candidate LFs. Thus, future work will need to find
efficient ways to search this space. Future work should also explore hybrid methods of IWS and
active learning, interactive learning of LF dependencies, and acquisition functions which optimize for
additional properties of sets of heuristics such as diversity.
9
Published as a conference paper at ICLR 2021
Acknowledgments
We thank Kyle Miller at the Auton Lab for the valuable feedback and discussions. We also want
to express our thanks to Maria De Arteaga Gonzalez, Vanessa Kolb, Ian Char, Youngseog Chung,
Viraj Mehta, Gus Welter, and Nicholas Gisolfi for their help with this project. This work was
partially supported by a Space Technology Research Institutes grant from NASA’s Space Technology
Research Grants Program, and by Defense Advanced Research Projects Agency’s award FA8750-
17-2-0130. WN was supported by U.S. Department of Energy Office of Science under Contract No.
DE-AC02-76SF00515.
References
StePhen H Bach, Bryan He, Alexander Ratner, and Christopher Re. Learning the structure of
generative models without labeled data. In Proceedings of the 34th International Conference on
Machine Learning - Volume 70, pp. 273-282, 2017.
Stephen H Bach, Daniel Rodriguez, Yintao Liu, Chong Luo, Haidong Shao, Cassandra Xia, Souvik
Sen, Alex Ratner, Braden Hancock, Houman Alborzi, et al. Snorkel drybell: A case study in
deploying weak supervision at industrial scale. In Proceedings of the 2019 International Conference
on Management of Data, pp. 362-375, 2019.
William H Beluch, Tim Genewein, Andreas Nurnberger, and Jan M Kohler. The power of ensembles
for active learning in image classification. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pp. 9368-9377, 2018.
Benedikt Boecking and Artur Dubrawski. Pairwise feedback for data programming. NeurIPS
Workshop on Learning with Rich Experience (LIRE), 2019.
Brent Bryan, Robert C Nichol, Christopher R Genovese, Jeff Schneider, Christopher J Miller, and
Larry Wasserman. Active learning for identifying function threshold boundaries. In Advances in
Neural Information Processing Systems, pp. 163-170, 2006.
Oishik Chatterjee, Ganesh Ramakrishnan, and Sunita Sarawagi. Robust data programming with
precision-guided labeling functions. In Proceedings of the AAAI Conference on Artificial Intelli-
gence, volume 34, pp. 3397-3404, 2020.
Mayee F Chen, Daniel Y Fu, Frederic Sala, Sen Wu, Ravi Teja Mullapudi, Fait Poms, Kayvon
Fatahalian, and Christopher Re. Train and you,ll miss it: Interactive model iteration with weak
supervision and pre-trained embeddings. arXiv preprint arXiv:2006.15168, 2020.
Vincent Chen, Sen Wu, Alexander J Ratner, Jen Weng, and Christopher Re. Slice-based learning: A
programming model for residual learning in critical data slices. In Advances in Neural Information
Processing Systems, pp. 9392-9402, 2019.
Kashyap Chitta, Jose M Alvarez, and Adam Lesnikowski. Large-scale visual active learning with
deep probabilistic ensembles. arXiv preprint arXiv:1811.03575, 2018.
Benjamin Cohen-Wang, Stephen Mussmann, Alex Ratner, and Chris Re. Interactive programmatic
labeling for weak supervision. KDD Data Collection, Curation, and Labeling for Mining and
Learning Workshop, 2019.
Nilesh Dalvi, Anirban Dasgupta, Ravi Kumar, and Vibhor Rastogi. Aggregating crowdsourced binary
ratings. In Proceedings of the 22nd International Conference on World Wide Web, pp. 285-294,
2013.
Alexander Philip Dawid and Allan M Skene. Maximum likelihood estimation of observer error-rates
using the em algorithm. Journal of the Royal Statistical Society: Series C (Applied Statistics), 28
(1):20-28, 1979.
Maria De-Arteaga, Alexey Romanov, Hanna Wallach, Jennifer Chayes, Christian Borgs, Alexandra
Chouldechova, Sahin Geyik, Krishnaram Kenthapadi, and Adam Tauman Kalai. Bias in bios:
A case study of semantic representation bias in a high-stakes setting. In Proceedings of the
Conference on Fairness, Accountability, and Transparency, pp. 120-128, 2019.
10
Published as a conference paper at ICLR 2021
Mostafa Dehghani, Hamed Zamani, Aliaksei Severyn, Jaap Kamps, and W. Bruce Croft. Neural
ranking models with weak supervision. In Proceedings of the 40th International ACM SIGIR
Conference on Research and Development in Information Retrieval, pp. 65-74. Association for
Computing Machinery, 2017.
Mostafa Dehghani, Arash Mehrjou, Stephan Gouws, Jaap Kamps, and Bernhard Scholkopf. Fidelity-
weighted learning. In Proceedings of the International Conference on Learning Representations,
2018.
Gregory Druck, Burr Settles, and Andrew McCallum. Active learning by labeling features. In
Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pp.
81-90, 2009.
Jared A. Dunnmon, Alexander J. Ratner, Khaled Saab, Nishith Khandwala, Matthew Markert, Hersh
Sagreiya, Roger Goldman, Christopher Lee-Messer, Matthew P. Lungren, Daniel L. Rubin, and
Christopher Re. Cross-modal data programming enables rapid medical machine learning. Patterns,
1(2):100019, 2020.
Jason A Fries, Paroma Varma, Vincent S Chen, Ke Xiao, Heliodoro Tejeda, Priyanka Saha, Jared
Dunnmon, Henry Chubb, Shiraz Maskatia, Madalina Fiterau, et al. Weakly supervised classification
of aortic valve malformations using unlabeled cardiac mri sequences. Nature Communications, 10
(1):1-10, 2019.
Roman Garnett, Thomas Gartner, Martin Vogt, and Jurgen Bajorath. Introducing the ‘active
search’method for iterative virtual screening. Journal of Computer-Aided Molecular Design,
29(4):305-314, 2015.
Alkis Gotovos. Active learning for level set estimation. Master,s thesis, Eidgenossische Technische
Hochschule Zurich, Department of Computer Science,, 2013.
Mathieu Guillame-Bert and Artur Dubrawski. Classification of time sequences using graphs of
temporal constraints. The Journal of Machine Learning Research, 18(1):4370-4403, 2017.
Yoni Halpern, Youngduck Choi, Steven Horng, and David Sontag. Using anchors to estimate clinical
state without labeled data. In AMIA Annual Symposium Proceedings, volume 2014, pp. 606.
American Medical Informatics Association, 2014.
Braden Hancock, Martin Bringmann, Paroma Varma, Percy Liang, Stephanie Wang, and Christopher
Re. Training classifiers with natural language explanations. In ACL, volume 2018, pp. 1884. NIH
Public Access, 2018.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image
recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,
pp. 770-778, 2016.
Ruining He and Julian McAuley. Ups and downs: Modeling the visual evolution of fashion trends
with one-class collaborative filtering. In Proceedings of the 25th International Conference on
World Wide Web, pp. 507-517. International World Wide Web Conferences Steering Committee,
2016.
Raphael Hoffmann, Congle Zhang, Xiao Ling, Luke Zettlemoyer, and Daniel S Weld. Knowledge-
based weak supervision for information extraction of overlapping relations. In Proceedings of
the 49th Annual Meeting of the Association for Computational Linguistics: Human Language
Technologies-Volume 1, pp. 541-550. Association for Computational Linguistics, 2011.
Shali Jiang, Gustavo Malkomes, Geoff Converse, Alyssa Shofner, Benjamin Moseley, and Roman
Garnett. Efficient nonmyopic active search. In Proceedings of the 34th International Conference
on Machine Learning-Volume 70, pp. 1714-1723. JMLR. org, 2017.
David R Karger, Sewoong Oh, and Devavrat Shah. Iterative learning for reliable crowdsourcing
systems. In Advances in Neural Information Processing Systems, pp. 1953-1961, 2011.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980, 2014.
11
Published as a conference paper at ICLR 2021
Hunter Lang and Hoifung Poon. Self-supervised self-supervision by combining deep learning and
probabilistic logic. In In Proceedings of the Thirty Fifth Annual Meeting of the Association for the
Advancement of Artificial Intelligence (AAAI), 2021.
Hongwei Li, Bin Yu, and Dengyong Zhou. Error rate analysis of labeling by crowdsourcing. In ICML
Workshop: Machine Learning Meets Crowdsourcing. Atalanta, Georgia, USA. Citeseer, 2013.
Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays, Pietro Perona, Deva Ramanan, Piotr
Dollar, and C LaWrence Zitnick. Microsoft coco: Common objects in context. In European
Conference on Computer Vision, pp. 740-755. Springer, 2014.
JLEKS Lonardi and Pranav Patel. Finding motifs in time series. In Proc. of the 2nd Workshop on
Temporal Data Mining, pp. 53-68, 2002.
AndreW L. Maas, Raymond E. Daly, Peter T. Pham, Dan Huang, AndreW Y. Ng, and Christopher
Potts. Learning Word vectors for sentiment analysis. In Proceedings of the 49th Annual Meeting of
the Association for Computational Linguistics: Human Language Technologies, pp. 142-150, June
2011.
Mona Nashaat, Aindrila Ghosh, James Miller, Shaikh Quader, Chad Marston, and Jean-Francois
Puget. Hybridization of active learning and data programming for labeling large industrial datasets.
In 2018 IEEE International Conference on Big Data (Big Data), pp. 46-55. IEEE, 2018.
Gonzalo Ramos, Christopher Meek, Patrice Simard, Jina Suh, and Soroush Ghorashi. Interactive
machine teaching: a human-centered approach to building machine-learned models. Human-
Computer Interaction, 35(5-6):413-451, November 2020.
Alexander Ratner, Braden Hancock, Jared Dunnmon, Frederic Sala, Shreyash Pandey, and Christopher
Re. Training complex models with multi-task weak supervision. In Proceedings of the AAAI
Conference on Artificial Intelligence, volume 33, pp. 4763-4771, 2019.
Alexander Ratner, Stephen H Bach, Henry Ehrenberg, Jason Fries, Sen Wu, and Christopher Re.
Snorkel: Rapid training data creation with weak supervision. The VLDB Journal, 29(2):709-730,
2020.
Alexander J Ratner, Christopher M De Sa, Sen Wu, Daniel Selsam, and Christopher Re. Data
programming: Creating large training sets, quickly. In Advances in Neural Information Processing
Systems, pp. 3567-3575, 2016.
Christopher Re, Feng Niu, Pallavi Gudipati, and Charles Srisuwananukorn. Overton: A data system
for monitoring and improving machine-learned products. In Proceedings of the 10th Annual
Conference on Innovative Data Systems Research, 2020.
Sebastian Riedel, Limin Yao, and Andrew McCallum. Modeling relations and their mentions without
labeled text. In Joint European Conference on Machine Learning and Knowledge Discovery in
Databases, pp. 148-163. Springer, 2010.
Khaled Saab, Jared Dunnmon, Christopher Re, Daniel Rubin, and Christopher Lee-Messer. Weak
supervision as an efficient approach for automated seizure detection in electroencephalography.
npj Digital Medicine, 3(1):1-12, 2020.
Frederic Sala, Paroma Varma, Jason Fries, Daniel Y Fu, Shiori Sagawa, Saelig Khattar, Ashwini
Ramamoorthy, Ke Xiao, Kayvon Fatahalian, James Priest, and Chris Re. Multi-resolution weak
supervision for sequential data. In Advances in Neural Information Processing Systems, 2019.
Paroma Varma and Christopher Re. Snuba: automating weak supervision to label training data.
Proceedings of the VLDB Endowment, 12(3):223-236, 2018.
Paroma Varma, Bryan He, Dan Iter, Peng Xu, Rose Yu, Christopher De Sa, and Christopher Re.
Socratic learning: Augmenting generative models to incorporate latent subsets in training data.
arXiv preprint arXiv:1610.08123, 2016.
12
Published as a conference paper at ICLR 2021
Paroma Varma, Bryan D He, Payal Bajaj, Nishith Khandwala, Imon Banerjee, Daniel Rubin, and
Christopher Re. Inferring generative model structure with static analysis. In Advances in Neural
Information Processing Systems, pp. 240-250, 2017.
Paroma Varma, Frederic Sala, Ann He, Alexander Ratner, and Christopher Re. Learning dependency
structures for weak supervision models. International Conference on Machine Learning, 2019.
Hamed Zamani and W. Bruce Croft. On the theory of weak supervision for information retrieval. In
Proceedings of the 2018 ACM SIGIR International Conference on Theory of Information Retrieval,
pp. 147-154, New York, NY, USA, 2018. Association for Computing Machinery.
Hamed Zamani, W. Bruce Croft, and J. Shane Culpepper. Neural query performance prediction using
weak supervision from multiple signals. In The 41st International ACM SIGIR Conference on
Research and Development in Information Retrieval, SIGIR ’18, pp. 105-114, New York, NY,
USA, 2018. Association for Computing Machinery.
Andrea Zanette, Junzi Zhang, and Mykel J Kochenderfer. Robust super-level set estimation using
gaussian processes. In Joint European Conference on Machine Learning and Knowledge Discovery
in Databases, pp. 276-291. Springer, 2018.
Yuchen Zhang, Xi Chen, Dengyong Zhou, and Michael I Jordan. Spectral methods meet EM: A
provably optimal algorithm for crowdsourcing. In Advances in Neural Information Processing
Systems, pp. 1260-1268, 2014.
13
Published as a conference paper at ICLR 2021
0.95
0.90
U
ɔ
< 0.85
tn
ω
l- 0.80
0.75
COCO sports, image LFs user vs oracle
0	20	40	60	80	100	120	140
Number of labeling functions annotated
COCO Sports, image LFs, user feedback
LF coverage
Figure 5: Human user study, image data (Section B.1). The user experiments in this plot were done
using a labeling function family defined directly on the images. Left: Test AUC of end classifiers
trained on soft labels obtained via IWS-LSE-a. Test set performance of humans closely tracks
performance using a simulated oracle after 〜100 iterations on these datasets. Right: scatter plots
showing the true LF accuracy vs LF coverage of responses to queries by one user.
A Pseudocode for different IWS scenarios
Algorithm 2: Interactive Weak Supervi- Sion (IWS-LSE-ac).			Algorithm 3: Interactive Weak Supervi- Sion With ActiVe Search (IWS-AS)		
Input: L: set of LFs, T: max iterations.		Input: L: set of LFs, T: max iterations.	
1 Qo - 0		1 Q0 J 0	
2 for t = 1, 2, . . . , T do		2 for t = 1, 2, . . . , T do	
3	λt — argmaχλ∈L∖Qt-ι ^t(λ) . Eq.(4)	3	λt J argmaxλ∈L∖Qt-ι μ(Qt-I)
4	Ut J EXpertQUery(λt)	4	ut J ExpertQuery(λt)
5	Qt — Qt-I ∪{(λt,ut)}	5	Qt J Qt-1 ∪ {(λt, ut)}
6 end		6 end	
7 L 一 {λj ∈ D : arg maχD⊆L,∣D∣=m Pλj∈d (l{μj(Qτ)>r}(2* μj(QT) -1) * Ij)}			7 L J {λj ∈ QT : uj = 1} 8 9	
Here we provide pseudocode for the IWS-AS and IWS-LSE-ac settings, while the procedure for
IWS-LSE-a can be found in the main paper in Algorithm 1. Let us recap why we arrive at different
formulations for IWS. In Sec. 3.2, we distinguish three scenarios for arriving at a final set of weak
supervision sources which are modeled to obtain an estimate of the latent class variable Y . All three
scenarios lead to different definitions of an optimal final set of LFs, which in turn means that they
require us to formulate appropriate acquisition functions to achieve a good estimate of the optimal set
within a budget of T expert interactions. In scenario (A), we place no restrictions on the size of the
final set and any LF can be included in it. This means that we have the computational resources to
model a potentially very large number of weak supervision sources, and we do not require domain
experts to inspect and validate every single LF that is modeled. Importantly, this means that we
can and should include LFs that are good according to our predictive model and our definition of
the optimal final set of LFs, but have never been shown to an expert. In scenario (B), the final
set is limited in size but LFs do not have to be inspected and validated by a user. This scenario
may be attractive for rapid cycles during development when a very large number of LFs becomes
computationally prohibitive. Finally, in scenario (C), only LFs inspected and validated by experts
may be included, e.g. due to security or legal considerations.
14
Published as a conference paper at ICLR 2021
B Additional Experiments and Results
B.1	User Experiments on Images with Image Labeling Functions
We carried out a user study on the COCO Sports image classification task described in Section 4,
using a family of mutual nearest neighbor image labeling functions, also described in Section 4. In
line with our experiments on text data, Figure 5 shows that users were able to judge the accuracy
of LFs consistently and well, and that the performance of IWS closely tracks the simulated oracle
performance after about 100 iterations.
Again, users were quite quick at responding to LF queries, and judging LFs to be predictive of the
latent class variable appeared to be an intuitive task. The average user response time to these image
LF queries was 8.8 seconds, while the response time for annotating individual images was around 4.1
seconds on average. To assess an LF, a human user was shown the LFs MkNN image cluster of up to
20 images (the mean size was 7.9 images), and 15 random images contained in the extended cluster,
sorted according to their mean distance to the MkNN image cluster. For this nearest neighbor-based
family of LFs (as described in Section 4), the parameter k1 was set to 20, and k2 to 1500—though
we found that performance was robust to changes in these parameters. While our results show that
IWS performs well in this setting, and that classifiers can be trained competitively compared to
active learning, it is an interesting challenge to develop better image primitives from which labeling
functions can be constructed in data programming, and generated in IWS and Snuba.
B.2	Experiment and Implementation Details
Datasets For our text data experiments, we use three publicly available datasets 3 to define six
binary text classifaction tasks. We use a subset of the Amazon Review Data (He & McAuley, 2016)
for sentiment classification, aggregating all categories with more than 100k reviews from which
we sample 200k reviews and split them into 160k training points and 40k test points. We use the
IMDB Movie Review Sentiment dataset (Maas et al., 2011) which has 25k training samples and 25k
test samples. In addition, we use the Bias in Bios (De-Arteaga et al., 2019) dataset from which we
create binary classification tasks to distinguish difficult pairs among frequently occurring occupations.
Specifically, we create the following subsets with equally sized train and test sets: journalist or
photographer (n = 32 258), professor or teacher (n = 24 588), painter or architect (n = 12 236),
professor or physician (n = 54 476).
For the cross-modal tasks of text captions and images as well as the pure image task we use the
COCO dataset (Lin et al., 2014). We take the official validation set (n = 4952) as the test set. This
set of test images is never used at any other point in the pipeline.
Implementation Details Our probabilistic ensemble in IWS, which is used in all acquisition
functions to learn p(uj = 1|Qt), is a bagging ensemble of s = 50 multilayer perceptrons with
two hidden layers of size 10, RELU activations, sigmoid output and logarithmic loss. To create
features for the p candidate LFs in L, we use singular value decomposition (SVD) to project from
n to d0 = 150. Thus, at iteration t, given a query dataset Qt-1 = {(λj, uj)}tj-=11, the ensemble
is trained on pairs {(τ (λj), uj)}tj-=11 where τ(λj) are the SVD features and uj the binary expert
responses. The output of the ensemble on LFs not in the query dataset is used to compute σj(Qt-1) =
√Var[g-1 (p(uj = 1∣Qt-ι))] and μj(Qt-I) = E[g-1(p(uj = 1∣Qt-ι))]. While g, which maps aj
to vj , could be fine-tuned from data, we set g as the identity function in our experiments, which we
find works well empirically. Finally, to allow human experts to express some level of confidence
about their decision on uj, we also collect corresponding uncertainty weights bj ∈ {1, 0.5}, and
we multiply the contribution to the loss of each uj by the respective weight bj . Users can also skip
queries if they are unsure, indicated in black in Fig. 3. These unsure responses are still counted as an
iteration/query in our plots.
Our downstream end classifier f is a multilayer perceptron with two hidden layers of size 20 and
RELU activations, sigmoid output and logarithmic loss. Each model in the ensemble as well as f are
optimized using Adam (Kingma & Ba, 2014). For the text datasets, we fit the end models f to low
3Amazon: https://nijianmo.github.io/amazon/index.html, IMDB: https://ai.
stanford.edu/~amaas/data/sentiment/, BiaSBios: http://aka.ms/biasbios
15
Published as a conference paper at ICLR 2021
0.9
O 0.8
⅛ 0.7
0.6
0.5
0	50	100	150	200
0.9
0.8
0.7
0.6
0.5
0.9
0.8
0.7
0.6
0.5
Active learning
All ground truth labels
+ IWS-LSE a
—∣- IWS-random
IWS-AS
IWS-LSE-ac, /n = 100
-!-■ Snuba/Reef
0	50	100	150	200
Number of annotations
0.9
0.8
0.7
0	50	100	150	200
Number of annotations
Figure 6: Mean test set AUC vs. number of iterations for end classifiers trained on probabilistic labels.
IWS-LSE and IWS-AS are compared to active learning, Snuba, training on all labels, and IWS with a
random acquisition function. Note that, while one iteration on this corresponds to one expert label, a
comparison of effort needed to answer each type of query (label for sample vs label for LF) will vary
by application.
dimensional projections of a large bag-of-words matrix via truncated Singular Value Decomposition
(SVD), fixing the embedding size to d = 300. We repeat each experiment ten times. We assume that
the class balance is known when fitting the label model, as common in related work. When class
balance is unknown, (Ratner et al., 2019) discuss an unsupervised approach to estimate it. For the
COCO image experiments, we use the second-to-last layer of a ResNet-18 (He et al., 2016) pretrained
on ImageNet to obtain image features. These image features are used as the embedding to train the
end classifier for all approaches which we compare. The embeddings are also used to create the
nearest-neighbor based image LFs.
The first 8 iterations of IWS are initialized with queries of four LFs known to have accuracy between
0.7 and 0.75 drawn at random and four randomly drawn LFs with arbitrary accuracy. Subsequently,
IWS chooses the next LFs to query. Active learning is initialized with the same number of known
samples.
B.3	Full IWS Results and All Baselines
Fig. 6 provides the full results of all IWS settings to all baselines, including IWS with a random
acquisition function (IWS-random). IWS LSE-a corresponds to scenario (A) where there are no
restrictions on the size of the final set and any LF can be included]. IWS LSE-ac corresponds to
scenario (B) where the final set LFs is limited in size (e.g. due to computational considerations) but
any LF can be included. IWS-AS corresponds to Scenario (C), where only LFs in our query dataset
Qt can be used, which are LFs that were inspected and validated by experts, e.g. due to security or
legal considerations.
B.4	User experiments
B.4. 1 Interface and experiment prompt
Fig. 7 shows an example of the prompt that was shown to users at each iteration of the IWS user
experiments. Before the experiment started, users were first instructed on the interface they would
see and the task they would be given, i.e. to label a heuristic as good if they would expect it to label
samples at better than random accuracy and as bad otherwise. Users were also instructed about the
response options, including the option to not answer a query if they were unsure (‘I don’t know’).
16
Published as a conference paper at ICLR 2021
Description of heuristic: contains term: clueless
Intended label of heuristic: positive sentiment ∣ Intended Label
Is this a good labeling function for positive sentiment?
Q Useful heuristic for: positive sentiment
Q Likely a useful heuristic for positive sentiment
Q Likely NOT a useful heuristic for positive sentiment
@ NOT a useful heuristic for positive sentiment
O I don't know
Submit
Undo last decisi∞
Init 0/4
Figure 7: An example of the prompt and answer options that users were shown during the user study.
Before starting the experiment, users were provided with a description of the task and the labeling
function family.
Users were given a description of the classification task and domain of the documents for which
heuristics were being acquired. Users were also provided with a description of the heuristic generated
which labeled samples with a target label if a document contained a certain term. Finally, users were
given two examples of a better than random heuristic, and two examples of an arbitrary heuristic.
During the experiments, users were also provided with 4 random examples of documents documents
where the queried LF applied. Users were instructed to first consider the LF without inspecting these
random samples, and to only consider the examples if necessary.
While LFs receive binary labels, users were allowed to express uncertainty about their decision,
which was used as a sample weight (1 if certain else 0.5) of LFs during training of the probabilistic
model of user feedback.
B.4.2 Additional statistics of user experiments
In Fig. 8 we provide more details about our user experiments. The top row displays the test set
performance of downstream model f for each individual user. The middle row shows how the number
of LFs determined by the user to be useful u = 1 increases with the number of iterations. The bottom
row displays the maximum positive correlation between a new LF with u = 1 at iteration t and all
previously accepted LFs with u = 1 up to iteration t. Note that we take abstains into account by
computing correlation between and LF i and j only on entries where at least one of them is nonzero
B.5 Heuristics found
B.5.	1 IWS with real users, sentiment classification
We here provide some concrete examples of heuristics found during the IWS-AS procedure, that real
users annotated as useful during the experiments. For the IMDB dataset:
• Ten terms most frequently annotated as useful by users
-Class=1: beautiful, wonderful, perfect, enjoyed, amazing, brilliant, fantastic, superb,
excellent, masterpiece.
- Class=0: worst, poor, awful, bad, waste, terrible, horrible, boring, crap, stupid.
• Ten terms annotated as useful with highest underlying accuracy
-	Class=1: flawless, superbly, perfection, wonderfully, captures, refreshing, breathtaking,
delightful, beautifully, underrated.
-	Class=0: stinker, dreck, unwatchable, unfunny, waste, atrocious, pointless, redeeming,
laughable, lousy.
17
Published as a conference paper at ICLR 2021
Figure 8: Test AUC vs. IWS iteration shown for individual user experiments with IWS-AS (top).
Number of LFs labeled as useful vs. IWS iterations (middle). Maximum correlation to previously
accepted LFs vs. number of iterations (bottom).
18
Published as a conference paper at ICLR 2021
• Ten terms annotated as useful by users, selected at random
-Class=1: favorites, joy, superbly, delight, wonderfully, art, intelligent, terrific, light,
finest.
- Class=0: reason, failed, atrocious, decent, unfunny, lame, ridiculous, mistake, worst,
dull.
For the Amazon dataset:
• Ten terms most frequently annotated as useful by users
-	Class=1: wonderful, beautiful, amazing, fantastic, favorite, awesome, love, best, perfect,
easy.
-	Class=0: worst, terrible, horrible, awful, worse, boring, poor, bad, waste, garbage.
• Ten terms annotated as useful with highest underlying accuracy
-	Class=1: compliments, delightful, pleasantly, stars, captivating, excellent, awesome,
beautifully, comfy, perfect.
-	Class=0: poorly, worthless, disappointing, refund, waste, yuck, garbage, unusable,
useless, junk.
•	Ten terms annotated as useful by users, selected at random
-	Class=1: interesting, beautifully, value, loves, strong, expected, gorgeous, perfectly,
durable, great.
-	Class=0: sent, zero, money, mess, crap, refund, wasted, joke, unusable, beware.
B.5.2 IWS with an oracle, occupation classification
We here provide examples of heuristics found during the IWS-LSE procedure using a simulated
oracle, on the BiasBios biographies datasets. We believe that real users (’internet biography experts’)
would be able to make very similar distinctions.
For the ’Bias Bios: journalist or photographer’ dataset, the ten terms most frequently annotated as
useful by the oracle were:
•	Class = 1: photography, clients, fashion, studio, photographer, art, commercial, fine, creative,
advertising.
•	Class = 0: journalism, writing, reporting, news, media, writer, writes, editor, reporter,
newspaper.
For the ’Bias Bios: painter or architect’ dataset. Ten terms most frequently annotated as useful by
oracle:
•	Class = 1: commercial, buildings, development, residential, planning, architects, firm,
master, design, construction.
•	Class = 0: painting, museum, collections, exhibition, gallery, born, artists, shows, series, art.
For the ’Bias Bios: professor or physician’ dataset, the ten terms most frequently annotated as useful
by the oracle were:
•	Class = 1: medical, orthopaedic, residency, family, practice, surgery, memorial, general,
physician, saint.
•	Class = 0: studies, phd, science, teaching, engineering, received, interests, member, pub-
lished, professor.
For the ’Bias Bios: professor or teacher’ dataset, the ten terms most frequently annotated as useful by
the oracle were:
•	Class = 1: students, english, teacher, schools, enjoys, years, life, classroom, children,
elementary.
•	Class = 0: review, research, interests, published, editor, university, journals, associate,
studies, phd.
19
Published as a conference paper at ICLR 2021
0.9
o 0.8
[
In
S 0.7
0.6
Amazon
0	50	100	150	200
Number of labeling functions annotated
0.9
o 0.8
<
tn
S 0.7
0.6
IMDB
0	50	100	150	200
Number of labeling functions annotated
Bias Bios: professor or physician
.9.8.7
Ooo
0⊃< ISg
50	100	150	200
Number of labeling functions annotated
1+ LSE-a, r=0.50
+ LSE-ac, r=0.50
+ LSE-a, r=0.80
+ LSE-ac, r=0.80
+ LSE-a, r=0.70
LSE-ac, r=0.70
+ LSE-a, r=0.60
+ LSE-ac, r=0.60
Bias Bios: journalist or photographer
.8J
O O
0⊃< ISg
O	50	IOO	150	200
Number of labeling functions annotated
□∩V IS£
Bias Bios: painter or architect
LSE-a, r=0.50
LSE-ac, r=0.50
LSE-a, r=0.80
LSE-ac, r=0.80
LSE-a, r=0.70
LSE-ac, r=0.70
LSE-a, r=0.60
LSE-ac, r=0.60
50	IOO	150	200
Number of labeling functions annotated
0.9
§0.8
tn
Φ
0.7
0.6
Bias Bios: professor or teacher
+
LSE-a, r=0.50
LSE-ac, r=0.50
LSE-a, r=0.80
LSE-ac, r=0.80
LSE-a, r=0.70
LSE-ac, r=0.70
LSE-a, r=0.60
LSE-ac, r=0.60
O	50	IOO	150	200
Number of labeling functions annotated
Figure 9: IWS-LSE ablation plots for varying thresholds r which we use to partition our set of LFs.
On all datasets test set performance is very similar after around 100 iterations, showing that a wide
range of such thresholds leads to good test set performance. For IWS-LSE-ac shown in this plot m
was set to 100.
B.6 Ablation of IWS parameter settings
In this section we provide results of ablation experiments for IWS. The IWS-LSE algorithm requires
us to set a threshold r on the (unknown) LF accuracy around which our model aims to partition the set
of candidate LFs. Fig. 9 provides results for different r threshold settings for IWS-LSE-a and IWS-
LSE-ac, correspondin to Scenario (A) and Scenario (B). The figure shows that the algorithms perform
well across a wide range of r. While there is no clear, distinct performance difference discernible, the
figure suggest that a threshold too close to 1.0 can cause the algorithm to under-perform. A possible
explanation is that as it stifles exploration of LFs within the limited budget of queries to users.
In Scenario (B), which corresponds to the IWS-LSE-ac algorithm, our aim to find a final set of LFs
of limited size. Fig. 10 shows that a wide range (fh = 50 to 200) of final set sizes produce good
results. Recall that in our experiments, we bound the size of the final set of LFs at each iteration t by
m = Pt=1 Ui + m, i.e. the number of LFs so far annotated as U = 1 plus a constant m.
20
Published as a conference paper at ICLR 2021
Number of labeling functions annotated
Number of labeling functions annotated
Number of labeling functions annotated
Number of labeling functions annotated
1.0
Bias Bios: painter or architect
.9.8
O O
0⊃< IS£
+ IWS-LSE-ac, ri⅜ = 50
+ IWS-LSE-ac, ri⅜=150
+ IWS-LSE-ac, m = 200
+ IWS-LSE-ac, ri⅜=100
Bias Bios: professor or teacher
+ IWS-LSE-ac, n⅞ = 50
IWS-LSE-ac, n⅞=150
IWS-LSE-ac, m = 200
IWS-LSE-ac, n⅞=100
50	IOO 150	200
Number of labeling functions annotated
0	50	100	150	200
Number of labeling functions annotated
υs ISg
Figure 10: IWS-LSE-ac ablation plots for varying final sizes via parameter m. Recall that We bound
the size of the final set of LFs at each iteration t by m = Pi-1 Ui + m, i.e. the number of LFs so far
annotated as U = 1 plus a constant m. Note that the LSE-ac setting takes LF coverage into account to
1 ɪ -I—'	1 ∙	, /rʌ	-1 ∖ T~ 1	T~	,1	, ∙	, 1 ɪ 1-1	FK	FTrTrI
rank LFs according to (2ɑj - 1) * j where aj,j are the estimated LF accuracy and observed LF
coverage.
21
Published as a conference paper at ICLR 2021
C On Labeling Function Properties
In this section we analyze how LF accuracy and LF propensity (i.e. non-abstain behavior) influence
the estimate of the true latent class label Y*. We focus on the binary classification case for simplicity.
Assume each data point X ∈ X has a latent class label y* ∈ Y = {-1,1}. Given n unlabeled,
i.i.d. data points X = {χi}n=ι, our goal is to train a classifier f : X → Y such that f (x) = y*.
As in Ratner et al. (2016) a user provides m LFs {λj}jm=1, where λj : X → Y ∪ {0} noisily label
the data with λj (x) ∈ {-1, 1} or abstain with λj (x) = 0. The corresponding LF output matrix is
Λ ∈ {-1, 0, 1}n×m, where Λi,j = λj(xi).
We define a factor graph as proposed in Ratner et al. (2016; 2020) to obtain probabilistic labels by
modeling the LF accuracies via factor φAjc(Λ, Y)，l{Λj = yi} and labeling propensity by factor
φLjb(Λ, Y)，l{Λj = 0}, and for simplicity assume LFs are independent conditional on Y. The
label model is defined as
pθ(Y,Λ),Zθ-1exp Xn θ>φi(Λi,yi) ,	(8)
where Zθ is a normalizing constant and φi(Λi, yi) defined to be the concatenation of the factors
for all LFs j = 1, . . . , m for sample i. Also, let θ = (θ(1) , θ(2)) where θ(1), θ(2) ∈ Rm. Here, θ(1)
are the canonical parameters for the LF accuracies, and θ(2) the canonical parameters for the LF
propensities.
To estimate the label model parameters, we generally obtain the maximum marginal likelihood
estimate via the (scaled) log likelihood
l(θ) = 1/n X log (X p(Λi, y ∣θ)).
i=1	y∈Y
Let finite θ ∈ R2m be such an estimate. We use Pθ(y∣Λi) to obtain probabilistic labels:
/	,,ʌ ʌ	Pθ(yi = k, Ai)
Pθ(yi = k|Ai) = ——E-
θ	Pθ(Ai)
=	exP(Pm=I θj0φACC(Aj(Xi), k))
一Py∈γexp(P^ι 年)ΦAcc(λj(⑷⑹).
(9)
(10)
Note that the label estimate does not directly depend on θ(2). Further, note that the denominator is the
same over different label possibilities. Finally, note that even in a case where we include correlation
factors φCok (Λ, Y) = l{Λj = Λik}, (j, k) ∈ C in the model above with C as a set of potential
dependencies, the probabilistic label will only directly depend on the estimated canonical accuracy
parameters θ(1). In the binary classification case, which we assume here, the expression simplifies
further. For k ∈ {-1, 1}:
p.(Lkg — —exP(Pm=ι 学)°'%("W))_
Ry'= । i) = Py∈{-i,i} exp(Pm=ι 百?以小⑷㈤)
1
1 + exp(Pmm=ι θj1)(ΦAcc(λj(Xi), -k) - ΦAcc(λj(Xi), k)))
m
σ(X 学)(φAcc(λj(Xi), k) - φAcc(λj(Xi), -k))),
j=1
(11)
(12)
(13)
where σ denotes the sigmoid function. The probabilistic labels are a softmax in the multi-class
classification case and, as shown above, simplify to a sigmoid in the binary case. An absolute label
prediction y ∈{-1,1} is therefore simply a function of
m
yi = arg maxp^(yi = y∣Λi) = argmaXE θj1)φAcc(λj(Xi),y).
y∈γ	y∈γ j=ι
22
Published as a conference paper at ICLR 2021
We now introduce some assumptions on the accuracy and error probabilities of labeling functions,
similar to the Homogenous Dawid-Skene model (Dawid & Skene, 1979; Li et al., 2013) in crowd
sourcing, where label source accuracy is the same across classes and errors are evenly divided with
probability mass independent of the true class.
Under these assumptions, We denote by αj = P(λj (x) = y*∣λj(x) = 0) the accuracy of LF j.
Further, we denote by lj = P(λj (x) 6= 0) the labeling propensity ofj, i.e. how frequently LF j does
not abstain. The observed LF propensity is also referred to as LF coverage in the related literature.
We recall theorem 3.1:
Theorem 3.1. Assume a binary classification setting, m independent labeling functions with accuracy
αj ∈ [0, 1] and labeling propensity lj ∈ [0, 1]. Fora label model as in Eq. (1) with given label model
parameters θ ∈ R2m, andfor any i ∈ {1,..., n},
P (yi = yt) ≥ 1 - exp
(Pj=I θj1)(2αj- Dl)2
2∣∣θ(1)∣∣2
where θ(I) are the m weights of φAcc, and yi ∈ { — 1,1} is the label model estimatefor y*.
Proof. Assume that we use the label model to obtain a label estimate yi ∈ {-1,1}. As shown in
Eq. (10), the prediction rule in that case is
m
yi = arg max X θl')φAcc(λj (xi),y).
y∈{-ι,i} j=ι
Define by λ(x) = (λ1(x), . . . , λm(x)) the vector of the j = 1, . . . , m LF outputs on x. Further, we
define for k ∈ {-1, 1}:
m
Vθ(λ(x),k) = X θjυ(φAcc(λj (x),k) — φAcc(λj (x), —k))
j=1
m
=X θj1) (1{λj(X) = k} — 1{λj(X) = —k}).
j=1
For the two label options k ∈ {—1, 1}, we have
mm
V^(λ(X)J) = X θj1)(ι{λl (X) = 1} — ι{λl(X) = -1D = X θj1)λj(X)
j=1	j=1
and
mm
V^(λ(X), —1) = X"J)(l{λl(X) = -1} — l{λl(X) = 1}) = - Xθj1)λj(x).
j=1	j=1
Now, we want to obtain a bound on the probability that the label estimate y% is equal to the true label.
We have
P (yi = y*) = P(yi = 1)p (yi = 1∣y* = 1) + P(yi = 1)P(R = -1|y* = —1)
=P (yi = 1)P (yi = 1∣y* = 1) + (1 — P(yi = »P(y = - 1∣y* = 1).
Note that
m
P(yi = 1|yi = I) = P(V^λ(Xi), 1) > 0|yi = I) = P(X θj1)λj(x) > 0|yi = 1),
j=1
23
Published as a conference paper at ICLR 2021
and that
m
P(yi = -1∣婷=-1) = P(V^(X(Xi), -1) > 0∣滤=-1) = P(XθjI)λj(Xi) < 0∣yΓ = -1).
j=1
We therefore have
p(y =滤)=p(滤=i)P(Xθ(1)λj(Xi) > 0∣滤= i)+(i - p(滤=i))P(X小(Xi) < o∣滤=-i).
j=1
j=i
Now we define ξj = θjI)λj(Xi) and we know that ξj ∈ [-∣θjI) ∣, ∣θjI) ∣]. Given the Dawid-Skene
model assumptions stated previously, we have
e[X ξij ∣第=1] = X E[ξij ∣第=1] = X θjI)Ij(2 * αj-1),
j=1
j=i
and
E[X j = -1] = XE[ξij∣姆=-1] = - X年)lj(2 * αj - 1).
j=1
j=1
j=i
Now, using Hoeffding,s inequality and assuming independent labeling functions, We can bound
P(y = 1∣第=1) and P(y = -1∣第=-1) from below:
P(X乎%(Xi) > 0|滤= 1)= P(Xξij> 0|渡=1)
j=i
j=ι
m
P(X J- e[X 勤1滤=i] > - X *% (2 * % -1) ∣滤=i)
j=i
j=i
j=i
≥ 1 - exp -
(Pm=I θjι)(2%- 1)j )2
2∣∣θ ⑴ ||2
and
m
P(X乎为(Xi) < 0|滤=-1) = P(Xξij< 0|滤=-1)
j=1
j=ι
m
P(X ξij - e[X ξij 唠=-1] < X θjI)ij(2 * % -1) ∣媛=-1)
j=i
j=i
≥ 1 - exp -
(Pm=I j (2%- Dlj)
=1
2、
2∣∣θ ⑴ ∣∣2
m
m
m
m
m
m
m
j = 1
m
m
m
m
m
m
m
m
j
Finally we have
P(y =滤)=p(滤=1)P(y = 1∣ 婷= 1) + (1 - p(婷=1))P(y = -1∣ 婷=-1)
≥ 1 - exp -
(Pm=I θj1)(2%- 1)j )2
2∣∣θ ⑴ ∣∣2
□
What do the theorem and the quantities analyzed in this section indicate?
•	The trade-off between LF accuracy and LF propensity (also referred to as LF coverage) is
captured by (20j- - 1)j which allows us to rank LFs if we know the accuracy αj- or can
estimate it and use the observed, empirical coverage as an estimate of lj .
24
Published as a conference paper at ICLR 2021
•	Not surprising, the relation between sign(θj) and αj is important. A better than random
LF j should have a positive θj. This indicates that a gap to randomness is important if we
cannot guarantee that we learn θj well, to reduce the chance of obtaining a negative θj for
better than random LF j , or vice versa.
•	Note how the label estimates are obtained in Eq. (10). Increasing the θj of am LF also
effectively means reducing the impact other LFs have on a prediction. In particular when θ
estimates are imperfect, a gap to random accuracy of αj is important to obtain good label
estimates. Intuitively, we do not want to add excessive noise by including LFs close to
random unless we can guarantee that their parameter estimate is appropriately low and has
the correct sign.
C.1 What are the optimal label model parameters ?
Here we discuss the optimal θ parameters for two cases: first for when we assume that the label
model factor graph consists only of accuracy factors and second for when this label model also takes
LF propensity into account.
C.1.1 Assuming accuracy factors only
In the previous section we assumed that we are given estimated θ parameters. Naturally, we may next
ask ourselves what the optimal theta parameters are. Let us start with a simple case. Let Y , H be
random variables of the class variable and vector of LFs, respectively. Assume that we only model
LF accuracy and define l{λ(x)=y} to be the element-wise indicator function. Also, assume that the
true distribution can be expressed by the following model:
P(Y = y,H = λ(X); θ) = 4exP (θ>1{λ(x)=y})	(14)
Z
Z = X exp (θ>l{λ(x)=y}) .	(15)
y,λ(x)
Note that Z can be written as
Z = E exp (θ>l{λ(x)=y}) + E	exp (θ>l{λ(x)=y})
y,λ(X)lλ(X)j=y	y,λ(X)>(X)j=y
= E exp (θj + θ>il{λ(x)-i = y}) + E exp (θ>,l{λ(x)-=y})
y,λ(X)lλ(X)j =y	y,λ(X)队(X)j=y
=(eθj + L) X exp (θ>il{λ(X)-i=y})
y,λ(X)-i where L is the number of classes. Now, note that P(Hj =Y) =	X	P(Y=y,H= y6(X)|NX)j = y =X	Z-XP (θ>i{λ( y6(X)|NX)j = y eθj	> =ɪ E exp (θ-i 1{λ(X)-i y,λ(X)-i Thus, P(Hj = Y) = eθfj,θjl . Which implies θ =ln ( P(Hj = Y)L ʌ j =l(1- P(Hj = Y J. Further, note that P(Hj = Y) = P(Hj = Y, Hj 6= 0) = P(Hj combination of an LF’s accuracy and label propensity.	λ(x))	(16) X)=y})	(17) =y})	(18) (19) Y|Hj 6= 0)P (Hj 6= 0) is a
25
Published as a conference paper at ICLR 2021
C.1.2 Assuming accuracy factors and LF propensity factors
We now analyze a slightly more elaborate label model which also models LF propensity. Again, Let
Y, H denote the random variables for class labels and LFs, respectively.
P(Y = y,H = λ(x); θ,) = Z exp (θ⑴>l{λ(χ)=y} + θ⑵>l{λ(χ)=0})	(20)
Z = X exp (θ(I)TI{λ(χ)=y} + θ⑵>l{i(χ)=0})	(21)
y,λ(x)
Z can be written as
Z =	X^	exp (θ(I)Tl{λ(x)=y} + θ(2)τl{λ(x)≠0}) +	X^	exp (θ(I)Tl{λ(x) = y} + θ(2)τl{λ(x)≠0})
y,λ(χ)∣λ(χ)j=y	y,λ(χ)∣λ(χ)j = y
= X exp (θj1) + θj2) + θ-Ii)T l{λ(χ).i=y} + θ(2i)τ l{λ(χ)一=0})
y,λ(χXλ(x)j=y
+	X	exp (θj2) + θ-1i)>1{λ(χ)-i=y} + θ-i)>1{λ(χ)-i=0})
y,λ(χ)∣λ(χ)j = y,λ(χ)j = 0
+ X	exp (θ-1i)τi{λ(x)-i = y} + θ-i)τi{λ(x)-i = 0})
y,λ(χXλ(x)j=0
=(M'+θj' +(L -I)eθj' + I) X eχp (θ-i)τl{λ(x)-i=y} + θ-i'τl{λ(x)-i=0})
y,λ(χ)-i
The likelihood of a correct vote is given by
P(Hj = Y )= E	P (Y = y,H = λ(x))
y,λ(χ)∣λ(χ)j=y
=X	Z1exp (θ(I)TI{λ(x)=y} + θ(2)τl{λ(x)=0})
y,λ(χXλ(x)j=y
gθ(I)+θ(2)
= z	^X exp (θ-i l{λ(x)-i = y} + θ-i l{λ(x)-i=y}
y,λ(X)-i
(22)
(23)
(24)
Further note that
P (Hj = 0) =	E	P (Y = y,H = λ(x))
y,λ(X)Iλ(χ)j=0
=	X	Z1exp (θ(I)T l{λ(x)=y} + θ⑵T l{λ(x)=0})
y,λ(χXλ(χ)j=0
=z X exp (θ-iτ 1{λ(χ)-i=y} + θ-)T l{λ(x)-i=y})
y,λ(χ)-i
_	1
=eθ(1)+θ(2) +(L - 1)eθj2) + 1
so we can express
P(H -y∣h 幺0一 P(Hj= Y,Hj=0)
P(Hj= YlHj = 0) — _P(Hj =0)—
P(Hj = Y) = P(Hj = Y)
P(Hj = 0) = 1 - P(Hj = 0)
泗I)+θj2)
网I)+42)
P(Hj = 0) = 1 -
+ (L - 1)eθj2)
1
泗I)+θj" +(L - 1)eθj2) + 1
(25)
(26)
(27)
26
Published as a conference paper at ICLR 2021
Solving for θj(1) and θj(2) , we find
必I)* = ln ((L-J›i
j	1 - αj
* = ιn (	(1 - aj)lj	ʌ
=I(L - 1)(1- l)) ,
(28)
(29)
where αj = P(Hj = Y |Hj 6= 0) and lj = P(Hj 6= 0). Note that in the binary case θj(1)* is positive
only when αj > 0.5.
27