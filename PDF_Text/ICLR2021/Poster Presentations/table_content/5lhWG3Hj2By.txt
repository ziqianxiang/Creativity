Table 1: Performance of various approaches, both robust (right) and non-robust (left). We reportaverage quadratic loss over 50 episodes under the original dynamics (O) and under an adversarialdisturbance (A). For the original dynamics (O), the best performance for both non-robust methodsand robust methods is in bold (lower loss is better). Under the adversarial dynamics (A), we seekto observe whether or not methods remain stable; we use “unstable” to indicate cases where therelevant method becomes unstable (and * to denote any instabilities due to numerical, rather thantheoretical, issues). Our robust methods (denoted by *) improve performance over Robust LQR andRobust MPC in the average case while remaining stable under adversarial dynamics, whereas thenon-robust methods and RARL either go unstable or receive much larger losses.
Table H.1: Time (in seconds) taken to run each method on the test set of every environment for 50episodes run in parallel.
Table H.2: Time (in minutes) taken to train each method in every environment.
Table I.1: Performance of various approaches, both robust (right) and non-robust (left), on domainsof interest. We report average quadratic loss over 50 episodes under the original dynamics (O)and under an adversarial disturbance (A). For the original dynamics (O), the best performance forboth non-robust methods and robust methods is in bold (lower loss is better). We use “unstable”to indicate cases where the relevant method became unstable. Our robust methods (denoted by ")improve performance over Robust LQR in the average case, while remaining stable under adversarialdynamics, whereas the non-robust methods either went unstable or received much larger losses.
