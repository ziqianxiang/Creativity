Figure 1: CAD sketch generation conditioned on a hand drawing. Our model first conditions on a raster imageof a hand-drawn sketch and generates sketch primitives. Given the primitives, the model generates constraints,and the resulting parametric sketch is imported and edited in CAD software, ultimately producing a 3D model.
Figure 2: Editing inferred sketches. We take raster images of hand-drawn sketches (left), infer the intendedsketches using our image-conditional primitive model and constraint model (center), then solve the resultantsketches in CAD software, illustrating edit propagation arising from the constraints (right).
Figure 3: We factorize CAD sketch synthesis into two sequence modeling tasks: primitive generation (left) andconstraint generation (right). The constraint model conditions on the present primitives and outputs a sequenceof constraints, serving as edges in the corresponding geometric constraint graph. A separate solver (standard inCAD software) is used to adjust the primitive coordinates, if necessary.
Figure 4: Random examples from the SketchGraphs dataset(left) and random samples from our unconditional primitivemodel (right).
Figure 5: Average NLL per primitive posi-tion for the unconditional primitive model.
Figure 6: Image-conditional samples from our primitive model. Raster images of real hand-drawn sketches(top) are input to the primitive model. Four independent samples are then generated for each input. The modelmakes occasional mistakes, but tends to largely recover the depicted sketch with only a few samples.
Figure 7: Primer-conditional generation. We take held-out sketches (left column) and delete 40% of theirprimitives, with the remaining prefix of primitives (second column from left) serving as a primer for the primi-tive model. To the right are the inferred completions, where the model is queried for additional primitives untilselecting the stop token. Note that only the primitive model is used in these examples.
Figure 8: Constraining primitives. We take test set sketches (leftmost column) and perturb the coordinatesof the primitives with Gaussian noise (second from left). The constraint model trained without noise (secondfrom right) often fails to correct the primitive locations, in constrast to the constraint model trained on noise-augmented data (rightmost column).
Figure 9: Comparison of various statistics between between generated and dataset sketches. Shaded regionsrepresent bootstrapped 95% confidence intervals.
Figure 10:	Utilization of quantization bins by the different numerical parameters. X and y coordinates mayoccupy the full range of bins (representing both negative and positive values) but the radius parameter onlyutilizes half of the bins (32 in our case) since it must be positive. This means the numerical interval representedby each bin is invariant to which parameter is being considered.
Figure 11:	Mapping of primitive parameters to value and ID tokens. Example raw numerical values and theresulting value token that gets assigned to it are shown for each primitive parameter.
Figure 12:	An example primitive sequence (consisting of a line, a point, and another line) and its associatedsequences of value, ID, and position tokens.
Figure 13:	Reconstruction of SketChGraPhs sketches at various quantization bit widths. Bit widths from 2bits (4 unique parameter values, leftmost column) to the original single-precision floating-point representation(rightmost column) are illustrated above. The quantization used in our model is 6 bits.
