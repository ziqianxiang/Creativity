Figure 1: The query-based framework. The query network generates informative input-output exam-ples by interacting with the user, and then the generated examples are sent to the synthesis networkto synthesize the underlying program.
Figure 2: The illustration of F-SPace. Left: The projection of the input-output examples JeK andprogramp; Middle: The subset relationship between JeKi and JeKj. Note that this relation is oppositein F-space; Right: The union operation of JeKi and JeKj-. This operation is also opposite in F-spacewhere an union operation correspond to an intersection operation in F-space.
Figure 3: The recurrent training process.
Figure 4: The query performance of different methods.
Figure 5: The training curve of the program synthesis model on Karel.
Figure 6: The architecture of the query network for Karel (zoom in for a better view).
Figure 7:	The architecture of the query network for list processing (zoom in for a better view). TyPefilter chooses query between the list proposition and int proposition depends on the input types.
Figure 8:	The DSL of Karelseparately by different networks and chooses among them according to the type of inputs using atype filter.
Figure 9: An example of Karel.
Figure 10:	The DSL of list processingInput[-17,-3, 4, 11,0,-5,-9, 13, 6, 6,-8, 11]Output[-12,-20,-32,-36,-68]ProgramFILTER (<0)MAP (× 4)SORTREVERSEFigure 11:	An example of list processing.
Figure 11:	An example of list processing.
Figure 12: The entropy of the distribution decays when query goes on.
Figure 13:	An example: 8 candidate programs p0-7 and 4 queries qA-D each with 2 possibleresponses {√, ×}.
Figure 14:	An query example of Karel. The number in the cell denotes the amount of markers.
Figure 15: Another query example of Karel. The number in the cell denotes the amount of markers.
