Published as a conference paper at ICLR 2022
Neural Networks as Kernel Learners: The
Silent Alignment Effect
Alexander Atanasov*, Blake Bordelon* & Cengiz Pehlevan
Harvard University
Cambridge, MA 02138, USA
{atanasov,blake_bordelon,Cpehlevan}@g.harvard.edu
Ab stract
Neural networks in the lazy training regime converge to kernel machines. Can
neural networks in the rich feature learning regime learn a kernel machine with
a data-dependent kernel? We demonstrate that this can indeed happen due to a
phenomenon we term silent alignment, which requires that the tangent kernel of
a network evolves in eigenstructure while small and before the loss appreciably
decreases, and grows only in overall scale afterwards. We empirically show that
such an effect takes place in homogenous neural networks with small initialization
and whitened data. We provide an analytical treatment of this effect in the fully
connected linear network case. In general, we find that the kernel develops a
low-rank contribution in the early phase of training, and then evolves in overall
scale, yielding a function equivalent to a kernel regression solution with the final
network’s tangent kernel. The early spectral learning of the kernel depends on
the depth. We also demonstrate that non-whitened data can weaken the silent
alignment effect.
1 Introduction
Despite the numerous empirical successes of deep learning, much of the underlying theory remains
poorly understood. One promising direction forward to an interpretable account of deep learning
is in the study of the relationship between deep neural networks and kernel machines. Several
studies in recent years have shown that gradient flow on infinitely wide neural networks with a
certain parameterization gives rise to linearized dynamics in parameter space (Lee et al., 2019; Liu
et al., 2020) and consequently a kernel regression solution with a kernel known as the neural tangent
kernel (NTK) in function space (Jacot et al., 2018; Arora et al., 2019). Kernel machines enjoy firmer
theoretical footing than deep neural networks, which allows one to accurately study their training
and generalization (Rasmussen & Williams, 2006; SchoIkoPf & Smola, 2002). Moreover, they share
many of the phenomena that overparameterized neural networks exhibit, such as interpolating the
training data (Zhang et al., 2017; Liang & Rakhlin, 2018; Belkin et al., 2018). However, the exact
equivalence between neural networks and kernel machines breaks for finite width networks. Further,
the regime with aPProximately static kernel, also referred to as the lazy training regime (Chizat et al.,
2019), cannot account for the ability of deeP networks to adaPt their internal rePresentations to the
structure of the data, a Phenomenon widely believed to be crucial to their success.
In this Present study, we Pursue an alternative PersPective on the NTK, and ask whether a neural
network with an NTK that changes significantly during training can ever be a kernel machine for a
data-dependent kernel: i.e. does there exist a kernel function K for which the final neural network
function f is f (x) ≈ Pp=ι αμK(x, xμ) with coefficients αμ that depend only on the training
data? We answer in the affirmative: that a large class of neural networks at small initialization
trained on approximately whitened data are accurately approximated as kernel regression solutions
with their final, data-dependent NTKs up to an error dependent on initialization scale. Hence, our
results provide a further concrete link between kernel machines and deep learning which, unlike the
infinite width limit, allows for the kernel to be shaped by the data.
* These authors contributed equally.
1
Published as a conference paper at ICLR 2022
The phenomenon we study consists of two training phases. In the first phase, the kernel starts off
small in overall scale and quickly aligns its eigenvectors toward task-relevant directions. In the
second phase, the kernel increases in overall scale, causing the network to learn a kernel regression
solution with the final NTK. We call this phenomenon the silent alignment effect because the feature
learning happens before the loss appreciably decreases. Our contributions are the following
1.	In Section 2, we demonstrate the silent alignment effect by considering a simplified model where
the kernel evolves while small and then subsequently increases only in scale. We theoretically
show that if these conditions are met, the final neural network is a kernel machine that uses the
final, data-dependent NTK. A proof is provided in Appendix B.
2.	In Section 3, we provide an analysis of the NTK evolution of two layer linear MLPs with scalar
target function with small initialization. If the input training data is whitened, the kernel aligns its
eigenvectors towards the direction of the optimal linear function early on during training while
the loss does not decrease appreciably. After this, the kernel changes in scale only, showing this
setup satisfies the requirements for silent alignment discussed in Section 2.
3.	In Section 4, we extend our analysis to deep MLPs by showing that the time required for align-
ment scales with initialization the same way as the time for the loss to decrease appreciably. Still,
these time scales can be sufficiently separated to lead to the silent alignment effect for which we
provide empirical evidence. We further present an explicit formula for the final kernel in linear
networks of any depth and width when trained from small initialization, showing that the final
NTK aligns to task-relevant directions.
4.	In Section 5, we show empirically that the silent alignment phenomenon carries over to nonlinear
networks trained with ReLU and Tanh activations on isotropic data, as well as linear and non-
linear networks with multiple output classes. For anisotropic data, we show that the NTK must
necessarily change its eigenvectors when the loss is significantly decreasing, destroying the silent
alignment phenomenon. In these cases, the final neural network output deviates from a kernel
machine that uses the final NTK.
1.1	Related Works
Jacot et al. (2018) demonstrated that infinitely wide neural networks with an appropriate parame-
terization trained on mean square error loss evolve their predictions as a linear dynamical system
with the NTK at initalization. A limitation of this kernel regime is that the neural network inter-
nal representations and the kernel function do not evolve during training. Conditions under which
such lazy training can happen is studied further in (Chizat et al., 2019; Liu et al., 2020). Domingos
(2020) recently showed that every model, including neural networks, trained with gradient descent
leads to a kernel model with a path kernel and coefficients αμ that depend on the test point x. This
dependence on x makes the construction not a kernel method in the traditional sense that we pursue
here (see Remark 1 in (Domingos, 2020)).
Phenomenological studies and models of kernel evolution have been recently invoked to gain insight
into the difference between lazy and feature learning regimes of neural networks. These include
analysis of NTK dynamics which revealed that the NTK in the feature learning regime aligns its
eigenvectors to the labels throughout training, causing non-linear prediction dynamics (Fort et al.,
2020; Baratin et al., 2021; Shan & Bordelon, 2021; Woodworth et al., 2020; Chen et al., 2020; Geiger
et al., 2021; Bai et al., 2020). Experiments have shown that lazy learning can be faster but less robust
than feature learning (Flesch et al., 2021) and that the generalization advantage that feature learning
provides to the final predictor is heavily task and architecture dependent (Lee et al., 2020). Fort et al.
(2020) found that networks can undergo a rapid change of kernel early on in training after which
the network’s output function is well-approximated by a kernel method with a data-dependent NTK.
Our findings are consistent with these results.
Stoger & Soltanolkotabi (2021) recently obtained a similar multiple-phase training dynamics involv-
ing an early alignment phase followed by spectral learning and refinement phases in the setting of
low-rank matrix recovery. Their results share qualitative similarities with our analysis of deep linear
networks. The second phase after alignment, where the kernel’s eigenspectrum grows, was studied
in linear networks in (Jacot et al., 2021), where it is referred to as the saddle-to-saddle regime.
2
Published as a conference paper at ICLR 2022
Unlike prior works (Dyer & Gur-Ari, 2020; Aitken & Gur-Ari, 2020; Andreassen & Dyer, 2020),
our results do not rely on perturbative expansions in network width. Also unlike the work of Saxe
et al. (2014), our solutions for the evolution of the kernel do not depend on choosing a specific set of
initial conditions, but rather follow only from assumptions of small initialization and whitened data.
2 The S ilent Alignment Effect and Approximate Kernel S olution
Neural networks in the overparameterized regime can find many interpolators: the precise function
that the network converges to is controlled by the time evolution of the NTK. As a concrete example,
we will consider learning a scalar target function with mean square error loss through gradient flow.
Let X ∈ RD represent an arbitrary input to the network f (x) and let {xμ, yμ}p=ι be a supervised
learning training set. Under gradient flow the parameters θ of the neural network will evolve, so the
output function is time-dependent and we write this as f(x, t). The evolution for the predictions of
the network on a test point can be written in terms of the NTK K (x, x0,t) = d∂θ,t ∙ "∂θ't) as
-df(χ,t) = ηXκ(χ,χμ,t)(yμ - f(χμ,t)),	⑴
dt
μ
where η is the learning rate. If one had access to the dynamics of K(x, xμ, t) throughout all t, one
could solve for the final learned function f * with integrating factors under conditions discussed in
Appendix A
f*(x)
fo(x) + X Γ dt k,(x)”
μν J0
(yν - f0(xν)).
μν
(2)
Here, k,(x)μ = K(x, xμ,t), [K,]μ,ν = K(x*, XV,t), and yμ - fo(xμ) is the initial error on
point xμ. We see that the final function has contributions throughout the full training interval t ∈
(0, ∞). The seminal work by Jacot et al. (2018) considers an infinite-width limit of neural networks,
where the kernel function K, (X, X0) stays constant throughout training time. In this setting where
the kernel is constant and fo(xμ) ≈ 0, then We obtain a true kernel regression solution f (x)=
Pμ v k(x)μKμV1yν for a kernel K(x, x0) which does not depend on the training data.
Much less is known about what happens in the rich, feature learning regime of neural networks,
where the kernel evolves significantly during time in a data-dependent manner. In this paper, we
consider a setting where the initial kernel is small in scale, aligns its eigenfunctions early on during
gradient descent, and then increases only in scale monotonically. As a concrete phenomenological
model, consider depth L networks with homogenous activation functions with weights initialized
with variance σ2. At initialization Ko(x, x0)〜 O(σ2L-2), fo(x)〜 O(σL) (see Appendix B). We
further assume that after time τ , the kernel only evolves in scale in a constant direction
K(XXOt) = (σ2L-2K(X, x0,t) t ≤ T	⑶
K(X,X,t) = g(t)K∞(X,X0) t>τ,	(3)
where K(x, X0,t) evolves from an initial kernel at time t = 0 to K∞(x, x0) by t = T and g(t)
increases monotonically from σ2L-2 to 1. In this model, one also obtains a kernel regression solution
in the limit where σ → 0 with the final, rather than the initial kernel: f (X) = k∞(X) ∙ K∞1y +
O(σL). We provide a proof of this in the Appendix B.
The assumption that the kernel evolves early on in gradient descent before increasing only in scale
may seem overly strict as a model of kernel evolution. However, we analytically show in Sections 3
and 4 that this can happen in deep linear networks initialized with small weights, and consequently
that the final learned function is a kernel regression with the final NTK. Moreover, we show that for
a linear network with small weight initialization, the final NTK depends on the training data in a
universal and predictable way.
We show empirically that our results carry over to nonlinear networks with ReLU and tanh activa-
tions under the condition that the data is whitened. For example, see Figure 1, where we show the
silent alignment effect on ReLU networks with whitened MNIST and CIFAR-10 images. We define
alignment as the overlap between the kernel and the target function 口斯常产,where y ∈ RP is
3
Published as a conference paper at ICLR 2022
SSO~∣ PUB
(a) Whitened Data MLP Dynamics
4 2 O-2T
Xln UO=-pəjdtt3h
(b) Prediction MNIST
ReLU MLP on Whitened CIFAR
Xln UO=-pəjdtt3h-
5 0 5
-5.0 -2.5 0.0 2.5 5.0
Test Prediction NN
(c) Prediction CIFAR-10
Q∙8∙64 2 Q
Iooooo
IU 3EU-v pue SSO~∣
Wide Res-Net on Whitened CIFAR
2 10 12
- -
XLN Uo=里 p9Jd3
-2 -i o 1	2
Test Prediction NN
750 1000 1250 1500
(d) Wide Res-Net Dynamics	(e) Prediction Res-Net
Figure 1: A demonstration of the Silent Alignment effect. (a) We trained a 2-layer ReLU MLP
on P = 1000 MNIST images of handwritten 0’s and 1’s which were whitened. Early in training,
around t ≈ 50, the NTK aligns to the target function and stay fixed (green). The kernel’s overall
scale (orange) and the loss (blue) begin to move at around t = 300. The analytic solution for the
maximal final alignment value in linear networks is overlayed (dashed green), see Appendix E.2.
(b) We compare the predictions of the NTK and the trained network on MNIST test points. Due
to silent alignment, the final learned function is well described as a kernel regression solution with
the final NTK K∞. However, regression with the initial NTK is not a good model of the network’s
predictions. (c) The same experiment on P = 1000 whitened CIFAR-10 images from the first two
classes. Here we use MSE loss on a width 100 network with initialization scale σ = 0.1. (d)
Wide-ResNet with width multiplier k = 4 and blocksize of b = 1 trained with P = 100 training
points from the first two classes of CIFAR-10. The dashed orange line marks when the kernel starts
growing significantly, by which point the alignment has already finished. (e) Predictions of the final
NTK are strongly correlated with the final NN function.
a vector of the target values, quantifying the projection of the labels onto the kernel, as discussed
in (Cortes et al., 2012). This quantity increases early in training but quickly stabilizes around its
asymptotic value before the loss decreases. Though Equation 2 was derived under assumption of
gradient flow with constant learning rate, the underlying conclusions can hold in more realistic
settings as well. In Figure 1 (d) and (e) we show learning dynamics and network predictions for
Wide-ResNet (Zagoruyko & Komodakis, 2017) on whitened CIFAR-10 trained with the Adam op-
timizer (Kingma & Ba, 2014) with learning rate 10-5, which exhibits silent alignment and strong
correlation with the final NTK predictor. In the unwhitened setting, this effect is partially degraded,
as we discuss in Section 5 and Appendix J. Our results suggest that the final NTK may be useful for
analyzing generalization and transfer as we discuss for the linear case in Appendix F.
3	Kernel Evolution in 2 Layer Linear Networks
We will first study shallow linear networks trained with small initialization before providing analysis
for deeper networks in Section 4. We will focus our discussion in this section on the scalar output
case but we will provide similar analysis in the multiple output channel case in a subsequent section.
We demonstrate that our analytic solutions match empirical simulations in Appendix C.5.
We assume the P data points xμ ∈ RD, μ = 1,...,P of zero mean with correlation matrix
Σ = PP PP=I xμxμ>. Further, we assume that the target values are generated by a linear teacher
function yμ = sβτ ∙ xμ for a unit vector βτ. The scalar S merely quantifies the size of the su-
pervised learning signal: the variance of |y|2 = s2βT> ΣβT. We define the two-layer linear neu-
4
Published as a conference paper at ICLR 2022
(a) Initialization
βl	βl
(b) Phase 1	(c) Phase 2
Figure 2: The evolution of the kernel’s eigenfunctions happens during the early alignment phase for
tι ≈ S, but significant evolution in the network predictions happens for t >t2 = 11 log(sσ-2). (a)
Contour plot Ofkernel's norm for linear functions f (x) = β ∙ x. The black line represents the space
of weights which interpolate the training set, ie X>β = y. At initialization, the kernel is isotropic,
resulting in spherically symmetric level sets of RKHS norm. The network function is represented
as a blue dot. (b) During Phase I, the kernel’s eigenfunctions have evolved, enhancing power in the
direction of the min-norm interpolator, but the network function has not moved far from the origin.
(c) In Phase II, the network function W >a moves from the origin to the final solution.
ral network with N hidden units as f(x) = a>Wx. Concretely, we initialize the weights with
standard parameterization a% 〜N(0, σ2/N), Wij 〜N(0, σ2∕D). Understanding the role of σ
in the dynamics will be crucial to our study. We analyze gradient flow dynamics on MSE cost
L = 1P Pμ (f(χμ)-y")1.
Under gradient flow with learning rate η = 1, the weight matrices in each layer evolve as
[a = — IL = W∑ (SeT — W>a) ,	[ W =-黑=a (SeT - W>a)> ∑.	(4)
dt	∂ a	dt	∂ W
The NTK takes the following form throughout training.
K(x, x0;t) = x> W> Wx0 + |a|2x>x0.	(5)
Note that while the second term, a simple isotropic linear kernel, does not reflect the nature of the
learning task, the first term x> W> Wx0 can evolve to yield an anisotropic kernel that has learned
a representation from the data.
3.1	Phases of Training in Two Layer Linear Network
We next show that there are essentially two phases of training when training a two-layer linear
network from small initialization on whitened-input data.
•	Phase I: An alignment phase which occurs for t 〜S. In this phase the weights align to their low
rank structure and the kernel picks up a rank-one term of the form x>ee>x0. In this setting, since
the network is initialized near W, a = 0, which is a saddle point of the loss function, the gradient
of the loss is small. Consequently, the magnitudes of the weights and kernel evolve slowly.
•	Phase II: A data fitting phase which begins around t 〜 ɪ log(sσ-1). In this phase, the system
escapes the initial saddle point W, a = 0 and loss decreases to zero. In this setting both the
kernel’s overall scale and the scale of the function f(x, t) increase substantially.
If Phase I and Phase II are well separated in time, which can be guaranteed by making σ small,
then the final function solves a kernel interpolation problem for the NTK which is only sensitive
to the geometry of gradients in the final basin of attraction. In fact, in the linear case, the kernel
interpolation at every point along the gradient descent trajectory would give the final solution as we
show in Appendix G. A visual summary of these phases is provided in Figure 2.
3.1.1	Phase I: Early Alignment for Small Initialization
In this section we show how the kernel aligns to the correct eigenspace early in training. We focus
on the whitened setting, where the data matrix X has all of its nonzero singular values equal. We let
5
Published as a conference paper at ICLR 2022
β represent the normalized component of βτ in the span of the training data {xμ}. We will discuss
general Σ in section 3.2. We approximate the dynamics early in training by recognizing that the
network output is small due to the small initialization. Early on, the dynamics are given by:
d- a = SWe + O(σ3),	d- W = saβ> + O(σ3).	(6)
dt	dt
Truncating terms order σ3 and higher, we can solve for the kernel’s dynamics early on in training
K(x, x0; t) = qo cosh(2ηst) x> [ββ> + I] x0 + O(σ2), t《s-1 log(s∕σ2).	(7)
where q0 is an initialization dependent quantity, see Appendix C.1. The bound on the error is ob-
tained in Appendix C.2. We see that the kernel picks up a rank one-correction ββ> which points
in the direction of the task vector β, indicating that the kernel evolves in a direction sensitive to
the target function y = SeT ∙ x. This term grows exponentially during the early stages of train-
ing, and overwhelms the original kernel K0 with timescale 1/S. Though the neural network has
not yet achieved low loss in this phase, the alignment of the kernel and learned representation has
consequences for the transfer ability of the network on correlated tasks as we show in Appendix F.
3.1.2	Phase II: Spectral Learning
We now assume that the weights have approached their low rank structure, as predicted from the
previous analysis of Phase I dynamics, and study the subsequent NTK evolution. We will show that,
under the assumption of whitening, the kernel only evolves in overall scale.
First, following (Fukumizu, 1998; Arora et al., 2018; Du et al., 2018), we note the following conser-
vation law S [a(t)a(t)> 一 W(t)W(t)>] = 0 which holds for all time. If We assume small initial
weight variance σ2, aa> - WW> = O(σ2 ) ≈ 0 at initialization, and stays that way during the
training due to the conservation law. This condition is surprisingly informative, since it indicates
that W is rank-one up to O(σ) corrections. From the analysis of the alignment phase, we also have
that W>W α ββ>. These two observations uniquely determine the rank one structure of W to be
ae> + O(σ). Thus, from equation 5 it follows that in Phase II, the kernel evolution takes the form
K(x, x0; t) = u(t)2x> ee> + I] x0 + O(σ),	(8)
where u(t)2 = |a|2. This demonstrates that the kernel only changes in overall scale during Phase II.
Once the weights are aligned with this scheme, we can get an expression for the evolution of u(t)2
analytically, u(t)2 = Se2st(e2st 一 1 + S/u20)-1, using the results of (Fukumizu, 1998; Saxe et al.,
2014) as we discuss in C.4. This is a sigmoidal curve which starts at u02 and approaches S. The
transition time where active learning begins occurs when est ≈ s/u2 =⇒ t ≈ s-1 log(s∕σ2).
This analysis demonstrates that the kernel only evolves in scale during this second phase in training
from the small initial value U0 〜O(σ2) to its asymptote.
Hence, kernel evolution in this scenario is equivalent to the assumptions discussed in Section 2,
with g(t) = u(t)2, showing that the final solution is well approximated by kernel regression with
the final NTK. We stress that the timescale for the first phase tι 〜 1/s, where eigenvectors evolve,
is independent of the scale of the initialization σ2, whereas the second phase occurs around t2 ≈
tι log(s∕σ2). This separation of timescales tι 《 t? for small σ guarantees the silent alignment
effect. We illustrate these learning curves and for varying σ in Figure C.2.
3.2 Unwhitened data
When data is unwhitened, the right singular vector of W aligns with Σe early in training, as
we show in Appendix C.3. This happens since, early on, the dynamics for the first layer are
d W ~ a(t)β>Σ. Thus the early time kernel will have a rank-one spike in the ∑β direction.
However, this configuration is not stable as the network outputs grow. In fact, at late time W
must realign to converge to W α aβ> since the network function converges to the optimum and
f = a> Wx = Se ∙ x, which is the minimum '2 norm solution (Appendix G.1). Thus, the final
kernel will always look like K∞ (x, x0) = Sx> ee> + I x0. However, since the realignment of
W’s singular vectors happens during the Phase II spectral learning, the kernel is not constant up to
overall scale, violating the conditions for silent alignment. We note that the learned function still is
a kernel regression solution of the final NTK, which is a peculiarity of the linear network case, but
this is not achieved through the silent alignment phenomenon as we explain in Appendix C.3.
6
Published as a conference paper at ICLR 2022
d ' ∂L
dtW = -η∂W' = η
4	Extension to Deep Linear Networks
We next consider scalar target functions approximated by deep linear neural networks and show
that many of the insights from the two layer network carry over. The neural network function
f : RD → R takes the form f(x) = wL>W L-1...W 1x. The gradient flow dynamics under mean
squared error (MSE) loss become
Y W'0! (sβ- w)> ∑ (Y W'0! ,	(9)
'0>'	)	∖'0<'	)
where W = W 1> W2> …WL ∈ RD is shorthand for the effective one-layer linear network weights.
Inspired by observations made in prior works (Fukumizu, 1998; Arora et al., 2018; Du et al., 2018),
we again note that the following set of conservation laws hold during the dynamics of gradient
descent 第[W'W'> - W'+1>W'+1] = 0. This condition indicates a balance in the size of
weight updates in adjacent layers and simplifies the analysis of linear networks. This balancing
condition between weights of adjacent layers is not specific to MSE loss, but will also hold for any
loss function, see Appendix D. We will use this condition to characterize the NTK’s evolution.
4.1	NTK Under Small Initialization
We now consider the effects of small initialization. When the initial weight variance σ2 is sufficiently
small, W' W'> -W '+1>W '+1 = O(σ2) ≈ 0 at initialization.1 This conservation law implies that
these matrices remain approximately equal throughout training. Performing an SVD on each matrix
and inductively using the above formula from the last layer to the first, we find that all matrices
will be approximately rank-one WL = u(t)rL(t) , W' = u(t)r'+1(t)r'(t)>, where r'(t) are unit
vectors. Using only this balancing condition and expanding to leading order in σ, we find that the
NTK’s dynamics look like
K(x, x0, t) = u(t)2(L-1)x> [(L - 1)r1 (t)r1 (t)> + I] x0 + O(σ).	(10)
We derive this formula in the Appendix E. We observe that the NTK consists of a rank-1 correction
to the isotropic linear kernel X ∙ x0 with the rank-one spike pointing along the ri (t) direction. This
is true dynamically throughout training under the assumption of small σ. At convergence r(t) → β,
which is the unique fixed point reachable through gradient descent. We discuss evolution of u(t)
below. The alignment of the NTK with the direction β increases with depth L.
4.1.1	Whitened Data vs Anisotropic Data
We now argue that in the case where the input data is whitened, the trained network function is again
a kernel machine that uses the final NTK. The unit vector r1 (t) quickly aligns to β since the first
layer weight matrix evolves in the rank-one direction dt W1 = v(t)β> throughout training for a
time dependent vector function v(t). As a consequence, early in training the top eigenvector of the
NTK aligns to β. Due to gradient descent dynamics, W1> W1 grows only in the ββ> direction.
Since the r1 quickly aligns to β due to W 1 growing only along the β direction, then the global
scalar function c(t) = u(t)L satisfies the dynamics C(t) = c(t)2-2/L [s - c(t)] in the whitened data
case, which is consistent with the dynamics obtained when starting from the orthogonal initialization
scheme of Saxe et al. (2014). We show in the Appendix E.1 that spectral learning occurs over a
timescale on the order of t、/2 ≈ S(L-2)σ-L+2, where t、/? is the time required to reach half the
value of the initial loss. We discuss this scaling in detail in Figure 3, showing that although the
timescale of alignment shares the same scaling with σ for L > 2, empirically alignment in deep
networks occurs faster than spectral learning. Hence, the silent alignment conditions of Section 2
are satisfied. In the case where the data is unwhitened, the r1(t) vector aligns with Σβ early in
training. This happens since, early on, the dynamics for the first layer are £ W1 〜 v(t)β>Σ for
time dependent vector v(t). However, for the same reasons we discussed in Section 3.2 the kernel
must realign at late times, violating the conditions for silent alignment.
1Though we focus on neglecting the O(σ2) initial weight matrices in the main text, an approximate anal-
ysis for wide networks at finite σ2 and large width is provided in Appendix H.2, which reveals additional
dependence on relative layer widths.
7
Published as a conference paper at ICLR 2022
(a) ODE Time to Learn	(b) L = 3 Dynamics	(c) Time To Learn L = 3
Figure 3:	(a) Time to half loss scales in a power law with σ for networks with L ≥ 3:
ti/2 〜(L-2)σ-L+2 (black dashed) is compared with numerically integrating the dynamics
C(t) = c2-2/L(S — c) (solid). The power law scaling of t1∕2 with σ is qualitatively different than
What happens for L = 2, where We identified logarithmic scaling t“ 〜log(σ-2). (b) Linear
networks with D = 30 inputs and N = 50 hidden units trained on synthetic whitened data with
∣β∣ = 1. We show for a L = 3 linear network the cosine similarity of W 1> W1 with ββ> (dashed)
and the loss (solid) for different initialization scales. (c) The time to get to 1/2 the initial loss and
the time for the cosine similarity of W1> W1 with ββ> to reach 1/2 both scale as σ-L+2, however
one can see that alignment occurs before half loss is achieved.
4.2	Multiple Output Channels
We next discuss the case where the network has multiple C output channels. Each network output,
we denote as fc(x0) resulting in C2 kernel sub-blocks Kc^o(x, x0) = VfC(X) ∙ Vfco(x0). In this
context, the balanced condition W 'W '> ≈ W '+1> W '+1 implies that each of the weight matrices
is rank-C, implying a rank-C kernel. We give an explicit formula for this kernel in Appendix H.
For concreteness, consider whitened input data Σ = I and a teacher with weights β ∈ RC ×D . The
singular value decomposition of the teacher weights β = Pα sαzαvα> determines the evolution of
each mode (Saxe et al., 2014). Each singular mode begins to be learned at ta = J log (Sau-2).
To guarantee silent alignment, we need all of the Phase I time constants to be smaller than all of
the Phase II time constants. In the case of a two layer network, this is equivalent to the condition
-ɪ《-ɪ log (Smaxu-2 so that the kernel alignment timescales are well separated from the
smin	smax	0
timescales of spectral learning. We see that alignment precedes learning in Figure H.1 (a). For
deeper networks, as discussed in 4.1.1, alignment scales in the same way as the time for learning.
5	Silent Alignment on Real Data and ReLU nets
In this section, we empirically demonstrate that many of the phenomena described in the previous
sections carry over to the nonlinear homogenous networks with small initialization provided that
the data is not highly anisotropic. A similar separation in timescales is expected in the nonlinear
L-homogenous case since, early in training, the kernel evolves more quickly than the network pre-
dictions. This argument is based on a phenomenon discussed by Chizat et al. (2019). Consider an
initial scaling of the parameters by σ. We find that the relative change in the loss compared to the
relative change in the features has the form |d^ff| PLLy ≈ O(σ-L) which becomes very large for
small initialization σ as we show in Appendix I. This indicates, that from small initialization, the
parameter gradients and NTK evolve much more quickly than the loss. This is a necessary, but not
sufficient condition for the silent alignment effect. To guarantee the silent alignment, the gradients
must be finished evolving except for overall scale by the time the loss appreciably decreases. How-
ever, we showed that for whitened data that nonlinear ReLU networks do in fact enjoy the separation
of timescales necessary for the silent alignment effect in Figure 1. In even more realistic settings,
like ResNet in Figure 1 (d), we also see signatures of the silent alignment effect since the kernel
does not grow in magnitude until the alignment has stabilized.
We now explore how anisotropic data can interfere with silent alignment. We consider the partial
whitening transformation: let the singular value decomposition of the data matrix be X = USV >
and construct a new partially whitened dataset Xγ = USγV >, where γ ∈ (0, 1). As γ → 0
8
Published as a conference paper at ICLR 2022
the dataset becomes closer to perfectly whitened. We compute loss and kernel aligment for depth
2 ReLU MLPs on a subset of CIFAR-10 and show results in Figure 4. As γ → 0 the agreement
between the final NTK and the learned neural network function becomes much closer, since the
kernel alignment curve is stable after a smaller number of training steps. As the data becomes more
anisotropic, the kernel’s dynamics become less trivial at later time: rather than evolving only in
scale, the alignment with the target function varies in a non-trivial way while the loss is decreasing.
As a consequence, the NN function deviates from a kernel machine with the final NTK.
(a) Input Spectra
(b) Train Loss
(c) Test Error
(d) Kernel Norm
(e) Phase I alignment
(f) Predictor Comparison
Figure 4: Anisotropy in the data introduces multiple timescales which can interfere with the silent
alignment effect in a ReLU network. Here we train an MLP to do two-class regression using Adam
at learning rate 5 × 10-3. (a) We consider the partial whitening transformation on the 1000 CIFAR-
10 images λk → λkγ for γ ∈ (0, 1) for covariance eigenvalues Σvk = λkvk. (b) The loss dynamics
for unwhitened data have a multitude of timescales rather than a single sigmoidal learning curve. As
a consequence, kernel alignment does not happen all at once before the loss decreases and the final
solution is not a kernel machine with the final NTK. (c) The network’s test error on classification. (d)
Anisotropic data gives a slower evolution in the kernel’s Frobenius norm. (e) The kernel alignment
very rapidly approaches an asymptote for whitened data but exhibits a longer timescale for the
anisotropic data. (f) The final NTK predictor gives a better predictor for the neural network when
the data is whitened, but still substantially outperforms the initial kernel even in the anisotropic case.
6	Conclusion
We provided an example of a case where neural networks can learn a kernel regression solution while
in the rich regime. Our silent alignment phenomenon requires a separation of timescales between
the evolution of the NTK’s eigenfunctions and relative eigenvalues and a separate phase where the
NTK grows only in scale. We demonstrate that, if these conditions are satisfied, then the final neural
network function satisfies a representer theorem for the final NTK. We show analytically that these
assumptions are realized in linear neural networks with small initialization trained on approximately
whitened data and observe that the results hold for nonlinear networks and networks with multiple
outputs. We demonstrate that silent alignment is highly sensitive to anisotropy in the input data.
Our results demonstrate that representation learning is not at odds with the learned neural network
function being a kernel regression solution; i.e. a superposition of a kernel function on the training
data. While we provide one mechanism for a richly trained neural network to learn a kernel regres-
sion solution through the silent alignment effect, perhaps other temporal dynamics of the NTK could
also give rise to the neural network learning a kernel machine for a data-dependent kernel. Further,
by asking whether neural networks behave as kernel machines for some data-dependent kernel, one
can hopefully shed light on their generalization and transfer learning capabilities (Bordelon et al.,
2020; Canatar et al., 2021; Loureiro et al., 2021; Geiger et al., 2021) and see Appendix F.
9
Published as a conference paper at ICLR 2022
Acknowledgments
CP acknowledges support from the Harvard Data Science Initiative. AA acknowledges support from
an NDSEG Fellowship and a Hertz Fellowship. BB acknowledges the support of the NSF-Simons
Center for Mathematical and Statistical Analysis of Biology at Harvard (award #1764269) and the
Harvard Q-Bio Initiative. We thank Jacob Zavatone-Veth and Abdul Canatar for helpful discussions
and feedback.
References
Kyle Aitken and Guy Gur-Ari. On the asymptotics of wide networks with polynomial activations.
ArXiv, abs/2006.06687, 2020.
Guillaume Alain and Yoshua Bengio. Understanding intermediate layers using linear classifier
probes. arXiv preprint arXiv:1610.01644, 2016.
Anders Johan Andreassen and Ethan Dyer. Asymptotics of wide convolutional neural networks.
ArXiv, abs/2008.08675, 2020.
Sanjeev Arora, Nadav Cohen, and Elad Hazan. On the optimization of deep networks: Implicit
acceleration by overparameterization. In Jennifer Dy and Andreas Krause (eds.), Proceedings of
the 35th International Conference on Machine Learning, volume 80 of Proceedings of Machine
Learning Research, pp. 244-253. PMLR, 10-15 JUl 2018. URL https://Proceedings.
mlr.press/v80/arora18a.html.
Sanjeev Arora, Simon Shaolei DU, Wei HU, ZhiyUan Li, RUslan SalakhUtdinov, and RUosong Wang.
On exact compUtation with an infinitely wide neUral net. In NeurIPS, 2019.
Michael Baake and Ulrike Schlaegel. The peano-baker series. Proceedings of the Steklov Institute
of Mathematics, 275(1):155-159, 2011.
YU Bai, Ben KraUse, HUan Wang, Caiming Xiong, and Richard Socher. Taylorized training: Towards
better approximation of neUral network training at finite width, 2020.
Aristide Baratin, Thomas George, Cesar Laurent, R. Devon Hjelm, GUillaUme Lajoie, Pascal Vin-
cent, and Simon Lacoste-JUlien. Implicit regUlarization via neUral featUre alignment. In AISTATS,
2021.
Mikhail Belkin, SiyUan Ma, and SoUmik Mandal. To Understand deep learning we need to Un-
derstand kernel learning. In Jennifer Dy and Andreas KraUse (eds.), Proceedings of the 35th
International Conference on Machine Learning, volUme 80 of Proceedings of Machine Learn-
ing Research, pp. 541-549. PMLR, 10-15 JUl 2018. URL https://proceedings.mlr.
press/v80/belkin18a.html.
Blake Bordelon, AbdUlkadir Canatar, and Cengiz Pehlevan. SpectrUm dependent learning cUrves
in kernel regression and wide neural networks. In Hal Daume In and Aarti Singh (eds.), Pro-
ceedings of the 37th International Conference on Machine Learning, volUme 119 of Proceed-
ings of Machine Learning Research, pp. 1024-1034. PMLR, 13-18 Jul 2020. URL https:
//proceedings.mlr.press/v119/bordelon20a.html.
Roger W Brockett. Finite dimensional linear systems. SIAM, 2015.
Abdulkadir Canatar, Blake Bordelon, and Cengiz Pehlevan. Spectral bias and task-model alignment
explain generalization in kernel regression and infinitely wide neural networks. Nature Commu-
nications, 12, 2021.
Shuxiao Chen, Hangfeng He, and Weijie J. Su. Label-aware neural tangent kernel: Toward better
generalization and local elasticity, 2020.
LenaIc Chizat, Edouard Oyallon, and Francis R. Bach. On lazy training in differentiable program-
ming. In NeurIPS, 2019.
Uri Cohen, SueYeon Chung, Daniel D Lee, and Haim Sompolinsky. Separability and geometry of
object manifolds in deep neural networks. Nature communications, 11(1):1-13, 2020.
10
Published as a conference paper at ICLR 2022
Corinna Cortes, Mehryar Mohri, and Afshin Rostamizadeh. Algorithms for learning kernels based
on centered alignment. The Journal of Machine Learning Research, 13(1):795-828, 2012.
Pedro Domingos. Every model learned by gradient descent is approximately a kernel machine.
arXiv preprint arXiv:2012.00152, 2020.
Simon Shaolei Du, Wei Hu, and J. Lee. Algorithmic regularization in learning deep homogeneous
models: Layers are automatically balanced. In NeurIPS, 2018.
Ethan Dyer and Guy Gur-Ari. Asymptotics of wide networks from feynman diagrams. In Interna-
tional Conference on Learning Representations, 2020. URL https://openreview.net/
forum?id=S1gFvANKDS.
Timo Flesch, Keno Juechems, Tsvetomira Dumbalska, Andrew Saxe, and Christopher Summerfield.
Rich and lazy learning of task representations in brains and neural networks. bioRxiv, 2021.
doi: 10.1101/2021.04.23.441128. URL https://www.biorxiv.org/content/early/
2021/04/23/2021.04.23.441128.
Stanislav Fort, Gintare Karolina Dziugaite, Mansheej Paul, Sepideh Kharaghani, Daniel M Roy, and
Surya Ganguli. Deep learning versus kernel learning: an empirical study of loss landscape geom-
etry and the time evolution of the neural tangent kernel. In H. Larochelle, M. Ranzato, R. Hadsell,
M. F. Balcan, and H. Lin (eds.), Advances in Neural Information Processing Systems, volume 33,
pp. 5850-5861. Curran Associates, Inc., 2020. URL https://proceedings.neurips.
cc/paper/2020/file/405075699f065e43581f27d67bb68478-Paper.pdf.
Kenji Fukumizu. Effect of batch learning in multilayer neural networks. Gen, 1(04):1E-03, 1998.
Mario Geiger, Leonardo Petrini, and Matthieu Wyart. Landscape and training regimes in deep
learning. Physics Reports, 924:1-18, 2021. ISSN 0370-1573. doi: https://doi.org/10.1016/j.
physrep.2021.04.001. URL https://www.sciencedirect.com/science/article/
pii/S0370157321001290. Landscape and training regimes in deep learning.
Arthur Jacot, Franck Gabriel, and Clement Hongler. Neural tangent kernel: convergence and gen-
eralization in neural networks (invited paper). Proceedings of the 53rd Annual ACM SIGACT
Symposium on Theory of Computing, 2018.
Arthur Jacot, Francois Ged, Franck Gabriel, Berfin Simsek, and Clement Hongler. Deep linear
networks dynamics: Low-rank biases induced by initialization scale and l2 regularization. arXiv
preprint arXiv:2106.15933, 2021.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980, 2014.
Jaehoon Lee, Lechao Xiao, Samuel S. Schoenholz, Yasaman Bahri, Roman Novak, Jascha Sohl-
Dickstein, and Jascha Sohl-Dickstein. Wide neural networks of any depth evolve as linear models
under gradient descent. ArXiv, abs/1902.06720, 2019.
Jaehoon Lee, Samuel S. Schoenholz, Jeffrey Pennington, Ben Adlam, Lechao Xiao, Roman Novak,
and Jascha Sohl-Dickstein. Finite versus infinite neural networks: an empirical study, 2020.
Tengyuan Liang and Alexander Rakhlin. Just interpolate: Kernel ”ridgeless” regression can gener-
alize. CoRR, abs/1808.00387, 2018. URL http://arxiv.org/abs/1808.00387.
Chaoyue Liu, Libin Zhu, and Misha Belkin. On the linearity of large non-linear models: when
and why the tangent kernel is constant. In H. Larochelle, M. Ranzato, R. Hadsell, M. F. Bal-
can, and H. Lin (eds.), Advances in Neural Information Processing Systems, volume 33, pp.
15954-15964. Curran Associates, Inc., 2020. URL https://proceedings.neurips.
cc/paper/2020/file/b7ae8fecf15b8b6c3c69eceae636d203-Paper.pdf.
Bruno Loureiro, CedriC Gerbelot, Hugo Cui, Sebastian Goldt, Florent Krzakala, Marc Mezard, and
Lenka Zdeborova. Capturing the learning curves of generic features maps for realistic data sets
with a teacher-student model. CoRR, abs/2102.08127, 2021. URL https://arxiv.org/
abs/2102.08127.
11
Published as a conference paper at ICLR 2022
Roman Novak, Lechao Xiao, Jiri Hron, Jaehoon Lee, Alexander A. Alemi, Jascha Sohl-Dickstein,
and Samuel S. Schoenholz. Neural tangents: Fast and easy infinite neural networks in python. In
International Conference on Learning Representations, 2020. URL https://openreview.
net/forum?id=SklD9yrFPS.
Carl Edward Rasmussen and Christopher K. I. Williams. Gaussian processes for machine learning.
Adaptive computation and machine learning. MIT Press, 2006. ISBN 026218253X.
Andrew M. Saxe, James L. McClelland, and Surya Ganguli. Exact solutions to the nonlinear dy-
namics of learning in deep linear neural network. In In International Conference on Learning
Representations, 2014.
Bemhard ScholkoPf and Alexander J. Smola. Learning with kernels: SuPPort vector machines, reg-
ularization, optimization, and beyond. Adaptive computation and machine learning. MIT Press,
2002. URL http://www.worldcat.org/oclc/48970254.
Haozhe Shan and Blake Bordelon. RaPid feature evolution accelerates learning in neural networks,
2021.
Dominik Stoger and Mahdi Soltanolkotabi. Small random initialization is akin to spectral learning:
OPtimization and generalization guarantees for overParameterized low-rank matrix reconstruc-
tion. arXiv PrePrint arXiv:2106.15013, 2021.
Blake Woodworth, Suriya Gunasekar, Jason D. Lee, Edward Moroshko, Pedro Savarese, Itay Golan,
Daniel Soudry, and Nathan Srebro. Kernel and rich regimes in overparametrized models. In Jacob
Abernethy and Shivani Agarwal (eds.), Proceedings of Thirty Third Conference on Learning The-
ory, volume 125 of Proceedings of Machine Learning Research, pp. 3635-3673. PMLR, 09-12
Jul 2020. URL https://proceedings.mlr.press/v125/woodworth20a.html.
Chulhee Yun, Shankar Krishnan, and Hossein Mobahi. A unifying view on implicit bias in training
linear neural networks. arXiv PrePrint arXiv:2010.02501, 2020.
Sergey Zagoruyko and Nikos Komodakis. Wide residual networks, 2017.
Chiyuan Zhang, Samy Bengio, Moritz Hardt, Benjamin Recht, and Oriol Vinyals. Understanding
deep learning requires rethinking generalization. In 5th International Conference on Learning
RePresentations, ICLR 2017, Toulon, France, APril 24-26, 2017, Conference Track Proceedings.
OpenReview.net, 2017. URL https://openreview.net/forum?id=Sy8gdB9xx.
12
Published as a conference paper at ICLR 2022
Appendix
A Derivation of Equation 2
A. 1 Training Point Predictions with Time Varying Kernel
Given a training set of P data points {(xμ,yμ)}p=ι, the dynamics of the network training er-
rors [∆t]μ := f (xμ,t) - yμ close in terms of a time-varying neural tangent kernel [Kt]μν =
K(xμ, xν, t)
d
dt A
t
-Kt ∆t .
(11)
We introduce the transition matrix Φt ∈ RP×P which has the property that ∆t = Φt∆0 and
Φ0 = I, we obtain the matrix evolution equation Φt = -KtΦt. This equation can be solved
formally in terms of the Peano-Baker series (Baake & Schlaegel, 2011; Brockett, 2015)
Φt =I- tds1Ks1 +	tds1Ks1	s1ds2Ks2
0	00
-	ds1Ks1	ds2Ks2	ds3Ks3 + ...
00	0
(12)
(13)
which can easily be verified to solve 第Φ(t) = -K(t)Φ(t) with initial condition Φ(0) = I. Under
the condition that R0t K(t) commutes with K(t), which is true in the settings of interest in this
paper, specifically the setting discussed in Appendix B, we can simplify the Peano-Baker series into
a simple matrix exponential
(-1)k
k!
Z t dsKs
0
k
+...
(14)
Thus, under the condition that Kt commutes with R0t Ksds we can exactly solve for the training
error dynamics in terms of integrating factors
∆t = Φt∆0
(15)
We expect this formula to hold approximately whenever the eigenvectors of K are approximately
equal to the eigenvectors of R0t Ksds.
A.2 Test Point Predictions with Time Varying Kernel
Given access to the value of the function on training points, one can evaluate the function on test
points. We have that the evolution of the function on a test point f(x) is given by
ddt-ft(x) = -kt(x)∆t,
(16)
where [kt(x)]μ := K(x, xμ, t). This gives the final value of f to be
f *(x)：= f∞(x)
fo(x) + [ dt kt(x)μ
0
exp
Kt0dt0
(y - f0 ).
(17)
This is exactly equation 2.
13
Published as a conference paper at ICLR 2022
B Kernel Evolution in Scale Only
We consider the model of kernel evolution introduced in Section 2 where the kernel evolves only in
scale for t > τ() and is of small overall size for t < τ (),
K(x, x0, t)
K0 (x, x0, t)
g(t)K∞(x, x0)
t≤τ()
t > τ()
(18)
This model allows for alignment of the kernel while small in the time window t ∈ (0, τ), followed
by scale growth only for t ∈ (τ, ∞). The time threshold τ will generally depend on the initial kernel
scale e. For example, in depth L linear MLPs, E 〜 σ2L-2 and T 〜 σ-L+2 with initialization scale
σ as we show in Figure E.3. We will define a differentiable function h(t) = Rτt g(t0)dt0 so that
h0(t) = g(t), h(τ) = 0, and limt→∞ h(t) = ∞. This last condition follows from g’s continuity
and the assumption that limt→∞ g(t) = 1. We will first show that the final neural network has the
form f (x) = fo(x) + k∞(χ) ∙ K∞1(y - fo) + O(ET(e)). First, we need to calculate the errors
∆(t) = y - f(t) ∈ RP made on the P training examples. These satisfy the dynamics
d∆(t) = _ [EKO⑴△⑴	t ≤ T
dt	∖h0(t)K∞∆(t)	t > τ
(19)
where Ko(t), K∞ ∈ RP×P are P X P gram matrices; e.g. [K°(t)]μν = Ko(xμ, xν,t). The
vector k(x) has entries given by [k(x)]μ = K(x, xμ). For t ∈ (0, T), the error vector follows the
dynamics
d ∆(t) = -EKo(t)∆(t).	(20)
Introducing operator norm of a matrix, ∣Φ∣op = max∣v∣2=1 ∣Φv∣2, We will now bound the operator
norm of the change in the transition matrix Φ(t) introduced in section A.1.
Lemma 1. Let k0 = maxt∈(0,τ) |K0(t)|op represent the maximum operator norm of K0 achieved
on the interval (0, T). Let Φ(t) ∈ RP×P be the transition matrix for the linear dynamics of equation
(20) so that dtΦ(t) = —EKo(t)Φ(t) and Φ(0) = I. Then,
∣Φ(τ) - Φ(0)∣op < ET(E)ko.	(21)
Proof. We begin by noting that, due to the triangle inequality,
1φ(T) - φ(O)Iop = E
τ K0 (t)Φ(t)dt
0
≤ EJQ lK0(t)φ(t)lop dt
≤ EL |K0(t)| iφ(t)ιopdt ≤ EkOL iφ(t)ιopdt.
We will now establish that ∣Φ(t)∣op ≤ 1. Note that for any vector V ∈ RP that
∣-^-∣Φ(t)v∣2 = V>Φ>Φ(t)v = -EV>Φ(t)>K(t)Φ(t)v ≤ 0,
(22)
(23)
where the final inequality follows from the fact that K(t) is positive semidefinite for all t. Therefore
we have shown that ∣Φ(t)∣op ≤ ∣Φ(0)∣op = ∣I∣op = 1. Using this inequality, we find that
∣Φ(t) - Φ(0)∣op ≤ Eko / ∣Φ(t)∣op dt ≤ EkoT(e).
O
(24)
□
With the above Lemma 1, we can bound the discrepancy ∆(T) and ∆(0), namely
∣Δ(t) - ∆(0)∣2 = ∣(Φ(t) - Φ(0))∆(0)∣2
≤ ∣Φ(T) - Φ(0)∣op ∣∆(0)∣2 ≤ EkOT (e)∣Δ(0)∣2.	( 5)
This inequality must therefore hold entry-wise as well, so that
∆(T) = ∆(0) + O(EkOT(E)).	(26)
We will now establish how the training predictions ∆(t) evolve for the second interval t ∈ (T, ∞).
14
Published as a conference paper at ICLR 2022
Lemma 2. Suppose thatfrom t ∈ (τ, ∞) that ∆(t) obeys the dynamics -d∆(t) = —h0(t)K∞∆(t)
where ∆(τ) is as in equation 26. Then, for all t ∈ (τ, ∞),
∆(t) = exp (—h(t)K∞)[(y — fo) + O(ET(e)ko)].	(27)
Proof. The differential equation can be solved through eigendecomposition and integrating factors.
Let ∆k (t) represent the k-th component of ∆(t) in the eigenbasis of K∞ which is static for t ∈
(τ, ∞). Let the corresponding eigenvalue of K∞ be λk. The scalar variable ∆k (t) obeys the
dynamics
dt Ak (t) = -λk h (t)、k (t).
(28)
This can be solved with integrating factors, noting that 第[eλkh(t)∆k(t)] = 0. This implies that
△k(t) = e-λkh(t)∆k(τ). Written as a vector, ∆(t) = exp (—h(t)K∞) ∆(τ). Since by Lemma 1
We have ∆(τ) = ∆(0) + O(ekoτ(e)), We obtain the desired result.	口
We will now combine the results of the previous two lemmas which analyze the evolution of the
netWork predictions on the training set to give our main silent alignment result, Which specifies What
the neural netWork function predicts for an arbitrary test point x.
Theorem 1. Let the kernel have dynamics of Equation 18 where g(t) is a continuous, integrable
function with limt→∞ g(t) = 1. The function learned by the neural network is
f (x) — fo(x) = k∞(x) ∙ K∞1y + Oe(eτ(e)).
(29)
Proof. Using Lemma 1 and 2, We knoW the full dynamics for training predictions ∆(t). Using
∆(t), we can solve for the final predictor f (x) by integrating dynamics f (x,t) = k(x,t) ∙ ∆(t).
f (x) — fo(x) = E / ko(x,t) ∙ ∆(t)dt + k∞(x) •/ h0(t)exp( —h(t)K∞) ∆(τ)dt
5τ ∙ιι	F	1 .1 r∙ . .	El	I J /	> ∖ I	. . 1	.
We will now bound the first term. Taking k0 = maxt∈(0,τ),x∈RD |k0(x, t)|2, we get that
E [ ko(x,t) ∙ ∆(t) ≤
0
C / ∣k(x)∣∣∆(t)∣dt ≤ e(1 + ET(e)ko)∣∆o∣ / ∣k0(x,t)∣dt
,.~ , , _ ... , .. _ ,一
≤ ET(e)⅛o(1 + er(e)ko)∣∆(0)∣ = Oe(eτ(e)).
We can now integrate the matrix exponential in the second term, using the fact that
Z∞∞
h0(t) exp ( —h(t)K∞) dt = J	exp (— hK∞) dh = K∞1.
Using the fact that ∆(τ) = ∆(0) + O(τ (E)E) from Lemma 1, we arrive at the desired result
f(x) — f0(x) = k∞(x)K∞-1∆0 + O(Eτ(E)).
(30)
(31)
(32)
□
We have now established that, given the kernel dynamics in Equation 18, f(x) — f0(x) converges
to the kernel regression solution with final NTK as E → 0 provided lime→0 ET (E) = 0. This is
generic in the settings we consider in this paper for networks with small initialization. In this small
initialization setting, f0 is also negligible so that f(x) itself is a kernel regression solution. For
example, in a linear depth L neural network with initial weight scale σ, the initial scale of the kernel
is E 〜σ2L-2 while the time to alignment scales as T 〜σ2-L thus ET 〜σL can be made arbitrarily
small by taking σ → 0. Lastly, the initial network outputs fo(x)〜σL can also be made arbitrarily
small.
15
Published as a conference paper at ICLR 2022
C Phases of Learning at Small Initialization
C.1 Phase I: Two layer Network and Kernel Alignment
We now present an analysis distinct from that of the previous subsection to go beyond the first step
of gradient descent. The NTK for the two layer linear network has the form K = x> Mx0 with
M = W>W + |a|2I. Our goal is to determine the eigendecomposition of M. Introduce the
variables q(t) = 2β>Mβ = 1 [|a|2 + β>WτWβ] and r(t) = a>Wβ. These dynamics form
a closed two dimensional linear system early in training
ʃ	q(t)	=	2ηs 0	1]	[q(t)	+	O(σ3) ,	t,σ → 0
dt	r(t)	1	0 r(t)
e	lq(t)1	=	1(q0 + r0)	ITl e2ηst	+ 1(q0 -	r0)	[ 1 ]	e-2ηst + O(σ3)
r(t)	2 0	0	1	2 0	0	-1
(33)
The variable q(t) represents the alignment of the NTK with the optimal direction β while r(t)
defines the alignment of the network with the teacher. We see that this alignment increases expo-
nentially with timescale t 〜η-1s-1. While the above equations hold for early time and small
initialization for any initial condition q0 , r0, we can further estimate these initial values under
random initialization provided the input dimension is large. We stress that this limit is not nec-
essary for the silent alignment, but allows for a nice simplification. For Gaussian initialization
ai 〜N(0, σ2/N), Wij 〜N(0, σ2/D) with large D, We have
hqoi = % (1 + D) , hroi = 0,〈r2〉= %.	(34)
In the large D limit, we have with high probability q0	r0 and thus r(t) = q0 sinh(2ηst) and
q = qo cosh(2ηst). Note that this gives the quantities q(t) = 2βτM(t)β, r(t) = βτ Wτa early
in training. Now consider a unit vector v which is orthogonal to the solution βτv = 0. We find that
the projection of M along this direction evolves dynamically as:
—vτM(t)v = 2vτ [βaτ W + βτWτaI] V
dt
= 2r(t).
(35)
We can conclude that vτMv is equal to q(t) up to an additive initialization constant. We see that
this is evolving half as quickly as βτ Mβ = 2q(t). Since vτ Mo V 〜O(σ2) is small compared to
the exponentially growing M (t), the only matrix that satisfies these two conditions must necessarily
take the form
M(t) = qo cosh(2ηst) [ββτ + I] + Mo.	(36)
The first term, which is growing exponentially in t will eventually overwhelm the randomly initial-
ized kernel Mo, which is O(σ2 ).
C.2 Phase I: Error in the Leading Order Approximation
In solving the equations of the previous section, we truncated the full gradient descent equations at
order σ3 . It is important to confirm that the error generated by this truncation remains bounded. We
will argue by self-consistency. The full equations are
da a = W (Se — WTa) ,	dW W = a (Se — WTa)T .	(37)
One can use these equations to solve for the dynamics of the r, q variables:
-dq(t) =	2sr	—	βτ	[WτaaτW + aτWWτa]	β = 2sr —	[2r2	+ X	(aτWvi)2]	(38)
vi⊥β
-dr(t) = 2sq - aτ[WWT + aaτ]Wβ = 2sq - 2∣a∣2r + aτ[aaτ - WWτ]Wβ	(39)
16
Published as a conference paper at ICLR 2022
The second equality in equation 38 comes from inserting a complete basis of states including β and
vi ⊥ β into the last term of the left-hand side. The second equality in equation 39 comes from
writing WW> + aa> = 2aa> + (WW> - aa>). Note that the final term in brackets on the
right hand side is a conserved quantity for linear networks, and so is always of order O(σ2).
Assuming the solutions for q, r are valid to order σ2, We get that da> Wvi = O(σ4).
d-a>Wvi = (β - β)> W>Wvi + ∣a∣2(β - β)>Vi	(40)
dt
Further noting that because of the conservation laW aa> - WW> = O(σ2) is also constant in
time. This gives us that
∣a>[aa> — WW>]Wβ∣ ≤ σ2∣a>Wβ∣ = σ2r.	(41)
We noW note that r, |a|2 both groW as a (σ, s-independent) constant times times σ2e2st. The correc-
tion to the dynamics of both equations is then bounded by a constant times σ4 e4st . This Will be less
than σ2 as long as t satisfies
t W 4s log( σs2).	(42)
For σ2	s, the alignment time t = 1/s falls Within this range and We are guaranteed alignment to
the Ganguli-Saxe configuration.
The error of the full solution at time t can be bounded by the integral of this error bound from 0 to
t, namely a constant times σ4 /s. As long as s σ4 , We are guaranteed that the error of the kernel
is O(σ2) as given in equation 7.
C.3 Phase I: Two Layer Analysis with Unwhitened Data
We noW study the same linearization around the initial fixed point used in the main text but for the
tWo layer netWork With unWhitened data. In this case,
—a 〜sW∑β,	(43)
dt
—W 〜saβ>Σ.	(44)
dt
Which holds asymptotically as t/ log(σ-1) → 0. We introduce the folloWing variables Which form
a closed linear dynamical system
r1(t) = β>W>a,
r2(t) = |a|2,
r3(t) = β> W> WΣβ,	(45)
r4(t) = β>ΣW>a,
r5(t) = β>ΣW>WΣβ.
Introduce the constants a = β>Σβ , b = β> Σ2β. Using the Weight dynamics, itis straightforWard
to shoW that
	"0 a 10	0"	
	0 0 0	2	0	
r(t)〜S	b 0 0 a 0	r(t) , t W log(σ-2).	(46)
	0b001	
	0 0 0 2b 0	
This matrix has eigenvalues λ ∈ {0, 一ʌ/b, √b, -2√b, 2Vb}. Since there are only two positive
eigenvalues ʌ/b, 2√b, it suffices to consider evolution along those two eigendirections, where the
kernel and neural network function will be amplified. Evolution along these direcions give
r(t)〜cιes√bt	"1 0 √b	+ C2e2s√bt	a √b aʌ/b	,	(47)
	0		b	
	0		bVb_	
17
Published as a conference paper at ICLR 2022
t = 0
βl
(a) Initialization
(b) Transition Time
(c) Min `2 norm solution
Figure C.1: Kernel evolution on anisotropic data consists of two alignment phases. (a) At ini-
tialization the level curves of β>M -1β exhibit spherical symmetry. (b) After the initial phase I
alignment, the matrix M exhibits a spike in the Σβ direction. (c) At long times, the network func-
tion and kernel’s spiked direction need to converge to the minimum `2 norm solution as we explain
in G.1. This requires realignment of the kernel at late times, eliminating the preconditions for the
silent alignment effect.
where c1 , c2 are constants determined by intialization. At large time, the large eigenvalue mode
λ = 2√b will dominate. Decomposing W = Wo + a(t) [vι(t)β + v2(t)∑β]> We find that the
only self consistent solution is v1(t) = 0, v2(t) = b-1/2. This implies that the kernel evolution will
take the form
K(x, x0,t)〜K(x, x0,0) + ∣a(t)∣2x>Mx0,
M
1
Pβ>∑2β
Σββ>Σ + I
(48)
We see that the kernel evolves along the directions Σβ early in training for unwhitened data. We
visualize the two stages of learning for unwhitened data in Figure C.1.
C.4 Phase II: Whitened Data
Consider a two layer network f = a> Wx where balance has been achieved W = u(t)^β> and
a(t) = u(t)^. Once this balance condition is stable for fixed ^, we can calculate the time derivative
of u(t)
Ja(t) = UOa = u(t) [s — u(t)2] a.	(49)
Letting c(t) = u(t)2, we find that C(t) = 2u(t)2 [s - u(t)2] = 2c(t)[s - c(t)], which is the two
2st
layer dynamics derived in Saxe et al. (2014). This dynamics has solution c(t) = .2st-1+，荷.
C.5 Solutions to the full training dynamics of linear networks at small
INITIALIZATION
By combining the analyses of the subsection C.1 with the exact solutions discussed in C.4 we can
match both solutions to obtain formulas for r(t) and q(t) for the entire network’s training path that
are exact up to O(σ2) corrections. Up to O(σ2) we then have that
=S	2sinh(2st)
r(t)= (e2st- 1) + 2s∕qo,
2 cosh(2st)
虱"s (e2st- 1) + 2s∕qo .
(50)
(51)
This yields that the initialization constant q0∕2 plays the effective role of c0 in the Ganguli-Saxe
solution for phase II. Equation 34 yields the expected value of this initialization constant. We have
18
Published as a conference paper at ICLR 2022
(a) Loss Dynamics
(b) Time to Lt = 0.5
(c) Alignment σ = 10-4.
Figure C.2: Initialization scale controls the time spent in phase I, where the network escapes the
saddle point near W , a = 0 and the kernel aligns to the task. (a) The loss curves for two-layer
linear networks with small initialization follow sigmoidal trajectories as in Saxe et al. (2014) which
transition from their maximum to minimum at a time which decreases with initialization scale.
Theory is shown in black dashed lines. (b) Verification of the Phase I time t1/2, measured as the
time for the loss to reach one half its original value. This scales logarithmically with σ2 . (c) The
alignment of the kernel eigenfunctions happens before the loss appreciably decreases for σ = 10-4,
evidenced by the kernel alignment curve. The analytically obtained maximum alignment value is
overlayed in dashed green.
empirically verified that these exact equations hold to high accuracy across a variety network sizes,
initialization scales, and whitened datasets. We illustrate some of these in figure C.3.
Exact vs Analytic Solutions
(a) Synthetic
Exact vs Analytic Solutions
(b) Whitened MNIST
Figure C.3: Overlay of empirical and exact solutions for q(t), r(t) in two layer linear feedforward
networks for synthetic and two-class MNIST whitened datasets. (a) We take D = 25, N = 10. (b)
We take D = 784, N = 100.
D Balancing of Weights in Deep Linear Networks
The balance condition discussed in the main text holds for deep linear trained with any loss function
of the form L = P* '(fμ, yμ) (notjust MSE) since, as was shown by Arora et al. (2018); Du et al.
(2018)
ι d (W'w'>)=X f
w'>+w'f >
Σ
μ
d`	∂f μ
∂fμ	∂ W'+1
w'+1+w'+1>	dfμ
+	∂ W '+1
(52)
=1 — (W '+1> w '+1
η dt
19
Published as a conference paper at ICLR 2022
The second line follows from the first since the following quantities are identical
f` W '> = W '+1>...W L-1>wL (x”>W 1>...W '-1>) W '>,	(53)
W'+1> a∂f+1 = W'+1> (W'>...wL) xμ>W 1>...W'>.	(54)
By inspection these two quantities are equal. Thus we have, for any loss function, a deep linear
network has the following conservation laws
-d [W'W'> - W'+1>W'+1] = 0.
(55)
We show in the next section that this balancing condition is very helpful in identifying the time
evolution of the neural tangent kernel. In the case where the network has a single output, we can
inductively prove that each layer,s weight matrix is W' = u(t)r'+ι(t)r'(t)>. WeWill assume this
formula is true for layer ` + 1 and prove it must hold for layer ` since
W 'W '> = W '+1>W '+1 = u(t)2r'+1(t)r'+1(t)>.	(56)
This implies that W' is rank one with right singular vector equal to r-(t). Thus, the decomposi-
tion for each layer the form W' = u(t)r'+1(t)r'(t)> for some unit vector r'(t). Similar analysis
can be performed for the multi-class setting.
E NTK Formula for Deep Linear Networks
The neural tangent kernel for a linear networkf (x) = wL>W L-1...W 1x is defined as an inner-
product over all gradients
L
K(x, x0) = X
'=1
∕∂f(x) ∂f (x0) ∖
∖ ∂ W' , ∂ W' /
2
L
Y W'
'=2
L
X ∙ X0 + ^X
'=2
Y W'0	X>W1>...W'-1>W'-1...W1X0.
'0>'
Under the balanced assumption that W' = u(t)r'+1(t)r'(t)> + O(σ), expanding the kernel to
leading order in σ yields the following form:
K(X, X0) = u(t)2L-2X> [(L - 1)I + r1(t)r1(t)>] X0 + O(σ),	(58)
Q∙8∙64 2 Q
Iooooo
SSO-I
IO0 IO1 IO2 IO3
F4 2
Ooo
IU 3EUV - W
IO0 101 IO2 103
IU 3EU∙--V Is
ib0 .......ib1 ........ib2 ........ib3
Figure E.1: The depth dependence of loss dynamics, kernel alignment and the alignment of first layer
weights in a linear network on synthetic whitened data in D = 30 dimensions. (a) The loss reaches
half its initial value after t 〜 σ-L+2 steps for L > 2. The decay rate of the loss becomes sharper
with depth. (b) Final kernel alignment increases monotonically with depth L and approaches 1 as
L → ∞. (c) The alignment of the first layer weights W1 with the optimal direction β approaches 1
for all models.
20
Published as a conference paper at ICLR 2022
(a) Loss
(b) Alignment	(c) Test Comparison
Figure E.2: ReLU networks across depths trained on two-class whitened CIFAR. The hidden widths
are all of size 100. We use 3k train points and 7k test points. (a) The loss exhibits the same scaling as
σ-L+2 as in the linear setting. (b) Deep networks with nonlinearities are seen to undergo the silent
alignment effect early on in training. The dashed lines indicate when the kernel has grown to 10%
of its final value. (c) The trained network outputs on test data match closely the kernel regression
with the final learned kernel, but do not match regression the initial kernel.
E.1 Deep Linear Network Dynamics Under Balance
In this section, we will consider the dynamics of the variable u once the balance condition is satisfied.
Let WL = Wu(t). Then the dynamics for u(t) under the balancing assumption is
d	d	L-1	L-1
dWL = Wd：u(t) =	∏ W' (s — u(t)L) ∏ W'β = u(t)2L-2(s - u(t)L)W,	(59)
dt	dt
'=1	)	'=1
which implies the fact U(t) = u(t)L-1 (S - u(t)L). Changing variables to c(t) = u(t)L We obtain
C(t) = u(t)L-1U = u(t)2L-2(s - u(t)L) = c(t)2-2/L(S - c(t)).
(60)
When c0L is initialized to a very small value compared to s we can
ddtc(t)……S =⇒ 卜⑴-1+2〃一，-1+2〃]
L-2
St
=⇒ c(t)
L
-L-	(L - 2)	- E
C0 L - ½-^st
L
(61)
—
L
This implies a timescale to learn of t 〜s-1 L-2σ-L+2
We can approximate the timescale for the first layer’s singular vector r1(t) to align to β as well. Let
v be a vector orthogonal to β.
d |W⑴β∣2
dt ∣w(I)V∣2
2β>W (1)>...WL
-|W (I)VI2-
〜O(σL-2).
(62)
This suggests that alignment in a deep network should also occur on a timescale of t 〜σ-L+2.
While there is no strict separation of timescales in terms of the scaling of alignment and learning
with σ, we find that alignment tends to precede a significant drop in the loss as we show in Figure 3.
E.2 Final NTK for Deep Linear Networks
Independent of the structure of the data, the first vector r1 → β and the final NTK has the following
form:
K(x, x0) = S2L-2x> (L - 1)ββ> + I x0 + O(σ).	(63)
This formula is merely a consequence of the balancing condition and convergence to the optimum
u(t)L → S. We provide empirical support that final kernel alignment increases with depth in Figure
E.3.
21
Published as a conference paper at ICLR 2022
(a) Alignment Dynamics and Depth
(b) Initial and Final NTKs
Figure E.3: The final NTK for a deep linear network aligns with the class specific directions with
strength that depends on network depth L. This experiment is a partially whitened (γ = 0.25
see Section 5) subset of 100 CIFAR-10 images. (a) The dynamics of alignment for different depth
models. (b) The final gram matrix has the form K∞ a (L-I)yy> +K0, illustrating Why alignment
of the final NTK to class structure increases with depth L.
E.3 Formula for the Intermediate NNGP Kernels
Let β represent the unit vector pointing in the optimal direction for the scalar output case. To
calculate this, all that needs to be assumed is that the netWork has converged to its optimum and that
the weights satisfy the balance property so that W' = 〃"+广；.By the convergence assumption
u* = s1/L and r* = β. We stress that this holds for arbitrary input correlation structure Σ, the
final NNGP kernel for layer ` can also be computed. Expanding the weights and collecting terms at
leading order in σ yields:
K'(x, x0) ~ s2'/Lx>ββ>x0 + O(σ).	(64)
Evaluating on the training set gives k` = (yy>)"L ∈ RP×P.
F	Generalization Error in Transfer Learning Task
The structure of the final kernel can alter the ability of the network to flexibly transfer to new tasks
with a small amount of data. In this section, we examine how learned intermediate representations
compares with the inductive bias of the original isotropic kernel X ∙ x0. In particular, we study the
offline generalization performance of kernels of the form
K(x, x0; A) = x> Aββ> + I x0 .	(65)
In Section 4 we showed that A could be altered by changing the network depth. Concretely, our
transfer learning problem consists of training a linear probe on one of the intermediate layers of the
network (Alain & Bengio (2016); Cohen et al. (2020)). This would also produce a kernel regression
solution for kernel K(x, x0, A) with A which depends on the chosen layer and the depth of the
network. For simplicity, we assume that the data are generated according to a simple Gaussian
distribution x 〜 N (0, I) and that the target values are generated with a linear function y(x) = w∙x.
We decompose the new task vector W = αβ +，(1 - α2)w⊥ where w⊥ ∙ β = 0. The expected
generalization error after training with P samples can be computed with methods from the physics
of disordered systems (Bordelon et al., 2020; Canatar et al., 2021; Loureiro et al., 2021). For any
A > 0, the easiest transfer task is w = β (α = 1). If w = β, increasing the alignment A strictly
decreases the generalization error. This is illustrated in Figure F.1.
F.1 Derivation of Learning Curves
We will discuss the average case generalization error in the transfer learning setting. Prior work has
shown that the generalization performance of kernel regression can be calculated through a kernel
22
Published as a conference paper at ICLR 2022
Kernel Alignment Strength	TransferTask Alignment
(a) α = 0.75
(b) A = 1
(c) Fixed P
Figure F.1: The offline generalization error in a transfer task with the learned linear kernel K =
x> [Aβ>β> + I] x0 and ynew = [αβ +，(1 - α2)w⊥ ∙ x. (a) For a new transfer task which
is correlated with the learned function β , neural networks with large feature learning A give lower
generalization error at small sample sizes. (b) For fixed A = 1, the tasks w which are strongly
correlated with β are easier to learn during transfer. (c) The lowest generalization error in a transfer
learning setup occurs when feature learning strength A and correlation between tasks α are both
large.
eigenvalue problem (Bordelon et al., 2020; Canatar et al., 2021; Loureiro et al., 2021)
hK(x, x0)φk(x)ix = λkφk(x).	(66)
Once this integral eigenvalue problem is solved for eigenvalues λk and orthonormal eigenfunctions
φk, the average case generalization error at P training examples is
E =	1 X hy(X)φk(X)i2
g 1 - Y 彳(λkP + κ)2
K=λ+K X 3=P X J.
(67)
In our case, we are interested in the generalization performance of the linear kernel
K(X, X0) = X> [ββ> + I] X0.	(68)
Since K is a linear kernel, its eigenfunctions should be linear functions φk(x) = φk ∙ x. Assuming
that the data distribution has identity covariance, we find
x> [Aββ> + I] x0φk>x = φk> [Aββ> + I] x0 = λkφk>x0.	(69)
This implies that the φk vectors are eigenvectors of M . The first eigenvector is φ1 = β with
eigenvalue λ1 = A + 1. The other D - 1 eigenvectors can be chosen as any frame in the D - 1
dimensional subspace orthogonal to β. Each of these D - 1 eigenvectors has eigenvalue λk = 1.
Using these results, and the fact that W = ɑφι + √1 - α2 w⊥, we can calculate the expected
generalization error.
1	α2	1 - α2
g = 1 - γ [((1 + A)P + κ)2 + (P + κ)2
1+A D-1
κ = λ + κ -----------+ —--- , γ = P
(1 + A)P + κ P + k_|
(1 + A)2	D - 1 一
((1+ A)P + κ)2 + (P + κ)2
By the result proven in Canatar et al. (2021), the lowest possible error for fixed A occurs by maxi-
mizing the fraction of variance along the large eigenvalue direction, corresponding to α = ±1.
G	Linear NTKs During GD Learn The Same Function
In the overparameterized setting where D > P, all linear networks discussed in the Section 4
converge to the minimum norm interpolator when the data is whitened. Specifically, letting the
learned neural network function be written as f (x) = β>x, and the data matrix X ∈ Rd×p and
23
Published as a conference paper at ICLR 2022
target labels y ∈ RP represent the training data. The solution vector β solves the constrained
optimization problem
min ∣∣β∣∣2 , s.t. X>β = y,
β
(70)
which is the kernel regression solution for the initial kernel Ko(x, x0) = X ∙ x0. This is un-
surprising due to a symmetry argument: when β0 ≈ 0, the only privileged point on the affine
space X>β = y is the point closest to the origin, which is precisely the solution above. Surpris-
ingly, the final pseudo-inverse solution sβ also minimizes the RKHS norms for any of the kernels
throughout gradient descent. Up to an overall scale, the kernels throughout evolution take the form
K(x, x0; t) = x> A(t)ββ> + I x0 (see Section 4.1) which would induce the following kernel
interpolation problems
min β> [A(t)ββ> + I]-1 β , s.t. X>^ = y.	(71)
β
The solution to this optimization problem is indeed the kernel regression solution with kernel K(t)
since the learned function takes the form f (x) = P* αμK(x, xμ,t) with α = K(t)-1y. Using
the Sherman-Morrison rule, we show that the solution to each of these problems t ≥ 0 gives the
same result, namely the pseudo-inverse solution. This can be seen from the following
β> [A(t)ββ> + I]-1 β = ∣β∣2 - A(t)	(β ∙ β) 2.	(72)
1 + A(t)
TL T	1 . A	C, C	1	C C	C EI ∙ ∙ .1	1 1	∙ . ∙ Γ∙ . 1	. Γ∙
Now, We let β = sβ + β⊥, where β ∙ β⊥ = 0. ThiS is the general decomposition for the set of
interpolators which have the property X> [β + β⊥] = y.
min ∣β⊥∣2.	(73)
β⊥
The solution is merely to set β⊥ = 0. Thus the optimal solution is therefore the same for any fi-
nite value of A. However, the final RKHS norm of the learned function β> A(t)ββ> + I -1 β
decreases with time, indicating that the kernel becomes more aligned with the pseudo-inverse direc-
tion as A increases.
G.1 Deep Linear Networks From S mall Initialization Learn Pseudo-Inverse
In this subsection of the appendix, we will use our theoretical technology for balanced linear net-
works to demonstrate the universal learned function for any data, not just whitened input, pro-
viding an alternative derivation to the result proven in Theorem 7 of Yun et al. (2020). This
analysis is performed in the σ → 0 limit, where w` = u(t)r'+ι(t)rg(t)> as We showed in
Section D. Under this condition the learned function f (x) = β ∙ X is defined through weights
β = wɪwɪ...wL = u(t)Lr1(t). We see that the direction of the learned function is controlled
entirely by r1(t). It suffices to prove that r1(t) ∈ span{X1, ..., XP} for allt to show that the network
learns the pseudo-inverse solution β* = X(X>X)-1y, where X ∈ Rd×p and y ∈ RP are the
training data and targets respectively. Note that by gradient descent, we have
d WI ⑴=w>...wL X(yμ- fμ⑴)x> = U⑴LTr2⑴ X(yμ - fμ (t))xJ.	(74)
μ	μ
From the balance condition w1(t) = u(t)r2(t)r1(t)>, we also have
dWWι(t) = [U(t)r2(t) + u(t)r2(t)] rι(t)> + u(t)r2(t)r∖(t)>.	(75)
dt
Equating the two above expressions for 第 Wι(t) and taking an inner product with r2(t) from the
left gives the following
u(t)rι(t) =	u(t)L-1 X(yμ	-	fμ(t))xμ	-	[U(t) + u(t)r2(t)	∙	r2(t)]	rι(t).	(76)
μ
24
Published as a conference paper at ICLR 2022
Thus, if rι(t) ∈ span{xι,…，XP} then r,ι(t) ∈ span{xι,..., XP} so that the full dynamics
of rι(t) lie in the subspace spanned by the training data. At initialization, We have Wι(t) α
z(t) Pμ yμx> + O(σ3) so the initial ri vector will indeed align with the span of the training data
in the σ → 0 limit.
By the fact that β = u(t)Lrι(t), the learned linear coefficients β must also be in span{xι,…，XP}
so β = μα∣μ aμXμ. These must also interpolate the data provided D ≥ P, giving the following
condition
β ∙ Xν = X XV ∙ xμ αμ = yν ⇒ α = (X>X)-1y =⇒ β = X(X>X)-1y.	(77)
μ
This is exactly the minimum `2 norm interpolating solution which solves
min ∣β∣2 , s.t. , X>β = y.	(78)
β
While anisotropy of the data makes no impact on what function is ultimately learned in the linear
network case, the anisotropy can have a signficant influence on whether the preconditions for silent
alignment are satisfied in a nonlinear network, which can prevent the final function from being a
NTK regressor with final NTK.
H Final Kernel in Multi-Class Networks
For a network with C output channel, balancing and alignment guarantee that the configuration of
the network is orthogonal and balanced as in the setting of Saxe et al. (2014). One can then integrate
each mode separately to obtain the final kernel as
C
W' = X Uα(t)r+i(t)rα(t)> , Kc,c0(x, x0) = x>Mc,c0x0,
α=1
L-1
Mc,c0 = δc,c0X Ua(LT) (t)rαrα + XX Ua(L-')(t)e>rara>e"X UUej101 rβ>,
a	'=1 a	β
(79)
where the Cartesian unit vectors ec ∈ RC are one-hot on class output c. This shows that the
contributions to the kernel depend on how well the class output channels align with the unit vectors
rLa. Further, the singular values Ua can evolve at different timescales depending on the structure of
the data.
Specifically, for a depth L network, both the the alignment time t(aL) and the time to learn a given
singular value sa scale as sa-1σ2-L, as shown in appendix E.1. The differences in alignment times
∆taβ := t(aL) - t(βL) for modes sa, sβ therefores scales as ∆t(aLβ) = σ2-L∆t(a2β).
H. 1 Final NNGP in multi-output case
We can also gain intuition about the learned representations in each layer by looking at the NNGP
kernels, which merely take inner-products between layer activations for different inputs. Let β ∈
RC ×D represent the optimal weight matrix which has the property (in the over-parameterized case)
βxμ = yμ. At the optimum, the neural network must learn β = WL...W 1. Computing the SVD
of β = Pa βaZaV> reveals that Ua =e之"and 理=Va and rL = Za. Using these facts, it is
easy to derive the final NNGP kernel for layer `.
X0 = X> [β>β]'/L x0.
K'(x, x0) = x> W 1>...W '> W '...W 1x0
=x> X (Ua)2' rara>
a
Evaluating on the training set X ∈ Rd×p gives K' = X> [β>β]'/L X, which interpolates
between X>X at layer ` = 0 and Y >Y at layer L.
(80)
25
Published as a conference paper at ICLR 2022
Linear Depth 2
SSo-PUe"u∙l"x
O 50 IOO 150	200	250	300
t
(a) Linear depth 2
□near Deptħ 4
SSo-PUu∙lx
O IOOO 2000 3000 4000 5000 6000
t
(b) Linear depth 4
Tanh Deρtħ 3
Sso- pu-"u∙l"x
O 200 400 600 800 IOOO UOO 1400
t
(c) Tanh depth 3
Figure H.1: Demonstration of a separation between alignment and spectral learning phases across
networks trained on multi-class data. Here we train on whitened MNIST. Each network has σ so that
σL = 10-4 for L the depth of the network. (a) Depth two multi-class dynamics are very similar to
single class. The analytically predicted final alignment is in dashed green. (b) For deeper multi-class
networks, each singular values is learned far apart in time, and alignment does not as clearly precede
loss decay. (c) Similar dynamics are obtained for tanh networks. Note for deeper networks there is
a stronger separation of the times to learn each singular value, resulting in the ten separated drops in
the loss.
H.2 More Refined Balancing Analysis
We can derive corrections to our decomposition of the kernel by including the initial conditions in
our derived conservation laws. In particular, we will consider balancing for large width networks.
Note that the network does not need to be in the lazy regime. The balancing condition is
W'(t)W'>(t) - W'+1>(t)W'+1(t) = W'W'> - W'+1>W'+1.	(81)
Note that W' ∈ Rn'+1×n' has entries with zero mean and variance σ2 * */n` in the standard Pa-
rameterization. The products of initial matrices are therefore Wishart distributed. For sufficiently
large widths, we can aPProximate the initial weight matrix Products with their exPectation over the
random initialization
W'W'> - W0'+1>W0'+1 ≈ σ2(1 - N'+2) I.	(82)
n'+iJ
This concentration becomes more accurate as the widths n`, N'+i → ∞. For the last layer if the
number of classes C = NL is sufficiently large, we also obtain similar concentration for the last
layer WL> WL ≈ σ2 ANLl I. Repeating the backward induction on the conservation law, We find
the following recursively defined singular value decomPositions
w' = X uα(t)r'+ι(t)r'α(t)>,
α
Ua⑴2=Ua+1⑴2+σ2 (1 - N+2) = UL⑴2+σ2g',	(83)
X P LX Nk+ 1
g' = L-'，F.
k='	k
We note that the corrections g` vanish if all layers k > ` have the same width. Let Ua = U(aL) (t).
The condition for convergence is
YhUof = Y [(Ua)2 + σ2g'] = Sa.	(84)
``
In the σ2 →
0 limit, We can solve that Ua 〜s1/L as before. However, We can now obtain leading
order corrections (in σ2) which take the form of the form
2	2 gσ2	2	∩	_ G _ L(L - I) G G Nk+1	zgi-λ
[Ua]〜Sa - τ 1/L，σ → 0，g = Tg' = --------2-----T X^~,	(85)
2Lsa	'=ι	'=1 k='	k
26
Published as a conference paper at ICLR 2022
which reveals that the size of the correction depends not only on σ but also on the depth and network
widths. Suppose all network widths were equal n` = Nk, then the term g = 0 and there is no
contribution from the first moment of the random weights.
I Laziness in Homogenous Networks
In this section we recapitulate the argument found in Chizat et al. (2019). The goal is to estimate how
rapidly the gradient features on a test point Vf (x) change compared to the loss early in training.
Let f ∈ RP represent the function outputs on the training set. We will compute the time derivatives
of the loss and the network gradients.
dVθf (x) = V2f (x) ∙ ddθ = V2f (x) ∙ X(yμ - f”)Vf”
dt	dt
μ
(86)
(87)
dt L
|Vf ∙(y -f)∣2.
Here, | ∙∣op denotes the operator norm of a matrix. We are interested in the ratio of the loss, time
derivative to the gradient,s time derivative. With an initialization scale of f 〜 O(σL) we find
Iddt Vf (x)| L _ |V2f(X) ∙Pμ (yμ - fμN fμ∖∖y - f |2	|V2f (X) ∙pμ yff^yF
IVf |	IddtL =	IVfllVf ∙ (y - f)∣2	≈	IVfIIVf ∙ y|2	,
(88)
where in the last step We approximated yμ 一 fμ ≈ yμ for small initialization scale since yμ 〜O(1)
and fμ 〜O(σL). Now We will estimate the scale of each of the terms above. For a homogenous
model Vf 〜O(σL-1) and V2f 〜O(σL-2). Counting powers of σ in numerator and denominator,
we find that this quantity of interest scales as
IdVf(X)I	L
IVf I	Idt LI
O(σ-L).
(89)
This result indicates that, from small initialization, the gradient NTK features and thus the kernel
itself will evolve much more rapidly than the loss. This effect can be amplified by increasing depth
and decreasing initialization scale.
J ResNet Experimental Details
Below, we provide the alignment and loss dynamics for wide resnet for CIFAR-10 with 100 training
points. Because the loss decreases significantly before the kernel reaches its final alignment value,
the final NTK is not perfectly correlated with the final neural network function. The wide ResNet
model is taken from Novak et al. (2020) and is based on the original architecture of Zagoruyko &
Komodakis (2017) with a widening factor of k = 4 and a single block per ResNet group b = 1,
giving a final network with 8 trainable layers. For both Figure 1 (d) and (e) as well as Figure
J.1 use Adam with a learning rate of η = 10-5 and initial weight scale of σ = 0.3 in standard
parameterization for all intermediate blocks. For the first conv layer, we used σ = 6.0. We find
that small initial weight variance in the first layer gives rise to less stable learning and worse kernel
alignment.
Below, in Figure J.2, we provide comprehensive results for different depths which we control by
increasing the number of blocks per group b, corresponding to WRNs with 6b + 1 trainable conv
layers.
J.1 Adaptive Optimizers and the Relevant Kernel
Many adaptive gradient methods compute updates to parameters θj according to
θj (t) = -η (t) d∂L
(90)
27
Published as a conference paper at ICLR 2022
(a) Dynamics
(b) Predictions
Figure J.1: The dynamics and predictions of a Wide-Resnet with k = 4 and b = 1 on P = 100
unwhited CIFAR-10 images from the first two classes.
(a) Training Loss
(b) Kernel Norm
(c) Alignment Dynamics
W 0.8
≡0.6
J
I 0.4
J 0.2
0.0
Wide Res-Net Blocks
(d) Predictor Comparison
Figure J.2: The silent alignment effect is preserved across a large range of depths in WideResNet
trained on whitened CIFAR-10 images. The number of blocks per group b alters the total number
of conv layers (6b + 1 total conv layers). (a) The deeper models train faster with Adam. (b) The
final NTK norm increases with depth. (c) The alignment achieves close to its final value by the time
the kernel norm reaches 10% of its final value (dashed line), indicating successful silent alignment.
(d) The neural network predictions are very close to the predictions of the final NTK but is not
accurately predicted by the initial NTK.
where ηj (t) are time-varying functions which are computed in terms of the history of gradient mo-
ments for parameter θj or in terms of its instantaneous gradient. The relevant kernel at time t which
governs instantaneous evolution of network predictions is
∂f (x,t) ∂f (x0,t)
∂θj	∂θj
K(x, x0, t) =	ηj (t)
j
(91)
since f (x) = £* K(x, x*,t)(yμ - f (xμ,t)). Though We do not calculate this kernel which is
relevant to the adaptive learning rate scheme since it is not supported in Neural Tangents API, this
could be a worthy future investigation.
28
Published as a conference paper at ICLR 2022
0.0
sso-j
0	1000	2000	3000	4000	5000	6000	7000
UXJoN aUg
3000	3500
(b) Kernel Norm
(a) Train Loss Dynamics
(c) Alignment
0.5	1.0	1.5	2.0	2.5	3.0	3.5	4.0	4.5
Wide Res-Net Width
(d) Predictor Comparison
Figure J.3: Varying the ResNet widening parameter k also alters the kernel and loss dynamics. (a)
The loss curve for b = 2 WRNs with widening factor k. Wider networks train more quickly. (b)
The kernel norm increases more rapidly for wider networks but changes by a smaller amount. (c)
Alignment reaches close to its asymptote by the time the kernel norm grows to 10% its final value
(dashed). (d) The final kernel is a much better predictor of the NN function than the initial kernel.
29