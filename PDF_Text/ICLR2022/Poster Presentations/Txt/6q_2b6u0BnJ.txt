Published as a conference paper at ICLR 2022
TRAIL: Near-Optimal Imitation Learning with
Suboptimal Data
Mengjiao Yang
UC Berkeley, Google Brain
sherryy@google.com
Sergey Levine
UC Berkeley, Google Brain
Ofir Nachum
Google Brain
Ab stract
The aim in imitation learning is to learn effective policies by utilizing near-optimal
expert demonstrations. However, high-quality demonstrations from human ex-
perts can be expensive to obtain in large number. On the other hand, it is often
much easier to obtain large quantities of suboptimal or task-agnostic trajectories,
which are not useful for direct imitation, but can nevertheless provide insight
into the dynamical structure of the environment, showing what could be done
in the environment even if not what should be done. We ask the question, is
it possible to utilize such suboptimal offline datasets to facilitate provably im-
proved downstream imitation learning? In this work, we answer this question
affirmatively and present training objectives that use offline datasets to learn a
factored transition model whose structure enables the extraction of a latent ac-
tion space. Our theoretical analysis shows that the learned latent action space
can boost the sample-efficiency of downstream imitation learning, effectively re-
ducing the need for large near-optimal expert datasets through the use of aux-
iliary non-expert data. To learn the latent action space in practice, we propose
TRAIL (Transition-Reparametrized Actions for Imitation Learning), an algorithm
that learns an energy-based transition model contrastively, and uses the transition
model to reparametrize the action space for sample-efficient imitation learning.
We evaluate the practicality of our objective through experiments on a set of nav-
igation and locomotion tasks. Our results verify the benefits suggested by our
theory and show that TRAIL is able to improve baseline imitation learning by up
to 4x in performance.
1	Introduction
Imitation learning uses expert demonstration data to learn sequential decision making poli-
cies (Schaal, 1999). Such demonstrations, often produced by human experts, can be costly to obtain
in large number. On the other hand, practical application domains, such as recommendation (Afsar
et al., 2021) and dialogue (Jiang et al., 2021) systems, provide large quantities of offline data gen-
erated by suboptimal agents. Since the offline data is suboptimal in performance, using it directly
for imitation learning is infeasible. While some prior works have proposed using suboptimal offline
data for offline reinforcement learning (RL) (Kumar et al., 2019; Wu et al., 2019; Levine et al.,
2020), this would require reward information, which may be unavailable or infeasible to compute
from suboptimal data (Abbeel & Ng, 2004). Nevertheless, conceptually, suboptimal offline datasets
should contain useful information about the environment, if only we could distill that information
into a useful form that can aid downstream imitation learning.
One approach to leveraging suboptimal offline datasets is to use the offline data to extract a lower-
dimensional latent action space, and then perform imitation learning on an expert dataset using
this latent action space. If the latent action space is learned properly, one may hope that perform-
ing imitation learning in the latent space can reduce the need for large quantities of expert data.
While a number of prior works have studied similar approaches in the context of hierarchical im-
itation and RL setting (Parr & Russell, 1998; Dietterich et al., 1998; Sutton et al., 1999; Kulkarni
et al., 2016; Vezhnevets et al., 2017; Nachum et al., 2018a; Ajay et al., 2020; Pertsch et al., 2020;
Hakhamaneshi et al., 2021), such methods typically focus on the theoretical and practical benefits
of temporal abstraction by extracting temporally extended skills from data or experience. That is,
the main benefit of these approaches is that the latent action space operates at a lower temporal
frequency than the original environment action space. We instead focus directly on the question of
action representation: instead of learning skills that provide for temporal abstraction, we aim to di-
rectly reparameterize the action space in a way that provides for more sample-efficient downstream
1
Published as a conference paper at ICLR 2022
Transition reparametrized actions
(1) Tz。φ(s, a)	(2) ∏α (a | S, Φ(s, a))
{(S, a, S')}
—	&of	」
Pretraining
(3) ∏z (φ(s, a) | S)
Downstream Imitation
a ：
工∖
∏α (a IS, z)
Z ~ ∏z(s )
…	S——S
Inference
Figure 1: The TRAIL framework. Pretraining learns a factored transition model TZ ◦ φ and an
action decoder ∏a on Doff. Downstream imitation learns a latent policy ∏z on Dπ* with expert
actions reparametrized by φ. During inference, πZ and πα are combined to sample an action.
imitation without the need to reduce control frequency. Unlike learning temporal abstractions, ac-
tion reparamtrization does not have to rely on any hierarchical structures in the offline data, and can
therefore utilize highly suboptimal datasets (e.g., with random actions).
Aiming for a provably-efficient approach to utilizing highly suboptimal offline datasets, we use first
principles to derive an upper bound on the quality of an imitation learned policy involving three
terms corresponding to (1) action representation and (2) action decoder learning on a suboptimal
offline dataset, and finally, (3) behavioral cloning (i.e., max-likelihood learning of latent actions)
on an expert demonstration dataset. The first term in our bound immediately suggests a practical
offline training objective based on a transition dynamics loss using an factored transition model. We
show that under specific factorizations (e.g., low-dimensional or linear), one can guarantee improved
sample efficiency on the expert dataset. Crucially, our mathematical results avoid the potential
shortcomings of temporal skill extraction, as our bound is guaranteed to hold even when there is no
temporal abstraction in the latent action space.
We translate these mathematical results into an algorithm that we call Transition-Reparametrized
Actions for Imitation Learning (TRAIL). As shown in Figure 1, TRAIL consists of a pretraining
stage (corresponding to the first two terms in our bound) and a downstream imitation learning stage
(corresponding to the last term in our bound). During the pretraining stage, TRAIL uses an offline
dataset to learn a factored transition model and a paired action decoder. During the downstream
imitation learning stage, TRAIL first reparametrizes expert actions into the latent action space ac-
cording to the learned transition model, and then learns a latent policy via behavioral cloning in the
latent action space. During inference, TRAIL uses the imitation learned latent policy and action
decoder in conjunction to act in the environment. In practice, TRAIL parametrizes the transition
model as an energy-based model (EBM) for flexibility and trains the EBM with a contrastive loss.
The EBM enables the low-dimensional factored transition model referenced by our theory, and we
also show that one can recover the linear transition model in our theory by approximating the EBM
with random Fourier features (Rahimi et al., 2007).
To summarize, our contributions include (i) a provably beneficial objective for learning action rep-
resentations without temporal abstraction and (ii) a practical algorithm for optimizing the proposed
objective by learning an EBM or linear transition model. An extensive evaluation on a set of nav-
igation and locomotion tasks demonstrates the effectiveness of the proposed objective. TRAIL’s
empirical success compared to a variety of existing methods suggests that the benefit of learning
single-step action representations has been overlooked by previous temporal skill extraction meth-
ods. Additionally, TRAIL significantly improves behavioral cloning even when the offline dataset is
unimodal or highly suboptimal (e.g., obtained from a random policy), whereas temporal skill extrac-
tion methods lead to degraded performance in these scenarios. Lastly, we show that TRAIL, without
using reward labels, can perform similarly or better than offline reinforcement learning (RL) with
orders of magnitude less expert data, suggesting new ways for offline learning of squential decision
making policies.
2	Related Work
Learning action abstractions is a long standing topic in the hierarchical RL literature (Parr & Russell,
1998; Dietterich et al., 1998; Sutton et al., 1999; Kulkarni et al., 2016; Nachum et al., 2018a). A
large body of work focusing on online skill discovery have been proposed as a means to improve
exploration and sample complexity in online RL. For instance, Eysenbach et al. (2018); Sharma
et al. (2019); Gregor et al. (2016); Warde-Farley et al. (2018); Liu et al. (2021) propose to learn a
diverse set of skills by maximizing an information theoretic objective. Online skill discovery is also
commonly seen in a hierarchical framework that learns a continuous space (Vezhnevets et al., 2017;
Hausman et al., 2018; Nachum et al., 2018a; 2019) or a discrete set of lower-level policies (Bacon
2
Published as a conference paper at ICLR 2022
et al., 2017; Stolle & Precup, 2002; Peng et al., 2019), upon which higher-level policies are trained to
solve specific tasks. Different from these works, we focus on learning action representations offline
from a fixed suboptimal dataset to accelerate imitation learning.
Aside from online skill discovery, offline skill extraction focuses on learning temporally extended
action abstractions from a fixed offline dataset. Methods for offline skill extraction generally in-
volve maximum likelihood training of some latent variable models on the offline data, followed by
downstream planning (Lynch et al., 2020), imitation learning (Kipf et al., 2019; Ajay et al., 2020;
Hakhamaneshi et al., 2021), offline RL (Ajay et al., 2020; Zhou et al., 2020), or online RL (Fox
et al., 2017; Krishnan et al., 2017; Shankar & Gupta, 2020; Shankar et al., 2019; Singh et al., 2020;
Pertsch et al., 2020; 2021; Wang et al., 2021) in the induced latent action space. Among these
works, those that provide a theoretical analysis attribute the benefit of skill extraction predominantly
to increased temporal abstraction as opposed to the learned action space being any “easier” to learn
from than the raw action space (Ajay et al., 2020; Nachum et al., 2018b). Unlike these methods, our
analysis focuses on the advantage of a lower-dimensional reparametrized action space agnostic to
temporal abstraction. Our method also applies to offline data that is highly suboptimal (e.g., contains
random actions) and potentially unimodal (e.g., without diverse skills to be extracted), which have
been considered challenging by previous work (Ajay et al., 2020).
While we focus on reducing the complexity of the action space through the lens of action representa-
tion learning, there exists a disjoint set of work that focuses on accelerating RL with state represen-
tation learning (Singh et al., 1995; Ren & Krogh, 2002; Castro & Precup, 2010; Gelada et al., 2019;
Zhang et al., 2020; Arora et al., 2020; Nachum & Yang, 2021), some of which have proposed to
extract a latent state space from a learned dynamics model. Analogous to our own derivations, these
works attribute the benefit of representation learning to a smaller latent state space reduced from a
high-dimensional input state space (e.g., images). Lastly, there exist model-based approaches that
utilizes offline data to learn model dynamics which in tern accelerates imitation (Chang et al., 2021;
Rafailov et al., 2021). These work differ from our focus of using the offline data to learn latent
action space.
3	Preliminaries
In this section, we introduce the problem statements for imitation learning and learning-based con-
trol, and define relevant notations.
Markov decision process. Consider an MDP (PUterman, 1994) M :=(S, A, R, T, μ, γ), Con-
sisting ofa state space S, an action space A, a reward function R : S × A → R, a transition function
T : S X A → ∆(S)1, an initial state distribution μ ∈ ∆(S), and a discount factor Y ∈ [0,1) A
policy π : S → ∆(A) interacts with the environment starting at an initial state so 〜μ. An action
at 〜 ∏(st) is sampled and applied to the environment at each step t ≥ 0. The environment pro-
duces a scalar reward R(st, at) and transitions into the next state st+ι 〜T(St, at). Note that We
are specifically interested in the imitation learning setting, where the rewards produced by R are
unobserved by the learner. The state visitation distribution dπ(s) induced by a policy π is defined as
dπ(s) := (1 一 Y) P∞=o γt ∙ Pr [st = s∣π, M]. We relax the notation and use (s, a)〜dπ to denote
s ~ dπ, a ~ π(s).
Learning goal. Imitation learning aims to recover an expert policy π* with access to only a fixed
set of samples from the expert: Dπ* = {(si, ai)}n=ι with Si 〜d∏ and a% 〜π*(si). One approach
to imitation learning is to learn a policy ∏ that minimizes some discrepancy between ∏ and ∏*. In
our analysis, we will use the total variation (TV) divergence in state visitation distributions,
Diff(π,π*) = Dτv(dπ∣∣dπ*),
as the way to measure the discrepancy between ∏ and ∏*. Our bounds can be easily modified to
apply to other divergence measures such as the Kullback-Leibler (KL) divergence or difference in
expected future returns. Behavioral cloning (BC) (Pomerleau, 1989) solves the imitation learning
problem by learning π from Dπ* via a maximum likelihood objective
Jbc(∏):= E(s,a)~(d∏* ,π*)[- log ∏(a∣s)],
which optimizes an upper bound of Diff(∏, ∏*) defined above (Ross & Bagnell, 2010; Nachum &
Yang, 2021):
Diff(π,π*) ≤ — JEdEd∏* [Dkl(π*(s)∣∣π(s))] =	- Jconst(π*) + 1 Jbc(∏).
1 - γ V 2	1 - γ V	2
1∆(X) denotes the simplex over a set X .
3
Published as a conference paper at ICLR 2022
BC with suboptimal offline data. The standard BC objective (i.e., direct max-likelihood on
Dπ*) can struggle to attain good performance When the amount of expert demonstrations is lim-
ited (Ross et al., 2011; Tu et al., 2021). We assume access to an additional suboptimal offline
dataset Doff = {(si, ai, s0i)}im=1, Where the suboptimality is a result of (i) suboptimal action sam-
PleS ai 〜Unif A and (ii) lack of reward labels. We use (s, a, s0)〜doff as a shorthand for sim-
ulating finite sampling from Doff via Si 〜 doff,ai 〜 Unifa, si 〜 T(si,ai), where doff is an
unknown offline state distribution. We assume doff sufficiently covers the expert distribution; i.e.,
dπ* (s) > 0 ⇒ doff (s) > 0 for all s ∈ S. The uniform sampling of actions in Doff is largely for
mathematical convenience, and in theory can be replaced with any distribution uniformly bounded
from below by η > 0, and our derived bounds will be scaled by ^11^ as a result. This works focuses
on how to utilize such a suboptimal Doff to provably accelerate BC.
4 Near- Optimal Imitation Learning with Reparametrized Actions
In this section, we provide a provably-efficient objective for learning action representations from
suboptimal data. Our initial derivations (Theorem 1) apply to general policies and latent action
spaces, while our subsequent result (Theorem 3) provides improved bounds for specialized settings
with continuous latent action spaces. Finally, we present our practical method TRAIL for action
representation learning and downstream imitation learning.
4.1 Performance B ound with Reparametrized Actions
Despite Doff being highly suboptimal (e.g., with random actions), the large set of (s, a, s0) tuples
from Doff reveals the transition dynamics of the environment, which a latent action_space should
support. Under this motivation, we propose to learn a factored transition model T := TZ ◦ φ
from the offline dataset Doff, where φ : S × A → Z is an action representaiton function and
TZ : S × Z → ∆(S) is a latent transition model. Intuitively, good action representations should
enable good imitation learning.
We formalize this intuition in the theorem below by establishing a bound on the quality of a learned
policy based on (1) an offline pretraining objective for learning φ and TZ, (2) an offline decoding
objective for learning an action decoder πα, and (3) a downstream imitation learning objective for
learning a latent policy πZ with respect to latent actions determined by φ.
Theorem 1.	Consider an action representation function φ : S × A → Z, a factored transition
model TZ : S × Z → ∆(S), an action decoder πα : S × Z → ∆(A), and a tabular latent policy
πZ : S → ∆(Z). Define the transition representation error as
JT(TZ, φ) := E(s,a)〜doff DKL(T(S, a)kTz(s, φ(s, a)))],
the action decoding error as
JDE(∏α, Φ) ：= E(s,a)〜doff [— log ∏α (a|S,φ(s,a))],
and the latent behavioral cloning error as
Jbc,φ(∏z):= E(s,a)〜(d∏*,π*)[- log∏Z(φ(s, a)|s)].
Then the TV divergence between the state visitation distribu-
tions of ∏α ◦ ∏z	： S →	∆(A) and π* can be bounded as
Diff(∏ɑ ◦ ∏z, ∏*) ≤
• J1 E(s,a)〜doff [DKL(T(S, a)kTZ(S, φ(s, a)))]
2 、	一__—	二
Pretraining
JT(TZ, φ)
+C2 • J2 Es〜doff max DKL (∏α* (s, Z)II∏α (s, z))]
、------------------------------{-------------------}
≈ const(doff, φ) + JDE(πα, φ)
(1)
(2)
Downstream
Imitation
42 Es〜d∏* [Dkl(π*,z(S)IInZ(s))],
=const(n*,φ) + Jbc,φ (∏z )
(3)
where
C3 =
Ci = γ∣A∣(1 - γ)-1(1 + Dχ2(dπ* ∣doff) 1), C2 = γ(1 - Y)-1(1 + Dχ2(dπ* ∣doff)1),
γ(1 - γ)-1, πα* is the optimal action decoder for a specific data distribution doff and a
4
Published as a conference paper at ICLR 2022
specific φ:
/	doff (s,a) ∙ l[z = φ(s,a)]
πα* (a|s,z) = Pa0∈A doff (s,a0) ∙ l[z = φ(s,a0)]]
and π*,z is the marginalization of π* onto Z according to φ:
∏*,z (z|s)：=	E	∏*(a∣s).
a∈A,z=φ(s,a)
Theorem 1 essentially decomposes the imitation learning error into (1) a transition-based represen-
tation error JT, (2) an action decoding error JDE, and (3) a latent behavioral cloning error JBC,φ .
Notice that only (3) requires expert data Dπ* ; (1) and (2) are trained on the large offline data Doff .
By choosing |Z | that is smaller than |A|, fewer demonstrations are needed to achieve small error
in JBC,φ compared to vanilla BC with JBC. The Pearson χ2 divergence term Dχ2 (dπ* kdoff) in C1
and C2 accounts for the difference in state visitation between the expert and offline data. In the case
where dπ* differs too much from doff, known as the distribution shift problem in offline RL (Levine
et al., 2020), the errors from JT and JDE are amplified and the terms (1) and (2) in Theorem 1 dom-
inate. Otherwise, as JT → 0 and πα, φ → arg min JDE, optimizing πZ in the latent action space is
guaranteed to optimize π in the original action space.
Sample Complexity To formalize the intuition that a smaller latent action space |Z | < |A| leads
to more sample efficient downstream behavioral cloning, we provide the following theorem in
the tabular action setting. First, assume access to an oracle latent action representation function
φorcl := OPT φ(Doff) which yields pretraining errors (1)(φorcl) and (2)(φorcl) in Theorem 1. For
downstream behavioral cloning, we consider learning a tabular πZ on Dπ* with n expert samples.
We can bound the expected difference between a latent policy ∏φorcι,z with respect to φorci and π
as follows.
Theorem 2.	Let φorci := OPTφ(Doff) and πorci Z be the latent BC policy with respect to φorci.
We have,
EDπ* [Diff(πφorcι,z,πJ] ≤ (1)(φorcl) + (2)(φorcl) + C3 ∙	^ L
where C3 is the same as in Theorem 1.
We can contrast this bound to its form in the vanilla BC setting, for which |Z| = |A| and both
(1)(φorci ) and (2)(φorci) are zero. We can expect an improvement in sample complexity from
reparametrized actions when the errors in (1) and (2) are small and |Z| < |A|.
4.2 Linear Transition Models with Deterministic Latent Policy
Theorem 1 has introduced the notion of a latent expert policy ∏*,z, and minimizes the KL divergence
between ∏*,z and a tabular latent policy ∏z. However, it is not immediately clear, in the case of
continuous latent actions, how to ensure that the latent policy πZ is expressive enough to capture any
∏*,z. In this section, We provide guarantees for recovering stochastic expert policies with continuous
latent action space under a linear transition model.
Consider a continuous latent space Z ⊂ Rd and a deterministic latent policy πθ(s) = θs for some
θ ∈ Rd×lSl. While a deterministic θ in general cannot capture a stochastic ∏*, We show that under
a linear transition model TZ(s0|s, φ(s, a)) = w(s0)>φ(s, a), there always exists a deterministic
policy ∏θ : S → Rd, such that θs = ∏*,z(s), ∀s ∈ S. This means that our scheme for offline
pretraining paired with downstream imitation learning can provably recover any expert policy ∏
from a deterministic ∏θ, regardless of whether ∏ is stochastic.
Theorem 3.	Let φ : S × A → Z for some Z ⊂ Rd and suppose there exist w : S → Rd such that
TZ (s0 |s, φ(s, a)) = w(s0)>φ(s, a) for all s, s0∈ S, a ∈ A. Let πα : S × Z → ∆(A) be an action
decoder, π : S → ∆(A) be any policy in M and πθ : S → Rd be a deterministic latent policy for
some θ ∈ Rd×lSl. Then,
Diff(∏α ◦ ∏θ,∏*) ≤ (I)(TZ,Φ) + (2)(∏ɑ,φ)
Dmw烧 m1+C4 ∙ I ∂dθ Es~d∏* *s)[(θs-φ(s,a))2]∣1,	(4)
where C4 = 4|S∣∣∣w∣∣∞, (1) and (2) corresponds to the first and second terms in the bound in
Theorem 1.
5
Published as a conference paper at ICLR 2022
By replacing term (3) in Theorem 1 that corresponds to behavioral cloning in the latent action space
by term (4) in Theorem 3 that is a convex function unbounded in all directions, we are guaranteed
that ∏θ is Provably optimal regardless of the form of π* and π* ,z . Note that the downstream imitation
learning objective implied by term (4) is simply the mean squared error between actions θs chosen
by πθ and reparameterized actions φ(s, a) appearing in the expert dataset.
4.3 TRAIL: Reparametrized Actions and Imitation Learning in Practice
In this section, we describe our learning framework, Transition-Reparametrized Actions for Im-
itation Learning (TRAIL). TRAIL consists of two training stages: pretraining and downstream
behavioral cloning. During pretraining, TRAIL learns TZ and φ by minimizing JT (TZ , φ) =
E(s,a)~doff [Dkl(丁(s,a)IlTZ(s,φ(s,a)))]. Also during pretraining, TRAIL learns ∏a and φ by
minimizing Jde(∏α, φ) ：= E(s,a)~doff [- log∏α(a|s, φ(s, a))]. TRAIL parametrizes ∏a as a mul-
tivariate Gaussian distribution. Depending on whether TZ is defined according to Theorem 1 or
Theorem 3, we have either TRAIL EBM or TRAIL linear.
TRAIL EBM for Theorem 1. In the tabular action setting that corresponds to Theorem 1, to
ensure that the factored transition model TZ is flexible to capture any complex (e.g., multi-modal)
transitions in the offline dataset, we propose to use an energy-based model (EBM) to parametrize
TZ (s0|s, φ(s, a)),
Tz(s0∣s, φ(s,a)) Y ρ(s0)exp(-∣φ(s,a) — ψ(s0)∣2),	⑸
where ρ is a fixed distribution over S and ψ : S → Z is a function of s0 . In our implementation
we set ρ to be the distribution of s0 in doff , which enables a practical learning objective for TZ by
minimizing E(5,a)~doff [Dkl(T(s, a)∣TZ(s,φ(s,a)))] in Theorem 1 using a contrastive loss:
Edoff [—log TZ (s0∣s,φ(s,a)))] =Const(doff) + 1 Edoff [∣∣φ(s,a) — ψ(s0 )||2 ]
+ logEτ~ρ[eχp{-2llφ(s,a) 一 ψ(WO)Il2}].
During downstream behavioral cloning, TRAIL EBM learns a latent Gaussian policy πZ by mini-
mizing Jbc,φ(∏z) = E(s,a)~(d∏*,∏*)[— log∏z(φ(s,a)∣s)] with φ fixed. During inference, TRAIL
EBM first samples a latent action according to Z 〜∏z(s), and decodes the latent action using
a 〜∏α (s, Z) to act in an environment. Figure 1 describes this process pictorially.
TRAIL Linear for Theorem 3. In the continuous latent action setting that corresponds to Theo-
rem 3, we propose TRAIL linear, an approximation of TRAIL EBM, to enable learning linear tran-
sition models required by Theorem 3. Specifically, We first learn f, g that parameterize an energy-
based transition model T(s0∣s,a) Y ρ(s0) exp{ — ||f (s,a) — g(s0)∣∣2∕2} using the same contrastive
loss as above (replacing φ and ψ by f and g), and then apply random Fourier features (Rahimi et al.,
2007) to recover φ(s, a) = Cos(Wf (s, a) + b), where W is a d X k matrix with entries sampled
from a unit Gaussian and b a vector with entries sampled uniformly from [0, 2π]. W and b are im-
plemented as an untrainable neural network layer on top of f. This results in an approximate linear
transition model,
T(s0ls,a) Y ρ(s)exp{—||f(s,a) ― g(s0)ll2/2} Y ψ(s0)>φ(s,a).
During downstream behavioral cloning, TRAIL linear learns a deterministic policy πθ in the continu-
ous latent action space determined by φ via minimizing Il 磊 Es~d∏* ,a~∏* (s)[(θs - φ(s,a))2]∣1 with
φ fixed. During inference, TRAIL linear first determines the latent action according to Z = πθ (s),
and decodes the latent action using a 〜∏α (s, z) to act in an environment.
antmaze-medium antmaze-large
ant	CartPoIe-SwingUP cheetah-run fish-swim walker-stand walker-walk humanoid-run
Figure 2: Tasks for our empirical evaluation. We include the challenging AntMaze navigation tasks
from D4RL (Fu et al., 2020) and low (1-DoF) to high (21-DoF) dimensional locomotaion tasks from
DeepMind Control Suite (Tassa et al., 2018).
6
Published as a conference paper at ICLR 2022
Expert Dn
expert 10 trajs
expert 10 trajs	expert 10 trajs
expert 10 trajs
SUbOPtimal Dof antmaze-large-diverse
TRAIL (EBM)
SkilD (t=10)
SkilD (t=l)-
SPiRL (t=10)
SPiRL (t=l)
OPAL (t=10)
OPAL(t=l)-
Baseline BC
O
Figure 3: Average success rate (%) over 4 seeds of TRAIL EBM (Theorem 1) and temporal skill
extraction methods - SkiLD (Pertsch et al., 2021), SPiRL (Pertsch et al., 2020), and OPAL (Ajay
et al., 2020) - pretrained on suboptimal Doff. Baseline BC corresponds to direct behavioral cloning
of expert Dπ* without latent actions.
5	Experimental Evaluation
We now evaluate TRAIL on a set of navigation and locomotion tasks (Figure 2). Our evaluation
is designed to study how well TRAIL can improve imitation learning with limited expert data by
leveraging available suboptimal offline data. We evaluate the improvement attained by TRAIL over
vanilla BC, and additionally compare TRAIL to previously proposed temporal skill extraction meth-
ods. Since there is no existing benchmark for imitation learning with suboptimal offline data, we
adapt existing datasets for offline RL, which contain suboptimal data, and augment them with a
small amount of expert data for downstream imitation learning.
5.1	Evaluating Navigation without Temporal Abstraction
Description and Baselines. We start our evaluation on the AntMaze task from D4RL (Fu et al.,
2020), which has been used as a testbed by recent works on temporal skill extraction for few-shot
imitation (Ajay et al., 2020) and RL (Ajay et al., 2020; Pertsch et al., 2020; 2021). We compare
TRAIL to OPAL (Ajay et al., 2020), SkilD (Pertsch et al., 2021), and SPiRL (Pertsch et al., 2020),
all of which use an offline dataset to extract temporally extended (length t = 10) skills to form
a latent action space for downstream learning. SkiLD and SPiRL are originally designed only for
downstream RL, so we modify them to support downstream imitation learning as described in Ap-
pendix C. While a number of other works have also proposed to learn primitives for hierarchical
imitation (Kipf et al., 2019; Hakhamaneshi et al., 2021) and RL (Fox et al., 2017; Krishnan et al.,
2017; Shankar et al., 2019; Shankar & Gupta, 2020; Singh et al., 2020), we chose OPAL, SkiLD,
and SPiRL for comparison because they are the most recent works in this area with reported results
that suggest these methods are state-of-the-art, especially in learning from suboptimal offline data
based on D4RL. To construct the suboptimal and expert datasets, we follow the protocol in Ajay
et al. (2020), which uses the full diverse or play D4RL AntMaze datasets as the suboptimal
offline data, while using a set of n = 10 expert trajectories (navigating from one corner of the
maze to the opposite corner) as the expert data. The diverse and play datasets are suboptimal
in the corner-to-corner navigation task, as they only contain data that navigates to random or fixed
locations different from task evaluation.
Implementation Details. For TRAIL, we parameterize φ(s, a) and ψ(s0) using separate feed-
forward neural networks (see details in Appendix C) and train the transition EBM via the contrastive
objective described in Section 4.3. We parametrize both the action decoder πα and the latent πZ
using multivariate Gaussian distributions with neural-network approximated mean and variance.
For the temporal skill extraction methods, we implement the trajectory encoder using a bidirectional
RNN and parametrize skill prior, latent policy, and action decoder as Gaussians following Ajay
et al. (2020). We adapt SPiRL and SkiLD for imitation learning by including the KL Divergence
term between the latent policy and the skill prior during downstream behavioral cloning (see details
in Appendix C). We do a search on the extend of temporal abstraction, and found t = 10 to work the
best as reported in these papers’ maze experiments. We also experimented with a version of vanilla
BC pretrained on the suboptimal data and fine-tuned on expert data for fair comparison, which did
not show a significant difference from directly training vanilla BC on expert data.
Results. Figure 3 shows the average performance of TRAIL in terms of task success rate (out of
100%) compared to the prior methods. Since all of the prior methods are proposed in terms of tempo-
ral abstraction, we evaluate them both with the default temporal abstract, t = 10, as well as without
temporal abstraction, corresponding to t = 1. Note that TRAIL uses no temporal abstraction. We
7
Published as a conference paper at ICLR 2022
Expert Dn	ant-expert 10k
Suboptimal Dof	ant-medium
ant-expert 25k
ant-medium
ant-expert 10k
ant-expert 25k
ant-expert 10k
ant-expert 25k
ant-medium-replay ant-medium-replay
TRAIL (EBM)
TRAJL (linear)	―
SJdlD (t=10)
SkilD (t=l)
SPiRL (t=10)
SBRL(t=l)_______
OPAL (t-10)
OPAL (t=l)	——
Baseline BC
0	20	40
Figure 4: Average rewards (over 4 seeds) of TRAIL EBM (Theorem 1), TRAIL linear (The-
orem 3), and baseline methods when using a variety of unimodal (ant-medium), low-quality
(ant-medium-replay), and random (ant-random) offline datasets Doff paired with a smaller
expert dataset Dπ* (either 10k or 25k expert transitions).
find that on the simpler antmaze-medium task, TRAIL trained on a single-step transition model
performs similarly to the set of temporal skill extraction methods with t = 10. However, these skill
extraction methods experience a degradation in performance when temporal abstraction is removed
(t = 1). This corroborates the existing theory in these works (Ajay et al., 2020), which attributes
their benefits predominantly to temporal abstraction rather than producing a latent action space that
is “easier” to learn. Meanwhile, TRAIL is able to excel without any temporal abstraction.
These differences become even more pronounced on the harder antmaze-large tasks. We see
that TRAIL maintains significant improvements over vanilla BC, whereas temporal skill extraction
fails to achieve good performance even with t = 10. These results suggest that TRAIL attains
significant improvement specifically from utilizing the suboptimal data for learning suitable action
representations, rather than simply from providing temporal abstraction. Of course, this does not
mean that temporal abstraction is never helpful. Rather, our results serve as evidence that suboptimal
data can be useful for imitation learning not just by providing temporally extended skills, but by
actually reformulating the action space to make imitation learning easier and more efficient.
5.2	Evaluating Locomotion with Highly Suboptimal Offline Data
Description. The performance of TRAIL trained on a single-step transition model in the previous
section suggests that learning single-step latent action representations can benefit a broader set of
tasks for which temporal abstraction may not be helpful, e.g., when the offline data is highly sub-
optimal (with near-random actions) or unimodal (collected by a single stationary policy). In this
section, we consider a Gym-MuJoCo task from D4RL using the same 8-DoF quadruped ant robot
as the previously evaluated navigation task. We first learn action representations from the medium,
medium-replay, or random datasets, and imitate from 1% or 2.5% of the expert datasets
from D4RL. The medium dataset represents data collected from a mediocre stationary policy (ex-
hibiting unimodal behavior), and the random dataset is collected by a randomly initialized policy
and is hence highly suboptimal.
Implementation Details. For this task, we additionally train a linear version of TRAIL by approx-
imating the transition EBM using random Fourier features (Rahimi et al., 2007) and learn a determin-
istic latent policy following Theorem 3. Specifically, we use separate feed-forward networks to pa-
rameterize f(s, a) and g(s0), and extract action representations using φ(s, a) = cos(W f (s, a) + b),
where W, b are untrainable randomly initialized variables as described in Section 4.3. Different from
TRAIL EBM which parametrizes πZ as a Gaussian, TRAIL linear parametrizes the deterministic πθ
using a feed-forward neural network.
Results. Our results are shown in Figure 4. Both the EBM and linear versions of TRAIL con-
sistently improve over baseline BC, whereas temporal skill extraction methods generally lead to
worse performance regardless of the extent of abstraction, likely due to the degenerate effect (i.e.,
latent skills being ignored by a flexible action decoder) resulted from unimodal offline datasets as
discussed in (Ajay et al., 2020). Surprisingly, TRAIL achieves a significant performance boost even
when latent actions are learned from the random dataset, suggesting the benefit of learning action
representations from transition models when the offline data is highly suboptimal. Additionally, the
linear variant of TRAIL performs slightly better than the EBM variant when the expert sample size
is small (i.e., 10k), suggesting the benefit of learning deterministic latent policies from Theorem 3
when the environment is effectively approximated by a linear transition model.
8
Published as a conference paper at ICLR 2022
TRAIL (energy) -------- TRAIL (linear) -------- BaSeIine BC -------- OPAL (t=10)	----CRR
Dn *cartpole-swingup ~2 0%	cheetah-run ~2 0%	fish-swim ~2 0%	walker-stand ~2 0%	walker-walk ~2 0%	humanoid-run ~2 0%
Dof Cartpole-SWingup 80%	cheetah-run 80%	fish-swim 80%	walker-stand 80%	walker-walk 80%	humanoid-run 80%
Figure 5: Average task rewards (over 4 seeds) of TRAIL EBM (Theorem 1), TRAIL linear (Theo-
rem 3), and OPAL (other temporal methods are included in Appendix D) pretrained on the bottom
80% of the RL Unplugged datasets followed by behavioral cloning in the latent action space on 今
of the top 20% of the RL Unplugged datasets following the setup in Zolna et al. (2020). Baseline
BC achieves low rewards due to the small expert sample size. Dotted lines denote the performance
of CRR (Wang et al., 2020), an offline RL method trained on the full RL Unplugged datasets with
reward labels.
5.3	Evaluation on DeepMind Control Suite
Description. Having witnessed the improvement TRAIL brings to behavioral cloning on AntMaze
and MuJoCo Ant, we wonder how TRAIL perform on a wider spectrum of locomotion tasks
with various degrees of freedom. We consider 6 locomotion tasks from the DeepMind Control
Suite (Tassa et al., 2018) ranging from simple (e.g., 1-DoF cartople-swingup) to complex
(e.g., 21-DoF humanoid-run) tasks. Following the setup in Zolna et al. (2020), We take 今 of
the trajectories whose episodic reward is among the top 20% of the open source RL Unplugged
datasets (Gulcehre et al., 2020) as expert demonstrations (see numbers of expert trajectories in Ap-
pendix C), and the bottom 80% of RL Unplugged as the suboptimal offline data. For completeness,
we additionally include comparison to Critic Regularized Regression (CRR) (Wang et al., 2020),
an offline RL method with competitive performance on these tasks. CRR is trained on the full RL
Unplugged datasets (i.e., combined suboptimal and expert datasets) with reward labels.
Results. Figure 5 shows the comparison results. TRAIL outperforms temporal extraction methods
on both low-dimensional (e.g., cartpole-swingup) and high-dimensional (humanoid-run)
tasks. Additionally, TRAIL performs similarly to or better than CRR on 4 out of the 6 tasks despite
not using any reward labels, and only slightly worse on humanoid-run and walker-walk. To
test the robustness of TRAIL when the offline data is highly suboptimal, we further reduce the size
and quality of the offline data to the bottom 5% of the original RL Unplugged datasets. As shown
in Figure 6 in Appndix D, the performance of temporal skill extraction declines in fish-swim,
walker-stand, and walker-walk due to this change in offline data quality, whereas TRAIL
maintains the same performance as when the bottom 80% data was used, suggesting that TRAIL is
more robust to low-quality offline data.
This set of results suggests a promising direction for offline learning of sequential decision making
policies, namely to learn latent actions from abundant low-quality data and behavioral cloning in the
latent action space on scarce high-quality data. Notably, compared to offline RL, this approach is
applicable to settings where data quality cannot be easily expressed through a scalar reward.
6	Conclusion
We have derived a near-optimal objective for learning a latent action space from suboptimal offline
data that provably accelerates downstream imitation learning. To learn this objective in practice, we
propose transition-reparametrized actions for imitation learning (TRAIL), a two-stage framework
that first pretrains a factored transition model from offline data, and then uses the transition model to
reparametrize the action space prior to behavioral cloning. Our empirical results suggest that TRAIL
can improve imitation learning drastically, even when pretrained on highly suboptimal data (e.g.,
data from a random policy), providing a new approach to imitation learning through a combination
of pretraining on task-agnostic or suboptimal data and behavioral cloning on limited expert datasets.
That said, our approach to action representation learning is not necessarily specific to imitation
learning, and insofar as the reparameterized action space simplifies downstream control problems,
it could also be combined with reinforcement learning in future work. More broadly, studying how
learned action reparameterization can accelerate various facets of learning-based control represents
an exciting future direction, and we hope that our results provide initial evidence of such a potential.
9
Published as a conference paper at ICLR 2022
Acknowledgments
We thank Dale Schuurmans and Bo Dai for valuable discussions. We thank Justin Fu, Anurag Ajay,
and Konrad Zolna for assistance in setting up evaluation tasks.
References
Pieter Abbeel and Andrew Y Ng. Apprenticeship learning via inverse reinforcement learning. In
Proceedings of the twenty-first international conference on Machine learning, pp. 1, 2004.
Joshua Achiam, David Held, Aviv Tamar, and Pieter Abbeel. Constrained policy optimization. In
International Conference on Machine Learning, pp. 22-31. PMLR, 2017.
M Mehdi Afsar, Trafford Crump, and Behrouz Far. Reinforcement learning based recommender
systems: A survey. arXiv preprint arXiv:2101.06286, 2021.
Anurag Ajay, Aviral Kumar, Pulkit Agrawal, Sergey Levine, and Ofir Nachum. Opal: Offline prim-
itive discovery for accelerating offline reinforcement learning. arXiv preprint arXiv:2010.13611,
2020.
Sanjeev Arora, Simon Du, Sham Kakade, Yuping Luo, and Nikunj Saunshi. Provable representation
learning for imitation learning via bi-level optimization. In International Conference on Machine
Learning, pp. 367-376. PMLR, 2020.
Pierre-Luc Bacon, Jean Harb, and Doina Precup. The option-critic architecture. In Proceedings of
the AAAI Conference on Artificial Intelligence, volume 31, 2017.
Daniel Berend and Aryeh Kontorovich. On the convergence of the empirical distribution. arXiv
preprint arXiv:1205.6711, 2012.
Pablo Castro and Doina Precup. Using bisimulation for policy transfer in mdps. In Proceedings of
the AAAI Conference on Artificial Intelligence, volume 24, 2010.
Jonathan Chang, Masatoshi Uehara, Dhruv Sreenivas, Rahul Kidambi, and Wen Sun. Mitigating
covariate shift in imitation learning via offline data with partial coverage. Advances in Neural
Information Processing Systems, 34, 2021.
Thomas G Dietterich et al. The maxq method for hierarchical reinforcement learning. In ICML,
volume 98, pp. 118-126. Citeseer, 1998.
Benjamin Eysenbach, Abhishek Gupta, Julian Ibarz, and Sergey Levine. Diversity is all you need:
Learning skills without a reward function. arXiv preprint arXiv:1802.06070, 2018.
Roy Fox, Sanjay Krishnan, Ion Stoica, and Ken Goldberg. Multi-level discovery of deep options.
arXiv preprint arXiv:1703.08294, 2017.
Justin Fu, Aviral Kumar, Ofir Nachum, George Tucker, and Sergey Levine. D4rl: Datasets for deep
data-driven reinforcement learning. arXiv preprint arXiv:2004.07219, 2020.
Carles Gelada, Saurabh Kumar, Jacob Buckman, Ofir Nachum, and Marc G Bellemare. Deepmdp:
Learning continuous latent space models for representation learning. In International Conference
on Machine Learning, pp. 2170-2179. PMLR, 2019.
Karol Gregor, Danilo Jimenez Rezende, and Daan Wierstra. Variational intrinsic control. arXiv
preprint arXiv:1611.07507, 2016.
Caglar Gulcehre, Ziyu Wang, Alexander Novikov, Tom Le Paine, Sergio Gomez Colmenarejo, Kon-
rad Zolna, Rishabh Agarwal, Josh Merel, Daniel Mankowitz, Cosmin Paduraru, et al. Rl un-
plugged: Benchmarks for offline reinforcement learning. arXiv e-prints, pp. arXiv-2006, 2020.
Kourosh Hakhamaneshi, Ruihan Zhao, Albert Zhan, Pieter Abbeel, and Michael Laskin. Hierarchi-
cal few-shot imitation with skill transition models. arXiv preprint arXiv:2107.08981, 2021.
Karol Hausman, Jost Tobias Springenberg, Ziyu Wang, Nicolas Heess, and Martin Riedmiller.
Learning an embedding space for transferable robot skills. In International Conference on Learn-
ing Representations, 2018.
10
Published as a conference paper at ICLR 2022
Haoming Jiang, Bo Dai, Mengjiao Yang, Tuo Zhao, and Wei Wei. Towards automatic evaluation of
dialog systems: A model-free off-policy evaluation approach. arXiv preprint arXiv:2102.10242,
2021.
Thomas Kipf, Yujia Li, Hanjun Dai, Vinicius Zambaldi, Alvaro Sanchez-Gonzalez, Edward Grefen-
stette, Pushmeet Kohli, and Peter Battaglia. Compile: Compositional imitation learning and
execution. In International Conference on Machine Learning,pp. 3418-3428. PMLR, 2019.
Sanjay Krishnan, Roy Fox, Ion Stoica, and Ken Goldberg. Ddco: Discovery of deep continuous
options for robot learning from demonstrations. In Conference on robot learning, pp. 418-437.
PMLR, 2017.
Tejas D Kulkarni, Karthik Narasimhan, Ardavan Saeedi, and Josh Tenenbaum. Hierarchical deep
reinforcement learning: Integrating temporal abstraction and intrinsic motivation. Advances in
neural information processing systems, 29:3675-3683, 2016.
Aviral Kumar, Justin Fu, George Tucker, and Sergey Levine. Stabilizing off-policy q-learning via
bootstrapping error reduction. arXiv preprint arXiv:1906.00949, 2019.
Sergey Levine, Aviral Kumar, George Tucker, and Justin Fu. Offline reinforcement learning: Tuto-
rial, review, and perspectives on open problems. arXiv preprint arXiv:2005.01643, 2020.
Jinxin Liu, Donglin Wang, Qiangxing Tian, and Zhengyu Chen. Learn goal-conditioned policy with
intrinsic motivation for deep reinforcement learning. arXiv preprint arXiv:2104.05043, 2021.
Corey Lynch, Mohi Khansari, Ted Xiao, Vikash Kumar, Jonathan Tompson, Sergey Levine, and
Pierre Sermanet. Learning latent plans from play. In Conference on Robot Learning, pp. 1113-
1132. PMLR, 2020.
Ofir Nachum and Mengjiao Yang. Provable representation learning for imitation with contrastive
fourier features. arXiv preprint arXiv:2105.12272, 2021.
Ofir Nachum, Shixiang Gu, Honglak Lee, and Sergey Levine. Data-efficient hierarchical reinforce-
ment learning. arXiv preprint arXiv:1805.08296, 2018a.
Ofir Nachum, Shixiang Gu, Honglak Lee, and Sergey Levine. Near-optimal representation learning
for hierarchical reinforcement learning. arXiv preprint arXiv:1810.01257, 2018b.
Ofir Nachum, Michael Ahn, Hugo Ponte, Shixiang Gu, and Vikash Kumar. Multi-agent manipula-
tion via locomotion using hierarchical sim2real. arXiv preprint arXiv:1908.05224, 2019.
Ronald Parr and Stuart Russell. Reinforcement learning with hierarchies of machines. Advances in
neural information processing systems, pp. 1043-1049, 1998.
Xue Bin Peng, Michael Chang, Grace Zhang, Pieter Abbeel, and Sergey Levine. Mcp: Learn-
ing composable hierarchical control with multiplicative compositional policies. arXiv preprint
arXiv:1905.09808, 2019.
Karl Pertsch, Youngwoon Lee, and Joseph J Lim. Accelerating reinforcement learning with learned
skill priors. arXiv preprint arXiv:2010.11944, 2020.
Karl Pertsch, Youngwoon Lee, Yue Wu, and Joseph J Lim. Guided reinforcement learning with
learned skills. In Self-Supervision for Reinforcement Learning Workshop-ICLR 2021, 2021.
Dean A Pomerleau. Alvinn: An autonomous land vehicle in a neural network. Technical report,
CARNEGIE-MELLON UNIV PITTSBURGH PA ARTIFICIAL INTELLIGENCE AND PSY-
CHOLOGY .. ., 1989.
Martin L Puterman. Markov Decision Processes: Discrete Stochastic Dynamic Programming. John
Wiley & Sons, Inc., 1994.
Rafael Rafailov, Tianhe Yu, Aravind Rajeswaran, and Chelsea Finn. Visual adversarial imitation
learning using variational models. Advances in Neural Information Processing Systems, 34, 2021.
11
Published as a conference paper at ICLR 2022
Ali Rahimi, Benjamin Recht, et al. Random features for large-scale kernel machines. In NIPS,
volume 3, pp. 5. Citeseer, 2007.
Prajit Ramachandran, Barret Zoph, and Quoc V. Le. Searching for activation functions, 2017.
Zhiyuan Ren and Bruce H Krogh. State aggregation in markov decision processes. In Proceedings
Of the 41st IEEE Conference on Decision and Control, 2002., volume 4, pp. 3819-3824. IEEE,
2002.
Stephane Ross and Drew Bagnell. Efficient reductions for imitation learning. In Proceedings ofthe
thirteenth international conference on artificial intelligence and statistics, pp. 661-668. JMLR
Workshop and Conference Proceedings, 2010.
Stephane Ross, Geoffrey Gordon, and Drew Bagnell. A reduction of imitation learning and struc-
tured prediction to no-regret online learning. In Proceedings of the fourteenth international con-
ference on artificial intelligence and statistics, pp. 627-635. JMLR Workshop and Conference
Proceedings, 2011.
Stefan Schaal. Is imitation learning the route to humanoid robots? Trends in cognitive sciences, 3
(6):233-242, 1999.
Tanmay Shankar and Abhinav Gupta. Learning robot skills with temporal variational inference. In
International Conference on Machine Learning, pp. 8624-8633. PMLR, 2020.
Tanmay Shankar, Shubham Tulsiani, Lerrel Pinto, and Abhinav Gupta. Discovering motor programs
by recomposing demonstrations. In International Conference on Learning Representations, 2019.
Archit Sharma, Shixiang Gu, Sergey Levine, Vikash Kumar, and Karol Hausman. Dynamics-aware
unsupervised discovery of skills. arXiv preprint arXiv:1907.01657, 2019.
Avi Singh, Huihan Liu, Gaoyue Zhou, Albert Yu, Nicholas Rhinehart, and Sergey Levine. Parrot:
Data-driven behavioral priors for reinforcement learning. arXiv preprint arXiv:2011.10024, 2020.
Satinder P Singh, Tommi Jaakkola, and Michael I Jordan. Reinforcement learning with soft state
aggregation. Advances in neural information processing systems, pp. 361-368, 1995.
Martin Stolle and Doina Precup. Learning options in reinforcement learning. In International
Symposium on abstraction, reformulation, and approximation, pp. 212-223. Springer, 2002.
Richard S Sutton, Doina Precup, and Satinder Singh. Between mdps and semi-mdps: A frame-
work for temporal abstraction in reinforcement learning. Artificial intelligence, 112(1-2):181-
211, 1999.
Yuval Tassa, Yotam Doron, Alistair Muldal, Tom Erez, Yazhe Li, Diego de Las Casas, David Bud-
den, Abbas Abdolmaleki, Josh Merel, Andrew Lefrancq, et al. Deepmind control suite. arXiv
preprint arXiv:1801.00690, 2018.
Stephen Tu, Alexander Robey, and Nikolai Matni. Closing the closed-loop distribution shift in safe
imitation learning. arXiv preprint arXiv:2102.09161, 2021.
Alexander Sasha Vezhnevets, Simon Osindero, Tom Schaul, Nicolas Heess, Max Jaderberg, David
Silver, and Koray Kavukcuoglu. Feudal networks for hierarchical reinforcement learning. In
International Conference on Machine Learning, pp. 3540-3549. PMLR, 2017.
Xiaofei Wang, Kimin Lee, Kourosh Hakhamaneshi, Pieter Abbeel, and Michael Laskin. Skill pref-
erences: Learning to extract and execute robotic skills from human feedback. arXiv preprint
arXiv:2108.05382, 2021.
Ziyu Wang, Alexander Novikov, Konrad Zolna, Jost Tobias Springenberg, Scott Reed, Bobak
Shahriari, Noah Siegel, Josh Merel, Caglar Gulcehre, Nicolas Heess, et al. Critic regularized
regression. arXiv preprint arXiv:2006.15134, 2020.
David Warde-Farley, Tom Van de Wiele, Tejas Kulkarni, Catalin Ionescu, Steven Hansen, and
Volodymyr Mnih. Unsupervised control through non-parametric discriminative rewards. arXiv
preprint arXiv:1811.11359, 2018.
12
Published as a conference paper at ICLR 2022
Yifan Wu, George Tucker, and Ofir Nachum. Behavior regularized offline reinforcement learning.
arXiv preprint arXiv:1911.11361, 2019.
Amy Zhang, Rowan McAllister, Roberto Calandra, Yarin Gal, and Sergey Levine. Learning
invariant representations for reinforcement learning without reconstruction. arXiv preprint
arXiv:2006.10742, 2020.
Wenxuan Zhou, Sujay Bajracharya, and David Held. Plas: Latent action space for offline reinforce-
ment learning. arXiv preprint arXiv:2011.07213, 2020.
Konrad Zolna, Alexander Novikov, Ksenia Konyushkova, Caglar Gulcehre, Ziyu Wang, Yusuf Ay-
tar, Misha Denil, Nando de Freitas, and Scott Reed. Offline learning from demonstrations and
unlabeled experience. arXiv preprint arXiv:2011.13885, 2020.
13
Published as a conference paper at ICLR 2022
Appendix
A Proofs for Foundational Lemmas
Lemma 4. If π1 and π2 are two policies in M and dπ1 (s) and dπ2 (s) are the state visitation
distributions induced by policy ∏ι and ∏2 where dπ(S) := (1 一 Y) Et=O Yt ∙ Pr [st = s∣∏, M]∙
Define Diff (π2, π1) = DTV(dπ2 kdπ1 ) then
where
Diff(π2,π1) ≤
Y
∑----Errd∏ι (∏1,∏2, T),
1 一 Y
Errdπ1 (π1,π2,T) := 5 X : IEs〜dπι ,aι〜πι(s),a2〜∏2(s)[T(S |s, aI) —T(S |s, a2)] | .
2 s0∈S
(6)
(7)
is the TV-divergence between T ◦ π1 ◦ dπ1 and T ◦ π2 ◦ dπ1 .
Proof. Following similar derivations in Achiam et al. (2017); Nachum et al. (2018b), we express
DTV(dπ2 kdπ1 ) in linear operator notation:
Diff(∏2,∏ι) = DTV(dπ2 kdπ1 ) = 11|(1 一 Y)(I 一 γT∏2)-1μ 一(1 一 Y)(I - YTnI)Tμ∣, (8)
where ∏ι, ∏2 are linear operators S → S X A such that ∏iν(s, a) = ∏(a∣s)ν(S) and 1 is an all ones
row vector of size |S |. Notice that dπ1 may be expressed in this notation as (1 一 Y)(I - YTnI)Tμ.
We may re-write the above term as
21|(1 一 Y)(I — YT∏2)-1((I 一 YTnI)-(I — YTn2))(I — Y TnI)Tμ∣
=Y ∙ 11|(I 一 Y t∏2)-1(t∏2 -Tn1)dπ1∣.	(9)
Using matrix norm inequalities, we bound the above by
Y ∙ 1 k(I - YTn2)-1k1,∞ ∙ i∣(t∏2 - Tn1)dπ11.	(10)
Since T n2 is a stochastic matrix, k(I 一 YTn2)-1k1,∞ ≤ Pt∞=0 YtkTn2k1,∞ = (1 一 Y)-1. Thus,
we bound the above by
MY、1∣(Tn2 -Tnι)dπ11 = — Errd∏ι (∏1,∏2, T),	(11)
2(1 一 Y)	1 一 Y
and so We immediately achieve the desired bound in equation 6.	□
The divergence bound above relies on the true transition model T which is not available to us. We
now introduce an approximate transition model T to proxy Errd∏ι (∏ι, ∏2, T).
Lemma 5. For ∏ι and ∏ two policies in M and any transition model T(∙∣s,α) we have,
Errd∏ι (∏1,∏2, T) ≤ ∣A∣E(s,a)〜(d∏ι,uzfa)[Dtv(T(s,a)kT(s, a))] + Erj∏ι (∏1,∏2,T). (12)
Proof.
Errd∏ι (∏1,∏2, T) = 2 £ 1Es 〜dπ1 ,。1 〜∏1 (s),θ2 〜∏2 (s)[T(S0|S, a1) 一 T (S0|S, a2)]|	(13)
2 s0∈S
2 X
s0∈S
2 X
s0∈S
E Es〜d∏ι [T(s0∣s, a)∏ι(a∣s) —T(s, a)∏2(a∣s)]
a∈A
(14)
E Es〜d∏ι [(T(s0∣s, a) — T(s0∣s, a))(∏ι(a∣s) — ∏2(a∣s)) + T(S0|s, a)(∏ι(a∣s) — ∏2(a∣s))]
a∈A
(15)
≤ 1 X X Es 〜d∏ι [(T(S0∣S,a)—丁(£0|£,。))(开1(。|£) 一 ∏2(a∣S))] + Err d∏ι (∏1,∏2, T) (16)
s0∈S α∈A
≤ 2 ∑∑Es〜d∏ι [|(T(SlS,a) — T(s0∣s, a))(∏ι(a∣S) — ∏2(a∣S))∣] +Errd∏ι (∏1,∏2,T) (17)
s0∈S α∈A
≤ |A|E(s,a)〜(d∏ι,UnifA)DTV(T(SlS,a) kT(SlS,a) |]+ErrdnI (π1,π2, T),	(18)
14
Published as a conference paper at ICLR 2022
and We arrive at the inequality as desired where the last step comes from DTV(T(s, a)∣∣T(s, a))=
1 Ps0∈S IT(SlS,a)-T(SlS,a)|.	口
Now we introduce a representation function φ : S X A → Z and show how the error above may be
reduced when T(s,a) = TZ(s,φ(s,a)):
Lemma 6. Let φ : S × A → Z for some space Z and suppose there exists TZ : S × Z → ∆(S)
such that T(s, a) = TZ (s, φ(s, a)) forall S ∈ S, a ∈ A. Thenfor any policies ∏1,∏2,
Errd∏ι (∏1,∏2,T)] ≤ Es~d∏ι Dτv(∏1,zk∏2,z)],	(19)
where ∏k,z (z∣s) is the marginalization of ∏k onto Z:
∏k,z(z|s) ：=	E	∏k(a∣S)	(20)
a∈A,z=φ(s,a)
for all z ∈ Z, k ∈ {1, 2}.
Proof.
P〉: IEs~dπι ,aι ~∏ι (s),a2~∏2(s)[T(S | s, a1) - T(S | s, a2)] |	(21)
2 s0∈S
2 X X TZ(SlS,φ(s,a))πι(a|S)dni (S)- X TZ(SlS, φ(s, a))n2(a|S)dni(S)
s0∈S Is∈S,a∈A	s∈S,a∈A
2 X X Tz",N) X ∏1 (a∣S)dπι(S)- X Tz(s0∣s,z) X ∏2(a∣S)dπ1 (s)
I	φ(s,a)=z	φ(s,a)=z
2 X
s0∈S
1 X
2s⅛
E Tz(s0∣s,z)∏1,z(z∣s)dπι (s) - E TZ(s0∣s,z)∏2,z(z∣s)dπ1 (s)
s∈S,z∈Z	s∈S,z∈Z
Es~d∏ι E Tz(s0∣s, z)(∏ι,z(z∣s) - ∏2,z(z∣s)) ∣
z∈Z	I
(22)
≤ 2Es~dπι XX
TZ (SlS,z) lπ1,Z (ZIS)- π2,Z (ZIS)I	(23)
z∈Z s0∈S
2Es~d∏ι E lπ1,Z(ZIS)- π2,Z(ZIS)I	(24)
2	z∈Z
=Es~dπι [Dtv(∏1,Z k∏2,Z)],
and we arrive at the inequality as desired.
(25)
□
Lemma 7. Let d ∈ ∆(S, A) be some state-action distribution, φ : S × A → Z, and πZ : S →
∆(Z). Denote ∏α* as the optimal action decoder for d, φ:
d(s, a) ∙ l[z = φ(s, a)]
πα* (aIs,Z)= Pa0∈A d(s,a0) ∙ l[z = φ(s,a0)],
and πα*,Z as the marginalization of πα* ◦ πZ onto Z:
∏α*,Z(zIs) ：=	E	(∏α* ◦ ∏Z)(。k)=	πα*(aIs,Z)∏z (ZIs).
a∈A,z=φ(s,a)	a∈A,z=φ(s,a) z∈Z
Then we have
πα*,Z(ZIs) = πZ(ZIs)	(26)
for all Z ∈ Z and s ∈ S.
15
Published as a conference paper at ICLR 2022
Proof.
∏α*,Z (z|s)=	E	Σ∏α*(α∣s, Z)∏Z(z|s)
a∈A,z=φ(s,a) z∈Z
Σ^X	d(s, a) ∙ 1[Z = φ(s, a)]	)
ʌZ P y 4 d(s, α0) ∙ 1[Z = φ(s, a，)] KZ * S
a∈A,z=φ(s,O)z∈Z ^a∈A s ,	> L VΛ,力
d(s, a) ∙ l[z = φ(s, a)]
—a∈A W(S a) Pa0∈A d(s,吟 - 1 [z = φ(s, a，)] "" Z S
a ∈ ʃɪ,z φ(s,a )
d(s,a) ∙ l[z = φ(s,a)]
Z S	=φ	Pa0∈A d(s，a') ∙ 1[z = (Ks a')]
a ∈ ʃɪ,z ——φ(s,a )
=TZ (Z|s),
and we have the desired equality.
(27)
(28)
(29)
(30)
(31)
□
Lemma 8. Let ∏z : S T ∆(Z) be a latent policy in Z and πa : S × Z → A be an action decoder,
∏α,z be the marginalization of πa ◦ ∏z onto Z:
∏α,Z (z|s)：=	E	(∏ɑ ◦ ∏Z )(a∣s)
a∈A,z=φ(s,a)
a∈A,z=φ(s,a) z∈Z
Thenfor any S ∈ S we have
Dtv(∏Z (S)II∏α,Z (s)) ≤ max DTV (∏α* (s, z)k∏α(s, z)),	(32)
where πa* is the optimal action decoder defined in Lemma 7 (and this holdsfor any choice of d from
Lemma 7).
Proof.
DTV (πZ (S)Ilπα,Z (S))
=2 X |nZ(HS) — πα,Z(HS)I
z∈Z
(33)
(34)
2 x
z∈Z
πz(z|s)-
a∈A,z=φ(s,a) z∈Z
2 X ∏Z(z|s)- X X (∏a(a]s, z) - ∏α* (a|s, z) + ∏α* (a|s, Z)) ∏Z(Z|s)
z∈Z	a∈A,z=φ(s,a) z∈Z	
1X 2乙 z∈Z	Σ Σ (na(a|s, Z) - ∏α* (a|s, Z))不Z(Z|s) a∈A,z=φ(s,a) z∈Z	(by Lemma 7)
(35)
(36)
(37)
≤ 2 Ez^πz (s)	E	E	|na(a|s, Z)- z∈Z a∈A,z=φ(s,a)	∏α* (a|s, Z)|	(38)
=2 Eiz^πz (s)	E |na(a|s,Z) - πa* (a|s,Z)| a∈A		(39)
=EZ〜πz(S) [DTV(πα(s, Z)Il, πα* (s, Z))]			(40)
≤ max Dτv(∏α(s, Z)I∏α*(s,Z)), z∈Z			(41)
(42)
and We have the desired inequality.	□
Lemma 9. Let ∏ι,z be the marginalization of ∏ι onto Z as defined in Lemma 6, and let ∏z, ∏ɑ,
∏α,z be as defined in Lemma 8, and let ∏a*,z be as defined in Lemma 7. For any S ∈ S we have
DTV(∏1,Z(S)II∏α,z(s)) ≤ maxDτv(∏α(s, z)∣πα* (s, z)) + DTV(∏1,Z(S)IInZ(s)).	(43)
16
Published as a conference paper at ICLR 2022
Proof. The desired inequality is achieved by plugging the inequality from Lemma 8 into the follow-
ing triangle inequality:
DTV (π1,Z (s)kπα,Z (s)) ≤ DTV (πZ (s)kπα,Z (s)) + DTV (π1,Z (s)kπZ (s)).	(44)
□
Our final lemma will be used to translate on-policy bounds to off-policy.
Lemma 10. For two distributions ρ1 , ρ2 ∈ ∆(S) with ρ1 (s) > 0 ⇒ ρ2(s) > 0, we have,
Eρι[h(s)] ≤ (1 + Dχ2(ρ1kρ2)1 ),Eρ2[h(s)2].	(45)
Proof. The lemma is a straightforward consequence of Cauchy-Schwartz:
Eρ1[h(s)] = Eρ2[h(s)] + (Eρ1[h(s)] - Eρ2 [h(s)])
s∈S
PI(S) - P2(S)
P2(s)2
• P2(s)1 h(s)
≤Eρ2[h(S)]+
XX (PI(S) - ρ2(S))2
∖S∈S 一ρ2(s)
X	P2(S)h(S)2
s∈S
(46)
(47)
(48)
=EP2 [h(s)] + Dχ2 (PIkP2)2 • JEP2[h(S)2].	(49)
Finally, to get the desired bound, We simply note that the concavity of the square-root function
implies Eρ2 [h(c)] ≤ Eρ2 [PW] ≤ PE⅛H∙	□
B Proofs for Major Theorems
B.1	Proof of Theorem 1
Proof. Let ∏2 ：= ∏α ◦ ∏z, We have ∏2,z(z∣s) = ∏α,z(z|s) = Pa∈A,φ(s,a)=z(∏ɑ ◦ ∏z)(z∣s). By
plugging the result of Lemma 9 into Lemma 6, We have
Errd∏ι (∏1,∏2, T)] ≤ Es〜d∏ι maxDτv(∏α* (s,z)k∏α(S,z)) + DTV(∏ι,z(s)∣∣∏z(S)) . (50)
By plugging this result into Lemma 5, We have
Errd∏ι (π1,π2, T) ≤ |A|E(s,a)〜(d∏ι,Unif a)[DTV (T(S,a) kT(S,a))]	(51)
+ ES 〜d∏ι max DTV (∏α* (s, Z)IIna(S,z))
z∈Z
+ ES〜dπι DTV(∏ι,z(s)∣∏z(s))].
(52)
(53)
By further plugging this result into Lemma 4 and let ∏ι = n*, we have:
Diff(∏ɑ ◦ ∏z, π*) ≤
+
+
Y |A|
1 - Y
E(s,a)〜(d∏ι,UnifA ) [DTV(T (s, a)kTZ (s, 0(s, a))]
Y
1 - Y
Y
1 - Y
• Es-d∏* [max DTV(∏α* (S,z)k∏α(S, z))]
• ES〜d∏* [Dtv(∏*,z(s)∣∏z(s))].
(54)
Finally, by plugging in the off-policy results of Lemma 10 to the bound in Equation 54 and by ap-
plying Pinsker,s inequality DTV(T(S,a)kTz(S,φ(S,a)))2 ≤ 2DKL(T(S,a)∣∣TZ(S,φ(S,a))), we
have
Diff(∏ɑ ◦ ∏z,∏*) ≤ Ci •
'B E(s,a)〜doff [DKL
(T (S, a)kTZ (S, φ(S, a)))]
____ - /
{^^^∙-/^^^^^^^^^^^^^^^^^^^^^^
JT (TZ, φ)
+ C2 • q2 ES〜doff【max DκL(∏a* (s, z) k∏a (s, z))]
、--------------------{----------------
≈ const(doff, φ) + JDE(nα, φ)
}
+ C3 • ∖ E ES〜d∏* [Dkl(∏*,z(S)IInZ(s))],
V 2、	一__—
~~{^^^^^^^^^^^^^""r
const(n* ,φ) + Jbc,φ(∏z )
(55)
17
Published as a conference paper at ICLR 2022
where Ci =	γ∣A∣(1 -	γ)-1(1 +	Dχ2(dπ*∣∣d0ff)1),	C2	= γ(1 - Y)-1(1 +
Dχ2(dπ*kdoff)2),	and C3	= γ(1 -	Y)-1. Since	the	maxz∈z is not tractable
in practice, We approximate Es~doff [maxz∈z DκL(∏a* (s, Z)II∏α(s, z))]	using
E(s,a)~doff[Dkl(∏a*(s,Φ(s,a))k∏α(s,Φ(s,a)))], which reduces to JDE(∏α,Φ) with additional
constants. We now arrive at the desired off-policy bound in Theorem 1.	口
B.2	Proof of Theorem 2
Lemma 11. Let P ∈ ∆({1,...,k}) be a distribution Withfinite support. Let Pn denote the empirical
estimate of P from n i.i.d. samples X 〜P. Then,
k
En[DTV(PkPn)] ≤ 2 ∙ √n X p∕ρ(i) ≤ 2 ∙ 4n	(56)
i=1
Proof. The first inequality is Lemma 8 in Berend & Kontorovich (2012) while the second inequality
is due to the concavity of the square root function.	□
Lemma 12. Let D := {(si, ai)}in=1 be i.i.d. samples from a factored distribution x(s, a) :=
P(s)π(a∣s) for P ∈ ∆(S),π : S → ∆(A). Let P be the empirical estimate of P in D and π be
the empirical estimate of π in D. Then,
ED[Es~ρ[Dτv(π(s)k∏(s))]] ≤ a∕≡a1 .	(57)
Proof. Let X be the empirical estimate of X in D. We have,
~ρ[Dτv(∏(s)k∏(s))] = 1 χp(s) ∙	π(a∣s) — ∏(a∣s)∣				(58)		
s,a =2 x P(S) ∙ s,a ≤ 2 x P(S) ∙ s,a =2 x P(S) ∙ s,a	X(S, a) P(s) X(s, a) P(s) X(s, a) P(s)	X(s, a) -	 P(S) X(s, a) — P(S) X(s, a) — P(S)		+21 X P(S) • s,a + DTV (XkX)	X(s, a) — P(S)	(5 X(S, a) P(S) (6 (6	9) 0) 1)
=2 x p(s) ∙ s	1 		 P(s)	1 P(S)	xa	]X(S,a)) + DTV (XkX)		(62)	
=2 x p(s) ∙ s =DTV(PkP) +	1	1 —：—— ——：—— P(S) P(S) DTV(XkX).		• P(s) + DTV (XkX)			(63) (64)	
Finally, the bound in the lemma is achieved by application of Lemma 11 to each of the TV diver-
gences.	口
To prove Theorem 2, we first rewrite Theorem 1 as
Diff(∏z, ∏*) ≤ (1)(φ) + ⑵(φ) + C3 ∙ Es~d∏* [Dτv(∏*,z(s)k∏z(s))],
(65)
where (1) and (2) are the first two terms in the bound of Theorem 1, and C3 = 11Y.
The result in Theorem 2 is then derived by setting φ = φπorcl and πZ := πφorcl ,Z and using the
result of Lemma 12.
Note that the above sample analysis can be extended to the continuous latent action space character-
ized by Theorem 3 as follows.
Theorem 13. Let φorcl := OPTφ(Doff) and πorcl,θ be the latent BC policy with respect to φorcl.
Let dbe the dimension of the continuous latent actions and kφk∞ be the l∞ norm of φorcl for any
s, a. We have
Ed∏* [Diff(∏φorci,θ, ∏*)] ≤ ⑴(φorcl) + (2)(φorci) + C4 ∙ d∣∣φ∣∣∞
where (1), (2), and C4 are the same as in Theorem 3.
TB,
18
Published as a conference paper at ICLR 2022
Proof. We use μ ∈ Rd×lSl to denote the optimal setting of θ which yields a zero lι-norm of
∂θEs~dπ ,a~π* Rθs - φ(S, a))2]; i.e.,
μs = Ea~π*(s)[φ(S,a)].	(66)
According to Theorem 3, We want to bound the lι-norm of 扁Es~d∏ ,a~∏* [(θs - φ(s, a))2] evaluated
at the approximate solution μ ∈ Rd×lSl with respect to finite dataset Dπ*; i.e.,
μs = Ea~D∏*(∙∣s) [φ(s,a)] ,
(67)
with the convention that μs = 0 if S does not appear in Dπ*. To this end, we have the following
derivation, which uses En to denote the expectation over realizations of μ due to n-size draws of the
target dataset Dπ* :
En [Es~d∏ [kμs - Ea~∏* [φ(s,a)]kι]]
En [Es~dπ [kμs - μs k 1]]
Es~dπ [En [kμs - μs k 1]].
(68)
(69)
(70)
We now split up the inner expectation based on the number of times k that S appears in Dπ* :
n
Es~dπ [En [kμs - μs k 1]] = Es~dπ ^X PrlcOunt(S) = k] ∙ Ek [kμs - μsk 1]
k=0
≤t
n
Es~d∏ XPr[count(s) = k] ∙ Ek [|虑-μskι]2
k=0
(71)
(72)
(73)
where Ek denotes the expectation over realizations of μs over k-size draws of a ~ ∏*(s). By
standard combinatorics, we know
Prlcount(S) = k] = n dπ(S)k(1 -dπ(S))n-k.	(74)
Furthermore, for k = 0, we have
Ek [kμs - μskι]2 = ∣∣μsk1 ≤ d2∣∣φk∞,	(75)
while for k > 0, since Ek [4§] = μs, we have
Ek [kμs - μskι]2 ≤ d ∙ Ek [kμs - 〃sk2] = d ∙ Vark 向]≤ dkφk∞ ≤ 乎”.(76)
k	k+1
Combining equations 74, 75, and 76 we have for any k ≥ 0
dπ(s) ∙ Pr[count(s) = k] ∙ Ek [|虑-〃,旧2 ≤ 2"幺(："(s)k+1(1 - dπ(s))n-k
k+1 k
=UTk∞ (n+I)""(s)k+1(1 - dπ(s))n-k,
(77)
and so by the binomial theorem,
n
Xdπ(s) ∙ Pr[count(s) = k] ∙ Ek [|伉-μskι]2 ≤
k=0
2d2kΦk∞
n + 1
Plugging the above into equation 72 we deduce
Es~d∏ [En [kμs - μskι]] ≤ d∣∣φ∣∣∞
and we have the convergence rate as desired.
V n +1,
(78)
(79)
□
B.3	Proof of Theorem 3
Proof. The gradient term in Theorem 3 with respect to a specific column θs of θ may be expressed
as
-2E
-2E
a
a
~∏(s)[dπ(s)Φ(s,a)]+2dπ(s)θs
,~∏(s)[dπ(s)Φ(s,a)]+2Ez=θs[dπ(s) ∙ z],
(80)
19
Published as a conference paper at ICLR 2022
and so,
=-2Ea〜∏(s)[dπ(S)T(S0∣s,a)] + 2Ez=θ, [dπ(s)w(s0)>z].	(81)
Summing over s ∈ S, we have:
=2Es 〜dπ ,a 〜π(s),z=θs [-T(S0|s, a) + TZ (Sls,Z)]	(82)
Thus, we have:
Errd∏(π,∏θ, T) = 2 EIEs〜dπ ,a^π(s),z=θs [-T(S |s, a) + TZ (S | s, Z)] 1
s0∈S
1I	∂	I
=4 E Ew(S ) ∂θ^Eg~dπ ,a~∏(Ε)Kθg - 0(S，a))]
s0∈S Is∈S	s	I
1	∂
≤ 4 lSlkwk∞ ∙ ∂θ Es 〜dπ ,。〜∏(s)Kθs - φ(S,a)) ]	.	(83)
Then by combining Lemmas 4, 5, 10, and apply Equation 83 (as opposed to Lemma 6 as in the
tabular case), We arrive at the desired bound in Theorem 3.	□
C Experiment Details
C.1 Architecture
We parametrize φ as a tWo-hidden layer fully connected neural netWork With 256 units per layer. A
SWish (Ramachandran et al., 2017) activation function is applied to the output of each hidden layer.
We use embedding size 64 for AntMaze and 256 for Ant and all DeepMind Control Suite (DMC)
tasks after sWeeping values of 64, 256, and 512, though We found TRAIL to be relatively robust to
the latent dimension size as long as it is not too small (i.e., ≥ 64). The latent skills in temporal skill
extraction require a much smaller dimension size, e.g., 8 or 10 as reported by Ajay et al. (2020);
Pertsch et al. (2021). We tried increasing the latent skill size for these Work during evaluation, but
found the reported value 8 to Work the best. We additionally experimented With different extend of
skill extraction, but found the previously reported t = 10 to also Work the best. We implement the
trajectory encoder in OPAL, SkiLD, and SPiRL using a bidirectional LSTM With hidden dimension
256. We use β = 0.1 for the KL regularization term in the β VAE of OPAL (as reported). We also
use 0.1 as the Weight for SPiRL and SkiLD’s KL divergence terms.
C.2 Training and Evaluation
During pretraining, We use the Adam optimizer With learning rate 0.0003 for 200k iterations With
batch size 256 for all methods that require pretraining. During doWnstream behavioral cloning,
learned action representations are fixed, but the action decoder is fine-tuned on the expert data as
suggested by Ajay et al. (2020). Behavioral cloning for all methods including vanilla BC is trained
With learning rate 0.0001 for 1M iterations. We experimented With learning rate decay of doWn-
stream BC by a factor of 3 at the 200k boundary for all methods. We found that When the expert
sample size is small, decaying learning rate can prevent overfitting for all methods. The reported
results are With learning rate decay on AntMaze and Without learning rate decay on other envi-
ronments for all methods. During the doWnstream behavioral cloning stage, We evaluate the latent
policy combined With the action decoder every 10k steps by executing πα ◦ πZ in the environment
for 10 episodes and compute the average total return. Each method is run With 4 seeds Where each
seed corresponds to one set of action representations and doWnstream imitation learning result on
that set of representations. We report the mean and standard error for all methods in the bar and line
figures.
C.3 Modification to SkiLD and SPiRL
Since SkiLD (Pertsch et al., 2021) and SPiRL (Pertsch et al., 2020) are originally designed for RL
as opposed to imitation learning, We replace the doWnstream RL algorithms of SkiLD and SPiRL by
behavioral cloning With regularization (but keep skill extraction the same as the original methods).
Specifically, for SkILD, We apply a KL regularization term betWeen the latent policy and the learned
20
Published as a conference paper at ICLR 2022
skill prior in the suboptimal offline dataset during pretraining, and another KL regularization term
between the latent policy and a learn “skill posterior” on the expert data as done in the original paper
during downstream behavioral cloning. We do not need to train the binary classifier that SkiLD
trains to decide which regularizer to apply because we know which set of actions are expert versus
suboptimal in the imitation learning setting. For SPiRL, we apply the KL divergence between latent
policy and skill prior extracted from offline data (i.e., using the red term in Algorithm 1 of Pertsch
et al. (2020)) as an additional term to latent behavioral cloning.
C.4 Dataset Details
AntMaze. For the expert data in AntMaze, we use the goal-reaching expert policies trained
by Ajay et al. (2020) (expert means that the agent is trained to navigate from the one corner of the
maze to the opposite corner) to collect n = 10 trajectories. For the suboptimal data in AntMaze, we
use the full D4RL datasets antmaze-large-diverse-v0, antmaze-medium-play-v0,
antmaze-medium-diverse-v0, and antmaze-medium-play-v0.
Ant. For the expert data in Ant, we use a small set of expert trajectories selected by taking either
the first 10k or 25k transitions from ant-expert-v0 in D4RL, corresponding to about 10 and
25 expert trajectories, respectively. For the suboptimal data in Ant, we use the full D4RL datasets
ant-medium-v0, ant-medium-replay-v0, and ant-random-v0.
RL Unplugged. For DeepMind Control Suite (Tassa et al., 2018) set of tasks, we use the RL
Unplugged (Gulcehre et al., 2020) dataset. For the expert data, We take 击 of the trajectories whose
episodic reward is among the top 20% of the open source RL Unplugged datasets following the setup
in Zolna et al. (2020). For the suboptimal data, we use the bottom 80% of the RL Unplugged dataset.
Table 1 records the total number of trajectories available in RL Unplugged for each task (80% of
which are used as suboptimal data), and the number of expert trajectories used in our evaluation.
Task	#TotaI	# Dπ*
CartPole-swingup	40-	T
cheetah-run	300	3
fish-swim	200	1
humanoid-run	3000	53
walker-stand	200	4
walker-walk	200	6
Table 1: Total number of trajectories from RL Unplugged (Gulcehre et al., 2020) locomotion tasks
used to train CRR (Wang et al., 2020) and the number of expert trajectories used to train TRAIL.
The bottom 80% of # Total is used to learn action representations by TRAIL.
21
Published as a conference paper at ICLR 2022
D Additional Empirical Restuls
D.1 Additional baselines for RL Unplugged
——TRAIL (energy) ——TRAIL (linear) —— Baseline BC ——OPAL(t=10) — SPiRL (t= 10)	—— SMID(t=10) ——CRR
Figure 6: Average task rewards (over 4 seeds) of TRAIL EBM (Theorem 1), TRAIL linear (The-
orem 3), and OPAL, SkiLD, SPiRL trained on the bottom 80% (top) and bottom 5% (bottom) of
the RL Unplugged datasets followed by behavioral cloning in the latent action space. Baseline BC
achieves low rewards due to the small expert sample size. Dotted lines denote the performance of
CRR (Wang et al., 2020) trained on the full dataset with reward labels.
D.2 FrankaKitchen Results
Expert Dn * kitchen-complete	kitchen-complete
SUbOPtimal Doff kitchen-mixed	kitchen-partial
TRAIL (EBM)
TRAIL (linear)
SkΠD (t=10)
SkilD (t=l)
SPiRL (t= 10)
SPiRL (t=l)
OPAL (t=10)
OPAL (t=l)
Baseline BC
O 25	50	75	100 0	25	50	75	100
Figure 7: Average rewards (over 4 seeds) of TRAIL EBM (Theorem 1), TRAIL linear (Theorem 3),
and baseline methods pretrained on kitchen-mixed and kitchen-partial from D4RL to
imitate kitchen-complete. TRAIL linear without temporal abstraction performs slightly better
than SKiLD and OPAL with temporal abstraction over 10 steps.
22
Published as a conference paper at ICLR 2022
D.3 Discrete Maze Results
Vanilla BC T- TRAIL
target demos (N / 20)
Figure 8: Average task rewards (over 4 seeds) of TRAIL EBM (Theorem 1) and vanilla BC (right)
in a discrete four-room maze environment (left) where an agent is randomly placed in the maze and
tries to reach the target ‘T’. TRAIL learns a discrete latent action space of size 4 from the discrete
original action space of size 12 on 500 uniform random trajectories of length 20 shows clear benefit
over vanilla BC on expert data.
We conduct additional evaluation on an environment with tabular state and action spaces. As shown
in Figure 8, an agent is randomly placed into a four-room environment, and the task is to nav-
igate to the target ‘T’. The task reward is 1 at ‘T‘ and 0 elsewhere. There are 12 discrete ac-
tions corresponding to rotating clockwise by 90, 180, 270, 360 degrees, rotating counterclockwise
by 90, 180, 270, 360 degrees, moving forward by 1 or 2 grids, and moving backward by 1 or 2 grids
(the action space is artificially blown up as suggested by the reviewer). TRAIL is pretrained on 500
trajectories of length 20 with uniform action selection. The expert demonstration always navigates
to the target ‘T’ from any random starting location. TRAIL’s latent action dimension is set to 4. We
see that TRAIL with a smaller latent action space offers benefits over vanilla BC.
23
Published as a conference paper at ICLR 2022
E Ablation Study
Expert Dn
expert 10 trajs
SUbOPtimal Dof antmaze-large-diverse
expert 10 trajs
expert 10 trajs
antmaze-large-play antmaze-medium-diverse
expert 10 trajs
antmaze-medium-play
TRAIL tune=False
TRAIL tιme=True
TRAIL embed=2 56
TRAIL embed=512
Finetune BC
Baseline BC
Figure 9: Ablation study on action decoder finetuning, latent dimension size, and pretraining base-
line BC on suboptimal data in the AntMaze environment. TRAIL with default embedding dimension
64 and finetuning the action decoder corresponds to the second row. Other dimension size (256 and
512) lead to worse performance. Finetuning the action decoder on the expert data has some small
benefits. Pretraining BC on suboptimal data before finetuning on expert does not lead to significantly
better performance.
Expert Dn *	ant-expert 10k
SUbOptimal Dof	ant-medium
ant-expert 10k
ant-expert 25k
ant-expert 25k
ant-medium
ant-medium-replay ant-medium-replay
ant-expert 10k
ant-random
ant-expert 25k
ant-random

Figure 10: Ablation study on latent dimension size in the Ant environment. TRAIL is generally
robust to the choices of the latent action dimension (64, 256, 512) for the Ant task.
Expert Dn *	ant-expert 10k
SUbOptimal Dof	ant-medium
ant-expert 25k
ant-medium
Figure 11: Ablation study on finetuning the action decoder in the Ant environment. Finetuning the
action decoder leads to a slight benefit.
ant-expert 10k ant-expert 25k
ant-medium-replay ant-medium-replay
ant-expert 25k
ant-random
24
Published as a conference paper at ICLR 2022
F Visualization of Latent Actions
PCA Raw Action TSNE Raw Action	PCA Latent Action
TSNE Latent Action
30
20
10
0
-10
-20
-30
-40
0	50
random
medium-replay
medium
expert
Figure 12: PCA and t-SNE visualizations of the random, medium-replay, medium, and
expert D4RL Ant datasets. Without action representation learning (left), the distinction between
expert and suboptimal actions is not obvious. The latent actions of TRAIL (right), on the other hand,
results in the expert latent actions being more visually separable from suboptimal actions.
25