Published as a conference paper at ICLR 2022
Deep ReLU Networks Preserve
Expected Length
Boris Hanin *
Dept. of Operations Research
& Financial Engineering
Princeton University
Princeton, NJ 08544 USA
bhanin@princeton.edu
Ryan Jeong *
Dept. of Mathematics
University of Pennsylvania
Philadelphia, PA 19104 USA
rsjeong@sas.upenn.edu
David Rolnick *
School of Computer Science
McGill University
Montreal, QC H3A 0G4 Canada
drolnick@cs.mcgill.ca
Ab stract
Assessing the complexity of functions computed by a neural network helps us
understand how the network will learn and generalize. One natural measure of
complexity is how the network distorts length - if the network takes a unit-length
curve as input, what is the length of the resulting curve of outputs? It has been
widely believed that this length grows exponentially in network depth. We prove
that in fact this is not the case: the expected length distortion does not grow with
depth, and indeed shrinks slightly, for ReLU networks with standard random ini-
tialization. We also generalize this result by proving upper bounds both for higher
moments of the length distortion and for the distortion of higher-dimensional vol-
umes. These theoretical results are corroborated by our experiments.
1	Introduction
The utility of deep neural networks ultimately arises from their ability to learn functions that are
sufficiently complex to fit training data and yet simple enough to generalize well. Understanding
the precise sense in which functions computed by a given network have low or high complexity
is therefore important for studying when the network will perform well. Despite the fundamental
importance of this question, our mathematical understanding of the functions expressed and learned
by different neural network architectures remains limited.
A popular way to measure the complexity ofa neural network function is to compute how it distorts
lengths. This may be done by considering a set of inputs lying along a curve and measuring the
length of the corresponding curve of outputs. It has been claimed in prior literature that in a ReLU
network this length distortion grows exponentially with the network’s depth Price & Tanner (2019);
Raghu et al. (2017), and this has been used as a justification of the power of deeper networks.
We prove that, in fact, for networks with the typical initialization used in practice, expected length
distortion does not grow at all with depth.
Our main contributions are:
1.	We prove that for ReLU networks initialized with the usual 2/fan-in weight variance, the
expected length distortion does not grow with depth at initialization, actually decreasing
slightly with depth (Thm. 3.1) and exhibiting an interesting width dependency.
2.	We prove bounds on higher moments of the length distortion, giving upper bounds that
hold with high probability (Thm. 4.1). We also obtain similar results for the distortion in
the volume of higher-dimensional manifolds of inputs (Thm. 4.2).
3.	We empirically verify that our theoretical results accurately predict observed behavior for
networks at initialization, while previous bounds are loose and fail to capture subtle archi-
tecture dependencies.
It is worth explaining why our conclusions differ from those of Price & Tanner (2019); Raghu et al.
(2017). First, prior authors prove only lower bounds on the expected length distortion, while we use
* Equal contribution
1
Published as a conference paper at ICLR 2022
different methodology to calculate tight upper bounds, allowing us to say that the expected length
distortion does not grow with depth. As we show in Thm. 5.1 and Fig. 1, the prior bounds are in fact
quite loose. Second, Thm. 3(a) in Raghu et al. (2017) has a critical typo1, which has unfortunately
been perpetuated in Thm. 1 of Price & Tanner (2019). Namely, the “2” was omitted in the following
statement (paraphrased from the original):
E [length distortion] = Ω
d______ ∖ depth
σw width
2 √ width + 1
where σw2 /width is the variance of the weight distribution. As we prove in Thm. 3.1, leaving out the
2 makes the statement false, incorrectly suggesting that length distortion explodes with depth for the
standard He initialization。加 = √2.
Finally, prior authors drew the conclusion that length distortion grows exponentially with depth by
considering the behavior of ReLU networks with unrealistically large weights. If one multiplies by
C the weights and biases of a ReLU network, one multiplies the length distortion by Cdepth, so it
should come as no surprise that there exist settings of the weights for which the distortion grows
(or decays) exponentially with depth. The value of our results comes in analyzing the behavior
specifically at He initialization (σw = √2) He et al. (2015). This initialization is the one used in
practice, since this is the weight variance that must be used if the outputs Hanin & Rolnick (2018)
and gradients Hanin (2018) are to remain well-controlled at init. In the present work, we show that
this is also the correct initialization for the expected length distortion to remain well-behaved.
2	Related Work
A range of complexity measures for functions computed by deep neural networks have been consid-
ered in the literature, dividing the prior work into at least three categories. In the first, the emphasis
is on worst-case (or best-case) scenarios - what is the maximal possible complexity of functions
computed by a given network architecture. These works essentially study the expressive power of
neural networks and often focus on showing that deep networks are able to express functions that
cannot be expressed by shallower networks. For example, it has been shown that it is possible to set
the weights of a deep ReLU network such that the number of linear regions computed by the network
grows exponentially in the depth Daniely (2017); Eldan & Shamir (2016); Montufar et al. (2014);
Telgarsky (2015; 2016). Other works consider the degree of polynomials approximable by networks
of different depths Lin et al. (2017); Rolnick & Tegmark (2018) and the topological invariants of
networks Bianchini & Scarselli (2014).
While such work has sometimes been used to explain the utility of different neural network archi-
tectures (especially deeper ones), a second strand of prior work has shown that a significant gap
can exist between the functions expressible by a given architecture and those which may be learned
in practice. Such average-case analyses have indicated that some readily expressible functions are
provably difficult to learn Shalev-Shwartz et al. (2017) or vanishingly unlikely for random networks
Hanin & Nica (2020); Hanin & Rolnick (2019; 2020), and that some functions learned more easily
by deep architectures are nonetheless expressible by shallow ones Ba & Caruana (2014). (While
here we consider neural nets with ReLU activation, it is worth noting that for arithmetic circuits,
worst-case and average-case scenarios may be more similar - in both scenarios, a significant gap
exists between the matricization rank of the functions computed by deep and shallow architectures
Cohen et al. (2016).) As noted earlier, average-case analyses in Price & Tanner (2019); Raghu et al.
(2017) provided lower bounds on expected length distortion, while Poole et al. (2016) presented a
similar analysis for the curvature of output trajectories.
Finally, a number of authors have sought complexity measures that either empirically or theoretically
correlate with generalization Jiang et al. (2019). Such measures have been based on classification
margins Bartlett et al. (2017), network compressibility Arora et al. (2018), and PAC-Bayes consid-
erations Dziugaite & Roy (2017).
1We have confirmed this in personal correspondence with the authors, and it is simple to verify - the typo
arises in the last step of the proof given in the Supplementary Material of Raghu et al. (2017).
2
Published as a conference paper at ICLR 2022
3	Expected Length Distortion
3.1	Motivation
While neural networks are typically overparameterized and trained with little or no explicit reg-
ularization, the functions they learn in practice are often able to generalize to unseen data. This
phenomenon indicates an implicit regularization that causes these learned functions to be surpris-
ingly simple.
Why this occurs is not well-understood theoretically, but there is a high level intuition. In a nutshell,
randomly initialized neural networks will compute functions of low complexity. Moreover, as op-
timization by first order methods is a kind of greedy local search, network training is attracted to
minima of the loss that are not too far from the initialization and hence will still be well-behaved.
While this intuition is compelling, a key challenge in making it rigorous is to devise appropriate
notions of complexity that are small throughout training. The present work is intended to provide
a piece of the puzzle, making precise the idea that, at the start of training, neural networks com-
pute tame functions. Specifically, we demonstrate that neural networks at initialization have low
distortion of length and volume, as defined in §3.2.
An important aspect of our analysis is that we study networks in typical, average-case scenarios.
A randomly initialized neural network could, in principle, compute any function expressible by a
network of that architecture, since the weights might with low probability take on any set of values.
Some settings of weights will lead to functions of high complexity, but these settings may be unlikely
to occur in practice, depending on the distribution over weights that is under consideration. As prior
work has emphasized Price & Tanner (2019); Raghu et al. (2017), atypical distributions of weights
can lead to exponentially high length distortion. We show that, in contrast, for deep ReLU networks
with the standard initialization, the functions computed have low distortion in expectation and with
high probability.
Figure 1: Mean length distortion as a function of depth, for randomly initialized ReLU networks
of varying architecture. As described in Thm. 3.1, distortion not only fails to grow, but shrinks
with depth, especially for networks of small width. (a) compares the predictions of our Thm. 5.1
(solid lines) to the lower bounds proven in prior work Raghu et al. (2017) (dashed lines) and the
true empirical means (colored dots), which closely track our predictions. (b) zooms in on the upper
part of (a), showing the empirical mean length distortion as a function of depth for different widths.
Γ⑶
Γ(2.5)√25
The horizontal black line is y
the mean length distortion we predict when n0 = nL
in the limit of infinite width for any fixed depth. In each network, width is constant in all hidden
layers, while input and output dimension are both 5. The input curve is a fixed line segment of unit
length. Length distortion is calculated for 500 different initializations of the weights and biases of
the network (the weight variance is 2/fan-in). For further experimental details, see Appendix B.
3.2	Definitions
Let L ≥ 1 be a positive integer and fix positive integers n0 , . . . , nL . We consider a fully connected
feed-forward ReLU network N with input dimension n0 , output dimension nL , and hidden layer
3
Published as a conference paper at ICLR 2022
widths n1, . . . , nL-1. Suppose that the weights and biases ofN are independent and Gaussian with
the weights Wiy between layers ' - 1 and ' and biases bj') in layer ' satisfying:
W，〜G (0, 2/ng-i),	b?〜G(0,C).
(1)
Here, Cb > 0 is any fixed constant and G(μ, σ2) denotes a Gaussian with mean 0 and variance
σ2. For any M ⊆ Rn0 , we denote by N (M) ⊆ RnL the (random) image of M under the map
x 7→ N (x). Our primary object of the study will be the size of the output N (M) relative to that of
M. Specifically, when M is a 1-dimensional curve, we define
length distortion =
len(N (M))
len(M)
Note that while a priori this random variable depends on M , we will find that its statistics depend
only on the architecture ofN (see Thms. 3.1 and 5.1).
3.3 Results
We prove that the expected length distortion does not grow with depth — in fact, it slightly de-
creases. Our result may be informally stated thus (for a formal statement and proof, see Thm. 5.1
and App. C.):
Theorem 3.1 (Length distortion: Mean; Informal Statement of Theorem 5.1). Consider a ReLU
network of depth L, input dimension n0, output dimension nL, and hidden layer widths n`, with
weights given by Standard He normal initialization He et al. (2015). The expected length distortion
is upper bounded by ʌ/nL/n0. More precisely:
E [length distortion] ≈ C
1/2
exp
5 L-1 1
—8A R
(UoWOl∞P UB3≡60-
log (n L∕n O)
Figure 2: Mean length distortion as a function of the ra-
tio of output to input dimension, for ReLU networks with
various architectures (e.g. [10, 10, 10] denotes three hid-
den layers, each of width 10). All networks are randomly
initialized as in Figure 1. We sample 100 pairs of input
dimension n0 and output dimension nL , each at most 50,
such that the ratio of output to input dimension is distinct
for each such pair. For each pair, 200 different network
initializations are tested and the resulting length distortion
is calculated; the log of the empirical mean is plotted. The
dashed black line plots log(y) = ɪ log(x), the approxi-
mate prediction by Theorem 3.1.
C :=
γ( n2+1L ≈ 1
γ (nL )P¥
Our experiments align with the the-
orem. In Figure 1, we compute the
empirical mean of the length dis-
tortion for randomly initialized deep
ReLU networks of various archi-
tectures with fixed input and out-
put dimension. The figure confirms
three of our key predictions: (1)
the expected length distortion does
not grow with depth, and actually
decreases slightly; (2) the decrease
happens faster for narrower networks
(since l/n` is larger for smaller n`);
and (3) for equal input and output di-
mension n0 = nL , there is an upper
bound of 1 (in fact, the tighter upper
bound of C is approximately 0.9515
for nL = 5, as shown in the fig-
ure). The figure also shows the prior
bounds in Raghu et al. (2017) to be
quite loose. For further experimental
details, see Appendix B.
In Fig. 2, we instead fix the set of hid-
den layer widths, but vary input and
output dimensions. The results con-
firm that indeed the expected length
distortion grows as the square root of
the ratio of output to input dimension.
Note that our theorem also applies for initializations other than He normal; the result in such cases
is simply less interesting. Suppose we initialize the weights in each layer ` as i.i.d. normal with
4
Published as a conference paper at ICLR 2022
variance 2c2/n'_1 instead of 2∕n'_1. This is equivalent to taking a He normal initialization and
multiplying the weights by c. Multiplying the weights and biases in a depth-L ReLU network by
c simply multiplies the output (and hence the length distortion) by cL, so the expected distortion
is cL times the value given in Thm. 3.1. This emphasizes why an exponentially large distortion
necessarily occurs if one sets the weights too large.
3.4 Intuitive explanation
The purpose of this section is to give an intuitive but technical explanation for why, in Theorem 3.1,
we find that the distortion len(N (M))/ len(M) of the length of a 1D curve M under the neural
network N is typically not much larger than 1, even for deep networks.
Our starting point is that, near a given point x ∈ M , the length of the image under N of a small
portion of M with length dx is approximately given by ||Jxu|| dx, where Jx is the input-output
Jacobian of N at the input x and u is the unit tangent vector to M at x. Prior work (see Fact 7.2 in
Allen-Zhu et al. (2019)).
In fact, in Lemma C.1 of the Supp. Material, we use a simple argument to give upper bounds
on the moments of len(N (M))/ len(M) in terms of the moments of the norm ||Jxu|| of the
Jacobian-vector product Jxu.
Figure 3: Length distortion as a function of PL= 1 n-1,
showing both mean and standard deviation across initial-
izations. We test several types of network architecture 一
with constant width 20, alternating between widths 30 and
10, and with the first (respectively, second) half of the lay-
ers of width 30 and the rest width 10. Each architecture
type is tested for several depths. For each such network,
we use n0 = nL = 5 and compute length distortion for
100 initializations on a fixed line segment. As predicted
in Thm. 4.1, the mean length distortion decreases with
the sum of width reciprocals. Empirical standard devia-
tion does not, in general, increase with greater depth, re-
maining modest throughout, as is consistent with the up-
per bound on variance in Thm. 4.1.
Thus, upper bounds on the length dis-
tortion reduce to studying the Jaco-
bian Jx , which in a network with
L hidden layers can be written as a
product Jx = JL,x …J1,x of the
layer ' - 1 to layer ' Jacobians J',x.
In a worst-case analysis, the left sin-
gular vectors of J',x would align with
the right singular vectors of J'+1,x,
causing the resulting product Jx to
have a largest singular value that
grows exponentially with L. How-
ever, at initialization, this is provably
not the case with high probability. In-
deed, the Jacobians J',x are indepen-
dent (see Lemma C.3) and their sin-
gular vectors are therefore incoher-
ent. We find in particular (Lemma
C.2) the following equality in distri-
bution:
L
IIJxu∣l = Y l∣J',χe1 Il,
'=1
where e1 is the first standard unit vec-
tor and the terms in the product are
independent. On average each term
in this product is close to 1:
E [∣∣J',χe11∣] = 1 + O(n-1).
This is a consequence of initializing weights to have variance 2/fan-in. Put together, the two pre-
ceding displayed equations suggest writing
L
llJx u|| =exP £log(||J',x e1 ||)
.'=1
The terms being summed in the exponent are independent and the argument of each logarithm scales
like 1 + O(n- ). With probability 1 一 δ We have for all ' that log(∣∣J',xe11∣) ≤ Cn- , where C is a
5
Published as a conference paper at ICLR 2022
constant depending only on δ. Thus, all together,
L
||Jxu|| ≤ exp
c	n`-1
'=1
with high probability. In particular, in the simple case where n` are proportional to a single large
constant n, we find the typical size of ||Jxu|| is exponential in L/n rather than exponential in L,
as in the worst case. If N is wider than it is deep, so that L/n is bounded above, the typical size
of ||Jxu|| and hence of len(N (M))/ len(M) remains bounded. Theorem 5.1 makes this argument
precise. Moreover, let us note that articles like Daniely (2017); Giryes et al. (2016); Poole et al.
(2016) show low distortion of angles and volumes in very wide networks. Our results, however,
apply directly to more realistic network widths.
4	Further Results
4.1	Higher moments
We have seen that the mean length distortion is upper-bounded by 1, and indeed by a function of the
architecture that decreases with the depth of the network. However, a small mean is insufficient by
itself to ensure that typical networks have low length distortion. For this, we now show that in fact
all moments of the length distortion are well-controlled. Specifically, the variance is bounded above
by the ratio of output to input dimension, and higher moments are upper-bounded by a function that
grows very slowly with depth. Our results may be informally stated thus:
Theorem 4.1 (Length distortion: Higher moments). Consider, as before, a ReLU network of depth
L, input dimension n0, output dimension nL, and hidden layer widths n`, with weights given by He
normal initialization. We have the following bounds on higher moments of the length distortion:
L
Var[length distortion] ≤ &L and E [(length distortion)m] ≤ (以)exp cm2 ^X n-1
for some universal constant c > 0.
A formal statement and proof of this result are given in Theorem 5.1 and Appendix C.
We consider the mean and variance of length distortion for a wide range of network architectures
in Figure 3. The figure confirms that variance is modest for all architectures and does not increase
with depth, and that mean length distortion is consistently decreasing with the sum of layer width
reciprocals, as predicted by Theorem 4.1.
4.2	Higher-dimensional volumes
Another natural generalization to consider is how ReLU networks distort higher-dimensional vol-
umes: Given a d-dimensional input M, the outputN(M) will in general also be d-dimensional, and
we can therefore consider the volume distortion vold (N (M))/ vold (M). The theorems presented
in §3.3 when d = 1 can be extended to all d, and the results may be informally stated thus:
Theorem 4.2 (Volume distortion). Consider a ReLU network of depth L, input dimension n0, output
dimension nL, and hidden layer widths n`, with weights given by He normal initialization. Both the
squared mean and the variance of volume distortion are upper-bounded by:
L
X n`-
'=1
A formal statement and proof of this result are given in Theorem 5.2 and Appendix D.
5	Formal S tatements
In this section, we provide formal statements of our results. Full proofs are given in the appendices.
6
Published as a conference paper at ICLR 2022
5.1	One-dimensional manifolds
Fix a smooth one-dimensional manifold M ⊆ Rn0 (i.e. a curve) with unit length. Each point on
M represents a possible input to our ReLU network N , which we recall has input dimension n0,
output dimension nL, and hidden layer widths n1 , . . . , nL-1. The function x 7→ N (x) computed
by N is continuous and piecewise linear. Thus, the image N (M) ⊆ RnL of M under this map
is a piecewise smooth curve in RnL with a finite number of pieces, and its length len(N (M)) is a
random variable. Our first result states that, provided N is wider than it is deep, this distortion is
small with high probability at initialization.
Theorem 5.1. LetN be a fully connected ReLU network with input dimension n0, output dimension
nL, hidden layer widths n1, . . . , nL-1, and independent centered Gaussian weights/biases with the
weights having variance 2/fan-in (as in (1)). Let M be a 1-dimensional curve of unit length in Rn0.
Then, the mean length E [len(N (M))] equals
nL、1/2
no )
Γ( nL+1)
--- ι∕2 × exp
γ(贤)(nL )1/2
5 L-1	L-1
- 8 X n-1 + O X n-2
'=1	∖'=1
(2)
where implied constants in O(∙) are universal and Γ(∙) denotes the Gamma function. Moreover:
Var[len(N(M))] ≤ nL.	(3)
n0
Finally, there exist universal constants c1, c2 > 0 such that ifm < c1 min {n1, . . . , nL-1}, then
E [(len(N(M)))m] ≤
m/2
nL
—— exp
n0
L
c2m2	n`-1
.	'=1
(4)
Theorem 5.1 is proved in §C. Several comments are in order. First, we have assumed for simplicity
that M has unit length. For curves of arbitrary length, both the equality (2) and the bounds (3)
and (4) all hold and are derived in the same way provided len(N (M)) is replaced by the distortion
len(N (M))/ len(M) per unit length.
Second, in the expression (2), note that the exponent tends to 0 as n` → ∞ for any fixed L. More
precisely, when n` = n is large and constant, it scales as -5L/8n. This shows that, for fixed
n0, nL, n, the mean E [len(N (M))] is actually decreasing with L. This somewhat surprising phe-
nomenon is borne out in Fig. 1 and is a consequence of the fact that wide fully connected ReLU nets
are strongly contracting (see e.g. Thms. 3 and 4 in Giryes et al. (2016)).
Third, the pre-factor (nL/n0)1/2 encodes the fact that, on average over initialization, for any vector
of inputs x ∈ Rn0, we have (see e.g. Cor. 1 in Hanin & Rolnick (2018))
E h∣∣N(χ)ll2i ≈ nL l∣χ∣l2,	(5)
n0
where the approximate equality becomes exact if the bias variance Cb is set to 0 (see (1)). In other
words, at the start of training, the network N rescales inputs by an average factor (nL/n0)1/2. This
overall scaling factor also dilates len(N(M)) relative to len(M).
Fourth, we stated Theorem 5.1 for Gaussian weights and biases (see (1)), but the result holds for any
weight distribution that is symmetric around 0, has variance 2/fan-in, and has finite higher moments.
The only difference is that the constant 5/8 may need to be slightly enlarged (e.g. around (19)).
Finally, all the estimates (2), (3), and (4) are consistent with the statement that, up to the scaling
factor (nL/n0)1/2, the random variable len(N (M)) is bounded above by a log-normal distribution:
len(N (M)) ≤
L
, where β = c	n`-1 and c is a fixed constant.
'=1
5.2	Higher-dimensional manifolds
The results in the previous section generalize to the case when M has higher dimension. To consider
this case, fix a positive integer d ≤ min {n0, . . . , nL} and a smooth d-dimensional manifold M ⊆
7
Published as a conference paper at ICLR 2022
Rn0 of unit volume vold (M) = 1. Note that if d > min {n0, . . . , nL}, then N(M) is at most
(d- 1)-dimensional and its d-dimensional volume vanishes. Its imageN(M) ⊆ RnL is a piecewise
smooth manifold of dimension at most d. The following result, proved in §D, gives an upper bound
on the typical value of the d-dimensional volume of N(M).
Theorem 5.2. LetN be a fully connected ReLU network with input dimension n0, output dimension
nL, hidden layer widths n1, . . . , nL-1 and independent centered Gaussian weights/biases with the
variance of the weights given by 2/fan-in (see (1)). Let M be a d-dimensional smooth submanifold
of Rn0 with unit volume and d ≤ min {n0, . . . , nL}. Then, both the squared mean and the variance
of the d-dimensional volume vold(N(M)) ofN(M) is bounded above by
(6)
6 Proof S ketch
The purpose of this section is to explain the main steps to obtaining the mean and variance estimates
(2) and (3) from Theorem 5.1. In several places, we will gloss over some mathematical subtleties
that we deal with in the detailed proof of Theorem 5.1 given in Appendix C. We will also content
ourselves here with proving a slightly weaker estimate than (2) and show instead simply that
E[len(N(M))] ≤ (nL)	and	Var [len(N(M))] ≤ nL.	(7)
n0	n0
We refer the reader to Appendix C for a derivation of the more refined result stated in Theorem 5.1.
Since we have E [X]2 ≤ E X2 and Var[X] ≤ E X2, both estimates in (7) follow from
E [len(N(M))2] ≤ nL.
n0
(8)
To obtain this bound, we begin by relating moments of len(N (M)) to those of the input-output
Jacobian of N at a single point for which we need some notation. Namely, let us choose a unit
speed parameterization of M ; that is, fix a smooth mapping
γ : R → Rn0,	γ(t) = (γ1(t), . . . , γn0 (t))
for which M is the image under γ of the interval [0, 1]. That γ has unit speed means that for every
t ∈ [0,1] We have ∣∣γ0(t)∣∣ = 1, where γ0(t) := (γ1(t),..., Yn o (t)) . Then, the mapping Γ := NQ Y
(for Γ : R → RnL) gives a parameterization of the curve N(M). Note that this parameterization is
not unit speed. Rather the length of N(M) is given by
len(N (M))
Z 1 l∣r0(t)∣∣ dt.
0
(9)
Intuitively, the integrand ∣∣Γ0(t)∣∣ dt computes, at a given t, the length of Γ([t,t + dt]) as dt → 0.
The following Lemma uses (9) to bound the moments of len(N (M)) in terms of the moments of
the norm of the input-output Jacobian Jx, defined for any x ∈ Rn0 by
1≤i≤nL
1≤j≤n0
(10)
where Ni is the i-th component of the network output.
Lemma 6.1. We have
E [len(N (M))2 ] ≤ Z1EhJγ(t)Y0(t)2i dt.
(11)
Sketch of Proof. Taking powers in (9) and interchanging the expectation and integrals, we obtain
E [len(N(M))2]
E[∣∣Γ0(tι)∣∣∣∣Γ0(t2)∣∣] dt1 dt2.
(12)
8
Published as a conference paper at ICLR 2022
Applying the inequality ab ≤ 1 (a2 + b2), for a, b ∈ R, to the integrand in (12), We conclude
E[len(N(M))2] ≤ / 1 E [仁⑴Μ
dt.
The chain rule yields Γ0(t) = Jγ(t)γ0(t). Substituting this into (13) completes the proof.
(13)
□
Lemma 6.1, While elementary, appears to be neW, alloWing us to bound global quantities such as
length in terms of local quantities such as the moments of ||Jxu||. In particular, having obtained
the expression (11), We have reduced bounding the second moment oflen(N(M)) to bounding the
second moment of the random variable ||Jxu|| for a fixed x ∈ Rn0 and unit vector u ∈ Rn0. This is
a simple matter since in our setting the distribution of Weights and biases is Gaussian and hence, in
distribution, ||Jxu|| is equal to a product of independent random variables:
Proposition 6.2. For any x ∈ Rn0 and any unit vector u ∈ Rn0, the random variable ||Jxu||2 is
equal in distribution to a product of independent scaled chi-squared random variables
||Jxu||
2 d nL
=-----
n0
L-1
'=1
意'
nLXnL
where the number of degrees of freedom in the `th term of the product (for ` = 1, . . . , L - 1) is
given by an independent binomial n` =d Bin (n`, 1/2) with n` trials and success probability 1/2.
The number of degrees of freedom in the final term is deterministic and given by nL.
This Proposition has been derived a number of times in the literature (see Theorem 3 in Hanin (2018)
and Fact 7.2 in Allen-Zhu et al. (2019)). We provide an alternative proof based on Proposition 2 in
Hanin & Nica (2019) in the Supplementary Material. Note that the distribution of ||Jxu|| is the same
at every x and u. Thus, fixing x ∈ Rn0 and a unit vector u ∈ Rn0, We find
E len(N(M))2] ≤ E h||Jxu||2i .
To prove (8), We note that E χ2n = n/2 and apply Lemma 6.2 to find, as desired,
h||jxu||2i = n0 (Y E
E
E[n-1xn/= nLΠ ] : E [n`〕＞ =
n0 3 I n` n	no

7	Limitations and Future Work
We shoW that deep ReLU netWorks With appropriate initialization do not appreciably distort lengths
and volumes, contrary to prior assumptions of exponential groWth. Specifically, We provide an exact
expression for the mean length distortion, Which is bounded above by 1 and decreases slightly With
increasing depth. We also prove that higher moments of the length distortion admit Well-controlled
upper bounds, and generalize this to distortion of higher dimensional volumes. We shoW empirically
that our theoretical results closely match observations, unlike previous loose loWer bounds.
There are several notable limitations of this paper, Which offer promising directions for future Work.
First, We prove statements for netWorks at initialization, and our results do not necessarily hold
after training; analyzing such behavior formally Would require consideration of the loss function,
optimizer, and data distribution. Second, our results, as stated, do not apply to convolutional, resid-
ual, or recurrent netWorks. We envision generalizations for netWorks With skip connections being
straightforWard, While formulations for convolutional and recurrent netWorks Will likely be more
complicated. In Appendix A, We provide preliminary results suggesting that expected length distor-
tion decreases modestly With depth in both convolutional netWorks and those With skip connections.
Third, We believe that various other measures of complexity for neural netWorks, such as curvature,
likely demonstrate similar behavior to length and volume distortion in average-case scenarios With
appropriate initialization. While someWhat parallel results for counting linear regions Were shoWn
in Hanin & Rolnick (2019; 2020), there remains much more to be understood for other notions of
complexity. Finally, We look forWard to Work that explicitly ties properties such as loW length distor-
tion to improved generalization, as Well as neW learning algorithms that leverage this line of theory
in order to better control inductive biases to fit real-World tasks.
9
Published as a conference paper at ICLR 2022
8	Ethics Statement
This paper falls within deep learning theory and is intended to advance innovation for more effective
and reliable algorithms. However, insofar as our work shows that deep ReLU networks at initializa-
tion are better-behaved than was previously believed, this could encourage the use of deeper neural
networks. While deeper networks may enhance performance in some contexts, larger numbers of pa-
rameters are also associated with increased computational cost, which can both increase greenhouse
gas emissions and exacerbate inequities caused by differential access to computational resources.
9	Acknowledgements
The authors gratefully acknowledge a range of funding sources that supported this research. BH
would like to acknowledge NSF grants DMS-1855684 DMS-2133806 as well as an NSF CA-
REER grant DMS-2143754 and an ONR MURI on Foundations of Deep Learning. DR would like
to acknowledge support from the Natural Sciences and Engineering Research Council of Canada
(NSERC) Discovery Grants program and the Canada CIFAR AI Chairs program.
References
Zeyuan Allen-Zhu, Yuanzhi Li, and Zhao Song. A convergence theory for deep learning via over-
parameterization. In International Conference on Machine Learning (ICML), 2019.
Sanjeev Arora, Rong Ge, Behnam Neyshabur, and Yi Zhang. Stronger generalization bounds for
deep nets via a compression approach. In International Conference on Machine Learning (ICML),
2018.
Lei Jimmy Ba and Rich Caruana. Do deep nets really need to be deep? In Conference on Neural
Information Processing Systems (NeurIPS), 2014.
Peter Bartlett, Dylan J Foster, and Matus Telgarsky. Spectrally-normalized margin bounds for neural
networks. Preprint arXiv:1706.08498, 2017.
Monica Bianchini and Franco Scarselli. On the complexity of neural network classifiers: A com-
parison between shallow and deep architectures. IEEE Transactions on Neural Networks and
Learning Systems, 25(8):1553-1565, 2014.
Nadav Cohen, Or Sharir, and Amnon Shashua. On the expressive power of deep learning: A tensor
analysis. In Conference on Learning Theory (COLT), 2016.
Amit Daniely. Depth separation for neural networks. In Conference on Learning Theory (COLT),
2017.
Gintare Karolina Dziugaite and Daniel M Roy. Computing nonvacuous generalization bounds
for deep (stochastic) neural networks with many more parameters than training data. Preprint
arXiv:1703.11008, 2017.
Ronen Eldan and Ohad Shamir. The power of depth for feedforward neural networks. In Conference
on Learning Theory (COLT), 2016.
Raja Giryes, Guillermo Sapiro, and Alex M Bronstein. Deep neural networks with random Gaussian
weights: A universal classification strategy? IEEE Transactions on Signal Processing, 64(13):
3444-3457, 2016.
Boris Hanin. Which neural net architectures give rise to exploding and vanishing gradients? In
Conference on Neural Information Processing Systems (NeurIPS), 2018.
Boris Hanin and Mihai Nica. Products of many large random matrices and gradients in deep neural
networks. Communications in Mathematical Physics, pp. 1-36, 2019.
Boris Hanin and Mihai Nica. Finite depth and width corrections to the neural tangent kernel. In
International Conference on Learning Representations (ICLR), 2020.
10
Published as a conference paper at ICLR 2022
Boris Hanin and David Rolnick. How to start training: The effect of initialization and architecture.
In Conference on Neural Information Processing Systems (NeurIPS), 2018.
Boris Hanin and David Rolnick. Complexity of linear regions in deep networks. In International
Conference on Machine Learning (ICML), 2019.
Boris Hanin and David Rolnick. Deep ReLU networks have surprisingly few activation patterns. In
Conference on Neural Information Processing Systems (NeurIPS), 2020.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Delving deep into rectifiers: Surpass-
ing human-level performance on ImageNet classification. In IEEE International Conference on
Computer Vision (ICCV), 2015.
Yiding Jiang, Behnam Neyshabur, Hossein Mobahi, Dilip Krishnan, and Samy Bengio. Fantastic
generalization measures and where to find them. Preprint arXiv:1912.02178, 2019.
Henry W Lin, Max Tegmark, and David Rolnick. Why does deep and cheap learning work so well?
Journal OfStatistical Physics,168(6):1223-1247, 2017.
GUido Montufar, Razvan Pascanu, KyUnghyUn Cho, and Yoshua Bengio. On the number of lin-
ear regions of deep neural networks. In Conference on Neural Information Processing Systems
(NeurIPS), 2014.
Ben Poole, Subhaneil Lahiri, Maithra Raghu, Jascha Sohl-Dickstein, and Surya Ganguli. Expo-
nential expressivity in deep neural networks through transient chaos. In Conference on Neural
Information Processing Systems (NeurIPS), 2016.
Ilan Price and Jared Tanner. Trajectory growth lower bounds for random sparse deep ReLU net-
works. Preprint arXiv:1911.10651, 2019.
Maithra Raghu, Ben Poole, Jon Kleinberg, Surya Ganguli, and Jascha Sohl-Dickstein. On the
expressive power of deep neural networks. In International Conference on Machine Learning
(ICML), 2017.
David Rolnick and Max Tegmark. The power of deeper networks for expressing natural functions.
In International Conference on Learning Representations, 2018.
Shai Shalev-Shwartz, Ohad Shamir, and Shaked Shammah. Failures of gradient-based deep learning.
In International Conference on Machine Learning (ICML), 2017.
Matus Telgarsky. Representation benefits of deep feedforward networks. Preprint
arXiv:1509.08101, 2015.
Matus Telgarsky. Benefits of depth in neural networks. In Conference on Learning Theory (COLT),
2016.
11
Published as a conference paper at ICLR 2022
A Experiments for Convolutional and Residual Networks
We here provide preliminary experimental results for the mean length distortion in networks with
convolutional layers and skip connections.
In Figure 4(a), we show results for networks with sequential convolutional layers (without pooling
layers), initialized as before with weights i.i.d. normal with variance 2/fan-in, and a final fully
connected layer. We use input dimension n0 = 16 × 16 × 3 = 768 and output dimension 5. OUr
results indicate that the mean length distortion is, as expected, approximately equal to JnL /n0 ≈
0.08, and that it decays slightly with depth.
In Figure 4(b), we consider residual networks. Here, the overall network N is defined in terms of
residual modules N1 , N2, . . . , NL and scales η1 , η2, . . . , ηL according to:
N (x) = X + ηι NI (x) + η N (X + ηι M (χ)) +—
+ ηLNL (χ + ηιNi(x) + ηM(X + ηιM(χ)) +——)).
We set all residual modules N' to be two-layer, fully connected ReLU networks. In keeping with
Hanin & Rolnick (2018), we initialize all weights i.i.d. normal with variance 2/fan-in, while setting
η1 = η2 =…=ηL = 1/L. OUr results suggest that mean length distortion again decays modestly
overall, with a somewhat sharper decrease for small depths.
Figure 4: Mean length distortion as a function of depth, for networks with convolutional layers and
skip connections, initialized using He normal initialization He et al. (2015). (a) shows results for
networks having convolutional layers, where the input dimension n0 equals 16 × 16 × 3 = 768 and
output dimension nL equals 5. Here width corresponds to the number of 3 × 3 kernels in each layer.
As expected, the mean length distortion is ∖JnL/n0 ≈ 0.08 and decays modestly with depth. (b)
shows results for networks with skip connections occurring between even layers (i.e. each residual
block is a fully-connected ReLU network of depth 2), again taking a line segment of unit length
as the input curve. Here, depth corresponds to the total number of layers in the network, so that a
depth-20 network includes 10 residual blocks. Both plots (a) and (b) show the empirical mean over
100 initializations of the weights and biases.
B	Experimental Details
For all experiments, weights were initialized from i.i.d. normal distributions with variance 2/fan-in
and bias variance 0.1. We run several experiments that involve computing the length distortion of
a given line segment in Rn0 . We remark on how this was done, for which we rely on the notion of
linear regions and bent hyperplanes associated with ReLU networks, explored in Hanin & Rolnick
(2020); Telgarsky (2015). Specifically, ReLU networks partition input space into a collection of
convex polytopes, which we call linear regions, as (generically) distinct linear functions are defined
on each region corresponding to a different subset of the hidden neurons being activated (where a
neuron is activated if its pre-activation is nonnegative). The boundaries of these linear regions are
given by sets of points for which a particular neuron has preactivation equal to 0.
12
Published as a conference paper at ICLR 2022
Say we are given a line segment ` with endpoints p1 , p2 ∈ Rn0 parametrized by unit speed on
[0, 1], given by the set {p1 + t(p2 - p1) : t ∈ [0, 1]}, for which we aim to compute the length
distortion. Let w` = p2 - p1.
We first approximate the intersections of the line segment with linear region boundaries using a
binary search subroutine. Specifically, initialize the set S = [0, 0.5, 1], which will contain the
parameter values for these approximations. For each iteration of the subroutine, we run the following
procedure: for any three consecutive points t1, t2, t3 ∈ S, let x1 = p1 + t1 (p2 - p1), x2 = p1 +
十 c(nc n,∖ Yc — n, -I-∙∕∙∙√nc n,、口nd「cnaider the v口 hιeɑ ∣∣N(X2)-N (XI)U ISnd I IN (X3)-N (x2)||
t2(p2 - p1), x3 = p1 + t3(p2 - p1), and consider the values -∣∣χ2-χι∣∣- and ---^X3-X^-----.
These values are equal if the three points are in the same linear region, in which case we eliminate t1
and t3 from S . If not equal, then there exists a linear region boundary in the segment from x1 to x3 ;
We add the points t1+12 and t2+t3 to S. We iterate this procedure (l5 times in our implementation);
for the final iteration, we ensure that only the last point associated with a given linear region is in S .
NoW take the set S = [t1, t2, . . . , tn] returned by the binary search procedure; We proceed to com-
pute the parameter values denoting the exact intersections of the line segment With region bound-
aries, which we shall store in S*. For consecutive points ti, ti+ι ∈ S, i = 1,...,η - 1, determine
the set of activated neurons for both points at xi = p1 + ti(p2 - p1), xi+1 = p1 + ti+1(p2 - p1),
and find the neuron at which these sets differ; we solve a linear equation to determine the value
t* ∈ [0,1] for which this neuron is 0, and replace ti with the exact value t↑ in S*. Finally, we
append 0 and 1 to the respective ends of S * =[茹=0,t↑,... ,tn = 1].
Computing the length distortion is reduced to summing the lengths of the output segments cor-
responding to consecutive pairs ti, ti+1 ∈ S*. Namely, for each such pair, the network is
given by a single linear function on the segment of inputs between xi = p1 + ti(p2 - p1) and
Xi+ι = pi + ti+1(p2 — pi). We calculate the weight matrix Wi of this linear function - the length
of the corresponding output segment is the product of Wi with the vector w` . The total length
distortion is then given by the sum
n-i
X IWiw'll(t*+ι-1*)
i=0
C Proof of Theorem 5.1
Our first step in proving Theorem 5.1 is to obtain bounds on the moments of len(N (M)) in terms of
the input-output Jacobian ofN at a single point, which we recall was defined in (10). To accomplish
them, we recall the notation from §6. Namely, fix a smooth unit speed parameterization of M =
γ([0, 1]) with
γ : R → Rn0,	γ(t) = (γi(t), . . . , γn0 (t)) .
The mapping
Γ := NQ γ, Γ: R → RnL
gives a parameterization of the curveN(M), and we have
len(N(M))
11 l∣r0(t)∣∣ dt.
0
(14)
Let us note an important but ultimately benign technicality. The Jacobian Jx of the map x 7→ N(x)
is not defined at every x (namely those x where some neuron turns from on to off). Thus, a priori,
Γ0(t) exists only at those t for which Jγ(t) exists. However, the formula (14) is still valid. Indeed,
for any setting of weights and biases ofN the map Γ is Lipschitz. Thus, by Rademacher’s theorem,
Γ0(t) exists for almost every t ∈ [0, 1] and the length of the curve is given by integrating the norm
of this almost-everywhere defined derivative. The following simple Lemma is a generalization of
Lemma 6.1 and allows us to bound all moments oflen(N(M)) in terms of the moments of the norm
of the Jacobian vector product ||Jxu||.
Lemma C.1. For any integer m ≥ 1, we have
E [len(N(M))m] ≤
Z0iEJγ(t)γ0(t)m
dt.
(15)
13
Published as a conference paper at ICLR 2022
Proof. Taking powers in (14) and using Tonelli’s theorem to interchange the expectation and inte-
grals, we obtain
E
m
[len(N (M))m]
1	1m
/ …E ∏∣∣Γ0(tj)||
0	0 j=1
dtl ∙∙∙ dtm.
(16)
1
1
To proceed, let us recall a special case of the power mean inequality which says that for any ai ≥ 0
we have
mm
Yai ≤ ；1 X am
i=1	i=1
Applying this to the integrand in (16), we conclude
E [len(N (M))m] ≤
Z1E
0
dt.
(17)
Next, fix t ∈ [0, 1]. For any neuron z in N, denote by x 7→ z(x) its pre-activation. Note that
P(z(γ(t)) = 0) = 0 since our bias variance Cb is set to some fixed positive constant and hence the
bias of each neuron has a continuous density. Therefore, with probability 1over the randomness in
the weights and biases ofN, there exists a neighborhood U of γ(t) on which z(x) has constant sign
for all x ∈ U. The Jacobian Jγ(t) is therefore well-defined and the chain rule yields
Γ0(t) = Jγ(t)γ0(t).
(18)
Substituting this into (17) completes the proof.
□
Having obtained the expression (15), we have reduced bounding the moments of len(N (M)) to
bounding the moments of the random variable ||Jxu|| for a fixed x ∈ Rn0 and unit vector u ∈ Rn0.
Prior work (e.g. Thm. 1 in Hanin & Nica (2019)) shows that these moments satisfy
E ||Jxu||2m
no 厂 exp(5(m) X1 n-1 + O (XInJ)
provided
<
min
'=1,...,L-1
n`.
(19)
Substituting these moment estimates in (15) completes the derivation of (4). However, the results in
Hanin & Nica (2019) are subtle because they apply to any distribution of weights and biases. They
also give the slightly sub-optimal restriction (19) that m2 must be smaller than a constant times the
minimum of the n`'s. In the special case where the distribution of weights and biases is Gaussian, We
can do slightly better by computing the moments of ||Jxu|| more directly (note that in the statement
of Theorem 5.1, we required only that m is smaller than a constant times the minimum of the n`'s).
We will need this anyway to derive the slightly more refined estimates in (2) and (3). Let us therefore
check that, in distribution, ||Jxu|| is equal to a product of independent random variables:
Proposition C.2. For any x ∈ Rn0 and any unit vector u ∈ Rn0, the random variable ||Jxu||2 is
equal in distribution to a product of independent scaled chi-squared random variables
||Jxu||
2 d nL
=—
n0
1
L-1
'=1
χn'
nL χnL ,
where the number of degrees of freedom in the `th term of the product (for ` = 1, . . . , L - 1) is given
by an independent binomial
n` =d Bin (n`, 1/2)
with n` trials and success probability 1/2. The number of degrees of freedom in the final term is
deterministic and given by nL.
14
Published as a conference paper at ICLR 2022
Proof. Consider a ReLU network N with input dimension 1, output dimension nL, and hidden layer
widths n1,...,nL-1. Suppose the weight matrices W(') and bias vectors b(') are independent with
i.i.d. Gaussian components:
WijP 〜G(0, 2∕n'-i),	b苧〜G(0, Cb),
where Cb > 0 is any fixed constant. For a fixed network input x ∈ Rn0, with probability 1, the
input-output Jacobian Jx is well-defined. Moreover, it can be written as
Jx = W(L)D(LT)W(LT) ∙∙∙ D⑴W⑴，
where W(') is the matrix of weights from layer ' 一 1 to layer ' and D(') is an n` X n` diagonal
matrix:
D⑻=Diag ^1nz(')≥0o, i = 1,...,n'
whose diagonal entries are 0 or 1 depending on whether the pre-activation zi(`) of neuron i in layer
` is positive at our fixed input x. Next, according to Proposition 2 in Hanin & Nica (2019), the
marginal distribution of each D(') is that its diagonal entries are independent BemoUlli(1∕2) random
variables. Moreover, we have the following equality in distribution:
Jx = ηW(L)D(LT)W(LT)…D⑴W⑴
where D(') are independent of each other (and of W(`)) resampled from the marginal distribution
of D(') and η is an independent diagonal matrix with independent diagonal entries that are ±1 with
equal probability. In particular, for a fixed unit vector u ∈ Rn0 , we have
∣∣Jxu∣∣ = ||W(L)D(LT)W(LT)…D(I)W⑴u||.
We may rewrite this as
||W(L)D(LT)W(LT)…D⑵W⑵U(I)|| ||D(I)W⑴u||,
(20)
for U(I) := ∣∣D(1)W(1)u∣∣, where we interpret the expression (20) as equal to 0 if D(I) is the zero
matrix. To complete the proof, we need the following standard observation.
Lemma C.3. Suppose W is an n × n0 matrix with i.i.d. Gaussian entries and u is a random unit
vector in Rn0 that is independent of W but otherwise has any distribution. Then Wu is independent
of u and is equal in distribution to Wv where v is any fixed unit vector in Rn0 .
Proof. For any fixed orthogonal matrix O, it is a standard fact that WO is equal in distribution to
W. Thus, for any measurable sets A ⊆ Rn and B ⊆ Rn0, since u, W are independent we have
P (Wu ∈ A, u ∈ B) = P (Wu0 ∈ A) dPu(u0),
Sn0-1
where Pu(u0) is the distribution of u. Fix any u0 ∈ Sn0-1 and let O = O(u0) be any orthogonal
matrix so that u0 = Oe1 with e1 = (1, 0, . . . , 0) is the first standard unit vector. Then, since WO is
equal in distribution to W, we have
P(Wu0 ∈ A) =P(We1 ∈ A),
which is independent of u0 . We therefore find
P(Wu ∈ A,u ∈ B) =P(We1 ∈ A) P(u ∈ B),
as desired.
□
We are now in a position to complete the proof of Proposition C.2. Combining Lemma C.3 with
(20), we find that, in distribution ||JxU|| equals
||W(L)D(LT)W(LT) ∙∙∙D(2)w(2)u||||D(I)W⑴u||.	(21)
15
Published as a conference paper at ICLR 2022
Note that these two terms are independent. Repeating this argument, we obtain that ||Jxu|| is equal
in distribution to the product
||W (L)UIlllD(LT)W (LT)U∣∣∙∙∙∣∣D(I)W ⑴ u||.	(22)
The terms in this product are independent. To complete the proof note that for ` = 1, . . . , L - 1
the number of non-zero entries in D(') is a binomial random variable n` with n` trials, each with
probability of success 1/2 and that
||D⑶W⑶u||2
is precisely 2/ng times a sum of n` squares of independent standard Gaussians. Thus, for ' =
1,...,L-1,
I∣D(')W (')u∣∣2 = ɪ Xn'.	(23)
n`-1 n`
Similarly
∣∣ W(L)U∣∣2 = ɪ XnL.	(24)
nL-1	L
Substituting (23) and (24) into (22) completes the proof.	□
Evaluating the moments of len(N (M)) is now a matter of computing the moments of some scaled
chi-squared random variables with a random number of degrees of freedom. For instance, recalling
that
Eχ2k =k
and applying Lemma C.2 as well as the tower property of the expectation we find
E
n0
Substituting this into (15) with m = 2 yields
Var [len(N(M))] ≤ nL,
n0
yielding (3). To prove (2), we need to estimate E [len N (M)]. By taking expectations in (14) and
using (18), we find
E[lenN(M)] =Z 1EJγ(t)γ0(t)	dt = E [llJxUll],
0
where we’ve used that by Lemma C.2, the distribution of llJxUll is the same for every x ∈ Rn0 and
every unit vector U. Moreover, again using Lemma C.2, we see that E [llJxUll] equals
no
nL
1/2 L-1
'=1
1/2
To simplify this, a direct computation shows that
E—，,
16
Published as a conference paper at ICLR 2022
where Γ(∙) is the Gamma function. Next, for any positive random variable X with E [X] = 1 we
have
E [X1/2] = E [(1 + (X - 1))1/2]
=1 - £Var[X] + O(IX - U3)∙
8
Recall that
Var[χk] = 2k.
Using this and the law of total variance yields
X
E
1 - 2n2 Var[χn∕+o(n-2)
1
E 'ar/j n`]]
+ Vaτ[E [χn' I n`]] + Oln-)
1
—
2-2 [E [2n] + Var[n]] + O(n- 2)
1
—
1
—
1
2n2
5
8ng
[n' + / i + °(n-2)
+ θ(n` 2)∙
Thus, We find that E [len(N(M))] equals
-l∖ 1/2
no )
Γ （一）
γ （n）（ n）1/2
× exp
5 L-1
-IX n-1 + O
,	2=1
))
as claimed. Finally, let us check the higher moment estimates (4). By Lemma C.2 we have the
folloWing estimate
IIJxuII2
nL
no
∏ —χ2 ʃ) n-1χn>L
nL
——exp
no
X1修χ2' -川
nL XnL
≤
where we used that x = x - 1 + 1
≤ ex-1. For any m, we have
nL XnL
m-∣
≤ exp
1 + 2)…(1 +
nL
m-1
X过
nL
j = 0
2m - 2
≤ exp
nL
nL
2
m
Therefore, ∣∣Jxu∣∣2m is bounded above by
m
L-1
2=1
m2
1} + n
(25)
Xa
n`	'
—
Finally, for any fixed positive integer n we may write
2 χ2-1 = 2 X 卜 z2
n	n
k = 1 k
—
1
2
17
Published as a conference paper at ICLR 2022
where ξk are independent Bernoulli(1/2) random variables and Zk are independent standard Gaus-
sians. A direct computation shows that the centered random variables ξk Zk - 1 are sub-exponential
SE(ν2, α) with some universal parameters ν2, α. Thus, by the stability of sub-exponential random
variables under summation we have
-2 Xn
n` n`
-1 ∈SE
X-1 1 2α
'=1 五 ,n
Again using this property we conclude
X n^- 1 ∈ SE (4ν2
'=1	'
'*
where
n* = min {nι,...,nL-i}.
Therefore, by (25), we find that
E
exp
2
m2
nL
where Y ∈ SE(4v2 PL-IL	,箸).By definition of sub-exponential random variables, We have
EemY
≤ exp
4m2 ν2
L-1 1
X ɪ
n`
'=1	'
provided m < n"2α for some universal constant c > 0. This completes the derivation of (4) and
completes the proof of Theorem 5.1.
D Proof of Theorem 5.2
The proof of Theorem 5.2 follows closely the argument for Theorem 5.1. Fora given input x ∈ Rn0,
we will continue to write
JN (X) = (dXj Ni(X)) n 1≤j≤no o
1≤i≤nL
for the input-output Jacobian of the network function, which exists for Lebesgue almost every X ∈
Rn0 . We will write ΠTxM : Rn0 → TxM for the orthogonal projection onto this tangent space. We
have
Vold(M (M ))= ( (det(∏TxM JN (X)T JN (x)∏TχM ))1/2 vold(dx),
M
where vold is the d-dimensional Hausdorff measure. Indeed, the integrand measures, at each X ∈
M, the volume of the image of an infinitesimal cube on M of volume vold(dX) centered at X under
the map X 7→N (X). Arguing precisely as in the proof of Lemma C.1, we find that for any integer
m≥1
E [vold(N(M))m] ≤
/ E [det (∏τxM JN(X)T JN(x)ΠTxM)]m/2 vold(dx)
(26)
Fix X ∈ M and denote by
e1(X), . . .,ed(X)
an orthonormal basis of the tangent space of M. Then, by the Gram identity, we may write
det (∏TxMJN(X)TJN(x)ΠTxM) = ||JN(x)ei(x) ∧ …∧ JN(x)ed(x)∣∣2 ,	(27)
where we recall that the wedge product is the anti-symmetrization of the tensor product. Just
as in the proof of Theorem 5.1, the key observation is that for Gaussian weights we have that
||JN(x)ci(x) ∧ …∧ JN(X)ed(X)∣∣ is a product of i.i.d. random variables. The formal statement
is the following:
18
Published as a conference paper at ICLR 2022
d1
• Y —χnL-j + 1,
nL
j=1
Proposition D.1. For any x ∈ Rn0 and collection of orthonormal unit vectors u1, . . . , ud ∈ Rn0,
the random variable
|| JχUl ∧ …∧ JχUd∣∣
is equal in distribution to a product of independent scaled chi-squared random variables:
d L-1 d
(YY K-j+
∖'=1j=1
where all the terms in the product are independent and for ` = 1, . . . , L - 1 we’ve written n` for
independent Binomial random variables:
n` =d Bin (n`, 1/2)
with n` trials and success probability 1/2.
Proof. The proof is identical to that of Lemma C.2. The only difference is that we must invoke the
following amplification of Lemma C.3:
Lemma D.2. Let u1 , . . . , uk ∈ Rn0 be a collection of orthonormal vectors (i.e. a collection) with
any distribution. Let W be an independent n × n0 matrix with i.i.d. Gaussian entries. Then
W(uι ∧ …∧ Uk) = Wuι ∧∙∙∙∧ Wuk
is independent of uι ∧ …∧ uk and is equal in distribution to Wvi ∧ …Wvk where vι,...,vk is
any fixed collection of orthonormal vectors.
Proof. The proof is identical to that of Lemma C.3, except that we note that for that, given
u1, . . . , uk, there exists an orthogonal matrix O = O(u1, . . . , uk) so that
uj = Oej,	j = 1, . . . , k
where ej are the standard basis vectors.	□
□
With Lemma D.1 in hand, we complete the proof of Theorem 5.2 as follows. First, note that for any
random variable X we have
E[X] ≤ E X21/2 ,	Var[X] ≤ E X2 .
Hence, Theorem 5.2 will follow once we show that
E vold(N(M))2 ≤
d
exp
Combining Proposition D.1 with (26) and (27), this estimate follows by showing that
E ||Jxu1 ∧ • • • ∧ Jxud||2	≤
卫)∖xp
n0
(28)
To check this, recall that
Hence,
E ||JN (x)e1 (x) ∧ • • • ∧ JN(x)ed(x)||2
E χ2k = k.
L-1 d	d
∏∏ n E K'-j+i])] ± E[χnL"
'=i j = 1	) j = 1
dL d
∏∏(ι-j-1)
'=1j=1 ∖	' /
d
exp
where in the last line we used that 1 + x ≤ ex . This completes the proof.

19