Under review as a conference paper at ICLR 2022
DreamerPro: Reconstruction-Free
Model-Based Reinforcement Learning
with Prototypical Representations
Anonymous authors
Paper under double-blind review
Ab stract
Top-performing Model-Based Reinforcement Learning (MBRL) agents, such as
Dreamer, learn the world model by reconstructing the image observations.
Hence, they often fail to discard task-irrelevant details and struggle to handle
visual distractions. To address this issue, previous work has proposed to con-
trastively learn the world model, but the performance tends to be inferior in the
absence of distractions. In this paper, we seek to enhance robustness to distractions
for MBRL agents. Specifically, we consider incorporating prototypical represen-
tations, which have yielded more accurate and robust results than contrastive ap-
proaches in computer vision. However, it remains elusive how prototypical repre-
sentations can benefit temporal dynamics learning in MBRL, since they treat each
image independently without capturing temporal structures. To this end, we pro-
pose to learn the prototypes from the recurrent states of the world model, thereby
distilling temporal structures from past observations and actions into the proto-
types. The resulting model, DreamerPro, successfully combines Dreamer
with prototypes, making large performance gains on the DeepMind Control suite
when there are complex background distractions, while maintaining similar per-
formance as Dreamer in the standard setting.
1	Introduction
Model-Based Reinforcement Learning (MBRL, Sutton & Barto, 2018; Sutton, 1991) provides a so-
lution to many problems in contemporary reinforcement learning. It improves sample efficiency by
training a policy through simulations of a learned world model. Learning a world model also pro-
vides a way to efficiently represent experience data as general knowledge simulatable and reusable
in arbitrary downstream tasks. In addition, it allows accurate and safe decisions via planning.
Among recent advances in image-based MBRL, Dreamer is particularly notable as the first MBRL
model outperforming popular model-free RL algorithms with better sample efficiency in both con-
tinuous control (Hafner et al., 2020) and discrete control (Hafner et al., 2021). Unlike some previous
model-based RL methods (Kaiser et al., 2019), it learns a world model that can be rolled out in a
compact latent representation space instead of the high-dimensional observation space. Also, policy
learning can be done efficiently via backpropagation through the differentiable dynamics model.
In image-based RL, the key problem is to learn low-dimensional state representation and, in the
model-based case, also its forward model. Although we can learn such representation directly by
maximizing the rewards (Schrittwieser et al., 2020), it is usually very slow to do this due to the
reward sparsity. Instead, it is more practical to introduce auxiliary tasks providing richer learning
signal to facilitate representation learning without reward (or with sparse reward) (Sutton et al.,
2011; Jaderberg et al., 2016). Dreamer achieves this by learning the representation and the dy-
namics model in a way to reduce the reconstruction error of the observed sequences. However,
reconstruction-based representation learning has limitations. First, it is computationally expensive
to reconstruct the high-dimensional inputs, especially in models like Dreamer that needs to re-
construct long-range videos. Second, it wastes the representation capacity to learn even the visual
signals that are irrelevant to the task or unpredictable such as noisy background (Burda et al., 2018).
Thus, in MBRL it is of particular interest to realize a version of Dreamer without reconstruction.
1
Under review as a conference paper at ICLR 2022
Recently, there have been remarkable advances in reconstruction-free representation learning in re-
inforcement learning (Laskin et al., 2020a;b; Yarats et al., 2021c). The currently dominant approach
is via contrastive learning. This approach requires pair-wise comparisons to push apart different
instances while pulling close an instance and its augmentation. Therefore, this method usually re-
quires a large batch size (so computationally expensive) to perform accurately and robustly. An
alternative is the clustering-based or prototype-based approach (Caron et al., 2020). By learning a
set of clusters represented by prototypes, it replaces the instance-wise comparison by a comparison
to the clusters and thereby avoids the problems of contrastive learning. This approach is shown to
perform more accurately and robustly in many applications (Caron et al., 2020; 2021; Yarats et al.,
2021b) than the contrastive method while also alleviating the need for maintaining a large batch size.
The prototype structure can also be used to implement an exploration method (Yarats et al., 2021b).
However, for reconstruction-free MBRL only the contrastive approach like Temporal Predictive
Coding (TPC, Nguyen et al., 2021) has been proposed so far. While TPC consistently outperforms
Dreamer in the noisy background settings, for standard DeepMind Control suite (Tassa et al.,
2018) it showed quite inconsistent results by performing severely worse than Dreamer on some
tasks. Therefore, we hypothesize that this inconsistent behavior may be fixed if the robustness and
accuracy of the prototypical representations can be realized in MBRL and further improved with the
support of temporal information.
In this paper, we propose a reconstruction-free MBRL agent, called DreamerPro, by combining
the prototypical representation learning with temporal dynamics learning. Similar to SwAV (Caron
et al., 2020), by encouraging uniform cluster assignment across the batch, we implicitly pull apart the
embeddings of different observations. Additionally, we let the temporal latent state to ‘reconstruct’
the cluster assignment of the observation, thereby relieving the world model from modeling low-
level details. We evaluate our model on the standard setting of DeepMind Control suite, and also on
a natural background setting, where the background is replaced by natural videos irrelevant to the
task. The results show that the proposed model consistently outperforms previous methods.
The contributions of the paper are (1) the first reconstruction-free MBRL agent based on the proto-
typical representation and its temporal dynamics and (2) the demonstration of the consistently im-
proved accuracy and robustness of the proposed model in comparison to a contrastive reconstruction-
free MBRL agent and Dreamer for both standard and natural background DMC tasks.
2	Preliminaries
In this section, we briefly introduce the world model and learning algorithms used in
DreamerV2 (Hafner et al., 2021) which our model builds upon. To indicate the general Dreamer
framework (Hafner et al., 2020; 2021), we omit its version number in the rest of the paper.
2.1	Reconstruction-based world model learning
Dreamer learns a recurrent state-space model (RSSM, Hafner et al., 2019) to predict forward
dynamics and rewards in partially observable environments. At each time step t, the agent receives
an image observation ot and a scalar reward rt (obtained by previous actions a<t). The agent
then chooses an action at based on its policy. The RSSM models the observations, rewards, and
transitions through a probabilistic generative process:
p(o1:T , r1:T
| a1:T) =	tY=1 p(ot |
s≤t , a<t) p(rt | s≤t , a<t) p(st | s<t, a<t) ds1:T
(1)
tY=1 p(ot | ht , st) p(rt | ht , st) p(st | ht) ds1:T ,
(2)
where the latent variables s1:T are the agent states, and ht = GRU(ht-1, st-1, at-1) is a deter-
ministic encoding of s<t and a<t. To infer the agent states from past observations and actions, a
variational encoder is introduced:
TT
q(s1:T	|	o1:T, a1:T) =	q(st	| s<t,	a<t,	ot)	=	q(st	|	ht, ot)	.	(3)
t=1	t=1
2
Under review as a conference paper at ICLR 2022
The training objective is to maximize the evidence lower bound (ELBO):
T
JDREAMER =EEq[logp(θt | ht,st)+logp(rt | ht,st) - DκL(q(st | ht,0t) k p(st | ht))] . (4)
M '---------{------} '------{------} '------------{------------}
JOt	JRt	JKt L
2.2	Policy learning by latent imagination
Dreamer interleaves policy learning with world model learning. During policy learning, the world
model is fixed, and an actor and a critic are trained cooperatively from the latent trajectories imagined
by the world model. Specifically, the imagination starts at each non-terminal state Zt = [ht, st]
encountered during world model learning. Then, at each imagination step t0 ≥ t, an action is
sampled from the actor,s stochastic policy: 6用 〜∏(ato | ^to). The corresponding reward 孔，+1
and next state Zt，+i are predicted by the learned world model. Given the imagined trajectories, the
actor improves its policy by maximizing the λ-return (Sutton & Barto, 2018; Schulman et al., 2018)
plus an entropy regularizer that encourages exploration, while the critic is trained to approximate
the λ-return through a squared loss.
3	DreamerPro
To compute the DREAMER training objective, more specifically JOt in Equation 4, a decoder is
required to reconstruct the image observation ot from the state zt = [ht , st]. Because this recon-
struction loss operates in pixel space where all pixels are weighted equally, Dreamer tends to
allocate most of its capacity to modeling complex visual patterns that cover a large pixel area (e.g.,
backgrounds). This leads to poor task performance when those visual patterns are task irrelevant, as
shown in previous work (Nguyen et al., 2021).
Fortunately, during policy learning, what we need is accurate reward and next state prediction, which
are respectively encouraged by JRt and JKt L . In other words, the decoder is not required for pol-
icy learning. The main purpose of having the decoder and the associated loss JOt , as shown in
DREAMER, is to learn meaningful representations that cannot be obtained by JRt and JKtL alone.
The above observations motivate us to improve robustness to visual distractions by replacing the
reconstruction-based representation learning in Dreamer with reconstruction-free methods. For
this, we take inspiration from recent developments in self-supervised image representation learning,
which can be divided into contrastive (van den Oord et al., 2019; Chen et al., 2020; He et al., 2020)
and non-contrastive (Grill et al., 2020; Caron et al., 2020) methods. We prefer non-contrastive
methods as they can be applied to small batch sizes. This can speed up both world model learning
and policy learning (in wall clock time). Therefore, we propose to combine Dreamer with the
prototypical representations used in SwAV (Caron et al., 2020), a top-performing non-contrastive
representation learning method. We name the resulting model DreamerPro, and provide the
model description in the following.
DreamerPro uses the same policy learning algorithm as Dreamer, but learns the world model
without reconstructing the observations. This is achieved by clustering the observation into a set of
K trainable prototypes {c1, . . . , cK}, and then predicting the cluster assignment from the state as
well as an augmented view of the observation. See Figure 1 for an illustration.
Concretely, given a sequence of observations o1:T sampled from the replay buffer, we obtain two
augmented views o(11:T) , o(12:T) by applying random shifts (Laskin et al., 2020b; Yarats et al., 2021c)
with bilinear interpolation (Yarats et al., 2021a). We ensure that the augmentation is consistent
across time steps. Each view i ∈ {1, 2} is fed to the RSSM to obtain the states z1(i:T) . To predict
the cluster assignment from z(i), We first apply a linear projection followed by '2-normalization to
obtain a vector x(ti) of the same dimension as the prototypes, and then take a softmax over the dot
products of x(ti) and all the prototypes:
(5)
3
Under review as a conference paper at ICLR 2022
Projections
Probabilities
Figure 1: DreamerPro learns the world model through online clustering, eliminating the need for
reconstruction. At each time step t, it first compares the observation to a set of trainable prototypes
{c1 , . . . , cK} to obtain the target cluster assignment wt. Then, it predicts this target from both
the world model state zt and another augmented view of the observation (each aug(ot) denotes an
independent application of data augmentation). The predictions are improved by optimizing the
two objective terms, JTtemp and JStWAV , respectively, where the first term crucially distills temporal
structures from zt into the prototypes.
(i)	(i)
Here, ut,k is the predicted probability that state zt maps to cluster k, τ is a temperature parameter,
and the prototypes {cι,...,cκ } are also '2-normalized.
Analogously, to predict the cluster assignment from an augmented observation ot(i), we feed it
to a convolutional encoder (shared with the RSSM), apply a linear projection followed by `2-
normalization, and obtain a vector yt(i). We summarize this process as: yt(i) = fθ(ot(i)), where θ
collectively denotes the parameters of the convolutional encoder and the linear projection layer. The
prediction probabilities are again given by a softmax:
(i)	(i)
(v(i),..., v(iK) = SoftmaX ( yt T "，…，yt T CK )，	⑹
(i)	(i)
where vt,k is the predicted probability that observation ot maps to cluster k.
To obtain the targets for the above two predictions (i.e., Equations 5 and 6), we apply the Sinkhorn-
Knopp algorithm (Cuturi, 2013) to the cluster assignment scores computed from the output of a
momentum encoder fθ (He et al., 2020; Grill et al., 2020; Caron et al., 2021), whose parameters θ
are updated using the exponential moving average of θ: G J (1 - η)θθ + ηθ. For each observation
Oti), the scores are given by the dot products (y(i ∙ cι,... ,y(i) ∙ CK), where y(i) = f^(o(i)) is
the momentum encoder output. The Sinkhorn-Knopp algorithm is applied to the two augmented
batches {o(11:T) }, {o(12:T) } separately to encourage uniform cluster assignment within each augmented
batch and avoid trivial solutions. We specifically choose the number of prototypes K = B × T ,
where B is the batch size, so that the observation embeddings are implicitly pushed apart from
each other. The outcome of the Sinkhorn-Knopp algorithm is a set of cluster assignment targets
(wt(,i1) , . . . , wt(,iK) ) for each observation o(ti) .
4
Under review as a conference paper at ICLR 2022
Now that we have the cluster assignment predictions and targets, the representation learning objec-
tive is simply to maximize the prediction accuracies:
K
Jt =	1	X	(W(I)	log∙ V⑵	+	W⑵ log∙ v(>
JSWAV =	2	/ w	<wt,k	log vt,k	+	wt,k log vt,k J	，
K
Jt =	1	X	(,”⑴]op∙ V(I)	+?”(2)]op∙ V⑵)
JTemP =	2	2{wt,k	log ut,k	+	wt,k log ut,k J	.
(7)
(8)
Here, JStWAV improves prediction from an augmented view. This is the same loss as used in SWAV
(Caron et al., 2020), and is shown to induce useful features for static images. However, it ignores
the temporal structure which is crucial in reinforcement learning. Hence, we add a second term,
JTtemP, that improves prediction from the state of the same view. This has the effect of making
the prototypes close to the states that summarize the past observations and actions, thereby distilling
temporal structure into the prototypes. From another perspective, JTtemP is similar to JOt in the sense
that we are now ‘reconstructing’ the cluster assignment of the observation instead of the observation
itself. This frees the world model from modeling complex visual details, allowing more capacity to
be devoted to task-relevant features.
The overall world model learning objective for DREAMERPRO can be obtained by replacing JOt in
Equation 4 with JStWAV + JTtemP :
T
JDREAMERPRO = X Eq[JStWAV + JTtemP + JRt - JKtL] ,
t=1
where JRt and JKtL are now averaged over the two augmented views.
(9)
4	Experiments
Environments. We evaluate our model and the baselines on six image-based continuous control
tasks from the DeepMind Control (DMC) suite (Tassa et al., 2018). We choose the set of tasks based
on those considered in PlaNet (Hafner et al., 2019). Specifically, we replace Cartpole Swingup
and Walker Walk with their more challenging counterparts, Cartpole Swingup Sparse and Walker
Run, and keep the remaining tasks. In addition to the standard setting, we also consider a natural
background setting (Zhang et al., 2021; Nguyen et al., 2021), where the background is replaced
by task-irrelevant natural videos randomly sampled from the ‘driving car’ class in the Kinetics 400
dataset (Kay et al., 2017). Following TPC (Nguyen et al., 2021), we use two separate sets of
background videos for training and evaluation. Hence, the natural background setting tests gener-
alization to unseen distractions. We note that the recently released Distracting Control Suite (DCS,
Stone et al., 2021) serves a similar purpose. However, the background distractions in DCS seem less
challenging, as there are fewer videos and the ground plane is made visible for most tasks. In our
preliminary experiments, our model and all the baselines achieved close to zero returns on Cartpole
Swingup Sparse in the natural background setting. We therefore switch back to Cartpole Swingup
in this setting.
Baselines. Our main baselines are DREAMER (Hafner et al., 2021), DREAMING (Okada &
Taniguchi, 2021), and TPC (Nguyen et al., 2021), the state-of-the-art for reconstruction-based and
reconstruction-free MBRL. In particular, TPC has shown better performance than CVRL (Ma et al.,
2020), DBC (Zhang et al., 2021), and CURL (Laskin et al., 2020a) on the same datasets. The re-
cently proposed PSE (Agarwal et al., 2021) has demonstrated impressive results on DCS. However,
it is only shown to work in the model-free setting and requires a pretrained policy, while our model
learns both the world model and the policy from scratch.
Implementation details. We implement our model and DREAMING based on a newer version
of Dreamer1, while the official implementation of TPC2 is based on an older version. For fair
1https://github.com/danijar/dreamerv2/tree/e783832f01b2c845c195587158c4
e129edabaebb
2https://github.com/VinAIResearch/TPC-tensorflow
5
Under review as a conference paper at ICLR 2022
——DreamerPro ——Dreamer ——Dreaming ——TPC
Figure 2: Performance curves in standard DMC. DreamerPro is the only model that is comparable
or better than Dreamer on all tasks. In particular, DreamerPro greatly outperforms Dreamer
on Finger Spin and Reacher Easy, and achieves better data efficiency on Cup Catch.
Table 1: Final performance in standard DMC.
Task	Dreamer	Dreaming	TPC	DreamerPro
Cartpole SWingup Sparse	820 ± 23	830 ± 12	770 ± 9	813±32
Cheetah Run	840 ± 74	745 ± 18	782 ± 82	897 ± 8
Cup Catch	967 ± 3	965 ± 13	948 ± 7	961 ± 10
Finger Spin	559 ± 54	722 ± 197	524 ± 127	811 ± 232
Reacher Easy	721 ± 51	975 ± 2	503 ± 185	873 ± 127
Walker Run	737 ± 26	422 ± 25	222 ± 29	784 ± 28
comparison, we re-implement TPC based on the newer version. We adopt the default values for the
DREAMER hyperparameters, except that We use continuous latents and tanh_normal as the distri-
bution output by the actor. We find these changes improve Dreamer’s performance in the standard
DMC, and therefore use these values for all models in both the standard and the natural background
setting. FolloWing TPC, We increase the Weight of the reWard loss JRt to 1000 for all models in
the natural background setting to further encourage extraction of task-relevant information. While
in the original TPC, this Weight is chosen separately for each task from {100, 1000}, We find the
Weight of 1000 Works consistently better in our re-implementation, Which also obtains better results
than reported in the original paper. We use the default batch size of 50 for Dreamer, Dreaming,
and DreamerPro. The batch size for TPC is chosen to be 150, so that it has similar Wall clock
training time as DreamerPro.
Evaluation protocol. For each task, We train each model for 1M environment steps (equivalent to
500K actor steps, as the action repeat is set to 2). The evaluation return is computed every 10K
steps, and averaged over 10 episodes. In all figures and tables, the mean and standard deviation are
computed from 3 independent runs.
4.1	Performance in standard DMC
We shoW the performance curves in Figure 2 and the final performance in Table 1 for the standard
setting. DreamerPro is the only model that achieves comparable or even better performance
than Dreamer on all tasks. Notably, DreamerPro outperforms Dreamer by a large margin on
6
Under review as a conference paper at ICLR 2022
Finger Spin	Reacher Easy
ιooo-
750-
500-
250-
o-
0.0 0.2 0.4 0.6 0.8 1.0	0.0 0.2 0.4 0.6 0.8 1.0	0.0 0.2 0.4 0.6 0.8 1.0
le6	le6	le6
——DreamerPro ——Dreamer ——Dreaming ——TPC ——TPC-Batch-300
Figure 3: Performance curves in natural background DMC. DreamerPro significantly outper-
forms all baselines on Cartpole Swingup, Finger Spin, and Walker Run, while Dreamer completely
fails on all tasks.
Table 2: Final performance in natural background DMC.
Task	Dreamer	Dreaming	TPC	TPC-Batch-300	DreamerPro
Cartpole Swingup	126 ± 16	332 ± 66	521 ± 80	479 ± 45	671 ± 42
Cheetah Run	30 ± 2	334 ± 17	444 ± 35	477 ± 16	349 ± 61
Cup Catch	88 ± 73	553 ± 60	477 ± 175	550 ± 69	493 ± 109
Finger Spin	10±1	629 ± 207	655 ± 133	511 ± 115	826 ± 162
Reacher Easy	82 ± 39	400 ± 296	462 ± 130	614 ± 164	641 ± 123
Walker Run	35 ± 4	219±9	161±6	136±17	394 ± 33
Finger Spin and Reacher Easy, and demonstrates better data efficiency on Cup Catch. We notice a
large variance in DreamerPro’s performance on Finger Spin. Further investigation reveals that
DREAMERPRO learned close to optimal behavior (with average episode returns above 950) on two
of the seeds, while converged to a suboptimal behavior (with average episode returns around 500)
on the other seed. The low variance of Dreamer indicates that it hardly achieved close to optimal
behavior. Our results suggest for the first time that prototypical representations (and reconstruction-
free representation learning in general) can be beneficial to MBRL even in the absence of strong
visual distractions.
4.2	Performance in natural background DMC
Figure 3 and Table 2 respectively show the performance curves and final evaluation returns obtained
by all models in the natural background setting. Dreamer completely fails on all tasks, showing the
inability of reconstruction-based representation learning to deal with complex visual distractions. In
contrast, DreamerPro achieves the best performance on 4 out of 6 tasks, with large performance
gains from baselines on Cartpole Swingup, Finger Spin, and Walker Run. We additionally train TPC
with a batch size of 300 (denoted TPC-Batch-300), and DreamerPro is still able to outperform
it on 4 out of 6 tasks. These results indicate that the advantage of prototypical representations over
contrastive learning in computer vision can indeed be transferred to MBRL for better robustness to
visual distractions.
7
Under review as a conference paper at ICLR 2022
Figure 4: Visualization of learned latent states through reconstruction from an auxiliary decoder.
The first row shows the input images, and the remaining rows show the reconstruction from the
RSSM state zt for each model.
4.3	Visualization and analysis
To better understand how the model works and explain the performance gaps, we visualize the
learned latent states through reconstruction from an auxiliary decoder (Figure 4).
Figure 4 (Left) shows the reconstructions for Cup Catch after 100K environment steps. Note that
the reconstruction of the ball is only possible from the states learned by DreamerPro, explaining
its better data efficiency. Dreamer fails to reconstruct the ball at this early stage, probably because
the ball takes only a few pixels, lowering its priority in the reconstruction loss.
Figure 4 (Right) shows the reconstructions for Walker Run after 1M environment steps. We see
that both Dreamer and DreamerPro capture some information of the background, but only
DreamerPro is able to recover the posture of the Walker. The reconstruction from TPC does
not seem relevant to the Walker or the background. This indicates that while TPC may be better at
discarding distractors, DreamerPro is better at retaining task-relevant information.
4.4	Ablation study
We now show the individual effect of the two loss terms, JStWAV and JTtemp, in Figure 6. Here,
each of the ablated versions, DreamerPro-No-SwAV and DreamerPro-No-Temp, removes one of the
loss terms. We did not investigate removing both terms, as its failure has been shown in Dreamer
(Hafner et al., 2020). We train the ablated versions in natural background DMC, and observe that
both terms are necessary for achieving good performance. In particular, naively combining SwAV
with Dreamer (i.e., DreamerPro-No-Temp) leads to inferior performance, as it ignores the tem-
poral structure. On the other hand, JTtemp alone is not sufficient to provide meaningful cluster
assignment targets and learning signals for the convolutional encoder.
5	Related work
Self-supervised representation learning for static images. Recent works in self-supervised
learning have shown its effectiveness in learning representations from high-dimensional data.
CPC (van den Oord et al., 2019) learns representations by maximizing the mutual information
between the encoded representations and its future prediction using noise-contrastive estimation.
SimCLR (Chen et al., 2020) shows that the contrastive data can be generated using the data in the
training mini-batch by applying random augmentations. MoCo (He et al., 2020), on the other hand,
improves the contrastive training by generating the representations from a momentum encoder in-
stead of the trained network. Despite the success in some tasks, one weakness of the contrastive
approaches is that it require the model to compare a larger amount of samples, which demands
large batch sizes or memory banks. To address this problem, some works propose to learn the
image representations without discriminating between samples. Particularly, BYOL (Grill et al.,
8
Under review as a conference paper at ICLR 2022
2020) introduces a momentum encoder to provide target representations for the training network.
SwAV (Caron et al., 2020) proposes to learn the embeddings by matching them to a set of learned
clusters. DINO (Caron et al., 2021) replaces the clusters in SwAV with categorical heads and uses
the centering and sharpening technique to prevent representations collapsing. Unlike our model,
these works treat each image independently and ignore the temporal structure of the environment,
which is crucial in learning the forward dynamics and policy in MBRL.
Representation learning for model-free reinforcement learning. It has been shown that adopt-
ing data augmentation techniques like random shifts in the observation space enables robust learn-
ing from pixel input in any model-free reinforcement learning algorithm (Laskin et al., 2020b;
Yarats et al., 2021c;a). Recent works have also shown that self-supervised representation learn-
ing techniques can bring significant improvement to reinforcement learning methods. For example,
CURL (Laskin et al., 2020a) performs contrastive learning along with off-policy RL algorithms
and shows that it significantly improves sample-efficiency and model performance over pixel-based
methods. Other works aim to improve the representation learning quality by combining temporal
prediction models in the representation learning process (Schwarzer et al., 2021a;b; Stooke et al.,
2021; Yarats et al., 2021b; Guo et al., 2020; Gregor et al., 2019). However, the main purpose of
the temporal prediction models in these works is mainly to obtain the abstract representations of the
observations, and they are not shown to support long-horizon imagination.
Model-based reinforcement learning with reconstruction. Model based reinforcement learning
from raw pixel data can learn the representation space by minimizing the observation reconstruction
loss. World Models (Ha & Schmidhuber, 2018) learn the latent dynamics of the environment in
a two-stage process to evolve their linear controllers in imagination. SOLAR (Zhang et al., 2019)
models the dynamics as time-varying linear-Gaussian and solves robotic tasks via guided policy
search. Dreamer (Hafner et al., 2020) jointly learns the RSSM and latent state space from obser-
vation reconstruction loss. DeepMDP (Gelada et al., 2019) also propose a latent dynamics model-
based method that uses bisimulation metrics and reconstruction loss in Atari. However, reconstruc-
tion based methods are susceptible to noise and objects irrelevant to the task in the environment
(Nguyen et al., 2021). Furthermore, in a few cases, the latent representation fails to reconstruct
small task-relevant objects in the environment (Okada & Taniguchi, 2021).
Reinforcement learning under visual distractions. A large body of works on robust representation
learning focuses on contrastive objectives. For example, CVRL (Ma et al., 2020) proposes to learn
representations from complex observations by maximizing the mutual information between an im-
age and its corresponding embedding using contrastive objectives. However, the learning objective
of CVRL encourages the representation model to learn as much information as possible, includ-
ing task-irrelevant information. Dreaming (Okada & Taniguchi, 2021) and TPC (Nguyen et al.,
2021) tackle this problem by incorporating a dynamic model and applying contrastive learning in
the temporal dimension, which encourages the model to capture controllable and predictable infor-
mation in the latent space. Bisimulation metrics method such as DBC (Zhang et al., 2021) and PSE
(Agarwal et al., 2021) is another type of representation learning robust to visual distractions. Using
the bisimulation metrics that quantify the behavioral similarity between states, these methods make
the mode robust to task-irrelevant information. However, DBC cannot generalize to unseen back-
grounds (Nguyen et al., 2021), and PSE is only shown to work in the model-free setting and requires
a pre-trained policy to compute the similarity metrics, while our model learns both the world model
and the policy from scratch.
6 Conclusion
In this work, we presented the first reconstruction-free MBRL agent based on the prototypical rep-
resentation and its temporal dynamics. In experiments, we demonstrated the consistently improved
accuracy and robustness of the proposed model in comparison to the Temporal Predictive Coding
(TPC) agent and the Dreamer agent for both standard and natural background DMC tasks. Our
results suggest that there are unexplored broad areas in reconstruction-free MBRL. Interesting fu-
ture directions are to apply this model on Atari games and to investigate the possibility of learning
hierarchical structures such as skills without reconstruction.
9
Under review as a conference paper at ICLR 2022
References
Rishabh Agarwal, Marlos C. Machado, Pablo Samuel Castro, and Marc G Bellemare. Contrastive
behavioral similarity embeddings for generalization in reinforcement learning. In International
Conference on Learning Representations, 2021.
Yuri Burda, Harrison Edwards, Amos Storkey, and Oleg Klimov. Exploration by random network
distillation. arXiv preprint arXiv:1810.12894, 2018.
Mathilde Caron, Ishan Misra, Julien Mairal, Priya Goyal, Piotr Bojanowski, and Armand Joulin.
Unsupervised learning of visual features by contrasting cluster assignments. In H. Larochelle,
M. Ranzato, R. Hadsell, M. F. Balcan, and H. Lin (eds.), Advances in Neural Information Pro-
cessing Systems, volume 33, pp. 9912-9924. Curran Associates, Inc., 2020.
Mathilde Caron, Hugo Touvron, Ishan Misra, Herve Jegou, Julien Mairal, Piotr BojanoWski, and
Armand Joulin. Emerging properties in self-supervised vision transformers, 2021.
Ting Chen, Simon Kornblith, Mohammad Norouzi, and Geoffrey Hinton. A simple frameWork for
contrastive learning of visual representations. In Hal Daume In and Aarti Singh (eds.), Proceed-
ings of the 37th International Conference on Machine Learning, volume 119 of Proceedings of
Machine Learning Research, pp. 1597-1607. PMLR, 13-18 Jul 2020.
Marco Cuturi. Sinkhorn distances: Lightspeed computation of optimal transport. In C. J. C. Burges,
L. Bottou, M. Welling, Z. Ghahramani, and K. Q. Weinberger (eds.), Advances in Neural Infor-
mation Processing Systems, volume 26. Curran Associates, Inc., 2013.
Carles Gelada, Saurabh Kumar, Jacob Buckman, Ofir Nachum, and Marc G. Bellemare. DeepMDP:
Learning continuous latent space models for representation learning. In Kamalika Chaudhuri
and Ruslan Salakhutdinov (eds.), Proceedings of the 36th International Conference on Machine
Learning, volume 97 of Proceedings of Machine Learning Research, pp. 2170-2179. PMLR,
09-15 Jun 2019.
Karol Gregor, Danilo Jimenez Rezende, Frederic Besse, Yan Wu, Hamza Merzic, and Aaron
van den Oord. Shaping belief states With generative environment models for rl. In H. Wal-
lach, H. Larochelle, A. Beygelzimer, F. d'Alche—Buc, E. Fox, and R. Garnett (eds.), Advances in
Neural Information Processing Systems, volume 32. Curran Associates, Inc., 2019.
Jean-Bastien Grill, Florian Strub, Florent Altche, Corentin Tallec, Pierre Richemond, Elena
Buchatskaya, Carl Doersch, Bernardo Avila Pires, Zhaohan Guo, Mohammad Gheshlaghi Azar,
Bilal Piot, koray kavukcuoglu, Remi Munos, and Michal Valko. Bootstrap your oWn latent - a neW
approach to self-supervised learning. In H. Larochelle, M. Ranzato, R. Hadsell, M. F. Balcan, and
H. Lin (eds.), Advances in Neural Information Processing Systems, volume 33, pp. 21271-21284.
Curran Associates, Inc., 2020.
Zhaohan Daniel Guo, Bernardo Avila Pires, Bilal Piot, Jean-Bastien Grill, Florent Altche, Remi
Munos, and Mohammad Gheshlaghi Azar. Bootstrap latent-predictive representations for multi-
task reinforcement learning. In Hal DaUme In and Aarti Singh (eds.), Proceedings of the 37th
International Conference on Machine Learning, volume 119 of Proceedings of Machine Learning
Research, pp. 3875-3886. PMLR, 13-18 Jul 2020.
David Ha andJurgen Schmidhuber. Recurrent world models facilitate policy evolution. In S. Bengio,
H. Wallach, H. Larochelle, K. Grauman, N. Cesa-Bianchi, and R. Garnett (eds.), Advances in
Neural Information Processing Systems, volume 31. Curran Associates, Inc., 2018.
Danijar Hafner, Timothy Lillicrap, Ian Fischer, Ruben Villegas, David Ha, Honglak Lee, and James
Davidson. Learning latent dynamics for planning from pixels. In Kamalika Chaudhuri and Ruslan
Salakhutdinov (eds.), Proceedings of the 36th International Conference on Machine Learning,
volume 97 of Proceedings of Machine Learning Research, pp. 2555-2565. PMLR, 09-15 Jun
2019.
Danijar Hafner, Timothy Lillicrap, Jimmy Ba, and Mohammad Norouzi. Dream to control: Learning
behaviors by latent imagination. In International Conference on Learning Representations, 2020.
10
Under review as a conference paper at ICLR 2022
Danijar Hafner, Timothy P Lillicrap, Mohammad Norouzi, and Jimmy Ba. Mastering atari with
discrete world models. In International Conference on Learning Representations, 2021.
Kaiming He, Haoqi Fan, Yuxin Wu, Saining Xie, and Ross Girshick. Momentum contrast for
unsupervised visual representation learning. In Proceedings of the IEEE/CVF Conference on
Computer Vision and Pattern Recognition (CVPR), June 2020.
Max Jaderberg, Volodymyr Mnih, Wojciech Marian Czarnecki, Tom Schaul, Joel Z Leibo, David
Silver, and Koray Kavukcuoglu. Reinforcement learning with unsupervised auxiliary tasks. arXiv
preprint arXiv:1611.05397, 2016.
Lukasz Kaiser, Mohammad Babaeizadeh, Piotr Milos, Blazej Osinski, Roy H Campbell, Konrad
Czechowski, Dumitru Erhan, Chelsea Finn, Piotr Kozakowski, Sergey Levine, et al. Model-based
reinforcement learning for atari. arXiv preprint arXiv:1903.00374, 2019.
Will Kay, Joao Carreira, Karen Simonyan, Brian Zhang, Chloe Hillier, Sudheendra Vijaya-
narasimhan, Fabio Viola, Tim Green, Trevor Back, Paul Natsev, Mustafa Suleyman, and Andrew
Zisserman. The kinetics human action video dataset, 2017.
Michael Laskin, Aravind Srinivas, and Pieter Abbeel. CURL: Contrastive unsupervised representa-
tions for reinforcement learning. In Hal Daume In and Aarti Singh (eds.), Proceedings ofthe 37th
International Conference on Machine Learning, volume 119 of Proceedings of Machine Learning
Research,pp. 5639-5650. PMLR, 13-18 Jul 2020a.
Misha Laskin, Kimin Lee, Adam Stooke, Lerrel Pinto, Pieter Abbeel, and Aravind Srinivas. Re-
inforcement learning with augmented data. In H. Larochelle, M. Ranzato, R. Hadsell, M. F.
Balcan, and H. Lin (eds.), Advances in Neural Information Processing Systems, volume 33, pp.
19884-19895. Curran Associates, Inc., 2020b.
Xiao Ma, Siwei Chen, David Hsu, and Wee Sun Lee. Contrastive variational reinforcement learning
for complex observations, 2020.
Tung D Nguyen, Rui Shu, Tuan Pham, Hung Bui, and Stefano Ermon. Temporal predictive coding
for model-based planning in latent space. In Marina Meila and Tong Zhang (eds.), Proceedings of
the 38th International Conference on Machine Learning, volume 139 of Proceedings of Machine
Learning Research, pp. 8130-8139. PMLR, 18-24 Jul 2021.
Masashi Okada and Tadahiro Taniguchi. Dreaming: Model-based reinforcement learning by latent
imagination without reconstruction, 2021.
Julian Schrittwieser, Ioannis Antonoglou, Thomas Hubert, Karen Simonyan, Laurent Sifre, Simon
Schmitt, Arthur Guez, Edward Lockhart, Demis Hassabis, Thore Graepel, et al. Mastering atari,
go, chess and shogi by planning with a learned model. Nature, 588(7839):604-609, 2020.
John Schulman, Philipp Moritz, Sergey Levine, Michael Jordan, and Pieter Abbeel. High-
dimensional continuous control using generalized advantage estimation, 2018.
Max Schwarzer, Ankesh Anand, Rishab Goel, R Devon Hjelm, Aaron Courville, and Philip Bach-
man. Data-efficient reinforcement learning with self-predictive representations. In International
Conference on Learning Representations, 2021a.
Max Schwarzer, Nitarshan Rajkumar, Michael Noukhovitch, Ankesh Anand, Laurent Charlin, De-
von Hjelm, Philip Bachman, and Aaron Courville. Pretraining representations for data-efficient
reinforcement learning, 2021b.
Austin Stone, Oscar Ramirez, Kurt Konolige, and Rico Jonschkowski. The distracting control suite
- a challenging benchmark for reinforcement learning from pixels, 2021.
Adam Stooke, Kimin Lee, Pieter Abbeel, and Michael Laskin. Decoupling representation learning
from reinforcement learning. In Marina Meila and Tong Zhang (eds.), Proceedings of the 38th
International Conference on Machine Learning, volume 139 of Proceedings of Machine Learning
Research, pp. 9870-9879. PMLR, 18-24 Jul 2021.
11
Under review as a conference paper at ICLR 2022
Richard S Sutton. Dyna, an integrated architecture for learning, planning, and reacting. ACM Sigart
Bulletin, 2(4):160-163,1991.
Richard S Sutton and Andrew G Barto. Reinforcement learning: An introduction. MIT press, 2018.
Richard S Sutton, Joseph Modayil, Michael Delp, Thomas Degris, Patrick M Pilarski, Adam White,
and Doina Precup. Horde: A scalable real-time architecture for learning knowledge from unsu-
pervised sensorimotor interaction. In The 10th International Conference on Autonomous Agents
and Multiagent Systems-Volume 2, pp. 761-768, 2011.
Yuval Tassa, Yotam Doron, Alistair Muldal, Tom Erez, Yazhe Li, Diego de Las Casas, David Bud-
den, Abbas Abdolmaleki, Josh Merel, Andrew Lefrancq, Timothy Lillicrap, and Martin Ried-
miller. Deepmind control suite, 2018.
Aaron van den Oord, Yazhe Li, and Oriol Vinyals. Representation learning with contrastive predic-
tive coding, 2019.
Denis Yarats, Rob Fergus, Alessandro Lazaric, and Lerrel Pinto. Mastering visual continuous con-
trol: Improved data-augmented reinforcement learning, 2021a.
Denis Yarats, Rob Fergus, Alessandro Lazaric, and Lerrel Pinto. Reinforcement learning with pro-
totypical representations. In Marina Meila and Tong Zhang (eds.), Proceedings of the 38th In-
ternational Conference on Machine Learning, volume 139 of Proceedings of Machine Learning
Research, pp. 11920-11931. PMLR, 18-24 Jul 2021b.
Denis Yarats, Ilya Kostrikov, and Rob Fergus. Image augmentation is all you need: Regularizing
deep reinforcement learning from pixels. In International Conference on Learning Representa-
tions, 2021c.
Amy Zhang, Rowan Thomas McAllister, Roberto Calandra, Yarin Gal, and Sergey Levine. Learn-
ing invariant representations for reinforcement learning without reconstruction. In International
Conference on Learning Representations, 2021.
Marvin Zhang, Sharad Vikram, Laura Smith, Pieter Abbeel, Matthew Johnson, and Sergey Levine.
SOLAR: Deep structured representations for model-based reinforcement learning. In Kamalika
Chaudhuri and Ruslan Salakhutdinov (eds.), Proceedings of the 36th International Conference on
Machine Learning, volume 97 of Proceedings of Machine Learning Research, pp. 7444-7453.
PMLR, 09-15 Jun 2019.
A Hyperparameters
For hyperparameters that are shared with Dreamer, we use the default values suggested in
the config file in the official implementation of Dreamer, with the following two exceptions.
We set rssm.discrete = False and actor.dist = tanh_normal, as We find these
changes improve performance over the default setting. The additional hyperparameters introduced
in DreamerPro are listed in Table 3. We find it helpful to freeze the prototypes for the first
10K gradient updates. In the natural background setting, We add a squared loss that encourages the
'2-norm of projections (before '2-normalization) to be close to 1. This helps stabilize the model.
Table 3: Additional hyperparameters in DreamerPro.
Hyperparameter	Value
Number of prototypes K	2500
Prototype dimension	32
Softmax temperature τ	0.1
Sinkhorn iterations	3
Sinkhorn epsilon	0.0125
Momentum update fraction η	0.05
12
Under review as a conference paper at ICLR 2022
B Nearest neighbor queries in latent space
Figure 5: Visualization of learned latent states through nearest neighbor queries.
We sample a batch of trajectories from the training replay buffer, and obtain the latent state for each
image. Then, given a query image, we show the three images in the batch whose latent states are the
closest to the query image. We use the same batch and same query images for all models.
For TPC, the nearest neighbors tend to contain different backgrounds, but the agent’s states can also
be very different (See Cup Catch and Walker Run). On the other hand, the nearest neighbors for
DreamerPro tend to have similar backgrounds and also similar agent states.
Our results suggest that DreamerPro and TPC work in quite different ways. DreamerPro tries
to retain task-relevant information at the cost of also including some distractors, while TPC focuses
more on discarding distractors. An interesting future direction is to simultaneously consider these
two factors and achieve a better balance.
13
Under review as a conference paper at ICLR 2022
C Ablation results
Cartpole Swingup
Cheetah Run
ie6
Walker Run
400-
300-
200-
IOO-
o -
0.0 0.2 0.4 0.6 0.8 1.0
le6
——DreamerPro ——DreamerPro-No-SwAV ——DreamerPro-No-Temp
Figure 6:	Ablation study. Both JStWAV and JTtemp are necessary for achieving good performance.
D Atari results
Bank Heist
Enduro
Name This Game
15000 -
ιoooo -
5000-
Skiing
Seaquest
0	2	4	6	8
le7
——DreamerPro ——Dreamer -- IQN@200M -= RainbOW@200M
Figure 7:	Performance curves in six Atari games.
To show the potential of DreamerPro to leverage the benefits of world models and discrete latents
in complex environments, we train DreamerPro on a subset of six Atari games for 25M, 50M,
and 80M environment steps depending on the convergence speed of Dreamer on these games. We
freeze the prototypes for 30K gradient updates. The weights for reward and KL losses are 100 and
1, respectively. We additionally replace the linear projection layer from zt to xt by an MLP with
one hidden layer of size 600. All other hyperparameters are kept as default.
14
Under review as a conference paper at ICLR 2022
On 4 out of the 6 games, DreamerPro obtains comparable performance to Dreamer, matching
or surpassing model-free baselines that are trained for 200M environment steps. We note that this
is the first time a reconstruction-free MBRL agent shows promising results on Atari with discrete
latents.
E Prototype visualizations
We visualize the first 5 prototypes learned for each task using nearest neighbor queries, shown in
each row of Figures 8 - 13. To do so, we sample a batch of trajectories from the training replay
buffer, and obtain the projection xt from latent state zt for each image. Then, given a prototype ck
as query, we show the ten images in the batch whose projections are the closest to the prototype.
Figure 8: Prototype visualization for Cartpole Swingup.
Figure 9: Prototype visualization for Cheetah Run.
15
Under review as a conference paper at ICLR 2022
Figure 10: Prototype visualization for Cup Catch.
16
Under review as a conference paper at ICLR 2022
Figure 13: Prototype visualization for Walker Run.
17