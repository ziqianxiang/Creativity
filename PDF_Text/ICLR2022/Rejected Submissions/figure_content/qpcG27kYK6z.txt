Figure 1: Example architecture with three concentric spheres. Graph convolutions are followed byradial convolutions, at each level of spherical resolution. Radial convolution (in this example) hasspatial window of three co-radial vertices, with padding applied to maintain radial dimensions acrossconvolutions. Each arrow indicates vertex neighborhood pooling and downsampling, after whichconvolutions proceed with new filters at coarser spatial resolution. Global pooling is applied to obtainfinal feature representation.
Figure 2: Illustrative example of converting point cloud to input features. (a) shows an example pointcloud (black points) contained within a bounding sphere. (b) The spherical volume is partitioned into6 concentric spheres, co-radially. (c) Each point has a contribution to vertices in a local neighborhood(gray circles), resulting in (d) single channel feature per vertex (gray square). (e) Co-radial verticesare further grouped, resulting in smaller subset of concentric spheres with multi-channel inputs. Inthis example, grouping results in 3 concentric spheres where vertices have 2 input channels each.
Figure 3: (a) The icosahedral grid is formed by vertices of equilateral triangles (left), which can berecursively sub-divided to form a higher resolution grid (middle). This also defines a natural vertexneighborhood and hierarchy for pooling and downsampling, where yellow highlighted vertices (right)are involved in pooling. (b) Two spherical grids are stacked, corresponding to consecutive concentricspheres. Graph convolution involves vertices within the same sphere (convolution neighborhoodhighlighted orange). Conversely, radial convolution involves co-radial vertices between the twospheres (green dotted line).
Figure 4: Architecture for ModelNet40 classification. Number of output channels are shown foreach layer, where applicable. L = 4 is initial level of discretization of icosahedral spheres. Radialconvolution uses kernel size of 3 for spatial size (co-radial vertices).
Figure 5: Illustrations of each type of carbon structure present in the dataset. They fall under threegeometric classes: sheet-like (graphene, graphite), cylindrical (C(6,4), C(9,9), C(8,0)), and spherical(C20, C40, C60).
Figure 6: From left to right: each atom’s local atomic environment is a point cloud, and the input forour proposed model. CSGNN (shared across inputs) learns a descriptor as output, which is mappedthrough additional dense layers and 1D convolution to predict atom-wise DOS contribution. Allatoms’ contributions are summed to obtain total DOS.
Figure 7: Architecture for DOS prediction. Number of output channels are shown for each layer,where applicable. L = 3 is initial icosahedral spherical resolution. 1x1 convolution is applied withinchannels, without spatial component. 1D convolution is applied to smooth the predicted DOS curve,represented by output energy bins.
