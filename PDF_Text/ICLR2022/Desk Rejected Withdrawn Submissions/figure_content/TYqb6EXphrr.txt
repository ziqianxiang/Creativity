Figure 1: The overview of our framework. Assuming a constant-size memory with K slots, ourframework consists 2 stages. 1) Memory Update: in this stage, the network generates a new featuremap Xt based on the current frame with the corresponding masks using the memory encoder. Thisfeature map is then used to update the memory (Sec. 3.2). 2) Inference stage: a feature map Xtq+1 isgenerated from the query image using the query encoder and goes through the space-time memoryread module to access the memory and retrieve object-related information to create a new featuremap. This feature map is finally decoded into our predicted mask (which will be then used to updatethe memory again). (Best viewed in color)sands of frames. In this paper, we propose the Space-Time Recurrent Memory Network (STReMN,pronounced as ”strem”) which attempts to retain a constant-sized memory while enabling onlineprocessing for the spatio-temporal reasoning problem. Our network maintains a memory with afixed amount of separate memory slots which are updated through time. When new informationcomes from a new frame, the system would decide whether to use it to update some current memoryslots, and/or throw some previous slots out of the memory. Hence, compared to transformer-basednetworks which do not perform aggregation of memory from different frames, network design forour model is significantly more challenging. Yet, we believe that this kind of memory structure hasmore potential to scale up to long videos beyond a few seconds, and touches upon more fundamentalchallenges in memory organization that is valuable to many spatio-temporal reasoning problems. Inthe paper we explore multiple different design choices which shed light on the designs of such amemory network applied to practical tasks such as VOS and video prediction.
Figure 2: Fusion Cell. The Fusion Cell is used to distill information from XiM to XjM using theFAM and gating function, Filter and Update.
Figure 3: Memory Update Process. The update process includes 3 steps. Selection step: 2 tem-plates, XiM and XjM where i < j , are chosen from the memory based on their similarity. Dis-tillation & Removal step: the information from XiM is distilled into XjM using the Fusion Cell,and XiM is purged from the memory. Update step: a template Xt is generated using our MemoryEncoder and the current frame together with its extra information such as objects’ masks, opticalflow, or previous frames if needed. This template is added to the end of the memory (i.e after XKM).
Figure 4: Qualitative results. (Best viewed in color)4.1.3	Memory AnalysisWe evaluated different memory update variants (see Sec. 3.2) on the DAVIS 2017 validation set.
Figure 5: Space-time memory module - adapted from VOSSTM (Oh et al., 2019).
Figure 6: Comparison among models with different numbers of memory slots. First row: 2 memoryslots. Second row: 3 slots; Third row: 6 slots (Best viewed in color)some difficult sequences when increasing the total number of memory slots in Tab. 10. Notably,no sequence has decreased performance with more slots. Tab. 11 and 12 show the IOU for everysequence. The standard deviation column (σ) shows the change in IOU of each sequence whenincreasing the number of memory slots.
Figure 7: Qualitative results on DAVIS 2017 test-dev set. (Best viewed in color)wheelchair despite the highly overlapped region. The third video shows that our model can quicklyadapt the deformed appearance of the tennis racquet.
Figure 8: Failure cases. (Best viewed in color)16Under review as a conference paper at ICLR 2022Table 11: The IOU of every sequence in DAVIS 2017 validation set. σ is the standard deviation ofthe IOU	___________________________________________________________Sequence	2 slots	3 slots	6 slots	Qbike-packing_1	0.727	0.715	0.710	0.009bike-Packing_2	0.847	0.844	0.841	0.003Mackswan」	0.962	0.962	0.961	0.001bmx-trees_1	0.490	0.500	0.510	0.010bmx-treesN	0.742	0.743	0.743	0.001breakdance」	0.796	0.802	0.796	0.003CameLI	0.850	0.850	0.848	0.001car-roundabout_1	0.976	0.976	0.982	0.003Car-Shadow_1	0.968	0.966	0.965	0.002cows」	0.961	0.961	0.961	0.000dance-twirl」	0.882	0.884	0.887	0.003dog」	0.961	0.961	0.962	0.001dogs-jump_1	0.859	0.856	0.832	0.015dogs-jUmPN	0.934	0.934	0.934	0.000
