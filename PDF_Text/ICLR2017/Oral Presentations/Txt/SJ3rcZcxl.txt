Published as a conference paper at ICLR 2017
Q-Prop:	Sample-Efficient Policy Gradient
with An Off-Policy Critic
Shixiang Gu123, Timothy Lillicrap4, Zoubin Ghahramani16, Richard E. Turner1, Sergey Levine35
sg717@cam.ac.uk,countzero@google.com,zoubin@eng.cam.ac.uk,
ret26@cam.ac.uk,svlevine@eecs.berkeley.edu
1University of Cambridge, UK
2Max Planck Institute for Intelligent Systems, Tubingen, Germany
3Google Brain, USA
4DeepMind, UK
5UC Berkeley, USA
6Uber AI Labs, USA
Ab stract
Model-free deep reinforcement learning (RL) methods have been successful in a
wide variety of simulated domains. However, a major obstacle facing deep RL
in the real world is their high sample complexity. Batch policy gradient methods
offer stable learning, but at the cost of high variance, which often requires large
batches. TD-style methods, such as off-policy actor-critic and Q-learning, are
more sample-efficient but biased, and often require costly hyperparameter sweeps
to stabilize. In this work, we aim to develop methods that combine the stability of
policy gradients with the efficiency of off-policy RL. We present Q-Prop, a policy
gradient method that uses a Taylor expansion of the off-policy critic as a control
variate. Q-Prop is both sample efficient and stable, and effectively combines the
benefits of on-policy and off-policy methods. We analyze the connection between
Q-Prop and existing model-free algorithms, and use control variate theory to de-
rive two variants of Q-Prop with conservative and aggressive adaptation. We show
that conservative Q-Prop provides substantial gains in sample efficiency over trust
region policy optimization (TRPO) with generalized advantage estimation (GAE),
and improves stability over deep deterministic policy gradient (DDPG), the state-
of-the-art on-policy and off-policy methods, on OpenAI Gym’s MuJoCo continu-
ous control environments.
1	Introduction
Model-free reinforcement learning is a promising approach for solving arbitrary goal-directed se-
quential decision-making problems with only high-level reward signals and no supervision. It has
recently been extended to utilize large neural network policies and value functions, and has been
shown to be successful in solving a range of difficult problems (Mnih et al., 2015; Schulman et al.,
2015; Lillicrap et al., 2016; Silver et al., 2016; Gu et al., 2016b; Mnih et al., 2016). Deep neural
network parametrization minimizes the need for manual feature and policy engineering, and allows
learning end-to-end policies mapping from high-dimensional inputs, such as images, directly to ac-
tions. However, such expressive parametrization also introduces a number of practical problems.
Deep reinforcement learning algorithms tend to be sensitive to hyperparameter settings, often re-
quiring extensive hyperparameter sweeps to find good values. Poor hyperparameter settings tend to
produce unstable or non-convergent learning. Deep RL algorithms also tend to exhibit high sample
complexity, often to the point of being impractical to run on real physical systems. Although a num-
ber of recent techniques have sought to alleviate some of these issues (Hasselt, 2010; Mnih et al.,
2015; Schulman et al., 2015; 2016), these recent advances still provide only a partial solution to the
instability and sample complexity challenges.
Model-free reinforcement learning consists of on- and off-policy methods. Monte Carlo policy gra-
dient methods (Peters & Schaal, 2006; Schulman et al., 2015) are popular on-policy methods that
1
Published as a conference paper at ICLR 2017
directly maximize the cumulative future returns with respect to the policy. While these algorithms
can offer unbiased (or nearly unbiased, as discussed in Section 2.1) estimates of the gradient, they
rely on Monte Carlo estimation and often suffer from high variance. To cope with high variance
gradient estimates and difficult optimization landscapes, a number of techniques have been pro-
posed, including constraining the change in the policy at each gradient step (Kakade, 2001; Peters
et al., 2010) and mixing value-based back-ups to trade off bias and variance in Monte Carlo return
estimates (Schulman et al., 2015). However, these methods all tend to require very large numbers
of samples to deal with the high variance when estimating gradients of high-dimensional neural
network policies. The crux of the problem with policy gradient methods is that they can only effec-
tively use on-policy samples, which means that they require collecting large amounts of on-policy
experiences after each parameter update to the policy. This makes them very sample intensive. Off-
policy methods, such as Q-learning (Watkins & Dayan, 1992; Sutton et al., 1999; Mnih et al., 2015;
Gu et al., 2016b) and off-policy actor-critic methods (Lever, 2014; Lillicrap et al., 2016), can in-
stead use all samples, including off-policy samples, by adopting temporal difference learning with
experience replay. Such methods are much more sample-efficient. However, convergence of these
algorithms is in general not guaranteed with non-linear function approximators, and practical con-
vergence and instability issues typically mean that extensive hyperparameter tuning is required to
attain good results.
In order to make deep reinforcement learning practical as a tool for tackling real-world tasks, we
must develop methods that are both data efficient and stable. In this paper, we propose Q-Prop, a
step in this direction that combines the advantages of on-policy policy gradient methods with the effi-
ciency of off-policy learning. Unlike prior approaches for off-policy learning, which either introduce
bias (Sutton et al., 1999; Silver et al., 2014) or increase variance (Precup, 2000; Levine & Koltun,
2013; Munos et al., 2016), Q-Prop can reduce the variance of gradient estimator without adding
bias; unlike prior approaches for critic-based variance reduction (Schulman et al., 2016) which fit
the value function on-policy, Q-Prop learns the action-value function off-policy. The core idea is
to use the first-order Taylor expansion of the critic as a control variate, resulting in an analytical
gradient term through the critic and a Monte Carlo policy gradient term consisting of the residuals
in advantage approximations. The method helps unify policy gradient and actor-critic methods: it
can be seen as using the off-policy critic to reduce variance in policy gradient or using on-policy
Monte Carlo returns to correct for bias in the critic gradient. We further provide theoretical analy-
sis of the control variate, and derive two additional variants of Q-Prop. The method can be easily
incorporated into any policy gradient algorithm. We show that Q-Prop provides substantial gains
in sample efficiency over trust region policy optimization (TRPO) with generalized advantage esti-
mation (GAE) (Schulman et al., 2015; 2016), and improved stability over deep deterministic policy
gradient (DDPG) (Lillicrap et al., 2016) across a repertoire of continuous control tasks.
2	Background
Reinforcement learning (RL) aims to learn a policy for an agent such that it behaves optimally
according to a reward function. At a time step t and state st , the agent chooses an action at ac-
cording to its policy π(at |st), the state of the agent and the environment changes to new state St+1
according to dynamics p(st+1 |st, at), the agent receives a reward r(st , at), and the process con-
tinues. Let Rt denote a γ-discounted cumulative return from t for an infinite horizon problem, i.e
Rt = ∑t∞0=t γt0-tr(st0 , at0 ). The goal of reinforcement learning is to maximize the expected return
J(θ) = Eπθ [R0] with respect to the policy parameters θ. In this section, we review several standard
techniques for performing this optimization, and in the next section, we will discuss our proposed
Q-Prop algorithm that combines the strengths of these approaches to achieve efficient, stable RL.
Monte Carlo policy gradient refers to policy gradient methods that use full Monte Carlo returns,
e.g. REINFORCE (Williams, 1992) and TRPO (Schulman et al., 2015), and policy gradient with
function approximation refers to actor-critic methods (Sutton et al., 1999) which optimize the policy
against a critic, e.g. deterministic policy gradient (Silver et al., 2014; Lillicrap et al., 2016).
2.1	Monte Carlo Policy Gradient Methods
Monte Carlo policy gradient methods apply direct gradient-based optimization to the reinforcement
learning objective. This involves directly differentiating the J(θ ) objective with respect to the policy
2
Published as a conference paper at ICLR 2017
parameters θ . The standard form, known as the REINFORCE algorithm (Williams, 1992), is shown
below:
∞∞
VθJ(θ) = En[∑Vθ log∏θ(a.|s.)YRt]= En[∑ γtNθlog∏(a/号)(Rt -b(St))],	(1)
t =0	t =0
where b(st) is known as the baseline. For convenience of later derivations, Eq. 1 can also be written
as below, where ρn (s) = ∑t∞=0 γtp(st = s) is the unnormalized discounted state visitation frequency,
vθ J (θ ) = Es t 〜Pn (∙),a t ~n(∙∣s t )[vθ log nθ (a t |st MRt- b (St))].	⑵
Eq. 2 is an unbiased gradient of the RL objective. However, in practice, most policy gradient meth-
ods effectively use undiscounted state visitation frequencies, i.e. γ = 1 in the equal for ρn, and
are therefore biased; in fact, making them unbiased often hurts performance (Thomas, 2014). In
this paper, we mainly discuss bias due to function approximation, off-policy learning, and value
back-ups.
The gradient is estimated using Monte Carlo samples in practice and has very high variance. A
proper choice of baseline is necessary to reduce the variance sufficiently such that learning becomes
feasible. A common choice is to estimate the value function of the state Vn(St) to use as the base-
line, which provides an estimate of advantage function An(St, at), which is a centered action-value
function Qn(St, at), as defined below:
Vn(St) = En[Rt] = Enθ (at ∣st)[Qn(St, at)]
Qn(St,at) = r(St,at)+γEn[Rt+1] = r(St,at)+γEp(st+1∣st,at)[Vn(St+1)]	(3)
An(St,at) = Qn(St,at) -Vn(St).
Qn(St, at) summarizes the performance of each action from a given state, assuming it follows n
thereafter, and An(St, at) provides a measure of how each action compares to the average perfor-
mance at the state St, which is given by Vn (St). Using An(St, at) centers the learning signal and
reduces variance significantly.
Besides high variance, another problem with the policy gradient is that it requires on-policy samples.
This makes policy gradient optimization very sample intensive. To achieve similar sample efficiency
as off-policy methods, we can attempt to include off-policy data. Prior attempts use importance
sampling to include off-policy trajectories; however, these are known to be difficult scale to high-
dimensional action spaces because of rapidly degenerating importance weights (Precup, 2000).
2.2 Policy Gradient with Function Approximation
Policy gradient methods with function approximation (Sutton et al., 1999), or actor-critic methods,
include a policy evaluation step, which often uses temporal difference (TD) learning to fit a critic
Qw for the current policy n(θ), and a policy improvement step which greedily optimizes the policy
n against the critic estimate Qw . Significant gains in sample efficiency may be achievable using off-
policy TD learning for the critic, as in Q-learning and deterministic policy gradient (Sutton, 1990;
Silver et al., 2014), typically by means of experience replay for training deep Q networks (Mnih
et al., 2015; Lillicrap et al., 2016; Gu et al., 2016b).
One particularly relevant example of such a method is the deep deterministic policy gradient
(DDPG) (Silver et al., 2014; Lillicrap et al., 2016). The updates for this method are given below,
where ∏θ (at ∣st) = δ(at = μθ (st)) is a deterministic policy, β is arbitrary exploration distribution,
and pβ corresponds to sampling from a replay buffer. Q(∙, ∙) is the target network that slowly tracks
Qw (Lillicrap et al., 2016).
W = argπιinEst~ρβ(∙),at〜β(∙∣st)[(r(St, at) + YQ(St+1, μθ(st +1)) - Qw(St, at))2]
θ = argmθix Es,〜ρβ (∙)[ Qw (St, μθ (St))]
(4)
When the critic and policy are parametrized with neural networks, full optimization is expensive,
and instead stochastic gradient optimization is used. The gradient in the policy improvement phase
is given below, which is generally a biased gradient of J(θ).
Vθ J (θ) ≈ Es t ~ρβ(∙)[VaQw (s t, a)∣a=μβ (s, )V θ μθ (s t)]
(5)
3
Published as a conference paper at ICLR 2017
The crucial benefits of DDPG are that it does not rely on high variance REINFORCE gradients and is
trainable on off-policy data. These properties make DDPG and other analogous off-policy methods
significantly more sample-efficient than policy gradient methods (Lillicrap et al., 2016; Gu et al.,
2016b; Duan et al., 2016). However, the use of a biased policy gradient estimator makes analyzing
its convergence and stability properties difficult.
3	Q-Prop
In this section, we derive the Q-Prop estimator for policy gradient. The key idea from this estimator
comes from observing Equations 2 and 5 and noting that the former provides an almost unbiased
(see Section 2.1), but high variance gradient, while the latter provides a deterministic, but biased
gradient. By using the deterministic biased estimator as a particular form of control variate (Ross,
2006; Paisley et al., 2012) for the Monte Carlo policy gradient estimator, we can effectively use both
types of gradient information to construct a new estimator that in practice exhibits improved sample
efficiency through the inclusion of off-policy samples while preserving the stability of on-policy
Monte Carlo policy gradient.
3.1	Q-Prop Estimator
To derive the Q-Prop gradient estimator, we start by using the first-order Taylor expansion of an
arbitrary function f(St,at), f(st,at) = f(St,&t)+ Vaf(St,a)|a=a,(at -&t) as the control vari-
ate for the policy gradient estimator. We use Q(st, at) = ∑∞=t Y -tr(s10, a10) to denote Monte
Carlo return from state St and action at, i.e. En[Q(st, at)] = r(st, at) + γ.EP[V∏(st+1)], and
μθ (st) = E∏θ(at ∣st)[at] to denote the expected action of a stochastic policy ∏θ. Full derivation is
in Appendix A.
vθJ(θ) = Eρ∏,π[vθlogπθ(at|st)(Q(s,at)-f(st,at)]+EPnπ[vθlogπθ(atISt)f(st,at)](6)
=Eρ∏,n[Vθ log ∏θ(at ∣st)(Q(st, at) - f (st, at)]+ EPn [V°f (st, a)∣a=atVθμθ (st)]
Eq. 6 is general for arbitrary function f(st , at ) that is differentiable with respect to at at an arbitrary
value of at； however, a sensible choice is to use the critic Qw for f and μ0 (St) for at to get,
VθJ(θ) = Eρ∏,n[Vθ log ∏θ(at∣St)(Q(St, at) - Q)w(St, at)]+ EPn [VaQw(St, a)∣a=μθ(st)Vθμθ(st)].
(7)
Finally, since in practice We estimate advantages A(st, at), We write the Q-Prop estimator in terms
of advantages to complete the basic derivation,
Vθ J (θ ) = Eρ∏ ,n [Vθ log ∏θ (a t ∣S t)(A (St, a t) - A W (St, a t)]+ EPn [Va Qw (St, a)∣a=μθ (s t )Vθ μθ (St)]
A(st, at) = Q(st, at) - E∏θ [Q(st, at)] = VaQw(St, a)∣a=μθ(St)(at - μθ(St)).
(8)
Eq. 8 is composed of an analytic gradient through the critic as in Eq. 5 and a residual REINFORCE
gradient in Eq. 2. From the above derivation, Q-Prop is simply a Monte Carlo policy gradient
estimator with a special form of control variate. The important insight comes from the fact that
Qw can be trained using off-policy data as in Eq. 4. Under this setting, Q-Prop is no longer just
a Monte Carlo policy gradient method, but more closely resembles an actor-critic method, where
the critic can be updated off-policy but the actor is always updated on-policy with an additional
REINFORCE correction term so that it remains a Monte Carlo policy gradient method regardless
of the parametrization, training method, and performance of the critic. Therefore, Q-Prop can be
directly combined with a number of prior techniques from both on-policy methods such as natural
policy gradient (Kakade, 2001), trust-region policy optimization (TRPO) (Schulman et al., 2015)
and generalized advantage estimation (GAE) (Schulman et al., 2016), and off-policy methods such
as DDPG (Lillicrap et al., 2016) and Retrace(λ) (Munos et al., 2016).
Intuitively, if the critic Qw approximates Qn well, it provides a reliable gradient, reduces the estima-
tor variance, and improves the convergence rate. Interestingly, control variate analysis in the next
section shows that this is not the only circumstance where Q-Prop helps reduce variance.
4
Published as a conference paper at ICLR 2017
3.2	Control Variate Analysis and Adaptive Q-Prop
For Q-Prop to be applied reliably, it is crucial to analyze how the variance of the estimator changes
before and after the application of control variate. Following the prior work on control vari-
ates (Ross, 2006; Paisley et al., 2012), we first introduce η (st) to Eq. 8, a weighing variable that
modulates the strength of control variate. This additional variable η(st) does not introduce bias to
the estimator.
VθJ(θ)=Eρ∏,π[Vθ log∏θ(at|st)(么(St, at) - η(St)ZW(St, at)]
+ EPn [η (S t)Va QW (S t, a)la=μθ (S t )V9 μθ (S t)]
The variance of this estimator is given below, where m = 1...M indexes the dimension of θ,
(9)
Var* = Eρ∏ ∑Varat(Vθmlog∏θ(a/st)(Z(St,at) - η(St)Z(St,at))) .	(10)
m
If We choose η(st) SUch that Var* < Var, where Var = Eρπ[∑m Varat (Vθm log∏θ(at|st)Z(st, at))]
is the original estimator variance measure, then we have managed to reduce the variance. Directly
analyzing the above variance measUre is nontrivial, for the same reason that compUting the optimal
baseline is difficUlt (Weaver & Tao, 2001). In addition, it is often impractical to get mUltiple action
samples from the same state, which prohibits using naive Monte Carlo to estimate the expectations.
Instead, we propose a surrogate variance measure, Var = Eρ∏ [Var。t (Z(st, at))]. A similar surrogate
is also used by prior work on learning state-dependent baseline (Mnih & Gregor, 2014), and the
benefit is that the measure becomes more tractable,
Var* = Eρ∏[Varat(Z(st,at) - η(st)Z(st,at))]
=Var + Eρ∏[-2η (s t )CoVa t (Z (s t, a t), Z (s t, a t)) + η (s t 户Vara t (Z (s t, a t))].
Since En[Z^(st, at)] = En[Z(St, at)] = 0, the terms can be simplified as below,
Covat (Z,Z) = En [A(st, at)Z(St, at)]
Vara t (Z)= En [Z (s t, a t)2] = Va Qw (s t, a) ia=μθ (S t )ςΘ (s t )Va Qw (s t, a)la=μθ (s t),
(11)
(12)
where Σθ(st) is the covariance matrix of the stochastic policy nθ. The nice property of Eq. 11 is
that Varat (Z) is analytical and Cov。t (Z,Z) can be estimated with single action sample. Using this
estimate, we propose adaptive variants of Q-Prop that regulate the variance of the gradient estimate.
Adaptive Q-Prop. The optimal state-dependent factor η(st) can be computed per state, accord-
ing to η*(st) = Covat(Z,Z)∕Varat(Z). This provides maximum reduction in variance according
to Eq. 11. Substituting η*(st) into Eq. 11, we get Var* = Eρ∏[(1 — PCorr(Z,Z)2)Varat(Z)], where
ρcorr is the correlation coefficient, which achieves guaranteed variance reduction if at any state Z is
correlated with Z. We call this the fully adaptive Q-Prop method. An important conclusion from
this analysis is that, in adaptive Q-Prop, the critic Qw does not necessarily need to be approximating
Q∏ well to produce good results. Its Taylor expansion merely needs to be correlated with Z, posi-
tively or even negatively. This is in contrast with actor-critic methods, where performance is greatly
dependent on the absolute accuracy of the critic’s approximation.
Conservative and Aggressive Q-Prop. In practice, the single-sample estimate of Cov。t (Z, Z) has
high variance itself, and we propose the following two practical implementations of adaptive Q-Prop:
⑴ η(st) = 1 if Covat (Z,Z) > 0and η(st) = 0if otherwise, and (2) η(st) = Sign(CoVat (Z,Z)). The
first implementation, which we call conservative Q-Prop, can be thought of as a more conservative
version of Q-Prop, which effectively disables the control variate for some samples of the states. This
is sensible as if Z and Z are negatively correlated, it is likely that the critic is very poor. The second
variant can correspondingly be termed aggressive Q-Prop, since it makes more liberal use of the
control variate.
3.3	Q-Prop Algorithm
Pseudo-code for the adaptive Q-Prop algorithm is provided in Algorithm 1. It is a mixture of policy
gradient and actor-critic. At each iteration, it first rolls out the stochastic policy to collect on-policy
5
Published as a conference paper at ICLR 2017
Algorithm 1 Adaptive Q-Prop
1:	Initialize W for critic Qw, θ for stochastic policy ∏θ , and replay buffer R — 0.
2:	repeat
3:	for e = 1, . . . , E do	. Collect E episodes of on-policy experience using πθ
4:	S0,e 〜P(S0)
5:	for t = 0, . . . , T - 1 do
6:	a t, e 〜∏θ (∙∣s t, e ), s t +1, e 〜P (∙∣S t, e, a t, e ), 〃, e = r(s t, e, a t, e )
7:	Add batch data B = {s0:T,1:E, a0:T -1,1:E, r0:T -1,1:E} to replay buffer R
8:	Take E ∙ T gradient steps on Qw using R and ∏θ
9:	Fit Vφ (st ) using B
10:	Compute At,e using GAE(λ) and At,e using Eq. 7
11:	Set ηt,e based on Section 3.2
12:	Compute and center the learning	signals l,e = At,e -	ηt,e√it,e
13:	Compute Vθ J (θ ) ≈ ET ∑ e ∑ t ^θ log ∏θ (a t, e |s t, e ) It, e	+ η t, e Va Qw (S t, e, a)∣a=μθ(s t, e) ^θ Nθ (S t, e )
14:	Take a gradient step on ∏θ using	Vθ J(θ), optionally	with a trust-region	constraint using	B
15:	until πθ converges.
samples, adds the batch to a replay buffer, takes a few gradient steps on the critic, computes A and
A, and finally applies a gradient step on the policy ∏θ . In our implementation, the critic Qw is fitted
with off-policy TD learning using the same techniques as in DDPG (Lillicrap et al., 2016):
w = argminEst〜ρβ(∙),at~β(∙∣st)[(r(St, at)+ YEn[q0(st +1, at+1)] - Qw(st, at))2].	(13)
Vφ is fitted with the same technique in (Schulman et al., 2016). Generalized advantage estimation
(GAE) (Schulman et al., 2016) is used to estimate A. The policy update can be done by any method
that utilizes the first-order gradient and possibly the on-policy batch data, which includes trust region
policy optimization (TRPO) (Schulman et al., 2015). Importantly, this is just one possible imple-
mentation of Q-Prop, and in Appendix C we show a more general form that can interpolate between
pure policy gradient and off-policy actor-critic.
3.4	Limitations
A limitation with Q-Prop is that if data collection is very fast, e.g. using fast simulators, the compute
time per episode is bound by the critic training at each iteration, and similar to that of DDPG and
usually much more than that of TRPO. However, in applications where data collection speed is
the bottleneck, there is sufficient time between policy updates to fit Qw well, which can be done
asynchronously from the data collection, and the compute time of Q-Prop will be about the same as
that of TRPO.
Another limitation is the robustness to bad critics. We empirically show that our conservative Q-Prop
is more robust than standard Q-Prop and much more robust than pure off-policy actor-critic methods
such as DDPG; however, estimating when an off-policy critic is reliable or not is still a fundamental
problem that shall be further investigated. We can also alleviate this limitation by adopting more
stable off-policy critic learning techniques such as Retrace(λ) (Munos et al., 2016).
4	Related Work
Variance reduction in policy gradient methods is a long-standing problem with a large body of prior
work (Weaver & Tao, 2001; Greensmith et al., 2004; Schulman et al., 2016). However, exploration
of action-dependent control variates is relatively recent, with most work focusing instead on simpler
baselining techniques (Ross, 2006). A subtle exception is compatible feature approximation (Sutton
et al., 1999) which can be viewed as a control variate as explained in Appendix B. Another exception
is doubly robust estimator in contextual bandits (DUdIk et al., 2011), which uses a different control
variate whose bias cannot be tractably corrected. Control variates were explored recently not in
RL but for approximate inference in stochastic models (Paisley et al., 2012), and the closest related
work in that domain is the MuProp algorithm (Gu et al., 2016a) which uses a mean-field network
as a surrogate for backpropagating a deterministic gradient through stochastic discrete variables.
MuProp is not directly applicable to model-free RL because the dynamics are unknown; however, it
6
Published as a conference paper at ICLR 2017
can be if the dynamics are learned as in model-based RL (Atkeson & Santamaria, 1997; Deisenroth
& Rasmussen, 2011). This model-based Q-Prop is itself an interesting direction of research as it
effectively corrects bias in model-based learning.
Part of the benefit of Q-Prop is the ability to use off-policy data to improve on-policy policy gra-
dient methods. Prior methods that combine off-policy data with policy gradients either introduce
bias (Sutton et al., 1999; Silver et al., 2014) or use importance weighting, which is known to re-
sult in degenerate importance weights in high dimensions, resulting in very high variance (Precup,
2000; Levine & Koltun, 2013). Q-Prop provides a new approach for using off-policy data to reduce
variance without introducing further bias.
Lastly, since Q-Prop uses both on-policy policy updates and off-policy critic learning, it can take
advantage of prior work along both lines of research. We chose to implement Q-Prop on top of
TRPO-GAE primarily for the purpose of enabling a fair comparison in the experiments, but com-
bining Q-Prop with other on-policy update schemes and off-policy critic training methods is an
interesting direction for future work. For example, Q-Prop can also be used with other on-policy
policy gradient methods such as A3C (Mnih et al., 2016) and off-policy advantage estimation meth-
ods such as Retrace(λ) (Munos et al., 2016), GTD2 (Sutton et al., 2009), emphatic TD (Sutton et al.,
2015), and WIS-LSTD (Mahmood et al., 2014).
5	Experiments
(a)	(b)	(c)	(d)	(e)
(f)	(g)
Figure 1: Illustrations of OpenAI Gym MuJoCo domains (Brockman et al., 2016; Duan et al., 2016):
(a) Ant, (b) HalfCheetah, (c) Hopper, (d) Humanoid, (e) Reacher, (f) Swimmer, (g) Walker.
We evaluated Q-Prop and its variants on continuous control environments from the OpenAI Gym
benchmark (Brockman et al., 2016) using the MuJoCo physics simulator (Todorov et al., 2012) as
shown in Figure 1. Algorithms are identified by acronyms, followed by a number indicating batch
size, except for DDPG, which is a prior online actor-critic algorithm (Lillicrap et al., 2016). “c-” and
“v-” denote conservative and aggressive Q-Prop variants as described in Section 3.2. “TR-” denotes
trust-region policy optimization (Schulman et al., 2015), while “V-” denotes vanilla policy gradient.
For example, “TR-c-Q-Prop-5000” means convervative Q-Prop with the trust-region policy update,
and a batch size of 5000. “VPG” and “TRPO” are vanilla policy gradient and trust-region policy op-
timization respectively (Schulman et al., 2016; Duan et al., 2016). Unless otherwise stated, all policy
gradient methods are implemented with GAE(λ = 0.97) (Schulman et al., 2016). Note that TRPO-
GAE is currently the state-of-the-art method on most of the OpenAI Gym benchmark tasks, though
our experiments show that a well-tuned DDPG implementation sometimes achieves better results.
Our algorithm implementations are built on top of the rllab TRPO and DDPG codes from Duan
et al. (2016) and available at https://github.com/shaneshixiang/rllabplusplus.
Policy and value function architectures and other training details including hyperparameter values
are provided in Appendix D.
5.1	Adaptive Q-Prop
First, it is useful to identify how reliable each variant of Q-Prop is. In this section, we analyze
standard Q-Prop and two adaptive variants, c-Q-Prop and a-Q-Prop, and demonstrate the stability
of the method across different batch sizes. Figure 2a shows a comparison of Q-Prop variants with
trust-region updates on the HalfCheetah-v1 domain, along with the best performing TRPO hyper-
parameters. The results are consistent with theory: conservative Q-Prop achieves much more stable
performance than the standard and aggressive variants, and all Q-Prop variants significantly outper-
form TRPO in terms of sample efficiency, e.g. conservative Q-Prop reaches average reward of 4000
using about 10 times less samples than TRPO.
7
Published as a conference paper at ICLR 2017
Enlφαω6E-la>4
Enlφαω6E-la>4
-2000
0	500 1000 1500 2000 2500 3000 3500 4000 4500
Episodes
(a) Standard Q-Prop vs adaptive variants. (b) Conservative Q-Prop vs TRPO across batch sizes.
Figure 2: Average return over episodes in HalfCheetah-v1 during learning, exploring adaptive Q-
Prop methods and different batch sizes. All variants of Q-Prop substantially outperform TRPO in
terms of sample efficiency. TR-c-QP, conservative Q-Prop with trust-region update performs most
stably across different batch sizes.
Figure 2b shows the performance of conservative Q-Prop against TRPO across different batch
sizes. Due to high variance in gradient estimates, TRPO typically requires very large batch sizes,
e.g. 25000 steps or 25 episodes per update, to perform well. We show that our Q-Prop methods can
learn even with just 1 episode per update, and achieves better sample efficiency with small batch
sizes. This shows that Q-Prop significantly reduces the variance compared to the prior methods.
As we discussed in Section 1, stability is a significant challenge with state-of-the-art deep RL meth-
ods, and is very important for being able to reliably use deep RL for real world tasks. In the rest of
the experiments, we will use conservative Q-Prop as the main Q-Prop implementation.
5.2	Evaluation Across Algorithms
Enlφαω6E-la>4
(a) Comparing algorithms on HalfCheetah-v1.
Figure 3: Average return over episodes in HalfCheetah-v1 and Humanoid-v1 during learning, com-
paring Q-Prop against other model-free algorithms. Q-Prop with vanilla policy gradient outperforms
TRPO on HalfCheetah. Q-Prop significantly outperforms TRPO in convergence time on Humanoid.
500 /不；J j "	.......TRBQ-250QQ............
/	---- TR-C-Q-Prop-OSOOO
O
O 5000	10000	15000	20000	25000
Episodes
(b) Comparing algorithms on Humanoid-v1.
In this section, we evaluate two versions of conservative Q-Prop, v-c-Q-Prop using vanilla pol-
icy gradient and TR-c-Q-Prop using trust-region updates, against other model-free algorithms on
the HalfCheetah-v1 domain. Figure 3a shows that c-Q-Prop methods significantly outperform the
best TRPO and VPG methods. Even Q-Prop with vanilla policy gradient is comparable to TRPO,
confirming the significant benefits from variance reduction. DDPG on the other hand exhibits incon-
sistent performances. With proper reward scaling, i.e. “DDPG-r0.1”, it outperforms other methods
as well as the DDPG results reported in prior work (Duan et al., 2016; Amos et al., 2016). This
illustrates the sensitivity of DDPG to hyperparameter settings, while Q-Prop exhibits more stable,
monotonic learning behaviors when compared to DDPG. In the next section we show this improved
stability allows Q-Prop to outperform DDPG in more complex domains.
8
Published as a conference paper at ICLR 2017
5.3 Evaluation across domains
Lastly, we evaluate Q-Prop against TRPO and DDPG across multiple domains. While the gym
environments are biased toward locomotion, we expect we can achieve similar performance on ma-
nipulation tasks such as those in Lillicrap et al. (2016). Table 1 summarizes the results, including the
best attained average rewards and the steps to convergence. Q-Prop consistently outperform TRPO
in terms of sample complexity and sometimes achieves higher rewards than DDPG in more complex
domains. A particularly notable case is shown in Figure 3b, where Q-Prop substantially improves
sample efficiency over TRPO on Humanoid-v1 domain, while DDPG cannot find a good solution.
The better performance on the more complex domains highlights the importance of stable deep RL
algorithms: while costly hyperparameter sweeps may allow even less stable algorithms to perform
well on simpler problems, more complex tasks might have such narrow regions of stable hyperpa-
rameters that discovering them becomes impractical.
		TR-C-Q-ProP		TRPO		DDPG	
Domain	Threshold	MaxReturn.	Episodes	MaxReturn	Epsisodes	MaxReturn	Episodes
Ant	3500	3534	-^4975-	4239	13825	957	N/A
HalfCheetah	4700	4811	20785	4734	26370	7490	600
Hopper	2000	2957	5945	2486	5715	2604	965
Humanoid	2500	>3492	14750	918	>30000	552	N/A
ReaCher	-7	-6.0	2060	-6.7	2840	-6.6	1800
Swimmer	90	103	2045	110	3025	150	500
Walker	3000	4030	3685	3567	18875	3626	2125
Table 1: Q-Prop, TRPO and DDPG results showing the max average rewards attained in the first
30k episodes and the episodes to cross specific reward thresholds. Q-Prop often learns more sample
efficiently than TRPO and can solve difficult domains such as Humanoid better than DDPG.
6 Discussion and Conclusion
We presented Q-Prop, a policy gradient algorithm that combines reliable, consistent, and poten-
tially unbiased on-policy gradient estimation with a sample-efficient off-policy critic that acts as a
control variate. The method provides a large improvement in sample efficiency compared to state-
of-the-art policy gradient methods such as TRPO, while outperforming state-of-the-art actor-critic
methods on more challenging tasks such as humanoid locomotion. We hope that techniques like
these, which combine on-policy Monte Carlo gradient estimation with sample-efficient variance re-
duction through off-policy critics, will eventually lead to deep reinforcement learning algorithms
that are more stable and efficient, and therefore better suited for application to complex real-world
learning tasks.
Acknowledgments
We thank Rocky Duan for sharing and answering questions about rllab code, and Yutian Chen and
Laurent Dinh for discussion on control variates. SG and RT were funded by NSERC, Google, and
EPSRC grants EP/L000776/1 and EP/M026957/1. ZG was funded by EPSRC grant EP/J012300/1
and the Alan Turing Institute (EP/N510129/1).
References
Brandon Amos, Lei Xu, and J Zico Kolter. Input convex neural networks. arXiv preprint
arXiv:1609.07152, 2016.
Christopher G Atkeson and Juan Carlos Santamaria. A comparison of direct and model-based rein-
forcement learning. In In International Conference on Robotics and Automation. Citeseer, 1997.
Greg Brockman, Vicki Cheung, Ludwig Pettersson, Jonas Schneider, John Schulman, Jie Tang, and
Wojciech Zaremba. Openai gym. arXiv preprint arXiv:1606.01540, 2016.
9
Published as a conference paper at ICLR 2017
Marc Deisenroth and Carl E Rasmussen. Pilco: A model-based and data-efficient approach to policy
search. In Proceedings of the 28th International Conference on machine learning (ICML-11), pp.
465-472, 2011.
Yan Duan, Xi Chen, Rein Houthooft, John Schulman, and Pieter Abbeel. Benchmarking deep
reinforcement learning for continuous control. International Conference on Machine Learning
(ICML), 2016.
Miroslav Dudik, John Langford, and Lihong Li. Doubly robust policy evaluation and learning. arXiv
preprint arXiv:1103.4601, 2011.
Evan Greensmith, Peter L Bartlett, and Jonathan Baxter. Variance reduction techniques for gradient
estimates in reinforcement learning. Journal of Machine Learning Research, 5(Nov):1471-1530,
2004.
Shixiang Gu, Sergey Levine, Ilya Sutskever, and Andriy Mnih. Muprop: Unbiased backpropagation
for stochastic neural networks. International Conference on Learning Representations (ICLR),
2016a.
Shixiang Gu, Tim Lillicrap, Ilya Sutskever, and Sergey Levine. Continuous deep q-learning with
model-based acceleration. In International Conference on Machine Learning (ICML), 2016b.
Hado V Hasselt. Double q-learning. In Advances in Neural Information Processing Systems, pp.
2613-2621, 2010.
Sham Kakade. A natural policy gradient. In NIPS, volume 14, pp. 1531-1538, 2001.
Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980, 2014.
Guy Lever. Deterministic policy gradient algorithms. 2014.
Sergey Levine and Vladlen Koltun. Guided policy search. In International Conference on Machine
Learning (ICML), pp. 1-9, 2013.
Timothy P Lillicrap, Jonathan J Hunt, Alexander Pritzel, Nicolas Heess, Tom Erez, Yuval Tassa,
David Silver, and Daan Wierstra. Continuous control with deep reinforcement learning. Interna-
tional Conference on Learning Representations (ICLR), 2016.
A Rupam Mahmood, Hado P van Hasselt, and Richard S Sutton. Weighted importance sampling
for off-policy learning with linear function approximation. In Advances in Neural Information
Processing Systems, pp. 3014-3022, 2014.
Andriy Mnih and Karol Gregor. Neural variational inference and learning in belief networks. Inter-
national Conference on Machine Learning (ICML), 2014.
Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A Rusu, Joel Veness, Marc G Belle-
mare, Alex Graves, Martin Riedmiller, Andreas K Fidjeland, Georg Ostrovski, et al. Human-level
control through deep reinforcement learning. Nature, 518(7540):529-533, 2015.
Volodymyr Mnih, Adria Puigdomenech Badia, Mehdi Mirza, Alex Graves, Timothy P Lillicrap, Tim
Harley, David Silver, and Koray Kavukcuoglu. Asynchronous methods for deep reinforcement
learning. In International Conference on Machine Learning (ICML), 2016.
Remi Munos, Tom StePIeton, Anna Harutyunyan, and Marc G Bellemare. Safe and efficient off-
policy reinforcement learning. arXiv preprint arXiv:1606.02647, 2016.
John Paisley, David Blei, and Michael Jordan. Variational bayesian inference with stochastic search.
International Conference on Machine Learning (ICML), 2012.
Jan Peters and Stefan Schaal. Policy gradient methods for robotics. In International Conference on
Intelligent Robots and Systems (IROS), pp. 2219-2225. IEEE, 2006.
Jan Peters, Katharina Mulling, and Yasemin Altun. Relative entropy policy search. In AAAI. Atlanta,
2010.
10
Published as a conference paper at ICLR 2017
Doina Precup. Eligibility traces for off-policy policy evaluation. Computer Science Department
Faculty Publication Series, pp. 80, 2000.
Sheldon M Ross. Simulation. Burlington, MA: Elsevier, 2006.
John Schulman, Sergey Levine, Pieter Abbeel, Michael I. Jordan, and Philipp Moritz. Trust region
policy optimization. In International Conference on Machine Learning (ICML), pp. 1889-1897,
2015.
John Schulman, Philipp Moritz, Sergey Levine, Michael Jordan, and Pieter Abbeel. High-
dimensional continuous control using generalized advantage estimation. International Confer-
ence on Learning Representations (ICLR), 2016.
David Silver, Guy Lever, Nicolas Heess, Thomas Degris, Daan Wierstra, and Martin Riedmiller. De-
terministic policy gradient algorithms. In International Conference on Machine Learning (ICML),
2014.
David Silver, Aja Huang, Chris J Maddison, Arthur Guez, Laurent Sifre, George Van Den Driessche,
Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, et al. Mastering
the game of go with deep neural networks and tree search. Nature, 529(7587):484-489, 2016.
Richard S Sutton. Integrated architectures for learning, planning, and reacting based on approxi-
mating dynamic programming. In International Conference on Machine Learning (ICML), pp.
216-224, 1990.
Richard S Sutton, David A McAllester, Satinder P Singh, Yishay Mansour, et al. Policy gradient
methods for reinforcement learning with function approximation. In Advances in Neural Infor-
mation Processing Systems (NIPS), volume 99, pp. 1057-1063, 1999.
Richard S Sutton, Hamid Reza Maei, Doina Precup, Shalabh Bhatnagar, David Silver, Csaba
Szepesvari, and Eric Wiewiora. Fast gradient-descent methods for temporal-difference learning
with linear function approximation. In Proceedings of the 26th Annual International Conference
on Machine Learning, pp. 993-1000. ACM, 2009.
Richard S Sutton, A Rupam Mahmood, and Martha White. An emphatic approach to the problem
of off-policy temporal-difference learning. The Journal of Machine Learning Research, 2015.
Philip Thomas. Bias in natural actor-critic algorithms. In ICML, pp. 441-448, 2014.
Emanuel Todorov, Tom Erez, and Yuval Tassa. Mujoco: A physics engine for model-based control.
In 2012 IEEE/RSJ International Conference on Intelligent Robots and Systems, pp. 5026-5033.
IEEE, 2012.
Christopher JCH Watkins and Peter Dayan. Q-learning. Machine learning, 8(3-4):279-292, 1992.
Lex Weaver and Nigel Tao. The optimal reward baseline for gradient-based reinforcement learning.
In Proceedings of the Seventeenth conference on Uncertainty in artificial intelligence, pp. 538-
545. Morgan Kaufmann Publishers Inc., 2001.
Ronald J Williams. Simple statistical gradient-following algorithms for connectionist reinforcement
learning. Machine learning, 8(3-4):229-256, 1992.
A Q-Prop Estimator Derivation
The full derivation of the Q-Prop estimator is shown in Eq. 14. We make use of the following
property that is commonly used in baseline derivations:
Ep θ (X )Vθ log P θ (X)]
[Vθpθ(X) = Vθ pp(X)
XX
0
11
Published as a conference paper at ICLR 2017
This holds true when f (st , at) is an arbitrary function differentiable with respect to at and f is its
first-order Taylor expansion around a t = at, i.e. f(s t, a t) = f (S t, at)+ Va f (S t, a)|a=a, (a t - &t).
Here, μ0 (st) = En[at] is the mean of stochastic policy ∏θ. The derivation appears below:
Vθ J (θ) = Eρ∏ ,n [Vθ log ∏θ (a t |s t)(Q (s t, a t) - f(s t, a t))]+ Eρ∏ ,∏ [Vθ log ∏ (a∕s t) f(s t, a t)]
g(θ) = Eρ∏,∏[Vθ log ∏θ (at |st) f(st, at)]
=Eρ∏,∏[Vθ log ∏θ (at |st)(f (st, at)+ Vaf (St, a)∣a=at (at - at))]
=Eρ∏,∏[Vθ log ∏θ (at |st)Va f (st, a)∣a=atat]
= Eρπ
a
Vθ∏θ(at |st)Vaf (st, a)∣a=atat
=EPπ Vaf (st, a)|a=at /
a
Vθ πθ (at |st)at
(14)
=Eρ∏[Vaf(st, a)∣a=atVθEn[at]]
=EPn [Vaf (s t, a)|a=atV9 μθ (s t)]
Vθ J (θ) = EPn ,∏ [Vθ log ∏θ (a t |s t)(Q (St, a t) - f(s t, a t))]+ g (θ)
=EPn ,n [Vθ log ∏θ (a t |s t)(Q (s t, a t) - f(s t, a t))]+ Eρ∏[Vaf(s t, a)∣a=a t Vθ μθ (s t)]
B	Connection B etween Q-Prop and Compatible Feature
Approximation
In this section we show that actor-critic with compatible feature approximation is a form of
control variate. A critic Qw is compatible (Sutton et al., 1999) if it satisfies (1) Qw(st, at) =
WTVθ log ∏θ (at |st), i.e. VwQw(st, at) = Vθ log ∏θ (at |st), and (2) W is fit with objective W =
argminwL(W) = argminWEPn,n[(Q(st,at) - Qw(st,at))2], that is fitting Qw on on-policy Monte
Carlo returns. Condition (2) implies the following identity,
VWL = 2EPn,n [Vθ log nθ (at |st )(Q(st, at ) - QW(st , at ))] = 0.
(15)
In compatible feature approximation, it directly uses QW as control variate, rather than its Taylor
expansion QW as in Q-Prop. Using Eq. 15, the Monte Carlo policy gradient is,
Vθ J (θ) = EPn ,n [Vθ log ∏θ (a t |s t) Qw (s t, a t)]
=EPn ,n [(Vθ log ∏θ (a t |s t )Vθ log ∏θ (a t |s t) T) w ]
=EPn [I (θ ；s t)w],
(16)
where I(θ; St) = E∏θ [Vθ log ∏θ(at |st)Vθ log ∏θ(at|st)T] is Fisher,s information matrix. Thus, vari-
ance reduction depends on ability to compute or estimate I(θ; St) and W effectively.
C Unifying Policy Gradient and Actor-Critic
Q-Prop closely ties together policy gradient and actor-critic algorithms. To analyze this point, we
write a generalization of Eq. 9 below, introducing two additional variables α, PCR:
VθJ(θ) ^αEp∏,n[Vθlog∏θ(at|st)(J^(st,at) - η/1W(st,at)]
+ η EPCR [Va Qw (s t, a)∖a=μθ (s t )V9 Nθ (s t)]
(17)
Eq. 17 enables more analysis where bias generally is introduced only when α 6= 1 or PCR 6= Pn .
Importantly, Eq. 17 covers both policy gradient and deterministic actor-critic algorithm as its special
cases. Standard policy gradient is recovered by η = 0, and deterministic actor-critic is recovered
by α = 0 and PCR = Pβ . This allows heuristic or automatic methods for dynamically changing
these variables through the learning process for optimizing different metrics, e.g. sample efficiency,
convergence speed, stability.
Table 2 summarizes the various edge cases of Eq. 17. For example, since we derive our method from
a control variates standpoint, QW can be any function and the gradient remains almost unbiased (see
12
Published as a conference paper at ICLR 2017
Parameter	Implementation options	Introduce bias?
Qw	off-policy TD; on-policy TD(λ); model-based; etc.	No
Vφ	on-policy Monte Carlo fitting; E∏θ [Qw(st, at)]; etc	No
λ	0 ≤ λ ≤ 1	Yes, except λ = 1
α	α ≥ 0	Yes, except α = 1
η	any η	No
ρCR	P of any policy	Yes, except PCR = Pn
Table 2: Implementation options and edge cases of the generalized Q-Prop estimator in Eq. 17.
Section 2.1). A natural choice is to use off-policy temporal difference learning to learn the critic Qw
corresponding to policy π. This enables effectively utilizing off-policy samples without introducing
further bias. An interesting alternative to this is to utilize model-based roll-outs to estimate the
critic, which resembles MuProp in stochastic neural networks (Gu et al., 2016a). Unlike prior work
on using fitted dynamics model to accelerate model-free learning (Gu et al., 2016b), this approach
does not introduce bias to the gradient of the original objective.
D	Experiment Details
Policy and value function architectures. The network architectures are largely based on the
benchmark paper by Duan et al. (2016). For policy gradient methods, the stochastic policy
∏θ(at|st) = N(μθ(st),∑θ) is a local Gaussian policy with a local state-dependent mean and a
global covariance matrix. μ0 (St) is a neural network with 3 hidden layers of sizes 100-50-25 and
tanh nonlinearities at the first 2 layers, and Σθ is diagonal. For DDPG, the policy is deterministic
and has the same architecture as μ° except that it has an additional tanh layer at the output. V) (St)
for baselines and GAE is fit with the same technique by Schulman et al. (2016), a variant of linear
regression on Monte Carlo returns with soft-update constraint. For Q-Prop and DDPG, Qw(S, a) is
parametrized with a neural network with 2 hidden layers of size 100 and ReLU nonlinearity, where
a is included after the first hidden layer.
Training details. This section describes parameters of the training algorithms and their hyperpa-
rameter search values in {}. The optimal performing hyperparameter results are reported. Policy
gradient methods (VPG, TRPO, Q-Prop) used batch sizes of {1000, 5000, 25000} time steps, step
sizes of {0.1, 0.01, 0.001} for the trust-region method, and base learning rates of {0.001, 0.0001}
with Adam (Kingma & Ba, 2014) for vanilla policy gradient methods. For Q-Prop and DDPG, Qw
is learned with the same technique as in DDPG (Lillicrap et al., 2016), using soft target networks
with τ = 0.999, a replay buffer of size 106 steps, a mini-batch size of 64, and a base learning rate
of {0.001, 0.0001} with Adam (Kingma & Ba, 2014). For Q-Prop we also tuned the relative ratio
of gradient steps on the critic Qw against the number of steps on the policy, in the range {0.1, 0.5,
1.0}, where 0.1 corresponds to 100 critic updates for every policy update if the batch size is 1000.
For DDPG, we swept the reward scaling using {0.01,0.1,1.0} as it is sensitive to this parameter.
13