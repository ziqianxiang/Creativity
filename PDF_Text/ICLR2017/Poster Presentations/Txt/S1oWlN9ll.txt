Published as a conference paper at ICLR 2017
Loss-aware B inarization of Deep Networks
Lu Hou, Quanming Yao, James T. Kwok
Department of Computer Science and Engineering
Hong Kong University of Science and Technology
Clear Water Bay, Hong Kong
{lhouab,qyaoaa,jamesk}@cse.ust.hk
Ab stract
Deep neural network models, though very powerful and highly successful, are
computationally expensive in terms of space and time. Recently, there have been
a number of attempts on binarizing the network weights and activations. This
greatly reduces the network size, and replaces the underlying multiplications to
additions or even XNOR bit operations. However, existing binarization schemes
are based on simple matrix approximations and ignore the effect of binarization
on the loss. In this paper, we propose a proximal Newton algorithm with diag-
onal Hessian approximation that directly minimizes the loss w.r.t. the binarized
weights. The underlying proximal step has an efficient closed-form solution, and
the second-order information can be efficiently obtained from the second moments
already computed by the Adam optimizer. Experiments on both feedforward and
recurrent networks show that the proposed loss-aware binarization algorithm out-
performs existing binarization schemes, and is also more robust for wide and deep
networks.
1	Introduction
Recently, deep neural networks have achieved state-of-the-art performance in various tasks such as
speech recognition, visual object recognition, and image classification (LeCun et al., 2015). Though
powerful, the large number of network weights leads to space and time inefficiencies in both training
and storage. For instance, the popular AlexNet, VGG-16 and Resnet-18 all require hundred of
megabytes to store, and billions of high-precision operations on classification. This limits its use in
embedded systems, smart phones and other portable devices that are now everywhere.
To alleviate this problem, a number of approaches have been recently proposed. One attempt first
trains a neural network and then compresses it (Han et al., 2016; Kim et al., 2016). Instead of this
two-step approach, it is more desirable to train and compress the network simultaneously. Example
approaches include tensorizing (Novikov et al., 2015), parameter quantization (Gong et al., 2014),
and binarization (Courbariaux et al., 2015; Hubara et al., 2016; Rastegari et al., 2016). In particular,
binarization only requires one bit for each weight value. This can significantly reduce storage, and
also eliminates most multiplications during the forward pass.
Courbariaux et al. (2015) pioneered neural network binarization with the BinaryConnect algorithm,
which achieves state-of-the-art results on many classification tasks. Besides binarizing the weights,
Hubara et al. (2016) further binarized the activations. Rastegari et al. (2016) also learned to scale the
binarized weights, and obtained better results. Besides, they proposed the XNOR-network with both
weights and activations binarized as in (Hubara et al., 2016). Instead of binarization, ternary-connect
quantizes each weight to {-1, 0, 1} (Lin et al., 2016). Similarly, the ternary weight network (Li &
Liu, 2016) and DoReFa-net (Zhou et al., 2016) quantize weights to three levels or more. However,
though using more bits allows more accurate weight approximations, specialized hardwares are
needed for the underlying non-binary operations.
Besides the huge amount of computation and storage involved, deep networks are difficult to train
because of the highly nonconvex objective and inhomogeneous curvature. To alleviate this problem,
Hessian-free methods (Martens & Sutskever, 2012) use the second-order information by conjugate
gradient. A related method is natural gradient descent (Pascanu & Bengio, 2014), which utilizes ge-
1
Published as a conference paper at ICLR 2017
ometry of the underlying parameter manifold. Another approach uses element-wise adaptive learn-
ing rate, as in Adagrad (Duchi et al., 2011), Adadelta (Zeiler, 2012), RMSprop (Tieleman & Hinton,
2012), and Adam Kingma & Ba (2015). This can also be considered as preconditioning that rescales
the gradient so that all dimensions have similar curvatures.
In this paper, instead of directly approximating the weights, we propose to consider the effect of
binarization on the loss during binarization. We formulate this as an optimization problem using
the proximal Newton algorithm (Lee et al., 2014) with a diagonal Hessian. The crux of proximal
algorithms is the proximal step. We show that this step has a closed-form solution, whose form is
similar to the use of element-wise adaptive learning rate. The proposed method also reduces to Bi-
naryConnect (Courbariaux et al., 2015) and the Binary-Weight-Network (Hubara et al., 2016) when
curvature information is dropped. Experiments on both feedforward and recurrent neural network
models show that it outperforms existing binarization algorithms. In particular, BinaryConnect fails
on deep recurrent networks because of the exploding gradient problem, while the proposed method
still demonstrates robust performance.
Notations: For a vector x, √x denotes the element-wise square root, |x| denotes the element-wise
absolute value, kXkp = (PiIxiIp)1 is the p-norm of x, X * 0 denotes that all entries of X are
positive, sign(x) is the vector with [sign(x)]i = 1 ifxi ≥ 0 and -1 otherwise, and Diag(x) returns
a diagonal matrix with x on the diagonal. For two vectors x and y, x y denotes the element-
wise multiplication and x y denotes the element-wise division. For a matrix X, vec(X) returns
the vector obtained by stacking the columns of X, and diag(X) returns a diagonal matrix whose
diagonal elements are extracted from diagonal of X.
2	Related Work
2.1	Weight Binarization in Deep Networks
In a feedforward neural network with L layers, let the weight matrix (or tensor in the case of a
convolutional layer) at layer l be Wl . We combine the (full-precision) weights from all layers as
w = [w1>, w2>, . . . , wL>]>, where wl = vec(Wl). Analogously, the binarized weights are denoted
as w^ = [W^>, w^>,..., w^>]>. As it is essential to use full-precision weights during updates (COUr-
bariaux et al., 2015), typically binarized weights are only used during the forward and backward
propagations, but not on parameter update. At the tth iteration, the (full-precision) weight wlt is
updated by using the backpropagated gradient Vι'(W^t-1) (where ' is the loss and Vι'(W^t-1) is the
partial derivative of ` w.r.t. the weights of the lth layer). In the next forward propagation, it is then
binarized as w^tt = Binarize(Wt), where Binarize(∙) is some binarization scheme.
The two most popular binarization schemes are BinaryConnect (Courbariaux et al., 2015) and
Binary-Weight-Network (BWN) (Rastegari et al., 2016). In BinaryConnect, binarization is per-
formed by transforming each element of Wlt to -1 or +1 using the sign function:1
Binarize(Wlt) = sign(Wlt).	(1)
Besides the binarized weight matrix, a scaling parameter is also learned in BWN. In other words,
Binarize(Wlt) = αlt blt, where αlt > 0 and blt is binary. They are obtained by minimizing the
difference between Wlt and αltblt, and have a simple closed-form solution:
αt = kw业,bt = sign(wt),	(2)
nl
where nl is the number of weights in layer l. Hubara et al. (2016) further binarized the activations
as Xt = Sign(Xt), where Xt is the activation of the lth layer at iteration t.
2.2	Proximal Newton Algorithm
The proximal Newton algorithm (Lee et al., 2014) has been popularly used for solving composite
optimization problems of the form
min f(X) + g(X),
x
1A stochastic binarization scheme is also proposed in (Courbariaux et al., 2015). However, it is much more
computational expensive than (1) and so will not be considered here.
2
Published as a conference paper at ICLR 2017
where f is convex and smooth, and g is convex but possibly nonsmooth. At iteration t, it generates
the next iterate as
xt+ι = arg min Vf (xt)>(x - Xt) + (x - Xt)>H(x - Xt) + g(x),
x
where H is an approximate Hessian matrix of f at xt . With the use of second-order information,
the proximal Newton algorithm converges faster than the proximal gradient algorithm (Lee et al.,
2014). Recently, by assuming that f and g have difference-of-convex decompositions (Yuille &
Rangarajan, 2002), the proximal Newton algorithm is also extended to the case where g is nonconvex
(Rakotomamonjy et al., 2016).
3	Loss-Aware B inarization
As can be seen, existing weight binarization methods (Courbariaux et al., 2015; Rastegari et al.,
2016) simply find the closest binary approximation of w, and ignore its effects to the loss. In this
paper, we consider the loss directly during binarization. As in (Rastegari et al., 2016), we also
binarize the weight WI in each layer as Wι = αιbι, where ɑι > 0 and bi is binary.
In the following, we make the following assumptions on `. (A1) ` is continuously differentiable with
Lipschitz-continuous gradient, i.e., there exists β > 0 such that ∣∣V'(u) — V'(v)∣b ≤ β ∣∣u 一 v∣b
for any u, v; (A2) ` is bounded from below.
3.1	B inarization using Proximal Newton Algorithm
We formulate weight binarization as the following optimization problem:
minw '(W)	(3)
s.t. WI = αιbi, a > 0, b ∈ {±1}nl, l = 1,...,L,	(4)
where ' is the loss. Let C be the feasible region in (4), and define its indicator function: IC(W) = 0
if W ∈ C, and ∞ otherwise. Problem (3) can then be rewritten as
min '(W) + Ic(W).	(5)
w^
We solve (5) using the proximal Newton method (Section 2.2). At iteration t, the smooth term '(Wt)
is replaced by the second-order expansion
'(Wt-1) + V'(Wt-1)>(Wt - WtT) + 1(Wt — Wt-1)>HtT(Wt - Wt-1),
where Ht-1 is an estimate of the Hessian of ' at Wt-1. Note that using the Hessian to capture
second-order information is essential for efficient neural network training, as ' is often flat in some
directions but highly curved in others. By rescaling the gradient, the loss has similar curvatures
along all directions. This is also called preconditioning in the literature (Dauphin et al., 2015a).
For neural networks, the exact Hessian is rarely positive semi-definite. This can be problematic
as the nonconvex objective leads to indefinite quadratic optimization. Moreover, computing the
exact Hessian is both time- and space-inefficient on large networks. To alleviate these problems,
a popular approach is to approximate the Hessian by a diagonal positive definite matrix D. One
popular choice is the efficient Jacobi preconditioner. Though an efficient approximation of the Hes-
sian under certain conditions, it is not competitive for indefinite matrices (Dauphin et al., 2015a).
More recently, it is shown that equilibration provides a more robust preconditioner in the pres-
ence of saddle points (Dauphin et al., 2015a). This is also adopted by popular stochastic optimiza-
tion algorithms such as RMSprop (Tieleman & Hinton, 2012) and Adam (Kingma & Ba, 2015).
Specifically, the second moment v in these algorithms is an estimator of diag(H2) (Dauphin et al.,
2015b). Here, we use the square root of this v, which is readily available in Adam, to construct
D = Diag([diag(D1)>, . . . , diag(DL)>]>), where Di is the approximate diagonal Hessian at layer
l. In general, other estimators of diag(H) can also be used.
At the tth iteration of the proximal Newton algorithm, the following subproblem is solved:
minwt V'(Wt-1)>(Wt 一 Wt-1) + ；(Wt - Wt-1)>Dt-1(ηWt 一 Wt-1)	(6)
s.t. Wt = αtbt, at > 0, bt ∈ {±1}nl,	l = 1,...,L.
3
Published as a conference paper at ICLR 2017
Proposition 3.1 Let dlt-1 ≡ diag(Dlt-1), and
Wt ≡ Wt-1 - w`(wt-1) 0 dt-1.	(7)
The optimal solution of (6) can be obtained in closed-form as
α = kd[ Jwlk1, bt = sign(Wt).	⑻
kdl k1
Theorem 3.1 Assume that [dlt]k > β ∀l, k, t, the objective of (5) produced by the proximal Newton
algorithm (with closed-form update of Wt in Proposition 3.1) converges.
Note that both the loss ' and indicator function IC(∙) in (5) are not convex. Hence, convergence
analysis of the proximal Newton algorithm in (Lee et al., 2014), which is only for convex problems,
cannot be applied. Recently, Rakotomamonjy et al. (2016) proposed a nonconvex proximal Newton
extension. However, it assumes a difference-of-convex decomposition which does not hold here.
Remark 3.1 When Dlt-1 = λI, i.e., the curvature is the same for all dimensions in the lth layer,
(8) then reduces to the BWN solution in (2) In other words, BWN corresponds to using the proximal
gradient algorithm, while the proposed method corresponds to the proximal Newton algorithm with
diagonal Hessian. In composite optimization, it is known that the proximal Newton method is more
efficient than the proximal gradient algorithm (Lee et al., 2014; Rakotomamonjy et al., 2016).
Remark 3.2 When αlt = 1, (8) reduces to sign(Wlt), which is the BinaryConnect solution in (1).
From (7) and (8), each iteration first performs gradient descent along Vι'(ηWt-1) with an adaptive
learning rate 1 0 dlt-1, and then projects it to a binary solution. As discussed in (Courbariaux
et al., 2015), it is important to keep a full-precision weight during training. Hence, we replace (7)
by Wlt .WtT — V 1'(W t-1) 0 dlt-1. The whole procedure, which will be called Loss-Aware
Binarization (LAB), is shown in Algorithm 1. In steps 5 and 6, following (Li & Liu, 2016), we first
rescale input x1t-1 to the lth layer with α1, so that multiplications in dot products and convolutions
become additions.
While binarizing weights changes most multiplications to additions, binarizing both weights and
activations saves even more computations as additions are further changed to XNOR bit operations
(Hubara et al., 2016). Our Algorithm 1 can also be easily extended by binarizing the activations
with the simple sign function.
3.2 Extension to Recurrent Neural Networks
The proposed method can be easily extended to recurrent neural networks. Let x1 and h1 be the
input and hidden states, respectively, at time step (or depth) l. A typical recurrent neural network
has a recurrence of the form h1 = Wxx1 + Whσ(h1-1) + b (equivalent to the more widely known
h1 = σ(Wxx1 +Whh1-1 +b) (Pascanu et al., 2013) ). We binarize both the input-to-hidden weight
Wx and hidden-to-hidden weight Wh. Since weights are shared across time in a recurrent network,
we only need to binarize Wx and Wh once in each forward propagation. Besides weights, one can
also binarize the activations (of the inputs and hidden states) as in the previous section.
In deep networks, the backpropagated gradient takes the form of a product of Jacobian matrices (Pas-
canu et al., 2013). In a vanilla recurrent neural network,2 for activations hp and hq at depths p and q,
respectively (WhereP > q), Ihq = Qq<ι≤p ∂hh-∑1 = Qq<ι≤p W>diag(σ0(hι-ι)). TheneceSSary
condition for exploding gradients is that the largest singular value λ1(Wh) of Wh is larger than
some given constant (Pascanu et al., 2013). The following Proposition shows that for any binary
Wh, its largest singular value is lower-bounded by the square root of its dimension.
Proposition 3.2 For any W ∈ { —1, +1}m×n (m ≤ n), λι(W) ≥ √η.
2Here, we consider the vanilla recurrent neural network for simplicity. It can be shown that a similar
behavior holds for the more commonly used LSTM.
4
Published as a conference paper at ICLR 2017
Algorithm 1 Loss-Aware Binarization (LAB) for training a feedforward neural network.
Input: Minibatch {(xt0, yt)}, current full-precision weights {wlt}, first moment {mlt-1}, second
moment {vlt-1}, and learning rate ηt.
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
Forward Propagation
for l = 1 to L do
kdt-1Θwtkι.
Mt-IkI ;
αlt
blt = sign(wlt);
rescale the layer-l input: xtt-ι = a/xf-i；
compute Zt with input xf-ι and binary weight bf;
apply batch-normalization and nonlinear activation to zlt to obtain xlt ；
end for
compute the loss ` using xtL and yt ；
Backward Propagation
initialize output layer,s activation,s gradient d^r;
for l = L to 2 do
compute ∂^ using 藏，Oi and bt；
end for
Update parameters using Adam
for l = 1 to L do
compute gradients Vι'(w^t) using ∂χ and xf-ι;
update first moment mlt =βιmt-1 + (1- βι)Vι'(W^t);
update second moment vlt = β2vt-1 + (1 — β2)(V1'(W^t) Θ Vl'(w^t));
compute unbiased first moment mf = mf∕(1 一 βf);
compute unbiased second moment Vt = vlt/(1 - β2t );
compute current curvature matrix df =今 61 + Pvf);
update full-precision weights wf+1 = Wt — mf 0 df;
update learning rate ηt+1 = UpdateRule(ηt, t + 1);
end for
Thus, with weight binarization as in BinaryConnect, the exploding gradient problem becomes more
severe as the weight matrices are often large. On the other hand, recall that λ1(cWh) = cλ1(Wh)
for any non-negative c. The proposed method alleviates this exploding gradient problem by adap-
tively learning the scaling parameter αh .
4	Experiments
In this section, we perform experiments on the proposed binarization scheme with both feedforward
networks (Sections 4.1 and 4.2) and recurrent neural networks (Sections 4.3 and 4.4).
4.1	Feedforward Neural Networks
We compare the original full-precision network (without binarization) with the following weight-
binarized networks: (i) BinaryConnect; (ii) Binary-Weight-Network (BWN); and (iii) the proposed
Loss-Aware Binarized network (LAB). We also compare with networks having both weights and
activations binarized:3 (i) BinaryNeuralNetwork (BNN) (Hubara et al., 2016), the weight-and-
activation binarized counterpart of BinaryConnect; (ii) XNOR-Network (XNOR) (Rastegari et al.,
2016), the counterpart of BWN; (iii) LAB2, the counterpart of the proposed method, which binarizes
weights using proximal Newton method and binarizes activations using a simple sign function.
The setup is similar to that in Courbariaux et al. (2015). We do not perform data augmentation or
unsupervised pretraining. Experiments are performed on three commonly used data sets:
3We use the straight-through-estimator (Hubara et al., 2016) to compute the gradient involving the sign
function.
5
Published as a conference paper at ICLR 2017
1.	MNIST : This contains 28 × 28 gray images from ten digit classes. We use 50000 images
for training, another 10000 for validation, and the remaining 10000 for testing. We use the
4-layer model:
784FC-2048FC-2048FC-2048FC- 10SV M,
where FC is a fully-connected layer, and SV M is a L2-SVM output layer using the square
hinge loss. Batch normalization, with a minibatch size 100, is used to accelerate learning.
The maximum number of epochs is 50. The learning rate for the weight-binarized (resp.
weight-and-activation-binarized) network starts at 0.01 (resp. 0.005), and decays by a fac-
tor of 0.1 at epochs 15 and 25.
2.	CIFAR-10: This contains 32 × 32 color images from ten object classes. We use 45000
images for training, another 5000 for validation, and the remaining 10000 for testing. The
images are preprocessed with global contrast normalization and ZCA whitening. We use
the VGG-like architecture:
(2×128C3)-MP2-(2×256C3)-MP2-(2×512C3)-MP2-(2×1024FC)-10SV M,
where C3 is a 3 × 3 ReLU convolution layer, and MP2 is a 2 × 2 max-pooling layer. Batch
normalization, with a minibatch size of 50, is used. The maximum number of epochs is
200. The learning rate for the weight-binarized (resp. weight-and-activation-binarized)
network starts at 0.03 (resp. 0.02), and decays by a factor of 0.5 after every 15 epochs.
3.	SVHN: This contains 32 × 32 color images from ten digit classes. We use 598388 images
for training, another 6000 for validation, and the remaining 26032 for testing. The images
are preprocessed with global and local contrast normalization. The model used is:
(2×64C3)-MP2-(2×128C3)-MP2-(2×256C3)-MP2-(2×1024FC)-10SV M.
Batch normalization, with a minibatch size of 50, is used. The maximum number of epochs
is 50. The learning rate for the weight-binarized (resp. weight-and-activation-binarized)
network starts at 0.001 (resp. 0.0005), and decays by a factor of 0.1 at epochs 15 and 25.
Since binarization is a form of regularization (Courbariaux et al., 2015), we do not use other reg-
ularization methods (like Dropout). All the weights are initialized as in (Glorot & Bengio, 2010).
Adam (Kingma & Ba, 2015) is used as the optimization solver.
Table 1 shows the test classification error rates, and Figure 1 shows the convergence of LAB. As can
be seen, the proposed LAB achieves the lowest error on MNIST and SVHN. It even outperforms the
full-precision network on MNIST, as weight binarization serves as a regularizer. With the use of cur-
vature information, LAB outperforms BinaryConnect and BWN. On CIFAR-10, LAB is slightly out-
performed by BinaryConnect, but is still better than the full-precision network. Among the schemes
that binarize both weights and activations, LAB2 also outperforms BNN and the XNOR-Network.
Table 1: Test error rates (%) for feedforward neural network models.
	MNIST	CIFAR-10	SVHN
(no binarization)	full-precision	1.190	-11.900	2.277
BinaryConnect	1.280	9.860	2.450
(binarize weights)	BWN	1.310	-10.510	2.535
LAB	1.180	-10.500	2.354
BNN 二	1.470	12.870	3.500
(binarize weights and activations)	XNOR	1.530	-12.620	3.435
	 LAB2	1.380	12.280	3.362
4.2	Varying the Number of Filters in CNN
As in Zhou et al. (2016), we study sensitivity to network width by varying the number of filters K
on the SVHN data set. As in Section 4.1, we use the model
(2 × KC3) -MP2- (2 × 2KC3) -MP2- (2 × 4KC3) -MP2- (2 × 1024FC) - 10SV M.
Results are shown in Table 2. Again, the proposed LAB has the best performance. Moreover, as
the number of filters increases, degradation due to binarization becomes less severe. This suggests
6
Published as a conference paper at ICLR 2017
(a) MNIST.
(b) CIFAR-10.
(c) SVHN.
Figure 1: Convergence of LAB with feedforward neural networks.
that more powerful models (e.g., CNN with more filters, standard feedforward networks with more
hidden units) are less susceptible to performance degradation due to binarization. We speculate that
this is because large networks often have larger-than-needed capacities, and so are less affected by
the limited expressiveness of binary weights. Another related reason is that binarization acts as
regularization, and so contributes positively to the performance.
Table 2: Test error rates (%) on SVHN, for CNNs with different numbers of filters. Number in
brackets is the difference between the errors of the binarized scheme and the full-precision network.
	K = 16	K = 32	K = 64	K = 128
full-precision	2.738	2.585	2.277	2.146
BinaryConnect	3.200 (0.462Γ	2.777 (0W=	2.450 (0.173)	2.315 (0.169Γ
BWN	3.119(0.461)	2.743 (0.158)	2.535 (0.258)	2.319(0.173)
LAB	3.050 (0.3121	2.742 (0.157Γ	2.354 (0.077)	2.200 (0.0541
4.3	Recurrent Neural Networks
In this section, we perform experiments on the popular long short-term memory (LSTM) (Hochre-
iter & Schmidhuber, 1997). Performance is evaluated in the context of character-level language
modeling. The LSTM takes as input a sequence of characters, and predicts the next character at
each time step. The training objective is the cross-entropy loss over all target sequences. Following
Karpathy et al. (2016), we use two data sets (with the same training/validation/test set splitting): (i)
Leo Tolstoy’s War and Peace, which consists of 3258246 characters of almost entirely English text
with minimal markup and has a vocabulary size of 87; and (ii) the source code of the Linux Kernel,
which consists of 6206996 characters and has a vocabulary size of 101.
We use a one-layer LSTM with 512 cells. The maximum number of epochs is 200, and the number
of time steps is 100. The initial learning rate is 0.002. After 10 epochs, it is decayed by a factor of
0.98 after each epoch. The weights are initialized uniformly in [0.08, 0.08]. After each iteration, the
gradients are clipped to the range [-5, 5], and all the updated weights are clipped to [-1, 1]. For the
weight-and-activation-binarized networks, we do not binarize the inputs, as they are one-hot vectors
in this language modeling task.
Table 3 shows the testing cross-entropy values. As in Section 4.1, the proposed LAB outperforms
other weight binarization schemes, and is even better than the full-precision network on the Linux
Kernel data set. BinaryConnect does not work well here because of the problem of exploding gra-
dients (see Section 3.2 and more results in Section 4.4). On the other hand, BWN and the proposed
LAB scale the binary weight matrix and perform better. LAB also performs better than BWN as
curvature information is considered. Similarly, among schemes that binarize both weights and acti-
vations, the proposed LAB2 also outperforms BNN and XNOR-Network.
4.4	Varying the Number of Time Steps in LSTM
In this experiment, we study the sensitivity of the binarization schemes with varying numbers of
unrolled time steps (T S) in LSTM. Results are shown in Table 4. Again, the proposed LAB has the
best performance. When T S = 10, the LSTM is relatively shallow, and all binarization schemes
have similar performance as the full-precision network. When T S ≥ 50, BinaryConnect fails,
7
Published as a conference paper at ICLR 2017
Table 3: Testing cross-entropy values of LSTM.
	War and Peace	Linux Kernel
(no binarization)	full-precision	1.268	1.329	—
BinaryConnect	2.942 =	3.532 二
(binarize weights)	BWN	1313	1307
LAB	1.291	1305
BNN	二	3.050 =	3.624 二
(binarize weights and activations)	XNOR	1.424	1.426
LAB2	1.376 —	1.409	—
while BWN and the proposed LAB perform better (as discussed in Section 3.2). Figure 2 shows the
distributions of the hidden-to-hidden weight gradients for TS = 10 and 100. As can be seen, while
all models have similar gradient distributions at TS = 10, the gradient values in BinaryConnect are
much higher than those of the other algorithms for the deeper network (TS = 100).
Table 4: Testing cross-entropy on War and Peace, for LSTMs with different time steps (T S). Differ-
ence between cross-entropies of binarized scheme and full-precision network is shown in brackets.
	TS = 10	TS = 50	TS = 100	TS = 150
full-precision	1.527 —	1.310 —	1.268	—	1.249
BinaryConnect	1.528 (0.001T=	2.980 (1.670Γ	2.942 (1.674T=	2.872 (1.623)
BWN	1.532 (0.005)	1.325 (0.015)	1.313 (0.045)	1.311 (0.062)
LAB	1.527 (0.000^T	1.324 (0.014^F	1.291 (0.0231	1.285 (0.036)
Figure 2: Distribution of weight gradients on War and Peace, for LSTMs with different time steps.
Note from Table 4 that as the time step increases, all except BinaryConnect show better performance.
However, degradation due to binarization also becomes more severe. This is because the weights
are shared across time steps. Hence, error due to binarization also propagates across time.
5	Conclusion
In this paper, we propose a binarization algorithm that directly considers its effect on the loss during
binarization. The binarized weights are obtained using proximal Newton algorithm with diagonal
Hessian approximation. The proximal step has an efficient closed-form solution, and the second-
order information in the Hessian can be readily obtained from the Adam optimizer. Experiments
show that the proposed algorithm outperforms existing binarization schemes, has comparable per-
formance as the original full-precision network, and is also robust for wide and deep networks.
Acknowledgments
This research was supported in part by the Research Grants Council of the Hong Kong Special
Administrative Region (Grant 614513). We thank Yongqi Zhang for helping with the experiments,
and developers of Theano (Theano Development Team, 2016), Pylearn2 (Goodfellow et al., 2013)
and Lasagne. We also thank NVIDIA for the support of Titan X GPU.
8
Published as a conference paper at ICLR 2017
References
M. Courbariaux, Y. Bengio, and J.P. David. BinaryConnect: Training deep neural networks with
binary weights during propagations. In NIPS, pp. 3105-3113, 2015.
Y. Dauphin, H. de Vries, and Y. Bengio. Equilibrated adaptive learning rates for non-convex opti-
mization. In NIPS, pp. 1504-1512, 2015a.
Y. Dauphin, H. de Vries, J. Chung, and Y. Bengio. RMSprop and equilibrated adaptive learning
rates for non-convex optimization. Technical Report arXiv:1502.04390, 2015b.
J. Duchi, E. Hazan, and Y. Singer. Adaptive subgradient methods for online learning and stochastic
optimization. Journal of Machine Learning Research, 12:2121-2159, 2011.
X. Glorot and Y. Bengio. Understanding the difficulty of training deep feedforward neural networks.
In AISTAT, pp. 249-256, 2010.
Y. Gong, L. Liu, M. Yang, and L. Bourdev. Compressing deep convolutional networks using vector
quantization. Technical Report arXiv:1412.6115, 2014.
I.J. Goodfellow, D. Warde-Farley, P. Lamblin, V. Dumoulin, M. Mirza, R. Pascanu, J. Bergstra,
F. Bastien, and Y. Bengio. Pylearn2: a machine learning research library. arXiv preprint
arXiv:1308.4214, 2013.
S. Han, H. Mao, and W.J. Dally. Deep compression: Compressing deep neural network with pruning,
trained quantization and Huffman coding. In ICLR, 2016.
S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural Computation, pp. 1735-1780,
1997.
I.	Hubara, M. Courbariaux, D. Soudry, R. El-Yaniv, and Y. Bengio. Binarized neural networks. In
NIPS, pp. 4107-4115, 2016.
A. Karpathy, J. Johnson, and F.-F. Li. Visualizing and understanding recurrent networks. In ICLR,
2016.
Y.-D. Kim, E. Park, S. Yoo, T. Choi, L. Yang, and D. Shin. Compression of deep convolutional
neural networks for fast and low power mobile applications. In ICLR, 2016.
D. Kingma and J. Ba. Adam: A method for stochastic optimization. In ICLR, 2015.
Y. LeCun, Y. Bengio, and G. Hinton. Deep learning. Nature, 521(7553):436-444, 2015.
J.D. Lee, Y. Sun, and M.A. Saunders. Proximal Newton-type methods for minimizing composite
functions. SIAM Journal on Optimization, 24(3):1420-1443, 2014.
F. Li and B. Liu. Ternary weight networks. Technical Report arXiv:1605.04711, 2016.
Z. Lin, M. Courbariaux, R. Memisevic, and Y. Bengio. Neural networks with few multiplications.
In ICLR, 2016.
J. Martens and I. Sutskever. Training deep and recurrent networks with Hessian-free optimization.
In Neural Networks: Tricks of the trade, pp. 479-535. Springer, 2012.
A. Novikov, D. Podoprikhin, A. Osokin, and D.P. Vetrov. Tensorizing neural networks. In NIPS, pp.
442-450, 2015.
R. Pascanu and Y. Bengio. Revisiting natural gradient for deep networks. In ICLR, 2014.
R. Pascanu, T. Mikolov, and Y. Bengio. On the difficulty of training recurrent neural networks. In
ICLR, pp. 1310-1318, 2013.
A. Rakotomamonjy, R. Flamary, and G. Gasso. DC proximal Newton for nonconvex optimization
problems. IEEE Transactions on Neural Networks and Learning Systems, 27(3):636-647, 2016.
9
Published as a conference paper at ICLR 2017
M. Rastegari, V. Ordonez, J. Redmon, and A. Farhadi. XNOR-Net: ImageNet classification using
binary convolutional neural networks. In ECCV, 2016.
Theano Development Team. Theano: A Python framework for fast computation of mathematical
expressions. arXiv e-prints, abs/1605.02688, May 2016. URL http://arxiv.org/abs/
1605.02688.
T. Tieleman and G. Hinton. Lecture 6.5-rmsprop: Divide the gradient by a running average of its
recent magnitude, 2012.
AL Yuille and A. Rangarajan. The concave-convex procedure (CCCP). NIPS, 2:1033-1040, 2002.
M.D. Zeiler. ADADELTA: An adaptive learning rate method. Technical Report arXiv:1212.5701,
2012.
S. Zhou, Z. Ni, X. Zhou, H. Wen, Y. Wu, and Y. Zou. DoReFa-Net: Training low bitwidth convolu-
tional neural networks with low bitwidth gradients. Technical Report arXiv:1606.06160, 2016.
10
Published as a conference paper at ICLR 2017
A Proof of Proposition 3.1
V'(wt-1)>(wt - WtT) + 1(wt - WtT)>Dt-1(Wt - WtT)
=2 XX (q(dt-1)> (Wt-(WtT- V1'(Wt-1) 0 dt-1)))2 + C1
2 l=1
where c1
=1 X (jmtT)T (Wt- Wt)) + ci
l=i
=2 X (q mt-1)，(atbt - Wt)) + ci,
2 l=i
-2 (q(dt-i)>(Vι'(Wt-i) 0 dt-i)) . Since a； > 0, d： A 0,∀l = 1, 2,...,L,we
have blt = sign(Wlt). Moreover,
L L
2 X(VZmtT)>(atbt - Wt ))2+ci
l=1
2 X (q(dtT)T(IatI TWtll)) + ci
L1
T? 2 kdl	ki(al ) - kdl	® Wl kial + c2,
l=1
i kdlt-1wltk12	t	kdlt-1wltk1
where c2 = ci	一 ⅛	l ,一「1. Thus, the optimal at is	l ,一「	.
2	kdl k1	l	kdl k1
B	Proof of Theorem 3.1
Let α = [a；..., aL]>, and denote the objective in (3) by F(W, α). As Wt is the minimizer in (6),
we have
'(Wt-i) + V'(Wt-i)>(Wt - Wt-i) + 1(Wt - Wt-i)>DtT(Wt - Wt-i) ≤ '(Wt-i).	(9)
From Assumption A1, we have
'(Wt) ≤ '(Wt-i) + v`(wt-i)>(Wt - Wt-i) + β IlWt - Wt-i∣∣2.	(10)
Using (9) and (10), we obtain
'(Wt) ≤ '(Wt-i) - 1(Wt - WtT)T(Dt-i - βi)(wt - WtT)
≤ '(Wt-i) - mink，l([dt-i]k - β) ∣∣wt - Wt-i∣∣2.
Let c3 = mink,l,t([dlt-i]k - β) > 0. Then,
'(Wt) ≤'(Wt-i) - C3∣∣wt - Wt-i∣∣2.	(11)
From Assumption A2, ' is bounded from below. Together with the fact that {'(Wt)} is monoton-
ically decreasing from (11), the sequence {'(Wt)} converges, thus the sequence {F(Wt, at)} also
converges.
C Proof of Proposition 3.2
Letthe singulars values of W be λi(W) ≥ λ2(W) ≥ ∙∙∙ ≥ λm(W).
λ2i(W) ≥
1m	1
一X X2(W)——kWIlF
mm
i=i
1
—mn = n.
m
Thus, λi(W) ≥ √n.
11