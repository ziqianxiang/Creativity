Published as a conference paper at ICLR 2017
DeepCoder: Learning to Write Programs
Matej Balog*
Department of Engineering
University of Cambridge
Alexander L. Gaunt, Marc Brockschmidt,
Sebastian Nowozin, Daniel Tarlow
Microsoft Research
Ab stract
We develop a first line of attack for solving programming competition-style prob-
lems from input-output examples using deep learning. The approach is to train a
neural network to predict properties of the program that generated the outputs from
the inputs. We use the neural network’s predictions to augment search techniques
from the programming languages community, including enumerative search and
an SMT-based solver. Empirically, we show that our approach leads to an order
of magnitude speedup over the strong non-augmented baselines and a Recurrent
Neural Network approach, and that we are able to solve problems of difficulty
comparable to the simplest problems on programming competition websites.
1	Introduction
A dream of artificial intelligence is to build systems that can write computer programs. Recently,
there has been much interest in program-like neural network models (Graves et al., 2014; Weston
et al., 2015; Kurach et al., 2015; Joulin & Mikolov, 2015; Grefenstette et al., 2015; Sukhbaatar
et al., 2015; Neelakantan et al., 2016; Kaiser & Sutskever, 2016; Reed & de Freitas, 2016; Zaremba
et al., 2016; Graves et al., 2016), but none of these can write programs; that is, they do not generate
human-readable source code. Only very recently, Riedel et al. (2016); Bunel et al. (2016); Gaunt
et al. (2016) explored the use of gradient descent to induce source code from input-output examples
via differentiable interpreters, and Ling et al. (2016) explored the generation of source code from
unstructured text descriptions. However, Gaunt et al. (2016) showed that differentiable interpreter-
based program induction is inferior to discrete search-based techniques used by the programming
languages community. We are then left with the question of how to make progress on program
induction using machine learning techniques.
In this work, we propose two main ideas: (1) learn to induce programs; that is, use a corpus of
program induction problems to learn strategies that generalize across problems, and (2) integrate
neural network architectures with search-based techniques rather than replace them.
In more detail, we can contrast our approach to existing work on differentiable interpreters. In dif-
ferentiable interpreters, the idea is to define a differentiable mapping from source code and inputs
to outputs. After observing inputs and outputs, gradient descent can be used to search for a pro-
gram that matches the input-output examples. This approach leverages gradient-based optimization,
which has proven powerful for training neural networks, but each synthesis problem is still solved
independently—solving many synthesis problems does not help to solve the next problem.
We argue that machine learning can provide significant value towards solving Inductive Program
Synthesis (IPS) by re-casting the problem as a big data problem. We show that training a neural
network on a large number of generated IPS problems to predict cues from the problem description
can help a search-based technique. In this work, we focus on predicting an order on the program
space and show how to use it to guide search-based techniques that are common in the programming
languages community. This approach has three desirable properties: first, we transform a difficult
search problem into a supervised learning problem; second, we soften the effect of failures of the
neural network by searching over program space rather than relying on a single prediction; and third,
the neural network’s predictions are used to guide existing program synthesis systems, allowing us to
use and improve on the best solvers from the programming languages community. Empirically, we
*Also affiliated With Max-Planck Institute for Intelligent Systems, Tubingen, Germany. Work done while
author was an intern at Microsoft Research.
1
Published as a conference paper at ICLR 2017
show orders-of-magnitude improvements over optimized standard search techniques and a Recurrent
Neural Network-based approach to the problem.
In summary, we define and instantiate a framework for using deep learning for program synthesis
problems like ones appearing on programming competition websites. Our concrete contributions are:
1.	defining a programming language that is expressive enough to include real-world program-
ming problems while being high-level enough to be predictable from input-output examples;
2.	models for mapping sets of input-output examples to program properties; and
3.	experiments that show an order of magnitude speedup over standard program synthesis
techniques, which makes this approach feasible for solving problems of similar difficulty as
the simplest problems that appear on programming competition websites.
2	Background on Inductive Program Synthesis
We begin by providing background on Inductive Program Synthesis, including a brief overview of
how it is typically formulated and solved in the programming languages community.
The Inductive Program Synthesis (IPS) problem is the following: given input-output examples,
produce a program that has behavior consistent with the examples.
Building an IPS system requires solving two problems. First, the search problem: to find consistent
programs we need to search over a suitable set of possible programs. We need to define the set
(i.e., the program space) and search procedure. Second, the ranking problem: if there are multiple
programs consistent with the input-output examples, which one do we return? Both of these problems
are dependent on the specifics of the problem formulation. Thus, the first important decision in
formulating an approach to program synthesis is the choice of a Domain Specific Language.
Domain Specific Languages (DSLs). DSLs are programming languages that are suitable for a
specialized domain but are more restrictive than full-featured programming languages. For example,
one might disallow loops or other control flow, and only allow string data types and a small number of
primitive operations like concatenation. Most of program synthesis research focuses on synthesizing
programs in DSLs, because full-featured languages like C++ enlarge the search space and complicate
synthesis. Restricted DSLs can also enable more efficient special-purpose search algorithms. For
example, if a DSL only allows concatenations of substrings of an input string, a dynamic program-
ming algorithm can efficiently search over all possible programs (Polozov & Gulwani, 2015). The
choice of DSL also affects the difficulty of the ranking problem. For example, in a DSL without if
statements, the same algorithm is applied to all inputs, reducing the number of programs consistent
with any set of input-output examples, and thus the ranking problem becomes easier. Of course, the
restrictiveness of the chosen DSL also determines which problems the system can solve at all.
Search Techniques. There are many techniques for searching for programs consistent with input-
output examples. Perhaps the simplest approach is to define a grammar and then enumerate all
derivations of the grammar, checking each one for consistency with the examples. This approach
can be combined with pruning based on types and other logical reasoning (Feser et al., 2015). While
simple, these approaches can be implemented efficiently, and they can be surprisingly effective.
In restricted domains such as the concatenation example discussed above, special-purpose algorithms
can be used. FlashMeta (Polozov & Gulwani, 2015) describes a framework for DSLs which allow
decomposition of the search problem, e.g., where the production of an output string from an input
string can be reduced to finding a program for producing the first part of the output and concatenating
it with a program for producing the latter part of the output string.
Another class of systems is based on Satisfiability Modulo Theories (SMT) solving. SMT combines
SAT-style search with theories like arithmetic and inequalities, with the benefit that theory-dependent
subproblems can be handled by special-purpose solvers. For example, a special-purpose solver can
easily find integers x, y such that x < y and y < -100 hold, whereas an enumeration strategy may
need to consider many values before satisfying the constraints. Many program synthesis engines
based on SMT solvers exist, e.g., Sketch (Solar-Lezama, 2008) and Brahma (Gulwani et al., 2011).
They convert the semantics of a DSL into a set of constraints between variables representing the
2
Published as a conference paper at ICLR 2017
program and the input-output values, and then call an SMT solver to find a satisfying setting of
the program variables. This approach shines when special-purpose reasoning can be leveraged, but
complex DSLs can lead to very large constraint problems where constructing and manipulating the
constraints can be a lot slower than an enumerative approach.
Finally, stochastic local search can be employed to search over program space, and there is a long
history of applying genetic algorithms to this problem. One of the most successful recent examples
is the STOKE super-optimization system (Schkufza et al., 2016), which uses stochastic local search
to find assembly programs that have the same semantics as an input program but execute faster.
Ranking. While we focus on the search problem in this work, we briefly mention the ranking
problem here. A popular choice for ranking is to choose the shortest program consistent with input-
output examples (Gulwani, 2016). A more sophisticated approach is employed by FlashFill (Singh
& Gulwani, 2015). It works in a manner similar to max-margin structured prediction, where known
ground truth programs are given, and the learning task is to assign scores to programs such that the
ground truth programs score higher than other programs that satisfy the input-output specification.
3	Learning Inductive Program Synthesis (LIPS)
In this section we outline the general approach that we follow in this work, which we call Learning
Inductive Program Synthesis (LIPS). The details of our instantiation of LIPS appear in Sect. 4. The
components of LIPS are (1) a DSL specification, (2) a data-generation procedure, (3) a machine learn-
ing model that maps from input-output examples to program attributes, and (4) a search procedure
that searches program space in an order guided by the model from (3). The framework is related to
the formulation of Menon et al. (2013); the relationship and key differences are discussed in Sect. 6.
(1)	DSL and Attributes. The choice of DSL is important in LIPS, just as it is in any program
synthesis system. It should be expressive enough to capture the problems that we wish to solve, but
restricted as much as possible to limit the difficulty of the search. In LIPS we additionally specify
an attribute function A that maps programs P of the DSL to finite attribute vectors a = A(P).
(Attribute vectors of different programs need not have equal length.) Attributes serve as the link
between the machine learning and the search component of LIPS: the machine learning model
predicts a distribution q(a | E), where E is the set of input-output examples, and the search procedure
aims to search over programs P as ordered by q(A(P) | E). Thus an attribute is useful if it is both
predictable from input-output examples, and if conditioning on its value significantly reduces the
effective size of the search space.
Possible attributes are the (perhaps position-dependent) presence or absence of high-level functions
(e.g., does the program contain or end in a call to Sort). Other possible attributes include control
flow templates (e.g., the number of loops and conditionals). In the extreme case, one may set A
to the identity function, in which case the attribute is equivalent to the program; however, in our
experiments we find that performance is improved by choosing a more abstract attribute function.
(2)	Data Generation. Step 2 is to generate a dataset ((P(n), a(n), E(n)))nN=1 of programs P(n) in
the chosen DSL, their attributes a(n), and accompanying input-output examples E(n). Different ap-
proaches are possible, ranging from enumerating valid programs in the DSL and pruning, to training
a more sophisticated generative model of programs in the DSL. The key in the LIPS formulation is
to ensure that it is feasible to generate a large dataset (ideally millions of programs).
(3)	Machine Learning Model. The machine learning problem is to learn a distribution of at-
tributes given input-output examples, q(a | E). There is freedom to explore a large space of models,
so long as the input component can encode E, and the output is a proper distribution over attributes
(e.g., if attributes are a fixed-size binary vector, then a neural network with independent sigmoid
outputs is appropriate; if attributes are variable size, then a recurrent neural network output could be
used). Attributes are observed at training time, so training can use a maximum likelihood objective.
(4)	Search. The aim of the search component is to interface with an existing solver, using the
predicted q(a | E) to guide the search. We describe specific approaches in the next section.
3
Published as a conference paper at ICLR 2017
4	DeepCoder
Here we describe DeepCoder, our instantiation of LIPS including a choice of DSL, a data generation
strategy, models for encoding input-output sets, and algorithms for searching over program space.
4.1	Domain Specific Language and Attributes
We consider binary attributes indicating the presence or absence of high-level functions in the target
program. To make this effective, the chosen DSL needs to contain constructs that are not so low-level
that they all appear in the vast majority of programs, but at the same time should be common enough
so that predicting their occurrence from input-output examples can be learned successfully.
Following this observation, our DSL is loosely inspired by query languages such as SQL or LINQ,
where high-level functions are used in sequence to manipulate data. A program in our DSL is a
sequence of function calls, where the result of each call initializes a fresh variable that is either a
singleton integer or an integer array. Functions can be applied to any of the inputs or previously
computed (intermediate) variables. The output of the program is the return value of the last function
call, i.e., the last variable. See Fig. 1 for an example program of length T = 4 in our DSL.
a J [int]	An input-output example:
b J FILTER (<0) a	Input:
c J MAP (*4) b	[-17, -3, 4, 11, 0, -5, -9, 13, 6, 6, -8, 11]
d J SORT c	Output:
e J REVERSE d	[-12, -20, -32, -36, -68]
Figure 1: An example program in our DSL that takes a single integer array as its input.
Overall, our DSL contains the first-order functions Head, Last, Take, Drop, Access, Minimum,
Maximum, Reverse, Sort, Sum, and the higher-order functions Map, Filter, Count, Zip-
With, Scanl1. Higher-order functions require suitable lambda functions for their behavior to be
fully specified: for Map our DSL provides lambdas (+1), (-1), (*2), (/2), (*(-1)), (**2),
(*3), (/3), (*4), (/4); for Filter and Count there are predicates (>0), (<0), (%2==0),
(%2==1) and for ZipWith and Scanl1 the DSL provides lambdas (+), (-), (*), Min, Max.
A description of the semantics of all functions is provided in Appendix F.
Note that while the language only allows linear control flow, many of its functions do perform
branching and looping internally (e.g., Sort, Count, ...). Examples of more sophisticated programs
expressible in our DSL, which were inspired by the simplest problems appearing on programming
competition websites, are shown in Appendix A.
4.2	Data Generation
To generate a dataset, we enumerate programs in the DSL, heuristically pruning away those with
easily detectable issues such as a redundant variable whose value does not affect the program output,
or, more generally, existence of a shorter equivalent program (equivalence can be overapproximated
by identical behavior on randomly or carefully chosen inputs). To generate valid inputs for a program,
we enforce a constraint on the output value bounding integers to some predetermined range, and then
propagate these constraints backward through the program to obtain a range of valid values for each
input. If one of these ranges is empty, we discard the program. Otherwise, input-output pairs can be
generated by picking inputs from the pre-computed valid ranges and executing the program to obtain
the output values. The binary attribute vectors are easily computed from the program source codes.
4.3	Machine Learning Model
Observe how the input-output data in Fig. 1 is informative of the functions appearing in the program:
the values in the output are all negative, divisible by 4, they are sorted in decreasing order, and they
happen to be multiples of numbers appearing in the input. Our aim is to learn to recognize such
patterns in the input-output examples, and to leverage them to predict the presence or absence of
4
Published as a conference paper at ICLR 2017
individual functions. We employ neural networks to model and learn the mapping from input-output
examples to attributes. We can think of these networks as consisting of two parts:
1.	an encoder: a differentiable mapping from a set of M input-output examples generated by
a single program to a latent real-valued vector, and
2.	a decoder: a differentiable mapping from the latent vector representing a set of M input-
output examples to predictions of the ground truth program’s attributes.
For the encoder we use a simple feed-forward architecture. First, we represent the input and output
types (singleton or array) by a one-hot-encoding, and we pad the inputs and outputs to a maximum
length L with a special NULL value. Second, each integer in the inputs and in the output is mapped
to a learned embedding vector of size E = 20. (The range of integers is restricted to a finite range
and each embedding is parametrized individually.) Third, for each input-output example separately,
we concatenate the embeddings of the input types, the inputs, the output type, and the output into a
single (fixed-length) vector, and pass this vector through H = 3 hidden layers containing K = 256
sigmoid units each. The third hidden layer thus provides an encoding of each individual input-output
example. Finally, for input-output examples in a set generated from the same program, we pool these
representations together by simple arithmetic averaging. See Appendix C for more details.
The advantage of this encoder lies in its simplicity, and we found it reasonably easy to train. A
disadvantage is that it requires an upper bound L on the length of arrays appearing in the input and
output. We confirmed that the chosen encoder architecture is sensible in that it performs empirically
at least as well as an RNN encoder, a natural baseline, which may however be more difficult to train.
DeepCoder learns to predict presence or absence of individual functions of the DSL. We shall see
this can already be exploited by various search techniques to large computational gains. We use a
decoder that pre-multiplies the encoding of input-output examples by a learned C × K matrix, where
C = 34 is the number of functions in our DSL (higher-order functions and lambdas are predicted
independently), and treats the resulting C numbers as log-unnormalized probabilities (logits) of each
function appearing in the source code. Fig. 2 shows the predictions a trained neural network made
from 5 input-output examples for the program shown in Fig. 1.
I-jN3s
I-UjMd-Z
SSWUDV
doα
号一
WSHWAaH
IHOS
≡n
⅝≡
,ism
osɪ
(ONNZ⅝)
(innz⅝)
(0Λ)
(0Λ)
y
(W)
()
S
(z∙*)
E
F)
()
(1+)
WnW-XVW
Wnw-N-W
IMnoU
XVW
Z-S
Figure 2: Neural network predicts the probability of each function appearing in the source code.
4.4	Search
One of the central ideas of this work is to use a neural network to guide the search for a program
consistent with a set of input-output examples instead of directly predicting the entire source code.
This section briefly describes the search techniques and how they integrate the predicted attributes.
Depth-first search (DFS). We use an optimized version of DFS to search over programs with a
given maximum length T (see Appendix D for details). When the search procedure extends a partial
program by a new function, it has to try the functions in the DSL in some order. At this point DFS
can opt to consider the functions as ordered by their predicted probabilities from the neural network.
“Sort and add” enumeration. A stronger way of utilizing the predicted probabilities of functions
in an enumerative search procedure is to use a Sort and add scheme, which maintains a set of active
functions and performs DFS with the active function set only. Whenever the search fails, the next
most probable function (or several) are added to the active set and the search restarts with this larger
active set. Note that this scheme has the deficiency of potentially re-exploring some parts of the
search space several times, which could be avoided by a more sophisticated search procedure.
Sketch. Sketch (Solar-Lezama, 2008) is a successful SMT-based program synthesis tool from the
programming languages research community. While its main use case is to synthesize programs
5
Published as a conference paper at ICLR 2017
by filling in “holes” in incomplete source code so as to match specified requirements, it is flexible
enough for our use case as well. The function in each step and its arguments can be treated as
the “holes”, and the requirement to be satisfied is consistency with the provided set of input-output
examples. Sketch can utilize the neural network predictions in a Sort and add scheme as described
above, as the possibilities for each function hole can be restricted to the current active set.
λ2. λ2 (Feser et al., 2015) is a program synthesis tool from the programming languages community
that combines enumerative search with deduction to prune the search space. It is designed to infer
small functional programs for data structure manipulation from input-output examples, by combining
functions from a provided library. λ2 can be used in our framework using a Sort and add scheme as
described above by choosing the library of functions according to the neural network predictions.
4.5	Training Loss Function
We use the negative cross entropy loss to train the neural network described in Sect. 4.3, so that its
predictions about each function can be interpreted as marginal probabilities. The LIPS framework
dictates learning q(a | E), the joint distribution of all attributes a given the input-output examples,
and it is not clear a priori how much DeepCoder loses by ignoring correlations between functions.
However, under the simplifying assumption that the runtime of searching for a program of length T
with C functions made available to a search routine is proportional to CT, the following result for
Sort and add procedures shows that their runtime can be optimized using marginal probabilities.
Lemma 1. For any fixed program length T, the expected total runtime of a Sort and add search
scheme can be upper bounded by a quantity that is minimized by adding the functions in the order of
decreasing true marginal probabilities.
Proof. Predicting source code functions from input-output examples can be seen as a multi-label
classification problem, where each set of input-output examples is associated with a set of relevant
labels (functions appearing in the ground truth source code). Dembczynski et al. (2010) showed
that in multi-label classification under a so-called Rank loss, it is Bayes optimal to rank the labels
according to their marginal probabilities. If the runtime of search with C functions is proportional
to CT , the total runtime of a Sort and add procedure can be monotonically transformed so that it is
upper bounded by this Rank loss. See Appendix E for more details.	□
5	Experiments
In this section we report results from two categories of experiments. Our main experiments (Sect. 5.1)
show that the LIPS framework can lead to significant performance gains in solving IPS by demon-
strating such gains with DeepCoder. In Sect. 5.2 we illustrate the robustness of the method by
demonstrating a strong kind of generalization ability across programs of different lengths.
5.1	DeepCoder Compared to Baselines
We trained a neural network as described in Sect. 4.3 to predict used functions from input-output
examples and constructed a test setofP = 500 programs, guaranteed to be semantically disjoint from
all programs on which the neural network was trained (similarly to the equivalence check described
in Sect. 4.2, we have ensured that all test programs behave differently from all programs used during
training on at least one input). For each test program we generated M = 5 input-output examples
involving integers of magnitudes up to 256, passed the examples to the trained neural network, and
fed the obtained predictions to the search procedures from Sect. 4.4. We also considered a RNN-based
decoder generating programs using beam search (see Sect. 5.3 for details). To evaluate DeepCoder,
we then recorded the time the search procedures needed to find a program consistent with the M
input-output examples. As a baseline, we also ran all search procedures using a simple prior as
function probabilities, computed from their global incidence in the program corpus.
In the first, Smaller-ScaIe experiment (program search space size 〜2 X 106) we trained the neural
network on programs of length T = 3, and the test programs were of the same length. Table 1 shows
the per-task timeout required such that a solution could be found for given proportions of the test
tasks (in time less than or equal to the timeout). For example, in a hypothetical test set with 4 tasks
6
Published as a conference paper at ICLR 2017
Table 1: Search speedups on programs of length T = 3 due to using neural network predictions.
Timeout needed to solve	DFS			Enumeration	λ2						Sketch		Beam
	20%	40%	60%	20%	40%	60%	20%	40%	60%	20%	40%	20%
Baseline	41ms	126ms	314ms	80ms	335ms	861ms	18.9s	49.6s	84.2s	>103s	>103s	>103s
DeepCoder	2.7ms	33ms	110ms	1.3ms	6.1ms	27ms	0.23s	0.52s	13.5s	2.13s	455s	292s
Speedup	15.2×	3.9×	2.9×	62.2×	54.6×	31.5×	80.4×	94.6×	6.2×	>467×	>2.2×	>3.4×
and runtimes of 3s, 2s, 1s, 4s, the timeout required to solve 50% of tasks would be 2s. More detailed
experimental results are discussed in Appendix B.
In the main experiment, we tackled a large-scale problem of searching for programs consistent with
input-output examples generated from programs of length T = 5 (search space size on the order of
1010 ), supported by a neural network trained with programs of shorter length T = 4. Here, we only
consider P = 100 programs for reasons of computational efficiency, after having verified that this
does not significantly affect the results in Table 1. The table in Fig. 3a shows significant speedups
for DFS, Sort and add enumeration, and λ2 with Sort and add enumeration, the search techniques
capable of solving the search problem in reasonable time frames. Note that Sort and add enumeration
without the neural network (using prior probabilities of functions) exceeded the 104 second timeout
in two cases, so the relative speedups shown are crude lower bounds.
							IO3				Strain ∙	
Timeout needed		DFS		Enumeration		λ2		IO2 IO1 10°			.® ..	
to solve Baseline DeepCoder	20% 163s 24s	40% 2887s 514s	60% 6832s 2654s	20% 8181s 9s	40% 60% >104s >104s 264s 4640s	20% 463s 48s			串且 1	2	户	-S'"	'∙3 .∙∙2 • 1 ■ none 5
Speedup	6.8×	5.6×	2.6×	907×	>37× >2×	9.6×				3	4	
			(a)					Length of test programs Ttegt (b)				
Figure 3: Search speedups on programs of length T = 5 and influence of length of training programs.
We hypothesize that the substantially larger performance gains on Sort and add schemes as compared
to gains on DFS can be explained by the fact that the choice of attribute function (predicting presence
of functions anywhere in the program) and learning objective of the neural network are better matched
to the Sort and add schemes. Indeed, a more appropriate attribute function for DFS would be one
that is more informative of the functions appearing early in the program, since exploring an incorrect
first function is costly with DFS. On the other hand, the discussion in Sect. 4.5 provides theoretical
indication that ignoring the correlations between functions is not cataclysmic for Sort and add
enumeration, since a Rank loss that upper bounds the Sort and add runtime can still be minimized.
In Appendix G we analyse the performance of the neural networks used in these experiments, by
investigating which attributes (program instructions) tend to be difficult to distinguish from each
other.
5.2	Generalization across program lengths
To investigate the encoder’s generalization ability across programs of different lengths, we trained
a network to predict used functions from input-output examples that were generated from programs
of length Ttrain ∈ {1, . . . , 4}. We then used each of these networks to predict functions on 5 test sets
containing input-output examples generated from programs of lengths Ttest ∈ {1, . . . , 5}, respectively.
The test programs of a given length T were semantically disjoint from all training programs of the
same length T and also from all training and test programs of shorter lengths T0 < T .
For each of the combinations of Ttrain and Ttest, Sort and add enumerative search was run both with
and without using the neural network’s predictions (in the latter case using prior probabilities) until
it solved 20% of the test set tasks. Fig. 3b shows the relative speedup of the solver having access to
predictions from the trained neural networks. These results indicate that the neural networks are able
to generalize beyond programs of the same length that they were trained on. This is partly due to the
7
Published as a conference paper at ICLR 2017
search procedure on top of their predictions, which has the opportunity to correct for the presence of
functions that the neural network failed to predict. Note that a sequence-to-sequence model trained
on programs of a fixed length could not be expected to exhibit this kind of generalization ability.
5.3	Alternative models
Encoder We evaluated replacing the feed-forward architecture encoder (Sect. 4.3) with an RNN, a
natural baseline. Using a GRU-based RNN we were able to achieve results almost as good as using
the feed-forward architecture, but found the RNN encoder more difficult to train.
Decoder We also considered a purely neural network-based approach, where an RNN decoder
is trained to predict the entire program token-by-token. We combined this with our feed-forward
encoder by initializing the RNN using the pooled final layer of the encoder. We found it substantially
more difficult to train an RNN decoder as compared to the independent binary classifiers employed
above. Beam search was used to explore likely programs predicted by the RNN, but it only lead to a
solution comparable with the other techniques when searching for programs of lengths T ≤ 2, where
the search space size is very small (on the order of 103). Note that using an RNN for both the encoder
and decoder corresponds to a standard sequence-to-sequence model. However, we do do not rule out
that a more sophisticated RNN decoder or training procedure could be possibly more successful.
6	Related Work
Machine Learning for Inductive Program Synthesis. There is relatively little work on using
machine learning for programming by example. The most closely related work is that of Menon
et al. (2013), in which a hand-coded set of features of input-output examples are used as “clues.”
When a clue appears in the input-output examples (e.g., the output is a permutation of the input),
it reweights the probabilities of productions in a probabilistic context free grammar by a learned
amount. This work shares the idea of learning to guide the search over program space conditional on
input-output examples. One difference is in the domains. Menon et al. (2013) operate on short string
manipulation programs, where it is arguably easier to hand-code features to recognize patterns in the
input-output examples (e.g., if the outputs are always permutations or substrings of the input). Our
work shows that there are strong cues in patterns in input-output examples in the domain of numbers
and lists. However, the main difference is the scale. Menon et al. (2013) learns from a small (280
examples), manually-constructed dataset, which limits the capacity of the machine learning model
that can be trained. Thus, it forces the machine learning component to be relatively simple. Indeed,
Menon et al. (2013) use a log-linear model and rely on hand-constructed features. LIPS automatically
generates training data, which yields datasets with millions of programs and enables high-capacity
deep learning models to be brought to bear on the problem.
Learning Representations of Program State. Piech et al. (2015) propose to learn joint embed-
dings of program states and programs to automatically extend teacher feedback to many similar
programs in the MOOC setting. This work is similar in that it considers embedding program states,
but the domain is different, and it otherwise specifically focuses on syntactic differences between
semantically equivalent programs to provide stylistic feedback. Li et al. (2016) use graph neural
networks (GNNs) to predict logical descriptions from program states, focusing on data structure
shapes instead of numerical and list data. Such GNNs may be a suitable architecture to encode states
appearing when extending our DSL to handle more complex data structures.
Learning to Infer. Very recently, Alemi et al. (2016) used neural sequence models in tandem with
an automated theorem prover. Similar to our Sort and Add strategy, a neural network component
is trained to select premises that the theorem prover can use to prove a theorem. A recent exten-
sion (Loos et al., 2017) is similar to our DFS enumeration strategy and uses a neural network to guide
the proof search at intermediate steps. The main differences are in the domains, and that they train
on an existing corpus of theorems. More broadly, if we view a DSL as defining a model and search
as a form of inference algorithm, then there is a large body of work on using discriminatively-trained
models to aid inference in generative models. Examples include Dayan et al. (1995); Kingma &
Welling (2014); Shotton et al. (2013); StUhlmuller et al. (2013); Heess et al. (2013); JamPani et al.
(2015).
8
Published as a conference paper at ICLR 2017
7	Discussion and Future Work
We have presented a framework for improving IPS systems by using neural networks to translate cues
in input-output examples to guidance over where to search in program space. Our empirical results
show that for many programs, this technique improves the runtime of a wide range of IPS baselines
by 1-3 orders. We have found several problems in real online programming challenges that can be
solved with a program in our language, which validates the relevance of the class of problems that
we have studied in this work. In sum, this suggests that we have made significant progress towards
being able to solve programming competition problems, and the machine learning component plays
an important role in making it tractable.
There remain some limitations, however. First, the programs we can synthesize are only the simplest
problems on programming competition websites and are simpler than most competition problems.
Many problems require more complex algorithmic solutions like dynamic programming and search,
which are currently beyond our reach. Our chosen DSL currently cannot express solutions to many
problems. To do so, it would need to be extended by adding more primitives and allow for more
flexibility in program constructs (such as allowing loops). Second, we currently use five input-output
examples with relatively large integer values (up to 256 in magnitude), which are probably more
informative than typical (smaller) examples. While we remain optimistic about LIPS’s applicability as
the DSL becomes more complex and the input-output examples become less informative, it remains
to be seen what the magnitude of these effects are as we move towards solving large subsets of
programming competition problems.
We foresee many extensions of DeepCoder. We are most interested in better data generation pro-
cedures by using generative models of source code, and to incorporate natural language problem
descriptions to lessen the information burden required from input-output examples. In sum, Deep-
Coder represents a promising direction forward, and we are optimistic about the future prospects of
using machine learning to synthesize programs.
Acknowledgments
The authors would like to express their gratitude to Rishabh Singh and Jack Feser for their valuable
guidance and help on using the Sketch and λ2 program synthesis systems.
References
Alex A. Alemi, Francois Chollet, Geoffrey Irving, Christian Szegedy, and Josef Urban. DeePMath -
deep sequence models for premise selection. In Proocedings of the 29th Conference on Advances
in Neural Information Processing Systems (NIPS), 2016.
Rudy R Bunel, Alban Desmaison, Pawan K Mudigonda, Pushmeet Kohli, and PhiliP Torr. AdaPtive
neural comPilation. In Proceedings of the 29th Conference on Advances in Neural Information
Processing Systems (NIPS), 2016.
Peter Dayan, Geoffrey E Hinton, Radford M Neal, and Richard S Zemel. The Helmholtz machine.
Neural computation, 7(5):889-904,1995.
Krzysztof Dembczynski, Willem Waegeman, Weiwei Cheng, and Eyke Hullermeier. On label de-
Pendence and loss minimization in multi-label classification. Machine Learning, 88(1):5-45,
2012.
Krzysztof J. Dembczynski, Weiwei Cheng, and Eyke Hllermeier. Bayes oPtimal multilabel classifi-
cation via Probabilistic classifier chains. In Proceedings of the 27th International Conference on
Machine Learning (ICML), 2010.
John K. Feser, Swarat Chaudhuri, and Isil Dillig. Synthesizing data structure transformations from
inPut-outPut examPles. In Proceedings of the 36th ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI), 2015.
Alexander L. Gaunt, Marc Brockschmidt, Rishabh Singh, Nate Kushman, Pushmeet Kohli, Jonathan
Taylor, and Daniel Tarlow. TerPret: A Probabilistic Programming language for Program induction.
CoRR, abs/1608.04428, 2016. URL http://arxiv.org/abs/1608.04428.
9
Published as a conference paper at ICLR 2017
Alex Graves, Greg Wayne, and Ivo Danihelka. Neural Turing machines. CoRR, abs/1410.5401, 2014.
URL http://arxiv.org/abs/1410.5401.
Alex Graves, Greg Wayne, Malcolm Reynolds, Tim Harley, Ivo Danihelka, Agnieszka Grabska-
Barwinska, Sergio Gomez Colmenarejo, Edward Grefenstette, Tiago Ramalho, John Agapiou,
et al. Hybrid computing using a neural network with dynamic external memory. Nature, 2016.
Edward Grefenstette, Karl Moritz Hermann, Mustafa Suleyman, and Phil Blunsom. Learning to
transduce with unbounded memory. In Proceedings of the 28th Conference on Advances in Neural
Information Processing Systems (NIPS), 2015.
Sumit Gulwani. Programming by examples: Applications, algorithms, and ambiguity resolution. In
Proceedings of the 8th International Joint Conference on Automated Reasoning (IJCAR), 2016.
Sumit Gulwani, Susmit Jha, Ashish Tiwari, and Ramarathnam Venkatesan. Synthesis of loop-free
programs. In Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI), 2011.
Nicolas Heess, Daniel Tarlow, and John Winn. Learning to pass expectation propagation messages.
In Proceedings of the 26th Conference on Advances in Neural Information Processing Systems
(NIPS), 2013.
Varun Jampani, Sebastian Nowozin, Matthew Loper, and Peter V Gehler. The informed sampler: A
discriminative approach to Bayesian inference in generative computer vision models. Computer
Vision and Image Understanding,136:32-44, 2015.
Armand Joulin and Tomas Mikolov. Inferring algorithmic patterns with stack-augmented recurrent
nets. In Proceedings of the 28th Conference on Advances in Neural Information Processing
Systems (NIPS), 2015.
Eukasz Kaiser and Ilya Sutskever. Neural GPUs learn algorithms. In Proceedings Ofthe 4th Interna-
tional Conference on Learning Representations, 2016.
Diederik P Kingma and Max Welling. Stochastic gradient VB and the variational auto-encoder. In
Proceedings of the 2nd International Conference on Learning Representations (ICLR), 2014.
Karol Kurach, Marcin Andrychowicz, and Ilya Sutskever. Neural random-access machines. In
Proceedings of the 4th International Conference on Learning Representations 2016, 2015.
Yujia Li, Daniel Tarlow, Marc Brockschmidt, and Richard S. Zemel. Gated graph sequence neural
networks. In Proceedings of the 4th International Conference on Learning Representations (ICLR),
2016.
Wang Ling, Edward Grefenstette, Karl Moritz Hermann, Tomas Kocisky, Andrew Senior, Fumin
Wang, and Phil Blunsom. Latent predictor networks for code generation. In Proceedings of the
54th Annual Meeting of the Association for Computational Linguistics, 2016.
Sarah M. Loos, Geoffrey Irving, Christian Szegedy, and Cezary Kaliszyk. Deep network guided
proof search. CoRR, abs/1701.06972, 2017. URL http://arxiv.org/abs/1701.06972.
Aditya Krishna Menon, Omer Tamuz, Sumit Gulwani, Butler W Lampson, and Adam Kalai. A
machine learning framework for programming by example. In Proceedings of the International
Conference on Machine Learning (ICML), 2013.
Arvind Neelakantan, Quoc V. Le, and Ilya Sutskever. Neural programmer: Inducing latent pro-
grams with gradient descent. In Proceedings of the 4th International Conference on Learning
Representations (ICLR), 2016.
Chris Piech, Jonathan Huang, Andy Nguyen, Mike Phulsuksombati, Mehran Sahami, and Leonidas J.
Guibas. Learning program embeddings to propagate feedback on student code. In Proceedings of
the 32nd International Conference on Machine Learning (ICML), 2015.
Oleksandr Polozov and Sumit Gulwani. FlashMeta: a framework for inductive program synthe-
sis. In Proceedings of the International Conference on Object-Oriented Programming, Systems,
Languages, and Applications (OOPSLA), 2015.
10
Published as a conference paper at ICLR 2017
Scott E. Reed and Nando de Freitas. Neural programmer-interpreters. In Proceedings of the 4th
International Conference on Learning Representations (ICLR), 2016.
Sebastian Riedel, Matko Bosnjak, and Tim RocktascheL Programming with a differentiable forth
interpreter. CoRR, abs/1605.06640, 2016. URL http://arxiv.org/abs/1605.06640.
Eric Schkufza, Rahul Sharma, and Alex Aiken. Stochastic program optimization. Commununications
OftheACM, 59(2):114-122, 2016.
Jamie Shotton, Toby Sharp, Alex Kipman, Andrew Fitzgibbon, Mark Finocchio, Andrew Blake, Mat
Cook, and Richard Moore. Real-time human pose recognition in parts from single depth images.
Communications of the ACM, 56(1):116-124, 2013.
Rishabh Singh and Sumit Gulwani. Predicting a correct program in programming by example. In
Proceedings of the 27th Conference on Computer Aided Verification (CAV), 2015.
Armando Solar-Lezama. Program Synthesis By Sketching. PhD thesis, EECS Dept., UC Berkeley,
2008.
Andreas Stuhlmuller, Jessica Taylor, and Noah D. Goodman. Learning stochastic inverses. In Pro-
ceedings of the 26th Conference on Advances in Neural Information Processing Systems (NIPS),
2013.
Sainbayar Sukhbaatar, Arthur Szlam, Jason Weston, and Rob Fergus. End-to-end memory networks.
In Proceedings of the 28th Conference on Advances in Neural Information Processing Systems
(NIPS), 2015.
Jason Weston, Sumit Chopra, and Antoine Bordes. Memory networks. In Proceedings of the 3rd
International Conference on Learning Representations (ICLR), 2015.
Wojciech Zaremba, Tomas Mikolov, Armand Joulin, and Rob Fergus. Learning simple algorithms
from examples. In Proceedings of the 33nd International Conference on Machine Learning
(ICML), 2016.
11
Published as a conference paper at ICLR 2017
A Example Programs
This section shows example programs in our Domain Specific Language (DSL), together with input-
output examples and short descriptions. These programs have been inspired by simple tasks appearing
on real programming competition websites, and are meant to illustrate the expressive power of our
DSL.
Program 0:	Input-output example:	Description:
k — int	Input:	A new shop near you is selling n paintings.
b J [int]	2, [3 5 4 7 5]	You have k < n friends and you would
C J Sort b	Output:	like to buy each of your friends a painting
d J TAKE k c	[7]	from the shop. Return the minimal amount
e J SUM d		of money you will need to spend.
Program 1:	Itotteale	Description: Input-output example: In soccer leagues, match winners are	
wJ [int]	Input:	awarded 3 points, losers 0 points, and both
t J [int]	[6 2 4 7	9],	teams get 1 point in the case of a tie. Com-
c J MAP (*3) w	[5 3 6 1	0]	pute the number of points awarded to the
d J ZIPWITH (+) c t	Output:	winner of a league given two arrays w, t of
e J MAXIMUM d	27	the same length, where w[i] (resp. t[i]) is the number of times team i won (resp. tied).
Program 2:	Input-output example: Description:	
a J [int]	Input:	Alice and Bob are comparing their results in
b J [int]	[6 2 4 7	9],	a recent exam. Given their marks per ques-
c J ZIPWITH (-) b a	[5 3 2 1	0]	tion as two arrays a and b, count on how
dJ COUNT (>0) c	Output:	many questions Alice got more points than
	4	Bob.
Program 3:	Input-output example: Description:
h J [int]	Input:	Perditia is very peculiar about her garden
b J SCANL1 MIN h	[8 5 7 2 5]	and wants that the trees standing in a row are
c J ZIPWITH (-) h b	Output:	all of non-increasing heights. Given the tree
d J FILTER (>0) c	5	heights in centimeters in order of the row as
e J SUM d	an array h, compute how many centimeters
	she needs to trim the trees in total.
Program 4: x J [int] yJ [int] c J SORT x d J SORT y e J REVERSE d f J ZIPWITH (*) gJ SUM f	Description: Input-output example: Xavier and Yasmine are laying sticks to form Input:	non-overlapping rectangles on the ground.	
	[7 3 8 2 [2 8 9 1 Output: 79 de	5],	They both have fixed sets of pairs of sticks 3]	of certain lengths (represented as arrays x and y of numbers). Xavier only lays sticks parallel to the x axis, and Yasmine lays sticks only parallel to y axis. Compute the area
		their rectangles will cover at least.
		Description:
Program 5:	A sequence called Billy is looking into the Input-output example: mirror, wondering how much weight it could	
a J [int] b J REVERSE a c J ZIPWITH MIN a b	Input: [3 7 5 2 Output: [3 2 5 2	lose by replacing any of its elements by their 8]	mirror images. Given a description of Billy as an array b of length n, return an array c 3]	of minimal sum where each element c[i] is
		either b[i] or its mirror image b[n - i - 1].
12
Published as a conference paper at ICLR 2017
Program 6:		IO example:	Description:
t J [int]		Input:	Umberto has a large collection of ties and match-
p J [int]	t	[4 8 11 2],	ing pocket squares—too large, his wife says—and he
c J MAP (-1)		[2 3 4 1]	needs to sell one pair. Given their values as arrays t
d J MAP (-1) e J ZIPWITH	p +) c d	Output: 1	and p, assuming that he sells the cheapest pair, and selling costs 2, how much will he lose from the sale?
f J MINIMUM	e		
Program 7:
S J [int]
P J [int]
c J SCANL1 (+) p
dJ ZIPWITH (*) s c
e J SUM d
IO example:
Input:
[4 7 2 3],
[2 1 3 1]
Output:
62
Description:
Zack always promised his n friends to buy them
candy, but never did. Now he won the lottery
and counts how often and how much candy he
promised to his friends, obtaining arrays p (num-
ber of promises) and s (number of promised sweets).
He announces that to repay them, he will buy
s[1]+s[2]+...+s[n] pieces of candy for the
first p[1] days, then s[2]+s[3]+...+s[n] for
p[2] days, and so on, until he has fulfilled all
promises. How much candy will he buy in total?
		Description: Vivian loves rearranging things. Most of all, when she sees a row of heaps, she wants to make sure that each heap has more items than the one to its left. She
Program 8:	IO example:	is also obsessed with efficiency, so always moves the
s J [int]	Input:	least possible number of items. Her dad really dislikes
b J REVERSE s	[1 2 4 5 7]	if she changes the size of heaps, so she only moves
c J ZIPWITH (-) b s	Output:	single items between them, making sure that the set of
d J FILTER (>0) c	9	sizes of the heaps is the same as at the start; they are
e J SUM d		only in a different order. When you come in, you see heaps of sizes (of course, sizes strictly monotonically increasing) s[0], s[1], ... s[n]. What is the maximal number of items that Vivian could have moved?
Fig. 4	shows the predictions made by a neural network trained on programs of length T = 4 that
were ensured to be semantically disjoint from all 9 example programs shown in this section. For each
task, the neural network was provided with 5 input-output examples.
WnW-XVW
IUOS
hU-
daw
ħ3
aðɪ
(OnnZ 求)
nnz 求)
Sv-
于)
*)
F)
-S
F)
+)
□NWS
Xb3E-N
sωυ⅛
doHa
a∙L
Wni-W
INn8
XVW
N-W
O: SORT b I TAKE a C∣ SUM d
1: MAP (∙3) a I ZIPWITH + be] MAXIMUM d
2: ZIPWfTH-ba I COUNT (Ao) C
3: SCANLl MIN a ∣ ZIPWITH-a b∣ FILTER (>0) C∣ SUM d
4: SORTa I SORT b I REVERSE d ∣ ZIPWΓΓH *de∣ SUM f
5: REVERSE a ∣ ZIPWΓTH MIN a b
6: MAP (-1) a I MAP (-1) b ∣ ZIPWITH + Cd ∣ MINIMUM e
7: SCANLl + b∣ ZIPWΓΓH ∙ac∣ SUM d
8: REVERSE a ∣ ZIPWITH-ba∣ FILTER (>0) C∣ SUM d
Figure 4: Predictions of a neural network on the 9 example programs described in this section.
Numbers in squares would ideally be close to 1 (function is present in the ground truth source code),
whereas all other numbers should ideally be close to 0 (function is not needed).
B	Experimental Results
Results presented in Sect. 5.1 showcased the computational speedups obtained from the LIPS frame-
work (using DeepCoder), as opposed to solving each program synthesis problem with only the
13
Published as a conference paper at ICLR 2017
information about global incidence of functions in source code available. For completeness, here we
show plots of raw computation times of each search procedure to solve a given number of problems.
Fig. 5	shows the computation times of DFS, of Enumerative search with a Sort and add scheme, of
the λ2 and Sketch solvers with a Sort and add scheme, and of Beam search, when searching for a
program consistent with input-output examples generated from P = 500 different test programs of
length T = 3. As discussed in Sect. 5.1, these test programs were ensured to be semantically disjoint
from all programs used to train the neural networks, as well as from all programs of shorter length
(as discussed in Sect. 4.2).
Solver computation time [s]
—	DFS: using neural network
DFS: using prior order
—	L2: Sort and add using neural network
L2: Sort and add in prior order
—	Enumeration： Sort and add using neural network
Enumeration： Sort and add in prior order
Beam search
—	Sketch: Sort and add using neural network
Sketch: Sort and add in prior order
Figure 5: Number of test problems solved versus computation time.
The “steps” in the results for Beam search are due to our search strategy, which doubles the size of
the considered beam until reaching the timeout (of 1000 seconds) and thus steps occur whenever
the search for a beam of size 2k is finished. For λ2 , we observed that no solution for a given set of
allowed functions was ever found after about 5 seconds (on the benchmark machines), but that λ2
continued to search. Hence, we introduced a hard timeout after 6 seconds for all but the last iterations
of our Sort and add scheme.
Fig. 6 shows the computation times of DFS, Enumerative search with a Sort and add scheme, and
λ2 with a Sort and add scheme when searching for programs consistent with input-output examples
generated from P = 100 different test programs of length T = 5. The neural network was trained
on programs of length T = 4.
Solver computation time [s]
—	DFS: using neural network
DFS: using prior order
—	L2: Sort and add using neural network
L2: Sort and add in prior order
—	Enumeration： Sort and add using neural network
Enumeration： Sort and add in prior order
Figure 6: Number of test problems solved versus computation time.
C The Neural Network
As briefly described in Sect. 4.3, we used the following simple feed-forward architecture encoder:
• For each input-output example in the set generated from a single ground truth program:
-	Pad arrays appearing in the inputs and in the output to a maximum length L = 20 with
a special Null value.
-	Represent the type (singleton integer or integer array) of each input and of the output
using a one-hot-encoding vector. Embed each integer in the valid integer range (-256
to 255) using a learned embedding into E = 20 dimensional space. Also learn an
embedding for the padding Null value.
14
Published as a conference paper at ICLR 2017
-	Concatenate the representations of the input types, the embeddings of integers in the
inputs, the representation of the output type, and the embeddings of integers in the
output into a single (fixed-length) vector.
-	Pass this vector through H = 3 hidden layers containing K = 256 sigmoid units each.
• Pool the last hidden layer encodings of each input-output example together by simple arith-
metic averaging.
Fig. 7 shows a schematic drawing of this encoder architecture, together with the decoder that performs
independent binary classification for each function in the DSL, indicating whether or not it appears
in the ground truth source code.
Attribute Predictions
Final Activations
Pooled
Hiddens 3
Hiddens 2
Hiddens 1
State Embeddings
Program State
Inputs 1 Outputs 1	Inputs 5 Outputs 5
Figure 7: Schematic representation of our feed-forward encoder, and the decoder.
While DeepCoder learns to embed integers into a E = 20 dimensional space, we built the system up
gradually, starting with a E = 2 dimensional space and only training on programs of length T = 1.
Such a small scale setting allowed easier investigation of the workings of the neural network, and
indeed Fig. 8 below shows a learned embedding of integers in R2 . The figure demonstrates that
the network has learnt the concepts of number magnitude, sign (positive or negative) and evenness,
presumably due to Filter (>0), Filter (<0), Filter (%2==0) and Filter (%2==1) all being
among the programs on which the network was trained.
D	Depth-First Search
We use an optimized C++ implementation of depth-first search (DFS) to search over programs with
a given maximum length T . In depth-first search, we start by choosing the first function (and its
arguments) of a potential solution program, and then recursively consider all ways of filling in the
rest of the program (up to length T), before moving on to a next choice of first instruction (if a
solution has not yet been found).
A program is considered a solution if it is consistent with all M = 5 provided input-output examples.
Note that this requires evaluating all candidate programs on the M inputs and checking the results for
equality with the provided M respective outputs. Our implementation of DFS exploits the sequential
structure of programs in our DSL by caching the results of evaluating all prefixes of the currently
considered program on the example inputs, thus allowing efficient reuse of computation between
candidate programs with common prefixes.
This allows us to explore the search space at roughly the speed of 〜3 X 106 programs per second.
15
Published as a conference paper at ICLR 2017
(e)a0 Uo-SU ① UJ-P 6U_PP ① qE ① PUoU ① S
■	■■ even positive numbers
■	■■ even negative number
▲▲▲ odd positive numbers
▲ ▲▲ odd negative numbers
∙∙∙ zero
∙∙∙ Null (padding value)
First embedding dimension ≠1(n)
Figure 8: A learned embedding of integers {-256, -255, . . . , -1, 0, 1, . . . , 255} in R2. The color
intensity corresponds to the magnitude of the embedded integer.
When the search procedure extends a partial program by a new function, it has to try the functions
in the DSL in some order. At this point DFS can opt to consider the functions as ordered by their
predicted probabilities from the neural network. The probability of a function consisting of a higher-
order function and a lambda is taken to be the minimum of the probabilities of the two constituent
functions.
E Training Loss Function
In Sect. 4.5 we outlined a justification for using marginal probabilities of individual functions as
a sensible intermediate representation to provide a solver employing a Sort and add scheme (we
considered Enumerative search and the Sketch solver with this scheme). Here we provide a more
detailed discussion.
Predicting program components from input-output examples can be cast as a multilabel classification
problem, where each instance (set of input-output examples) is associated with a set of relevant
labels (functions appearing in the code that generated the examples). We denote the number of labels
(functions) by C, and note that throughout this work C = 34.
When the task is to predict a subset of labels y ∈ {0, 1}C, different loss functions can be employed
to measure the prediction error of a classifier h(x) or ranking function f (x). Dembczynski et al.
(2010) discuss the following three loss functions:
• Hamming loss counts the number of labels that are predicted incorrectly by a classifier h:
C
LHB, h(X)) = E l{y0=hc(x)}
c=1
•	Rank loss counts the number of label pairs violating the condition that relevant labels are
ranked higher than irrelevant ones by a scoring function f :
C
Lr(y,f (X))=	X	1{fi<fj}
(i,j):yi=1,yj=0
•	Subset Zero-One loss indicates whether all labels have been correctly predicted by h:
Ls(y, h(X)) = l{y=h(x)}
16
Published as a conference paper at ICLR 2017
Dembczynski et al. (2010) proved that Bayes optimal decisions under the Hamming and Rank loss
functions, i.e., decisions minimizing the expected loss under these loss functions, can be computed
from marginal probabilities pc(yc|x). This suggests that:
•	Multilabel classification under these two loss functions may not benefit from considering
dependencies between the labels.
•	”Instead of minimizing the Rank loss directly, one can simply use any approach for single
label prediction that properly estimates the marginal probabilities."(Dembczynski et al.,
2012)
Training the neural network with the negative cross entropy loss function as the training objective is
precisely a method for properly estimating the marginal probabilities of labels (functions appearing
in source code). It is thus a sensible step in preparation for making predictions under a Rank loss.
It remains to discuss the relationship between the Rank loss and the actual quantity we care about,
which is the total runtime of a Sort and add search procedure. Recall the simplifying assumption that
the runtime of searching for a program of length T with C functions made available to the search is
proportional to CT, and consider a Sort and add search for a program of length T, where the size
of the active set is increased by 1 whenever the search fails. Starting with an active set of size 1, the
total time until a solution is found can be upper bounded by
IT + 2t + .一 + CT ≤ CT+1 ≤ CCT
where CA is the size of the active set when the search finally succeeds (i.e., when the active set finally
contains all necessary functions for a solution to exist). Hence the total runtime of a Sort and add
search can be upper bounded by a quantity that is proportional to CAT .
Now fix a valid program solution P that requires CP functions, and let yP ∈ {0, 1}C be the indicator
vector of functions used by P. Let D := CA - CP be the number of redundant operations added
into the active set until all operations from P have been added.
Example 1. Suppose the labels, as sorted by decreasing predicted marginal probabilities f (x), are
as follows:
1111001000100000000000000000000000
Then the solution P contains CP = 6 functions, but the active set needs to grow to size CA = 11
to include all of them, adding D = 5 redundant functions along the way. Note that the rank loss of
the predictions f(x) is Lr(yP, f (x)) = 2 + 5 = 7, as it double counts the two redundant functions
which are scored higher than two relevant labels.
Noting that in general Lr(yP, f (x)) ≥ D, the previous upper bound on the runtime of Sort and add
can be further upper bounded as follows:
CAT = (CP + D)T ≤ const + const × DT ≤ const + const × Lr(yP, f (x))T
Hence we see that for a constant value of T, this upper bound can be minimized by optimizing the
Rank loss of the predictions f (x). Note also that Lr(yP, f(x)) = 0 would imply D = 0, in which
case CA = CP .
F Domain Specific Language of DeepCoder
Here we provide a description of the semantics of our DSL from Sect. 4.1, both in English and as a
Python implementation. Throughout, Null is a special value that can be set e.g. to an integer outside
the working integer range.
First-order functions:
•	HEAD :: [int] -> int
lambda xs: xs[0] if len(xs)>0 else Null
Given an array, returns its first element (or Null if the array is empty).
•	LAST :: [int] -> int
lambda xs: xs[-1] if len(xs)>0 else Null
Given an array, returns its last element (or Null if the array is empty).
17
Published as a conference paper at ICLR 2017
•	TAKE :: int -> [int] -> int
lambda n, xs: xs[:n]
Given an integer n and array xs, returns the array truncated after the n-th element. (If the
length of xs was no larger than n in the first place, it is returned without modification.)
•	DROP :: int -> [int] -> int
lambda n, xs: xs[n:]
Given an integer n and array xs, returns the array with the first n elements dropped. (If the
length of xs was no larger than n in the first place, an empty array is returned.)
•	ACCES S :: int -> [int] -> int
lambda n, xs: xs[n] if n>=0 and len(xs)>n else Null
Given an integer n and array xs, returns the (n+1)-st element of xs. (If the length of xs
was less than or equal to n, the value Null is returned instead.)
•	MINIMUM :: [int] -> int
lambda xs: min(xs) if len(xs)>0 else Null
Given an array, returns its minimum (or Null if the array is empty).
•	MAXIMUM :: [int] -> int
lambda xs: max(xs) if len(xs)>0 else Null
Given an array, returns its maximum (or Null if the array is empty).
•	REVERSE :: [int] -> [int]
lambda xs: list(reversed(xs))
Given an array, returns its elements in reversed order.
•	SORT :: [int] -> [int]
lambda xs: sorted(xs)
Given an array, return its elements in non-decreasing order.
•	SUM :: [int] -> int
lambda xs: sum(xs)
Given an array, returns the sum of its elements. (The sum of an empty array is 0.)
Higher-order functions:
•	MAP :: (int -> int) -> [int] -> [int]
lambda f, xs: [f(x) for x in xs]
Given a lambda function f mapping from integers to integers, and an array xs, returns the
array resulting from applying f to each element of xs.
•	FILTER :: (int -> bool) -> [int] -> [int]
lambda f, xs: [x for x in xs if f(x)]
Given a predicate f mapping from integers to truth values, and an array xs, returns the
elements of xs satisfying the predicate in their original order.
•	COUNT :: (int -> bool) -> [int] -> int
lambda f, xs: len([x for x in xs if f(x)])
Given a predicate f mapping from integers to truth values, and an array xs, returns the
number of elements in xs satisfying the predicate.
•	ZIPWITH :: (int -> int -> int) -> [int] -> [int] -> [int]
lambda f, xs, ys: [f(x, y) for (x, y) in zip(xs, ys)]
Given a lambda function f mapping integer pairs to integers, and two arrays xs and ys,
returns the array resulting from applying f to corresponding elements of xs and ys. The
length of the returned array is the minimum of the lengths of xs and ys.
•	SCANL1 :: (int -> int -> int) -> [int] -> [int]
Given a lambda function f mapping integer pairs to integers, and an array xs, returns an
array ys of the same length as xs and with its content defined by the recurrence ys[0] =
xs[0], ys[n] = f(ys[n-1], xs[n]) for n ≥ 1.
The INT→INT lambdas (+1), (-1), (*2), (/2), (*(-1)), (**2), (*3), (/3), (*4), (/4)
provided by our DSL map integers to integers in a self-explanatory manner. The INT→BOOL lambdas
(>0), (<0), (%2==0), (%2==1) respectively test positivity, negativity, evenness and oddness of
18
Published as a conference paper at ICLR 2017
the input integer value. Finally, the INT→INT→INT lambdas (+), (-), (*), MIN, MAX apply a
function to a pair of integers and produce a single integer.
As an example, consider the function Scanl1 Max, consisting of the higher-order function Scanl1
and the INT→INT→INT lambda MAX. Given an integer array a of length L, this function computes
the running maximum of the array a. Specifically, it returns an array b of the same length L whose
i-th element is the maximum of the first i elements in a.
XVW
Zi
⅝Ξ
⅛⊃00
NUZ求)
二 NNZ求)
γ
≡LH
doa
3>VJ.
WnW-XVW
Ei-Zi
ωffioo<
J.W
osɪ
WnS
S
常
守*)
常*)
£
S
二
F)
一？)
川 s3A 川
-Laos
m3s
H-UMd-Z
HEAD
LAST
ACCESS
MINIMUM
MAXIMUM
TAKE
DROP
FILTER
(>0)
(<0)
(%2==1)
(%2==0)
COUNT
MAP
MIN
MAX
.17
(15)
.05
(J2)
.15 .01
(6}	{6)
.19	.15
αw	(io
.22 .04
(M∣ <7)
.23 .22 .05
<l<β (IO) {l<β
.29 .09
(U)∣ {15)
.05
(6)
.05
dβ)
.12
(9)
.04 .06
(9} (M)
.07 .04
(4)	(4)
.10 .18
(16) (16)
.12 .08
(7)	(8}
.12
(J2)
.09
(6)
.16
(M)
.24
(8)
.10
(9)
.12
(36)
.09
(36)
.08
(6}
.06
(14)
.04
(6}
.03
(14)
.03
(8}
.09
(9}
.06
(40)
.06
(42)
.06
(90)
.08 .07
(J5) (U)
.01 .02
(6}
.09
(17)
.16
(9}
.04
(10)
.05
(«)
.08
(44)
.05
{87)
(6)
.13
(16)
.13
(9)
.08
(IO)
.09
W)
.09
(38)
.07
(88)
.06
(15)
.11
(6)
.12
(16)
.06 .16
(15]	{9}
.04 .01
(6}
.03
(13)
.13 .13
.13 .15
f33) (32)
(9)
.06
{l<β
.02
(36)
.05
(38)
.08
.13
{3D
(9}
.10
<ι<β
(38)
(35)
.05
(no)
.06
123)
(2}
.14
(U)
.06
(7)
.05
(7)
.05
(21)
.14
{29)
.11
(86)
.11
(JS)
.04
(5}
-18
(17)
-34
(9)
.08
(8)
.06
.06
(39)
.08
(93)
.03
(13)
.11
(6)
.06
(16)
.06 .00
(M) (U)
.05 .11
(5}	(6)
.05 .00
t∏) (16)
.09
(J2)
.16 .11
(25)
(26)
.02 .25 .10
(8)	(8)	(5}
.04 .09 .08
(6)
(9}	{8)
(5}
.02
(17)
.00
(8)
.00
(Mβ
.05
(7)
.03
(3)
.10
(14)
.05 .03 .00 .02
(37)
.04
(40)
.04
WD
.11
pm
(34) {37)
.09
(39)
.11
(891
.16
(30)
.09
(39)
.07
(92)
.05
(25)
(32)
.00
(3β)
(89)
.00
(29)
(3)
.03
(5}
.11
PO)
.10
PD
.03
P2)
.05
(11)
.03
(JS)
.01
(6)
.04
(U)
.03
P)
.04
(Mβ
.03
(41)
.05
(44)
.02
(113)
.02
(32)
.03
(14)
.03
(6)
.07
(17)
.06
(9)
.09
{l<β
.04
(40)
.08
(43)
.04
(no)
.04
f32)
(M)
.03
(5}
.02
(16)
.02
(8}
(10)
.00
(41)
(44)
.05
(1J5)
.02
(33)
.01
(U)
.01
(6}
.01
(17)
.00
(9}
.00
(IO)
.03
(40)
.01
(45)
.01
(117)
.01
(34)
.02
(JS)
.03
(6)
.04
(17)
.02
(9)
.02
(Mβ
.03
(14)
.07 .06 .01
(32) (33) (31)
.19 .06
07) (26)
.17
(44)
.20
(20)
.04
03)
-16
PO)
(37)
.05
(44)
.02
(114)
.03
(34)
(5}
.03
(17)
.03
(9}
.02
{l<β
.04
(39)
.06
(40)
.03
(116)
.02
02)
.02
(J5)
.02
(5}
.02
(U)
.04
(9}
.02
(IO)
.02
(39)
.03
(43)
(IM)
(33)
.00
(M)
.00
(5}
.00
(U)
.00
(9)
.00
(Mβ
.00
(42)
.02
(41)
.00
(111)
.00
(32)
.06 .01 .02
(15) {14) (14)
.02 .13 .00
(6)
.03
αw
.00
(9)
.00
(9)
.02
(41)
(6)
.02
αw
(43)
(1J2)
.00
{3D
(9}
.07
{l<β
.03
(39)
.02
(44)
.05
(116)
.05
f32)
(6}
.02
(17)
.04
(8}
.01
(9}
.01
(39)
.03
(42)
.03
(1J5)
.06
(34)
.08
(JS)
(6)
.03
(lβ)
.02
(9)
.00
(9)
.00
(41)
.00
(15)
.02
(6}
.02
αw
.02
(9}
.00
{l<β
.00
(42)
(44)
.02
(114)
.03
(34)
ZIPWI7H
SCANLl
SORT
REVERSE
(*-l)
(**2)
(+1)
(-1)
(*2)
(*3)
(*4)
(∕2)
(/3)
(74)
SUM
(8)
口β)'lΛ)'2与 2 砌31512151211)
Qw Q<luq<1mq<1mq<1«q<135q(40
器.Ol回.03g.02g 盘黑黑
12⑼I1B)QI3)I117)Q!β)q-3)Q 国
Qt22q(98q<10q<14q<j2q<11q(33
£.02(117)盘黑i2sis华
la)l!l)25)2i8)20)3B)219)
QP3q<12q<125Qg QtMq<13≡Qa
on ol)ol6)l5)o 团 1 团 ll6)
Q(Mq(12Q(laq<17Qg q<1λQs
Iw Oa Iffl OS Iw 2u- Is
QP5<q<12q<12Qm Q<lsq<14q(«
17)1≡)1 娟 l5)2s∙ 3l)lm
Q3 Q<laQ<laq<17Q<15aq<14Q "
ɪβ)O≡)1n)l5)14)11)1B)
QW Qlzq13<q17q1⅛QuQ42f
.01	.03	.01	.00	.03	.01	.01	.02	.01
(125)	(122)	(124)	(122)	(IW)	ɑaŋ	(109)	(J21]	(116)
.05	.00	.01	.01	.04	.07	.05	.01	.04
63)	OO)	(31)	03)	02)	(32)	<28)	{3D	(33)
.01	.00	.00	.00	.01	.09	.02	.02	.01
(40)	(39)	(««	(40)	(38)	(38)	(32)	(38)	(38)
.04	.01	.01	.00	.02	.03	.05	.03	.03
(26)	(25)	(26)	(27)	(26)	<26)		(26)	P6)
.01	.00	.03	.01	.01	.07	.01	.04	.00
PD	(20)	(21)	PD	(19)	(21)		PD	(M)
.01	.00	.00	.00	.01	.04	.01	.01	.00
(39)	(38)	(39)	(39)	(34)	(38)	(35)	(39)	(38)
.01	.01	.01	.02	.02	.00	.02	.04	.03
P7)	(27)	(28)	P8)	P5)	123)		P6)	P8)
.00 (23)	.00 .00 (24) <24)	.01 (24)	.00 .00 PD (22)	.01	.01 (23)	.00 (23)
.00 07)	.00 .00 (38) (38)	.00 (38)	.00 .00 (38) (34)	.00 (31)	.00 (36)	.00 (37)
.00 (35)	.03 .00 (35) (35)	.00 (34)	.02 .00 (34) (33)	.00 (29)	.01 02)	.00 (34)
.00 02)	.00 .00 (32) J32)	.00 02)	.00 .00 PM (31)	.04 {3<Q	.01 (30)	.01 (32)
.02 (34)	.03 .01 (33) (33)	.00 03)	.00 .01 {3D (31)	.07 (31)	.03 (34)	.02 (34)
.02 P7)	.00 .00 (27) (27)	.00 P6)	.01 .00 P6) 126)	.01 123)	.02 P7)	.00 P6)
(81
.10 .00 .15 .07 .04
(8)	(8)	(6)	(8)	<7)
.07 .13 .06
(8}	(8)	(8)
isɪ盘盘iss.01皿黑器
12⑼ Q.7)Q,l)Q12)I1M QI7)
QtMQ<llQ<llQ 叩 q<14q<uq(3s
)2⑶ 3.71)2>2)Qi5))3>0))3i3))3l3)
QP4q{11Q8 Qm QK Qw Qi-w
.02
(119)
.03
OO)
.02
(36)
.04
{26)
.00
(21)
.04
(39)
.02
{28)
.00
(24)
.00
(36)
.00
(34)
.00
(31]
.01
(31)
.00
126)
.06
.04㈤.06的小.06㈤窗盘.03S 塌.06M 盘.04S 黑-S.03(371
.05网.04网毋.04(31)篮.03皿.04回.03皿黑is.033 黑.03(33).03(37)
盘,03(37).06(45).03叫黑您黑.03S 盘器±盘.02(32)髭
.Oo叫.Oo刖.02(43).Oo叫.02E.Ol回.02g 黑黑.06⑼is.06回.01(33).00(39)
.Oo㈤.Oo的.Oo由.00g.O1P14)S.OlW.02皿.029.05回.02(399).03W.02(33).Oo的
.oog-S?.02网.018 器盘盘is?is≡.05M 盘盘.03(33).01(39)
盘,03(38)树黑品黑番,08皿.07皿,06冈感忠.07(33),11叫
偌.03叫盘.05(32)盘盘盘,045盘出器盘S;??
.01(32).00(38)∙s.00g.03M.02皿.03回黑黑.095.03W.03皿.04网.01(38)
6n77)5M2Q3S)3.1)35)O9)3I9)6β)3-0)3l0)6 a 9»
Q(32q(37q(45q(32Q 加 Q<llQ<125Qg Q(14Q(138Q<41Qα∞Q(32Q(39
.01(31).06叫.05(43).05叫黑您.05W.O4E.03皿.OlW.043 盘.09叫
偿偿毋但房盘,033,02皿盘盘,02M,04W-S
黑-<s∙<≡S黑.043∙ls黑.03㈣.04皿.04皿∙s.08(33)
.04⑶ S<l(n.04M.09仪.04m.Oo⑸.Oo⑸.Oo⑷.01(7).03耳.02网.06⑼
器.00岫,00(33).00的盘盘盘绘盘 £停,00⑻-S
音与盘普器借.05⅜m 就会盥∙s∙,≡
.13(16).07刖.09M.10M.llm■£?-S痣.08S 思,11啊.09的.Ol网
.03劭.05(30).04(32).11P7).043.07皿.03g.07g.03g.04(306).05g.02(23).05(34)
.ll(M),12g-<s,15(a>.08g 思然思,08W.09(314).09(78),188,16(30)
.10(57).15m.153.15M.24㈣ Mm.17m.21(23)
.14
(27)
.12
<»)
.12
(33)
.19
{28)
.03 .00 ∣31
P) {8) I (6}
.05网.04网
黑 盘
.01pl)-s
.13M.02(lffl-S
盘华.01的
.06S.05(15).03网
.05悯.09⑷.06(5}
,02(23)∙∙,s
-S∙s.02M
.06胸.06㈣-S?
.103.02(15).03(35)
.16(15)
需.07网.00(39).02劭.06网.05{3®.01(32).0101).01如
.00^.05(19).01(39).00(23).01(23).06(33).00(31).00㈤.00(25)
黑储,04(39).04㈣.04S.06(32).05血黑.01⑷
.10皿,05(1«・器,02(33),04(34),13(32),08(30).02的
磊.013,02叫.03词.08叫.10叫雷
.07胸.Oo㈣.04刖.02(35).03g.02g-S
.OlM.01(23).02(36).02网.04皿.06M.Ol劭
.05W-.06(35).05(34).02叫.01(31].02M
.02M.07(24).01(38).04(35).03(31).01(34).03冏
S.05皿.06蓝皿.07gss
.08(β).10网.02(6).06(8}.o3(3).06(9}.03(2}
.05(19).00^.08皿薛
盘.03叫.02网.16刖
.122.39(19).14(31).11的
.07网一.02叫.00劭
MtM)02(19)o2(3o)02(24)16(26107团07(20)
.03	.08 .07 .00
P2)	P2) (25) Ca)
.04	.11 .04 .06
(28)	(27) (24) (30)
.03	.09 .10 .00
(19)	PD <») <»)
.11 .18 .02
(6}	{8)	(4}
.05 .02 .03
(26) (27) (27)
.04 .01 .02
PD (W) <21)
.06 .02 .03
(3β) (39) (38)
.08 .03 .04
(28) (24) (27)
.03 .06 .02
PD (24) (21)
.06 .03 .03
(37) (36) (36)
.05 .00 .00
65) (32) (35)
.10 .13
OO) {3<Q
.12	.15
02)	(34)
.13 .17
(25) 127)
.09 .02
P) {5}
.06 .18 .01
(I)	(6}	{6)
.00 .07 .09 .12 .09 .06 .14
(8)	(8)	(8)	(8)	(8)	(8)	(8)
Figure 9: Conditional confusion matrix for the neural network and test set of P = 500 programs of
length T = 3 that were used to obtain the results presented in Table 1. Each cell contains the average
false positive probability (in larger font) and the number of test programs from which this average
was computed (smaller font, in brackets). The color intensity of each cell’s shading coresponds to
the magnitude of the average false positive probability.
G	Analysis of trained neural networks
We analyzed the performance of trained neural networks by investigating which program instructions
tend to get confused by the networks. To this end, we looked at a generalization of confusion matrices
to the multilabel classification setting: for each attribute in a ground truth program (rows) measure
how likely each other attribute (columns) is predicted as a false positive. More formally, in this
matrix the (i, j)-entry is the average predicted probability of attribute j among test programs that do
19
Published as a conference paper at ICLR 2017
possess attribute i and do not possess attribute j . Intuitively, the i-th row of this matrix shows how
the presence of attribute i confuses the network into incorrectly predicting each other attribute j .
Figure 9 shows this conditional confusion matrix for the neural network and P = 500 program test
set configuration used to obtain Table 1. We re-ordered the confusion matrix to try to expose block
structure in the false positive probabilities, revealing groups of instructions that tend to be difficult to
distinguish. Figure 10 show the conditional confusion matrix for the neural network used to obtain
the table in Fig. 3a. While the results are somewhat noisy, we observe a few general tendencies:
•	There is increased confusion amongst instructions that select out a single element from an
array: Head, Last, Access, Minimum, Maximum.
•	Some common attributes get predicted more often regardless of the ground truth program:
Filter, (>0), (<0), (%2==1), (%2==0), Min, Max, (+), (-), ZipWith.
•	There are some groups of lambdas that are more difficult for the network to distinguish
within: (+) vs (-); (+1) vs (-1); (/2) vs (/3) vs (/4).
•	When a program uses (**2), the network often thinks it’s using (*), presumably because
both can lead to large values in the output.
+
XVW
Zi
n-<Σ
INno
UUN%)
CtUUN%)
Sv-
<)
山 l=l
doCJ
山41
WnW-XVW
zɔz-zi
SS山304
ISVl
□2x
山Sa山Ba
,LHOS
IINXOS
HMd-z
*w-<*	*w-<*	*w-<*	*w-<*	*w-<*	*w-<*	*w-<*	*w-<*	*w-<*	*w-<*	∖∏
HEAD
LAST
ACCESS
MINIMUM
MAXIMUM
TAKE
DROP
FILTER
(>0)
(<0)
(%2= = 1)
(%2==0)
COUW
MAP
MIN
MAX
+
.14
<4β)
.14
uoβ)
.19
.16
(«8)
.09
.24
0»
.15
as
.29
0®
.26
uoβ)
.24
e®
.26
(4⅛
.12
<41>
.12
.08
»«
.16 .12 .09 .12 .06 .Q4 .08 .09 .07 .06
0»	P4>	U»	PO	03)	(34)	(38)	(37)	(M)
.17	.09	.10	.12	.07	.11	.12	.13	.16
<®»	P4>	P8>	P7>	{38>	08>	{44>	{37>	{39>
.16	.14	.17	.17	.13	.11	.14	.14	.10
.12
βτ)
.18
0Z)
.10
(9β)	«3) (94>	P?)	(M) (W)	(9β)	(W
.15	.09 .13	.16	.06 .11	.09	.13
.14
«»
.06 .07
es> 04>
.18
(32)
<m> <123> <114> <11»> <≈n
(®» 0») βθ> («» (M) (S)
.10 .10 .09 .09 .09 .08
P7)
.17
UW
.05	.11	.09	.06	.05	.16
(131)	(135)	(133)	(133)	<130	(UO)
.05	.09	.07	.05	.05	.09	.09
{2∞>	(19β)	(17«)	(IM)	(IM)	(1C4)	(1∞)
.04	.11	.06	.04	.05	.08	.08
U24>	<124>	U<H>	<∞>	<≈S>	(98>	(W>
.05 .07 .08
UM> {100> (82)
.03
m)
.06
(S3>
.06
wɪ)
.10
(s»
.04 .09
.06
σβ
.05
g
.07
.07 .06 .09 .10
的(M4> Pl> P2)
(«)
.10
(«8»
<≈>
.09
<κ>
.10
(<≡)
.09
<»>
04)
.22
(M)
.22
(W
.15
<«>
.14
β7)
(43> <46> {46> (4β)
.09 .11 .08 .12
(in) (iaβ (iιβ (iιβ
.11 .14 .14 .13
<10® {117> {129 (124
.14 .10
(«) <»)
.04 .06
<TO>
.03
«s)
.08 .11 .1Q .11 .07
(43)
.07
<«>
.08
(13)) (144 (142) (147) (15β) P3)
.19
uoυ
.21 .16 .15
(129 (ɪɪɪ) (ɪɪɪ)
.04 .04 .08 .08 .11 .14 .12
(s» (W (es> <βe>
.03 .07 .06 .10
(S» »1> <w> <w>
.04 .06 .05 .08
(ISO)	(IW)	(13β)	(183)	(ISO)	(12β)	(111)
.06	.08	.05	.04	.06	.06	.08
(345)	(344)	{3l>2)	(333)	(302)	¢72)	(Z67)
.10
(M)
PD P3> PO>
.13 .12 .16 .23
as)
.29
u»)
.15
P3B)
.16
(«)
.20
(∞)
.05
(sι>
.03
(«)
.06
(38)
.08
(<»>
.04 .06
<n} »2» O3>
.14 .16 .17 .16
UM> {127> <Uβ <14®
.07 .10 .10 .11
{2∞> (30Q 014 01(8
<w>
.07
(«)
Wl
.09
03)
.07
(M)
.05
P43)
.05	.08	.06	.06	.04	.11	.06	.10	.07	.08	.10	.11	.08	.06
(131)	(132)	(lie)	(132)	(12β)	(12β)	(107)	W3)	(112)	{114	{121}	{117}	(IOl)	{43}
.04	.07	.04	.02	.04	.06	.07
{147>	{147>	(Ua)	(144)	(138)	(llβ)	(121)
.04	.08	.03	.04	.03	.06	.05
(13β)	(13β)	(122)	(134)	(137)	{117)	{1(B)
.15
(M)
.14
σw
.08	.10	.09	.10	.06	.07
U≈>	{127>	U2β	U≡β	U<H>	<«>
.09	.12	.09	.10	.04	.08
U«> ∏2 ɪ> U0β {121) (SB)
.04 .10	.01 .03 .04 .03	.07	.11 .07	.08	.08	.08
UO4> U0β>	(9S (M3> (M6> «7>	{W>	(β3) Ws	»2>	«7>	(90>
.10
(30)
.12
.13
(s»
.13
eβ
.09
0«
.09 .06
0« G3>
.14 .05
0»
.12
(W
.10
eβ
.12
0«
.14 .09
0®
.06
wɪ)
.06
eβ
.05
<e»
.09
.07 .06
(33) β7>
.09 .00
(<»> 08>
.08 .04
»7> <MO>
.06 .07
βD »2)
.08 .03
<44> <41>
.07 .05
.18
pυ
.19
PS)
.18
(«)
.20
06)
.07	.04	.06	.04	.01
PS)	β7>	0»	<W>	<38>
.07	.04	.05	.02	.02
an	<42>	<4i>	(®>	(«>
.08	.05	.06	.04	.01
.08
(38)
.06
(»)
.05
.02
.02
.05
.04 .05
<41>
.03
幽
.02
<41>
.05
(«4
.00
.02
(<≈>
.04 .Ql
.02 .06 .07 .01
(32) (34) Oa <41>
.02 .04 .04 .02
<44> <40> <41> <45>
.03 .06 .05 .03
P4) (1(B) (»7) (10β (104) (99) (W) (10β) (ll>8> (ɪɪɪ) (UH) (lβl) (IOt) {113)
.1Q .Q4 .05 .05 .Q4 .03
(43) <5β> β5) (M) (S)
.1Q .1Q .05 .08 .03 .02
(123) (lβ7) (11«) (12Q) (124)
.12 .13 .08 .11
UW> <120> (112) {129)
.12 .11 .08 .12
(15β) (155) (ua) (lββ)
.16 .14 .09 .11
U<H> tK>
.16
am
.15
σs
.10
g
.16
.12
(8D
.13
w»
.13
P«
.15
»3> <W5>
US4> U43>
.09
WS
.10
(56
.09
.10
.10
(w
WW
.05
(12»
.04
<wo>
.04
U13)
.03
.05
.19
P3)
.15
(w>
05) <44> <48> (®> <«>
.06 .04 .07 .04 .02
(5β)
.03
.03
.05
e®
.05
eβ
.05
.02
e®
.02
eβ
.03
.10 .01
(53) 07>
.04 .02
(«4 βo)
.04 .01
.03 .04 .06 .03
<4» <4» 07> βS>
.02 .04 .05 .01
(43> <«> Ms βθ>
.03 .04 .04 .QQ
05)	(12β)	(UZ)	(131)	(134)	(12β)	(139)	(133)	(135)	(138)	(129)	(125)	(127)	(143)
.09	.05	.12	.05	.02	.04	.03	.02	.04	.01	.02	.06	.05	.01
(99)	{137)	{143>	(143)	(139)	(13β)	(14β)	(145)	(138)	(Ml)	(134)	(US)	(13β)	(1S>)
.11 .07	.04	.08 .04	.03	.06 .04	.03	.03 .01	.04	.06 .04	.01
(β9) (IM)	(203)	(194 1197)	{2Q3>	(195) (192)	{2<M>	(191) (2OS)	(IM)	(IK) (1«5)	¢13)
.15
eo)
.15
(46>
.09	.05	.10	.05	.02 .05 .04 .02 .03 .01	.04	.06	.05	.01
(82)	(12β)	<12®	{117}	(125) {117) (llβ) (122) (117) (123)	(12β)	(IlS)	(IlS)	(131)
.06 .05 .08 .06 .02 .05 .06 .03
PO> (95> (M> UO3> UO5> (»> {1M> (9®
.10 .09 .05 .09 .05 .03
.03 .01 .04 .04 .05 .01
(W (≈M> (9β> (98> (98> {lββ>
.09 .03
σs> p»
.11 .04
<M3> <MO> <»7>
.13 .11 .10 .11 .07
P7S> Pββ> {m> (295> 092>
P8)
.12
as)
.16
(83)
.12
皿
(β3)	«7>	(BS>	(88)	(82)
.05	.05	.09	.04	.02
(59>	«7>	Ws	<M>	<«)
.08	.05	.10	.06	.02
.04 .03 .03
(≡> WW wɪ)
.06 .04 .03
»i> (a® »2)
.04 .05 .02
.02
(W
.03
an
.02
.QQ	.04	.04	.04	.02
(»»	«1>	«?>	«1>	β≡>
.01	.04	.07	.04	.01
02>	(W>	03>	Ws	»?>
.01	.04	.05	.05	.02
(IlS)	{171>	{17β	{18S>	(182)	(17β)	(1«1)	(18β)	(179)	(Ml)	(175)	(174)	{177)	(IK)
.07	.04	.08	.05	.03	.05	.05	.03	.04	.02	.05	.07	.05	.01
PSI)	049)	(32Q	027)	027)	01«)	029)	(33β)	(S5)	(337)	(3OS)	(303)	{2∞>	W)
ZIPWITH
SCANLl
SORT
REVERSE
(*-D
(**2)
(+1)
(-1)
(*2)
(*3)
(*4)
(/2)
(/3)
(/4)
SUM
.03	.05	.04	.03	.04	.05	.03
(≡>	WW	wɪ)	(SS)	(B7>	σs>	P2)
.05	.08	.04	.04	.04	.06	.06
018)	017)	{2K>	<314)	(3S5)	W«)	P53)
.04	.09	.05	.05	.05	.09	.07
U75>	(17β>	(151>	(174)	(17β)	(Ml)	(137)
.12 .08 .05 .11 .07
.05
(S)
.05
<<≡>
.05
(43)
.07
<4β)
.05
(βι>
.07
(<»>
.03
<∞)
.09
eɪ)
.07
(sβ
.06
<e»
.09
.09
(w>
.08
<e»
.06
0«
.06
.02
.03
<41>
.03
βτ)
.06
«»
.02
eβ
.02
(sβ
.03
<e»
.03 .03
eo> e?>
.06 .05
<62> βD
.09
(<»>
eɪ)
.13
ue>
.15
u∞)
.22
<44)
.11 .15
(54) (43)
.05 .03 .07 .12
{44> (33) β7> PS)
.04	.04	.04	.03	.18
(«»	<42>	06>	03)	OS)
.04	.06	.05	.09	.13
e®
<n} σw σs> m>
.08 .09 .09 .09
.05
t∏}
.03
(«e)
.05
W)
.06
03)
.07
CM)
.06
P56> P7β P72> P7β P26> βl>
.09 .12 .10 .11
U®> <U3> Uββ {153>
.12 .08 .16 .10
βθ> (43) <4» («)
.09 .06 .10 .11
β2)	(55)	(S)
.06 .15 .06 .06
(32)	{42>	(41>	<41>
.09 .10 .06 .09
.07 .08
<114> <W>
.04 .11
(3Z) (≡)
.05 .08
.04 .08
W>
.04 .05
as) G3>
.04 .10
.04 .03
.04 .02
(3e 06
.04 .01
(55) {45> {47> {44>
.08 .10 .08 .10
<β5> 0» (32} p2>
.05 .05 .10 .16
08> P6> βθ> P7>
<®» (44) 05)
.05 .07 .16
(«»
.04
ps)
.04
P8)
<4» <62>
.15 .12
08> 0»
(«)
.10
(∞)
.03
{31)
.11 .05 .06
PS) (3β) (33)
(39)
.04
<w>
.03
(34)
.07
(«)
.06
{31)
(»)
(W)
.05
(M)
.05
«s)
.07
(6>
(67)
.08
(es
.07
<e»
.05
.05
(w>
.03
e®
l<a>
0«
.03
e®
.03
WΛ
.04 .05 .05 .10 .04 .09 .12 .07
(43) 0» (34)
.03 .01 .05
β7> βθ> PS)
.06 .06 .07
{62> {53} βθ)
.05 .05 .08
(w> eɪ) eβ)
.04 .04 .03 .04 .08
W7) p2> PO> 07> β8)
PS)	0β>	08>	(43)	(3»
.20	.05	.14	.10	.17
P7>	Pβ>	(33)	{32)	(S)
.14	.09	.09	.09	.11
<48>	07>	07>	(S6>	tt≡>
.17	.09	.09	.07	.10
<48>	07>	(βl>	(eβ>	{57>
.12	.06	.11	.07	.09
<βs>	wɪ)	(es>	(e≡>	(ea>
(23)
.03
(»)
.03
(23)
.08
(β9)
.08
(»)
.03
(S7>
.09	.27	.20	.14 .07	.05 .09	.06	.15	.16	.14	.14
(5}	{5}⑸	<6>	<4>	<3>	(4	(S	<4>	<4>	<6>	⑶
.15
(H2)
.10 .11
(M3> U12>
.09 .10
du) mn
eɪ)
e?)
»2)
.13
.12 .10
<β3) <®0
.14 .12
.22 .30 .28
<6>	<4>	{5}
UOZ1
.13
WS
.10 .10 .11
(w) Pβ p»>
.10 .11 .13
p12> <21S> Oβ3>
.10 .10 .13
(l<x>> {llβ> (133)
(4®
.09
0≡)
.12
.15
(4®
a<o
.07
.10
as
.05
.13
(4®
.13
(4»
.09
(56
.05	.05	.04	.05	.08	.05	.02	.05	.06	.03	.02	.01	.04	.07	.05	.01
(M4>	U»>	(58>	{131>	{122>	{133>	{131>	(12β)	U32>	U3O>	(Ul>	{J32>	{D3>	U»>	{117)	{141>
.05	.06	.04	.05	.08	.04	.03	.07	.05	.03	.02	.01	.04	.05	.05	.01
(125)	¢8)	(β3)	(141)	(Uβ	(130	(145)	(13«)	(143)	(142)	(138)	(138)	(133)	(19)	(135)	(15β)
.07	.04	.08	.04	.08	.02	.03	.03	.05	.05	.04	.02	.05	.06	.05	.02
<≈4>	pl>	<6S>	{13B>	U32>	(US	U35>	{131>	(134)	U35>	{U1>	{J27>	{D»>	{12β>	{12β>	U®>
.07 .04 .06 .04 .07 .06 .03
(95)
.06
.05 .13
PβO> P2>
(54>	(98>	{M}	UO3>	(96>
.07	.03	.08	.05	.11
<es>	(9O>	«7>	(S6)	(«8»
.05	.04	.04	.04	.01	.04	.07	.05	.02
(95)	{103)	(IM)	(Iia)	(UH)	(9S>	(96)	(94)	(111)
.03	.04	.03	.03	.03	.04	.07	.04	.02
Wn	WW	(w	(81)	(w»	«<»	wυ	wυ	W
.07	.03	.09	.04	.04	.05	.05	.04	.03	.01	.04	.06	.04	.01
¢19)	{3O3>	(297>	01®	09S>	(3βl)	01Q)	(3l>8)	(3M)	<310	(2S7)	{2M>	(283)	034)
.06	.08	.05	.02	.04	.04	.02	.03	.01	.03	.05	.05	.02
(175)	{174	{173>	(180)	(IM)	(18β)	(180)	(184)	(175)	(Iβ9)	(1C8>	(1C8>	(IH)
.03 .02
eɪ) eɪ)
.04 .05
.00
eɪ)
.02
<βo>
.04 .05
.04 .05 .04 .QQ
eɪ) eɪ) eo> eβ>
.07 .07 .05 .00
07> βl> <W <M>
.05 .08 .03 .03
<42> <45> {42> {47>
.03 .07 .05 .01
08> {43> {®» {46>
.04 .06 .08 .01
(5» {5S> {531 (e≡)
.09 .07 .05 .00
(43) <42> 08> {β5>
.07 .07 .01 .01
as) as> 03) e?>
.05 .05 .02 .01
<44> <45> 08> {49>
.04 .05 .03 .02
.09 .07 .10 .10	.13	.07	.02
<®»	βυ	is)	(sι)
.10	.10	.06	.02
<«>	0»	(∞)	<S7>
.05	.06	.12	.03
PS>	{44>	{41>	<«)
.11	.02	.06	.07
Oβ)	{42>	{®»	(45)
(<≈> eo>
.08 .07
<«> (W
.11 .04
08) 的
.14 .07 .43
0®
.08
eɪ)
.08
.25
an ess
.06 .08
<«> (Ss)
PD
.15
¢3)
.13
u»
.18
U4)
.14	.10	.06	.08	.07	.04
P7>	<41>	{59>	07>	{<≡>	{57>
.11	.06	.10	.06	.06	.07	.04	.03
06>	β7>	Ufl	(34)	(43)	{42>	{37>	{41>
.19	.03	.08	.04	.03	.13	.02	.03
as)	(32)	(Q	p7>	(34)	»5)	(W)	(38)
.04 .11 .Q4 .12 .06 .04 .05 .04 .02
at)
.07
oa)
.13
.07
e®
.10
{w>
<«>	<®»	{15>	{42}	(β5>	{44>	(«)	(e)
.15	.13	.06	.06	.03	.10	.05	.05
(34)	»1)	¢1)	(32)	031	(33)	{3β)
.05	.08	.06	.04	.08	.05	.03
{531	U»)	{47>	(eβ>	{e≡>	(6β>	<∞)
.04	.12	.06	.04	.06	.07	.03
(S6>	P7>	{48>	(S8>	«S)	(«>
.05	.11	.06	.03	.07	.07	.03
<βo>	an	S	(ess	(«>	{to>	(«e>
.18	.11	.03	.02	.04	.02
(β	<z>	<6>	<6>	<6>	{5}
βυ
.05
{57>
.06
MB
.02
(<»>
.10
(βι>
.03
.05
<e»
.10
(<⅛β
<βl>
0»
.02
.02
(eɪ)
.16
MB
.07
O6)
.03
G3)
(«»
.04 .04 .05
<«> («4 (<u»
.04 .04 .07
aυ at>
.04 .07
(M)
.05
(e»
.07
(M)
<4)
.05
(网
.07
.06
(6>
os>
.03
.03
(网
.02
β)
(Sβ
.03
幽
.13
(βs
.03
(βι>
.03
(«»
.02
G3)
(43)
.03
(46>
.02
(58)
.02
<44)
.03
06)
.03
(«>
.02
(β7>
.02
(β7>
.00
P2)
.00
(6>
as)
.06
(«)
(33) (34)
.11 .08
<M> (β3)
.09
(β3)
.09 .16
{6S> <β7>
.02 .05 .02
<6> <S <S
β7)
.01
<6S>
.01
σo)
.00


Figure 10: Conditional confusion matrix for the neural network and test set of P = 500 programs of
length T = 5. The presentation is the same as in Figure 9.
20