Published as a conference paper at ICLR 2017
Why Deep Neural Networks for Function Ap-
proximation?
Shiyu Liang & R. Srikant
Coordinated Science Laboratory
and
Department of Electrical and Computer Engineering
University of Illinois at Urbana-Champaign
Urbana, IL 61801, USA
{sliang26,rsrikant}@illinois.edu
Ab stract
Recently there has been much interest in understanding why deep neural networks
are preferred to shallow networks. We show that, for a large class of piecewise
smooth functions, the number of neurons needed by a shallow network to ap-
proximate a function is exponentially larger than the corresponding number of
neurons needed by a deep network for a given degree of function approximation.
First, we consider univariate functions on a bounded interval and require a neural
network to achieve an approximation error of ε uniformly over the interval. We
show that shallow networks (i.e., networks whose depth does not depend on ε)
require Ω(poly(1 /ε)) neurons while deep networks (i.e., networks whose depth
grows with 1 /ε) require O(Polylog(1 /ε)) neurons. We then extend these results
to certain classes of important multivariate functions. Our results are derived for
neural networks which use a combination of rectifier linear units (ReLUs) and bi-
nary step units, two of the most popular type of activation functions. Our analysis
builds on a simple observation: the multiplication of two bits can be represented
by a ReLU.
1 Introduction
Neural networks have drawn significant interest from the machine learning community, especially
due to their recent empirical successes (see the surveys (Bengio, 2009)). Neural networks are used
to build state-of-art systems in various applications such as image recognition, speech recognition,
natural language process and others (see, Krizhevsky et al. 2012; Goodfellow et al. 2013; Wan
et al. 2013, for example). The result that neural networks are universal approximators is one of the
theoretical results most frequently cited to justify the use of neural networks in these applications.
Numerous results have shown the universal approximation property of neural networks in approxi-
mations of different function classes, (see, e.g., Cybenko 1989; Hornik et al. 1989; Funahashi 1989;
Hornik 1991; Chui & Li 1992; Barron 1993; Poggio et al. 2015).
All these results and many others provide upper bounds on the network size and assert that small
approximation error can be achieved if the network size is sufficiently large. More recently, there has
been much interest in understanding the approximation capabilities of deep versus shallow networks.
Delalleau & Bengio (2011) have shown that there exist deep sum-product networks which cannot
be approximated by shallow sum-product networks unless they use an exponentially larger amount
of units or neurons. Montufar et al. (2014) have shown that the number of linear region increases
exponentially with the number of layers in the neural network. Telgarsky (2016) has established
such a result for neural networks, which is the subject of this paper. Eldan & Shamir (2015) have
shown that, to approximate a specific function, a two-layer network requires an exponential number
of neurons in the input dimension, while a three-layer network requires a polynomial number of
neurons. These recent papers demonstrate the power of deep networks by showing that depth can
lead to an exponential reduction in the number of neurons required, for specific functions or specific
neural networks. Our goal here is different: we are interested in function approximation specifically
1
Published as a conference paper at ICLR 2017
and would like to show that for a given upper bound on the approximation error, shallow networks
require exponentially more neurons than deep networks for a large class of functions.
The multilayer neural networks considered in this paper are allowed to use either rectifier linear
units (ReLU) or binary step units (BSU), or any combination of the two. The main contributions of
this paper are
•	We have shown that, for ε-approximation of functions with enough piecewise smoothness, a
multilayer neural network which uses Θ(log(1 /ε)) layers only needs O (poly log(1 /ε)) neurons,
while Ω(poly(1 /ε)) neurons are required by neural networks with o(log(1 /ε)) layers. In other
words, shallow networks require exponentially more neurons than a deep network to achieve the
level of accuracy for function approximation.
•	We have shown that for all differentiable and strongly convex functions, multilayer neural net-
works need Ω(log(1 /ε)) neurons to achieve an ε-approximation. Thus, our results for deep net-
works are tight.
The outline of this paper is as follows. In Section 2, we present necessary definitions and the
problem statement. In Section 3, we present upper bounds on network size, while the lower bound
is provided in Section 4. Conclusions are presented in Section 5. Around the same time that our
paper was uploaded in arxiv, a similar paper was also uploaded in arXiv by Yarotsky (2016). The
results in the two papers are similar in spirit, but the details and the general approach are substantially
different.
2	Preliminaries and problem statement
In this section, we present definitions on feedforward neural networks and formally present the
problem statement.
2.1	Feedforward Neural Networks
A feedforward neural network is composed of layers of computational units and defines a unique
function f : Rd → R. Let L denote the number of hidden layers, Nl denote the number of units of
layer l, N = PlL=1 Nl denote the size of the neural network, vector x = (x(1), ..., x(d)) denote the
input of neural network, zjl denote the output of the jth unit in layer l, wil,j denote the weight of the
edge connecting unit i in layer l and unit j in layer l + 1, blj denote the bias of the unit j in layer l.
Then outputs between layers of the feedforward neural network can be characterized by following
iterations:
zjl+1 = σ XiN=l1 wil,jzil + blj+1 , l∈ [L-1],j∈ [Nl+1],
with
input layer: zj1 = σ X wi0,j x(i) + bj1 , j ∈ [N1],
output layer: f( x) = σ Xi=1 wiL,j ziL + bjL+1 .
Here, σ(∙) denotes the activation function and [n] denotes the index set [n] = {1, ...,n}. In this
paper, we only consider two important types of activation functions:
•	Rectifier linear unit: σ(x) = max{0, x}, x ∈ R.
•	Binary step unit: σ(x) = I{x ≥ 0}, x ∈ R.
We call the number of layers and the number of neurons in the network as the depth and the size
of the feedforward neural network, respectively. We use the set F(N, L) to denote the function
set containing all feedforward neural networks of depth L, size N and composed of a combination
2
Published as a conference paper at ICLR 2017
1st layer
2nd layer
nth layer
(≥) : binary step unit
ζ+ : adder
Figure 1: An n-layer neural network structure for finding the binary expansion of a number in [0, 1].
of rectifier linear units (ReLUs) and binary step units. We say one feedforward neural network is
deeper than the other network if and only if it has a larger depth. Through this paper, the terms
feedforward neural network and multilayer neural network are used interchangeably.
2.2	Problem Statement
In this paper, we focus on bounds on the size of the feedforward neural network function approx-
imation. Given a function f, our goal is to understand whether a multilayer neural network f of
depth L and size N exists such that it solves
∣⅛≠
~ min ∣∣∕ — f ∣∣≤ ε.	(1)
f∈F (N,L)
Specifically, we aim to answer the following questions:
1	Does there exists L(ε) and N(ε) such that (1) is satisfied? We will refer to such L(ε) and
N(ε) as upper bounds on the depth and size of the required neural network.
2	Given a fixed depth L, what is the minimum value of N such that (1) is satisfied? We will
refer to such an N as a lower bound on the size of a neural network of a given depth L.
The first question asks what depth and size are sufficient to guarantee an ε-approximation. The
second question asks, for a fixed depth, what is the minimum size of a neural network required
to guarantee an ε-approximation. Obviously, tight bounds in the answers to these two questions
provide tight bounds on the network size and depth required for function approximation. Besides,
solutions to these two questions together can be further used to answer the following question. If a
deeper neural network of size Nd and a shallower neural network of size Ns are used to approximate
the same function with the same error, then how fast does the ratio Nd /Ns decay to zero as the error
decays to zero?
3	Upper bounds on function approximations
In this section, we present upper bounds on the size of the multilayer neural network which are
sufficient for function approximation. Before stating the results, some notations and terminology
deserve further explanation. First, the upper bound on the network size represents the number of
neurons required at most for approximating a given function with a certain error. Secondly, the
notion of the approximation is the L∞ distance: for two functions f and g, the L
these two function is the maximum point-wise disagreement over the cube [0, 1]
distance between
∞
d
3.1	Approximation of univariate functions
In this subsection, we present all results on approximating univariate functions. We first present a
theorem on the size of the network for approximating a simple quadratic function. As part of the
proof, we present the structure of the multilayer feedforward neural network used and show how the
neural network parameters are chosen. Results on approximating general functions can be found in
Theorem 2 and 4.
3
Published as a conference paper at ICLR 2017
Theorem 1. For function f (x) = x2, x ∈ [0, 1], there exists a multilayer neural network f(x)
with O (log 1)layers, O (log ɪ) binary step units and O (log 1) rectifier linear units such that
∙-v
If(x) - f(x)I ≤ ε,	∀x ∈ [0, 1]∙
Proof. The proof is composed of three parts. For any x ∈ [0, 1], we first use the multilayer neural
network to approximate x by its finite binary expansion P2。Xi. We then construct a 2-layer neural
network to implement function f (P：=。裳).
For each x ∈ [0,1], x can be denoted by its binary expansion x = P∞=。 22i, where Xi ∈ {0, 1} for
all i ≥ 0. It is straightforward to see that the n-layer neural network shown in Figure 1 can be used
to find x0, ..., xn.
Next, We implement the function f(x) = f (P：=。xi) by a two-layer neural network. Since
∙-v
f(x) = x2, we then rewrite f(x) as follows:
xi ∙
i=0
j=0
∙-v
The third equality follows from the fact that xi ∈ {0, 1} for all i. Therefore, the function f(x) can
be implemented by a multilayer network containing a deep structure shown in Figure 1 and another
hidden layer with n rectifier linear units. This multilayer neural network has O(n) layers, O(n)
binary step units and O(n) rectifier linear units.
Finally, we consider the approximation error of this multilayer neural network,
Xn2	n	∞
X) ≤ 2x - X X =2 X X ≤ 2n1ι ∙
i=0	i=n+1
Therefore, in order to achieve ε-approximation error, one should choose n = Rog2 1] + 1. In
summary, the deep neural network has O (log ɪ) layers, O (log 1) binary step units and O (log (ɪ))
rectifier linear units.	□
Next, a theorem on the size of the network for approximating general polynomials is given as fol-
lows.
Theorem 2. For polynomials f(x) = ip=0 aixi, x ∈ [0, 1] and ip=1 IaiI ≤ 1, there exists a mul-
tilayer neural network f(x) with O (P + log P) layers, O (log P) binary SteP units and O (Plog Pl
∙-v
rectifier linear units such that If (x) - f (x)I ≤ ε, ∀x ∈ [0, 1].
Proof. The proof is composed of three parts. We first use the deep structure shown in Figure 1 to find
the n-bit binary expansion Pin=0 aixi ofx. Then we construct a multilayer network to approximate
polynomials gi(x) = xi, i = 1, ..., P. Finally, we analyze the approximation error.
Using the same deep structure shown in Figure 1, we could find the binary expansion sequence
{xo,…，xn}. In this step, we used n binary steps units in total. Now we rewrite gm +ι(PZo 2n),
xj ∙ 2 gm
(X 卷)1
n
max 2(xj - 1)
j=0
+ 2j gm
(2)
Clearly, the equation (2) defines iterations between the outputs of neighbor layers. Therefore, the
deep neural network shown in Figure 2 can be used to implement the iteration given by (2). Further,
to implement this network, one should use O(P) layers with O(Pn) rectifier linear units in total. We
now define the output of the multilayer neural network as f(x) = PP=O aigi (Pn=0 X2j) . For this
multilayer network, the approximation error is
P	nx	P
lf (X) - f( x) | = faigi IE 2 I - EaiX
i=0	j=0	i=0
P
≤X
i=0
lail -
- xi
≤ 2p1
4
Published as a conference paper at ICLR 2017
x0
x1
x2
xn
1
ReLU
g3 (X xi!
g2 (X ⅛
S 烂 xi)
-X0*-IReLU
Xi
-Al ReLU
x2
------>1 ReLU
-^n. IReLU
gp-ι (X j
ReLU
ReL
Al ReLU
gp (X xi)
Figure 2: The implementation of polynomial function
This indicates, to achieve ε-approximation error, one should choose n = [log P] + 1. Besides,
since we used O(n + p) layers with O(n) binary step units and O(pn) rectifier linear units in
total, this multilayer neural network thus has O (P + log ∣) layers, O (log P) binary step units and
O (P log P) rectifier linear units.	□
In Theorem 2, we have shown an upper bound on the size of multilayer neural network for approxi-
mating polynomials. We can easily observe that the number of neurons in network grows as PlogP
with respect to P, the degree of the polynomial. We note that both Andoni et al. (2014) and Barron
(1993) showed the sizes of the networks grow exponentially with respect toP if only 3-layer neural
networks are allowed to be used in approximating polynomials.
Besides, every function f with P + 1 continuous derivatives on a bounded set can be approximated
easily with a polynomial with degree P. This is shown by the following well known result of La-
grangian interpolation. By this result, we could further generalize Theorem 2. The proof can be
found in the reference (Gil et al., 2007).
Lemma 3 (Lagrangian interpolation at Chebyshev points). If a function f is defined at points
Z o,…,Zn, Zi = cos(( i + 1 / 2) π/(n +1)), i ∈ [ n ], there exists a polynomial ofdegree not more than
n such that Pn(zi) = f(zi), i = 0, ..., n. This polynomial is given by Pn (x) = in=0 f(zi)Li(x)
where Li (x)
___冗九+1(方)____
(x-z )πn +1(Z )
and πn+1 (x) =	jn=0(x - Zj). Additionally, iff is continuous
on
[-1, 1] and n + 1 times differentiable in (-1, 1), then
刈="-pn∣≤ 2n⅛)i Bf (n+啡
where f(n) (x) is the derivative of f of the nth order and the norm kfk is the l∞ norm
kfk = maxx∈[-1,1] f(x).
Then the upper bound on the network size for approximating more general functions follows directly
from Theorem 2 and Lemma 3.
Theorem 4. Assume that function f is continuous on [0,1] and「log ε^∣ + 1 times differentiable in
(0, 1). Let f(n) denote the derivative off of nth order and kfk = maxx∈[0,1] f (x). If Bf (n) B ≤ n!
holds for all n ∈ [[log ∣ [ + 1], then there exists a deep neural network f with O (log ɪ) layers,
O (log ε) binary step units, O ((log 1 )2) rectifier linear units such that Il f — fB ≤ ε.
Proof. Let N =「log ε^∣. From Lemma 3, it follows that there exists polynomial PN of degree N
such that for any x ∈ [0, 1],
|f(x)—PN(x)| ≤
。≤ 2N.
Let x0, ..., xN denote the first N + 1 bits of the binary expansion of x and define
f( x) = PN (P n=o 2N). In the following, We first analyze the approximation error of f and next
5
Published as a conference paper at ICLR 2017
show the implementation of this function. Let X = PN=o X. The error can now be upper bounded
by
∙-v
If (X) - f( x) I = If (x) -	PN	(X) | ≤ If (X) - f (X) I + If (x) -	PN	(X) |
N
≤ Bf叫 x-EF
i=0
111
+ 2N ≤ 2N + 2N ≤ε
∙-v
In the following, we describe the implementation of f by a multilayer neural network. Since PN is
∙-v
a polynomial of degree N , function f can be rewritten as
for some coefficients c0, ..., cN and gn = Xn, n ∈ [N]. Hence, the multilayer neural network shown
∙-v
in the Figure 2 can be used to implement f (X). Notice that the network uses O(N) layers with O(N)
binary step units in total to decode X0,...,XN and O(N) layers with O(N2) rectifier linear units in
total to construct the polynomial PN. Substituting N =「log ∣"∣, we have proved the theorem. □
Remark: Note that, to implement the architecture in Figure 2 using the definition of a feedforward
neural network in Section 2, we need the gi, i ∈ [p] at the output. This can be accomplished by
using O(P2) additional ReLUs. Since P = O(log(1 /ε)), this doesn,t change the order result in
Theorem 4.
Theorem 4 shows that any function f with enough smoothness can be approximated by a multilayer
neural network containing polylog (£) neurons with ε error. Further, Theorem 4 can be used to
show that for functions h1,...,hk with enough smoothness, then linear combinations, multiplications
and compositions of these functions can as well be approximated by multilayer neural networks
containing polylog(ɪ) neurons with ε error. Specific results are given in the following corollaries.
Corollary 5 (Function addition). Suppose that all functions h1, ..., hk satisfy the conditions in
Theorem 4, and the vector β ∈ {ω ∈ Rk : kωk1 = 1}, then for the linear combination
f = ik=1 βihi, there exists a deep neural network f with O (log £) layers, O (log ε) binary
step units, O ((log £ )2) rectifier linear units such that If (X) - f∖ ≤ ε, ∀x ∈ [0, 1].
Remark: Clearly, Corollary 5 follows directly from the fact that the linear combination f satisfies
the conditions in Theorem 4 if all the functions h1,...,hk satisfy those conditions. We note here that
the upper bound on the network size for approximating linear combinations is independent of k, the
number of component functions.
Corollary 6 (Function multiplication). Suppose that all functions h1,...,hk are continuous on [0, 1]
and「4k log2 4k + 4k + 2log2 £] + 1 times differentiable in (0, 1). If ∣∣h(n) ∣∣ ≤ n! holds for all
i ∈ [k] and n ∈ [「4k log2 4k + 4k + 2log2 2] + 1] then for the multiplication f = Qk=ι hi,
there exists a multilayer neural network f with O (k log k + log 1) layers, O (k log k + log £) bi-
nary step units and O ((k log k )2 + (log ɪ )2) rectifier linear units such that If (x) - f( x) I ≤ ε,
∀X ∈ [0, 1].
Corollary 7 (Function composition). Suppose that all functions h1, ..., hk : [0, 1] → [0, 1]
satisfy the conditions in Theorem 4, then for the composition f = h1 ◦ h2 ◦ ... ◦ hk,
there exists a multilayer neural network f with O (k log k log £ + log k (log ɪ)2) layers,
O (k log k log £ + log k (log ɪ)2) binary step units and O (k2 (log ɪ)2 + (log £)4) rectifier lin-
∙-v
ear units such that If (X) - f (X)I ≤ ε, ∀X ∈ [0, 1].
Remark: Proofs of Corollary 6 and 7 can be found in the appendix. We observe that different from
the case of linear combinations, the upper bound on the network size grows as k2 log2 k in the case
of function multiplications and grows as k2 (log £)2 in the case of function compositions where k
is the number of component functions.
6
Published as a conference paper at ICLR 2017
In this subsection, We have shown a polylog G) upper bound on the network size for ε-
approximation of both univariate polynomials and general univariate functions with enough smooth-
ness. Besides, we have shown that linear combinations, multiplications and compositions of uni-
variate functions with enough smoothness can as well be approximated with ε error by a multilayer
neural network of size polylog (1). In the next subsection, we will show the upper bound on the
network size for approximating multivariate functions.
3.2 Approximation of multivariate functions
In this subsection, we present all results on approximating multivariate functions. We first present
a theorem on the upper bound on the neural network size for approximating a product of multi-
variate linear functions. We next present a theorem on the upper bound on the neural network size
for approximating general multivariate polynomial functions. Finally, similar to the results in the
univariate case, we present the upper bound on the neural network size for approximating the linear
combination, the multiplication and the composition of multivariate functions with enough smooth-
ness.
Theorem 8.	Let W = {w ∈ Rd : kwk1 = 1}. For f(x) = Qip=1 (wiT x, x ∈ [0, 1]d and
Wi ∈ W, i = 1,…,p, there exists a deep neural network f(x) with O (P + log pd^ layers and
O (log pd^ binary step units and O Qdlog pd^ rectifier linear units such that ∣f (x) 一 f(x) ∣ ≤ ε,
∀x ∈ [0, 1]d.
Theorem 8 shows an upper bound on the network size for ε-approximation of a product of multi-
variate linear functions. Furthermore, since any general multivariate polynomial can be viewed as a
linear combination of products, the result on general multivariate polynomials directly follows from
Theorem 8.
Theorem 9.	Let the multi-index vector α = (α 1,..., ad), the norm ∣α∣ = α 1+…+αd, the coefficient
Cα = Cα1...αd, the input vector x = (x(1), ..., x(d)) and the multinomial xα = x(1)α1 ...x(d) αd. For
positive integer P and polynomial f (x) = P ɑ: ∣α∣≤p CαXα, X ∈ [0, 1]d and P α: ∣α∣≤p ∣Cα∣ ≤ 1,
there exists a deep neural network f(x) of depth O (P + log dp) and size N(d,p,ε) such that
∣f(X) - f(X)∣ ≤ ε, where
N(d,P,ε) = p2 (P + -- 1) logpd∙
Remark: The proof is given in the appendix. By further analyzing the results on the network size,
we obtain the following results: (a) fixing degree p, N(d, ε) = O (dp +1 log ∣) as d → ∞ and
(b) fixing input dimension d, N(p, ε) = O (Pd log P) as P → ∞. Similar results on approximating
multivariate polynomials were obtained by Andoni et al. (2014) and Barron (1993). Barron (1993)
showed that on can use a 3-layer neural network to approximate any multivariate polynomial with
degree p, dimension d and network size dp∕ε2. Andoni et al. (2014) showed that one could use the
gradient descent to train a 3-layer neural network of size d2p/ε2 to approximate any multivariate
polynomial. However, Theorem 9 shows that the deep neural network could reduce the network size
from O (1 /ε) to O (log 1) for the same ε error. Besides, for a fixed input dimension d, the size of
the 3-layer neural network used by Andoni et al. (2014) and Barron (1993) grows exponentially with
respect to the degree P. However, the size of the deep neural network shown in Theorem 9 grows
only polynomially with respect to the degree. Therefore, the deep neural network could reduce the
network size from O(exp(P)) to O(poly(P)) when the degree P becomes large.
Theorem 9 shows an upper bound on the network size for approximating multivariate polynomials.
Further, by combining Theorem 4 and Corollary 7, we could obtain an upper bound on the network
size for approximating more general functions. The results are shown in the following corollary.
Corollary 10. Assume that all univariate functions h1,..., hk : [0, 1] → [0, 1], k ≥ 1, satisfy the
conditions in Theorem 4. Assume that the multivariate polynomial l(X) : [0, 1]d → [0, 1] is of degree
∙-v
P. For composition f = h1 ◦ h2 ◦... ◦ hk ◦ l(X), there exists a multilayer neural network f of depth
O (P + log d + k log k log ε + log k (log ε )2) andofsize N (k,p, d, ε) such that ∣f( x)-f (x) ∣ ≤ ε
for ∀x ∈ [0, 1]d, where
7
Published as a conference paper at ICLR 2017
N(k,P,d,ε) = O (P2 p+ ^++d-1^ logpd + k2
Remark: Corollary 10 shows an upper bound on network size for approximating compositions of
multivariate polynomials and general univariate functions. The upper bound can be loose due to the
assumption that l(x) is a general multivariate polynomials of degree p. For some specific cases, the
upper bound can be much smaller. We present two specific examples in the Appendix H and I.
In this subsection, We have shown that a similar polylog G) upper bound on the network size for
ε-approximation of general multivariate polynomials and functions which are compositions of uni-
variate functions and multivariate polynomials.
The results in this section can be used to find a multilayer neural network of size polylog (1) which
provides an approximation error of at most ε. In the next section, we will present lower bounds on the
network size for approximating both univariate and multivariate functions. The lower bound together
with the upper bound shows a tight bound on the network size required for function approximations.
While we have presented results in both the univariate and multivariate cases for smooth functions,
the results automatically extend to functions that are piecewise smooth, with a finite number of
pieces. In other words, if the domain of the function is partitioned into regions, and the function
is sufficiently smooth (in the sense described in the Theorems and Corollaries earlier) in each of
the regions, then the results essentially remain unchanged except for an additional factor which will
depend on the number of regions in the domain.
4	Lower bounds on function approximations
In this section, we present lower bounds on the network size in function for certain classes of func-
tions. Next, by combining the lower bounds and the upper bounds shown in the previous section, we
could analytically show the advantages of deeper neural networks over shallower ones. The theorem
below is inspired by a similar result (DasGupta & Schnitger, 1993) for univariate quadratic func-
tions, where it is stated without a proof. Here we show that the result extends to general multivariate
strongly convex functions.
Theorem 11. Assume function f : [0, 1]d → R is differentiable and strongly convex with parameter
∙-v
μ. Assume the multilayer neural network f is ComPosed of rectifier linear units and binary SteP
units. If ∣f (x) 一 f(x) | ≤ ε, ∀x ∈ [0, 1]d, then the network size N ≥ log2(专)∙
Remark: The proof is in the Appendix F. Theorem 11 shows that every strongly convex function
cannot be approximated with error ε by any multilayer neural network with rectifier linear units and
binary step units and of size smaller than log2(μ∕ε) 一 4. Theorem 11 together with Theorem 1 di-
rectly shows that to approximate quadratic function f(x) = x2 with error ε, the network size should
be of order Θ (log j). Further, by combining Theorem 11 and Theorem 4, we could analytically
show the benefits of deeper neural networks. The result is given in the following corollary.
Corollary 12. Assume that univariate function f satisfies conditions in both Theorem 4 and The-
orem 11. If a neural network fs is of depth Ls = o (log j), size Ns and ∣f (x) — fs( x) | ≤ ε,
for ∀x ∈ [0,1], then there exists a deeper neural network fd(x) of depth Θ (log ɪ), size Nd =
O(L2 log2 Ns) such that ∣f (x) — fd(x) | ≤ ε, ∀x ∈ [0,1].
Remarks: (i) The strong convexity requirement can be relaxed: the result obviously holds if the
function is strongly concave and it also holds if the function consists of pieces which are strongly
convex or strongly concave. (ii) Corollary 12 shows that in the approximation of the same function,
the size of the deep neural network Ns is only of polynomially logarithmic order of the size of
the shallow neural network Nd, i.e., Nd = O(polylog(Ns)). Similar results can be obtained for
multivariate functions on the type considered in Section 3.2.
5	Conclusions
In this paper, we have shown that an exponentially large number of neurons are needed for function
approximation using shallow networks, when compared to deep networks. The results are estab-
lished for a large class of smooth univariate and multivariate functions. Our results are established
for the case of feedforward neural networks with ReLUs and binary step units.
8
Published as a conference paper at ICLR 2017
Acknowledgments
The research reported here was supported by NSF Grants CIF 14-09106, ECCS 16-09370, and ARO
Grant W911NF-16-1-0259.
References
A. Andoni, R. Panigrahy, G. Valiant, and L. Zhang. Learning polynomials with neural networks. In
ICML, 2014.
A. R. Barron. Universal approximation bounds for superpositions of a sigmoidal function. IEEE
Transactions on Information theory, 1993.
Y. Bengio. Learning deep architectures for ai. Foundations and trends in Machine Learning, 2009.
C. K. Chui and X. Li. Approximation by ridge functions and neural networks with one hidden layer.
Journal of Approximation Theory, 1992.
G. Cybenko. Approximation by superpositions of a sigmoidal function. Mathematics of control,
signals and systems, 1989.
B. DasGupta and G. Schnitger. The power of approximating: a comparison of activation functions.
In NIPS, 1993.
O. Delalleau and Y. Bengio. Shallow vs. deep sum-product networks. In NIPS, 2011.
R. Eldan and O. Shamir. The power of depth for feedforward neural networks. arXiv preprint
arXiv:1512.03965, 2015.
K. I. Funahashi. On the approximate realization of continuous mappings by neural networks. Neural
networks, 1989.
A. Gil, J. Segura, and N. M. Temme. Numerical methods for special functions. SIAM, 2007.
I.	J. Goodfellow, D. Warde-Farley, M. Mirza, A. C. Courville, and Y. Bengio. Maxout networks.
ICML, 2013.
K.	Hornik. Approximation capabilities of multilayer feedforward networks. Neural networks, 1991.
K. Hornik, M. Stinchcombe, and H. White. Multilayer feedforward networks are universal approxi-
mators. Neural networks, 1989.
A. Krizhevsky, I. Sutskever, and G. E. Hinton. Imagenet classification with deep convolutional
neural networks. In NIPS, 2012.
G. F. Montufar, R. Pascanu, K. Cho, and Y. Bengio. On the number of linear regions of deep neural
networks. In NIPS, 2014.
T. Poggio, L. Rosasco, A. Shashua, N. Cohen, and F. Anselmi. Notes on hierarchical splines, dclns
and i-theory. Technical report, Center for Brains, Minds and Machines (CBMM), 2015.
M. Telgarsky. Benefits of depth in neural networks. arXiv preprint arXiv:1602.04485, 2016.
L.	Wan, M. Zeiler, S. Zhang, Y. LeCun, and R. Fergus. Regularization of neural networks using
dropconnect. In ICML, 2013.
D. Yarotsky. Error bounds for approximations with deep ReLU networks. arXiv preprint
arXiv:1610.01145, 2016.
9
Published as a conference paper at ICLR 2017
Appendix A	Proof of Corollary 5
∙-v
Proof. By Theorem 4, for each hi, i = 1, ..., k, there exists a multilayer neural network hi such that
∙-v
|hi(x) - h(x)| ≤ ε for any x ∈ [0, 1]. Let
k
f(x) =	βihi(x).
i=1
Then the approximation error is upper bounded by
k k
If (x) - f(x)I = Xβihi(x) ≤ X lβi∣ • ∣hi(x) - h(x) I = ε.
i=1	i=1
Now We compute the size of the multilayer neural network f. Let N =「log ε] and PN=O xi be the
∙-v
binary expansion ofx. Since hi(x) has a form of
N
hi (x) = cij gj
j =0
where gj (x) = xj , then f should has a form of
k
f( x) = X β
i=1
and can be further rewritten as
N
f( x) = X
j=0
(χ Cjey心力
N
cijgj
j=0
N
Xc0j	gj
=0
∙∙w
where c0j = icij βi . Therefore, f can be implemented by a multilayer neural network shown
Figure 2 and this network has at most O (log 1) layers, O (log ɪ) binary step units, O ((log 1)
rectifier linear units.
ɔɑ
Appendix B	Proof of Corollary 6
Proof. Since f(x) = h1(x)h2(x)...hk(x), then the derivative of f of order n is
Σ
α1 +...+αk =n
α1 ≥0,...,αk ≥0
n!
α1!α2!...αk!
By the assumption that
≤
α1 +...+αk =n
α1 ≥0,...,αk ≥0
αi! holds for i = 1, ..., k, then we have
n!
α1 !α2 !...αk !
h(1α1)h(2α2) ...h(kαk)
n+k-1
k-1 n!.
Then from Theorem 4, it follows that there exists a polynomial of PN degree N that
M n = kf -PN k≤( Nf (N+),2lΝ ≤ 2N (N+k )∙
Since
N+k
k-1
(N + k)N+k
≤ (k - 1)k-1(N + 1)N+
=(N + k Y-1 ( k - 1 A N+1 V ( e(N + k) Y-1
1 = k-- 1 ) I + N +1 )	≤ k k — 1 )
10
Published as a conference paper at ICLR 2017
then the error has an upper bound of
IRnk ≤ (eNN)k ≤ 22k+k log2N-
(3)
Since we need to bound
IRnk ≤ 2,
then we need to choose N such that
N ≥ k log2 N + 2k + log2 -.
Thus, N can be chosen such that
N ≥ 2k log2 N and N ≥ 4k + 2 log2 -.
2	2ε
Further, function l(x) = x/ log2 x is monotonically increasing on [e, ∞) and
l(4k log2 4k)
4k log2 4k
4k log2 4k
log2 4k + log2 log2 4k	log2 4k + log2 4k
2k.
≥
Therefore, to suffice the inequality (3), one should should choose
N ≥ 4k log2 4k + 4k + 2 log2 -.
Since N =14k log2 4k + 4k + 2log21"∣ by assumptions, then there exists a polynomial PN of
degree N such that
kf - Pnk≤ ε.
Let Pn=o X denote the binary expansion of x and let
∙-v
f(x) =	PN
The approximation error is
∙-v
lf(X) - f (x)I ≤ f(x) - f
+f
≤ kf(1)k
N
X-X Xi∣ + ε ≤ε
乙 2i I + 2 ≤
i=0
∙-v
Further, function f can be implemented by a multilayer neural network shown in Figure 2 and this
network has at most O(N) layers, O(N) binary step units and O(N2) rectifier linear units. □
Appendix C	Proof of Corollary 7
Proof. We prove this theorem by induction. Define function Fm = h1 ◦ ... ◦ hm, m = 1, ..., k.
Let Tι(m)log3 3m, T2(m)log3 3m and T3(m) (log3 ")denote the number oflayers, the number
of binary step units and the number of rectifier linear units required at most for ε-approximation
of Fm, respectively. By Theorem 4, for m = 1, there exists a multilayer neural network F1 with
at most Ti(l)l0g3 ε layers, T2 (l)l0g3 3 binary step units and T3(1) (log3 ε) rectifier linear units
such that
∙-v
∣Fi(x) - Fi(x)∣ ≤ ε, for x ∈ [0,1].
Now we consider the cases for 2 ≤ m ≤ k . We assume for Fm-1 , there exists a multilayer neural
network Fm_1 with not more than Ti (m - l)l0g3 3m layers, T2 (m - l)l0g3 3m binary step units
and T3 (m - 1) (log3 亭)rectifier linear units such that
lFm-1(x) - Fm-1(x) | ≤ 3 , for x ∈ [0, 1] ∙
11
Published as a conference paper at ICLR 2017
Further we assume the derivative of Fm-1 has an upper bound Fm0 -1 ≤ 1. Then for Fm, since
Fm (x) can be rewritten as
Fm (x) = Fm-1 (hm (x)),
and there exists a multilayer neural network hm with at most Ti (l)l0g3 3 layers, T2 (l)l0g3 ɜ binary
step units and T3(1) (log3 ɜ) rectifier linear units such that
ε
I hm (x) — hm (x) | S 3 , for x ∈ [0, 1],
and ∣∣hm∣∣ ≤ (1 + ε/3). Then for cascaded multilayer neural network Fm = Fm-1 ◦ Q+：/3
we have
Il Fm - Fm II =
≤
≤
≤
≤
Fm-1( hm ) - Fm-1 ∖ ^T~7~T^
∖ 1 + ε/ 3
∙-v
hm
1 + ε/3
∙-v
hm
1 + ε/3
∙-v
I + ε/3
∣∣FmT∣∣∙ hm - r⅛∣+ ε
∣∣ Fm-1∣∣ ∙ ∣∣ hm - hm∣∣+1∣ Fm-1∣∣ ∙
εεε
3+3+3=ε
ε/3
1 + ε/3
+
	
ε
+ 3
In addition, the derivative of Fm can be upper bounded by
IFm I ≤ ∣ Fm-1∣ ∙∣hm∣ = 1.
Since the multilayer neural network Fm is constructed by cascading multilayer neural networks
〜	'—"
Fm-1 and hm, then the iterations for T1, T2 and T3 are
3m
T1( m )log3 — = T1( m
T(m)log3 3- = T2(m
1)log3 ~ε+T1(1)log3 ε,
1)log3----+ t2 (1)log3 一,
(4)
(5)
T3(m)
ε
2
=T3(m
1)
	
ε
2
≤ k,
+T3(1) (log3 ε)
(6)
From iterations (4) and (5), we could have for 2 ≤ m
T1(m) = T1(m - 1) + T1(1)
T2(m) = T2(m - 1) + T2(1)
1 +log3(1 /)
m + log3 (1IE)
1 +log3(1 /)
m + log3 (1 1)
≤ T1 (m
≤ T2 (m
and thus
-1) + T 1(1)1 + log3(1 /ε)
m
-1) + T2(1)1 + log3(1 /ε)
T1(k) = O flogklog1) , T2(k) = O flogklog1).
ε
From the iteration (6), we have for 2 ≤ m ≤ k,
Tj ʌ Tj 1 ∖ I m∕ι∖A1+ log3 (1 /ε) ʌ / τ j 1∖∣
T3(m)= T3(m - 1) + T3(1) (m + log3(1 /ε) ) ≤ T3(m - 1) +
(1 + log3(1 /ε ))3
m2
	
	
ε
ε
m
and thus
T3 (k) = O
Therefore, to approximate f = Fk, we need at most O (k log k log ： + log k (log ：)2) layers,
O (klogklog 1 + logk (log ：)2) binary step units and O (k2 (log ：)2 + (lo∣
ear units.
：)4) rectifier lin-
□
12
Published as a conference paper at ICLR 2017
Appendix D Proof of Theorem 8
Proof. The proof is composed of two parts. As before, we first use the deep structure shown in
Figure 1 to find the binary expansion of x and next use a multilayer neural network to approximate
the polynomial.
Let x = (x(1), ..., x(d)) and wi = (Wi1, ..., Wid). We could now use the deep structure shown in
(k)
Figure 1 to find the binary expansion for each x(k), k ∈ [d]. Let x(k) = Pr=0 ^r- denote the binary
expansion of x(k), where x(rk) is the rth bit in the binary expansion of x(k). Obviously, to decode all
the n-bit binary expansions of all x(k), k ∈ [d], we need a multilayer neural network with n layers
and dn binary units in total. Besides, we let X = (Xc^r^,…，x(-)). Now we define
P
f( x) = f (X) = ∏
i=1
WikxI k)
We further define
l
gl(X) = Y
i=1
WikxI k)
Since for l = 1, ..., p - 1,
l
gl(X) = Y
i=1
Wikx(k) ] ≤ Y kWik 1 = 1,
i=1
then we can rewrite gι+ι(X), l = 1,…,p - 1 into
l+1
gl +1(x) = ∏
i=1
d
=X
k=1
d	d	n
=X [w(l+1)kx(k) ∙ gl (x)] = X W W(l +1)k X
k=1	k=1	r=0
n
W(l+1)k 0max 2(x(rk) — 1)
gl (x)
+ glx, 0
2r ,
Obviously, equation (7) defines a relationship between the outputs of neighbor layers and thus can
be used to implement the multilayer neural network. In this implementation, we need dn rectifier
∙-v
linear units in each layer and thus dnp rectifier linear units. Therefore, to implement function f (x),
we need p + n layers, dn binary step units and dnp rectifier linear units in total.
In the rest of proof, we consider the approximation error. Since for k = 1, ..., d and ∀x ∈ [0, 1]d,
Wjk ∙ ∏ (Wiχ) I ≤ £ [wjk1 ≤ p,
i=1,i6=j
j=1
then
If(x) — f(x)I = If(x) — f(x)I ≤ k^fk2 ∙kx - Xk2 ≤ P
By choosing n
[log2 pd], we have

p
j
1
p
p
If (x) — f (x) | ≤ ε.
Since we use nd binary step units to convert the input to binary form and dnp neurons in function
approximation, we thus use O (dlog p- I binary step units and O
log Pd^ rectifier linear units
in total. In addition, since we have used n layers to convert the input to binary form and p layers
in the function approximation section of the network, the whole deep structure has O (P + log Pd^
layers.	□
13
Published as a conference paper at ICLR 2017
Appendix E
Proof of Theorem 9
Proof. For each multinomial function g with multi-index α, gα (x) = xα, it follows from
Theorem 4 that there exists a deep neural network ga of size O (Iallog ad) and depth
O ^∖a∖ + log lαεld) such that
∖gα (X) — gα (X) ∖ ≤ ε.
Let the deep neural network be
f( X )= X Cag α ( X ),
a: | α∣≤p
and thus
∖f (X ) - f( X ) ∖ ≤ E ∖Ca∖ ∙ ∖ga ( X) — g a (X) ∖ = ε.
a: ∣ a∣≤p
Since the total number of multinomial is upper bounded by
p
p+d—1
d—1
the size of deep neural network is thus upper bounded by
p+d—
d—1
pd
ε
p
2
(8)
If the dimension of the input d is fixed, then (8) is has the order of
P2 (P ^dd11^ logpd = O ((ep)d +1 logpd) , P → ∞
while if the degree p is fixed, then (8) is has the order of
P2 (P++-- 1) log pd = O (P2 (ed)p log pd), d → ∞.
□
Appendix F Proof of Theorem 11
Proof. We first prove the univariate case d = 1. The proof is composed of two parts. We say the
function g(x) has a break point at x = z ifg is discontinuous at z or its derivative g0 is discontinuous
at z. We first present the lower bound on the number of break points M(ε) that the multilayer neural
∙-v
network f should have for ε-approximation of function f with error ε. We next relate the number of
break points M(ε) to the network depth L and the size N.
Now We calculate the lower bound on M(ε). We first define 4 points xo, x 1 = xo + 2∖Jρε∕μ,
x2 = x 1 + 2 y∕ρε∕μ and x3 = x2 + 2 y∕ρε∕μ, ∀ρ > 1. We assume
0 ≤ x0 < x1 < x2 < x3 ≤ 1.
∙-v	∙-v
We now prove that if multilayer neural network f has no break point in [x1, x2], then f should have
a break point in [x0, x1] and a break point in [x2, x3]. We prove this by contradiction. We assume
∙-v	∙-v
the neural network f has no break points in the interval [x0 , x3]. Since f is constructed by rectifier
∙-v
linear units and binary step units and has no break points in the interval [x0 , x3], then f should be
∙-v
a linear function in the interval [x0, x3], i.e., f(x) = ax + b, x ∈ [x0, x3] for some a and b. By
∙-v
assumption, since f approximates f with error at most ε everywhere in [0, 1], then
∖f(x1) — ax1 — b∖ ≤ ε and	∖f(x2) — ax2 — b∖ ≤ ε.
Then we have
f(x2) — f(x1) — 2ε	f(x2) — f(x1) +2ε
--------------------≤ a ≤ ----------------------.
x2 — x1	x2 — x1
14
Published as a conference paper at ICLR 2017
μ (χ 2 - χ 1) = √ρμε = 一ρε-
2	X2 - X1
then
a ≤ f0(X2).
By strong convexity of f,
f (x 2) - f ( x 1) + μ (X 2 -X1) ≤ f( X 2).
x2 - x1	2
Besides, since ρ > 1 and
2 ε
X2 - X1
(9)
∙-v
Similarly, we can obtain a ≥ f0(X1). By our assumption that f = aX + b, X ∈ [X0, X3], then
∙-v
f(X3) - f(X3) = f(X3) - aX3 - b
= f(X3) - f(X2) - a(X3 - X2) + f(X2) - aX2 - b
≥ f 0(X2)(X3 - X2) + 22(X3 - X2)2 - a(X3 - X2) - ε
0	μ(	/———\ 2
(f (x2) - a)(x3 - x2) + 2 (2ʌ/ρ“μ) - ε
≥ (2ρ - 1)ε > ε
The first inequality follows from strong convexity of f and f(X2 ) - aX2 - b ≥ ε. The second
inequality follows from the inequality (9). Therefore, this leads to the contradiction. Thus there
exists a break point in the interval [X2 , X3]. Similarly, we could prove there exists a break point in
the interval [X0, X1]. These indicate that to achieve ε-approximation in [0, 1], the multilayer neural
network f should have at least ∣- 11 ʌ/^ɪ] break points in [0, 1]. Therefore,
M(ε) ≥
4 HI ∀ρ> 1.
Further, Telgarsky (2016) has shown that the maximum number of break points that a multilayer
neural network of depth L and size N could have is (N/L)L. Thus, L and N should satisfy
(N/L)L >
4 HI ∀ρ> 1.
Therefore, we have
N≥L
1
2 L
Besides, let m = N/L. Since each layer in network should have at least 2 neurons, i.e., m ≥ 2, then
N ≥ XTm- log2 (μ)≥ log2 (μ).
2 log2 m	16ε	16ε
Now we consider the multivariate case d > 1. Assume input vector to be x
now fix X(2), ..., X(d) and define two univariate functions
g (y) = f (y,x ⑵,...,x(d) ),and 贸 y) = f(y,x ⑵,...,x(d)).
, ..., X(d)). We
By assumption, g(y) is a strongly convex function with parameter μ and for all y ∈ [0, 1],
∣g(y) - g(y) I ≤ ε. Therefore, by results in the univariate case, We should have
N≥L
1
2 L	一 一 一
and N ≥ log2
(10)
Now we have proved the theorem.
Remark: We make the following remarks about the lower bound in the theorem.
(1)	if the depth L is fixed, as in shallow networks, the number of neurons required is
Ω ((1 /) 21L ).
(2)	if we are allowed to choose L optimally to minimize the lower bound, we will choose
L = 1 log(含) and thus the lower bound will become Ω(log ε), closed to the O (log2 ε)
upper bound shown in Theorem 4.
□
15
Published as a conference paper at ICLR 2017
Appendix G	Proof of Corollary 12
Proof. From Theorem 4, it follows that there exists a deep neural network fd of depth
Ld = Θ (log 1) and size
Nd ≤ c
(11)
∙-v
for some constant c > 0 such that kfd - f k ≤ ε.
From the equation (10) in the proof of Theorem 11, it follows that for all shallow neural networks
fs of depth Ls and ∣∣ fs — f ∣∣ ≤ ε, their sizes should satisfy
Ns ≥ Ls
which is equivalent to
log Ns ≥ log Ls +2⅛ lθg (i⅛) ∙	(12)
Substituting for log C) from (12) to (11), We have
Nd = O(Ls2 log2 Ns)∙
By definition, a shallow neural network has a small number of layers, i.e., Ls. Thus, the size of the
deep neural network is O (log2 Ns). This means Nd《Ns.	□
Appendix H	Proof of Corollary 13
Corollary 13 (Gaussian function). For Gaussian function f(x) = f (x(1), ∙∙∙, x(d)) =
e- Pd=1(x(i))2/2, x ∈ [0,1]d, there exists a deep neural network f(x) with O (log d) lay-
ers, O (dlog d) binary step units and O (dlog d + (log ε)2) rectifier linear units such that
∣f( x) — f (x) | ≤ ε for ∀x ∈ [0,1] d∙
Proof. It follows from the Theorem 4 that there exists d multilayer neural networks
gι(x(1)),…,gd(xId)) with O (log d) layers and O (dlog d) binary step units and O (dlog d) rec-
tifier linear units in total such that
x (1)2 + …+ x(d )2	gι (x(1)) + …+ gd (x(d))	ε
2	2	≤ 2
(13)
Besides, from Theorem 4, it follows that there exists a deep neural network f with O (log ε) layers
O (log 1) binary step units and O ((log ε)2) such that
ε
∣e-dx - f(x) | ≤ 2	∀x ∈ [0,1] ∙
Let x = (gι(x(1)) + …+ gd(xId)))/2d, then we have
Let the deep neural network
∙-v
f( x)
e-(Pd=ι gi(X(i)))/2
^ (01(X(1)) + …+ gd(X(d))
(14)
16
Published as a conference paper at ICLR 2017
By inequalities (13) and (14), the the approximation error is upper bounded by
∙-v
If (ʃ) — f( x) I
e-(Pd=ι x(i))/2 _ f
≤ 卜TP d=ι x(i))/2 _ e-(P d=ι g i (x(i)))/2∣ +
P L g i (N(())
e-(Pd=ι gi(χ(i)))/2 _ f
2
< ε + ε = ε.
22
NoW the deep neural network has O (log ∣) layers, O (dlog d) binary step units and
O (dlog d + (log ε)2) rectifier linear units.
□
Appendix I Proof of Corollary 14
Corollary 14 (Ridge function). If f(x) = g(aT x) for some direction a ∈ Rd with kak1 = 1, a
0, x ∈ [0, 1]d and some univariate function g satisfying conditions in Theorem 4, then there exists a
multilayer neural network f with O (log ɪ) layers, O (log 1) binary SteP units and O ((log 1 )2)
rectifier linear units such that ∣f (x) — f(x) ∣ ≤ ε for ∀x ∈ [0, 1]d.
Proof. Let t = aTx. Since kak1 = 1, a 0 and x ∈ [0, 1]d, then 0 ≤ t ≤ 1. Then from
Theorem 4, it follows that then there exists a multilayer neural network g with O (log ε) layers,
O (log 1) binary step units and O ((log ɪ)2) rectifier linear units such that
Ig (t) — g( t) I≤ ε ∀t ∈ [0,1] ∙
∙-v
If we define the deep network f as
∙-v
f( x )= g( t),
∙-v
then the approximation error of f is
∙-v
lf(X) — f(X)| = lg(t) — g(t)| ≤ ε
Now we have proved the corollary.	□
17