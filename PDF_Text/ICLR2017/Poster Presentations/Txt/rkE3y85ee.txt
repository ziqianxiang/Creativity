Published as a conference paper at ICLR 2017
Categorical Reparameterization
with Gumbel-Softmax
Eric Jang	Shixiang Gu*
Google Brain	University of Cambridge
ejang@google.com	MPITubingen
Ben Poole*
Stanford University
poole@cs.stanford.edu
sg717@cam.ac.uk
Ab stract
Categorical variables are a natural choice for representing discrete structure in the
world. However, stochastic neural networks rarely use categorical latent variables
due to the inability to backpropagate through samples. In this work, we present an
efficient gradient estimator that replaces the non-differentiable sample from a cat-
egorical distribution with a differentiable sample from a novel Gumbel-Softmax
distribution. This distribution has the essential property that it can be smoothly
annealed into a categorical distribution. We show that our Gumbel-Softmax esti-
mator outperforms state-of-the-art gradient estimators on structured output predic-
tion and unsupervised generative modeling tasks with categorical latent variables,
and enables large speedups on semi-supervised classification.
1	Introduction
Stochastic neural networks with discrete random variables are a powerful technique for representing
distributions encountered in unsupervised learning, language modeling, attention mechanisms, and
reinforcement learning domains. For example, discrete variables have been used to learn probabilis-
tic latent representations that correspond to distinct semantic classes (Kingma et al., 2014), image
regions (Xu et al., 2015), and memory locations (Graves et al., 2014; Graves et al., 2016). Discrete
representations are often more interpretable (Chen et al., 2016) and more computationally efficient
(Rae et al., 2016) than their continuous analogues.
However, stochastic networks with discrete variables are difficult to train because the backprop-
agation algorithm — while permitting efficient computation of parameter gradients — cannot be
applied to non-differentiable layers. Prior work on stochastic gradient estimation has traditionally
focused on either score function estimators augmented with Monte Carlo variance reduction tech-
niques (Paisley et al., 2012; Mnih & Gregor, 2014; Gu et al., 2016; Gregor et al., 2013), or biased
path derivative estimators for Bernoulli variables (Bengio et al., 2013). However, no existing gra-
dient estimator has been formulated specifically for categorical variables. The contributions of this
work are threefold:
1.	We introduce Gumbel-Softmax, a continuous distribution on the simplex that can approx-
imate categorical samples, and whose parameter gradients can be easily computed via the
reparameterization trick.
2.	We show experimentally that Gumbel-Softmax outperforms all single-sample gradient es-
timators on both Bernoulli variables and categorical variables.
3.	We show that this estimator can be used to efficiently train semi-supervised models (e.g.
Kingma et al. (2014)) without costly marginalization over unobserved categorical latent
variables.
The practical outcome of this paper is a simple, differentiable approximate sampling mechanism for
categorical variables that can be integrated into neural networks and trained using standard back-
propagation.
*Work done during an internship at Google Brain.
1
Published as a conference paper at ICLR 2017
2	The Gumbel-Softmax distribution
We begin by defining the Gumbel-Softmax distribution, a continuous distribution over the simplex
that can approximate samples from a categorical distribution. Let z be a categorical variable with
class probabilities π1, π2, ...πk. For the remainder of this paper we assume categorical samples are
encoded as k-dimensional one-hot vectors lying on the corners of the (k - 1)-dimensional simplex,
∆k-1. This allows us to define quantities such as the element-wise mean Ep[z] = [π1, ..., πk] of
these vectors.
The Gumbel-Max trick (Gumbel, 1954; Maddison et al., 2014) provides a simple and efficient way
to draw samples z from a categorical distribution with class probabilities π:
z = one_hot arg max [gi + log πi]	(1)
whereg1...gk are i.i.d samples drawn from Gumbel(0, 1)1. We use the softmax function as a continu-
ous, differentiable approximation to arg max, and generate k-dimensional sample vectors y ∈ ∆k-1
where
eχp((IogSi) + gi"τ )
yi =——J-------------------------- for i = 1,..., k.	(2)
Pj=I eχp((Iog(nj) + gj)/t)
The density of the Gumbel-Softmax distribution (derived in Appendix B) is:
pπ,τ (y1, ..., yk) = Γ(k)τ k-1
!-k k
Y (π"yτ+1)
i=1
(3)
This distribution was independently discovered by Maddison et al. (2016), where it is referred to as
the concrete distribution. As the softmaχ temperature τ approaches 0, samples from the Gumbel-
Softmaχ distribution become one-hot and the Gumbel-Softmaχ distribution becomes identical to the
categorical distribution p(z).
UO-IeEOdXO-dEes
Λ7
category
Figure 1: The Gumbel-Softmaχ distribution interpolates between discrete one-hot-encoded categor-
ical distributions and continuous categorical densities. (a) For low temperatures (τ = 0.1, τ = 0.5),
the eχpected value of a Gumbel-Softmaχ random variable approaches the eχpected value of a cate-
gorical random variable with the same logits. As the temperature increases (τ = 1.0, τ = 10.0), the
eχpected value converges to a uniform distribution over the categories. (b) Samples from Gumbel-
Softmaχ distributions are identical to samples from a categorical distribution as τ → 0. At higher
temperatures, Gumbel-Softmaχ samples are no longer one-hot, and become uniform as τ → ∞.
2.1	Gumbel-Softmax Estimator
The Gumbel-Softmaχ distribution is smooth for τ > 0, and therefore has a well-defined gradi-
ent dy∕∂∏ with respect to the parameters ∏. Thus, by replacing categorical samples with GUmbel-
Softmaχ samples we can use backpropagation to compute gradients (see Section 3.1). We denote
1The Gumbel(0,1) distribution can be sampled using inverse transform sampling by drawing U 〜
Uniform(0, 1) and computing g = - log(- log(u)).
2
Published as a conference paper at ICLR 2017
this procedure of replacing non-differentiable categorical samples with a differentiable approxima-
tion during training as the Gumbel-Softmax estimator.
While Gumbel-Softmax samples are differentiable, they are not identical to samples from the corre-
sponding categorical distribution for non-zero temperature. For learning, there is a tradeoff between
small temperatures, where samples are close to one-hot but the variance of the gradients is large,
and large temperatures, where samples are smooth but the variance of the gradients is small (Figure
1). In practice, we start at a high temperature and anneal to a small but non-zero temperature.
In our experiments, we find that the softmax temperature τ can be annealed according to a variety
of schedules and still perform well. If τ is a learned parameter (rather than annealed via a fixed
schedule), this scheme can be interpreted as entropy regularization (Szegedy et al., 2015; Pereyra
et al., 2016), where the Gumbel-Softmax distribution can adaptively adjust the “confidence” of
proposed samples during the training process.
2.2	Straight-Through Gumbel-Softmax Estimator
Continuous relaxations of one-hot vectors are suitable for problems such as learning hidden repre-
sentations and sequence modeling. For scenarios in which we are constrained to sampling discrete
values (e.g. from a discrete action space for reinforcement learning, or quantized compression), we
discretize y using arg max but use our continuous approximation in the backward pass by approxi-
mating VθZ ≈ Vθy. We call this the Straight-Through (ST) GUmbeI Estimator, as it is reminiscent
of the biased path derivative estimator described in Bengio et al. (2013). ST Gumbel-Softmax allows
samples to be sparse even when the temperature τ is high.
3	Related Work
In this section we review existing stochastic gradient estimation techniques for discrete variables
(illustrated in Figure 2). Consider a stochastic computation graph (Schulman et al., 2015) with
discrete random variable z whose distribution depends on parameter θ, and cost function f (z).
The objective is to minimize the expected cost L(θ) = Ez~p@(Z) [f (z)] via gradient descent, which
requires US to estimate VθEz~p@(Z) [f (z)].
3.1	Path Derivative Gradient Estimators
For distributions that are reparameterizable, we can compute the sample z as a deterministic function
g of the parameters θ and an independent random variable , so that z = g(θ, ). The path-wise
gradients from f to θ can then be computed without encountering any stochastic nodes:
∂θ Ez~Pθ [f (Z))] = ∂θ Ejf (gG E))I = Ee~pj ∂g∂g ]	(4)
For example, the normal distribution Z 〜N(μ, σ) can be re-written as μ + σ ∙ N(0,1), making
it trivial to compute dz∕∂μ and dz∕∂σ. This reparameterization trick is commonly applied to train-
ing variational autooencoders with continuous latent variables using backpropagation (Kingma &
Welling, 2013; Rezende et al., 2014b). As shown in Figure 2, we exploit such a trick in the con-
struction of the Gumbel-Softmax estimator.
Biased path derivative estimators can be utilized even when Z is not reparameterizable. In general,
we can approximate VθZ ≈ Vθm(θ), where m is a differentiable proxy for the stochastic sample.
For Bernoulli variables with mean parameter θ, the Straight-Through (ST) estimator (Bengio et al.,
2013) approximates m = μθ(Z), implying Vθm = 1. For k = 2 (Bernoulli), ST Gumbel-Softmax
is similar to the slope-annealed Straight-Through estimator proposed by Chung et al. (2016), but
uses a softmax instead of a hard sigmoid to determine the slope. Rolfe (2016) considers an al-
ternative approach where each binary latent variable parameterizes a continuous mixture model.
Reparameterization gradients are obtained by backpropagating through the continuous variables and
marginalizing out the binary variables.
One limitation of the ST estimator is that backpropagating with respect to the sample-independent
mean may cause discrepancies between the forward and backward pass, leading to higher variance.
3
Published as a conference paper at ICLR 2017
Figure 2: Gradient estimation in stochastic computation graphs. (1) Vθf (x) can be computed via
backpropagation if x(θ) is deterministic and differentiable. (2) The presence of stochastic node
z precludes backpropagation as the sampler function does not have a well-defined gradient. (3)
The score function estimator and its variants (NVIL, DARN, MuProp, VIMCO) obtain an unbiased
estimate of Vθf(x) by backpropagating along a surrogate loss f logpθ(z), where f = f(x) - b and
b is a baseline for variance reduction. (4) The Straight-Through estimator, developed primarily for
Bernoulli variables, approximates Vθz ≈ 1. (5) Gumbel-Softmax is a path derivative estimator for
a continuous distribution y that approximates z . Reparameterization allows gradients to flow from
f(y) to θ. y can be annealed to one-hot categorical variables over the course of training.
Gumbel-Softmax avoids this problem because each sample y is a differentiable proxy of the corre-
sponding discrete sample z .
3.2	Score Function-Based Gradient Estimators
The score function estimator (SF, also referred to as REINFORCE (Williams, 1992) and likelihood
ratio estimator (Glynn, 1990)) uses the identity Vθ logpθ(z) = pθ(z)Vθ logpθ(z) to derive the
following unbiased estimator:
VθEz [f(z)] = Ez [f(z)Vθ logpθ(z)]	(5)
SF only requires that pθ (z) is continuous in θ, and does not require backpropagating through f or
the sample z. However, SF suffers from high variance and is consequently slow to converge. In
particular, the variance of SF scales linearly with the number of dimensions of the sample vector
(Rezende et al., 2014a), making it especially challenging to use for categorical distributions.
The variance of a score function estimator can be reduced by subtracting a control variate b(z) from
the learning signal f, and adding back its analytical expectation μb = Ez [b(z)Vθ logpθ(z)] to keep
the estimator unbiased:
VθEz [f (z)] = Ez [f(z)Vθ logpθ(z) + (b(z)Vθ logpθ(z) - b(z)Vθ logpθ(z))]	(6)
Ez [(f (z) - b(z))Vθ logpθ(z)]+ μb
(7)
We briefly summarize recent stochastic gradient estimators that utilize control variates. We direct
the reader to Gu et al. (2016) for further detail on these techniques.
•	NVIL (Mnih & Gregor, 2014) uses two baselines: (1) a moving average f of f to center the
learning signal, and (2) an input-dependent baseline computed by a 1-layer neural network
4
Published as a conference paper at ICLR 2017
fitted to f - f (a control variate for the centered learning signal itself). Finally, variance
normalization divides the learning signal by max(1, σf), where σf2 is a moving average of
Var[f].
•	DARN (Gregor et al., 2013) uses b = f(z) + f0(z)(z - z), where the baseline corre-
sponds to the first-order Taylor approximation of f (z) from f (z). Z is chosen to be 1∕2 for
Bernoulli variables, which makes the estimator biased for non-quadratic f, since it ignores
the correction term μb in the estimator expression.
•	MuProp (Gu et al., 2016) also models the baseline as a first-order Taylor expansion: b =
f(z) + f0(z)(z - z) and μb = f0(z)VθEz [z]. To overcome backpropagation through
discrete sampling, a mean-field approximation ∕mf(μe(z)) is used in place of f (z) to
compute the baseline and derive the relevant gradients.
•	VIMCO (Mnih & Rezende, 2016) is a gradient estimator for multi-sample objectives that
uses the mean of other samples b = 1/m Pj6=i f(zj) to construct a baseline for each sample
zi ∈ z1:m. We exclude VIMCO from our experiments because we are comparing estimators
for single-sample objectives, although Gumbel-Softmax can be easily extended to multi-
sample objectives.
3.3	Semi-Supervised Generative Models
Semi-supervised learning considers the problem of learning from both labeled data (χ,y)〜DL
and unlabeled data X 〜 DU, where X are observations (i.e. images) and y are corresponding labels
(e.g. semantic class). For semi-supervised classification, Kingma et al. (2014) propose a variational
autoencoder (VAE) whose latent state is the joint distribution over a Gaussian “style” variable z
and a categorical “semantic class” variable y (Figure 6, Appendix). The VAE objective trains a
discriminative network qφ(y∣x), inference network qφ(z∣x, y), and generative network pθ(x|y, z)
end-to-end by maximizing a variational lower bound on the log-likelihood of the observation under
the generative model. For labeled data, the class y is observed, so inference is only done on Z 〜
q(z|X, y). The variational lower bound on labeled data is given by:
logpθ(χ,y) ≥ -LEy) = Ez〜qφ(z∣χ,y) [logpθ(x|y,z)] - κL[q(zlχ,y)llPθ(y)p(z)]	⑻
For unlabeled data, difficulties arise because the categorical distribution is not reparameterizable.
Kingma et al. (2014) approach this by marginalizing out y over all classes, so that for unlabeled
data, inference is still on qφ(z∣x, y) for each y. The lower bound on unlabeled data is:
logPθ(x) ≥ -U(X) = Ez〜qφ(y,z∣χ) [logPθ(x∣y,z) + logpθ(y) + logp(z) - q0(y, z|x)] (9)
=X q0(y|x)(-L(x, y) + H(qθ(y|X)))	(IO)
y
The full maximization objective is:
J = E(χ,y)〜DL [-L(x,y)] + Ex〜DU [-U(x)]+ α ∙ E(x,y)〜DL [log qφ(y∣x)]	(11)
where α is the scalar trade-off between the generative and discriminative objectives.
One limitation of this approach is that marginalization over all k class values becomes prohibitively
expensive for models with a large number of classes. If D, I , G are the computational cost of sam-
pling from qφ(y∣χ), qφ(z∣χ, y), andpθ(x|y, z) respectively, then training the unsupervised objective
requires O(D + k(I + G)) for each forward/backward step. In contrast, Gumbel-Softmax allows us
to backpropagate through y 〜qφ(y |x) for single sample gradient estimation, and achieves a cost of
O(D + I + G) per training step. Experimental comparisons in training speed are shown in Figure 5.
4	Experimental Results
In our first set of experiments, we compare Gumbel-Softmax and ST Gumbel-Softmax to other
stochastic gradient estimators: Score-Function (SF), DARN, MuProp, Straight-Through (ST), and
5
Published as a conference paper at ICLR 2017
Slope-Annealed ST. Each estimator is evaluated on two tasks: (1) structured output prediction and
(2) variational training of generative models. We use the MNIST dataset with fixed binarization
for training and evaluation, which is common practice for evaluating stochastic gradient estimators
(Salakhutdinov & Murray, 2008; Larochelle & Murray, 2011).
Learning rates are chosen from {3e-5, 1e-5, 3e-4, 1e-4, 3e-3, 1e-3}; we select the best learn-
ing rate for each estimator using the MNIST validation set, and report performance on the test
set. Samples drawn from the Gumbel-Softmax distribution are continuous during training, but are
discretized to one-hot vectors during evaluation. We also found that variance normalization was nec-
essary to obtain competitive performance for SF, DARN, and MuProp. We used sigmoid activation
functions for binary (Bernoulli) neural networks and softmax activations for categorical variables.
Models were trained using stochastic gradient descent with momentum 0.9.
4.1	Structured Output Prediction with Stochastic Binary Networks
The objective of structured output prediction is to predict the lower half of a 28 × 28 MNIST digit
given the top half of the image (14 × 28). This is a common benchmark for training stochastic binary
networks (SBN) (Raiko et al., 2014; Gu et al., 2016; Mnih & Rezende, 2016). The minimization
objective for this conditional generative model is an importance-sampled estimate of the likelihood
objective, Eh〜「。(心品酒)[m1 Pm=IlogPθ(xiower∣hi)], where m = 1 is Used for training and m =
1000 is used for evaluation.
We trained aSBN with two hidden layers of 200 Units each. This corresponds to either 200 BernoUlli
variables (denoted as 392-200-200-392) or 20 categorical variables (each with 10 classes) with bi-
narized activations (denoted as 392-(20 × 10)-(20 × 10)-392).
As shown in FigUre 3, ST GUmbel-Softmax is on par with the other estimators for BernoUlli vari-
ables and oUtperforms on categorical variables. Meanwhile, GUmbel-Softmax oUtperforms other
estimators on both BernoUlli and Categorical variables. We foUnd that it was not necessary to anneal
the softmax temperatUre for this task, and Used a fixed τ = 1.
Bernoulli SBN
Poodrl⅛0^l(υ>4tu6(υN
m	3∞	s∞	no	s∞
Steps (xle3)
(a)
Categorical SBN
Pooq=* 二⅛0^l(υ>4tu6(υN
IQOZgo	seo	<∞	SgO
Steps (xle3)
(b)
FigUre 3: Test loss (negative log-likelihood) on the strUctUred oUtpUt prediction task with binarized
MNIST Using a stochastic binary network with (a) BernoUlli latent variables (392-200-200-392) and
(b) categorical latent variables (392-(20 × 10)-(20 × 10)-392).
4.2	Generative Modeling with Variational Autoencoders
We train variational aUtoencoders (Kingma & Welling, 2013), where the objective is to learn a gener-
ative model of binary MNIST images. In oUr experiments, we modeled the latent variable as a single
hidden layer with 200 BernoUlli variables or20 categorical variables (20 × 10). We Use a learned cat-
egorical prior rather than a GUmbel-Softmax prior in the training objective. ThUs, the minimization
objective dUring training is no longer a variational boUnd if the samples are not discrete. In practice,
6
Published as a conference paper at ICLR 2017
we find that optimizing this objective in combination with temperature annealing still minimizes
actual variational bounds on validation and test sets. Like the structured output prediction task, we
use a multi-sample bound for evaluation with m = 1000.
The temperature is annealed using the schedule τ = max(0.5, exp(-rt)) of the global training step
t, where τ is updated every N steps. N ∈ {500, 1000} and r ∈ {1e-5, 1e-4} are hyperparameters
for which we select the best-performing estimator on the validation set and report test performance.
As shown in Figure 4, ST Gumbel-Softmax outperforms other estimators for Categorical variables,
and Gumbel-Softmax drastically outperforms other estimators in both Bernoulli and Categorical
variables.
__BemOUni VAE	Categorical VAE
0m^□ 3>=e63N
IQOZCQ	SW	WO	SgO
Steps (xle3)
(b)
Figure 4: Test loss (negative variational lower bound) on binarized MNIST VAE with (a) Bernoulli
latent variables (784 - 200 - 784) and (b) categorical latent variables (784 - (20 × 10) - 200).
om-l 山 8>%68n
→- SF
-→- DARN
-→- Slope-Annealed ST
—MuProp
→- Gumbel-Softmax
-» ST Gumbel-Softmax
UX>	ZOO	300	WO	s<x>
Steps (xle3)
(a)
Table 1: The Gumbel-Softmax estimator outperforms other estimators on Bernoulli and Categorical
latent variables. For the structured output prediction (SBN) task, numbers correspond to negative
log-likelihoods (nats) of input images (lower is better). For the VAE task, numbers correspond to
negative variational lower bounds (nats) on the log-likelihood (lower is better).
SF DARN MuProp ST Annealed ST Gumbel-S. ST Gumbel-S.
SBN (Bern.)	72.0	59.7	58.9	58.9	58.7	58.5	59.3
SBN (Cat.)	73.1	67.9	63.0	61.8	61.1	59.0	59.7
VAE (Bern.)	112.2	110.9	109.7	116.0	111.5	105.0	111.5
VAE (Cat.)	110.6	128.8	107.0	110.9	107.8	101.5	107.8
4.3	Generative Semi-Supervised Classification
We apply the Gumbel-Softmax estimator to semi-supervised classification on the binary MNIST
dataset. We compare the original marginalization-based inference approach (Kingma et al., 2014)
to single-sample inference with Gumbel-Softmax and ST Gumbel-Softmax.
We trained on a dataset consisting of 100 labeled examples (distributed evenly among each of the
10 classes) and 50,000 unlabeled examples, with dynamic binarization of the unlabeled examples
for each minibatch. The discriminative model qφ(y∣χ) and inference model qφ(z∣χ, y) are each im-
plemented as 3-layer convolutional neural networks with ReLU activation functions. The generative
model pθ (x|y, z) is a 4-layer convolutional-transpose network with ReLU activations. Experimental
details are provided in Appendix A.
Estimators were trained and evaluated against several values of α = {0.1, 0.2, 0.3, 0.8, 1.0} and
the best unlabeled classification results for test sets were selected for each estimator and reported
7
Published as a conference paper at ICLR 2017
in Table 2. We used an annealing schedule of T = max(0.5, exp(-3e-5 ∙ t)), updated every 2000
steps.
In Kingma et al. (2014), inference over the latent state is done by marginalizing out y and using the
reparameterization trick for sampling from qφ(z∣χ,y). However, this approach has a computational
cost that scales linearly with the number of classes. Gumbel-Softmax allows us to backpropagate
directly through single samples from the joint qφ(y, z|x), achieving drastic speedups in training
without compromising generative or classification performance. (Table 2, Figure 5).
Table 2: Marginalizing over y and single-sample variational inference perform equally well when
applied to image classification on the binarized MNIST dataset (Larochelle & Murray, 2011). We
report variational lower bounds and image classification accuracy for unlabeled data in the test set.
	ELBO	Accuracy
Marginalization	-106.8	92.6%
Gumbel	-109.6	92.4%
ST Gumbel-Softmax	-110.7	93.6%
In Figure 5, we show how Gumbel-Softmax versus marginalization scales with the number of cat-
egorical classes. For these experiments, we use MNIST images with randomly generated labels.
Training the model with the Gumbel-Softmax estimator is 2× as fast for 10 classes and 9.9× as fast
for 100 classes.
5 0 5 0 5 0
3 3 2 2 1 1
c(υ⅛sd<υtt) Psds
K=IO	K=IOO
Number of classes
⅛fr /r >.√4 ∕* /1
ð。OC4 0
Z
5 5 s5'5 6
4 H√∙⅛* 夕-*-
3 3 3 3 3 3
。2 Zf P /
・0 777 7 7
6 4 GG 6 4
yb)
a
堂夕彳？夕
8 9胃方& *∙
Figure 5: GUmbel-Softmax allows Us to backpropagate through samples from the posterior qφ(y |x),
providing a scalable method for semi-supervised learning for tasks with a large number of
classes. (a) Comparison of training speed (steps/sec) between Gumbel-Softmax and marginaliza-
tion (Kingma et al., 2014) on a semi-supervised VAE. Evaluations were performed on a GTX Titan
XR GPU. (b) Visualization of MNIST analogies generated by varying style variable z across each
row and class variable y across each column.
5	Discussion
The primary contribution of this work is the reparameterizable Gumbel-Softmax distribution, whose
corresponding estimator affords low-variance path derivative gradients for the categorical distri-
bution. We show that Gumbel-Softmax and Straight-Through Gumbel-Softmax are effective on
structured output prediction and variational autoencoder tasks, outperforming existing stochastic
gradient estimators for both Bernoulli and categorical latent variables. Finally, Gumbel-Softmax
enables dramatic speedups in inference over discrete latent variables.
Acknowledgments
We sincerely thank Luke Vilnis, Vincent Vanhoucke, Luke Metz, David Ha, Laurent Dinh, George
Tucker, and Subhaneil Lahiri for helpful discussions and feedback.
8
Published as a conference paper at ICLR 2017
References
Y. Bengio, N. Leonard, and A. Courville. Estimating or propagating gradients through stochastic
neurons for conditional computation. arXiv preprint arXiv:1308.3432, 2013.
Xi Chen, Yan Duan, Rein Houthooft, John Schulman, Ilya Sutskever, and Pieter Abbeel. Info-
gan: Interpretable representation learning by information maximizing generative adversarial nets.
CoRR, abs/1606.03657, 2016.
J.	Chung, S. Ahn, and Y. Bengio. Hierarchical multiscale recurrent neural networks. arXiv preprint
arXiv:1609.01704, 2016.
P. W Glynn. Likelihood ratio gradient estimation for stochastic systems. Communications of the
ACM, 33(10):75-84,1990.
A. Graves, G. Wayne, M. Reynolds, T. Harley, I. Danihelka, A. Grabska-Barwinska, S. G. Col-
menarejo, E. Grefenstette, T. Ramalho, J. Agapiou, et al. Hybrid computing using a neural net-
work with dynamic external memory. Nature, 538(7626):471-476, 2016.
Alex Graves, Greg Wayne, and Ivo Danihelka. Neural turing machines. CoRR, abs/1410.5401,
2014.
K.	Gregor, I. Danihelka, A. Mnih, C. Blundell, and D. Wierstra. Deep autoregressive networks.
arXiv preprint arXiv:1310.8499, 2013.
S. Gu, S. Levine, I. Sutskever, and A Mnih. MuProp: Unbiased Backpropagation for Stochastic
Neural Networks. ICLR, 2016.
E. J. Gumbel. Statistical theory of extreme values and some practical applications: a series of
lectures. Number 33. US Govt. Print. Office, 1954.
D. P. Kingma and M. Welling. Auto-encoding variational bayes. arXiv preprint arXiv:1312.6114,
2013.
D. P. Kingma, S. Mohamed, D. J. Rezende, and M. Welling. Semi-supervised learning with deep
generative models. In Advances in Neural Information Processing Systems, pp. 3581-3589, 2014.
H. Larochelle and I. Murray. The neural autoregressive distribution estimator. In AISTATS, volume 1,
pp. 2, 2011.
C. J. Maddison, D. Tarlow, and T. Minka. A* sampling. In Advances in Neural Information Pro-
cessing Systems, pp. 3086-3094, 2014.
C. J. Maddison, A. Mnih, and Y. Whye Teh. The Concrete Distribution: A Continuous Relaxation
of Discrete Random Variables. ArXiv e-prints, November 2016.
A. Mnih and K. Gregor. Neural variational inference and learning in belief networks. ICML, 31,
2014.
A. Mnih and D. J. Rezende. Variational inference for monte carlo objectives. arXiv preprint
arXiv:1602.06725, 2016.
J. Paisley, D. Blei, and M. Jordan. Variational Bayesian Inference with Stochastic Search. ArXiv
e-prints, June 2012.
Gabriel Pereyra, Geoffrey Hinton, George Tucker, and Lukasz Kaiser. Regularizing neural networks
by penalizing confident output distributions. 2016.
J. W Rae, J. J Hunt, T. Harley, I. Danihelka, A. Senior, G. Wayne, A. Graves, and T. P Lillicrap.
Scaling Memory-Augmented Neural Networks with Sparse Reads and Writes. ArXiv e-prints,
October 2016.
T. Raiko, M. Berglund, G. Alain, and L. Dinh. Techniques for learning binary stochastic feedforward
neural networks. arXiv preprint arXiv:1406.2989, 2014.
9
Published as a conference paper at ICLR 2017
D. J. Rezende, S. Mohamed, and D. Wierstra. Stochastic backpropagation and approximate infer-
ence in deep generative models. arXiv preprint arXiv:1401.4082, 2014a.
D. J. Rezende, S. Mohamed, and D. Wierstra. Stochastic backpropagation and approximate infer-
ence in deep generative models. In Proceedings of The 31st International Conference on Machine
Learning ,pp.1278-1286, 2014b.
J. T. Rolfe. Discrete Variational Autoencoders. ArXiv e-prints, September 2016.
R. Salakhutdinov and I. Murray. On the quantitative analysis of deep belief networks. In Proceedings
of the 25th international conference on Machine learning, pp. 872-879. ACM, 2008.
J.	Schulman, N. Heess, T. Weber, and P. Abbeel. Gradient estimation using stochastic computation
graphs. In Advances in Neural Information Processing Systems, pp. 3528-3536, 2015.
C. Szegedy, V. Vanhoucke, S. Ioffe, J. Shlens, and Z. Wojna. Rethinking the inception architecture
for computer vision. arXiv preprint arXiv:1512.00567, 2015.
R. J. Williams. Simple statistical gradient-following algorithms for connectionist reinforcement
learning. Machine learning, 8(3-4):229-256, 1992.
K.	Xu, J. Ba, R. Kiros, K. Cho, A. C. Courville, R. Salakhutdinov, R. S. Zemel, and Y. Bengio. Show,
attend and tell: Neural image caption generation with visual attention. CoRR, abs/1502.03044,
2015.
A Semi-Supervised Classification Model
Figures 6 and 7 describe the architecture used in our experiments for semi-supervised classification
(Section 4.3).
Figure 6: Semi-supervised generative model proposed by Kingma et al. (2014). (a) Generative
model pθ(x|y, Z) synthesizes images from latent Gaussian “style" variable Z and categorical class
variable y. (b) Inference model qφ(y, z|x) samples latent state y, z given x. Gaussian z can be
differentiated with respect to its parameters because it is reparameterizable. In previous work, when
y is not observed, training the VAE objective requires marginalizing over all values of y. (c) Gumbel-
Softmax reparameterizes y so that backpropagation is also possible through y without encountering
stochastic nodes.
B Deriving the density of the Gumbel-Softmax distribution
Here we derive the probability density function of the Gumbel-Softmax distribution with proba-
bilities π1, ..., πk and temperature τ. We first define the logits xi = log πi, and Gumbel samples
10
Published as a conference paper at ICLR 2017
Figure 7: Network architecture for (a) classification qφ(y∣χ) (b) inference qφ(z∣χ, y), and (C) gen-
erative pθ(x|y, Z) models. The output of these networks parameterize Categorical, Gaussian, and
Bernoulli distributions which we sample from.
gι,…，gk, where gi 〜GUmbel(0,1). A sample from the Gumbel-Softmax can then be computed as:
》=kexp((Xi + gi"τ)
Pj=I eχP ((Xj + gj)∕τ)
for i = 1, ..., k
(12)
B.1 Centered Gumbel density
The mapping from the Gumbel samples g to the Gumbel-Softmax sample y is not invertible as the
normalization of the softmax operation removes one degree of freedom. To compensate for this, we
define an equivalent sampling process that subtracts off the last element, (Xk + gk)∕τ before the
softmax:
eχp ((Xi +gi - (Xk +gk))∕τ)
yi = —k------------------------------
j=1eχp((Xj +gj - (Xk +gk))∕τ)
fori = 1, ..., k	(13)
To derive the density of this equivalent sampling process, we first derive the density for the ”cen-
tered” multivariate Gumbel density corresponding to:
ui = Xi + gi - (Xk + gk )	for i = 1, ..., k - 1
(14)
where gi 〜 Gumbel(0,1). Note the probability density of a Gumbel distribution with scale param-
eter β = 1 and mean μ at Z is: f (z, μ) = eμ-z-eμ z. We can now compute the density of this
distribution by marginalizing out the last Gumbel sample, gk:
p(u1, ..., uk-1)
dgk p(u1, ..., uk |gk)p(gk)
-∞
Z∞	k-1
dgk p(gk)	p(ui|gk)
dgk f(gk,0)	f(Xk + gk , Xi - ui )
-∞	i=1
Z∞	k-1
dgk e-gk-e-gk Y exi-ui-xk-gk-exi-ui-xk-gk
∞	i=1
11
Published as a conference paper at ICLR 2017
We perform a change of variables with v = e-gk, so dv = -e-gk dgk and dgk = -dv egk
and define uk = 0 to simplify notation:
∞	1	k-1
p(u1,…,uk,-1) = δ(uk =0)J dv -vexk-v ɪɪ Vexi-Ui-Xk-Vexi-Ui-Xk
dv/v,
(15)
exp xk + X(xi - ui)	exk
k-1
Γ(k) exp
i - ui)
+ E (exi-ui)	Γ(k)
i=1
-k
exi-ui
(16)
(17)
Γ(k) Yk exp (xi - ui)! Xk exp (xi - ui)!-k
(18)
B.2 Transforming to a Gumbel-Softmax
Given samples u1, ..., uk,-1 from the centered Gumbel distribution, we can apply a deterministic
transformation h to yield the first k - 1 coordinates of the sample from the Gumbel-Softmax:
exp(ui∕τ)
y1：k = h(u1：k-1)，	h = 一	~~厂F
1 +	j=1 exp(uj ∕τ)
Note that the final coordinate probability, yk, is fixed given the first k - 1 as Pik=1 yi = 1:
(k-1	∖-1
yk=(1 + ɪ^eXp(Uj ∕τ )1
(19)
(20)
We can thus compute the probability of a sample from the Gumbel-Softmax using the change of
variables formula on only the first k - 1 variables:
p(y1:k) = p h-1(y1:k-1)
dh-1(yi：k-i)
dyi：k-i
(21)
So to compute the probability of the Gumbel-Softmax we need two more pieces: the inverse of h
and its Jacobian determinant. The inverse of h is:
k-1
h-1(y1:k-1) = τ ×	log yi - log 1 -	yj
(22)
(23)
The determinant of the Jacobian can then be computed:
dh-1(yi：k-i)
dyi：k-i
k-1	k-1
1 - X yj IY y-1
j=1	i=1
k
k-1 Y yi-1
i=1
(24)
τ
We can then plug into the change of variables formula (Eq. 21) using the density of the centered
Gumbel (Eq.15), the inverse of h (Eq. 22) and its Jacobian determinant (Eq. 24):
k
p(y1, .., yk) = Γ(k)	exp(xi)
i=1
τ -k	k
eχp (Xi) yτ 1	TkT Y y-1
yiτ	i=1 i
(25)
!-k k
Y (exp (xi)∕yD
i=1
(26)
(27)
12