Published as a conference paper at ICLR 2017
Steerable CNNs
Taco S. Cohen
University of Amsterdam
t.s.cohen@uva.nl
Max Welling
University of Amsterdam
Canadian Institute for Advanced Research
m.welling@uva.nl
Ab stract
It has long been recognized that the invariance and equivariance properties of a
representation are critically important for success in many vision tasks. In this
paper we present Steerable Convolutional Neural Networks, an efficient and flex-
ible class of equivariant convolutional networks. We show that steerable CNNs
achieve state of the art results on the CIFAR image classification benchmark. The
mathematical theory of steerable representations reveals a type system in which
any steerable representation is a composition of elementary feature types, each
one associated with a particular kind of symmetry. We show how the parameter
cost ofa steerable filter bank depends on the types of the input and output features,
and show how to use this knowledge to construct CNNs that utilize parameters ef-
fectively.
1	Introduction
Much of the recent progress in computer vision can be attributed to the availability of large labelled
datasets and deep neural networks capable of absorbing large amounts of information. While many
practical problems can now be solved, the requirement for big (labelled) data is a fundamentally
unsatisfactory state of affairs. Human beings are able to learn new concepts with very few labels,
and reproducing this ability is an important challenge for artificial intelligence research. From an
applied perspective, improving the statistical efficiency of deep learning is vital because in many
domains (e.g. medical image analysis), acquiring large amounts of labelled data is costly.
To improve the statistical efficiency of machine learning methods, many have sought to learn invari-
ant representations. In deep learning, however, intermediate layers should not be invariant, because
the relative pose of local features must be preserved for further layers (Cohen & Welling, 2016;
Hinton et al., 2011). Thus, one is led to the idea of equivariance: a network is equivariant if the
representations it produces transform in a predictable way under transformations of the input. In
other words, equivariant networks produce representations that are steerable. Steerability makes it
possible to apply filters not just in every position (as in a standard convolution layer), but in every
pose, thus allowing for increased parameter sharing.
Previous work has shown that equivariant CNNs yield state of the art results on classification tasks
(Cohen & Welling, 2016; Dieleman et al., 2016), even though they only enforce equivariance to
small groups of transformations like rotations by multiples of 90 degrees. Learning representations
that are equivariant to larger groups is likely to result in further gains, but the computational cost
of current methods scales linearly with the size of the group, making this impractical. In this paper
we present the general theory of steerable CNNs, which covers previous approaches but also shows
how the computational cost can be decoupled from the size of the symmetry group, thus paving the
way for future scaling.
To better understand the structure of steerable representations, we analyze them mathematically.
We show that any steerable representation is a composition of low-dimensional elementary feature
types. Each elementary feature can be steered independently of the others, and captures a distinct
characteristic of the input that has an invariant or “objective” meaning. This doctrine of “observer-
independent quantities” was put forward by (Weyl, 1939, ch. 1.4) and is used throughout physics. It
has been applied to vision and representation learning by Kanatani (1990); Cohen (2013).
1
Published as a conference paper at ICLR 2017
The mentioned type system puts constraints on the network weights and architecture. Specifically,
since an equivariant filter bank is required to map given input feature types to given output feature
types, the number of parameters required by such a filter bank is reduced. Furthermore, by the same
logic that tells us not to add meters to seconds, steerability considerations prevent us from adding
features of different types (e.g. for residual learning (He et al., 2016a)).
The rest of this paper is organized as follows. The theory of steerable CNNs is introduced in Section
2. Related work is discussed in Section 3, which is followed by classification experiments (Section
4) and a discussion and conclusion in Section 5.
2	Steerable CNNs
2.1	Feature maps and fibers
Consider a 2D signal f : Z2 → RK with K channels. The signal may be an input to the network or
a feature representation computed by a CNN. Since signals can be added and multiplied by scalars,
the set of signals of this signature forms a linear space F. Each layer of the network has its own
feature space Fl, but we will often suppress the layer index to reduce clutter.
It is customary in deep learning to describe f ∈ F as a stack of feature maps fk (for k = 1, . . . , K).
In this paper we also consider another decomposition of F into fibers. The fiber Fx at position x in
the “base space” Z2 is the K -dimensional vector space spanned by all channels at position x. Thus,
f ∈ F is comprised of feature vectors f(x) that live in the fibers Fx (see Figure 1(a)).
(a) The feature space F is decomposed into (b) An image f ∈ F0 is rotated by r using π0 (r).
a stack of feature maps (left) and a bundle of
fibers (right).
Figure 1: Feature maps, fibers, and the transformation law π0 of F0 .
Given some group of transformations G that acts on points in Z2 , we can transform signals f ∈ F0 :
[π0(g)f] (x) = f(g-1x)	(1)
This says that the pixel at g-1x gets moved to x by the transformation g ∈ G. We note that π0(g) is
a linear operator.
An important property of π0 is that π0(gh) = π0(g)π0(h). Here, gh means composition of transfor-
mations in G, while π0(g)π0(h) denotes matrix multiplication. A vector space such as F0 equipped
with a set of linear operators π0 satisfying this condition is known as a group representation (or just
representation, for short). A lot is known about group representations (Serre, 1977), and we will
make extensive use of the theory, explaining the relevant concepts as needed.
2.2	Steerable representations
Let (F, π) be a feature space with a group representation and Φ : F → F0 a convolutional network.
The feature space F0 is said to be (linearly) steerable with respect to G, if for all transformations
g ∈ G, the features Φf and Φπ(g)f are related by a linear transformation π0(g) that does not depend
on f. So π0(g) allows us to “steer” the features in F0 without referring to the input in F from which
they were computed.
Combining the definition of steerability (i.e. Φπ(g) = π0 (g)Φ) with the fact that π is a group
representation, we find that π0 must also be a group representation:
π0(gh)Φf = Φπ(gh)f = Φπ(g)π(h)f = π0(g)Φπ(h)f = π0(g)π0(h)Φf	(2)
2
Published as a conference paper at ICLR 2017
行（府）
Egr)
Figure 2: Diagram showing the structural consistency that follows from equivariance of the network
Φ and the group representation structure of π0 . The result of following any path in this diagram
depends only on the beginning and endpoint but is independent of the path itself, c.f. eq. 2
That is, π0(gh) = π0(g)π0(h) (at least in the span of the image of Φ). Figure 2 gives an illustration.
For simplicity, we will restrict our attention to discrete groups of transformations. The theory for
continuous groups is almost completely analogous. Our running example will be the group p4m
which consists of translations, rotations by 90 degrees around any point, and reflections. We further
restrict our attention to groups that are constructed1 from the group of translations Z2 and a group
H of transformations that fixes the origin 0 ∈ Z2. For p4m, we have H = D4, the 8-element group
of reflections and rotations about the origin.
Using this division, we can first construct a filter bank that generates H -steerable fibers, and then
show that convolution with such a filter bank produces a feature space that is steerable with respect
to the whole group G.
2.3	Equivariant filter banks
A filter bank can be described as an array of dimension (K0, K, s, s), where K, K0 denote the
number of input / output channels and s is the kernel size. For our purposes it is useful to think
of a filter bank as a linear map Ψ : F → RK0 that takes as input a signal f ∈ F and produces
a K0-dimensional feature vector. The filter bank only looks at an s × s patch in F, so the matrix
representing Ψ has shape K0 X K ∙ s2. To correlate a signal f using Ψ, one would simply apply Ψ
to translated copies of f, producing the output signal one fiber at a time.
We assume (by induction) that we have a representation π that allows us to steer F. In order to make
the output of the convolution steerable, we need the filter bank Ψ : F → RK0 to be H -equivariant:
ρ(h) Ψ = Ψπ(h),	∀h ∈ H	(3)
for some representation ρ of H that acts on the output fibers
(see Figure 3). Note that we only require equivariance with
respect to H (which excludes translations) and not G, because
translations can move patterns into and out of the receptive
field of a fiber, making full translation equivariance impossi-
ble.
The space of maps satisfying the equivariance constraint is de-
noted HomH (π, ρ), because an equivariant map Ψ is a “ho-
momorphism of group representations”, meaning it respects
the structure of the representations. Equivariant maps are also
sometimes called intertwiners (Serre, 1977).
Since the equivariance constraint (eq. 3) is linear in Ψ, the
space HomH(π, ρ) of admissible filter banks is a vector space:
any linear combination of maps Ψ, Ψ0 ∈ HomH (π, ρ) is again
Figure 3: A filter bank Ψ that is
H -equivariant. In this example,
ρ1 represents the 90-degree rota-
tion r by a permutation matrix that
cyclicly shifts the 4 channels.
an intertwiner. Hence, given π and ρ, we can compute a basis for HomH (π, ρ) by solving a linear
system.
1as a semi-direct product
3
Published as a conference paper at ICLR 2017
Computation of the intertwiner basis is done offline, before training. Once we have such a basis
ψ1 , . . . , ψn for HomH (π, ρ), we can express any equivariant filter bank Ψ as a linear combination
Ψ = i αiψi using parameters αi . As shown in Section 2.8, this can be done efficiently even in
high dimensions.
2.4	Induction
We have shown how to parameterize filter banks that intertwine π and ρ, making the output fibers H -
steerable by ρ if the input space F is H -steerable by π. In this section we show how H -steerability
of fibers Fx0 leads to G-steerability of the whole feature space F0 . This happens through a natural
and important construction known as the induced representation (Mackey, 1952; 1953; 1968; Serre,
1977; Taylor, 1986; Folland, 1995; Kaniuth & Taylor, 2013).
As stated before, the correlation Ψ ? f could be computed by translating f before applying Ψ:
[Ψ ? f] (x) = Ψ [∏(x)-1 f ] .	(4)
Where x ∈ Z2 is interpreted as a translation when given as input to π.
We can now calculate the transformation law of the output space. To do so, we apply a translation
t and transformation r ∈ H to f ∈ F, yielding π(tr)f, and then perform the correlation with Ψ.
With a some algebra (Appendix A), we find:
[ψ ? [π(tr)f]] (X) = P(r) [[ψ ? f ] ((tr)-1X)]	⑸
Now if we define π0 as
[π0(tr)f] (X) = ρ(r) [f((tr)-1X)	(6)
then Ψ ? π(g)f = π0(g)Ψ ? f (see Fig. 4). This representation π0 is known as the representation of
G induced by the representation ρ of H , and is denoted π0 = IndGH ρ.
When parsing eq. 6, it is important to keep in mind that (as
indicated by the square brackets) π0 acts on the whole feature
space F0 while ρ acts on individual fibers.
If we compare the induced representation (eq. 6) to the repre-
sentation π0 defined in eq. 1, we see that the difference lies
only in the presence of a factor ρ(r) applied to the fibers.
This factor describes how the feature channels are mixed by
the transformation. The color channels in the input space do
not get mixed by geometrical transformations, so we say that
π0 is induced from the trivial representation ρ0 (h) = I.
Now that we have a G-steerable feature space F0 , we can
iterate the procedure by computing a basis for the space of
intertwiners between π0 (restricted to H) and some ρ0 of our
choosing.
2.5	Feature types and character theory
Figure 4: The representation π1 in-
duced from the permutation repre-
sentation ρ1 shown in fig. 3. A single
fiber is highlighted. It is transported
to a new location, and acted on by ρ1 .
By now, the reader may be wondering how to choose ρ, or indeed what the space of representations
that we can choose from looks like in the first place. We will answer these questions in this section
by showing that each representation has a type (encoded as a short list of integers) that corresponds
to a certain symmetry or invariance of the feature. We further show how the number of parameters
of an equivariant filter bank depends on the types of the representations π and ρ that it intertwines.
Our discussion will make use of a number of important elementary results from group representation
theory which are stated but not proved. The reader wishing to go deeper may consult chapters 1 and
2 of the excellent book by Serre (1977).
Recall that a group representation is a set of invertible linear maps ρ(g) : RK → RK satisfying
ρ(gh) = ρ(g)ρ(h) for all elements g, h ∈ H. It can be shown that any representation is a direct sum
(i.e. block_diag plus change of basis) of a number of “elementary” representations associated
with G. These building blocks are called irreducible representations (or irreps), because they can
4
Published as a conference paper at ICLR 2017
Irrep		Basis in F0		e	r	r2	r3	m	mr	2 mr2	3 mr3
A1	百	■-		1	1	1	1	1	1	1	1
A2				1	1	1	1	-1	-1	-1	-1
B1	ɪ			1	-1	1	-1	1	-1	1	-1
B2	⅞			1	-1	1	-1	-1	1	-1	1
E	1	H ・	■	01 10	10 -01	-01	-01	-01 01	-01	10	10 10	01 -01	-01 -01
Table 1: The irreducible representations of the roto-reflection group D4. This group is generated by
90-degree rotations r and mirror reflections m, and has 5 irreps labelled A1, A2, B1, B2, E. Left:
decomposition of π0 (eq. 1) in the space F0 of 3 × 3 filters with one channel. This representation
turns out to have type (3, 0, 1, 1, 2), meaning there are three copies of A1, one copy of B1, one
copy of B2, and two copies of the 2D irrep E (A2 does not appear). Right: the representation
matrices of each irrep, for each element of the group D4. The reader may verify that these are valid
representations, and that the characters (traces) are orthogonal.
themselves not be block-diagonalized. In other words, if ψi are the irreducible representations of
H, any representation ρ of H can be written in block-diagonal form:
Ψiι (g)
ρ(g) = A	... AT	⑺
for some basis matrix A, and some ik that index the irreps (each irrep may occur 0 or more times).
Each irreducible representation corresponds to a type of symmetry, as shown in table 1. For example,
as can be seen in this table, the representations B 1 and B 2 represent the 90-degree rotation r as the
matrix [-1], so the basis filters for these representations change sign when rotated by r. It should be
noted that in the higher layers l > 0, elementary basis filters can look different because they depend
on the representation πl that is being decomposed.
The fact that all representations can be decomposed into a direct sum of irreducibles implies that
each representation has a basis-independent type: which irreducible representations appear in it, and
with what multiplicity. For example, the input representation π0 (table 1) has type (3, 0, 1, 1, 2).
This means that, for instance, π0(r) is block-diagonalized as:
A-1π0(r)A = block_diag([1], [1], [1], [-1], [-1], [0 -1;1 0],[0 1;-1 0]).	(8)
Where the block matrix contains (3, 0, 1, 1, 2) copies of the irreps (A1, A2, B1, B2, E), evaluated
at r (see column r in table 1). The change of basis matrix A is constructed from the basis filters
shown in table 1 (and the same A block-diagonalizes π0(g) for all g).
So the most general way in which we can choose a representation ρ is to choose multiplicities
mi ≥ 0 and a basis matrix A. In Section 2.7 we will find that there is an important restriction on this
freedom, which alleviates the need to choose a basis. The choice of multiplicities is then the only
hyperparameter, analogous to the choice of the number of channels in an ordinary CNN. Indeed, the
multiplicities determine the number of channels: K = Pi mi dim 夕i.
2.6	Determining the type of the induced representation
By choosing the type ofρ, we also determine the type of π = IndGH ρ (restricted to H), but what is it?
Explicit formulas exist (Reeder (2014); Serre (1977)) but are rather complicated, so we will present
a simple computational procedure that can be used to determine the type of any representation. This
procedure relies on the character χρ(g) = Tr(ρ(g)) of the representation to be decomposed. The
most important fact about characters is that the characters of irreps 夕i, Wj are orthogonal:
XWi(A)XWj (h) = δij.
(9)
5
Published as a conference paper at ICLR 2017
Furthermore, since the trace of a direct sum equals the sum of the traces (i.e. XP㊉p，= XP + χρ>),
and every representation ρ is a direct sum of irreps, it follows that we can obtain the multiplicity of
irrep 中i in P by computing the inner product with the i-th character:
hχρ,χWii = hχΦj mj Wj,χWii
mj X%∙,Xr) = X mj hχψj ,Xψi i = mi	(IO)
So a simple dot product of characters is all we need to determine the type of a representation. As
we will see next, the type of the input and output representation ofa layer determines the parameter
cost of that layer.
2.6	. 1 The parameter cost of equivariant convolution layers
Steerable CNNs use parameters much more efficiently than ordinary CNNs. In this section we show
how the number of parameters required by an equivariant layer is determined by the feature types of
the input and output space, and how the efficiency of a choice of feature types may be evaluated.
In section 2.3, we found that a filter bank Ψ is equivariant if and only if it lies in the vector space
called HomH (π, ρ). It follows that the number of parameters for such a filter bank is equal to the
dimensionality of this space, n = dim HomH (π, ρ). This number is known as the intertwining
number of π and ρ and plays an important role in the theory of group representations.
As with multiplicities, the intertwining number is easily computed using characters. It can be shown
(Reeder, 2014) that the intertwining number equals:
dim HomH (π, ρ) = hXπ,XPi.	(11)
By linearity and the orthogonality of characters, we find that dim HomH (π, ρ) = Pi mim0i, for
representations π, ρ of type (m1, . . . , mJ) and (m01, . . . , m0J), respectively. Thus, as far as the
number of parameters of a steerable convolution layer is concerned, the only choice we have to
make for P is its type - a short list of integers mi.
The efficiency of a choice of type can be assessed using a quantity we call the parameter utilization:
dim π ∙ dim P
μ	dimHomH(∏, ρ)
(12)
The numerator equals s2K ∙ K: the number of parameters for a non-equivariant filter bank. The
denominator equals the parameter cost of an equivariant filter bank with the same filter size and
number of input/output channels. Typical values of μ in effective architectures are around |H|, e.g.
μ = 8 for H = D4. Such a layer utilizes its parameters 8 times more intensively than an ordinary
convolution layer.
2.7	Equivariant nonlinearities & capsules
In the previous section we showed that only the basis-independent types of π and P play a role in
determining the parameter cost of an equivariant filter bank. An equivalent representation P0(g) =
AP(g)A-1 will have the same type, and hence the same parameter cost as P. However, when it
comes to nonlinearities, different bases behave differently.
Just like a convolution layer (eq. 3), a layer of nonlinearities must commute with the group action.
An elementwise nonlinearity ν : R → R (or more generally, a fiber-wise nonlinearity ν : RK →
RK0) is admissible for an input representation P if there exists an output representation P0 such that
ν applied after P equals P0 applied after ν.
Since commutation with nonlinearities depends on the basis, we need a more granular notion than the
feature type. We define a P-capsule as a (typically low-dimensional) feature vector that transforms
according to a representation P (we may also refer to P as the capsule). Thus, while a capsule has
a type, not all representations of that type are equivalent as capsules. Given a catalogue of capsules
Pi (for i = 1, . . . , C) with multiplicities mi, we can construct a fiber as a stack of capsules that is
steerable by a block-diagonal representation P with mi copies of Pi on the diagonal.
Like the capsules of Hinton et al. (2011), our capsules encode the pose ofa pattern in the input, and
consist of a number of units (dimensions) that do not get mixed with the units of other capsules by
symmetries. In this sense, a stack of capsules is disentangled (Cohen & Welling, 2014).
6
Published as a conference paper at ICLR 2017
We have found a few simple types of capsules and corresponding admissible nonlinearities. It is
easy to see that any nonlinearity is admissible for ρ when the latter is realized by permutation
matrices: permuting a list of coordinates and then applying a nonlinearity is the same as apply-
ing the nonlinearity and then permuting. If ρ is realized by a signed permutation matrix, then
CReLU(α) = (ReLU(α), ReLU(-α)) introduced by Shang et al. (2016), or any concatenated non-
linearity ν0(α) = (ν(α), ν(-α)), will be admissible. Any scale-free concatenated nonlinearity
such as CReLU is admissible for a representation realized by monomial matrices (having the same
nonzero pattern as a permutation matrix). Finally, we can always make a representation of a finite
group orthogonal by a suitable choice of basis, which means that we can use any nonlinearity that
acts only on the length of the vector.
For many groups, the irreps can be realized using signed permutation matrices, so we can use ir-
reducible 夕i-capsules with concatenated nonlinearities such as CReLU. Another class of capsules,
which we call quotient capsules, are naturally realized by permutation matrices, and are thus com-
patible with any nonlinearity. These are described in Appendix C.
2.8	Computational efficiency
Modern convolutional networks often use on the order of hundreds of channels K per layer
Zagoruyko & Komodakis (2016). When using 3 × 3 filters, a filter bank can have on the order
of 9K2 ≈ 106 dimensions. The number of parameters for an equivariant filter bank is about μ ≈ 10
times smaller, but a basis for the space of equivariant filter banks would still be about 106 × 105,
which is too large to be practical.
Fortunately, the block-diagonal structure of π and ρ induces a block structure in Ψ. Suppose π =
block_diag(n1,..., πp) and P = block_diag(p1,..., ρQ). Then an intertwiner is a matrix
of shape K0 × Ks2, where K0 = Pi dim ρi and Ks2 = Pi dimπi. This matrix has the following
block structure:
h11 ∈ HomH(ρ1,∏1)	…	hip ∈ HomH(ρ1, ∏P)
Ψ =	.	...	.	(13)
hRi ∈ HomH(PR,∏1)… hRP ∈ HomH(ρR,∏P)_
Each block hij corresponds to an input-output pair of capsules, and can be parameterized by a linear
combination of basis matrices ψkij ∈ HomH (Pi, πj).
In practice, we typically use many copies of the same capsule (say ni copies of Pi and mj copies
of πj ). Therefore, many of the blocks hij can be constructed using the same intertwiner basis. If
we order equivalent capsules to be adjacent, the intertwiner consists of “blocks of blocks”. Each
superblock Hij has shape ni dim Pi × mj dimπj, and consists of subblocks of shape dim Pi ×
dim πj .
The computation graph for an equivariant convolution layer is constructed as follows. Given a
catalogue of capsules Pi and corresponding post-activation capsules Actν Pi , we compute the in-
duced representations πi = IndGH Actν Pi and the bases for HomH (Pi, πj) in an offline step. The
bases are stored as matrices ψij of shape dimPi ∙ dimπj X dimHomH(ρi,πj). Then, given
a list of input / output multiplicities ni , mj for the capsules, a parameter matrix Θij of shape
dim HomH (Pi, πj ) × nimj is instantiated. The superblocks Hij are obtained by a matrix multi-
plication ψij Θij plus reshaping to shape dim Pi ∙ dim πj × n mj. Once all superblocks are filled in,
the matrix Ψ is reshaped from K0 × Ks2 to K0 × K × s × s and convolved with the input.
2.9	Using steerable CNNs in practice
A full understanding of the theory of steerable CNNs requires some knowledge of group represen-
tation theory, but using steerable CNN technology is not much harder than using ordinary CNNs.
Instead of choosing a number of channels for a given layer, one chooses a list of multiplicities mi
for each capsule in a library of capsules provided by the developer. To preserve equivariance, the ac-
tivation function applied to a capsule must be chosen from a list of admissible nonlinearities for that
capsule (which sometimes includes all nonlinearities). Finally, one must respect the type system and
only add identical capsules (e.g. in ResNets). These constraints can all be checked automatically.
7
Published as a conference paper at ICLR 2017
3	Related Work
Steerable filters were first studied for applications in signal processing and low-level vision (Freeman
& Adelson, 1991; Greenspan et al., 1994; Simoncelli & Freeman, 1995). More or less explicit con-
nections between steerability and group representation theory have been observed by Lenz (1989);
Koenderink & Van Doorn (1990); Teo (1998); Krajsek & Mester (2007). As we have tried to demon-
strate in this paper, representation theory is indeed the natural mathematical framework in which to
study steerability.
In machine learning, equivariant kernels were studied by Reisert (2008); Skibbe (2013). In the con-
text of neural networks, various authors have studied equivariant representations. Capsules were
introduced in Hinton et al. (2011), and significantly improved by Tieleman (2014). A theoretical
account of equivariant representation learning in the brain is given by Anselmi et al. (2014). Group
equivariant scattering networks were defined and studied by Mallat (2012) for compact groups,
and by Sifre & Mallat (2013); Oyallon & Mallat (2015) for the roto-translation group. Jacobsen
et al. (2016) describe a network that uses a fixed set of (possibly steerable) basis filters with learned
weights. Lenc & Vedaldi (2015) showed empirically that convolutional networks tend to learn equiv-
ariant representations, which suggests that equivariance could be a good inductive bias.
Invariant and equivariant CNNs have been studied by Gens & Domingos (2014); Kanazawa et al.
(2014); Dieleman et al. (2015; 2016); Cohen & Welling (2016); Marcos et al. (2016). All of these
models, as well as scattering networks, implicitly use the regular representation: feature maps are
(often implicitly) conceived of as functions on G, and the action of G on the space of functions on G
is known as the regular representation (Serre (1977), Appendix B). Our work is the first to consider
other kinds of equivariance in the context of CNNs.
The idea of adding a type system to neural networks has been explored by Olah (2015); Balduzzi
& Ghifary (2016). We have shown that a type system emerges naturally from the decomposition
of a linear representation of a mathematical structure (a group, in our case) associated with the
representation learned by a neural network.
4	Experiments
We implemented steerable CNNs in Chainer (Tokui et al., 2015) and performed experiments on the
CIFAR10 dataset (Krizhevsky, 2009) to determine if steerability is a useful inductive bias, and to
determine the relative merits of the various types of capsules. In order to run experiments faster, and
to see how steerable CNNs perform in the small-data regime, we used only 2000 training samples
for our initial experiments.
As a baseline, we used the competitive wide residual networks (ResNets) architecture (He et al.,
2016a;b; Zagoruyko & Komodakis, 2016). We tuned the capacity of this network for the reduced
dataset size and settled on a 20 layer architecture (three residual blocks per stage, with two layers
each, for three stages with feature maps of size 32 × 32, 16 × 16 and 8 × 8, various widths). We
compared the baseline architecture to various kinds of steerable CNN, obtained by replacing the
convolution layers by steerable convolution layers. To make sure that differences in performance
were not simply due to underfitting or overfitting, we tuned the width (number of channels, K)
using a validation set. The rest of the training procedure is identical to Cohen & Welling (2016), and
is fixed for all of our experiments.
We first tested steerable CNNs that consist entirely of a single kind of capsule. We found that
architectures with only one type do not perform very well (roughly 30-40% error, vs. 30% for plain
ResNets trained on 2k samples from CIFAR10), except for those that use the regular representation
capsule (Appendix C), which outperforms standard CNNs (26.75% error). This is not too surprising,
because many capsules are quite restrictive in the spatial patterns they can express. The strong
performance of regular capsules is consistent with the results of Cohen & Welling (2016), and can
be explained by the fact that the regular representation contains all other (irreducible and quotient)
representations as subrepresentations, and can therefore learn arbitrary spatial patterns.
We then created networks that use a mix of the more successful kinds of capsules. After a few
preliminary experiments, we settled on a residual network that uses one mix of capsules for the input
and output layer of a residual block, and another for the intermediate layer. The first representation
8
Published as a conference paper at ICLR 2017
Net	Depth	Width	#Params	#Labels	Dataset	Test error
Ladder	-10^^	96		4k	C10ss	20.4
steer	14	(280, 112)	4.4M	4k	C10	23.66
steer	20	(160, 64)	2.2M	4k	C10	24.56
steer	14	(280, 112)	4.4M	4k	C10+	16.44
steer	20	(160, 64)	2.2M	4k	C10+	16.42
ResNet	1001	16	10.2M	50k	C10+	4.62
Wide	28	160	36.5M	50k	C10+	4.17
Dense	100	2400	27.2M	50k	C10+	3.74
steer	26	(280, 112)	9.1M	50k	C10+	3.74
steer	20	(440, 176)	16.7M	50k	C10+	3.95
steer	14	(400, 160)	9.1M	50k	C10+	3.65
ResNet	1001	16	10.2M	50k	C100+	22.71
Wide	28	160	36.5M	50k	C100+	20.50
Dense	100	2400	27.2M	50k	C100+	19.25
steer	20	(280, 112)	6.9M	50k	C100+	19.84
steer	14	(400, 160)	9.1M	50k	C100+	18.82
Table 2: Comparison of results of steerable CNNs vs. previous state of the art methods. A plus (+)
indicates modest data augmentation (shifts and flips). Width for steerable CNNs is reported as a pair
of numbers, one for the input / output layer of a ResNet block, and one for the intermediate layer.
consists of quotient capsules: regular, qm, qmr2, qmr3 (see Appendix C) followed by ReLUs. The
second consists of irreducible capsules: A1, A2, B1, B2, E(2x) followed by CReLUs. On CIFAR10
with 2k labels, this architecture works better than standard ResNets and regular capsules at 24.48%
error.
When tested on CIFAR10 with 4k labels (table 2), the method comes close to the state of the art
in semi-supervised methods, that use additional unlabelled data (Rasmus et al., 2015), and better
than transfer learning approaches such as DCGAN which achieves 26.2% error (Radford et al.,
2015). When tested on the full CIFAR10 and CIFAR100 dataset, the steerable CNN substantially
outperforms the ResNet (He et al., 2016b) baseline and achieves state of the art results (improving
over wide and dense nets (Zagoruyko & Komodakis, 2016; Huang et al., 2016)).
5	Conclusion & Future Work
We have presented a theoretical framework for understanding steerable representations in convolu-
tional networks, and have shown that steerability is a useful inductive bias that can improve model
accuracy, particularly when little data is available. Our experiments show that a simple steerable
architecture achieves state of the art results on CIFAR10 and CIFAR100, outperforming recent ar-
chitectures such as wide and dense residual networks.
The mathematical connection between representation learning and representation theory that we
have established improves our understanding of the inner workings of (equivariant) convolutional
networks, revealing the humble CNN as an elegant geometrical computation engine. We expect that
this new tool (representation theory), developed over more than a century by mathematicians and
physicists, will greatly benefit future investigations in this area.
For concreteness, we have used the group of flips and rotations by multiples of 90 degrees as a
running example throughout this paper. This group already has some nontrivial characteristics (such
as non-commutativity), but it is still small and discrete. The theory of steerable CNNs, however,
readily extends to the continuous setting. Evaluating steerable CNNs for large, continuous and
high-dimensional groups is an important piece of future work.
Another direction for future work is learning the feature types, which may be easier in the continuous
setting because (for non-compact groups) the irreps live in a continuous space where optimization
may be possible. Beyond classification, steerable CNNs are likely to be useful in geometrical tasks
such as action recognition, pose and motion estimation, and continuous control tasks.
9
Published as a conference paper at ICLR 2017
Acknowledgments
We kindly thank Kenta Oono, Shuang Wu, Thomas Kipf and the anonymous reviewers for their
feedback and suggestions. This research was supported by Facebook, Google and NWO (grant
number NAI.14.108).
References
F. Anselmi, J. Z. Leibo, L. Rosasco, J. Mutch, A. Tacchetti, and T. Poggio. Unsupervised learning of invariant
representations with low sample complexity: the magic of sensory cortex or a new framework for machine
learning? Technical Report 001, MIT Center for Brains, Minds and Machines, 2014.
D. Balduzzi and M. Ghifary. Strongly-Typed Recurrent Neural Networks. Proceedings of the 33rd International
Conference on Machine Learning, 33, 2016.
T. Cohen. Learning Transformation Groups and their Invariants, 2013.
T. Cohen and M. Welling. Learning the Irreducible Representations of Commutative Lie Groups. In Pro-
Ceedings of the 31st International COnference on Machine Learning (ICML), volume 31, pp. 1755-1763,
2014.
T. S. Cohen and M. Welling. Group equivariant convolutional networks. In Proceedings of The 33rd Interna-
tional Conference on Machine Learning (ICML), volume 48, pp. 2990-2999, 2016.
S. Dieleman, K. W. Willett, and J. Dambre. Rotation-invariant convolutional neural networks for galaxy mor-
phology prediction. Monthly Notices of the Royal Astronomical Society, 450(2), 2015.
S. Dieleman, J. De Fauw, and K. Kavukcuoglu. Exploiting Cyclic Symmetry in Convolutional Neural Net-
works. In International Conference on Machine Learning (ICML), 2016.
G.	B. Folland. A Course in Abstract Harmonic Analysis. CRC Press, 1995.
W. T. Freeman and E. H. Adelson. The design and use of steerable filters. Pattern Analysis and Machine
Intelligence, IEEE Transactions on, 13(9):891-906, sep 1991.
R. Gens and P. Domingos. Deep Symmetry Networks. In Advances in Neural Information Processing Systems
(NIPS), 2014.
H.	Greenspan, S. Belongie, R. Goodman, and P. Perona. Overcomplete Steerable Pyramid Filters and Rotation
Invariance. Proceedings of the Computer Vision and Pattern Recognition (CVPR), 1994.
K. He, X. Zhang, S. Ren, and J. Sun. Deep Residual Learning for Image Recognition. In IEEE Conference on
Computer Vision and Pattern Recognition (CVPR), 2016a.
K. He, X. Zhang, S. Ren, and J. Sun. Identity Mappings in Deep Residual Networks. In European Conference
on Computer Vision (ECCV), 2016b.
G. E. Hinton, A. Krizhevsky, and S. D. Wang. Transforming auto-encoders. ICANN-11: International Confer-
ence on Artificial Neural Networks, Helsinki, 2011.
G. Huang, Z. Liu, and K. Q. Weinberger. Densely Connected Convolutional Networks. 2016. URL http:
//arxiv.org/abs/1608.06993.
J.-H. Jacobsen, J. van Gemert, Z. Lou, and A. W. Smeulders. Structured Receptive Fields in CNNs. In Computer
Vision and Pattern Recognition (CVPR), 2016.
K. Kanatani. Group-Theoretical Methods in Image Understanding. Springer-Verlag New York, Inc., Secaucus,
NJ, USA, 1990. ISBN 9783642852152.
A. Kanazawa, A. Sharma, and D. Jacobs. Locally Scale-invariant Convolutional Neural Network. Deep Learn-
ing and Representation Learning Workshop: NIPS, pp. 1-11, 2014.
E. Kaniuth and K. F. Taylor. Induced Representations of Locally Compact Groups. Cambridge University
Press, 2013. ISBN 9780521762267.
J.	J. Koenderink and a. J. Van Doorn. Receptive field families. Biological Cybernetics, 63(4):291-297, 1990.
ISSN 03401200. doi: 10.1007/BF00203452.
10
Published as a conference paper at ICLR 2017
K.	Krajsek and R. Mester. A Unified Theory for Steerable and Quadrature Filters. Communications in Computer
and Information Science,4CCIS:201-214, 2007. ISSN 18650929. doi:10.1007/978-3-540-75274-5」3.
A. Krizhevsky. Learning Multiple Layers of Features from Tiny Images. Technical report, University of
Toronto, 2009.
K. Lenc and A. Vedaldi. Understanding image representations by measuring their equivariance and equivalence.
In Proceedings of the IEEE Conf. on Computer Vision and Pattern Recognition (CVPR), 2015.
R.	Lenz. Group-theoretical model of feature extraction. Journal of the Optical Society of America A (Optics
and Image Science), 6(6):827-834, 1989.
G. W. Mackey. Induced Representations of Locally Compact Groups I. Annals OfMathematics, 55(1):101-139,
1952.
G. W. Mackey. Induced Representations of Locally Compact Groups II. The Frobenius Reciprocity Theorem.
Annals of Mathematics, 58(2):193-221, 1953.
G. W. Mackey. Induced Representations of Groups and Quantum Mechanics. W.A. Benjamin Inc., New York-
Amsterdam, 1968.
S.	Mallat. Group Invariant Scattering. Communications in Pure and Applied Mathematics, 65(10):1331-1398,
2012.
D.	Marcos, M. Volpi, and D. Tuia. Learning rotation invariant convolutional filters for texture classification.
pp. 6, 2016. URL http://arxiv.org/abs/1604.06720.
C. Olah. Neural Networks, Types, and Functional Programming, 2015. URL https://colah.github.
io/posts/2015-09-NN-Types-FP/.
E.	Oyallon and S. Mallat. Deep Roto-Translation Scattering for Object Classification. In IEEE Conference on
Computer Vision and Pattern Recognition (CVPR), pp. 2865—-2873, 2015.
A. Radford, L. Metz, and S. Chintala. Unsupervised Representation Learning with Deep Convolutional Gener-
ative Adversarial Networks. arXiv, pp. 1-15, 2015. ISSN 0004-6361. doi: 10.1051/0004-6361/201527329.
URL http://arxiv.org/abs/1511.06434.
A. Rasmus, H. Valpola, M. Honkala, M. Berglund, and T. Raiko. Semi-supervised learning with Ladder Net-
works. In Neural Information Processing Systems (NIPS), 2015.
M. Reeder. Notes on representations of finite groups, 2014. URL https://www2.bc.edu/
{〜}reederma/RepThy.pdf.
M. Reisert. Group Integration Techniques in Pattern Analysis: A Kernel View. PhD thesis, Albert-Ludwigs-
University, 2008.
J.-P. Serre. Linear Representations of Finite Groups. Springer, 1977.
W. Shang, K. Sohn, D. Almeida, and H. Lee. Understanding and Improving Convolutional Neural Networks via
Concatenated Rectified Linear Units. In International Conference on Machine Learning (ICML), volume 48,
2016.
L.	Sifre and S. Mallat. Rotation, Scaling and Deformation Invariant Scattering for Texture Discrimination.
IEEE conference on Computer Vision and Pattern Recognition (CVPR), 2013.
E. Simoncelli and W. Freeman. The steerable pyramid: a flexible architecture for multi-scale derivative com-
putation. Proceedings of the International Conference on Image Processing, 3:444-447, 1995. ISSN
0818673109. doi: 10.1109/ICIP.1995.537667.
H. Skibbe. Spherical Tensor Algebra for Biomedical Image Analysis. PhD thesis, Albert-Ludwigs-Universitat
Freiburg im Breisgau, 2013.
M.	E. Taylor. Noncommutative Harmonic Analysis. American Mathematical Society, 1986. ISBN 0821815237.
P. C.-S. Teo. Theory and Applications of Steerable Functions. PhD thesis, Stanford University, 1998.
T. Tieleman. Optimizing Neural Networks that Generate Images. PhD thesis, 2014.
11
Published as a conference paper at ICLR 2017
S. Tokui, K. Oono, S. Hido, and J. Clayton. Chainer: a Next-Generation Open Source Framework for Deep
Learning. Proceedings of Workshop on Machine Learning Systems (LearningSys) in The Twenty-ninth An-
nual Conference on Neural Information Processing Systems (NIPS), pp. 1-6, 2015.
H. Weyl. The classical groups: their invariants and representations. Princeton University Press, 1939.
S. Zagoruyko and N. Komodakis. Wide Residual Networks. arXiv:1605.07146, 2016.
Appendix A:	Induction
In this section we will show that a stack of feature maps produced by convolution with an H-
equivariant filter bank transforms according to the induced representation. That is, we will derive
eq. 5, repeated here for convenience:
[Ψ ? [∏ι(tr)f ]] (x) = Pι+ι(r) [[Ψ ?f] ((tr)-1x)]	(14)
In the main text, we mentioned that x ∈ Z2 can be interpreted as a point or as a translation. Here
We make this difference explicit, by writing X ∈ Z2 for a point and X ∈ G for a translation. (The
operation : defines a section of the projection map G → Z2 that forgets the non-translational part of
the transformation (Kaniuth & Taylor, 2013)).
With this notation, the convolution is defined as:
[Ψ ?f] (x) = Ψ∏(x-1)f
(15)
Although the induced representation can be described in a more general setting, we will use an
explicit matrix representation of G to make it easier to check our computations. A general element
of G is written as:
IT R0 RT
g=tr= 0	1	0	1 = 0	1
(16)
Where R is the matrix representation of r (e.g. a 2 × 2 rotation / reflection matrix), and T is a
translation vector. The section we use is:
IX
01
(17)
Finally, we will distinguish the action of G on itself, written gh for g, h ∈ G (implemented as
matrix-matrix multiplication) and its action on Z2, written g ∙ X for g ∈ G and X ∈ Z2 (implemented
as matrix-vector multiplication by adding a homogeneous coordinate to X).
To keep notation uncluttered, we will write π = πl and ρ = ρl+1. In full detail, the derivation of the
transformation law for the feature space induced by ρ proceeds as follows:
[Ψ ? [∏(tr)f ]] (x) = Ψπ(x-1)π(tr)f
=Ψπ(X-1tr)f
=Ψπ(rr-1X-1tr)f
=Ψπ(r)π(r-1x-1tr)f
=ρ(r)Ψπ(r-1X-1tr)f
=ρ(r)Ψπ((r-1-t-10^r)-1')f
=ρ(r)Ψπ ((tr)-1 ∙ x) 1) f
=ρ(r)[Ψ ?f]((tr)-1 ∙ x)
The last line is the result shown in the paper. The justification of each step is:
(18)
1.	Definition of ?
2.	π is a homomorphism / group representation
12
Published as a conference paper at ICLR 2017
3.	rr-1 is the identity, so can always multiply by it
4.	π is a homomorphism / group representation
5.	Ψ ∈ HomH (π, ρ) is equivariant to r ∈ H.
6.	Invert twice.
7.	(tr)-1 ∙ X = r-1t-1xr can be checked by multiplying the matrices / vectors.
8.	Definition of ?
The derivation above is somewhat involved and messy, so the reader may prefer to think geometri-
cally (using the figures in the paper) instead of algebraically. This complexity is an artifact of the
lack of abstraction in our presentation. The induced representation is really a very natural object to
consider (abstractly, it is the “adjoint functor” to the restriction functor. A more abstract treatment
of the induced representation can be found in Serre (1977); Mackey (1952); Reeder (2014). A treat-
ment that is close to our own, but more general is the “alternate description” found on page 49 of
Kaniuth & Taylor (2013).
Appendix B:	Relation to Group Equivariant CNNs
In this section we show that the recently introduced Group Equivariant Convolutional Networks (G-
CNNs, Cohen & Welling (2016)) are a special kind of steerable CNN. Specifically, a G-CNN is a
steerable CNN with regular capsules.
In a G-CNN, the feature maps (except those of the input) are thought of as functions f : G → RK
instead of functions on the plane f : Z2 → RK, as we do here. It is shown that the feature maps
transform according to
π(g)f(h) = f(g-1h).	(19)
This defines a linear representation of G known as the regular representation. It is easy to see that
the regular representation is naturally realized by permutation matrices. Furthermore, it is known
that the regular representation of G is induced by the regular representation of H . The latter is
defined in Appendix C, and is what we refer to as “regular capsules” in the paper.
Appendix C:	Regular and Quotient Features
Let H be a finite group. A subgroup of H is a subset that is also itself a group (i.e. closed under
composition and inverses). The (left) coset of a subgroup K in H are the sets hK = {hk|k ∈ K}.
The cosets are disjoint and jointly cover the whole group H (i.e. they partition H). The set of all
cosets of K in H is denoted H/K, and is also called the quotient of H by K.
The coset space caries a natural left action by H. Let a, b ∈ H, then a ∙ bK = (ab)K.
This action translates into an action on the space of functions on H/K. Let Q denote the space of
functions f : H/K → R. Then we have the following representation of H:
ρ(a)f(bK) = f (a-1∙ bK).	(20)
The function f attaches a value to every coset. The H-action permutes these values, because it
permutes the cosets. Hence, ρ can be realized by permutation matrices. For small groups the explicit
computations can easily be done by hand, while for large groups this task can be automated.
In this way, we get one permutation representation for each subgroup K of H. In particular, for the
subgroup K = {e} (the trivial subgroup containing only the identity e), We have H/K = H. The
representation in the space of functions on H is known as the “regular representation”. Using such
regular representations in a steerable CNN is equivalent to using the group convolutions introduced
in Cohen & Welling (2016), so steerable CNNs are a strict generalization of G-CNNs. At the other
extreme, we take K = H, which gives the quotient H/K = {e}, the trivial group, which gives the
trivial representation A1.
For the roto-reflection group H = D4, we have the following subgroups and associated quotient
features
13
Published as a conference paper at ICLR 2017
Subgroup K	quotient feature name	dimensionality
{e}	regular	8
{e, m}	qm	4
{e, mr}	qmr	4
{e, mr2}	qmr2	4
{e, mr3}	qmr3	4
{e, r2}	r2	4
{e, r, r2, r3}	r	2
e, r2 , m, mr2	r2m	2
e, r2 , mr, mr3	r2mr	2
H	A1	1
14