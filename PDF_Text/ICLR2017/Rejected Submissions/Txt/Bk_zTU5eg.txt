Under review as a conference paper at ICLR 2017
Inefficiency of stochastic gradient descent
with larger mini-batches (and more learners)
Onkar Bhardwaj & Guojing Cong
IBM T. J. Watson Research Center
Yorktown Heights, NY 10598, USA
{obhardw,gcong}@us.ibm.com
Ab stract
Stochastic Gradient Descent (SGD) and its variants are the most important op-
timization algorithms used in large scale machine learning. Mini-batch version
of stochastic gradient is often used in practice for taking advantage of hardware
parallelism. In this work, we analyze the effect of mini-batch size over SGD con-
vergence for the case of general non-convex objective functions. Building on the
past analyses, we justify mathematically that there can often be a large difference
between the convergence guarantees provided by small and large mini-batches
(given each instance processes equal number of training samples), while provid-
ing experimental evidence for the same. Going further to distributed settings, we
show that an analogous effect holds with popular Asynchronous Gradient Descent
(ASGD): there can be a large difference between convergence guarantees with in-
creasing number of learners given that the cumulative number of training samples
processed remains the same. Thus there is an inherent (and similar) inefficiency
introduced in the convergence behavior when we attempt to take advantage of
parallelism, either by increasing mini-batch size or by increase the number of
learners.
1	Introduction
Stochastic gradient descent (SGD) and its parallel variants form the backbone of most popular deep
learning applications. Consequently, there has been a significant interest in investigating their con-
vergence properties. SGD has been shown to satisfy an asymptotic convergence rate of O(1/S)
for convex objective functions [Nemirovski et al. (2009)] and an asymptotic convergence rate of
O(1∕√S) for general non-convex objective functions with mini-batch size 1 in [Ghadimi & Lan
(2013)] or with arbitrary mini-batch sizes in [Dekel et al. (2012)].
Although SGD converges asymptotically with the same rate irrespective of mini-batch size, it has
been reported that for large mini-batch sizes, often it is slower to converge - for example, see Wilson
& Martinez (2003) for the detailed graphical illustrations therein for the effect of increasing batch-
size or see Bottou (2010) for the comments on the tradeoffs of mini-batching. In this work, we are
interested in using theoretical analysis for justifying such practical observations or comments. In
particular, we show the following:
•	We consider general non-convex objective functions and show that prior to reaching asymp-
totic regime, SGD convergence could get much slower (inferred from the difference in the
convergence rate guarantees from Theorem 2) with using higher mini-batch size, assum-
ing a constant learning rate. Here, to evaluate the convergence rate guarantee we use the
measure of average gradient norm since we are considering general non-convex objectives.
As a consequence of slower convergence, the number of training samples required to at-
tain a certain convergence guarantee (in terms of average gradient norm) increases as the
mini-batch size increases. We build the analysis based on the framework in Ghadimi & Lan
(2013).
•	Further, we investigate Asynchronous Stochastic Gradient Descent (ASGD) which is one
of the most popular asynchronous variants of SGD [Dean et al. (2012); Li et al. (2014a);
1
Under review as a conference paper at ICLR 2017
Chilimbi et al. (2014)]. Recently, Lian et al. (2015) extended the results of SGD conver-
gence to ASGD and showed that it converges asymptotically with a convergence rate of
O(1/√S). In our analysis we show that prior to the asymptotic regime, with using higher
number of learners ASGD convergence could get much slower in terms of average gradi-
ent norm attained after cumulatively processing a fixed number of training samples (this
slow-down is inferred from the difference in the convergence guarantees from Theorem 4).
•	This suggests that there is an inherent limit on harnessing parallelism with SGD either
by increasing mini-batch size or increasing the number of learners (even when we do not
take into account overheads such as communication cost). The difference in convergence
behavior caused by increasing mini-batch size for SGD and by increasing the number of
learners with ASGD was found to be similar (See Theorem 2, Theorem 4 and the discussion
at the end of Section 4).
For rest of the paper, we use the following notation: Let F (x, zi) denote a non-convex function
of a parameter vector x and a training sample zi selected from the training set {z1, z2, . . . , zn}.
Our aim is to find a parameter vector that minimizes the objective function f(x) = EzF (x, z).
Towards this, we use mini-batch SGD, where in kth iteration, we select a random mini-batch zk =
{zk1, zk2, . . . , zkM} of size M and perform the following update:
M
Xk+1 = Xk - Y ∙ G(x, Zk) = Xk - Y ∙ E G(x, Zk)
=1
(1)
In the above equation, Y denotes the learning rate and we have G(X, Zk) = PiM=1 G(X, Zki) where
G(X, Zki) denotes the gradient of the objective function f(X) with respect to a training sample Zki ∈
Zk. We define Df := f (xi) - f (x*) where xi is the initial parameter vector and x* is a local
optima towards which SGD proceeds. We also denote byS the total number of training samples to
be processed.
Additionally, we make the following standard assumptions, see e.g., [Lian et al. (2015), Ghadimi &
Lan (2013)]:
A.1 Unbiased estimator: We assume that the expectation of G(x, Z) equals to the true value
of the gradient, i.e., Ez G(χ, Z) = Vf (x) ∀χ.
A.2 Bounded variance: We assume that there exists a constant σ2 such that
Ez(kG(x,Z) -Vf(x)k2) ≤ σ2 ∀x.
A.3 Lipschitzian Gradient: We assume f(x) to satisfy Lipschitzian smoothness, i.e., there
exists a constant L SUChthatkVf(X) - Vf (y)k ≤ L ∙∣∣x - yk ∀x,y.
The paper is organized as follows: Section 2 discussed some related work. We follow it up by
analyzing impact of mini-batch size on SGD in Section 3. Later we extend the analysis to ASGD in
Section 4. We provide experimental evidence regarding our analysis in Section 5 and conclude by
discussing future directions in Section 6.
2	Related Work
In recent years, there have been several works analyzing convergence properties of SGD and its
variants. In Nemirovski et al. (2009), SGD has been shown to have a convergence rate of O(1/S)
for convex objective functions, where S is the number of samples seen, and this rate is in terms
of distance of objective function from the optimal value. When the objective cost functions are
non-convex, as is the case with most deep learning applications, the rate of convergence of SGD
in terms of average gradient norm has been shown to be O(1∕√S) asymptotically by Ghadimi &
Lan (2013). The results in Dekel et al. (2012) can be interpreted as showing the applicability of this
convergence rate also for the mini-batches of size in M, where nowS takes form of MK with K
being the number of mini-batches processed.
Among the distributed variants of SGD, ASGD has been the most popular variant Dean et al. (2012);
Li et al. (2014a); Chilimbi et al. (2014). Practically it has been observed that ASGD is often slower
to converge with increasing number of learners [Seide et al. (2014); Chan & Lane (2014); Dean et al.
2
Under review as a conference paper at ICLR 2017
(2012)]. Although these works did not ignore communication overhead, in Section 4 we investigate
the inherent inefficiency in ASGD without communication overhead costs. In Lian et al. (2015),
it was proved that in the asymptotic regime the convergence rate of O(1/√S) can be extended to
ASGD when the “age” of updates was bounded by the number of learners.
There exist several other sequential and distributed variants of SGD. For example, SGD with vari-
ance reduction techniques to mitigate the effects of gradient variance have been discussed in [John-
son & Zhang (2013); Xiao & Zhang (2014)]. SGD with co-ordinate descent/ascent and its dis-
tributed variants has been studied in [Hsieh et al. (2008); Richtarik & TakaC (2013); Fercoq et al.
(2014); Konecny et al. (2014); Qu & RiChtarik (2014); Liu et al. (2015); Jaggi et al. (2014); Nes-
terov (2012)]. The convergence properties of asynchronous stochastic coordinate descent have been
analyzed in Liu & Wright (2015). More recently, the authors in Meng et al. (2016) have stud-
ied combining variance reduction techniques, randomized block co-ordinate descent [Richtarik &
Takac (2014)] and Nesterov acceleration methods [Nesterov (2013)] and analyzed its theoretical
properties.
There have been several recent works which attempt to mitigate the effect of degrading convergence
for large mini-batches (e.g., see [Li et al. (2014b)] where in each mini-batch a regularized objective
function is optimized to compute updated parameter vector), or there are works which attempt to
select mini-batch dynamically for better performance, for example see [Byrd et al. (2012); Tan et al.
(2016); De et al. (2016)], or there have been works which attempt to improve SGD performance by
intelligent selection of training samples, e.g., [Needell et al. (2014); Bouchard et al. (2015)].
3	The Impact of Minibatch Size on SGD
In this section, we build on the SGD convergence analysis in Ghadimi & Lan (2013). In particu-
lar, we consider the convergence guarantees from Theorem 2.1 in Ghadimi & Lan (2013) restricted
to constant learning rate. However, we first modify their analysis to allow mini-batches of arbi-
trary sizes. Building on, we show that SGD with smaller mini-batches can have better conver-
gence guarantees than with using larger mini-batches. As a consequence, we observe that for larger
mini-batches, a larger number of samples is needed for the convergence rate to fall below a certain
threshold.
Lemma 1. With mini-batches of size M and a constant learning rate γ, after K iterations of SGD,
we have
PK=IE(kVf(Xk )k2)	1	(Df	Lσ2γ2∖
K	≤ Y - LMY2	(S +	2	)
Proof outline. Using the property of Lipschitzian gradient, we get
f (xk+1)

f (Xk) + hVf (xk),Xk+ι - Xki + — ∣∣Xk+ι - Xkk2
2
f (Xk ) - Yk ∙ (Vf(Xk ), ^X G(Xk,zQ: + ^^2-
M
XG(Xk,zki)
=1
(3)
Let us define δki = G(Xk, zki) - Vf(Xk) and δk = PiM=1 δki. Using it, the above equation can be
rewritten as
f(Xk+ι)- f (Xk) ≤ -γk ∙ hVf (Xk),δk + M ∙Vf(Xk)i + YlL∣δk + M ∙ Vf(Xk)∣2
⇒ f(Xk+l) - f(Xk) ≤ -Yk ∙ hVf (Xk),δki - MYk ∙ ∣∣Vf(Xk)k2
+y∣l (∣δkk2 + 2Mhδk, Vf(Xk)i + M2∣Vf(Xk)k2)
Rest of the proof involves adding such inequalities over first K - 1 updates and bounding the ∣δk ∣2
using assumption A.2 and hδk, Vf (Xk)i using assumption A.1 from Section 1. Finally, we use
f (XK) 一 f (x*) ≤ Df and rearrange the terms to get the desired bound.	□
3
Under review as a conference paper at ICLR 2017
In the following theorem, we justify that given a fixed number of samples S to be processed, SGD
with smaller mini-batches SGD can have better convergence guarantees than with using larger mini-
batches. Note that α used in the theorem statement is a measure of (the square root of) the number
of training samples processed.
Theorem 2.	Let α := JLD2. Let 4Mι ≤ α ≤ Mh/4. Then the convergence guarantee for SGD
for mini-batch size Mh after processing S training samples can be worse than the convergence
guaranteefor mini-batch size Ml by afactor of 2Mh∕(α√2 + Ml).
Proof outline. For a fixed number S of training samples to be processed, we now minimize the
right hand side of Equation 2 to find the best convergence guarantee supported by Lemma 1. Let
Y = C ∙，Df/(SLσ2), where C is a scalar multiplier. Substituting it in Equation 2 and after some
algebraic manipulations, we get
PK=IE(kVf(Xk )k2)	≤
Df Lσ2
S
K
(4)
By applying simple calculus, it can be shown that the value C of C which minimizes right hand side
of the above equation is given by
(5)
In appendix, We show that with M = Ml ≤ α∕4, we have C ≈ √2 - Ml∕ɑ and consequently
the coefficient of ∖∕Df Lσ2/S from Equation 4 evaluates to approximately √2 + Ml∕α. Whereas
for M = Mh ≥ 4α, we show that in the appendix using that C = α∕Mh and the coefficient of
DfLf Lσ2/S from Equation 4 evaluates to approximately 2Mh∕α. Combining these observations,
we get that the convergence guarantees for Ml and Mh can differ by a factor of 2Mh/(α√2 + Ml)
after processing S training samples. See the appendix for complete proof.	□
Note that while it could be possible to show that in general smaller mini-batches converge faster than
larger mini-batches in theory, we used 4Ml ≤ α ≤ Mh∕4 in Theorem 2 for the sake of simplicity.
Also, although we theoretically justified faster convergence smaller mini-batches in Theorem 2, the
exact factors by which bigger mini-batches can be worse can vary in practice. Here our purpose is
to give theoretical support to the practical observations of smaller mini-batches being faster.
Theorem 3.	The number of samples needs to be processed in order for SGD achieve the same
convergence guarantee increases as the mini-batch size increases.
Proof. For the same values ofγ and S, the value of the bound from Equation 2 becomes worse (i.e.,
increases) as M increases. This is because for a fixed γ the quantity γ - LMγ2∕2 must decrease
as M increases. Consequently for given S, the best value of convergence guarantee (i.e., smallest
average gradient norm) attained by varying γ must become worse (i.e., higher) as M increases. Thus
in order to reach the same convergence guarantee, SGD must process more training samples with
increasing mini-batch size.	□
Now we will proceed to the next section, where we will show that with ASGD (which is one of
the most popular distributed variants of SGD) increasing number of learners can lead to slower
convergence given a fixed total number of samples to be processed, and the effect is similar to that
of increasing mini-batch size for SGD.
4 Asynchronous Stochastic Gradient Descent
ASGD typically has a parameter server maintaining the parameters (i.e., the weights in the neural
network) and multiple learners. Each learner asynchronously repeats the following:
•	Pull: Get the parameters from the server.
4
Under review as a conference paper at ICLR 2017
•	Compute: Compute the gradient with respect to randomly selected mini-batch (i.e., a cer-
tain number of samples from the dataset).
•	Push and update: Communicate the gradient to the server. Server then updates the pa-
rameters by subtracting this newly communicated gradient multiplied by the learning rate.
We assume that the update performed by the server is atomic, i.e., the server does not send or receive
parameters while it updates the parameters. Now we express kth update step of the ASGD algorithm
in terms of our notation. Note that for kth update, the partial gradient computed by a learner can be
with respect to an older parameter vector. This is because while computing the partial gradient, the
parameter vector could have been updated because of the partial gradients sent in by other learners.
Let xk-τ be the parameter vector used by a learner to compute the partial gradient to be used in kth
update. Then the equation for kth update of ASGD becomes:
Xk+1 = Xk - Y ∙ G(Xk-τ,z)	(6)
Lian et al. (2015) showed that when the age of the updates T is bounded by the number of learners
N, then ASGD asymptotically converges with a rate of O(1/√S) where S is the cumulative number
of training samples processed. From Theorem 1 in Lian et al. (2015), the convergence rate guarantee
(expressed in the terms of average gradient norm) for ASGD with N learners after processing K
updates becomes
PK= E(kVf(xk )k2)
K
s.t.
≤ MMf + σ2Lγ + 2σ2LMNY
LM γ +2L2M 2N2γ2 ≤ 1
(7)
(8)
The terms independent of the number of updates K in Equation 7 indicate that with a constant
learning rate, there is a limit on how close the algorithm can reach to the optimum without lowering
the learning rate. Although asymptotically, it can be shown that Equation 7-8 lead to O(1∕√S)
convergence (see Lian et al. (2015)), we now investigate the convergence behavior prior to such a
regime. We have the following theorem about the effect of increasing the number of learners on
ASGD convergence guarantee:
Theorem 4.	Let N > 1 be the number of learners and let a = JM^D于 ≤ N，then the optimal
ASGD convergence rate guarantee for 1 learner and N learners can differ by a factor of approxi-
mately N.
The proof of above theorem is in the same spirit as that of Theorem 2 and can be found in the
appendix. Note that without asynchronous nature of ASGD, the analysis for synchronous distributed
SGD would be the same as the analysis for SGD from Section 3. This is because synchronous SGD,
where each of the N learners compute the gradient for a random mini-batch of size M , equivalently
represents SGD with mini-batch size M N. The asynchronous nature of ASGD introduces extra
factors tobe taken into account such as the “age” of the updates (i.e., the situation where the gradient
returned by a learner may have been computed by an older parameter vector).
Theorem 5.	For a constant mini-batch size M , the number of samples needs to be processed in
order to achieve the same convergence guarantee increases as the number of learners increases.
Proof outline. The range of γ permissible by Equation 8 becomes smaller as N increases. Rest of
the proof combines the observations that the minimum attained by the convergence guarantee by
Equation 7 must become worse if the range of γ decreases and N increases. For complete proof,
please see the appendix.	□
Discussion: From Theorem 2, for sequential SGD, there could be a difference of 2Mh/(α√2 + Ml)
between the convergence guarantee of mini-batch sizes Ml, Mh with 4Ml ≤ α ≤ Mh/4. Assuming
Ml to be far smaller than a, this factor becomes approximately √2Mh∕α. This is comparable with
the difference N∕a between ASGD convergence guarantee of 1 learner and N learners. Although
exact numerical multipliers may differ depending on the tightness of the original convergence bound,
it points to the similarities between slow-down caused by bigger mini-batch sizes with SGD and
larger number of learners with ASGD. At a high level, ASGD with higher number of learners (with
5
Under review as a conference paper at ICLR 2017
Input: mini-batch of M RGB images
J
Convolution: (nfeat, nkern, height, width) = (3, 64, 5, 5)
Rectified Linear Unit (ReLU)
Max-Pooling: (height, width) = (2, 2)
Dropout: prob. = 0.5
J
Convolution: (nfeat, nkern, height, width) = (64, 128, 3, 3)
Rectified Linear Unit (ReLU)
Max-Pooling: (height, width) = (2, 2)
Dropout: prob. = 0.5
J
Convolution: (nfeat, nkern, height, width) = (128, 256, 3, 3)
Rectified Linear Unit (ReLU)
Max-Pooling: (height, width) = (2, 2)
Dropout: prob. = 0.5
J
Convolution: (nfeat, nkern, height, width) = (256, 128, 2, 2)
Rectified Linear Unit (ReLU)
Max-Pooling: (height, width) = (2, 2)
Dropout: prob. = 0.5
J
Fully connected layer: 128 × 10
J
Cross-entropy error
Table 1: Convolutional Neural Network for CIFAR10. For convolutional layers nfeat denotes the
number of input feature maps and nkern denotes the number of kernels.
bounded age/staleness of updates) can be thought of SGD with some effective mini-batch size. This
effective mini-batch size could be dependent on the number of learners as well as the age/staleness
of updates.
5	Experiments
Experiment setup: We carry our experiments with CIFAR-10 dataset [cif (accessed January 11,
2016a)] which contains 50, 000 training samples and 10, 000 test samples, each associated with 1
out of 10 possible labels For the CIFAR-10 dataset, our aim is to predict the correct label the input
images. For our experiments, we train convolutional neural network shown in Table 1, which is
taken from [cif (accessed January 11, 2016b)]. It is a fairly standard convolutional network design
consisting of a series of convolutional layers interspersed by max-pooling layers. The convolutional
layers outputs are filtered with rectified linear unit before applying max-pooling. Additionally, it
also uses Dropout layers which act as regularization [Srivastava et al. (2014)]. At the end, it has a
fully connected layer with 10 outputs (equal to the number of labels). The number of parameters to
be learned for CIFAR-10 network is ≈ 0.5 million.
We use cross-entropy between the input labels and the predicted labels in the final output layer, i.e.,
F (x, z) (see Section 1 for the notation) is the cross-entropy error and f(x) is the average cross-
entropy error over all training samples. The implementation of neural network was done using
Torch. The target platform for our experiments is a Magma system with 16 GPUs connected to
an IBM Power8 host. In our ASGD Downpour implementation, the learners are run on the GPUs,
while the parameter server is run on the CPU.
We carried our experiments for 100 epochs, here by an epoch we mean a complete pass of the
training data. We chose the learning rate to be 0.01 as it was seen to be performing well at the end
6
Under review as a conference paper at ICLR 2017
Epochs
Figure 1: SGD experiments with CIFAR-10:
convergence becomes slower as mini-batch M
size increases.
Epochs
Figure 2: ASGD convergence for CIFAR-10:
convergence becomes slower as the number of
learners N increases.
of our experiments with respect to test accuracy (i.e., classification accuracy on the test data). For
ASGD part of experiments, we randomly partitioned the training data between all N learners in the
beginning of each epoch. At the end of each epoch we measured the test accuracy. See Figure 1
for the results of our SGD experiments. We can observe that as the mini-batch size increases, the
test error converges slower with respect to the number of epochs. See Figure 2 for the result of
our experiments with ASGD experiments. Again, we can observe that as the number of learners
increases, the convergence of test error becomes slower.
These observations agree with our justifications from Section 3 and 4. Moreover, they show that
there are similarities between the slow-down caused by increasing mini-batch size with SGD and
increasing the number of learners with ASGD. Thus, exploiting parallelism, either by increasing
mini-batch size or by increasing the number of learners introduces an inherent inefficiency in the
convergence behavior, even after disregarding other overheads such as communication time when
we increase the number of learners.
6	Conclusion and future directions
In this paper, we theoretically justified faster convergence (in terms of average gradient norm at-
tained after processing a fixed number of samples) of SGD with small mini-batches or that of ASGD
with smaller number of learners. This indicates that there is an inherent inefficiency in the speed-up
obtained with parallelizing gradient descent methods by taking advantage of hardware. It would be
interesting to see if such a conclusion holds for more advanced update methods than vanilla SGD,
for example methods using momentum and its variants.
7
Under review as a conference paper at ICLR 2017
References
Cifar10 dataset. https://www.cs.toronto.edu/~kriz/cifar.html, accessed January
11, 2016a.
Cifar10 model. https://github.com/eladhoffer/ConvNet-torch/blob/
master/Models/Model.lua, accessed January 11, 2016b.
Leon Bottou. Large-scale machine learning with stochastic gradient descent. In Proceedings of
COMPSTAT,2010, pp. 177-186. Springer, 2010.
Guillaume Bouchard, Theo Trouillon, Julien Perez, and Adrien Gaidon. Accelerating stochastic
gradient descent via online learning to sample. arXiv preprint arXiv:1506.09016, 2015.
Richard H Byrd, Gillian M Chin, Jorge Nocedal, and Yuchen Wu. Sample size selection in opti-
mization methods for machine learning. Mathematical programming, 134(1):127-155, 2012.
William Chan and Ian Lane. Distributed asynchronous optimization of convolutional neural net-
works. In INTERSPEECH, pp. 1073-1077, 2014.
Trishul Chilimbi, Yutaka Suzue, Johnson Apacible, and Karthik Kalyanaraman. Project adam:
Building an efficient and scalable deep learning training system. In 11th USENIX Symposium
on Operating Systems Design and Implementation (OSDI 14), pp. 571-582, 2014.
Soham De, Abhay Yadav, David Jacobs, and Tom Goldstein. Big batch sgd: Automated inference
using adaptive batch sizes. arXiv preprint arXiv:1610.05792, 2016.
Jeffrey Dean, Greg Corrado, Rajat Monga, Kai Chen, Matthieu Devin, Mark Mao, Andrew Senior,
Paul Tucker, Ke Yang, Quoc V Le, et al. Large scale distributed deep networks. In Advances in
neural information processing systems, pp. 1223-1231, 2012.
Ofer Dekel, Ran Gilad-Bachrach, Ohad Shamir, and Lin Xiao. Optimal distributed online prediction
using mini-batches. Journal of Machine Learning Research, 13(Jan):165-202, 2012.
Olivier Fercoq, Zheng Qu, Peter Richtarik, and Martin Takac. Fast distributed coordinate descent
for non-strongly convex losses. In 2014 IEEE International Workshop on Machine Learning for
Signal Processing (MLSP), pp. 1-6. IEEE, 2014.
Saeed Ghadimi and Guanghui Lan. Stochastic first-and zeroth-order methods for nonconvex stochas-
tic programming. SIAM Journal on Optimization, 23(4):2341-2368, 2013.
Cho-Jui Hsieh, Kai-Wei Chang, Chih-Jen Lin, S Sathiya Keerthi, and Sellamanickam Sundarara-
jan. A dual coordinate descent method for large-scale linear svm. In Proceedings of the 25th
international conference on Machine learning, pp. 408-415. ACM, 2008.
Martin Jaggi, Virginia Smith, Martin Takac, Jonathan Terhorst, Sanjay Krishnan, Thomas Hofmann,
and Michael I Jordan. Communication-efficient distributed dual coordinate ascent. In Advances
in Neural Information Processing Systems, pp. 3068-3076, 2014.
Rie Johnson and Tong Zhang. Accelerating stochastic gradient descent using predictive variance
reduction. In Advances in Neural Information Processing Systems, pp. 315-323, 2013.
Jakub Konecny, Zheng Qu, and Peter Richtarik. Semi-stochastic coordinate descent. arXiv preprint
arXiv:1412.6293, 2014.
Mu Li, David G Andersen, Jun Woo Park, Alexander J Smola, Amr Ahmed, Vanja Josifovski,
James Long, Eugene J Shekita, and Bor-Yiing Su. Scaling distributed machine learning with the
parameter server. In 11th USENIX Symposium on Operating Systems Design and Implementation
(OSDI 14), pp. 583-598, 2014a.
Mu Li, Tong Zhang, Yuqiang Chen, and Alexander J Smola. Efficient mini-batch training for
stochastic optimization. In Proceedings of the 20th ACM SIGKDD international conference on
Knowledge discovery and data mining, pp. 661-670. ACM, 2014b.
8
Under review as a conference paper at ICLR 2017
Xiangru Lian, Yijun Huang, Yuncheng Li, and Ji Liu. Asynchronous parallel stochastic gradient for
nonconvex optimization. In Advances in Neural Information Processing Systems, pp. 2737-2745,
2015.
Ji Liu and Stephen J Wright. Asynchronous stochastic coordinate descent: Parallelism and conver-
gence properties. SIAM Journal on Optimization, 25(1):351-376, 2015.
Ji Liu, Stephen J Wright, Christopher Re, Victor Bittorf, and Srikrishna Sridhar. An asynchronous
parallel stochastic coordinate descent algorithm. Journal of Machine Learning Research, 16(285-
322):1-5, 2015.
Qi Meng, Wei Chen, Jingcheng Yu, Taifeng Wang, Zhi-Ming Ma, and Tie-Yan Liu. Asynchronous
accelerated stochastic gradient descent. In Proceedings of the 25th international joint conference
on Artificial Intelligence, 2016.
Deanna Needell, Rachel Ward, and Nati Srebro. Stochastic gradient descent, weighted sampling,
and the randomized kaczmarz algorithm. In Advances in Neural Information Processing Systems,
pp. 1017-1025, 2014.
Arkadi Nemirovski, Anatoli Juditsky, Guanghui Lan, and Alexander Shapiro. Robust stochastic
approximation approach to stochastic programming. SIAM Journal on optimization, 19(4):1574-
1609, 2009.
Yu Nesterov. Efficiency of coordinate descent methods on huge-scale optimization problems. SIAM
Journal on Optimization, 22(2):341-362, 2012.
Yurii Nesterov. Introductory lectures on convex optimization: A basic course, volume 87. Springer
Science & Business Media, 2013.
Zheng Qu and Peter Richtarik. Coordinate descent with arbitrary sampling i: Algorithms and Com-
plexity. arXiv preprint arXiv:1412.8060, 2014.
Peter Richtarik and Martin Takac. Distributed coordinate descent method for learning with big data.
2013.
Peter Richtarik and Martin Takac. Iteration complexity of randomized block-coordinate descent
methods for minimizing a composite function. Mathematical Programming, 144(1-2):1-38, 2014.
Frank Seide, Hao Fu, Jasha Droppo, Gang Li, and Dong Yu. On parallelizability of stochastic
gradient descent for speech dnns. In 2014 IEEE International Conference on Acoustics, Speech
and Signal Processing (ICASSP), pp. 235-239. IEEE, 2014.
Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov.
Dropout: a simple way to prevent neural networks from overfitting. Journal of Machine Learning
Research, 15(1):1929-1958, 2014.
Conghui Tan, Shiqian Ma, Yu-Hong Dai, and Yuqiu Qian. Barzilai-borwein step size for stochastic
gradient descent. arXiv preprint arXiv:1605.04131, 2016.
D Randall Wilson and Tony R Martinez. The general inefficiency of batch training for gradient
descent learning. Neural Networks, 16(10):1429-1451, 2003.
Lin Xiao and Tong Zhang. A proximal stochastic gradient method with progressive variance reduc-
tion. SIAM Journal on Optimization, 24(4):2057-2075, 2014.
9
Under review as a conference paper at ICLR 2017
A Appendix
Lemma 1. With mini-batches of size M and a constant learning rate γ, after K iterations of SGD,
we have
PK= E(kVf(xk)k2) <	1	(Df. Lσ2γ2∖
K	≤ Y - LMY2 (S + 2 )
Proof. Using the property of Lipschitzian gradient, we get
f(xk+l)	≤ f (Xk) + hVf (xk),Xk+1 - Xk i + L ∣∣Xk+1 — Xk k2
2
f (Xk) — Yk ∙ (Vf(Xk), ^X G(Xk,zk)) + ɔ^2-
M
XG(Xk,zki)
i=1
(9)
Let us define δki = G(xk , zki ) - Vf(xk) and δk = PiM=1 δki . Using it, the above equation can be
rewritten as
f(Xk+ι)	— f(xk)	≤	—Yk	∙ hVf(Xk),δk + M ∙Vf(xk)i + YlLkδk	+ M ∙ Vf(Xk)k2
⇒ f(Xk+ι)	— f(xk)	≤	— Yk	∙ hVf(Xk),δki — MYk ∙ kVf (xk)k2
+y∣l (kδkk2 + 2Mhδk, Vf(xk)i + M2∣∣Vf(xk)k2)
Generating such inequalities over K mini-batches and adding them, we get
—Df ≤ f(XK+1) — f(X1)
K
≤ X QYk ∙ hVf(Xk),δki — MYkkVf(Xk)k2
k=1
+ y∣l (∖∖δkk2 + 2Mhδk,Vf(Xk)i + M2kVf(Xk
Simple rearrangement of terms gives us
X (MYk - YkLM2) ∙∖Vf(Xk)k2
k=1	2
≤ Df + X (—Yk ∙ hVf (Xk), δki + ɪ- (kδk∣∣2 + 2M ∙ hδk, Vf(Xk)i))	(IO)
Now we observe that E(∖δk∣∣2) = E(IlPMI δ*∣∣2) ≤ M ∙ PM=I E(∣Mk∣∣2) ≤ Mσ2, using As-
sumption A.2. From the assumption of the stochastic gradient being unbiased estimator of the
true gradient (Assumption A.1), we also know that E(hδk, Vf (Xk)i) = PM=1 E(δki, Vf(Xk)) =
PiM=1 E(δki), Vf (Xk)
0. Taking the expectation of both sides in Equation 10 with respect to
randomly selected samples and using these observations we get the following equation:
X (MYk- Lφ2) ∙ E(kVf (Xk)k2)	≤ Df + LM2 X Yk
k=1	2	2 k=1
The above equation is equivalent to Equation 2.11 from Ghadimi & Lan (2013) modified to allow
arbitrary mini-batch sizes. Restricting ourselves to allow constant learning rate and after simplifying
the above equation, we get
PkK=1 E(∣Vf(Xk)∣2)
/	1
≤	LMγ2
Y-----7Γ~
(11)
K
□
10
Under review as a conference paper at ICLR 2017
Theorem 2. Let α := JS^. Let 4Mι ≤ α ≤ Mh/4. Then the convergence guarantee for SGD
for mini-batch size Mh after processing S training samples can be worse than the convergence
guaranteefor mini-batch size Ml by afactor of 2Mh∕(α√2 + Ml).
Proof outline. For a fixed number S of training samples to be processed, we now minimize the
right hand side of Equation 2 to find the best convergence guarantee supported by Lemma 1. Let
Y = C ∙，Df/(SLσ2), where C is a scalar multiplier. Substituting it in Equation 2 and after some
algebraic manipulations, we get
PK=IE(kVf(Xk )k2) / C 1 + c∖	IDf Lσ2
κ ≤ L) 1 ɪ
(12)
By applying simple calculus, it can be shown that the value C of C which minimizes right hand side
of the above equation is given by
(13)
•	Consider the case of M = Ml ≤ α∕4. Denote C by c^ for this case. With M = Ml ≤ α∕4,
we have，1 + 2α2∕Ml2 ≈ √2α∕Ml. Thus we get c： ≈ √2 - Ml ∕α. Further, we can write
the following using Ml is little compared to α and other simple known approximations:
1
1	MMl
1
C
空
2
______1_____≈	≈ 1 + M
1 - (√2 - M) M 1 - √α	+ √2α
√⅛ = √2 • 1⅛ ≈√2 ^ (1 + √
1	Ml
-—―---
√2	2α
(14)
≈√2 + M(15)
16)
Using Equation 14, 15, 16, we get that the coefficient of y/Df Lσ2∕S from Equation 12
evaluates to approximately √2 + Ml∕α.
•	Consider Mh ≥ 4α. Denote c： by Ch for this case. With M = Ml ≤ α∕4, we have
，1 + 2α2∕Mh ≈ 1+α2∕Mh, using the approximation √1 + E ≈ 1+e∕2 for small U Thus
Ch ≈ a∕Mh. Since α is much smaller than Mh, we can approximate 1∕ch+ch∕2 ≈ 1∕ch ≈
Mh∕a and we also have 1 - ChM∕(2a) = 1∕2. Thus the coefficient of PDf Lσ2∕S from
Equation 12 evaluates to approximately 2Mh∕α.
Combining the above observations, we get that the convergence guarantees for Ml and Mh can differ
by a factor of 2Mh,∕(α√2 + Ml) after processing S training samples.	□
Theorem 4. Let N > 1 be the number of learners and let α

Kσ2
MLDf
≤ N, then the optimal
ASGD convergence rate guarantee for 1 learner and N learners can differ by a factor of approxi-
mately N.
Proof. We have Y = C ∙，Df '(MKLσ2) = OML from the definition of a. Substituting this in
Equation 7, we get
PkK=1E(kVf(xk)k2)
K
≤	~~∕⅛T^ + σ2L • C • ʌ/ MKLσ2
MKC • √MK⅛2
+ 2σ2L2MΝ • -C- • C • ʌL,Df 9
aML V MKLσ2
=(2 + C+丝c2 ] .∖f2
Ic + + a V MK
(17)
11
Under review as a conference paper at ICLR 2017
From the definition of α, we have K = α2MLDf /σ2 . Using it in the above equation, we get
PK=ιE(Nf(xk )k2) ≤ 〃 2+ . 2Nc2 ∖11 ∙ σ2
K	- 1(c	a J aʃ M
(18)
Similarly, given Y = C ∙
J	Df
M MKLσ2
OMML, the condition in Equation 8 can also be expressed as:
c 2N2 c2	2 2	2
-I-------- ≤ 1 ⇒ 2N2c2 + αc - α ≤ 0
α	α2
Since learning rate (and hence c) is always positive, the above equation gives us
α
0 ≤ C ≤ 4N • (-1 + √1 + 8N2)
Thus finding the optimal learning rate (within the regime of Equation 7 and 8) is equivalent to
solving the following:
minimize (2+ C +空)• 1 ∙ σ2
C	α αM
α
s.t. 0 ≤ C ≤ E ∙ (-1 + √1 + 8N2)
4N2
(19)
(20)
Now, by means of solving the above optimization, we will investigate how much the convergence
guarantee can differ as the number of learners increase. In particular, we will look at the difference
in the guarantee for 1 learner and N0 learners where N0 ≥ 16. Taking the derivative of Equation 19
with respect to C and setting it to 0, we get the following:
4NC3 + αC2 - 2α = 0	(21)
Let c； and CN0 denote the solutions to the above equation for 1 and N0 learners respectively. Notice
that for N = 1 and for α ≥ 16, the square term dominates in Equation 21 and c； ≈ √2 (which also
satisfies the constraint in Equation 20). Thus we get
For N = 1:
PK=I E(kVf(χk)k2) . 2√2 ∙ W
K	αM
(22)
However, for N = N0 and 16 ≤ α ≤ N0, the cubic term dominates in Equation 21. Thus the
value of C which satisfies Equation 21 is approximately 弋α∕(2N0). However, the upper bound in
Equation 20 for large N0 becomes C . α∕(√2N0). For the range of α under consideration, this
is smaller than Pα∕(2N0), thus we get CNo = α∕(√2N0). Thus for 16 ≤ α ≤ N0, Equation 18
becomes
For N = N0
PK=IE(kVf(xk)k2) . 2√2N0 σ2
K	. α αM
(23)
Thus comparing Equation 22 and 23, we see that the ASGD convergence guarantee for N = 1 and
N = N0 learners can differ by a factor of N for 16 ≤ α ≤ N0.	□
12