Under review as a conference paper at ICLR 2017
Alternating Direction Method of Multipliers
for Sparse Convolutional Neural Networks
Farkhondeh Kiaee, Christian Gagne, and Mahdieh Abbasi
Computer Vision and Systems Laboratory
Department of Electrical Engineering and Computer Engineering
Universite Laval, Quebec, QC G1V 0A6, Canada
{farkhondeh.kiaee.1,mahdieh.abbasi.1}@ulaval.ca
christian.gagne@gel.ulaval.ca
Ab stract
The storage and computation requirements of Convolutional Neural Networks
(CNNs) can be prohibitive for exploiting these models over low-power or em-
bedded devices. This paper reduces the computational complexity of the CNNs by
minimizing an objective function, including the recognition loss that is augmented
with a sparsity-promoting penalty term. The sparsity structure of the network is
identified using the Alternating Direction Method of Multipliers (ADMM), which
is widely used in large optimization problems. This method alternates between
promoting the sparsity of the network and optimizing the recognition perfor-
mance, which allows us to exploit the two-part structure of the corresponding
objective functions. In particular, we take advantage of the separability of the
sparsity-inducing penalty functions to decompose the minimization problem into
sub-problems that can be solved sequentially. Applying our method to a variety
of state-of-the-art CNN models, our proposed method is able to simplify the orig-
inal model, generating models with less computation and fewer parameters, while
maintaining and often improving generalization performance. Accomplishments
on a variety of models strongly verify that our proposed ADMM-based method
can be a very useful tool for simplifying and improving deep CNNs.
1	Introduction
Deep Convolutional Neural Networks (CNNs) have achieved remarkable performance in challeng-
ing computer vision problems such as image classification and object detection tasks, at the cost of
a large number of parameters and computational complexity. These costs can be problematic for
deployment especially on mobile devices and when real-time operation is needed.
To improve the efficiency of CNNs, several attempts have been made to reduce the redundancy
in the network. Jaderberg et al. (2014) proposed to represent the full-rank original convolutional
filters tensor by a low-rank approximation composed of a sequence of two regular convolutional
layers, with rectangular filters in the spatial domain. A different network connection structure is
suggested by Ioannou et al. (2015), which implicitly learns linear combinations of rectangular filters
in the spatial domain, with different vertical/horizontal orientations. Tai et al. (2015) presented an
exact and closed-form solution to the low-rank decomposition approach of Jaderberg et al. (2014)
to enforce connection sparsity on CNNs.
Sparse learning has been shown to be efficient at pruning the irrelevant parameters in many practical
applications, by incorporating sparsity-promoting penalty functions into the original problem, where
the added sparsity-promoting terms penalize the number of parameters (Kiaee et al. (2016a;b;c)).
Motivated by learning efficient architectures of a deep CNN for embedded implementations, our
work focuses on the design of a sparse network using an initial pre-trained dense CNN.
The alternating direction method of multipliers (ADMM) (Boyd et al. (2011)) has been extensively
studied to minimize the augmented Lagrangian function for optimization problems, by breaking
them into smaller pieces. It turns out that ADMM has been recently applied in a variety of contexts
(Lin et al. (2013a); Shen et al. (2012); Meshi & Globerson (2011)). We demonstrate that the ADMM
1
Under review as a conference paper at ICLR 2017
convolution layer
Inputs
LOWer LayerS
l
ml Input
feature map
Middle Layers
nl output
feature map
fully connected layer
One vectorized/
input feature mp
ml=1	/
Fully connected ∖	____
weights
output feature maj
Sparsity
Blocks
Wlij
Higher Layers
vector of length
p
n
Figure 1: Architecture of a typical CNN, selected sparsity blocks at convolutional and fully con-
nected layers are shown in blue.
provides an effective tool for optimal sparsity imposing on deep neural connections. This is achieved
by augmenting a sparsity-inducing penalty term to the recognition loss of a pre-trained network.
Different functions including the l0-norm and its convex l1-norm relaxations can be considered as
a penalty term. The variables are then partitioned into two subsets, playing two different roles: 1)
promoting the sparsity of the network at the level of a predetermined sparse block structure; 2)
minimizing the recognition error.
The augmented Lagrangian function is then minimized with respect to each subset by fixing all other
subsets at each iteration. In the absence of the penalty term, the performance results correspond to
the original network with a dense structure. By gradually increasing the regularization factor of
the sparsity-promoting penalty term, the optimal parameters move from their initial setting to the
sparse structure of interest. This regularization factor is increased until the desired balance between
performance and sparsity is achieved.
Several approaches have been developed to create sparse networks by applying pruning or sparsity
regularizers: Wen et al. (2016); Alvarez & Salzmann (2016); Liu et al. (2015); Han et al. (2015). The
most relevant to our work in these papers is the Structured Sparsity Learning (SSL) method of Wen
et al. (2016), that regularizes the structures (i.e., filters, channels, filter shapes, and layer depth) of
CNNs using a group lasso penalty function. However, the SSL approach suffers from two limitations
compared to our proposed method. First, it relies on a rigid framework that disallows incorporation
of non-differentiable penalty functions (e.g., l0-norm). Second, it requires training the original full
model, while our proposed method allows to decompose the corresponding optimization problems
into two sub-problems and exploit the separability of the sparsity-promoting penalty functions to
find an analytical solution for one of the sub-problems (see Sec. 5 for more details).
Our numerical experiments on three benchmark datasets, namely CIFAR-10, CIFAR-100, and
SVHN, show that the structure of the baseline networks can be significantly sparsified. While most
previous efforts report a small drop or no change in performance, we found a slight increase of
classification accuracy in some cases.
2	CNN with Sparse Filters
Consider a CNN network consisting of a total of L layers, including convolutional and fully con-
nected layers, which are typically interlaced with rectified linear units and pooling (see Fig. 1). Let
the l-th layer includes ml input feature maps and nl output feature maps, with Wlij representing the
convolution filter between the i-th and j-th input and output feature maps, respectively1. Our goal
1Each fully connected layer can also be thought to be composed of several 1-dim convolutions, where the
filter is of the same size as the input, hence is applied only at one location. In this context, if you look at the
2
Under review as a conference paper at ICLR 2017
is to design the optimal filters, subject to sparse structural constraints. In order to obtain the filters
which balance a trade-off between the minimization of the loss function and sparseness, we consider
the following objective function
minimize Lnet(W) + μf(W),
W
(1)
where Lnet stands for the logistic loss function of the output layer of the network which is a function
of the convolutional filters of all layers W = {W lij |i = 1, . . . , ml, j = 1, . . . , nl, l = 1, . . . , L}.
The term f(W) is a penalty function on the total size of the filters. The l0-norm (cardinality)
function or relaxations to higher orders such as l1 -norm function can be employed to promote the
sparsity of the filters.
The parameter μ controls the effect of sparse penalty term. As μ varies, the solution of (1) traces the
trade-off path between the performance and the sparsity. In the next section, the alternating direction
method of multipliers (ADMM) which is employed to find the optimal solution of (1) is described.
3	Using ADMM for Sparsifying CNNs
Consider the following constrained optimization problem:
minimize Lnet(W) + μf(F),
s.t. W - F = 0,	(2)
which is clearly equivalent to the problem stated in (1). The key point here is that by introducing
an additional variable F and an additional constraint W - F = 0, the objective function of the
problem (1) is decoupled into two parts that depend on two different variables.
The augmented Lagrangian associated with the constrained problem (2) is given by
C(W ,F,Γ) = Lnet(W)+ μf(F)
+ Xtrace(Γjτ(Wij- Fj)) + P X k Wij- Fj kF,	⑶
l,i,	j	l,i,j
where Γlij is the dual variable (i.e., the Lagrange multiplier), ρ is a positive scalar, k . kF and is the
Frobenius norm.
In order to find a minimizer of the constrained problem (3), the ADMM algorithm uses a sequence
of iterative computations:
1.	Make use of a descent method to solve the following performance promoting problem,
W {k+1} = arg min C W, F {k}, Γ{k} ;	(4)
2.	Find the analytical expressions for the solutions of the following sparsity promoting prob-
lem,
F {k+1} = arg min C W {k+1}, F, Γ{k} ;	(5)
3.	Update the dual variable Γlij using a step-size equal to ρ, in order to guarantee that the dual
feasibility conditions is satisfied in each ADMM iteration,
Γlij{k+1}=Γlij{k}+ρWlij{k+1}-Flij{k+1}.	(6)
The three described computation steps are applied in an alternating manner. Re-estimation stops
when the Frobenius distance of F in two consecutive iterations as well as the Frobenius distance of
W and F at current iterations are less than a small threshold value. The details of steps 1 and 2 are
described in the next sections. The outline of the proposed sparse CNN approach is summarized in
Algorithm 1. At each individual regularization μ, in order to improve the performance of the sparse-
structured network we fine tune the initial non-augmented recognition loss subject to the parameters
belonging to the identified sparse structure.
fully connected layer at Fig. 1, you can see that it is just composed of one (ml = 1) vectorized input feature
map and nl 1-dim convolutions, one for each output class.
3
Under review as a conference paper at ICLR 2017
Algorithm 1 Outline of the proposed sparse CNN algorithm
1:	function SPARSE-CNN(data, model)
2:	Set W to a pre-trained reference CNN model
3:	Γ = 0, F = W
4:	S : a set of small logarithmically spaced points in increasing order, as regularization factor.
5:	for each μ in S do
6:	do
7:	Find the estimate of W {k+1} by minimizing (7)
8:	Find the estimate of F {k+1} from (9) or (10)
9:	Update dual variable Γ{k+1} from (6)
10:	while k W{k+1} - F {k+1} kF> or k F {k+1} - F{k} kF>
11:	Fix the identified sparse structure and fine-tune network according to Lnet w.r.t. non-
zero parameters
12:	end for
13:	return W lij
14:	end function
3.1	Performance Promoting Step
By completing the squares with respect to W in the augmented Lagrangian C(W, F, Γ), we obtain
the following equivalent problem to (4)
minimize Lnet(W) + P X k Wij- Uj kF,	⑺
W2
where UIij = FIij - P Γj. From (7), it can be seen that by exploiting the separability property of
ADMM method in the minimization of the augmented Lagrangian, the sparsity penalty term which
might be non-differentiable is excluded from (7). Consequently, descent algorithms that rely on the
differentiability can be utilized to solve the performance promoting sub-problem (7)
This property allows that popular software and toolkit resources for Deep Learning, including Caffe,
Theano, Torch, and TensorFlow, to be employed for implementing the proposed approach. In our
work, we use Stochastic Gradient Descent (SGD) method of TensorFlow to optimize the weights
(W), which seemed a reasonable choice for the high-dimensional optimization problem at hand.
The entire procedure relies mainly on the standard forward-backward pass that is used to train the
convolutional network.
3.2	Sparsity Promoting Step
The completion of squares with respect to F in the augmented Lagrangian can be used to show that
(5) is equivalent to
minFmize μf(F) + ρ Xk F Iij- VijkF,	⑻
l,i,j
where Vlij = Wlij + 1 Γj. From (8), it can be seen that the proposed method provides a flexible
framework to select arbitrary sparsity blocks. Sparse structure can then be achieved at the level of
the selected block. Specifically, both terms on the right-hand side of (8), f(F) (for either the case of
l1-norm or l0-norm) as well as the square of the Frobenius norm can be written as a summation of
component-wise functions ofa tensor. In our experiments, individual filter components are selected
as the sparsity blocks (see Fig. 1). Hence (8) can simply be expressed in terms of Flij components
corresponding to the filters. However, any other individual sub-tensor components can be selected
as the sparsity block.
More precisely, if f (F) is selected to be the lι-norm function, then C(F) = Pl 分 j∙(μ k Flij kF
+P k FIij- Vij kF)and consequently (8) is converted to a minimization problem that only
involves spatial filters. The solution of (8) can then be determined analytically by the following soft
4
Under review as a conference paper at ICLR 2017
thresholding operation,
FIij* = I (1 - kVjF) Vij,
if k Vlij kF>a
otherwise
(9)
where a = P. Similarly, the following hard thresholding operation is the analytical solution for the
case of the selection of the l0-norm f (F) penalty term.
Fl * =	Vlij,	if k Vlij kF>b
ij	0,	otherwise
(10)
where b
2μ
3.3	Convergence of the Proposed ADMM-based S parse CNN Method
For convex problems, the ADMM is guaranteed to converge to the global optimum solution (Boyd
et al. (2011)). For non-convex problems, where there is a general lack of theoretical proof, extensive
computational experience suggests that ADMM works well when the penalty parameter ρ in the
augmented Lagrangian is chosen to be sufficiently large. This is related to the quadratic term that
tends to locally convexify the objective function for sufficiently large ρ.
Unfortunately, in the deep learning problems, the objective is inherently highly non-convex and
consequently there is the risk that it becomes trapped into a local optimum. This difficulty could be
circumvented by considering a warm start that may be obtained by running a pre-trained version of
the network. The proposed ADMM approach is then used to sparsify the final solution. Using this
procedure, as the experiments in the next section show, we have obtained good empirical results.
4 Experimental Results
In order to validate our approach, we show that our proposed sparse CNN approach can be efficiently
applied to existing state-of-the-art network architectures to reduce the computational complexity
without reducing the accuracy performance. For this purpose, we evaluate the proposed scheme on
the CIFAR-10, CIFAR-100, and SVHN datasets with several CNN models.
In the implementation of the performance promoting step in Sec. 3.1, the batch size is 128 and the
learning rate is set to a rather small value (i.e., 0.001 to search the space around the dense initialized
filters to find a sparse solution). Since the regularization factor μ is selected from gradually increas-
ing values, for the first small values of μ the selection of long epochs for performance-promoting
step (inner loop) and fine-tuning steps is computationally prohibitive and would result in over-fitting.
Instead, We start with one epoch for the first μ and increase the number of epochs by δ for the next
μ values up to the V-th μ value, after which the number of epochs is limited to δν. We found that
δ = 1 and ν = 15 generally work well in our experiments. We already incorporated the number of
training epochs at tables 3, 4, and 5 of Appendix B. If the maximum limiting number of iterations
of inner loop is ξ (suggested value of ξ=10), the training time of the ν-th μ value takes a total of
δνξ + δν epochs (δνξ for performance-promoting step and δν for fine-tuning) under the worst-case
assumption, where the inner loop has not converged and completes only at the ξ-th iteration.
4.1	Results on CIFAR-10 Object Classification
The CIFAR-10 dataset is a well-known small dataset of 60,000 32 x 32 images in 10 classes. This
dataset comprises standard sets of 50,000 training images, and 10,000 test images. As a baseline
for the CIFAR-10 dataset, we deploy four models: the Network in Network (NIN) architecture
(Lin et al., 2013b), its low-rank version (Ioannou et al., 2015), a custom CNN, and its low-rank
counterpart as well, two last being learned from scratch on the CIFAR dataset. The configurations of
the baseline models are outlined in Table 1. The architecture of the NIN model is slightly different
from the one introduced in Lin et al. (2013b). The original NIN uses 5x5 filters in the first and
second convolutional layer which are replaced with one and two layers of 3x3 filters, respectively.
As suggested by Ioannou et al. (2015), this modified architecture has comparable accuracy and less
5
Under review as a conference paper at ICLR 2017
Table 1: Structure of the baseline networks.
	NIN	Low-rank NIN	
conv1	3 X 3 X 192	h: 1 x 3 x 96 v: 3 x 1 x 96	
conv2,3	1 x 1 x 160, 1 x 1 x 96		
conv4	3 x 3 x 192	h V	1 x 3 x 96 3 x 1 x 96
conv5	3 X 3 X 192	T V	1 X 3 X 96 3 x 1 x 96
conv6,7	1 X 1 X 192, 1 X 1 X 192		
conv8	3 x 3 x 192	h: 1 x 3 x 96 v: 3 x 1 x 96	
conv9,10	1 X 1 X 192, 1 X 1 X 10		
	CNN	Low-rank CNN
conv1	3 x 3 x 96	h: 1 X 3 X 48 v: 3 x 1 x 46
conv2	3 x 3 x 128	h: 1 X 3 X 64 v: 3 x 1 x 64
conv3	3 x 3 x 256	h: 1 X 3 X 128 v: 3 x 1 x 128
conv4	3 x 3 x 64	h: 1 X 3 X 32 v: 3 x 1 x 32
fc1	1024 X 256	-1024 X 256-
fc2	256 X 10 —	256 X 10
computational complexity. In the low-rank networks, every single convolutional layer of the full-
rank model is replaced with two convolutional layers with horizontal and vertical filters. NIN and
low-rank NIN have an accuracy of 90.71 % and 90.07 %, respectively. The custom CNN and its
low-rank variant show a baseline accuracy of 80.0 % and 80.2%, respectively. The results of our
experiments are plotted in Fig. 2 for both l0-norm and l1-norm sparsity constraints.
Fig. 2 shows how the accuracy performance changes as We increase the regularization factor μ.
The case with μ = 0 can be considered as the baseline model. In order to avoid over pruning
of some layers, if the number of pruned filters in one layer exceeds 50 % of the total number of
filters in that layer, then we change the pruning threshold to the statistical mean of the Frobenius
norm of all the filters at that layer in the sparsity promoting step (explained in Sec. 3.2) to stop
the over pruning of that layer. Taking the NIN and low-rank-NIN as an example, using the l0-norm
sparsity function, the parameters in the networks are reduced by 34.13 % and 28.5 % and the relative
accuracy performance is +.5 % and +1.23 %, respectively. Using the l1-norm sparsity constraint
achieves slightly lower accuracy compared to the l0-norm, although it still conveniently sparsifies
the network.
Using the proposed sparsity promoting approach on the custom CNN models, the networks with
sparse connections and similar accuracy (79.9% vs 80 %) are achieved, but they have approximately
49.4 % fewer parameters than the original networks model. Since the target solution is likely to
be sparse, enforcing sparsity at the beginning of the learning process with our proposed method
provides a way to avoid overfitting for achieving a better performance. However, as the experiment
results show, increasing more the sparsity strength of the solution may lead to slight oversmoothing
and drop in the performance. For the low-rank CNN, we achieve a comparable accuracy of 80.14 %,
with 25 % fewer parameters.
To further verify that the advantage of ADMM training is statistically significant, a t-test is con-
ducted by repeating the experiment 15 times on CIFAR-10 by using NIN model. The t-test results
are in Appendix A. In Appendix B, however, we present detailed results for random sample runs
over the configurations tested. According to the results presenting in Table 3 of Appendix B, the
number of parameters in the network can be reduced by a large factor, especially for the higher
convolution layers. Interestingly, even with significant reductions in the number of parameters, the
performance does not decrease that much. This parameter reduction also gives rise to the speed-up
of the network, reported at the last columns of the tables. Note that most of the results listed in
Table 3 outperform the baseline model.
4.2	Results on CIFAR- 1 00 Object Classification
The CIFAR-100 dataset is similar to the CIFAR-10 dataset containing 100 classes with 600 images
per class. For CIFAR-100 we again use the baseline networks in Table 1 with only one structural
difference (i.e., the NIN networks contain 100 feature maps at the last convolution layer and custom
CNN networks contain 100 output labels). The baseline NIN, low-rank NIN, custom CNN, and
low-rank CNN models show a test accuracy of 63.3 %, 63.6 %, 60.11 %, and 60.23 %, respectively.
6
Under review as a conference paper at ICLR 2017
9
..0
00
01RAFIC
mu parameter
0.82
2 19
.9 .9 0.
00
0
20
0.81
0.8,
0
20
0
20
40
40
0
50
100
40
Normalized number of zero elements (%)
00≡<H=o
ycaruccA
N__o_rm__a_liz_e_d__n_u_m_b_e_r_o_f_z_e_r_o_e_l_e_m_e_n_t_s_(_%_)_
0	0.5	1
zτ>ω
1	0	0.5	1	0	0.5	1
mu parameter
876
.9 .9 .9
000
5
0
0	20	40
0	20	40	0	50	0	20	40
Normalized number of zero elements (%)
—ι— l1-norm - 一。一 ■ l0-norm
Figure 2: Variation of accuracy measure against: (odd rows) values of μo parameters and (even
rows) normalized number of zero elements for different models and datasets.
Using the proposed sparsity promoting approach on these networks, the total number of parameters
in the layers can be reduced by a large factor with comparable or even better performance accuracy.
In particular, on the CIFAR-100 dataset, we achieve 64.09 % classification accuracy with 34.1 %
sparsity for the NIN model, which improves upon the original NIN on this dataset. A test accuracy
of 65.23 % is obtained for CIFAR-100 for the low-rank NIN model with 28.5 % sparsity which
7
Under review as a conference paper at ICLR 2017
surpasses the performance of the baseline model. The proposed method on custom CNN and low-
rank CNN show comparable performance accuracy to their corresponding baseline models (59.82 %
vs 60.11 % and 60.1 % vs 60.23 %) with much less computation (49.7 % and 24.4 % number of zero
elements, respectively). The details of changing sparsity in different layers of the networks on the
CIFAR-100 dataset are presented in Table 4 of Appendix B. The same conclusions made for CIFAR-
10 can be drawn from these results.
4.3 Results on SVHN Object Classification
The SVHN dataset consists of 630,420 32x32 color images of house numbers collected by Google
Street View. The task of this dataset is to classify the digit located at the center of each image. The
structure of the baseline models used in SVHN is similar to those used for CIFAR-10, which are
presented in Table 1. The training and testing procedure of the baseline models follows Lin et al.
(2013b). The baseline NIN, low-rank NIN, custom CNN, and low-rank CNN models show the accu-
racy of 96.2 %, 96.7 %, 85.1 %, and 87.6 %, respectively. For this dataset, by applying our proposed
sparse approach to NIN and low-rank NIN models, we obtain a higher accuracy of 96.97 % and 99 %
with 34.17 % and 28.6 % fewer parameters, respectively. We also achieve comparable accuracy of
83.3 % and 86.3 % using 49.7 % and 24.7 % less parameters of the original model parameters on
custom CNN and low-rank CNN models, respectively (see Table 5 of Appendix B for the details on
changing the sparsity in different layers of the networks on SVHN dataset).
5 Discussion
In this paper we proposed a framework to optimal sparsification of a pre-trained CNN approach. We
employed the ADMM algorithm to solve the optimal sparsity-promoting problem, whose solution
gradually moves from the original dense network to the sparse structure of interest as our emphasis
on the sparsity-promoting penalty term is increased. The proposed method could potentially reduce
the memory and computational complexity of the CNNs significantly.
Briefly, the main contributions of the proposed sparse CNN can be summarized as follows:
Separability : The penalty function is separable with respect to the individual elements of the
weight tensors. In contrast, the recognition loss function cannot be decomposed into
component-wise functions of the weight tensors. By separating the two parts in the min-
imization of the augmented Lagrangian, we can analytically determine the solution to the
sparsity promoting sub-problem (8).
Differentiability : The recognition loss function Lnet(W) is typically differentiable with respect
to the parameters, as opposed to some choices of sparsity penalty terms (e.g., l0-norm
which is a non-differentiable function). In our approach, by separating the two parts in
the minimization of the augmented Lagrangian, descent algorithms can be utilized to solve
the performance promoting sub-problem (7) while different functions (e.g., l0-norm and
l1-norm) can be incorporated as means of sparsity penalty terms in the original problem
(1).
Model size reduction : There are recent works focusing on reducing the parameters in the convo-
lutional layers (Jaderberg et al. (2014); Ioannou et al. (2015); Tai et al. (2015)). In CNN
models, the model size is dominated by the fully connected layers. Thus, the previous ap-
proaches are not capable of reducing the size of the whole model. Our proposed approach
can be applied on both the convolution and fully connected layers and can speed up the
computation as well as compressing the size of the model.
Combinability with other methods : Several attempts have been made to compress the deep net-
works using the weights sharing and quantization (Han et al. (2016); Gupta et al. (2015);
Vanhoucke et al. (2011)). However, these techniques can be used in conjunction with our
proposed sparse method to achieve further speedup.
Some methods such as SSL (Wen et al. (2016)), based on group Lasso regularization of the block
structures (e.g. filters), appears to be closely related to our work. Indeed, these methods learn sparse
filters and minimize the classification error simultaneously. In contrast, our proposed approach
uses ADMM to provide a separate scheme that optimize the sparse blocks and classification error
8
Under review as a conference paper at ICLR 2017
separately. Indeed, at the core of our contribution, ADMM brings the above major separability
and differentiability benefits to the proposed sparse CNN method. Our proposed algorithm has
the advantage that it is partially and analytically solvable due to the separability property. This
contributes to the efficient trainability of the model. Moreover, the differentiability problem of l0 -
norm penalty function makes it unusable for a joint performance/sparsity optimization, while it can
be conveniently incorporated as a sparsity penalty term in our proposed method.
Furthermore, in the SSL method, strengths of structured sparsity regularization is selected by cross
validation and the networks weights are initialized by the baseline. This is computationally ben-
eficial for small regularization level. However, for larger regularization value, the presented SSL
approach requires training the original full model from scratch. In contrast, our approach gradually
modifies the regularization factor and each step continues training from the solution achieved in the
previous step (corresponding to the previous regularization factor), which plays an important role in
reducing the computational complexity of the method.
Acknowledgments
The authors gratefully acknowledge financial support by NSERC-Canada, MITACS, and E Ma-
chine Learning Inc., a GPU grant from NVidia, and access to the computational resources of Calcul
Quebec and Compute Canada. The authors are also grateful to Annette SchWerdtfeger for Proof-
reading this manuscript.
References
Jose M Alvarez and Mathieu Salzmann. Learning the number of neurons in deep netWorks. In
Advances in Neural Information Processing Systems, pp. 2262-2270, 2016.
Stephen Boyd, Neal Parikh, Eric Chu, Borja Peleato, and Jonathan Eckstein. Distributed optimiza-
tion and statistical learning via the alternating direction method of multipliers. Foundations and
TrendsR in Machine Learning, 3(1):1-122, 2011.
Suyog Gupta, Ankur AgraWal, Kailash Gopalakrishnan, and Pritish Narayanan. Deep learning With
limited numerical precision. In Proceedings of the 32nd International Conference on Machine
Learning (ICML-15), pp. 1737-1746, 2015.
Song Han, Jeff Pool, John Tran, and William Dally. Learning both Weights and connections for
efficient neural netWork. In Advances in Neural Information Processing Systems, pp. 1135-1143,
2015.
Song Han, Huizi Mao, and William J Dally. Deep compression: Compressing deep neural netWork
With pruning, trained quantization and Huffman coding. International Conference on Learning
Representations, 2016.
Yani Ioannou, Duncan Robertson, Jamie Shotton, Roberto Cipolla, and Antonio Criminisi. Train-
ing CNNs With loW-rank filters for efficient image classification. International Conference on
Learning Representations, 2015.
Max Jaderberg, Andrea Vedaldi, and AndreW Zisserman. Speeding up convolutional neural netWorks
With loW rank expansions. In Proceedings of the British Machine Vision Conference (BMVC),
2014.
Farkhondeh Kiaee, Christian Gagne, and Hamid Sheikhzadeh. A double-layer ELM with added
feature selection ability using a sparse bayesian approach. Neurocomputing, 216:371 - 380,
2016a.
Farkhondeh Kiaee, Hamid Sheikhzadeh, and Samaneh Eftekhari Mahabadi. Relevance vector ma-
chine for survival analysis. IEEE Trans. on Neural Networks and Learning Systems, 27(3):648-
660, 2016b.
Farkhondeh Kiaee, Hamid Sheikhzadeh, and Samaneh Eftekhari Mahabadi. Sparse bayesian mixed-
effects extreme learning machine, an approach for unobserved clustered heterogeneity. Neuro-
computing, 175:411-420, 2016c.
9
Under review as a conference paper at ICLR 2017
FU Lin, Makan Fardad, and Mihailo R Jovanovic. Design of optimal sparse feedback gains via
the alternating direction method of multipliers. IEEE Transactions on Automatic Control, 58(9):
2426-2431, 2013a.
Min Lin, Qiang Chen, and ShUicheng Yan. Network in network. arXiv preprint arXiv:1312.4400,
2013b.
BaoyUan LiU, Min Wang, Hassan Foroosh, Marshall Tappen, and Marianna Pensky. Sparse convolU-
tional neUral networks. In Proceedings of the IEEE Conference on Computer Vision and Pattern
Recognition, pp. 806-814, 2015.
Ofer Meshi and Amir Globerson. An alternating direction method for dUal map LP relaxation. In
Joint European Conference on Machine Learning and Knowledge Discovery in Databases, pp.
470-483. Springer, 2011.
Chao Shen, TsUng-HUi Chang, KUn-YU Wang, Zhengding QiU, and Chong-YUng Chi. DistribUted ro-
bUst mUlticell coordinated beamforming with imperfect CSI: An ADMM approach. IEEE Trans-
actions on signal processing, 60(6):2988-3003, 2012.
Cheng Tai, Tong Xiao, Xiaogang Wang, et al. ConvolUtional neUral networks with low-rank regU-
larization. arXiv preprint arXiv:1511.06067, 2015.
Vincent VanhoUcke, Andrew Senior, and Mark Z Mao. Improving the speed of neUral networks on
CPUs. In Deep Learning and Unsupervised Feature Learning Workshop, NIPS2011, 2011.
Wei Wen, ChUnpeng WU, Yandan Wang, Yiran Chen, and Hai Li. Learning strUctUred sparsity in
deep neUral networks. In Advances In Neural Information Processing Systems, pp. 2074-2082,
2016.
Appendix A	S ignificance Validation of Improvements
On order to verify that the advantage of ADMM training is statistically significant, we condUct t-test
by repeating the experiment 15 times on CIFAR-10 Using NIN to compare the error rate of ADMM
training and standard fine-tUning (by dropping the learning rate Upon “convergence” and continUing
to learn), with the same nUmber of epochs and learning rates. Initialized from the same baseline
model with 90.71 % accUracy, the ADMM training Using l0-norm and standard fine-tUning on av-
erage achieve accUracy of 91.34 % and 91.09 %, respectively. The resUlts demonstrate the ADMM
training achieves improvement of 0.63 % from the baseline model which is statistically significant
(t-test resUlt with p < 0.001). ADMM training performance is also significantly 25 % better than
what the standard fine-tUning achieves (t-test resUlt with p < 0.001). The t-test experiment also
shows that ADMM coUld redUce the variance of learning. In the 15 repeated experiments, ADMM
training has the lowest standard deviation of errors compared with their coUnterparts Using standard
fine-tUning (standard deviation of 0.04 % for ADMM vs 0.06 % for standard fine-tUning).
Table 2: t-test resUlts for the significance validation of the performances. ResUlts are reported over
15 rUns on CIFAR-10 Using NIN.
	ADMM training	Standard fine-tuning	Baseline
Mean accuracy (%)	9134	9109	90.71
Accuracy standard deviation (%)	0.04	0.06	-
SParSity (%)	34.5	0	0
p-value	-	0.001	0.001
Appendix B	Single Run Results
DUe to space consideration, we present some extra resUlts in the cUrrent appendix. First, the resUlts
for oUr sparsity promoting approach for the different models on CIFAR-10, CIFAR-100, and SVHN
are presented in Tables 3, 4 and 5, respectively. Follows in Table 6 resUlts showing joint variations
of accuracy and sparsity obtained with increasing μ values, for the three tested datasets. All these
resUlts are for a single random rUn of each method on the dataset at hand.
10
Under review as a conference paper at ICLR 2017
Table 3: Performance of the proposed ADMM-based sparse method on the CIFAR-10 dataset.
(a)	NIN model
	μ	Accuracy (%)	Filter (#)*	Sparsity (%)	Training epochs (#)	Speedup
l1 -norm	0	9071	0-0-0-0	000	0	-100-
	0.000	9114	33-482-968-0	123	4	-106-
	0.105	9142	33-551-1027-0	136	16	-119-
	0.211	9147	34-609-1144-31	155	30	-T31-
	0.316	91:56	41-749-1428-589	272	48	-144-
	0.421	9147	-56-1822-2300-5630-	1214	90	-156-
	0.526	9113	70-6810-4834-12451-	30:73	120	-169-
	0.632	9121	107-6810-11568-12451	34:07	140	-UI-
ULIOU-。？	-0	9071	0-0-0-0	000	0	-100-
	0.000	9124	34-482-969-2	123	4	-106-
	0.105	91:52	36-554-1031-2	137	16	-119-
	0.211	9157	39-614-1148-35	157	36	-131-
	0.316	9166	46-755-1432-596	275	64	-1:44-
	0.421	9157	-65-1828-2304-5640-	12:18	80	-156-
	0.526	9123	81-6821-4843-12461-	30.78	96	-1:69-
	0.632	91.31 —	118-6821-11577-12461	34.12 —	112	1.81
* In the order of first hidden layer to last hidden layer out of a total of 576-18432-36864-36864 filters, respec-
tively.
(b)	Low-rank NIN model
	μ	Accuracy (%)	Filter (#)*	Sparsity (%)	Training epochs (#)	Speedup
lι-norm	-0-	90:07	0-0-0-0-0-0-0-0	0700	0	-1700-
	0.000	9065	8-9-192-96-102-96-0-1	0.54 —	4	-1709-
	0.105	90:92	9-9-192-98-180-97-20-7	0.66	16	-1726-
	0.211	91712	9-9-201-104-287-116-78-14	0788	30	-1743-
	0.316	91725	11-10-275-135-483-177-270-58	153	56	-1761-
	0.421	91722	15-22-479-239-1105-411-983-225	375	100	-1778-
	0.526	91721	19-28-1163-644-2832-1343-3083-871-	T0.76	120	-1796-
	0.632	91720	30-37-2707-1989-6509-4176-7681-3232	28743	140	-2713-
lo-norm	-0-	90707	0-0-0-0-0-0-0-0	0700	0	-1700-
	0.000	90.75	9-10-194-96-103-98-2-2	0755	4	-1709-
	0.105	91702	10-10-194-102-182-99-23-8	0768	16	-1726-
	0.211	91722	13-11-204-110-293-119-81-15	0791	36	-1743-
	0.316	91735	18-16-281-141-490-181-277-59	158	48	-1761-
	0.421	91732	23-30-485-245-1112-420-990-233	3782	80	-1778-
	0.526	91731	29-36-1173-651-2839-1354-3092-879	10784	108	-1796-
	0.632	91.30	—	40-46-2719-1996-6519-4188-7692-3240―	28.51	—	126	2.13
*Inthe order of first hidden layer to last hidden layer out of a total of 288-288-9216-9216-18432-18432-18432-18432 filters,
respectively.
(c) CNN model
	μ	Accuracy (%)	Filter (#)	Sparsity (%)	Training epochs (#)	Speedup
l1 -norm	-0	80700	0-0-0-0-0	0.00	0	-1700-
	0.000	81724	0-0-0-0-0	0.00	4	-1700-
	0.105	81744	0-0-0-0-0	0.00	16	-1700-
	0.211	81746	0-0-0-0-0	0.00	30	-1700-
	0.316	81724	0-5-20-9-57	2.40	64	-1721-
	0.421	81748	0-267-843-792-57	5711	80	-1737-
	0.526	80.92	-3-2870-8922-7161-57-	29782	120	-1794-
	0.579	79.80	7-5383-17189-10736-57	50.63	130	-2715-
l0 -norm	-0	80700	0-0-0-0-0	0.00	0	-1700-
	0.000	81734	1-2-2-1-1	0.05	4	-1701-
	0.105	81754	1-2-3-2-3	0714	16	-1702-
	0.211	81756	5-3-5-5-5	0.23	36	-1703-
	0.316	81734	5-8-25-17-21	0.95	56	-1710-
	0.421	81758	10-273-853-800-23	3.75	80	-1730-
	0.526	81702	13-2879-8933-7173-23-	28.48	96	-1793-
	0.579	79.90 —	17-5395-17200-10748-23 -	49.29	—	117	2.15
* In the order of first hidden layer to last hidden layer out of a total of 288-12288-32768-16384-256 filters,
respectively.
(d) Low-rank CNN model
	μ	Accuracy (%)	Filter(#)*	Sparsity (%)	Training epochs (#)	Speedup
N	0	80.20	0-0-0-0-0-0-0-0-0	000	0	-1700-
	0.000	81776	2-1-2-3-2-2-2-3-2	0.22	4	-1708-
	0.105	81779	3-2-2-5-5-3-4-3-6	0.64	16	-1721-
	0.211	81775	6-5-4-5-7-7-6-6-8	0.87	36	-1726-
	0.316	81770	6-6-8-7-12-15-9-12-24	254	56	-1753-
	0.421	81777	10-11-78-75-221-222-205-208-28	4.09	90	-1769-
	0.526	81736	14-12-729-728-2241-2246-1804-1806-33-	14.83	108	-2718-
	0.579	80714	18-15-1358-1357-4311-4312-2697-2699-34	23.53	104	-237-
l0-norm	-0-	80.20	0-0-0-0-0-0-0-0-0	0.00	0	-1700-
	0.000	8201	1-3-1-3-1-2-4-1-3	03	4	-111-
	0.105	8201	5-3-9-9-4-8-9-6-8	0.88	16	-1726-
	0.211	81791	13-8-9-9-13-12-10-12-13	1743	30	-1737-
	0.316	82710	13-9-12-14-20-18-17-19-32	341	56	-1762-
	0.421	82.00	14-18-83-87-228-227-212-215-39	5.28	90	-1777-
	0.526	81738	19-19-737-738-2249-2250-1807-1813-39	15751	96	-2719-
	0.579	80.25 —	25-20-1368-1367-4315-4322-2703-2706-40-	24.22	—	104	2.37
* In the order of first hidden layer to last hidden layer out of a total of 144-144-6144-6144-16384-16384-8192-8192-256 filters,
respectively.
11
Under review as a conference paper at ICLR 2017
Table 4:	Performance of the proposed ADMM-based sparse method on CIFAR-100 dataset.
(a) NIN model
	μ	Accuracy (%)	Filter (#)*	Sparsity (%)	Training epochs (#)	Speedup
l1 -norm	0	6330	0-0-0-0	0700	0	-100-
	0.000	63:97	34-484-970-1	1724	4	-1707-
	0.105	64:33	36-553-1029-4	1737	16	-1707-
	0.211	64:46	40-611-1149-35	1757	30	-1708-
	0.316	64:34	48-751-1433-593	2774	64	-1714-
	0.421	64718	-65-1824-2307-5639	12717	90	-1742-
	0.526	64701	80-6815-4843-12460-	30776	96	-1771-
	0.632	64730	117-6816-11581-12464	34712	112	-1775-
ULIOU-。？	-0	63:30	0-0-0-0	000	0	-1700-
	0.000	64732	36-485-969-0	1724	4	-1707-
	0.105	64723	40-558-1033-6	1739	16	-1707-
	0.211	64744	43-618-1152-37	1759	30	-1708-
	0.316	64776	50-759-1438-598	277	48	-1714-
	0.421	64759	-71-1834-2315-5649	12721	100	-1742-
	0.526	64710	85-6824-4850-12472	30781	120	-1771-
	0.632	63.93 —	124-6832-11587-12472	34.17	—	140	1.75
*	In the order of first hidden layer to last hidden layer out of a total of 576-18432-36864-36864 filters, respec-
tively.
(b) Low-rank NIN model
	μ	Accuracy (%)	Filter (#)*	Sparsity (%)	Training epochs (#)	Speedup
lι-norm	-0-	63.60	0-0-0-0-0-0-0-0	0700	0	-1700-
	0.000	64762	10-9-194-98-102-96-2-3	0755	4	-1708-
	0.105	64751	12-11-196-101-183-100-22-9	0768	16	-1710-
	0.211	64783	13-14-205-107-291-122-82-16	0792	36	-1713-
	0.316	65722	18-18-282-142-489-183-275-60	1758	48	-1721-
	0.421	65718	22-31-486-246-1113-417-992-234	3782	90	-1739-
	0.526	65712	31-37-1170-653-2843-1349-3092-881-	T0784	120	-1772-
	0.632	64785	42-49-2721-1998-6520-4189-7691-3242	28752	112	-2708-
lo-norm	-0-	63:60	0-0-0-0-0-0-0-0	OT	0	-1700-
	0.000	64758	8-12-195-96-104-98-3-3	0756	4	-1708-
	0.105	64790	15-14-199-103-186-104-24-11	071	16	-1710-
	0.211	64793	21-19-210-110-293-125-88-21	0796	36	-1714-
	0.316	65707	25-20-288-148-496-188-281-67	1763	48	-1721-
	0.421	64793	30-38-492-253-1118-426-998-240	3788	80	-1740-
	0.526	64788	34-44-1181-663-2845-1359-3099-887	10790	96	-1772-
	0.632	65.11	—	55-59-2725-2008-6531-4192-7703-3248—	28.60	—	140	2.08
*Inthe order of first hidden layer to last hidden layer out of a total of 288-288-9216-9216-18432-18432-18432-18432 filters,
respectively.
(c) CNN model
	μ	Accuracy (%)	Filter (#)	Sparsity (%)	Training epochs (#)	Speedup
l1 -norm	-0	60711	0-0-0-0-0	0.00	0	-1700-
	0.000	61739	2-1-0-1-2	0.09	4	-1701-
	0.105	61788	3-3-3-4-2	0710	16	-1701-
	0.211	61760	3-3-5-4-4	0719	30	-1702-
	0.316	61773	7-11-25-13-23	1703	64	-1710-
	0.421	61797	7-274-848-801-23	374	80	-1728-
	0.526	61743	10-2877-8929-7173-23-	28746	96	-1790-
	0.579	59781	16-5390-17196-10748-23	49727	117	-2711-
l0 -norm	-0	60711	0-0-0-0-0	0.00	0	-1700-
	0.000	61789	2-3-2-2-3	0714	4	-1701-
	0.105	62712	3-3-5-7-6	0727	16	-1703-
	0.211	61790	7-5-7-11-6	0729	36	-1703-
	0.316	62701	14-15-33-22-27	1723	56	-1711-
	0.421	62715	18-285-859-808-29	4705	90	-1729-
	0.526	61720	24-2890-8943-7181-32	28791	120	-1790-
	0.579	59.92 —	30-5404-17211-10756-35-	49.84	—	104	2.11
*	In the order of first hidden layer to last hidden layer out of a total of 288-12288-32768-16384-256 filters,
respectively.
(d) Low-rank CNN model
	μ	Accuracy (%)	Filter(#)*	Sparsity (%)	Training epochs (#)	Speedup
N	0	60723	0-0-0-0-0-0-0-0-0	0.00	0	-1700-
	0.000	61754	2-2-3-3-3-1-1-2-1	0712	4	-1704-
	0.105	61798	3-5-4-4-3-4-4-4-7	075	16	-1719-
	0.211	61770	5-8-4-5-4-5-7-8-9	0797	30	-1723-
	0.316	61774	9-8-8-7-11-10-11-12-26	275	48	-1747-
	0.421	61796	10-9-79-74-224-222-206-209-32	4750	90	-1762-
	0.526	61718	11-15-730-729-2244-2243-1801-1805-35-	15703	108	-207-
	0.579	60709	12-16-1360-1358-4310-4309-2697-2698-35	23763	104	-225-
l0-norm	-0-	60723	0-0-0-0-0-0-0-0-0	0.00	0	-1700-
	0.000	61762	1-1-2-1-4-3-2-2-2	0722	4	-1706-
	0.105	62720	7-5-8-6-7-6-7-7-8	0788	16	-1720-
	0.211	61791	8-8-8-9-10-10-10-8-12	1731	36	-1728-
	0.316	61794	15-13-13-11-16-19-19-18-32	342	56	-1752-
	0.421	62705	16-15-82-80-230-233-218-215-36	4798	90	-1764-
	0.526	61733	23-16-736-733-2250-2253-1812-1814-42	15782	120	-207-
	0.579	60.20 —	24-19-1365-1364-4316-4319-2706-27074~	24.52	—	117	2.25
* In the order of first hidden layer to last hidden layer out of a total of 144-144-6144-6144-16384-16384-8192-8192-256 filters,
respectively.
12
Under review as a conference paper at ICLR 2017
Table 5:	Performance of the proposed ADMM-based sparse method on SVHN dataset.
(a)	NIN model
	μ	Accuracy (%)	Filter (#)*	Sparsity (%)	Training epochs (#)	Speedup
l1 -norm	0	9620	0-0-0-0	0.00	0	-100-
	0.000	96:90	34-483-970-0	123	4	-109-
	0.105	97:02	36-554-1031-3	137	16	-110-
	0.211	97:32	38-612-1148-34	156	30	-111-
	0.316	97.36	45-752-1432-592	274	48	-U8-
	0.421	97:06	-61-1827-2304-5640-	12.17	90	-152-
	0.526	96:66	81-6815-4838-12461-	30.77	96	-184-
	0.632	96.96	118-6816-11581-12461	34712	126	-188-
ULIOU-。？	-0	9620	0-0-0-0	0.00	0	-100-
	0.000	9689	35-485-969-1	124	4	-109-
	0.105	97.23	38-559-1031-5	139	16	-110-
	0.211	97.47	41-618-1149-40	159	36	-112-
	0.316	97.49	52-764-1436-598	278	56	-119-
	0.421	97.56	-67-1837-2314-5643	12720	90	-153-
	0.526	97716	93-6827-4851-12464-	30781	120	-184-
	0.632	97.07 —	130-6829-11586-12470	34.17	—	126	1.88
* In the order of first hidden layer to last hidden layer out of a total of 576-18432-36864-36864 filters, respec-
tively.
(b)	Low-rank NIN model
	μ	Accuracy (%)	Filter (#)*	Sparsity (%)	Training epochs (#)	Speedup
lι-norm	-0-	96.70	0-0-0-0-0-0-0-0	0700	0	-1700-
	0.000	9772	10-11-193-98-102-98-0-3	0756	4	-17∏-
	0.105	97.58	11-12-194-102-182-99-21-10	0768	16	-1713-
	0.211	98716	15-15-206-108-292-121-80-18	0792	36	-1716-
	0.316	97.90	17-16-280-139-490-182-276-65	1758	64	-1725-
	0.421	98718	21-31-485-247-1112-416-993-232	3781	100	-1746-
	0.526	97.98	27-37-1174-652-2840-1348-3093-882	10.84	120	-1780-
	0.632	98711	41-46-2718-2002-6517-4189-7694-3243	28.52	126	-2718-
lo-norm	-0-	96.70	0-0-0-0-0-0-0-0	0700	0	-1700-
	0.000	97751	8-9-195-96-103-99-3-5	0756	4	-1711-
	0.105	97788	16-13-196-104-185-103-26-11	071	16	-1713-
	0.211	97.94	17-18-209-113-297-126-86-21	0796	36	-1717-
	0.316	98.27	25-24-287-144-494-187-281-71	1763	64	-1726-
	0.421	97797	30-36-492-251-1119-423-997-239	3787	100	-1746-
	0.526	98.45	39-42-1176-659-2849-1363-3102-891-	10.91	96	-1781-
	0.632	97.99	—	53-57-2725-2004-6535-4201-7705-3257—	28.62	—	112	2.18
*Inthe order of first hidden layer to last hidden layer out of a total of 288-288-9216-9216-18432-18432-18432-18432 filters,
respectively.
(c) CNN model
	μ	Accuracy (%)	Filter (#)	Sparsity (%)	Training epochs (#)	Speedup
l1 -norm	-0	85710	0-0-0-0-0	0.00	0	-1700-
	0.000	86781	2-1-0-2-0	0.01	4	-1700-
	0.105	86.68	2-3-2-2-4	0718	16	-1702-
	0.211	86.69	5-5-6-3-4	07Γ9	36	-1702-
	0.316	86.35	6-10-28-14-19	0787	64	-1710-
	0.421	86785	6-277-853-798-24	3.79	80	-1732-
	0.526	86.34	-9-2880-8932-7167-24-	28.50	96	-1797-
	0.579	83.30	13-5393-17199-10748-25	49.36	104	-2719-
l0 -norm	-0	85710	0-0-0-0-0	0.00	0	-1700-
	0.000	86.63	1-0-1-0-2	0.09	4	-1701-
	0.105	86.70	4-4-5-7-6	0.28	16	-1703-
	0.211	86780	11-8-9-8-7	0.34	30	-1704-
	0.316	86.74	13-17-32-17-22	1702	64	-En-
	0.421	86.97	13-285-855-809-29	4.04	90	-1734-
	0.526	86.49	19-2888-8934-7178-29-	28.76	120	-1797-
	0.579	83.40 —	26-5401-17206-10758-29 -	49.58	—	117	2.19
* In the order of first hidden layer to last hidden layer out of a total of 288-12288-32768-16384-256 filters,
respectively.
(d) Low-rank CNN model
	μ	Accuracy (%)	Filter(#)*	Sparsity (%)	Training epochs (#)	Speedup
N	0	87.60	0-0-0-0-0-0-0-0-0	0.00	0	-1700-
	0.000	88.93	3-3-3-1-3-2-3-3-1	0713	4	-1704-
	0.105	89.28	3-4-5-2-5-5-3-4-3	0.34	16	-1710-
	0.211	89.39	7-5-7-7-7-6-5-5-6	0.67	36	-1718-
	0.316	89718	10-7-9-10-12-11-10-9-25	2.65	48	-1749-
	0.421	89.55	11-11-76-77-222-219-209-208-33	4.61	100	-1766-
	0.526	88.83	14-14-727-732-2242-2242-1803-1802-33-	14.83	96	-2710-
	0.579	86.30	15-15-1357-1361-4308-4312-2696-2695-36	23.73	130	-2.29-
l0-norm	-0-	87.60	0-0-0-0-0-0-0-0-0	0.00	0	-1700-
	0.000	89.30	1-5-5-4-4-1-3-3-1	0713	4	-1704-
	0.105	89.55	4-9-5-7-6-7-5-5-7	0777	16	-1720-
	0.211	89.65	6-11-9-9-12-12-6-11-11	1721	30	-1728-
	0.316	89.39	10-15-11-14-17-18-17-18-29	3710	56	-1752-
	0.421	89.56	17-16-83-85-224-232-213-216-42	5.59	90	-1772-
	0.526	89.00	21-23-740-738-2247-2255-1813-1813-44	16.04	120	-2712-
	0.579	86.41 —	25-24-1369-1367-4316-4321-2706-2706-44-	24.64	—	117	2.29
* In the order of first hidden layer to last hidden layer out of a total of 144-144-6144-6144-16384-16384-8192-8192-256 filters,
respectively.
13
Under review as a conference paper at ICLR 2017
Table 6: Joint variations of accuracy and sparsity on the evaluated datasets for increasing μ values.
LR-NIN stands for low-rank NIN while LR-CNN is for low-rank CNN.
(a) CIFAR-10
N ≡	U	SParSity (%)	0.00	1.23	1.36	1.55	2.72	12.14	30.73	34.07
		Accuracy (%)	90.71	91.14	91.42	91.47	91.56	91.47	91.13	91.21
		Training epochs (#)	-0-	-4-	-T6-	-30-	^^8-	-90-	120	140
		Speedup	1.00	1.08	1.09	1.10	1.16	1.47	1.77	1.81
		Sparsity (%)	0.00	1.23	1.37	1.57	2.75	12.18	30.78	34.12
		Accuracy (%)	90.71	91.24	91.52	91.57	91.66	91.57	91.23	91.31
		Training epochs (#)	-0-	-4-	-T6-	-36-	^^64-	-80-	^^96-	112
		Speedup	1.00	1.08	1.09	1.10	1.16	1.47	1.77	1.81
LR-NIN	U	Sparsity (%)	0.00	0.54	0.66	0.88	1.53	3.75	10.76	28.43
		Accuracy (%)	90.07	90.65	90.92	91.12	91.25	91.22	91.21	91.20
		Training epochs (#)	-0-	-4-	-T6-	-30-	^^6	100	120	140
		Speedup	1.00	1.09	1.11	1.14	1.22	1.42	1.76	2.13
	N	Sparsity (%)	0.00	0.55	0.68	0.91	1.58	3.82	10.84	28.51
		Accuracy (%)	90.07	90.75	91.02	91.22	91.35	91.32	91.31	91.30
		Training epochs (#)	-0-	-4-	-T6-	-36-	^^8-	-80-	108	126
		Speedup	1.00	1.09	1.11	1.15	1.23	1.43	1.76	2.13
I	U	Sparsity (%)	0.00	0.00	0.00	0.00	2.40	5.11	29.82	50.63
		Accuracy (%)	80.00	81.24	81.44	81.46	81.24	81.48	80.92	79.80
		Training epochs (#)	-0-	-4-	-T6-	-30-	^^64-	-80-	120	130
		Speedup	1.00	1.00	1.00	1.00	1.21	1.37	1.94	2.15
		Sparsity (%)	0.00	0.05	0.14	0.23	0.95	3.75	28.48	49.29
		Accuracy (%)	80.00	81.34	81.54	81.56	81.34	81.58	81.02	79.90
		Training epochs (#)	-0-	-4-	-T6-	-36-	ɜð-	-80-	96	117
		Speedup	1.00	1.01	1.02	1.03	1.10	1.30	1.93	2.15
LR-CNN		Sparsity (%)	0.00	0.22	0.64	0.87	2.54	4.09	14.83	23.53
		Accuracy (%)	80.20	81.76	81.79	81.75	81.70	81.77	81.36	80.14
		Training epochs (#)	-0-	-4-	-T6-	-36-	^^6	-90-	108	104
		Speedup	1.00	1.08	1.21	1.26	1.53	1.69	2.18	2.37
		Sparsity (%)	0.00	0.33	0.88	1.43	3.41	5.28	15.51	24.22
		Accuracy (%)	80.20	82.01	82.01	81.91	82.10	82.00	81.38	80.25
		Training epochs (#)	-0-	-4-	-T6-	-30-	5~55-	-90-	^^96-	104
		Speedup	1.00	1.11	1.26	1.37	1.62	1.77	2.19	2.37
(b) CIFAR-100
N	U	Sparsity (%)	0.00	1.24	1.37	1.57	2.74	12.17	30.76	34.12
		Accuracy (%)	63.30	63.97	64.33	64.46	64.34	64.18	64.01	64.30
		Training epochs (#)	-0-	-4-	-T6-	-30-	^^64-	-90-	^^96-	112
		Speedup	1.00	1.07	1.07	1.08	1.14	1.42	1.71	1.75
	N	Sparsity (%)	0.00	1.24	1.39	1.59	2.77	12.21	30.81	34.17
		Accuracy (%)	63.30	64.32	64.23	64.44	64.76	64.59	64.10	63.93
		Training epochs (#)	-0-	-4-	-T6-	-30-	^^8-	100	120	140
		Speedup	1.00	1.07	1.07	1.08	1.14	1.42	1.71	1.75
LR-NIN	U	Sparsity (%)	0.00	0.55	0.68	0.92	1.58	3.82	10.84	28.52
		Accuracy (%)	63.60	64.62	64.51	64.83	65.22	65.18	65.12	64.85
		Training epochs (#)	-0-	-4-	-T6-	-36-	^^8-	-90-	120	112
		Speedup	1.00	1.08	1.10	1.13	1.21	1.39	1.72	2.08
		Sparsity (%)	0.00	0.56	0.71	0.96	1.63	3.88	10.90	28.60
		Accuracy (%)	63.60	64.58	64.90	64.93	65.07	64.93	64.88	65.11
		Training epochs (#)	-0-	-4-	-T6-	-36-	^^8-	-80-	^^96-	140
		Speedup	1.00	1.08	1.10	1.14	1.21	1.40	1.72	2.08
I	U	Sparsity (%)	0.00	0.09	0.10	0.19	1.03	3.74	28.46	49.27
		ACCuraCy (%)	60.11	61.39	61.88	61.60	61.73	61.97	61.43	59.81
		Training epochs (#)	-0-	-4-	-T6-	-30-	^^64-	-80-	^^96-	117
		Speedup	1.00	1.01	1.01	1.02	1.10	1.28	1.90	2.11
		Sparsity (%)	0.00	0.14	0.27	0.29	1.23	4.05	28.91	49.84
		Accuracy (%)	60.11	61.89	62.12	61.90	62.01	62.15	61.20	59.92
		Training epochs (#)	-0-	-4-	-T6-	-36-	^^6	-90-	120	104
		Speedup	1.00	1.01	1.03	1.03	1.11	1.29	1.90	2.11
LR-CNN	U	Sparsity (%)	0.00	0.12	0.75	0.97	2.75	4.50	15.03	23.63
		Accuracy (%)	60.23	61.54	61.98	61.70	61.74	61.96	61.18	60.09
		Training epochs (#)	-0-	-4-	-T6-	-30-	^^8-	-90-	108	104
		Speedup	1.00	1.04	1.19	1.23	1.47	1.62	2.07	2.25
		Sparsity (%)	0.00	0.22	0.88	1.31	3.42	4.98	15.82	24.52
		Accuracy (%)	60.23	61.62	62.20	61.91	61.94	62.05	61.33	60.20
		Training epochs (#)	-0-	-4-	-T6-	-36-	^^6	-90-	120	117
		Speedup	1.00	1.06	1.20	1.28	1.52	1.64	2.07	2.25
(c) SVHN
N		Sparsity (%)	0.00	1.23	1.37	1.56	2.74	12.17	30.77	34.12
		Accuracy (%)	96.20	96.90	97.02	97.32	97.36	97.06	96.66	96.96
		Training epochs (#)	-0-	-4-	-T6-	-30-	^^8-	-90-	^^96-	126
		Speedup	1.00	1.09	1.10	1.11	1.18	1.52	1.84	1.88
	N	Sparsity (%)	0.00	1.24	1.39	1.59	2.78	12.20	30.81	34.17
		Accuracy (%)	96.20	96.89	97.23	97.47	97.49	97.56	97.16	97.07
		Training epochs (#)	-0-	-4-	-T6-	-36-	5~55-	-90-	120	126
		Speedup	1.00	1.09	1.10	1.12	1.19	1.53	1.84	1.88
LR-NIN	U	Sparsity (%)	0.00	0.56	0.68	0.92	1.58	3.81	10.84	28.52
		Accuracy (%)	96.70	97.72	97.58	98.16	97.90	98.18	97.98	98.11
		Training epochs (#)	-0-	-4-	-T6-	-36-	^^64-	100	120	126
		Speedup	1.00	1.11	1.13	1.16	1.25	1.46	1.80	2.18
	N	Sparsity (%)	0.00	0.56	0.71	0.96	1.63	3.87	10.91	28.62
		Accuracy (%)	96.70	97.51	97.88	97.94	98.27	97.97	98.45	97.99
		Training epochs (#)	-0-	-4-	-T6-	-36-	^^64-	100	^^96-	112
		Speedup	1.00	1.11	1.13	1.17	1.26	1.46	1.81	2.18
I	U	Sparsity (%)	0.00	0.01	0.18	0.19	0.87	3.79	28.50	49.36
		Accuracy (%)	85.10	86.81	86.68	86.69	86.35	86.85	86.34	83.30
		Training epochs (#)	-0-	-4-	-T6-	-36-	^^64-	-80-	96	104
		Speedup	1.00	1.00	1.02	1.02	1.10	1.32	1.97	2.19
	N	Sparsity (%)	0.00	0.09	0.28	0.34	1.02	4.04	28.76	49.58
		Accuracy (%)	85.10	86.63	86.70	86.80	86.74	86.97	86.49	83.40
		Training epochs (#)	-0-	-4-	-T6-	-30-	^^64-	-90-	120	117
		Speedup	1.00	1.01	1.03	1.04	1.11	1.34	1.97	2.19
LR-CNN	U	Sparsity (%)	0.00	0.13	0.34	0.67	2.65	4.61	14.83	23.73
		Accuracy (%)	87.60	88.93	89.28	89.39	89.18	89.55	88.83	86.30
		Training epochs (#)	-0-	-4-	-T6-	-36-	^^8-	100	^^96-	130
		Speedup	1.00	1.04	1.10	1.18	1.49	1.66	2.10	2.29
		Sparsity (%)	0.00	0.13	0.77	1.21	3.10	5.59	16.04	24.64
		Accuracy (%)	87.60	89.30	89.55	89.65	89.39	89.56	89.00	86.41
		Training epochs (#)	-0-	-4-	-T6-	-30-	^^6	-90-	120	117
		Speedup	1.00	1.04	1.20	1.28	1.52	1.72	2.12	2.29
14