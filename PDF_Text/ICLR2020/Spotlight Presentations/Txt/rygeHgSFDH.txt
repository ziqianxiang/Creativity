Published as a conference paper at ICLR 2020
Disentanglement by Nonlinear ICA with
General Incompressible-flow Networks (GIN)
Peter Sorrenson, Carsten Rother, Ullrich Kothe
Visual Learning Lab
Heidelberg University
Ab stract
A central question of representation learning asks under which conditions it is
possible to reconstruct the true latent variables of an arbitrarily complex genera-
tive process. Recent breakthrough work by Khemakhem et al. (2019) on nonlinear
ICA has answered this question for a broad class of conditional generative pro-
cesses. We extend this important result in a direction relevant for application to
real-world data. First, we generalize the theory to the case of unknown intrinsic
problem dimension and prove that in some special (but not very restrictive) cases,
informative latent variables will be automatically separated from noise by an es-
timating model. Furthermore, the recovered informative latent variables will be
in one-to-one correspondence with the true latent variables of the generating pro-
cess, up to a trivial component-wise transformation. Second, we introduce a mod-
ification of the RealNVP invertible neural network architecture (Dinh et al., 2016)
which is particularly suitable for this type of problem: the General Incompressible-
flow Network (GIN). Experiments on artificial data and EMNIST demonstrate that
theoretical predictions are indeed verified in practice. In particular, we provide a
detailed set of exactly 22 informative latent variables extracted from EMNIST.
1	Introduction
Deep latent-variable models promise to unlock the key factors of variation within a dataset, opening
a window to interpretation and granting the power to manipulate data in an intuitive fashion. The
theory of identifiability in linear independent component analysis (ICA) (Comon, 1994) tells us
when this is possible, if we restrict the model to a linear transformation, but until recently there was
no corresponding theory for the highly nonlinear models needed to manipulate complex data. This
changed with the recent breakthrough work by Khemakhem et al. (2019), which showed that under
relatively mild conditions, it is possible to recover the joint data and latent space distribution, up
to a simple transformation in the latent space. The key requirement is that the generating process
is conditioned on a variable which is observed along with the data. This condition could be a class
label, time index of a time series, or any other piece of information additional to the data. They
interpret their theory as a nonlinear version of ICA.
This work extends this theory in a direction relevant for application to real-world data. The existing
theory assumes knowledge of the intrinsic problem dimension, but this is unrealistic for anything
but artificially generated datasets. Here, we show that in the special case of Gaussian latent space
distributions, the intrinsic problem dimension can be discovered. The important latent variables are
organically separated from noise variables by the estimating model. Furthermore, the variables dis-
covered correspond to the true generating latent variables, up to a trivial component-wise translation
and scaling. Very similar results exist for other members of the exponential family with two param-
eters, such as the beta and gamma distributions.
We introduce a variant of the RealNVP (Dinh et al., 2016) invertible neural network: the General
Incompressible-flow Network (GIN). The flow is called incompressible in reference to fluid dynam-
ics, since it preserves volumes: the Jacobian determinant is simply unity. We emphasise its generality
and increased expressive power in comparison to previous volume-preserving flows, such as NICE
(Dinh et al., 2014). As already noted in Khemakhem et al. (2019), flow-based generative models are
a natural fit for the theory of nonlinear ICA, as are the variational autoencoders (VAEs) (Kingma &
1
Published as a conference paper at ICLR 2020
Welling, 2013) used in that work. For us, major advantages of invertible architectures over VAEs are
the ability to specify volume preservation and directly optimize the likelihood, and freedom from the
requirement to specify the dimension of the model’s latent space. An INN always has a latent space
of the same dimension as the data. In addition, the forward and backward models share parameters,
saving the effort of learning separate models for each direction.
In summary, our work makes the following contributions:
•	We extend the theory of nonlinear ICA to allow for unknown intrinsic problem dimension.
Doing so, we find that this dimension can be discovered and a one-to-one correspondence
between generating and estimated latent variables established.
•	We propose as an implementation an invertible neural network obtained by modifying the
RealNVP architecture. We call our new architecture GIN: the General Incompressible-flow
Network.
•	We demonstrate the viability of the model on artificial data and the EMNIST dataset. We
extract 22 meaningful variables from EMNIST, encoding both global and local features.
2	Related Work
The basic goals of nonlinear ICA stem from the original work on linear ICA. An influential for-
mulation, as well as the first identifiability results, were given in Comon (1994). These stated the
conditions which allow the generating latent variables to be discovered, when the mixing function
is a linear transformation. However, it was shown in Hyvarinen & Pajunen (1999) that this approach
to identifiability does not extend to general nonlinear functions.
The first identifiability results in nonlinear ICA came in Hyvarinen & Morioka (2016) and Hyvarinen
& Morioka (2017), applied to time series, and implemented via a discriminative model and semi-
supervised learning. A more general formulation, valid for other forms of data, was given in
Hyvarinen et al. (2018) and the theory was extended to generative models in Khemakhem et al.
(2019), where experiments were implemented by a VAE.
Many authors have addressed the general problem of disentanglement, and proposed models to learn
disentangled features. Prominent among these is β-VAE (Higgins et al., 2017) and its variations
(e.g. Chen et al., 2018) which augment the standard ELBO loss with tunable hyperparameters to
encourage disentanglement. There are also attempts to modify the GAN framework (Goodfellow
et al., 2014) such as InfoGAN (Chen et al., 2016), which tries to maximize the mutual information
between some dimensions of the latent space and the observed data. Many of these approaches
are unsupervised. However, as pointed out and empirically demonstrated in Locatello et al. (2018),
unsupervised models without conditioning in the latent space are in general unidentifiable.
Several unsupervised VAE models implement conditioning in the latent space by means of Gaussian
mixtures (Johnson et al., 2016; Dilokthanakul et al., 2016; Zhao et al., 2019). Our work differs
mainly by (i) only considering supervised tasks, therefore being safely covered by the theory of
Khemakhem et al. (2019), and (ii) enforcing volume-preservation, not possible in a VAE.
The invertible neural networks in this work build upon the NICE framework (Dinh et al., 2014)
and its extension in RealNVP (Dinh et al., 2016). A similar network design to ours is Ardizzone
et al. (2019). This is a conditioned INN based on RealNVP, however the conditioning information is
applied as a parameter of the network. The authors find in experiments with MNIST that meaningful
variables are present in their latent space, but are rotated such that they are not aligned with the
axes of the space. In this work, the conditioning is only present as a parameter of the latent space
distributions. As a result, it is covered by the theory of Khemakhem et al. (2019) and its extension
here, which results in non-rotated, meaningful latent variables.
3	Theory
3.1	Existing Theory of Nonlinear ICA
This section adapts theoretical results from Khemakhem et al. (2019) to the context of invertible
neural networks. Suppose the existence of the following three random variables: a latent generating
2
Published as a conference paper at ICLR 2020
GENERATING
LATENT SPACE	GENERATING	ESTIMATING
GENERATING	L----j	ESTIMATED
LATENT	OBSERVED	LATENT
VARIABLE	DATA AND	VARIABLE
CONDITION
Figure 1: Relationship between the variables and functions defined in Sec. 3.1, as well as indication
of the training scheme.
variable z ∈ Rn, a condition u ∈ Rm and a data point x ∈ Rd, where n ≤ d. If n < d, also suppose
the existence of a noise variable ε ∈ Rd-n. The variables z and ε make up the generating latent
space, and are not necessarily known, whereas u and x are observable and therefore always known.
The distribution of z is a factorial member of the exponential family with k sufficient statistics,
conditioned on u. In its most general form the distribution can be written as
k
X Ti,j(zi)λi,j(u)	(1)
j=1
Pz(ZIU)=YY QZi⅛)eχp
i=1
where the Ti,j are the sufficient statistics, the λi,j their coefficients and Zi the normalizing constant.
Qi is called the base measure, which in many cases is simply 1.
The distribution ofε must not depend on u and its probability density function must be always finite.
The variable x is the result of an arbitrarily complex, invertible, deterministic transformation from
the generating latent space to the data space: x = f(z, ε). This can alternatively be formulated as
an injective, non-deterministic transformation from the lower-dimensional z-space to the higher-
dimensional x-space: x = fε(z).
In general, an observed dataset D will consist only of instances of x and u. The task of nonlinear
ICA is to disentangle the data to recover the generating latent variables z, as well as the form of the
function f and its inverse. We can try to achieve this with a sufficiently general, invertible function
approximator g, which maps from a latent variable w ∈ Rd to the data space: x = g(w; θ). Here
θ denotes the parameters of g . Note that the dimensions of the latent space and data space are the
same due to the invertibility ofg. We assume that w follows a conditionally independent exponential
probability distribution, conditioned on the same condition u as z:
Qi(Wi)
PW(WIU) =	io	eχp
i=1 Zi(u)
k
X Ti0,j (wi)λ0i,j (u)	.
j=1
(2)
The coefficients of the sufficient statistics λ0i,j (u) are not restricted, which means that a given vari-
able i of the estimated latent space is allowed to lose its dependence on u. If this occurs, we will
consider this variable to encode noise, playing a role equivalent to ε in the generating latent space.
In addition to this specification of the generative and estimating models, some conditions are nec-
essary to ensure the latent variables can be recovered. The most important of these concerns the
variability of λi,j(u) under u. However, as long as the λi,j are randomly and independently gener-
ated, and there are at least nk + 1 distinct conditions u, this condition is almost surely fulfilled. See
Appendix A.1 for further details.
In the limit of infinite data and perfect convergence, the estimating model will give the same condi-
tional likelihood to all data points as the true generating model:
PT,λ,f,ε(xIu) = PT0,λ0,g(xIu).	(3)
If this is the case, the vector of sufficient statistics T from the generating latent space will be related
to that of the estimated latent space by an affine transformation:
T(z) = AT0(w) +c,
(4)
3
Published as a conference paper at ICLR 2020
where A is some constant, full-rank, nk × dk matrix and c ∈ Rnk some constant vector. The
relationship holds for all values of z and w. The proof of this result can be found in Appendix A.
This relationship is a generalization of that derived in Khemakhem et al. (2019). In that version,
they assume knowledge of n, the dimension of the generating latent space, and give their estimating
model a latent space of the same dimension. In this context the matrix A defines a relationship
between latent spaces of the same dimension, making it square and invertible.
3.2	Nonlinear ICA with a Gaussian latent space
Given the relationship in equation (4), we can ask whether any stronger results hold for particu-
lar special cases. We hope in particular to induce sparsity in the matrix A, so that the estimated
latent space is related to the true one by as simple a transformation as possible. We show (proof
in Appendix B) that when both the generating and estimated latent spaces follow a Gaussian dis-
tribution, the generating latent space variables are recovered up to a trivial translation and scaling.
Furthermore, the dimension of the generating latent space is recovered.
More precisely, each generating latent variable zi is related to exactly one estimated latent variable
wj , for some j , as zi = aiwj + bi, for some constant ai and bi . Furthermore, each estimated latent
variable wj is related to at most one zi . If the estimating latent space has higher dimension than the
dimension of the generating latent space, some estimating latent variables are not related to any gen-
erating latent variables and so must encode only noise. This is the dimension discovery mechanism,
since the estimated latent space organically splits into informative and non-informative parts, with
the dimension of the informative part equal to the unknown intrinsic dimension of the generating
latent space. Very similar results can be derived for all common continuous two-parameter members
of the exponential family, including the gamma and beta distributions. See Appendix C.
3.3	Volume Preservation via Incompressible Flow
In a multivariate Gaussian distribution with diagonal covariance, the standard deviations are di-
rectly proportional to the principal axes of the ellipsoid defining a surface of constant probability.
In classical PCA, this property is used to assign importance to each principal component based on
its standard deviation. In PCA we can think of the rotation of the data into the basis defined by
the principal components as the latent space. In a deep latent variable model the transformation be-
tween the latent space and the data is significantly more complex, but if this transformation preserves
volumes like the rotation in PCA, it will retain the desirable correspondence between the standard
deviation of a latent space variable and its importance in explaining the data. Because invertible
neural networks (normalizing flows) have a tractable Jacobian determinant, they open the possibility
to constrain it to unity. This is equivalent to volume preservation and is the rationale behind the
General Incompressible-flow Network.
4	Experiments
Experiments on artificial datasets confirm the theory for a normally distributed latent space, as well
as identifying potential causes of failure. Experiments on the EMNIST dataset (Cohen et al., 2017)
demonstrate the ability of GIN to estimate independent and interpretable latent variables from real-
world data.
4.1	Model Description
The GIN model is similar in form to RealNVP (Dinh et al., 2016) and shares its flexibility, but retains
the volume-preserving properties of the NICE framework (Dinh et al., 2014).
RealNVP coupling layers split D-dimensional input x into two parts, x1:d and xd+1:D where d < D.
The output of the layer is the concatentation of y1:d and yd+1:D with
y1:d = x1:d
yd+1:D = xd+1:D	exp(s(x1:d)) + t(x1:d)
(5)
(6)
4
Published as a conference paper at ICLR 2020
Figure 2: Successful reconstruction by GIN of the two informative latent variables out of ten in total.
The other eight are correctly identified as noise. The observed data is ten-dimensional (projection
into two dimensions shown here). The spectrum shows the standard deviation of each variable of the
reconstruction (in black, log scale) which quantifies its importance. Ground truth is in gray. There is
a clear distinction between the two informative dimensions and the noise dimensions, showing that
GIN has correctly detected a two-dimensional manifold in the ten-dimensional data presented to it.
where addition, multiplication and exponentiation are applied component-wise. The logarithm of
the Jacobian determinant of a coupling layer is simply the sum of the scaling function s(x1:d).
Volume preservation is achieved by setting the final component s(xd) to the negative sum of the
previous components, so the total sum of s(x1:d) is zero (in contrast, NICE sets s(x1:d) ≡ 0).
Hence the Jacobian determinant is unity and volume is preserved. The network is free to allow the
volume contribution of some dimensions of the output of any coupling layer to grow, but only by
shrinking the other dimensions of the output in direct proportion. As well as enforcing a strong
correspondence between the importance of a latent variable and its standard deviation, we believe
volume-preservation has a regularizing effect, since it is a very strong constraint, comparable to
orthonormality in linear transformations.
4.2	Optimization
The experiments in this section deal with labeled data, where each data point belongs to one of
M different classes. This class label is used as the condition u associated with each data point
x. In the estimated latent space, all data instances with the same label should belong to the same
Gaussian distribution. Hence we are learning a Gaussian mixture in the estimated latent space, with
M mixture components. Since the distribution for each class in the estimated latent space is required
to be factorial, the variance of each mixture component is diagonal, and we can write σi2 (u) for the
variance in the i-th dimension.
Given a set of data, condition pairs D = {(x(1) , u(1)), . . . , (x(N) , u(N))} and model g, parameter-
ized by θ (where g maps from the latent space to the data space) we can construct a loss from
the log-likelihood. Using the change of variables formula, we have log p(x|u) = log p(w|u), with
no Jacobian term since the transformation w = g-1 (x; θ) is volume-preserving. To maximize the
likelihood of D, we minimize the negative log-likelihood of w in the estimated latent space:
L(θ) = E(x,u)∈D
1 XX ((g-1(X； θ -〃i(u； B))2
n = k	2σ2(u;θ)
+ log(σi (u; θ))
(7)
4.3	Artificial Data
4.3.1	Experiment 1: conditions of theory fulfilled
Samples are generated in two dimensions, conditioned on five different cluster labels, see Fig. 2.
The means of the clusters are chosen independently from a uniform distribution on [-5, 5] and
variances from a uniform distribution on [.5, 3].1 This data is then concatenated with independent
Gaussian noise in eight dimensions to make a ten-dimensional generating latent space, where only
the first two variables are informative. The noise is scaled by 0.01 to be small in comparison to
the informative dimensions. The latent space samples are then passed through a RealNVP network
1These values are the same as in an artificial data eXperiment in Khemakhem et al. (2019). The difference is
that the data will be projected into a higher-dimensional space and that we will not assume that the estimating
latent space is two-dimensional, this will instead be inferred by the model.
5
Published as a conference paper at ICLR 2020
with 8 fully connected coupling blocks with randomly initialized weights to produce the observed
data. This acts as a highly nonlinear mixing which can only be successfully treated with nonlinear
methods.
GIN is used as the estimating model, with 8 fully connected coupling blocks (full details in Appendix
D). Training converges quickly and stably using the Adam optimizer (Kingma & Ba, 2014) with
initial learning rate 10-2 and other values set to the usual recommendations. Batch size is 1,000 and
the data is augmented with Gaussian noise (σ = 0.01) at each iteration. After convergence of the
loss, the learning rate is reduced by a factor of 10 and trained again until convergence.
Over a number of experiments we made the following observations:
•	The model converges stably and gives importance (quantified by standard deviation) to only
two variables in the estimated latent space, provided there is sufficient overlap between the
mixture components in the generating latent space.
•	Where there is not enough overlap in the generating latent space, the model cannot rec-
ognize common variables across all the different classes, and tends to split one genuine
dimension of variation into two or more in its estimated latent space. This appears to be a
problem of finite data. We have observed that when this behaviour occurs, and if the gap
between mixture components is not too large, it can be prevented by increasing the number
of samples so that the space between the mixture components is better filled (see Fig. 6 and
7 in Appendix E). This is consistent with the theory, where equation (4) is true asymptoti-
cally. Since the latent space distributions are members of the exponential family, they have
support across the entire domain of the latent space, hence gaps can never remain in the
limit of infinite samples.
•	Choice of learning rate is important. If the initial learning rate is too low, training gets stuck
in bad local optima, where single true variables are split into several latent dimensions.
4.3.2	Experiment 2: conditions of theory not fulfilled
Samples are generated as in Experiment 1, but with only three mixture components. Since there are
two sufficient statistics per dimension, and two dimensions of variation, according to the theory we
need at least nk + 1 = 5 distinct conditions u for equation (4) to hold (see section 3.1). Therefore,
we might not expect successful experiments. Nonetheless, we observe essentially the same results
as for the previous experiments (see Fig. 8 in Appendix E), with the same caveats regarding gaps
between the mixture components in the generating latent space. This suggests that the conditions
derived in Khemakhem et al. (2019), although sufficient for disentanglement, are not necessary.
4.4	EMNIST
4.4.1	Experiment
Figure 3: Spectrum of sorted standard deviations derived from training GIN on EMNIST. On the
right is the equivalent spectrum from PCA, a linear method, on MNIST. The nonlinear spectrum
exhibits a sharp knee not obtained by linear methods. In the nonlinear spectrum, the first 22 latent
variables encode information about the shape of a digit, while the rest of the latent variables encode
noise. This distinction is marked with a dotted line in the left and center figures (see Sec. 4.4.2 for
explanation of the choice of this cut-off). Within the first 22 variables, the first eight encode global
information, such as slant and width, whereas the following 14 encode more local information. This
distinction is marked in the center figure only.
6
Published as a conference paper at ICLR 2020
The data comes from the EMNIST Digits training set of 240,000 images of handwritten digits with
labels (Cohen et al., 2017). EMNIST is a larger version of the well-known MNIST dataset, and also
includes handwritten letters. Here we use only the digits. The digit label is used as the condition u,
hence we construct a Gaussian mixture in the estimated latent space with 10 mixture components.
According to the theory (see 3.1), these are only enough conditions to guarantee identifiability if
there are only four informative latent variables in the generating latent space. We expect that the
true number of informative variables is somewhat higher, so as in Experiment 2 above, we are
operating outside of the guarantees of the theory. In addition, the true generative process of human
handwriting may not exactly fulfill our method’s assumptions, and we might still lack data on rare
or subtle variations, despite the large size of the dataset in comparison to MNIST.
The estimating model is a GIN which uses convolutional coupling blocks and fully connected cou-
pling blocks to transform the data to the latent space (full details in Appendix D). Optimization is
with the Adam optimizer, with initial learning rate 3e-4. Batch size is 240 and the data is augmented
with Gaussian noise (σ = 0.01) at each iteration. The model is trained for 45 epochs, then for a
further 50 epochs with the learning rate reduced by a factor of 10.
4.4.2	Results
^)0OOO
Illll
/2 222
3 3 333
。/2 3
。/23
0/23
o∕a3
0/23
OOOO
Illl
-≈a 2 2
3 3 3 3
卞#④-K
O∕q3
ςj∕23
0/23
。/Z3
O -*--2-S
©: G 3 3
(a) Variable 1: upper width (b) Variable 8: lower width (c) Variable 3: height (d) Variable 4: bend
Figure 4:	Selection of global latent variables found by GIN. Each row is conditioned on a different
digit label. The variable runs from -2 to +2 standard deviations across the columns, with all other
variables held constant at their mean value. The rightmost column shows a heatmap of the image
areas most affected by the variable, computed as the absolute pixel difference between -1 and +1
standard deviations. Variable 1 controls the width of the top half of a digit, whereas variable 8
controls the width of the bottom half. Width in both cases is somewhat entangled with slant. Variable
3 controls the height and variable 4 controls how bent the digit is. Full set of variables for all digits
in Appendix F.

OOOOO
Illlt
λΛ222
3 3 3 3 3
。/23
。/43
0/23
O∕Λ3
0/23
OOOOO
Illll
3 3 3 3 3
(a) Variable 11	(b) Variable 12	(c) Variable 13	(d) Variable 16
Figure 5:	Selection of local latent variables found by GIN. Refer to Figure 4 above for explanation
of the layout. Variable 11 controls the shape of curved lines in the middle right. Digits without such
lines are not affected. Variable 12 controls extension towards the upper right. Variable 13 modifies
the top left of 2, 3 and 7 only (7 not shown here) and variable 16 modifies only the lower right stroke
of a 2. Full set of variables for all digits in Appendix F.
The model encodes information into 22 broadly interpretable latent space variables. The eight vari-
ables with the highest standard deviation encode global information, such as slant, line thickness and
width which affect all digits more or less equally. The remaining 14 meaningful variables encode
more local information, which does not affect all digits equally. We interpret all other variables as
encoding noise. This is motivated mainly by our observation of an abrupt end to any observable
change in the reconstructed digits when any variable after the first 22 is changed. This can be seen
clearly in Fig. 15 in Appendix F. Some variables, particularly the global ones, are not entirely dis-
entangled from another. Nevertheless, the results are compelling and suggest that the assumptions
required by the theory are approximately met.
7
Published as a conference paper at ICLR 2020
We observed some global features which are not usually seen in disentanglement experiments on
MNIST (e.g. Chen et al., 2016; Dupont, 2018). These experiments usually obtain digit slant, width
and line thickness as the major global independent variables. We too observe slant and line thick-
ness as independent variables (variables 2 and 5), but find width to be split into two variables, one
governing the width of the upper half of a digit (variable 1) and the other the lower half (variable 8).
This makes sense, since these can in fact vary independently. We also observe the height of a digit
(variable 3) (see Fig. 4). This does not usually appear in disentanglement experiments, possibly be-
cause it is too subtle a variation for those experiments, but possibly because it is not present or not
discoverable in the smaller MNIST dataset but is in EMNIST.
Local features are also usually not observed in such experiments, so the variables which control
these are particularly interesting. These variables modify only a region of the digit, leaving the rest
of the digit untouched. In addition, digits which do not have the feature which is being modified in
that region are left alone. Examples include variable 13, which changes the orientation of the top-left
stroke in 2, 3 and 7, and variable 16, which modifies only the lower-right stroke of a 2 (see Fig. 5).
The full set of local and global variables can be seen in Fig. 10 to Fig. 15 in Appendix F.
4.4.3	Note on the choice of conditioning variable
The concept of a “true generative process” rests on the assumption that conditioning variables u act
as causes for the latent variables z, such that the elements of the latter become independent given the
former. In the case of handwritten digits, u represents a person’s decision to write a particular digit,
and z determines the hand motions to produce this digit. Modelling u in terms of digit labels is a
plausible proxy for the unknown causal variables in the human brain, and the success of the resulting
model suggests that the assumptions are approximately fulfilled. Identifying promising conditioning
variables u in less obvious situations is an important open problem for future work.
4.4.4	Potential Improvements
Increasing the number of conditioning variables would bring this work closer in line with the existing
theory. At the current value of ten, the theory only applies if there are at most four informative
generating latent variables, which is almost certainly too low a number. One option to increase the
number of conditions is to relax the labels from hard to soft, i.e. compute posterior probabilities
of class membership given a data example. This could be achieved by information distillation as
in Hinton et al. (2015). Another possibility is to split existing labels into sub-labels, for example
making a distinction between sevens with and without crossbars. This may also aid the generation
of more realistic samples, since we observed no sevens with crossbars in our generated samples,
even though they make up approximately 5% of the sevens in the dataset.
5 Conclusion and Outlook
We have expanded the theory of nonlinear ICA to cover problems with unknown intrinsic dimen-
sion and demonstrated an implementation with GIN, a new volume-preserving modification of the
RealNVP invertible network architecture. The variables discovered by GIN in EMNIST are inter-
pretable and detailed enough to suggest that the assumptions made about the generating process are
approximately true. Furthermore, our experiments with EMNIST demonstrate the viability of apply-
ing models inspired by the new theory of nonlinear ICA to real-world data, even when not all of the
conditions of the theory are met.
It is not clear if the methods from this work will scale to larger problems. However, given the recent
advances of similar flow-based generative models in density estimation on larger datasets such as
CelebA and ImageNet (e.g. Kingma & Dhariwal, 2018; Ho et al., 2019), it is a plausible prospect.
In addition, it is not clear whether the method can successfully be extended to the context of semi-
supervised learning, or ultimately, unsupervised learning.
8
Published as a conference paper at ICLR 2020
References
Lynton Ardizzone, Carsten Luth, Jakob Kruse, Carsten Rother, and Ullrich Kothe. Guided image
generation with conditional invertible neural networks. arXiv:1907.02392, 2019.
Tian Qi Chen, Xuechen Li, Roger B Grosse, and David K Duvenaud. Isolating sources of disentan-
glement in variational autoencoders. In Advances in Neural Information Processing Systems, pp.
2610-2620, 2018.
Xi Chen, Yan Duan, Rein Houthooft, John Schulman, Ilya Sutskever, and Pieter Abbeel. Infogan:
Interpretable representation learning by information maximizing generative adversarial nets. In
Advances in neural information processing systems, pp. 2172-2180, 2016.
Gregory Cohen, Saeed Afshar, Jonathan Tapson, and Andre van Schaik. EMNIST: an extension of
MNIST to handwritten letters. arXiv:1702.05373, 2017.
Pierre Comon. Independent component analysis, a new concept? Signal processing, 36(3):287-314,
1994.
Nat Dilokthanakul, Pedro AM Mediano, Marta Garnelo, Matthew CH Lee, Hugh Salimbeni, Kai
Arulkumaran, and Murray Shanahan. Deep unsupervised clustering with gaussian mixture varia-
tional autoencoders. arXiv preprint arXiv:1611.02648, 2016.
Laurent Dinh, David Krueger, and Yoshua Bengio. Nice: Non-linear independent components esti-
mation. arXiv:1410.8516, 2014.
Laurent Dinh, Jascha Sohl-Dickstein, and Samy Bengio. Density estimation using Real NVP.
arXiv:1605.08803, 2016.
Emilien Dupont. Learning disentangled joint continuous and discrete representations. In Advances
in Neural Information Processing Systems, pp. 710-720, 2018.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,
Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Advances in neural infor-
mation processing systems, pp. 2672-2680, 2014.
Irina Higgins, Loic Matthey, Arka Pal, Christopher Burgess, Xavier Glorot, Matthew Botvinick,
Shakir Mohamed, and Alexander Lerchner. β-VAE: Learning basic visual concepts with a con-
strained variational framework. ICLR, 2(5):6, 2017.
Geoffrey Hinton, Oriol Vinyals, and Jeff Dean. Distilling the knowledge in a neural network.
arXiv:1503.02531, 2015.
Jonathan Ho, Xi Chen, Aravind Srinivas, Yan Duan, and Pieter Abbeel. Flow++: Improv-
ing flow-based generative models with variational dequantization and architecture design.
arXiv:1902.00275, 2019.
Aapo Hyvarinen and Hiroshi Morioka. Unsupervised feature extraction by time-contrastive learning
and nonlinear ICA. In Advances in Neural Information Processing Systems, pp. 3765-3773, 2016.
Aapo Hyvarinen and Hiroshi Morioka. Nonlinear ICA of temporally dependent stationary sources.
In Proceedings of Machine Learning Research, 2017.
Aapo Hyvarinen and Petteri Pajunen. Nonlinear independent component analysis: Existence and
uniqueness results. Neural Networks, 12(3):429-439, 1999.
Aapo Hyvarinen, Hiroaki Sasaki, and Richard E Turner. Nonlinear ICA using auxiliary variables
and generalized contrastive learning. arXiv:1805.08651, 2018.
Jorn-Henrik Jacobsen, Arnold Smeulders, and Edouard Oyallon. i-RevNet: Deep invertible net-
works. arXiv:1802.07088, 2018.
Matthew J Johnson, David K Duvenaud, Alex Wiltschko, Ryan P Adams, and Sandeep R Datta.
Composing graphical models with neural networks for structured representations and fast infer-
ence. In Advances in neural information processing systems, pp. 2946-2954, 2016.
9
Published as a conference paper at ICLR 2020
Ilyes Khemakhem, Diederik P Kingma, and AaPo Hyvarinen. Variational autoencoders and nonlin-
ear ICA: A unifying framework. arXiv:1907.04809, 2019.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic oPtimization. arXiv:1412.6980,
2014.
Diederik P Kingma and Max Welling. Auto-encoding variational bayes. arXiv:1312.6114, 2013.
Durk P Kingma and Prafulla Dhariwal. Glow: Generative flow with invertible 1x1 convolutions. In
Advances in Neural Information Processing Systems, pp. 10215-10224, 2018.
Francesco Locatello, Stefan Bauer, Mario Lucic, Sylvain Gelly, Bernhard Scholkopf, and Olivier
Bachem. Challenging common assumptions in the unsupervised learning of disentangled repre-
sentations. arXiv:1811.12359, 2018.
Qingyu Zhao, Nicolas Honnorat, Ehsan Adeli, Adolf Pfefferbaum, Edith V Sullivan, and Kilian M
Pohl. Variational autoencoder with truncated mixture of gaussians for functional connectivity
analysis. In International Conference on Information Processing in Medical Imaging, pp. 867-
879. Springer, 2019.
10
Published as a conference paper at ICLR 2020
Supplementary Material
A Proof of identifiability
This section reproduces a proof from Khemakhem et al. (2019) with some modifications to adapt it
to the context of invertible neural networks (normalizing flows).
Define the domain of fε as Z = Zi X …X Zn. Define the vector of sufficient statistics T(Z)=
(T1,1(z1), . . . , Tn,k(zn)) and the vector of their coefficients λ(u) = (λ1,1(u), . . . , λn,k(u)).
Theorem 1 Assume we observe data distributed according to the generative model defined in Sec.
3.1. Further suppose the following:
(i)	The sufficient statistics Ti,j (z) are differentiable almost everywhere and their derivatives
dTi,j (z)/dz are nonzero almost surely for all z ∈ Zi and all 1 ≤ i ≤ n and 1 ≤ j ≤ k.
(ii)	There exist nk + 1 distinct conditions u0 , . . . , unk such that the matrix
L = (λ(u1) - λ(u0), . . . , λ(unk) - λ(u0))	(8)
of size nk X nk is invertible.
Then the sufficient statistics of the generating latent space are related to those of the estimated latent
space by the following relationship:
T(z) = AT0(w) + c	(9)
where A is a constant, full-rank nk X dk matrix and c ∈ Rnk a constant vector.
Proof: The conditional probabilities pτ,λ,f,ε(x∣u) and pτo,λo,g(x|u) are assumed to be the same in
the limit of infinite data. By expanding these expressions via the change of variables formula and
taking the logarithm we find
logPτ,λ(z∣u) + logp(ε) + log Idet Jf-1 (x) ∣ = logpτχ (w|u) + log Idet Jg-1 (x) ∣	(10)
where J is the Jacobian matrix. Let u0 , . . . , unk be the conditions from (ii) above. We can subtract
this expression for u0 from the expression for some condition ul . The Jacobian terms and the term
involving ε will vanish, since they do not depend on u:
logpz(z|ul) - logpz(z|u0) = logpw(w|ul) - logpw(w|u0).	(11)
Since the conditional probabilities of z and w are exponential family members, we can write this
expression as
n
X
i=1
k
log ZL(UOy + X Ti,j (Z) (λi,j (Ul) — λi,j (UO))
X log Zio(u0) + x Tij(w)(λi,j(Ul)- λi,j (UO))
(12)
where the base measures Qi have cancelled out, since they do not depend on u. Defining λ(u)
λ(U) - λ(UO) and writing the above in terms of inner prodUcts, we find
〈T⑵,λ〉+X log M=+X log 瑞	(13)
for 1 ≤ l ≤ nk. Combining the nk expressions into a single matrix equation we can write this in
terms of L from condition (ii) above and an analogously defined L0 ∈ Rdk×nk:
LT T(Z) = L0TT0(w) +b	(14)
where bl = Pilog Zi (；0)Zi(Ul). Since LT is invertible, we can multiply this expression by its inverse
from the left to get
T(Z) = AT0(w) + c	(15)
11
Published as a conference paper at ICLR 2020
where A = L-T L0T and c = L-T b. It now remains to show that A has full rank.
According to a lemma from Khemakhem et al. (2019), there exist k distinct values zi1 to zik such
that (ddTi(z1),..., ddTi(Zk)) are linearly independent in Rk, for all 1 ≤ i ≤ n. Define k vectors
zl = (z1l , . . . , znl ) from the points given by this lemma. Take the derivative of equation (15) evaluated
at each of these k vectors and concatentate the resulting Jacobians as Q = [JT(z1), . . . , JT(zk)].
Each Jacobian has size nk × n, hence Q has size nk × nk and is invertible by the lemma and the
fact that each component of T is univariate. We can construct a corresponding matrix Q0 made up
of the Jacobians of T0(g-1 ◦ fε(z)) evaluated at the same points and write
Q=AQ0.	(16)
Since Q is full rank, both A and Q0 must also be full rank.
A.1 Remark regarding condition (ii)
If the coefficients of the sufficient statistics λ are generated randomly and independently, then con-
dition (ii) is almost surely fulfilled. In this case, we can ignore the dependence on u to consider the
λ(ul) as independent random variables. Then condition (ii) states that instances of these random
variables are in general position in Rnk , which is true almost surely.
A.2 Remark regarding noise variables in the estimated latent space
Any variables in the estimated latent space whose distribution does not depend on the conditioning
variable u is considered as encoding only noise. Such variables will be cancelled out in equation
(12) and the corresponding column of L0T will contain only zeros. This means the corresponding
column of A will also contain only zeros, so any variation in such a noise variable has no effect on
z. The reverse is also true: if a column of A contains only zeros, the corresponding variable in the
estimated latent space does not depend on u and must encode only noise.
B Sparsity in unmixing matrix: Gaus sian distribution
Suppose samples z from the generating latent space follow a conditional Gaussian distribution. Sup-
pose the estimating model g faithfully reproduces the observed conditional density p(x|u) and sam-
ples w from its latent space also follow a conditional Gaussian distribution. Then we can apply
equation (4) to relate the generating and estimating latent spaces.
The sufficient statistics of a normal distribution with free mean and variance are z and z2 . Hence the
relationship between the latent spaces becomes
zz2	= A ww2 + c	(17)
where the squaring is applied element-wise. We can write A in block matrix form as
A= AA((13)) AA((42))	(18)
and c as
c= cc(2)	(19)
Then:
z = A(1)w + A(2)w2 + c(1)	(20)
z2 = A(3)w + A(4)w2 + c(2)	(21)
so we can write for each dimension i of z
zi = XAi(j1)wj +XAi(j2)wj2 + ci(1)	(22)
jj
zi2 = X Ai(j3)wj + X Ai(j4)wj2 + ci(2)	(23)
jj
12
Published as a conference paper at ICLR 2020
In order to compare the equations, we need to square (22). To do so, we will have to square the
second term on the right hand side, involving wj2 . There is no matching term in (23), so we have to
set all entries of A(2) to zero. In more detail:
(X A(2)w2)= XX Ag) 嘴Ww	(24)
j	j	j0
= X(Ai(j2))2wj4 + X Ai(j2)Ai(j20)wj2wj20	(25)
j	j6=j0
The first term with wj4 matches no term in (23), so we have to set Ai(j2) = 0 for all i and j . This
simplifies the earlier equation:
zi = XAi(j1)wj + ci(1)	(26)
j
The square of the first term on the right hand side involves terms with wj wj0 cross terms:
(X A(I)Wj = X A(1)w2 + X A(I)A(I)Wj wj0	(27)
j	j	j 6=j0
so we have to set Ai(j1)Ai(j10) = 0 for all j 6= j0. This means that the i-th row of A(1) can have at most
one nonzero entry. It must also have at least one nonzero entry, since if the row were all zero, a row
of A would be all zero (since A(2) = 0), but A has full rank. Since there are as many or fewer rows
than columns (n ≤ d), each row of A is linearly independent, so it is not possible for one to be zero.
Hence each row of A(1) has exactly one nonzero entry. Moreover, no two rows of A(1) have their
nonzero entries in the same column. If they did, the two rows would not be linearly independent, but
they must be since A has full rank. Therefore we can write
zi = aiWj + bi	(28)
where ai = Ai(j1) and bi = ci(1) . That is, the generating latent variable zi is linearly related to some
latent variable of the estimating model Wj . This estimated latent variable is uniquely associated with
zi and any estimated latent variables not associated with a generating latent variable zi (in the case
d > n) encode no information about the generating latent space. So the model has decoded the
original latent variables z up to an affine transformation and permutation as a subset of variables
in its estimated latent space and has encoded no information (only noise) into the remaining latent
variables.
C Sparsity in unmixing matrix: two-parameter exponential
FAMILY MEMBERS
The results of Appendix B can be extended to other members of the exponential family with 2
parameters. In the general case, writing Ti,1 = T1 and Ti,2 = T2 for all i, equations (22) and (23)
become
T1(zi) =XAi(j1)T1(Wj)+XAi(j2)T2(Wj)+ci(1)	(29)
jj
T2(zi) =XAi(j3)T1(Wj)+XAi(j4)T2(Wj)+ci(2)	(30)
which, with the definition t = T2 ◦ T1-1 becomes
T1(zi) =XAi(j1)T1(Wj)+XAi(j2)t(T1(Wj))+ci(1)	(31)
t(T1(Wj))=XAi(j3)T1(Wj)+XAi(j4)t(T1(Wj))+ci(2).	(32)
jj
13
Published as a conference paper at ICLR 2020
We can combine these equations to get
t(XA(1)Tι(wj) + XA*(Tι(wj)) + c(1) = XA(3)Tι(wj) + XAS)”ι3)) + c(2)∙
jj	jj
(33)
This equation has many summed terms on the right. Suppose that t has a convergent Taylor expan-
sion in some region of its domain. We can take this expansion of the term on the left and compare
coefficients. Since t cannot be linear, there will be terms in the expansion of order two or higher. As
in the Gaussian case, these polynomial terms create cross terms which are impossible to reconcile
with those on the right hand side of the equation. The only consistent solutions can be found by
setting all coefficients except those of functions of wj (for some j) to zero:
tAi(j1)T1(wj)+Ai(j2)t(T1(wj))+ci(1) =Ai(j3)T1(wj)+Ai(j4)t(T1(wj))+ci(2)	(34)
We can further simplify this equation by examining higher-order terms, but need to know the form
of t to do so. In any case, we can now write equation (29) as
T1(zi) =Ai(j1)T1(wj)+Ai(j2)t(T1(wj))+ci(1)	(35)
showing that each generating latent variable zi is related to exactly one estimated latent variable
wj . As in the Gaussian case, we can use the full rank property of A to see that each estimated
latent variable is associated with at most one generating latent variable, and any estimated latent
variables not associated with any generating latent variables must encode only noise. The task now
is to check the form of t for each two-parameter member of the exponential family, to see what
further constraints we can derive from equation (34). The results are stated in Table 1.
Table 1: Two-parameter exponential family members and selected properties.
Distribution	Sufficient Statistics	t(x)	Latent Space Relationship
Normal	(z,z2)	2 x2	Zi = awj + C
Lognormal	(logz, (logz)2)	2 x2	log Zi = a log Wj + c
Inverse Gaussian	(Z,1/z)	1/x	Zi = awj or Zi = a/wj
Gamma	(log z,z)	exp(x)	Zi = awj
Inverse Gamma	(log z, 1/z)	exp(-x)	Zi = awj
Beta	(log z,log(1 - Z))	log(1 — exp(x))	log Zi = log Wj or log Zi = log(1 — Wj)
14
Published as a conference paper at ICLR 2020
D Network Architecture
The estimating model g is built in the reverse direction for practical purposes, so the models de-
scribed here are g-1 which maps from the data space to the latent space. The type and number
of coupling blocks for the different experiments are shown below. The affine coupling function is
the concatentation of the scale function s and the translation function t, computed together for ef-
ficiency, as in Kingma & Dhariwal (2018). It is implemented as either a fully connected network
(MLP) or convolutional network, with the specified layer widths and a ReLU activation after all but
the final layers. For the convolutional coupling blocks, the splits are along the channel dimension.
The scale function s is passed through a clamping function 2 tanh(s), which limits the output to the
range (-2, 2), as in Ardizzone et al. (2019). Two affine coupling functions are applied per block, as
described in Dinh et al. (2016). Downsampling increases the number of channels by a factor of 4
and decreases the image width and height by a factor of 2, done in a checkerboard-like manner, as
described in Jacobsen et al. (2018). The dimensions are permuted in a random but fixed way before
application of each fully connected coupling block and likewise the channels for the convolutional
coupling blocks. The network for the artificial data experiments has 4,480 learnable parameters and
the network for the EMNIST experiments has 2,620,192 learnable parameters.
Table 2: Network architecture for artificial data experiments
Type of block	Number	Input shape	Afine coupling function layer widths
Fully Connected Coupling	8	10	5 → 10 → 10 → 10
Table 3: Network architecture for EMNIST experiments
Type of block	Number	Input shape	Afine coupling function layer widths
Downsampling	1	(1, 28, 28)	
Convolutional Coupling	4	(4,14,14)	2 → 16 → 16 → 4
Downsampling	1	(4,14,14)	
Convolutional Coupling	4	(16,7, 7)	8 → 32 → 32 → 16
Flattening	1	(16, 7, 7)	
Fully Connected Coupling	2	784	392 → 392 → 392 → 784
D. 1 Note on Optimization Method
In the experiments described in this paper, the mean and variance of a mixture component was
updated at each iteration as the mean and variance of the transformations to latent space of all data
points belonging to that mixture component in a minibatch of data D :
μi(u0; θ) — Ed：u=uo(g-1(x; θ))	(36)
σ2(u0; θ) — VarD：u=uo(g-1(x； θ)).	(37)
Hence the parameters of the mixture components would change in each batch, according to the data
present. The notation μi(u; θ) does not indicate that μ is directly parameterized by θ and learned,
instead it indicates that μ is a function of g-1 which is parameterized by θ. A change in θ will also
change the output of μ, given the same mini-batch of data D. The same holds for σi(u; θ).
We expect that specifying the means and variances as learnable parameters updated in tandem with
the model weights would have worked equally well.
15
Published as a conference paper at ICLR 2020
E Figures from the Artificial Data Experiments
Figure 6: Experiment 1: Five mixture components and 100,000 data points. GIN successfully re-
constructs the generating latent space and gives importance to only two of its ten latent variables,
reflecting the two-dimensional nature of the generating latent space.
Figure 7: Same experiment as in Figure 6 with the number of data points reduced to 10,000. GIN
fails to successfully estimate the ground truth latent variables, due to limited data: The first variable
(x-axis) is well approximated in the reconstruction, but the second variable (y-axis) is split into
two in the reconstruction, one capturing mainly information about the lower two clusters (shown
here) and another information about the other mixture components (not shown). We also observe
a less clear spectrum, where three variables are given more importance than the rest, not faithfully
reflecting the two-dimensional nature of the generating latent space.
Figure 8: Experiment 2: Only three mixture components (not sufficient for identifiability according
to the theory). Nevertheless, GIN successfully reconstructs the ground truth latent variables. This
suggests that the current theory of nonlinear ICA relies on sufficient, but not necessary, conditions
for identifiability.
16
Published as a conference paper at ICLR 2020
F EMNIST FIGURES
夕-729 q夕号9 9 ?夕9 0-夕夕，夕夕夕q
zg g 8 g ? oɔθg gʃɑo Y 0zw ∕g^g
7-7777 7c*97777777 77771
/ G xs666l0⅛>q 6 J Q 464 4
5*5∙655r55s555v6y5vosΓ5
√τ 0 ¥uu ' q"vy5q4√F，。74
^33∂3 33333 553333∙^3J1
7 N 3a>22□aa□久入 Nma 上 2 2 1
////I/1 'Sl — //-------//// / i
OO000 00。。。。DOo/90〃0,0
9q9,qqqc^'3 q q 夕夕夕 9 夕 q,qq
8 8 g ? OOqGoOOgg 8/ʃ? OOgg 3 g 3
7017717777777^/7777771
4g44gg6gg，v9/，4』66&6g
5£Sf5565555 夕Sr5ss555
4qy44qulr 4 夕 4夕，，Vyy，44
3333335 33 33333333333
2QZZajbɪrt 2aJ-72 3 a r∙r<2 r<
Λ/ Il /■ H l∙ .H H- f/ /r /f B/ // Zz Jl H /I H tl // 11
。。0。OOoOO3OOOQ。。
(a) Full Temperature	(b) Reduced Temperature (T = 0.8)
Figure 9: Full and reduced temperature samples from the model trained on EMNIST. Reduced tem-
perature samples are made by sampling from a Gaussian distribution where the standard deviation
is reduced by the temperature factor. The 22 most significant variables are sampled, with the others
kept to their mean value. This eliminates noise from the images but preserves the full variability of
digit shapes. Each row has the same latent code (whitened value) but is conditioned on a different
class in each column, hence the style of the digits is consistent across rows.
17
Published as a conference paper at ICLR 2020
ðððððθθθθ
333333333
√√√√√√√√9
“5555555
444664>GG(p
777777777
JJggggggg
夕9夕另夕夕夕夕9

0000000020
I I I ////// ʃ
2 NNNNNNNNiZ
3333333331
√t∕√√√√√√∕√
5 5555566S5
G G666666/已
777777777√
Z g g ? g gg W W
另夕夕夕夕夕9夕，
(a)	Variable 1: width of top half
(b) Variable 2: slant/angle
OOOO 0 0。
(c) Variable 3: height	(d) Variable 4: bend through center
Figure 10: Most significant latent variables 1 to 4. Each row is conditioned on a different digit label.
The variable runs from -2 to +2 standard deviations across the columns, with all other variables
held constant at their mean value. The rightmost column shows a heatmap of the image areas most
affected by the variable, computed as the absolute pixel difference between -1 and +1 standard
deviations.
3 3 33 33
√ √ √ √ √ √
(rs^5∙f555
6 6 6 6 6 6 6
77 7 7 7 7 7
97 g g g g g
夕夕夕夕夕夕夕
0∕q3√s67g 9
O/□3"5G7g9
。,ClCrj4567g 9
。/CI3"567g 夕
o∕a3 夕 567009
0∕23y567g9
O∕23ys67g9
O∕z3γs67g9
6/2345673 9
18
Published as a conference paper at ICLR 2020
一 q * ":⅛-¢3 可？.「4-④/
0/23 35*67?夕
。/N3y5*67g9
0∕23ys67F9
。/23ysG7g9
o∕a3 4 567009
0/23456700 9
。/a3τ567gq
。/J3q5G78q
o∕a3H5GT8q
0 /A一3.⅛,' 3<6Z 疗 5
Q∕A34567g9
0la3"SG7g9
0∕a3y567g9
0∕a34 567g 9
o∕a3 4 56700 9
0∕a3y5G7g,
0∕a3y567g9
o∕2395G7g9
o∕23y5679夕
(a) Variable 5: line thickness
(b)	Variable 6: slant of vertical bar in 4,7 and 9
心 戋:4 +
0/23" 5 87g?
0/23。567。。
0∕23y567g 号
。/N3y5G7g夕
o∕a3 夕 567009
。/J3ys67g9
0∕a34,6700 9
O∕c43"s67g9
。/a3“，G7gg
θðθðððθθθ
ιιιιιιιιι
2N2NN2N7 7 A
333333 3 3 3)
√^√√√√√y√ ⅛
SSS55*5*5*5T 修
3666666GG。
777777777
Bggggggg『湿
9另夕夕夕夕夕夕夕"
(c)	Variable 7: height of horizontal bar
(d)	Variable 8: width of bottom half
Figure 11: Most significant latent variables 5 to 8. Each row is conditioned on a different digit label.
The variable runs from -2 to +2 standard deviations across the columns, with all other variables
held constant at their mean value. The rightmost column shows a heatmap of the image areas most
affected by the variable, computed as the absolute pixel difference between -1 and +1 standard
deviations.
19
Published as a conference paper at ICLR 2020
oaooooooo
I l l I I l l I I
a2^22aaaa
333333333
V√√√√√√√√
SSSS5S556
66666666G
777777777
Xgggggg，9
?另夕99夕9夕9
θθθðθððθθ
ιιιιιιιιι
22222NJUJI
3 3 3 3 33333
v√√√√√√√v
£££555555
G66G666GG
777777777
Rgmggg
9夕夕夕夕夕夕夕夕
(a) Variable 9: extension of center left feature towards (b) Variable 10: openness of lower loop
the left
ððððððððθ
ιιιιιιιιι
2222222；IN 1
333333333 3
qqqqqq斗斗廿,
SSS555555 ?
66666666〃 ⅛
777777777
ggggggggg/
O/N34SG7V彳
O∕234567g9
。/N34567gg
0∕ri3y567g 夕
o∕a3 夕 567DQ9
。/Λ3y567g9
o∕A3y5A7g9
0∕<∖3 g 50700 9
0∕*X3V^∕V7000/
(c) Variable 11: shape of center right feature
(d) Variable 12: top right corner
Figure 12: Most significant latent variables 9 to 12. Each row is conditioned on a different digit label.
The variable runs from -2 to +2 standard deviations across the columns, with all other variables
held constant at their mean value. The rightmost column shows a heatmap of the image areas most
affected by the variable, computed as the absolute pixel difference between -1 and +1 standard
deviations.
20
Published as a conference paper at ICLR 2020
θðθθððððð
ιιιιιιιιι
222222222
333333333
√√√√√√√√√
5555555$5
66666666G
777777777
ggggggggg
ððððððθθð
ιιιιιιιιι
"口 22NN22
333333333
√√√√√√√√√
565555555
666666666
777777777
ggggggggg
9夕夕99夕夕99
(a)	Variable 13: orientation of stroke in top left corner
for 2, 3 and 7
(b)	Variable 14: shape of top part of bottom loop
0∕23y567OQ9
。/23y567g 夕
0∕a3y5G7g 夕
O/239567g9
o∕a3 夕 567009
0∕a34567g9
。/α3y567g 9
O∕j3ys67g 9
0∕A34567g9
。/23y5*G7g9
。/23ys67gg
0∕a3y5o7g夕
O∕23ys67g夕
o∕a3 夕 567009
0/234567，夕
。/23y567g9
0/23456789
。/23466700 夕
(c)	Variable 15: angle of centrally located horizontal
features
(d) Variable 16: bottom right stroke of 2
Figure 13:	Most significant latent variables 13 to 16. Each row is conditioned on a different digit
label. The variable runs from -2 to +2 standard deviations across the columns, with all other variables
held constant at their mean value. The rightmost column shows a heatmap of the image areas most
affected by the variable, computed as the absolute pixel difference between -1 and +1 standard
deviations.
21
Published as a conference paper at ICLR 2020
ððððððððð
Iiiiiiiii
333333333
√√√√√√√√√
555555555
666666666
777777777
ggggggggg
夕夕夕夕夕夕夕夕9
0∕a3ys67F9
。/a3ys67009
。/a3y567g9
o∕a3 夕 567g 夕
o∕a3 4 567009
0/234 567,夕
0∕a3y567g 9
0/23 "56700 9
0/23456700 9
(a)	Variable 17: top left stroke of 4
(b)	Variable 18: top stroke of 5 and 7
ððððððððθ
Illlllill
222NNNNNN
333333333
√√√√√√√√√
555555555
666666G6G
777777777
ZgRgggggg
99夕夕夕夕夕夕夕
o∕23y5G7g9
。/23456700 夕
。/a3y567g 9
O∕23y567g9
o∕a3 夕 567009
。/a3y567g 夕
O∕a3y567g夕
0∕J3√567g 夕
0∕Γ<3√567g 夕
(c)	Variable 19: extension towards top right
(d)	Variable 20: curvature of vertical stroke of 4
Figure 14:	Most significant latent variables 17 to 20. Each row is conditioned on a different digit
label. The variable runs from -2 to +2 standard deviations across the columns, with all other variables
held constant at their mean value. The rightmost column shows a heatmap of the image areas most
affected by the variable, computed as the absolute pixel difference between -1 and +1 standard
deviations.
22
Published as a conference paper at ICLR 2020
ððððððθθð
ιιιιιιιιι
222222222
333333333
√√√√√√√√V
555555555
ζp(p(pζ^ζp(p(p(pζp
777777777
ZggggggRg
夕夕夕，夕夕夕夕9
* - ,- ,.. ) , 「 0
。/113 4 567g9
。/N3">567gg
。/a3">567g 夕
。/N3y567g夕
o∕a3 4 567009
。/23y567gg
0∕a3y567g 夕
0∕a3y567g 9
O∕23y5 67g9
(b) Variable 22: extension towards top left
(a) Variable 21: thickness of upper loop
0/23 4 567009
0∕a3 4 5G7g9
。/239567g9
O/239567g9
o∕a3 夕 567009
。/23y567g 夕
。/23y567g9
。/239567g9
o∕a3 夕 567g9
0/23 4 567009
0∕a3 4 5G7g9
。/239567g9
O/239567g9
o∕a3 夕 567009
0∕a3 4 5G7g9
。/239567g9
O/239567g9
0∕a3 夕 567g9
(d) Variable 24: no effect
(c) Variable 23: no effect
Figure 15:	Most significant latent variables 21 to 24. Each row is conditioned on a different digit
label. The variable runs from -2 to +2 standard deviations across the columns, with all other variables
held constant at their mean value. The rightmost column shows a heatmap of the image areas most
affected by the variable, computed as the absolute pixel difference between -1 and +1 standard
deviations.
23