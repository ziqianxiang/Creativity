Table 1: Training set sizes and length of expressions (in tokens) for different datasets. FWD and IBP tendto generate examples with outputs much longer than the inputs, while the BWD approach generates shorteroutputs. Like in the BWD case, ODE generators tend to produce solutions much shorter than their equations.
Table 2: Accuracy of our models on integration and differential equation solving. Results are reportedon a held out test set of 5000 equations. For differential equations, using beam search decoding significantlyimproves the accuracy of the model.
Table 3: Comparison of our model with Mathematica, Maple and Matlab on a test set of 500 equations.
Table 4: Examples of problems that our model is able to solve, on which Mathematica and Matlab were notable to find a solution. For each equation, our model finds a valid solution with greedy decoding.
Table 5: Top 10 generations of our model for the first order differential equation 162x log(x)y0 +2y3 log(x)2 -81y log(x) + 81y = 0, generated with a beam search. All hypotheses are valid solutions, and are equivalent upto a change of the variable c. Scores are log-probabilities normalized by sequence lengths.
Table 6: Accuracy of our models on function integration. We report the accuracy of our model on the threeintegration datasets: forward (FWD), backward (BWD), and integration by parts (IBP), for four models trainedwith different combinations of training data. We observe that a FWD-trained model performs poorly when it triesto integrate functions from the BWD dataset. Similarly, a BWD-trained model only obtain 27.5% accuracy onthe FWD dataset, as it fails to integrate simple functions like x5 sin(x). On the other hand, training on both theBWD + IBP datasets allows the model to reach up to 56.1% accuracy on FWD. Training on all datasets allows themodel to perform well on the three distributions.
Table 7: Examples of functions / integrals that the FWD-trained model can integrate, but not SymPy.
Table 8: Accuracy of Mathematica on 500 functions to integrate, for different timeout values. As thetimeout delay increases, the percentage of failures due to timeouts decreases. With a limit of 3 minutes, timeoutsonly represent 10% of failures. As a result, the accuracy without timeout would not exceed 86.2%.
Table 9: Examples of functions with their integrals, generated by our FWD, BWD and IBP approaches.
