Table 1:	Find rates for our human-useful problem set by approach type. The set consists of 200 I/Oexamples, derived from 40 ground-truth programsApproach	I/O examples solved Unique functionalities foundDiscriminated sub-corpora	81.5(σ = 8.28)	20.3(σ = 2.08)Random sub-corpora	43.5(σ = 4.29)	11.8(σ = 1.20)Genetic Programming	64.6(σ = 3.37)	22.5(σ = 1.86)related research for simpler domain-specific languages, and lastly we explore the the effects ofdecisions made by our discriminator in more detail.
Table 2:Approach	I/O examples solved Unique functionalities foundCollated discriminated corpus	44.5(σ = 7.5)	11.3(σ = 2)Random corpus	16.1(σ = 2.5)	3.85(σ = 0.59)inator has driven program generation towards a set of programs which is far more representative ofthe types of behaviour present within the human-useful programs.
Table 3: The 16 operators available in implementation of language, with the inputs to the functionsand their purposeOperator	InputAssign from Variable to Array	Array: Write Target; Integer: Array Index; Integer: Read TargetAssign from Variable to Array	Array: Read Target; Integer: Array Index; Integer: Write TargetCreate Array Get Array Length Variable to Literal Arithmetic Add Arithmetic Subtract Arithmetic Multiply Arithmetic Divide Arithmetic Modulo Assign Variable to other Variable Flow: Loop Flow: Condition: Greater than 0 Flow: Condition: Integer equality	Array: Array to initialise/overwrite; Integer: Length of Ar- ray Array: Array to read length of; Integer: Write Target Integer: Write Target; Literal: Can be -1, 0 or 1 Integer: Write Target; Integer: Read 1; Integer: Read 2 Integer: Write Target; Integer: Read 1; Integer: Read 2 Integer: Write Target; Integer: Read 1; Integer: Read 2 Integer: Write Target; Integer: Read 1; Integer: Read 2 Integer: Write Target; Integer: Read 1; Integer: Read 2 Integer: Write Target; Integer: Read 1 Integer: Iterator; Integer: Loop to Integer: Variable to test Integer: Variable to test 1; Integer: Variable to test 2Recursive Function Call	Array: Array to set to function return; Array: Input 1; Inte- ger: Input 2No-Operation	No Inputs6.2	Beam SearchEach line is given a “depth” to search, ranging from a single option to up to a maximum of 10 op-tions. The combination of all programs within this space are initially added to a set, which thereforehas a size equal to the product of all the depths. The beam search constructs the initial search volumeby iteratively increasing the search depth of a single line to maximise the exploration value function.
Table 4: Examples of outputs of generated programs, randomly chosen from 3 sub-corpora. Thesesub-corpora are organised based on ancestry, how many parent-child relationships exist between thefirst sub-corpus (ancestry=0).
Table 5: Human useful programs, specified by user and presented to the system as a set of IOmappings only.
Table 7: Continuation of table 5. The programs in this table are those which use both the input arrayand the input integer.
