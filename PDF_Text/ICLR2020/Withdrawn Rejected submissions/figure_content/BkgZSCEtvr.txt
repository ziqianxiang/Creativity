Figure 1: Illustration of evolution of message passing mechanisms from discrete updates (a) to ourproposed continuous updates (b). Continuous Graph Flow leverages normalizing flows to transformsimple distributions (e.g. Gaussian) at t0 to the target distributions at t1. The distribution of onlyone graph node is shown here for visualization, but, all the node distributions transform over time.
Figure 2: Visualization of generated graphs from our model. Our model can capture the charac-teristic of datasets and generate diverse graphs not appearing in the training set.
Figure 3:	Qualitative results for image puzzle generation. Samples generated using our modelfor 2x2 MNIST puzzles (above horizontal line) and 3x3 CelebA-HQ puzzles (below horizontal line)in (a) unconditional generation and (b) conditional generation settings. For setting (b), generatedpatches (highlighted in green boxes) are conditioned on the remaining patches (from ground truth).
Figure 4:	Visualization for layout generation on Visual Genome. Our CGF model can generatediverse layouts for the same scene graph. Upper row: layout samples with unconditional generation.
Figure 5: Qualitative results on CelebA-HQ for image puzzle generation. Samples generatedusing our model for 3x3 CelebA-HQ puzzles in unconditional generation setting. Best viewed incolor.
Figure 6: Qualitative results on CelebA-HQ for image puzzle generation. Samples generatedusing our model for 3x3 CelebA-HQ puzzles in conditional generation setting. Generated patchesare highlighted in green. Best viewed in color.
Figure 7: Examples of Unconditional generation of layouts from scene graphs for COCO-Stuffdataset. We sample 4 layouts. The generated results have different layouts, but sharing the samescene graph. Best viewed in color. Please zoom in to see the category of each object.
Figure 8: Conditional generation of layouts from scene graphs for COCO-stuff dataset. Wesample 4 layouts. The generated results have different layouts except the conditional layout objectsin (b), but sharing the same scene graph. Best viewed in color. Please zoom in to see the categoryof each object.
Figure 9:	Unconditional generation of layouts from scene graphs for Visual Genome dataset.
Figure 10:	Conditional generation of layouts from scene graphs for Visual Genome dataset.
Figure 11: Graph generation on ego-small. Samples generated using (a) our CGF and (b)GraphRNN.
Figure 12: Graph generation on community-small. Samples generated using (a) our CGF and(b) GraphRNN.
Figure 13: Visualization illustrating the effect on number of nodes in the graph on the number offunction evaluations (NFE) required by the ODE solver for (a)ego-small and (b)community-small datasets used in our graph generation model.
