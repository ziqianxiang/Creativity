Figure 1: Using ApproxLine to find probability bounds for a generative specification over flippedimages. Green polygonal chains represent activation distributions at each layer exactly. Blue boxesare relaxations of segments highlighted by yellow boxes. We label regions with their probabilities.
Figure 2: A comparison of different methods that compute probabilistic bounds for C .
Figure 3: Examples of equally spaced interpolated images. The original images are at the 0th and10th positions, and their immediate neighbors are their respective reconstructions. (a) is betweenthe same person with the same attributes using CycleAE32 trained for 200 epochs. (b) is betweenhorizontally flipped images using CycleAE64 trained for 20 epochs. (c) is between an image and theaddition of the “mustache” feature vector using CycleAE32 again.
Figure 4: Comparing the different models usingprobabilistic ApproxLine20.0002 to provide lower boundsfor k ∑k=ι Ci(nE(a)n(FliPPed(a)),aA,i), where aand Flipped(a) are the images shown in Figure 3b. Thewidth of the largest Probabilistic bound was smaller than3 × 10-6, so only the lower bounds are shown. Less than50 seconds were necessary to comPute each bound, andthe fastest comPutation was for CycleAE64 at 30 seconds.
Figure 5: A comparison of speed (a) and Probabilistic Bound Widths (b) of ApproxLine for differentapproximation hyperparameters, on CycleAE6 4 trained for 200 epochs.
Figure 6: Blue means that the interpolative specification visualized in Figure 3b has beendeterministically and entirely verified for the attribute (horizontal) using ApproxLine20.0002 . Redmeans that the attribute can not be verified. In all cases, this is because the specification was notrobust for the attribute. One can observe that the most successful autoencoder is CycleAE64 .
