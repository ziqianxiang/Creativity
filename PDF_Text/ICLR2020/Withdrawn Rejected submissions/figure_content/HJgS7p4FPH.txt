Figure 1: In a typical DRL system, environmentsrun on CPUs and DNNs on GPUs.  The limitedCPU-GPU communication bandwidth and smallset       of environments prevent full GPU usage.
Figure  2:   Our  CUDA-based  Atari  emulator  uses  anAtari  CPU  kernel  to  emulate  the  functioning  of  theAtari CPU and advance the game state, and a secondTIA kernel to emulate the TIA and render frames di-rectly in GPU memory.  For episode resetting we gen-erate and store a cache of random initial states.  Mas-sive parallelization on GPU threads allows the parallelemulation of thousands of Atari games.
Figure 3:  FPS and FPS / environment on System I in Table 2, for OpenAI Gym OpenAI (2017),CuLECPU, and CuLE, as a function of the number of environments, under different load conditions:emulation only, and inference only. The boxplots indicate the minimum, 25ᵗʰ, 50ᵗʰ, 75ᵗʰ percentilesand maximum FPS, for the entire set of 57 Atari games.
Figure 4: FPS as a function of the environment step, measured on System I in Table 2 for emulationonly on four Atari games, 512 environments, for CuLE; each panel also shows the number of reset-ting environments.  FPS is higher at the beginning, when all environments are in similar states andthread divergence within warps is minimized; after some steps, correlation is lost, FPS decreasesand  stabilizes.   Minor  oscillations  in  FPS  are  possibly  associated  to  more  or  less  computationaldemanding phases in the emulation of the environments (e.g., when a goal is scored in Pong).
Figure 5: FPS generated by different emula-tion engines on System I in Table 2 for As-sault, as a function of the number of environ-ments, and different load conditions for A2Cwith N-step bootstrapping, N = 5).
Figure 6: Different batching strategies are definedby the number of batches, N-Steps and Steps PerUpdate (SPU) parameters.   The on-policy singlebatch case (panel a) is a special case of the moregeneral, off-policy multi batch approach (panel b).
Figure 7: Average testing score and standard deviation on four Atarigames as a function of the training time, for A2C+V-trace, SystemIII in Table 2, and different batching strategies (see also Table 3).
Figure 8: FPS as a function of the environment step, measured on System I in Table 2 for emulationonly on four Atari games, 512 environments, for CuLECPU; each panel also shows the number ofresetting environments.  A peak in the FPS at the beginning of the emulation period, as in the caseof GPU emulation in Fig. 4, is not visible in this case.
Figure  9:   FPS  generated  by  different  emulation  engines  on  System  I  in  Table  2  for  differentAtari games, as a function of the number of environments, and different load conditions (the mainA2C OpenAI (2017) loop is run here, with N-step bootstrapping, N = 5.
Figure 10: Average testing scores measured on 10 CuLECPU and OpenAI Gym environments, whiletraining with A2C+V-trace and CuLE, as a function of the training frames; 250 environments areused for Ms-Pacman, given its higher variability. The shaded area represents 2 standard deviations.
