Figure 1: SR generations of four different settings: Bicubic, RCAN, RCAN with denosing input byMatlab, and our model. We marked some obvious details in red rectangles to indicate the advantageof our method.
Figure 2: The illustration of the proposed JPG-SR model. The total model can be divided into theJPG recovering part, the SR generating part, and the reconstruction loss part.
Figure 3: The comparison of compressed JPG image and its LR counterpart. We choose a typicalbuilding image from Urban100 dataset (Huang et al., 2015). Given the LR image, we leveragePillow to compress it with 80 percent lower in quality. Benefiting from the compression process,C-JPG takes only 12K storage space, compared to the 82K LR image. However, the visual feelingof C-JPG displays more unpleasant details than LR.
Figure 4: The s-LWSR architecture (Li et al., 2019).
Figure 5: The comparison of C-JPG SR model and other SR methods. Inputs are divided into 20%quality JPG images (C-JPG) and Matlab pre-denosing images (M). Details show that our modelachieves the best performance compared with others.
Figure 6: More comparisons of our C-JPG SR model and other leading SR methods. Inputs chosenfrom BSD100 Martin et al. (2001) and Urban100 Huang et al. (2015) are divided into 20% qualityJPG images (C-JPG) and Matlab pre-denosing images (M).
Figure 7: More comparisons of our C-JPG SR model and other leading SR methods. Inputs chosenfrom the Internet are divided into 20% quality JPG images (C-JPG) and Matlab pre-denosing images(M). It can be seen that our model achieves the best performance compared with others.
