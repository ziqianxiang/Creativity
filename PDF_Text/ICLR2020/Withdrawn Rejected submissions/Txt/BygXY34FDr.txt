Under review as a conference paper at ICLR 2020
Formatting Instructions for ICLR 2020
Conference Submissions
Anonymous authors
Paper under double-blind review
Ab stract
In this paper, we show how novel transfer reinforcement learning techniques can
be applied to the complex task of target driven navigation using the photorealistic
AI2THOR simulator. Specifically, we build on the concept of Universal Successor
Features with an A3C agent. We introduce the novel architectural 1 contribution of
a Successor Feature Dependant Policy (SFDP) and adopt the concept of Variational
Information Bottlenecks to achieve state of the art performance. VUSFA, our final
architecture, is a straightforward approach that can be implemented using our
open source repository. Our approach is generalizable, showed greater stability in
training, and outperformed recent approaches in terms of transfer learning ability.
1	Introduction
The human’s ability of navigating unknown spaces (e.g. a firefighter finding the fire hydrant very
quickly) primarily relies on visual perception, as well as on previous experience and heavy training
(Ramirez et al., 2009). In robotics, we would like to mimic this human behaviour. The advancement
of visual navigation algorithms essentially contribute to the prevalence and mobility in robotics and
therefore, many different approaches are being explored. Previous research has studied map-based,
map-building, and map-less approaches (Bonin-Font et al., 2008; Oriolo et al., 1995; Borenstein &
Koren, 1991). In the past, map-based and map-building approaches have been favoured. However,
they heavily depend on an accurate mapping of the environment. Also, it requires a carefully executed
human-guided training phase which limits its generalizability (Filliat & Meyer, 2003). With recent
advances in Deep Reinforcement Learning (DRL) (Mnih et al., 2015; Silver et al., 2016; 2017),
map-less navigation has experienced major advancements (Zhu et al., 2017; Mirowski et al., 2018). It
has been demonstrated that DRL-based methods are now able to solve navigation tasks in a more
human-like manner(Fan et al., 2018).
Research has shown that DRL-based navigation, in particular target driven visual navigation, is still
a challenging task especially when targets are represented in the form of visual information that is
highly dynamic. In previous navigation paradigms, the agent navigates to a target demonstrating
specific properties (e.g. a yellow cone, such as in the case of Zhang et al. (2017)), whose location
may change over time. In contrast, in target driven visual navigation, the agent should be able to
learn to navigate in a persistent state space to a dynamic set of goals. The agent is required to learn to
navigate when both the goal and the current state are presented as visual images.
A current challenge for DRL algorithms is learning new tasks or goals that vary from what the agent
was initially trained for. This ability is called transfer learning. There are two popular strategies
for achieving transfer learning in DRL, either by using the concept of General Value Functions
(GVF) (Sutton et al., 2011) or by using Successor Feature Approximation (SFA) (Dayan, 1993). For
the task of target driven visual navigation, Zhu et al. (2017) demonstrated that an A3C agent using the
concept of GVF can improve the transfer learning ability. GVF does not however allow us to easily
see the underlining process of learning the dynamics of tasks and GVF agents also frequently struggle
in complex environments (Sutton et al., 2018). The second strategy, applying SFA, enables us to
capture the dynamics of the environment by attempting to learn future state visitations, although these
also encounter limitations when facing multiple tasks. Universal Successor Features Approximators
(USFA)(Borsa et al., 2018), which is an extension of SFA, is able to consider multiple tasks and can
improve the transfer learning ability of the agent.
1https://github.com/shamanez/VUSFA-Variational-Universal-Successor-Features-Approximator
1
Under review as a conference paper at ICLR 2020
In summary, our research contribution is threefold:
•	For the first time in the literature, we apply Universal Successor Feature Approximators
(USFA) for the complex task of target driven visual navigation. Our new approach provides
a stable training mechanism and enhances the transfer reinforcement learning ability in
complex environments.
•	We introduce the concept of a Successor Feature Dependant Policy (SFDP), a novel archi-
tectural contribution in which the policy can directly make use of the information presented
by USFA (an abstract map in our case). This important add-on significantly improves the
transfer learning ability of the DRL agent.
•	Finally, we contribute Variational Universal Successor Feature Approximators (VUSFA), by
adopting the concept of Variational Information Bottlenecks. We show that this combination
works stably with complex tasks such as target driven visual navigation in the photo-realistic
AI2THOR environment (Kolve et al., 2017). Besides stable convergence, our approach
shows possible ways in which transfer learning could be improved in the future.
2	Background
2.1	Transfer in Reinforcement Learning
Transfer in reinforcement learning agents can be described as the ability of an agent to generalize
over different tasks while sharing knowledge between them. In this paper we tackle the problem
of transfer reinforcement learning with respect to Successor Feature Reinforcement Learning (SF-
RL) (Barreto et al., 2017). Specifically we develop on the concept of Universal Successor Feature
RL (USF-RL) (Ma et al., 2018b) which is an extension of SF-RL. In the next section we will first
introduce basic concepts where we have used throughout our research.
2.1.1	General Value Functions
We can formalize the goal-directed navigation task as a Markov Decision Process (MDP). The
transition probability p(st+1 |st,at) defines the probability of reaching the next state st+1 when action
at ∈ A is taken in state st ∈ S . For any goal g ∈ G (in our case G ⊆ S), we define a goal dependent
reward function rg(st,at,st+1) ∈ R and a discount function γg(st) ∈ [0, 1] (for terminal state, γg = 0).
For any policy π(at |St), a GVF (Sutton et al., 2011; SchaUl et al., 2015) can be defined as follows:
∞	t
Vgπ (s) =Eπ ∑rg(st,at,st+1) ∏γg(sk)s0 =s	(1)
t=0	k=0
∏P
The assumption for any goal g is that there exists an optimal value function Vgg (s), which is evaluated
according to a goal oriented optimal policy πgP . The general aim of agent’s learning is to find the
optimal policy πP that maximises the future discounted rewards starting from s0 and following πP .
To generalize over the goal space G , the agent needs to learn multiple optimal policies as well as
optimal value functions in order to navigate to a goal. Each goal is considered a new task and the
πP
agent should be able to quickly adapt to find Vg g (s) and πgP.
2.1.2	Universal Successor Features
Universal Successor Features (USF) (Ma et al., 2018b) in an extension of the idea of Successor
Features (SF) described in Kulkarni et al. (2016) and Barreto et al. (2017). Similar to the concept
of SF, USF also follows the idea that the immediate scalar reward rg can be defined as a linear
combination of state representations φ and a goal dependent reward prediction vector ωg as in
Equation 2.
In the Equation 2, φ (st , at , st+1 ) represents the dynamics or the physical features the agent sees when
transitioning between states st and st+1 after taking an action at. We approximate φ(st,at,st+1) as
φ(st+1) following Ma et al. (2018a); Borsa et al. (2018) since it is convenient for the agent to rely on
the state representation of the new state φ(st+1) to recover the scalar reward rg rather than trying to
capture physical features of transition dynamics.
2
Under review as a conference paper at ICLR 2020
rg(st,at,st+1) ≈ φ(st,at,st+1)>ωg
≈ φ(st+1)>ωg
(2)
This allows us to describe the value function as a cumulative sum of the discounted φ as follows:
Vgπ (s) = Eπ
∞	t
∑φ(st+1)∏γg (sk) s0 = s
t=0	k=0
>
ωg
(3)
ψgπ(st)>ωg
where ψgπ (st) is defined as the Universal Successor Features (USF) of state st (Ma et al., 2018b).
Intuitively, ψgπ (st) can be thought of as the expected future state occupancy. Unlike traditional
Successor Feature Approximation, USF is based on both the state and the goal. The value function
defined with USFA has similar properties to GVFs. The modified Vgπ (s) with ψ incorporates shared
dynamics between tasks.
Learning the USFA is accomplished in the same way as the value function update by using the
following TD (Temporal Difference) error:
L =Eπ[φ(st+1)+γg(s)ψgπ(st+1)] -ψgπ(st)
(4)
As illustrated by (Ma et al., 2018b) the vectors ψgπ (st), φ(st+1) and ωg can be approximated by
neural networks parameterized by θπ , θφ and θω . In this paper we incorporate the concept of USF
with an A3C agent (Mnih et al., 2015) and trained all three sets of parameters jointly.
2.2	Applicability of USFA in Large Scale DRL Problems
The USFA model introduced by Ma et al. (2018b) extends the concept of SF (Barreto et al., 2017;
Kulkarni et al., 2016) generalized over multiple tasks with the actor-critic algorithm. However, their
method is yet to be evaluated with complex tasks such as target driven visual navigation. In this
section we point out the challenges when adapting Ma et al.’s model to complex tasks.
The state representation φ vector mentioned in the USF architecture plays a crucial role. It decouples
the scalar reward rt and learns the USFA ψgπ (st) with the TD-error loss function (Equation 4). The
authors Ma et al. (2018b) propose learning φ using an autoencoder prior to the main reinforcement
learning algorithm. φ is supposed to capture the salient information about each state st , but when the
states consist of complex visual information such as photo-realistic images, defining an optimal φ
representation with an autoencoder can be problematic. Training a convolutional autoencoder which
generalize over many states is often prone to over-fitting.
Training ωg by a regression loss with respect to a scalar reward rt (Equation 2) can also be problematic.
The main reason is that this loss is not informative enough to train ωg because during the initial stages
of training, the agent will observe very small negative rewards and rarely see the large positive reward
goal locations.
ωg when decoupled from the scalar reward, captures information about the goal. Ma et al. (2018b)
propose to train ωg with a separate neural network that uses goal features as input. Training a separate
network in our scenario easily leads to over-fitting on the limited number of trained goal locations
seen by the agent during training and leads to poor generalization of the agent to new unknown goals.
3	Adapting USFA with A3C
Our first contribution is the application of USFA for the complex task of target driven visual navigation.
This section introduces how we created a stable architecture while addressing the aforementioned
issues.
3
Under review as a conference paper at ICLR 2020
3.1	State Representation
Rather than using a separate network such as an autoencoder to generate φ , we argue it is more
beneficial if the agent learns task dependant state representation features while exploring the state
space. Thereby, the agent should learn to capture only the salient features relevant to the task of
navigation and ignore features that may be solely important for reconstruction. Since in target
driven visual navigation, the goal space is a subset of the state space, we used a siamese network to
generation both φ and ωg .
3.2	Reward Prediction Vector with A3C Critic
A major problem with training a stable USFA based DRL agent is the difficulty of training an ωg
that works successfully with the scalar reward regression loss (see Equation 2). In our case, the
reward structure is ad-hoc: for every time-step the agent either receives a small negative penalty or a
large reward for reaching the goal location. The positive rewards are experienced by the agent much
less frequently, particularly at the beginning of training. When training large scale tasks, this class
imbalance can be even more detrimental because the reward structure needs to be learnt before the
reinforcement learning agent is able to learn a meaningful policy for navigation. If not, this creates
an unstable ωg which can cause the network to diverge.
To overcome this problem, we propose to exploit the A3C agent’s critic update (Value function
update). In a conventional A3C algorithm, each agent needs to optimise the critic and policy functions
after each episode with the N-step Return (Mnih et al., 2016). Since the value function can be
interpreted by the USFA concept as being a linear combination of ψg (st) and ωg, the critic’s loss
function in an A3C agent can be used to learn ωg . Unlike training the network with a scalar reward
regression loss, this method is more informative because the loss function depends on the episode’s
discounted scalar rewards. The discounted return calculation for a single episodic step in A3C is
depicted in Algorithm 1 in the Supplementary Materials. Equation 5 shows how the value function
can be decoupled with ψ and ω.
LossV TD = kr(st) + γtV (st+1, g) -V(st,g)k2
= kr(st)+γtψπ(st+1,g)>ω(g)-ψπ(st,g)>ω(g)k2
(5)
Equation 6 shows the conventional one step TD loss for the SFA branch. It needs to be highlighted
that ψ gets updated with both LossψTD and LossVTD .
LossψTD = kφ(st)+γtψg(st+1) -ψg(st)k2
(6)
To counter the problem of the having only a few training goals to train ω, we utilised the embeddings
generated from the Siamese layer as goal information and trained ω as another branch of the USFA-
A3C agent (see Figure 5 in the Supplimentary Materials).
4	Introducing SFDP for USFA
Our second contribution is the addition of a Successor Feature Dependant Policy (SFDP) to the
USFA implementation. As mentioned before, ψg (st) can be seen as an abstract representation of the
cumulative sum of the future states the agent will visit by following an optimal policy (Dayan, 1993;
Barreto et al., 2017). Traditionally, successor features are not directly consulted when determining an
action (Ma et al., 2018b).
However, we hypothesise that feeding the abstract map of future states could be useful in determining
the next action. USF can be described as representing the cumulutive sum of discounted future states
the agent visits following an optimal policy. This property by itself helps with transfer learning
because eventhough different goals have different optimal paths, they can share some common
sub-paths. For example, when tasked with finding the microwave and sink in a kitchen, the initial
steps of the agent in going to the kitchen will be similar for both tasks. We hypothesised that if the
policy has direct access to the USF (see Equation 7), the agent will be able to learn from these similar
paths. By directly concatenating ψg with the final layer of the policy head naively results in ψg being
updated with gradients from the conventional bellman optimality Equation 3 and the policy gradients
4
Under review as a conference paper at ICLR 2020
St
g
0—
c-'ou-J c-'ozlu
「ZL9,O=I
ft
ZL'OZI
即
-'0u--'Cd
Figure 1: Proposed Network Architecture “VUSFA”: The model’s input is the current state of the agent st and
the goal location g as images. These go through a shared simaese encoder E (z|st). The reparametrized output z
is used to train the ω vector. The policy is conditioned on the USF vector (dotted line indicates gradients do not
flow from policy to the USFA head). The USFA ψ is trained with the temporal difference error using φ to give
the expected future state occupancies. The discounted episode return is used to train both ω and USFA vectors.
of the A3C agent. This can harm the true USF representation and can reduce the transfer learning
capabilities of the agent. Therefore in the final model, we stopped the gradient flow from the policy
head to the USF branch.
∏ (a | S, g ； θ) 一 ∏ (a ∣ψT, St, g ； θ)	⑺
The stopping of policy gradients for the USF branch is illustrated in Figure 1 with dotted lines.
5	VUSFA
The next modification we made was the introduction of the Variational Siamese Bottleneck (VSB) to
improve the quality of USFA and the reward prediction vector. We observed that the embeddings
generated by the siamese layers play a key role in improving the overall performance due to their
effect on generating ψ and ωg . We wanted to improve these embeddings without harming stable
convergence. Our main hypothesis in selecting the variational information bottleneck was that it will
be able to guide the Siamese layers to extract the most informative and meaningful features which
will then lead to better generalisation. Having a siamese layer that generates embeddings which
produce a robust φ and ωg is key to improving the transfer learning ability of the overall model.
If these embeddings are not informative enough, the model can overfit to the training set of goals.
To improve the embeddings without harming the training stability, we adapt the concept of Deep
Variational Information Bottleneck (Alemi et al., 2016). Our results show that this addition improves
the performance of the overall network.
In the next sections we will describe the theory behind the Variational Information Bottleneck and
the training procedure we used in our adaptation of it to the VUSFA agent.
5.1	Information Bottleneck
The theory of the Information Bottleneck, introduced by Tishby & Zaslavsky (2015), shows that a deep
neural network can be thought of as a trade-off between having a compressed latent representation
Z with respect to inputs X while still preserving relevant information with respect to the outputs
Y . Mathematically, this idea of generating an optimal Z can be achieved using Mutual Information
Theorem as follows:
5
Under review as a conference paper at ICLR 2020
minimize [I(X;Z) - βI(Y; Z)]	(8)
Where I(X;Z) is the mutual information between the input features X and the latent representation
Z from the hidden layer and I(Y;Z) is the mutual information between output Y and Z. Intuitively,
the neural network should predict the output while reducing the mutual information between input
and the encoding. The minimisation ofI(X;Z) encourages the agent to compress the most relevant
information about X into Z for the prediction of Y.
5.2	Deep Variational Information Bottleneck
Deep Variational Information Bottlenecks introduced by Alemi et al. (2016) is a parameterized
approach to the Information Bottleneck theory that can be easily used with deep neural networks.
This was done by introducing a regularized objective function as follows.
J(q(Y|Z),E(Z|x))min = E(Z〜E(ZIx))[J(q(Y|Z))] s.t I(Z,X； θ) ≤ Ic	(9)
Minimizing the loss function J(q(Y|Z),E(Z|X)) encourages the neural network to generate an
informative compressed embedding Z from the input X . Equation 9 consists of a parametric encoder
function E(ZIX) that maps input features X into latent vector Z, a decoder function q(Y IZ) that maps
Z to output labels Y, and a mutual information constraint I(X, Z) ≤ Ic. The generation of Z by the
encoder under the Information Constraint Ic can be though of as a bottleneck layer in the network.
This bottleneck Z could be applied as any intermediate layer of the neural network.
In our scenario, we applied the Information Bottleneck on the output of the siamese layers (see
Figure 1) due to it’s direct effects on the estimations of π, ψ, and ω. The siamese layers can therefore
be thought of as the encoder E(ZIX). We call this the Variational Siamese Bottleneck (VSB). The
VSB enforces an upper-bound Ic on the mutual information term I(Z, X) to encourage the encoder
E (Z IX ) to focus on the most discriminative features of the input. The encoder needs to generate
a latent distribution Z where the mutual information between X and Z does not exceed the scalar
Information Constraint Ic where Ic is a hyperparamter.
Since the I(Z, X; θ) ≤ Ic term in Equation 9 is intractable, we cannot directly apply it to a neural
network trained with back-propagation. Alemi et al. (2016) introduced a modified version by applying
a variational lower bound and a lagrangian multiplier β that needs to be updated adaptively. This
results in the final deep variational information bottleneck loss in Equation 10.
J(q,E(ZIX))min = E(z〜E(Z∣x)) [Jp(q(YIZ))]+ βE(x〜P(x)) [KL[E(zIX)kr(Z)] -Ic]	(10)
Since the KL divergence is calculated between two distributions, the encoder outputs the mean and
variance of Z from which a sample is taken using the reparametrization trick Kingma & Welling
(2013).
We update the Lagrangian multiplier β in a similar way to Peng et al. (2018). β gets updated for each
actor thread adaptively following Equation 11.
β — max(0,β + αβ(Eg〜p© [KL[E(z∣g)kr(g)]] -Ic)	(11)
The final loss function of our agent with the Variational Information Bottleneck is shown in the
Equation 12.
J(q,E)mm = E(Z〜E(z∣X)) [LtOtal]+ βE(X〜P(X)) [KL[E(zIX)kr(z)] -Ic]	(12)
-where Ltotai is the combined loss function Ltotai = λ∏Ln + λψLψ + λvLV. Therefore, the agent
needs to minimize both LtOtal and the KL divergence term [KL[E(zIX)kr(z)] -Ic] at the same time.
λπ,λψ and λV are hyperparameters.
6	Network Architecture
Our network (see Figure 1) takes the four most recent states the agent has visited as st and four
repeated goal states as the g. Then the resnet-50 embeddings related to both st and g go through a
6
Under review as a conference paper at ICLR 2020
Environment	# Trained States	Total States	% States Trained	Model 01	Model 02	Model 03	Model 04
bathroom_02	^5	180	2.78%	14.22%	20.89%	22.44%	27.89%
bedroom_04	5	408	1.23%	17.84%	20.51%	20.93%	23.01%
kitchen_02	5	676	0.74%	10.92%	11.92%	11.97%	17.13%
living_room_08	5	468	1.07%	17.20%	16.67%	19.59%	18.53%
All	20	1732	1.15%	15.04%	16.16%	17.23%	20.01%
Table 1: Zero-shot learning Results: Success rate of the agent reaching all goals within 500 steps without
retraining. The agent navigated to each goal location starting from 10 random locations within the simulator. A
detailed description of each model can be found in Section 7.
siamese encoder and generates the mean and variance vectors, which are the parameters of the latent
distribution Z . The φ embeddings with respect to the goal g then go through a fully connected layer
to predict the goal coefficients ω vector. The network,s last part predicts the policy π(a∕St, g, ψ) and
the USFA ψg(St). Similar to ZhU et al. (2017), we include a separate policy (π), USFA ψ and the
expected sum of future rewards prediction heads for each scene (e.g. Bathroom) Kolve et al. (2017).
6.1 Training VUSFA
The training procedure for our model is based
on the A3C algorithm and is shown in Algo-
rithm 1. The reparameterized embedding was
not directly used in predicting the policy π and
the USFA ψ to maintain a stable procedure. In-
stead, the mean vectors of the state representa-
tion φ for both goal and state were used. These
mean vectors were concatenated together and
fed through the layers used for predicting the
policy and USFA as shown in Figure 1. We used
the reparameterized embeddings from the bottle-
neck layer to predict ω since the ω vector is the
most important element in the USF architecture
that decouples the value function. The objec-
tive behind this reparametrization was to make
create an ω that is robust and generalizable that
would not easily overfit. During inference, we
use reparameterized values for both goal and
state encoding which we assume added more
generalizability and exploration and improved
zero-shot navigation of the agent.
7 Experimental Evaluation
The evaluation of the agent under the task of tar-
get driven visual navigation has been conducted
in two ways. First, the agent was evaluated on
its zero-shot learning ability. The second evalu-
ation criteria was the time taken for the agent to
adapt to new unknown goals when fine-tuning.
Both evaluation criteria belong to the domain of
Transfer in Reinforcement Learning (Taylor &
Stone, 2009) and will be described in the follow-
ing two sections. Prior to evaluation, all models
were trained on four scenes for 20 different goals
until convergence. We took the deep Siamese
A3C model by Zhu et al. (2017) as the baseline,
since it is the most relevant work done using the
AI2THOR simulator Kolve et al. (2017).
uauθη ©Poss ue∙w
New goals 1 step away from trained goals
50000	100000	150000	200000	250000
Time-steps
New goals 2 steps away from trained goals
•po-dw
qsu3-j∙po-d,*jU2&W
----01. ZhU et al.
02. USF-A3C
----03. USF-Dependant-PoIicy
----04. VariationaI-USF
5 O
3 3
LiaηPoss uew
0	50000	100000	150000	200000	250000
Time-steps
Figure 2: Agent’s transfer learning ability: No. of train-
ing time-steps plotted against the average length of an
episode. Shorter episode lengths indicate the agent has
learnt to navigate to goals in a lower no. of steps (shaded
area is the standard deviation over 100 time-steps).
7
Under review as a conference paper at ICLR 2020
Moreover, we were also successful in training the agent from scratch with a CNN (replacing the
resnet features). Although adding an LSTM results in further performance increases, we used resnet
features instead. We decided to do so to keep our training time low and the evaluation consistent.
We evaluated all variations of our proposed model in a benchmark with the state-of-the-art:
Model 01 : Implementation of Zhu et al. (2017)’s model using GVF
Model 02 : Using USFA
Model 03 : Adding SFDP to Model 02 (see Figure 5 in Supplimentary Materials)
Model 04 : Adding VSB to Model 03 (we call this VUSFA)
7.1	Zero-Shot Navigation Ability
The aim of zero-shot navigation is to see weather the agent is be able to reach a wide range of goals
while being trained on only a very limited subset of goals. In particular, the zero-shot learning
capability of the agent was evaluated by testing the agent’s average successful attempts to find new
goal locations. In the evaluation process, we follow a similar criteria to Zhu et al. (2017), in which we
tested whether the agent was able to reach the goal in less than 500 time-steps. We constituted this as
a successful episode. We evaluated the success rate of reaching all goals in each environment. We
repeated this procedure 10 times (trials), in which the agent always started from a random location.
We trained our models on only 20 goal states spread evenly across four environments using the
AI2THOR simulator. This represents less than 1.2% of the total number of states. In-spite of this,
even the worst performing model was able to generalize to over 16% of all states.
Table 1 shows that all proposed algorithms (Model 02-04) are able to successfully reach more
locations without training than the baseline Model 01. The USFA-based policies consistently
generalise better than Zhu et al. (2017).
7.2	Transfer Learning
It can take a large amount of time (in the order of several days), to train a complex DRL agent.
Therefore, it is impractical to re-train agents when the task slightly changes. Instead, the agent should
be able to use previous knowledge to adapt to new tasks quickly.
We evaluated the transfer learning ability of all four models to 20 new goals. In order to evaluate how
the closeness of the new goals effect the agent’s performance, we tested the models on states that are
1, 2, and 4 steps away from already trained goals as well as completely random goals. We sampled 5
random states from each environment, excluding the already trained goals to get the new goals. We
used 5 trials, meaning repeating this process 5 times with random states which are different to the
previously learned ones. To ensure a fair comparison, we kept the random seeds constant between the
models.
Figure 2 shows the number of time-steps required for the model to adapt to new goals. It becomes
clear that the USFA-based policies are consistently able to decrease the number of steps taken to reach
the goal faster than the baseline model. Moreover, using the SFDP with USFA resulted in a further
decrease in time-steps required and thus showed to have a positive effect on the model’s transfer
learning ability. As shown in Figure 2, VUSFA is usually able to further improve performance.
8 Conclusion & Future Work
We proposed Variational Universal Successor Features Approximator (VUSFA) to solve rather com-
plex tasks, such as target driven visual navigation in photorealistic environments using the AI2THOR
simulator. To our knowledge, this is the first time the Deep Variational Information Bottleneck
theory has been applied with Universal Successor Features in Deep Reinforcement Learning. Our
results indicate that VUSFA is able to improve the transfer learning ability in respect to previous
state-of-the-art GVF and USF-RL based research . Our approach is generalizable and can be easily
adapted to various tasks other than navigation. For re-implementation, we provide the source code
via our github repository1. Our approach introduces a new perspective and should be considered in
future research aiming to improve transfer learning for Deep Reinforcement Learning. In particular,
further research could look into exploration of the semantical impacts of φ, ω, and ψ.
8
Under review as a conference paper at ICLR 2020
References
Alexander A Alemi, Ian Fischer, Joshua V Dillon, and Kevin Murphy. Deep variational information
bottleneck. arXiv preprint:1612.00410, 2016.
Andre Barreto, Will Dabney, Remi Munos, Jonathan J Hunt, Tom SchaUL Hado P van Hasselt, and
David Silver. Successor features for transfer in reinforcement learning. In Proc of NIPS, pp.
4055-4065, 2017.
Andre Barreto, Diana Borsa, John Quan, Tom Schaul, David Silver, Matteo Hessel, Daniel Mankowitz,
Augustin Zidek, and Remi Munos. Transfer in deep reinforcement learning using successor features
and generalised policy improvement. In Proc of ICML, pp. 510-519, 2018.
Charles Beattie, Joel Z Leibo, Denis TePlyashin, Tom Ward, Marcus Wainwright, Heinrich Kut-
tler, Andrew Lefrancq, Simon Green, Victor Valdes, Amir Sadik, et al. Deepmind lab. arXiv
preprint:1612.03801, 2016.
Dimitri P Bertsekas. Constrained optimization and Lagrange multiplier methods. Academic press,
2014.
Francisco Bonin-Font, Alberto Ortiz, and Gabriel Oliver. Visual navigation for mobile robots: A
survey. Journal of intelligent and robotic systems, 53(3):263-296, 2008.
Johann Borenstein and Yoram Koren. The vector field histogram-fast obstacle avoidance for mobile
robots. Trans. on Robotics and Automation, 7(3):278-288, 1991.
Diana Borsa, Andre Barreto, John Quan, Daniel Mankowitz, Remi Munos, Hado van Hasselt, David
Silver, and Tom Schaul. Universal successor features approximators. arXiv preprint:1812.07626,
2018.
Peter Dayan. Improving generalization for temporal difference learning: The successor representation.
Neural Computation, 5(4):613-624, 1993.
Tingxiang Fan, Xinjing Cheng, Jia Pan, Dinesh Monacha, and Ruigang Yang. Crowdmove: Au-
tonomous mapless navigation in crowded scenarios. arXiv preprint:1807.07870, 2018.
David Filliat and Jean-Arcady Meyer. Map-based navigation in mobile robots:: I. a review of
localization strategies. Cognitive Systems Research, 4(4):243-282, 2003.
Diederik P Kingma and Max Welling. Auto-Encoding Variational Bayes. arXiv e-prints, art.
arXiv:1312.6114, Dec 2013.
Eric Kolve, Roozbeh Mottaghi, Daniel Gordon, Yuke Zhu, Abhinav Gupta, and Ali Farhadi. Ai2-thor:
An interactive 3d environment for visual ai. arXiv preprint:1712.05474, 2017.
Tejas D Kulkarni, Ardavan Saeedi, Simanta Gautam, and Samuel J Gershman. Deep successor
reinforcement learning. arXiv preprint:1606.02396, 2016.
Chen Ma, Dylan R Ashley, Junfeng Wen, and Yoshua Bengio. Universal successor features for
transfer reinforcement learning. 2018a.
Chen Ma, Junfeng Wen, and Yoshua Bengio. Universal successor representations for transfer
reinforcement learning. arXiv preprint:1804.03758, 2018b.
Piotr Mirowski, Matthew Koichi Grimes, Mateusz Malinowski, Karl Moritz Hermann, Keith An-
derson, Denis Teplyashin, Karen Simonyan, Koray Kavukcuoglu, Andrew Zisserman, and Raia
Hadsell. Learning to navigate in cities without a map. arXiv preprint:1804.00168, 2018.
Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Alex Graves, Ioannis Antonoglou, Daan
Wierstra, and Martin Riedmiller. Playing atari with deep reinforcement learning. arXiv
preprint:1312.5602, 2013.
Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A Rusu, Joel Veness, Marc G Bellemare,
Alex Graves, Martin Riedmiller, Andreas K Fidjeland, Georg Ostrovski, et al. Human-level control
through deep reinforcement learning. Nature, 518(7540):529, 2015.
9
Under review as a conference paper at ICLR 2020
Volodymyr Mnih, Adria Puigdomenech Badia, Mehdi Mirza, Alex Graves, Timothy Lillicrap, Tim
Harley, David Silver, and Koray Kavukcuoglu. Asynchronous methods for deep reinforcement
learning. In Proc ofICML ,pp.1928-1937, 2016.
Giuseppe Oriolo, Marilena Vendittelli, and Giovanni Ulivi. On-line map building and navigation for
autonomous mobile robots. In ICRA, pp. 2900-2906. IEEE, 1995.
Xue Bin Peng, Angjoo Kanazawa, Sam Toyer, Pieter Abbeel, and Sergey Levine. Variational
discriminator bottleneck: Improving imitation learning, inverse rl, and gans by constraining
information flow. arXiv preprint:1810.00821, 2018.
Leonardo Ramirez, Sebastian Denef, and Tobias Dyrks. Towards human-centered support for indoor
navigation. In Proc of CHI, pp. 1279-1282. ACM, 2009.
Tom Schaul, Daniel Horgan, Karol Gregor, and David Silver. Universal value function approximators.
In Proc of ICML, pp. 1312-1320, 2015.
David Silver, Aja Huang, Chris J Maddison, Arthur Guez, Laurent Sifre, George Van Den Driessche,
Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, et al. Mastering
the game of go with deep neural networks and tree search. nature, 529(7587):484, 2016.
David Silver, Julian Schrittwieser, Karen Simonyan, Ioannis Antonoglou, Aja Huang, Arthur Guez,
Thomas Hubert, Lucas Baker, Matthew Lai, Adrian Bolton, et al. Mastering the game of go without
human knowledge. Nature, 550(7676):354, 2017.
Richard S Sutton, Joseph Modayil, Michael Delp, Thomas Degris, Patrick M Pilarski, Adam White,
and Doina Precup. Horde: A scalable real-time architecture for learning knowledge from unsuper-
vised sensorimotor interaction. In Proc of AAMAS, pp. 761-768. ACM, 2011.
R.S. Sutton, A.G. Barto, and F. Bach. Reinforcement Learning: An Introduction. MIT Press, 2018.
ISBN 9780262039246. URL https://books.google.co.nz/books?id=sWV0DwAAQBAJ.
Matthew E Taylor and Peter Stone. Transfer learning for reinforcement learning domains: A survey.
Journal of Machine Learning Research, 10(Jul):1633-1685, 2009.
Naftali Tishby and Noga Zaslavsky. Deep learning and the information bottleneck principle. In 2015
IEEE Information Theory Workshop (ITW), pp. 1-5. IEEE, 2015.
Jingwei Zhang, Jost Tobias Springenberg, Joschka Boedecker, and Wolfram Burgard. Deep reinforce-
ment learning with successor features for navigation across similar environments. In Intelligent
Robots and Systems (IROS), pp. 2371-2378. IEEE, 2017.
Yuke Zhu, Roozbeh Mottaghi, Eric Kolve, Joseph J Lim, Abhinav Gupta, Li Fei-Fei, and Ali Farhadi.
Target-driven visual navigation in indoor scenes using deep reinforcement learning. In Proc of
ICRA, pp. 3357-3364. IEEE, 2017.
10
Under review as a conference paper at ICLR 2020
Supplementary Materials
A	Algorithm
Algorithm 1 Variational A3C-USF Algorithm pseudocode for each actor thread
Assuming global parameter vectors for value function and policy as θπ, θψ and θω
Assuming global shared counter as T = 0
Assuming thread specific parameter vectors for value function and policy as θπ0 , θψ0 and θω0 d
Initialize thread step counter t J 1
1: 2: 3: 4: 5: 6: 7: 8: 9: 10: 11: 12: 13:	repeat Reset gradients : d θπ J 0, dθψ J 0, d θω J 0 Synchronise thread specific parameters with global network θπ0 = θπ, θψ0 = θψ, θω0 = θω tstart = t Get initial state st , goal g repeat Perform an action at according to the current policy π (a/ St, g : θ∏) Receive the scalar reward rt ,the new state st+1 Collect roll-outs [st, rt,st+1] t Jt+1 TJT+1 until terminal st or t - tstart == tmax Bootstrapping the return R from last state of the episode
14:	R	0	st = t erminal ψ = ψ (st , g; θψ) st , t erminal
15:	R	0	st = t erminal V — [ψ(St,g; θψ)ω(g; θω) St , terminal
16:	for i ∈ t- 1,..., tst art do
17:	Rψ J ψ(i, g; θψ) + γRψ
18:	RV J ψ(st,g; θψ)ω(g; θω) + γRv
19:	AV = RV - Vi
20:	Collect Rv,Rψ,AV
21:	Compute β J max(0, β + αβ (Eg〜p(g)[KL[E(z|g) ∣∣r(g)]] - Ic) where Ic = 0.2 is a hyperpa- rameter
22:	Compute LKL = φμ (g)2 + φσ(g)2 - log(φσ(g)2) - 1
23:	Compute Lψ = ∣∣ R ψ — ψ (St, g; θψ )∣2
24:	Compute LV = k RV — ψ (St+1, g ； θψ )ω (g; θω )∣2
25:	Compute Ln = log[(π (St, g; θ∏)] Av
26:	Calculate gradients on loss λπLπ +λψLψ +λVLV + βLKL
27:	Computing dθψ,dθπ and dθω, perform asynchronous update of θψ,θπ and θω
28:	until T > Tmax
B	Implementation Details
We used the fundamental A3C framework to train our agent. The initial A3C agent contains 100
threads assigned to 20 goals (5 goals from each scene). The 20 goals used for training can be seen in
Figure 3. For the transfer learning tasks, 20 new goals were randomly selected excluding the trained
goals. An ideal trajectory of an agent is illustrated in the Figure 4.
For training, we used a high performance computer with 4x Xeon 6136 @3Ghz Processor (total of
48 cores); Memory - 1.18TB, GPU - Tesla V100 with 32GB memory per GPU.
11
Under review as a conference paper at ICLR 2020
Figure 3: The twenty goal locations used for training
Goal Location	ACtiOn -Forward	Action -Forward	Action -Forward
Figure 4: Example of a trajectory of an agent inside the AI2THOR simulator
B.1	Hyperparameter Tuning
For the proposed method, we varied the weight of the USF TD error loss, KL loss and the information
constraint Ic .
We did limited hyperparameter tuning as detailed in Table 2. λV = 0.5, λψ = 0.0005 and Ic = 0.2
gave good results and were used in the plots.
Parameters	Values Explored	Values Used
Ic	0.2,0.5,0.1	0.2
λψ	0.0005,0.0006,0.0009	0.0005
λV	0.5	0.5
λπ	1.0	1.0
Table 2: Explored Hyperparameters
12
Under review as a conference paper at ICLR 2020
g
Policy Loss
Return Loss
Policy Loss
Return Loss
Figure 5: Architecture used for the SFDP-A3C model
The input to the model is the current state of the agent st and the goal location g as images. These go through a
shared siamese layer to generate embeddings for the goal and the state. The policy is conditioned on the USF
vector (dotted line indicates gradients do not flow from policy to the USFA head). The USFA ψ is trained with
the temporal difference error using φ to give the expected future state occupancies. The discounted episode
return is used to train both ω and USFA vector.
C Related Work on GVF and USF
Designing a value function that is capable of adapting to different tasks is based on a concept known
as General Value Functions (GVF) (Sutton et al., 2011). An extension to this idea, called Universal
Value Function Approximators (UVFAs), was introduced by Schaul et al. (2015). The core idea of
UVFAs is to represent a large set of optimal value functions by a single, unified function approximator
that generalises over both states and goals. Although theoretically sound, learning a sufficiently
working UVFA is a challenging task (Ma et al., 2018b).
Successor Representation (SR) (Dayan, 1993) emerged from the field of cognitive science and is
modelled on the brain’s capability to create a reusable predictive map. Recently, SR was combined
with Deep Learning to create Deep Successor Reinforcement Learning by Kulkarni et al. (2016).
Based on Deep Q-Network (DQN) (Mnih et al., 2013) fundamentals, Kulkarni et al. (2016) were
able to learn task-specific features that were able to quickly adapt to distal changes in the reward by
fine-tuning only the reward prediction feature vector. Transfer in RL has been evaluated on multiple
similar tasks by Barreto et al. (2017), who introduced Successor Features (SF). They adapted SR to
be applicable in the continuous domain and were able to show how classic policy improvement can be
extended to multiple policies. Extending Barreto et al. (2017) to Deep Learning, Barreto et al. (2018)
additionally showed how these models can be stably trained. For the problem of visual navigation,
a SR-based DRL architecture similar to Kulkarni et al. (2016) was used by Zhang et al. (2017).
Unlike our approach, they showcase their solution in simple maze-like environments using DQN as
the baseline method, while we use actor-critic methods in a photorealistic simulation environment.
DQN-based techniques frequently suffer from stability issues when applied to complex problems,
such as large-scale navigation (Barreto et al., 2018).
USFA (Ma et al., 2018b) is the most recent extension to SR. Unlike previous methods, which were
based on DQN, USFA learns a policy directly by modeling it with actor-critic methods. Similar to
13
Under review as a conference paper at ICLR 2020
SR, USFA modifies the policy with successor features. DQN-based approaches learn an optimal
action-value function indirectly. USFA attempts to obtain a GVF which can be directly used to obtain
an optimal policy. It can be seen as a combination of the SF and UVFA methods as discussed earlier.
Unlike methods based on DQN, USFA is able to directly optimize an agent to learn multiple tasks
simultaneously. However, USFA has not been tested on high-dimensional complex problems. This
paper shows the adaption of USFA to more complex task for target driven visual navigation in a
photorealistic environment.
Borsa et al. (2018) also extended the idea of SF-RL in to USFA by adapting the concepts of GVF
and generalized policy improvement theorem. (Borsa et al., 2018) work describes a USFA training
method by adapting ε -greedy Q learning for set of simple tasks in Deepmind-Lab (Beattie et al.,
2016) simulator. We found their method is hard to adapt to our problem domain mainly due to
defining the state representation vector as a linear combination of a set of tasks. This method can
work with a simple set of known tasks such as collecting different objects in the simulator. But in our
case, each new task is similar to a new goal location selected from the state space. Also, the authors
have not extended this algorithm to work with policy gradient methods.
D Extended Abstract on Universal Successor Feature
Approximators
Similar to the UVFA (Schaul et al., 2015), a goal-dependant SF is approximated with Universal
Successor Feature Approximators (USFA) (Ma et al., 2018b; Borsa et al., 2018). The goal dependant
USF obeys the bellman update rule similar to SF (Equation 13).
ψπ (St, g) = Φt+1 + YE π [ψπ (St +1, g | S = St)]	(13)
D.1 Decoupling the Goal Oriented Value function with Universal Successor
Features
Similar to Successor Feature based DRL methods (Kulkarni et al., 2016), the decoupled value function
with USF can be written as Equation 14.
V∏ (s) = En ∑ Φ (St, at, St +1； θφ) ∏ Yg (Sk) so = S	ω (gt; θ0)
t=0	k=0
=ψπ(St,gt； θψ)>ω(gt; θω)
(14)
In Equation 14 ψπ(St,gt; θψ) , ω(gt; θω) and φ(St,at,St+1; θφ) should generalize over both goals and
states.
The fundamental architecture to learn USF was proposed by Ma et al. (2018b) and is shown in Figure
6. The architecture consists of three sub-networks that need to be trained. The first one is the state
representation network with parameters Φ. This network is an autoencoder which gets trained before
the training of the DRL agent. Then there are two heads to approximate the USF (θπ), and policy
(θψ). These two heads share parameters in the early layers with a fork in the last fully connected
layer. Finally, θw is learned. This final reward prediction network should be able to generate ω for
different goals which will later be used to train the USF agent.
It is important to compare the architectural differences between the USF-RL methods (Ma et al.,
2018b) with the previous DQN based SF-RL methods (Kulkarni et al., 2016; Zhang et al., 2017).
Unlike in SF-RL, φ is not learned simultaneously while training the DRL agent. The φ prediction
network in the USF-RL agent is trained with an autoencoder separately prior to the training phase. In
contrast to the SF-RL methods which stores an ω vector for each task, in USF-RL the ω vector is
predicted with a network that takes information about the goal as the input. Maintaining a separate
network to generate ω given goal information gives the luxury for the agent to quickly adapt to novel
goals.
14
Under review as a conference paper at ICLR 2020
Figure 6: Proposed architecture by Ma et al. (2018b) to train an actor-critic agent with USF (image from Ma
et al. (2018b))
E Mathematical framework for training the Varational
Information B ottleneck with Dual Gradient Descent
The theory of Information Bottleneck (IB) by Tishby & Zaslavsky (2015) explains a method of
designing a neural network considering the trade-off between accuracy and complexity. The theory
of the IB can be described with respect to supervised learning as follows:
Assume there are set of classes Y, a multi-dimensional feature vector X. The network’s goal is
to compress X to a "less complex" representation Z that shares enough information to predict Y
correctly. The concept of IB describes the fluctuation between compression versus preserving relevant
information in Z. Mathematically, the idea of generating an optimal Z can be presented as described
in Equation 15.
minimize I(X , Z) - β I(Y, Z)
(15)
In Equation 15 the term I(X, Z) is the mutual information between the features X and the hidden
layer Z. I (Y, Z) represents the mutual information between output Y and the hidden layer Z. Intu-
itively, Equation 15 says that the neural network should predict the label while reducing the mutual
information between the input and the encoding. Reducing of the I(X, Z) term encourages the agent
to compress the X into Z where Z consists of only the most important information about the input
features. The β is the trade-off hyperparameter which controls the quality of Z.
The mutual information term I (X , Z ) between input features and the encoder embeddings can be
illustrated in Equation 16.
I( X, Z )=I p (x,z )log( p≡)dd
=Z P(X) E (Z | X) log( ~p(z~χ)) dxdz
(16)
In Equation 16, the joint distribution ofP(X,z) can be illustrated with the encoder E(z|X) and the input
distribution P(X). Another important factor in Equation 16 is the distribution of the latent variable
P(z) is intractable. So the P(z) term is replaced with a known prior distribution r(z). This assumption
introduces an upper-bound to the mutual information term I(X,Z) as mentioned in Equation 17.
15
Under review as a conference paper at ICLR 2020
I(X, Z) ≤ ZP(X)E(Z|X) log( ~~(~~X))dxdz
≤ E(X〜P(X))[KL[E(Z|X)kr(Z升
(17)
In Equation 17, the sum of the probability distribution of input X can be transformed into an expecta-
tion operation. The expectation operation simplifies the I(X,Z) into a KL divergence between the
distribution of Z generated by the parametric encoder and the approximated prior r(Z). Modification
of the I(X , Z) with the KL divergence makes it easier to train a neural network with the loss function
mentioned in Equation 9.
The interpretation of I(X,Z) with KL divergence allow us to modify the conditional loss function
(Equation 9) as follows in Equation 18.
J (q, E )mm = E(Z 〜E (z | X)) [ Jp ①(M Z ))]	s∙t	E(X 〜P(X)) [ KL [ E ( Z |X )k r ( Z )]] ≤ Ic
(18)
The constraint term of E(X〜p(X)) [KL[E(z|X)kr(Z)]] ≤ Ic mentioned in Equation 18 can be subsumed
into the loss function J(q,E)min with a Lagrangian Multiplier (Bertsekas, 2014) β that needed to be
updated in an adaptive manner with the training procedure of the neural network.
Moreover, Alemi et al. (Alemi et al., 2016) evaluated the method of supervised learning tasks and
showed that the models trained with a VIB could be less prone to be overfitting and more robust to
adversarial examples. In this paper, we successfully illustrated the adoption of the concept of Deep
VIB with the USF to substantially improve the transfer learning ability of a navigation agent.
16