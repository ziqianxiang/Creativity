Under review as a conference paper at ICLR 2020
Dynamical System Embedding for Efficient
Intrinsically Motivated Agents
Anonymous authors
Paper under double-blind review
Ab stract
Mutual Information between agent Actions and environment States (MIAS) quan-
tifies the influence of agent on its environment. Recently, it was found that the
maximization of MIAS can be used as an intrinsic motivation for artificial agents.
In literature, the term empowerment is used to represent the maximum of MIAS at
a certain state. While empowerment has been shown to solve a broad range of rein-
forcement learning problems, its calculation in arbitrary dynamics is a challenging
problem because it relies on the estimation of mutual information. Existing ap-
proaches, which rely on sampling, are limited to low dimensional spaces, because
high-confidence distribution-free lower bounds for mutual information require ex-
ponential number of samples. In this work, we develop a novel approach for the
estimation of empowerment in unknown dynamics from visual observation only,
without the need to sample for MIAS. The core idea is to represent the relation
between action sequences and future states using a stochastic dynamic model in
latent space with a specific form. This allows us to efficiently compute empow-
erment with the “Water-Filling” algorithm from information theory. We construct
this embedding with deep neural networks trained on a sophisticated objective
function. Our experimental results show that the designed embedding preserves
information-theoretic properties of the original dynamics.
1	Introduction
Deep Reinforcement Learning (Deep RL) provides a solid framework for learning an optimal policy
given a reward function, which is provided to the agent by an external expert with specific domain
knowledge. This dependency on the expert domain knowledge may restrict the applicability of Deep
RL techniques because, in many domains, it is hard to define an ultimate reward function.
On the other hand, intrinsically-motivated artificial agents do not require external domain knowl-
edge but rather get a reward from interacting with the environment. This motivates the study of
intrinsically-motivated AI in general, and to develop efficient intrinsically-motivated methods in
particular as an alternative and/or complementary approach to the standard reinforcement learning
setting.
In recent works, different intrinsic motivation and unsupervised approaches were introduced (Klyu-
bin et al., 2005; Klyubin et al., 2005; Wissner-Gross & Freer, 2013; Salge et al., 2013b; Pathak
et al., 2017; Warde-Farley et al., 2018). Among others, the empowerment method reviewed in Salge
et al. (2014) uses the diversity of future states distinguishably-achievable by agent as an intrinsic
reward. By definition, empowerment of the agent at a given state is the channel capacity between
the agent’s choice of action and its resulting next state. Previously, this information-theoretic ap-
proach has proved to solve a broad range of the AI tasks (Salge et al., 2014; 2013b; Tiomkin et al.,
2017; Klyubin et al., 2005). Despite the empirical success, the computational burden of the estima-
tion of empowerment is significant, even for known dynamics and fully observable state spaces, as
estimating mutual information between high-dimensional random variables is known to be a hard
problem (McAllester & Statos, 2018). Concretely, high-confidence distribution-free lower bounds
for mutual information require exponential number of samples. The difficulty in computation has
significantly limited the applicability of empowerment in real-life scenarios, ubiquitous in biology
and engineering, where an agent observes the environment through sensors (e.g. vision) and does
not know an exact dynamical model of the environment.
1
Under review as a conference paper at ICLR 2020
In this work, we present a novel approach for efficient estimation of empowerment from visual
observations (images) in unknown dynamic environments by learning embedding for the dynamic
system. The new approach allows us to avoid computationally expensive sampling in high dimen-
sional state/action spaces required for the estimation of MIAS. Efficient computation of empow-
erment from images opens new directions in the study of intrinsic motivation in real-life environ-
ments. As a generic scheme, we structure the interaction between the agent and the environment in
a perception-action cycle, shown in Figure 1.
Figure 1: Intrinsically Motivated Perception and Action Cycle. Left-to-right: (a) the observations
with the corresponding action sequences are embedded to the latent space by DNNs, where the
final states are constrained to be linear in the action sequences (non-linear in the initial states). (b)
Gaussian channel capacity between the embedded actions and the embedded final states is computed
efficiently by the ‘Water-filling’ algorithm. (c) an intrinsic reward is derived, triggering the agent to
improve its policy for better reward. (d) when the agent operates under the new policy, additional
observations from the environment are perceived by the sensors, closing the loop.
While our proposed scheme is broadly applicable, we demonstrate its usage in two different do-
mains: intrinsically motivated stabilization of non-linear dynamical systems and intrinsically-safe
deep reinforcement learning. First, the experiments help us verify that the embedding correctly cap-
tures the dynamics in the original space. Additionally, our approach for the estimation of MIAS in
the embedded space provides a qualitatively similar MIAS landscape compared to the corresponding
one in the original space, which allows us to construct meaningful intrinsic reward for reinforcement
learning. Our study of the inverted pendulum is especially important because this non-linear model
is a prototype for upright stabilization in various biological and engineering systems.
The paper is organized as follows: in Section 2 we compare our work with previous relevant works.
Especially, table 1 provides a thorough comparison between existing methods for the estimation of
empowerment, and differentiates our work from the existing state of the art. In Section 3 we provide
the necessary formal background to present our approach. In Section 4 we present the method, with
the implementation described in Section 5. In Section 6 we demonstrate the proposed method by
numerical simulations, and compare to the analytical solution derived in the previous work (Salge
et al., 2013a). Finally, in Section 7 we conclude, and propose promising continuations of this work.
2	Related works
In this section, we compare our approach to the existing approaches for the estimation of empower-
ment. The criteria for comparison are: (a) the knowledge of the dynamical model, (b) the ability to
take high dimensional inputs, (e.g. images/video) and (c) the need for sampling to estimate MIAS.
The criteria of our choice are relevant because (a) the true dynamic model is often inaccessible in
real-life environments. (b) our IMPAC assumes generic sensor reading, which can be images. (c)
sampling of high-dimensional data is expensive and it is desired to have an alternative approach for
the estimation of MIAS.
One of the contributions of this work is an efficient representation scheme, achieved by deep neural
networks, which does not require sampling for the estimation of mutual information. This is the first
work that makes it possible to estimate empowerment from images with unknown dynamics and
without sampling.
As shown at Table 1, the proposed method makes the least assumptions, (unknown dynamics, visual
input, no sampling for the estimation of MIAS) compared to existing methods, which makes it
applicable to a broader class of problems.
2
Under review as a conference paper at ICLR 2020
Table 1: Comparison between existing methods for the estimation of empowerment.
Unknown dynamics Visual input Sampling
Method
Salge et al. (2013a)	no	no	no
Mohamed & Rezende (2015)	yes	yes	yes
Gregor et al. (2016)	yes	yes	yes
Karl et al. (2017)	yes	no	yes
Tiomkin et al. (2017)	no	no	no
Our work	yes	yes	no
3	Preliminaries
3.1	Markov Decision Process
A Markov decision process (MDP) is a discrete-time control model with parameters S : the state
space, A: the action space, p(s0 | s, a): the transition probability model, r(s, a) ∈ R: the reward
function, p0 : the initial state distribution, H : the horizon in number of steps and γ: the reward
discount factor.
In reinforcement learning, we try to find the optimal policy π that maximizes the expected sum of
returns along the trajectory:
H-1
maxE[ E r(st,at) | ∏θ].
θ t=0
3.2	Empowerment
In this work, we use the established definition of empowerment as a function of state (Klyubin
et al., 2005). The empowerment at state st	is the channel capacity between the action sequence
aT -1 =.(at	, at+1, . . . , aT-1) and the final state sT.
Emp(st	) =	max I(atk-1;sk |st	) = max H(sk |st	) - H(sk | atk-1,
ω(atk-1 |st)	ω(atk-1 |st)
where I(sk ; atk-1 |st ) is the mutual information functional, and ω(atk-1 |st ) is a stochastic policy,
described by a probability distribution of action trajectories conditioned onst	.
4	Proposed Approach
The key idea of our approach is to represent the relation between action sequences and corresponding
final states by a linear function in the latent space and to construct a Gaussian linear channel in this
space. Importantly, even though the relation between action sequences and future states is linear,
the dependency of future states on initial states is non-linear. This representation of a non-linear
dynamical system enables us to compute empowerment by an efficient “water-filling” algorithm in
the latent space, as explained in Section 4.4.
4.1	Interaction Model
We formulate the interaction between the agent and the environment as an MDP (Section 3.1). Each
step taken in the environment can be written as:
st+1 = f(st	, at	, ηt ),	(1)
where st	is the state at time t, at is the action at time t, and ηt is assume to be Gaussian process
noise. The agent does not know the dynamical model f, but rather it obtains through its visual
sensors, an image observation νt of the current state st	. Then, after the agent applies an action, at ,
3
Under review as a conference paper at ICLR 2020
the system moves to the next state, st+1. The agent has access to all previous observation and action
trajectories, {τi}iN=1, τi = {νti, ait}tT=1, where N is the number of trajectories and T is the length of
each trajectory.
4.2	Embedded Spaces
From the collected data, {τi}iN=1, we embed tuples in the form of (νi, aii+k-1, νi+k) where aii+k-1 =
(ai, ai+ι, ∙∙∙ , ai+k-ι). Observations and actions are embedded by deep neural networks to the
latent spaces Z ∈ Rdz and B ∈ Rdb , respectively. Here dz is the dimension of the embedded state,
and db is the dimension of the embedded action sequence. These two spaces are related by a linear
equation:
zt+k = A(zt)btt+k-1,	(2)
where zt is the embedded representation of the image νt. A(zt) is a dz by db state dependent matrix
that relates the embedded action sequence, btt+k-1 to the future embedded state, zt+k. This model
was suggested previously by Salge et al. (2013a) in the original state space with known dynamics.
Our key contribution of this work is the embedding of a generic unknown dynamic system into a
latent space that satisfy this model. The architecture for the embedding and the objective functions
used to train the networks are provided in Section 5.
4.3	Information Channel in Embedded Space
To compute mutual information between embedded action sequences, btt+k-1 and embedded states,
zt+k, We assume that the noise in the system comes from a Gaussian in latent state space: η 〜
N (0dz ×dz, Idz ×dz). As a result, we end up with an Gaussian linear channel in embedded spaces:
zt+k = A(zt)btt+k-1 + η	(3)
This particular formulation of dynamic systems in the latent space allows us to solve for the channel
capacity directly and efficiently, as described in below.
4.4	Channel capacity in Latent Space
To compute the information capacity of the channel given in Eq. 4.3, we apply the “Water-Filling”
algorithm (Cover & Thomas, 2012), which is a computationally efficient method for the estimation
of capacity, C*, of a linear Gaussian channel:
1n
C *(zt) =maxχY2log(1 + σi(zt)Pi),	(4)
pi 2 i=1
under the constraint on the total power, Pin=1 pi = P, where {σi(zt)}in=1 are the singular values of
the channel matrix, A(zt), and P is the total power in the latent space.
5	Architecture
The most crucial component of the IMPAC scheme is the embedding from sensor inputs (in our
case, images) and action sequences, into latent state and action tensors while remaining consistent
with the real environment dynamics. In this section, we organize our discussion around how a single
sample: {St, at,…,at+k-ι, St+k} fits in the training of our deep neural networks, as illustrated
in Figure 2. We will explain each individual components of the block diagram and wrap up by
discussing the whole picture.
5.1	Embedding of image observations
The left side and right side of the block diagram in Figure 2 embeds raw observations (images).
In this work, we take images scaled down to 64 × 64 as observations. The image resolution is
chosen as a balance of clarity and performance: visual features of the environments are retained
4
Under review as a conference paper at ICLR 2020
Figure 2: An illustration of data flow around a single training sample.
while training batches can be fit on a single GPU. Multiple images can be concatenated to capture
additional information (e.g. velocity). When encoding multi-channel images into latent vectors,
we use an auto-encoder and decoder pair parameterized by convolutional neural networks. Given
a training sample {St, at, ∙ ∙ ∙ , at+k-1, St+k}, both St and St+k are encoded into their respective
latent vectors Zt and Zt+k using a same CNN encoder. To ensure that essential state information is
conserved after embedding, we decoded the latent tensor Zt back to images using a deconvolutional
network for correct reconstruction St . The objective is to make the images St and St similar. The
encoder and decoder network details are presented in Appendix B.
5.2	Embedding of action sequences
The mid-lower section of Figure 2 embeds action sequences.
Standard MDPs (Section 3.1) models environment dynamics in the granularity of single steps, which
results in an exponentially large action space over long horizons. Another contribution of this work
is that we compute information-theoretic quantities across multiple time-steps without exploding
the action space. We consider a k-step dynamic model directly by embedding action sequence {at ,
at+1 ∙ ∙ ∙ at+k-1} into a single action bt in the latent space (1 step in the latent space corresponds to
k steps in the original space). Actions inside the sequence are concatenated into a vector and passed
into an auto-encoder to get bt . Again, to ensure that necessary information is retained in the latent
action tensor, We decode bt for reconstruction of {at, at+1 ∙ ∙ ∙ at+k-1}. In our implementation, the
encoder and decoder are both fully connected MLPs. The detailed information about each layer can
be found in Appendix B.
5.3	Dynamical model in latent space
The top part of Figure 2 fits a dynamics model linear in action (non-linear in state).
As discussed in Section 4.3, our scheme requires a dynamic model With a particular form. Specif-
ically, given current latent state Zt , the next state Zt+k is linear in the action bt . Mathematically,
if latent states have dimension dz and latent action have dimension db, We Want to find a mapping
A : Rdz → Rdz×db such that Zt+k ≈ A(Zt) × b.
The mapping from Zt to an dz × bz matrix is parameterized by a fully connected MLP With dz × db
output neurons. The final layer is then reshaped into a matrix. (See appendix B)
5.4	The entire scheme
In the previous 3 sub-sections, We introduce 3 objectives: 1) Find an embedding of observations that
retains their information. 2) Find an embedding of action sequences that retain their information. 3)
5
Under review as a conference paper at ICLR 2020
Find a dynamics model linear in the latent action. When these three objectives are trained jointly,
the neural networks learn towards a latent space that extract information from the original space and
learns a dynamics model that is consistent with the actual environment.
L = αE[(St - St)2] + βE [(at - ^t)2] + γE [(Zt+k - Zt+k)2]	(5)
In practice, regularization on the latent tensors is enforced at training time to encourage a structured
latent space. The details about our choice of regularization are discussed in appendix A.
6	Experiments
6.1	Inverted Pendulum
Inverted pendulum is a prototypical system for upright bi-pedal walking, and it often serves to check
new AI algorithms. Moreover, inverted pendulum is a baseline for the estimation of empowerment
in dynamical systems because its landscape is well-studied in numerous previous studies (Salge
et al., 2013b; 2014; 2013a; Karl et al., 2017; Mohamed & Rezende, 2015). So, we chose inverted
pendulum from the Openai Gym environment for testing our new method, and comparing it to the
previous methods (Brockman et al., 2016).
6.1.1	Correctness of Latent Dynamics
Prior to applying the proposed model, given by Eq. 4.3, to the estimation of MIAS in the latent
space, we verify the correctness of our embedded dynamic model. We compare reconstruction
of latent prediction with ground truth observation. In inverted pendulum, two consecutive images
are used to capture the state information (angle and angular velocity). When we supply the initial
two images for time t, along with choices of different action sequences of length k, we expect the
reconstructions to match the corresponding observations at time t + k. As shown in Figure 3 the
model is capable of reconstructing the future images from the current images and action sequences.
Figure 3: Reconstruction through the latent dynamics in comparison with the ground truth. Starting
from the same upright position, a different action sequence is taken in each row. In all 3 cases,
reconstruction matches the actual observation after the actions are taken.
6.1.2	Empowerment Landscape and Pendulum Swing-up
In this section, we compute the empowerment values and use those as intrinsic reward to train an
optimal trajectory for swinging up the pendulum from the bottom position to the upright position.
The optimal trajectory is computed by the standard PPO algorithm with reward signal coming solely
from empowerment. (Schulman et al., 2017b). Figure 4 compares the empowerment landscape
computed under our approach with a previous result:
As shown in Figure 4, at the beginning, the pendulum swings with a small amplitude (the dense
black dots around θ = π rad, θ = 0rads-1).OnCe it accumulated enough energy, the pendulum
starts traversing the state space, and arrives at the top position, where it stabilises, (dense black
points around θ = 0 rad, θ = 0 rad ST).
6
Under review as a conference paper at ICLR 2020
Figure 4: Left: Optimal trajectory super-imposed on our empowerment landscape. The pendulum
swings up from bottom (π, 0) to balance at the top (0, 0).Right: Empowerment values calculated
with knowledge of the ground truth model (Salge et al., 2013a). This figure shows that the empow-
erment landscapes are qualitatively similar, which verifies the validity of our approach.
Results from the pendulum experiment effectively demonstrate the validity of our proposed ap-
proach. Not only was our method able to create an empowerment value plot similar to that of a
previous analytical method, but also these empowerment values train to balance the pendulum at
upright position. The pendulum experiment shows that our latent representation effectively captures
the information-theoretic properties of the original environment.
6.2	Safety of RL agent
Another useful application of empowerment is its implication of safety of the artificial agent. A
state is intrinsically safe for an agent when the agent has a high diversity of future states, achiev-
able by its actions. This is because in such states, the agent can take effective actions to prevent
undesirable futures. In this context, the higher its empowerment value, the safer the agent is. In this
experiment, we first check that our calculation of empowerment matches the specific design of the
environment. Additionally, we show that empowerment augmented reward function can affect the
agent’s preference between a shorter but more dangerous path and a longer but safer one.
Environment: a double tunnel environment implemented with to the OpenAI Gym API (Brockman
et al., 2016). Agent (blue) is modeled as a ball of radius 1 inside a 20×20 box. The box is separated
by a thick wall (gray) into top and bottom section. Two tunnels connect the top and bottom of the
box. The tunnel in middle is narrower but closer to the goal compared to the one on the right.
Control: In each time step, the agent can move at most 0.5 unit length in each of x and y direction.
If an action takes the agent into the walls, it will be shifted back out to the nearest surface.
Reset criterion: each episode has a maximum length of 200 steps. The environment resets when
time runs out or when the agent reaches the goal.
Since the tunnel in the middle is narrower, the agent is relatively less safe there. The effectiveness
of the control of the agent is damped in 2 ways:
1.	In a particular time step, it’s more likely for the agent to bump into the walls. When this
happens, the agent is unable to proceed as far as desired.
2.	The tunnel is 10 units in length. When the agent is around the middle, it will still be inside
the tunnel in the 5-step horizon. Thus, the agent has fewer possible future states.
We trained the agent with PPO algorithm (Schulman et al., 2017a) from OpenAI baselines (Dhariwal
et al., 2017) using an empowerment augmented reward function. After a parameter search, we used
discount factor γ = 0.95 over a total of 106 steps. The reward function that we choose is:
R(s, a) = 1goal + β × Emp(s)
7
Under review as a conference paper at ICLR 2020
Figure 5: Left sub-figure: Double tunnel environment. The goal is marked in red. The agent in
blue. Right sub-figure: Empowerment landscape for the tunnel environment. The values of em-
powerment reduce at the corner and inside the tunnel where the control of the agent is less effective
compared to more open locations.
where β balances the relative weight between the goal conditioned reward and the intrinsic safety
reward. With high β , we expect the agent to learn a more conservative policy.
(a)β = 0	(b)β = 1/1600	(c)β = 1/800
Figure 6: Trajectories of trained policy. As β increase, the agent develops a stronger preference over
a safer route, sacrificing hitting time.
The results from the tunnel environment again support our proposed scheme. First, the empower-
ment landscape matches our design of the environment. Second, high quality empowerment reward
successfully alters the behavior of the agent.
7	Discussion
Intrinsically motivated artificial agents do not rely on external reward and thus, do not need domain
knowledge for solving a broad class of AI problem such as stabilization, tracking, etc. In this work,
we introduce anew method for efficient estimation of a certain type of information-theoretic intrinsic
motivation, known as empowerment. The learnt embedding representation reliably captures not only
the dynamic system but also its underlying information-theoretic properties.
With this work, we also introduced the IMPAC framework, which allows for a systematic study of
intrinsically motivated agents in broader scenarios, including real-world physical environments like
robotics. Future works on physical environment will better demonstrate the usefulness and general
applicability of empowerment as an intrinsic motivation.
8
Under review as a conference paper at ICLR 2020
References
Greg Brockman, Vicki Cheung, Ludwig Pettersson, Jonas Schneider, John Schulman, Jie Tang, and
Wojciech Zaremba. Openai gym, 2016.
Thomas M Cover and Joy A Thomas. Elements of information theory. John Wiley & Sons, 2012.
Prafulla Dhariwal, Christopher Hesse, Oleg Klimov, Alex Nichol, Matthias Plappert, Alec Radford,
John Schulman, Szymon Sidor, Yuhuai Wu, and Peter Zhokhov. Openai baselines. https:
//github.com/openai/baselines, 2017.
Karol Gregor, Danilo Jimenez Rezende, and Daan Wierstra. Variational intrinsic control. arXiv
preprint arXiv:1611.07507, 2016.
Maximilian Karl, Maximilian Soelch, Philip Becker-Ehmck, Djalel Benbouzid, Patrick van der
Smagt, and Justin Bayer. Unsupervised real-time control through variational empowerment, 2017.
A. S. Klyubin, D. Polani, and C. L. Nehaniv. Empowerment: a universal agent-centric measure of
control. In 2005 IEEE Congress on Evolutionary Computation, volume 1, pp. 128-135 VoL1,
Sep. 2005. doi: 10.1109/CEC.2005.1554676.
Alexander S Klyubin, Daniel Polani, and Chrystopher L Nehaniv. All else being equal be empow-
ered. In European Conference on Artificial Life, pp. 744-753. Springer, 2005.
David McAllester and Karl Statos. Formal limitations on the measurement of mutual information.
arXiv preprint arXiv:1811.04251, 2018.
Shakir Mohamed and Danilo Jimenez Rezende. Variational information maximisation for intrinsi-
cally motivated reinforcement learning. In Advances in neural information processing systems,
pp. 2125-2133, 2015.
Deepak Pathak, Pulkit Agrawal, Alexei A. Efros, and Trevor Darrell. Curiosity-driven exploration by
self-supervised prediction. 2017 IEEE Conference on Computer Vision and Pattern Recognition
Workshops (CVPRW), pp. 488-489, 2017.
Christoph Salge, Cornelius Glackin, and Daniel Polani. Approximation of empowerment in the
continuous domain. Advances in Complex Systems, 16(02n03):1250079, 2013a.
Christoph Salge, Cornelius Glackin, and Daniel Polani. Empowerment and state-dependent noise-an
intrinsic motivation for avoiding unpredictable agents. In Artificial Life Conference Proceedings
13, pp. 118-125. MIT Press, 2013b.
Christoph Salge, Cornelius Glackin, and Daniel Polani. Empowerment-an introduction. In Guided
Self-Organization: Inception, pp. 67-114. Springer, 2014.
John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. Proximal policy
optimization algorithms, 2017a.
John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. Proximal policy
optimization algorithms. arXiv preprint arXiv:1707.06347, 2017b.
Stas Tiomkin, Daniel Polani, and Naftali Tishby. Control capacity of partially observable dynamic
systems in continuous time. arXiv preprint arXiv:1701.04984, 2017.
David Warde-Farley, Tom Van de Wiele, Tejas Kulkarni, Catalin Ionescu, Steven Hansen, and
Volodymyr Mnih. Unsupervised control through non-parametric discriminative rewards. CoRR,
abs/1811.11359, 2018. URL http://arxiv.org/abs/1811.11359.
Alexander D Wissner-Gross and Cameron E Freer. Causal entropic forces. Physical review letters,
110(16):168702, 2013.
9
Under review as a conference paper at ICLR 2020
A Details of training algorithm
1.	Collect trajectories using random policy and random reset.
2.	Separate out tuples (St, at, at+ι, ∙∙∙ , at+k-ι, St+k) from trajectories. For simplicity of
notation, let ak represent the concatenated action sequences at, at+ι, •…,at+k-ι
3.	Use randomly initialized encoder networks to map the observations and action sequence
into latent space. This gives us tuples (Zt, btk, Zt+k).
4.	Use randomly initialized MLP network to get the corresponding transformation matrices
A(Zt).
5.	Calculate the predicted next state in latent space Zt+k = A(Zt)bkk
6.	Use randomly initialize decoder networks to reconstruct images and action sequences from
latent vectors.
~
St = Dec(Zt)
硅=DecM)
St+k = Dec(Zt+k) Note that St+k is reconstructed from latent prediction.
7.	Calculate the following loss terms:
(a)	Observation reconstruction error: Lobs = ||St - St||2
(b)	Action sequence reconstruction error: Laction = ∣∣atk - Gk ||2
(c)	Prediction error in latent space: Llatent = ||Zt+k - Zt+k||22
(d)	Prediction error in original space: Lorg = ||St+k - SGt+k ||22
8.	In additional to the loss terms, we add regularization terms to prevent latent vectors from
shrinking. This help us get consistent and comparable empowerment values across different
trials and even different environments.
(a)	Regularization of latent state: Regz = |1 - IZdtl21
|bT |2
(b)	Regularization of latent action: Regb = |1 - Ld^21
9.	Finally, we use batched gradient descent on the overall loss function to train all the neural
networks in the same loop.
(Regz + Regb)
L
αobs Lobs + αaction Laction + αlatent Llatent + αorg Lorg + αreg
For both of our experiments, we chose
αobs = αorg = 100
αaction = 10
αlatent = αreg = 1
and were able to produce desired empowerment plots.
B Details on neural network layers
B.1	Convolutional net for image encoding
(h1) 2D convolution: 4 filters, stride 2, 32 channels, ReLU activation
(h2) 2D convolution: 4 filters, stride 2, 64 channels, ReLU activation
(h3) 2D convolution: 4 filters, stride 2, 128 channel, ReLU activations
(h4) 2D convolution: 4 filters, stride 2, 256 channel, ReLU activations
(out) Flatten each sample to a 1D tensor of length 1024
B.2	Deconvolutional net for image reconstruction
(h1) Fully connected layer with 1024 neurons, ReLU activation
(h1’) Reshape to 1 × 1 images with 1024 channels
(h2) 2D conv-transpose: 5 filters, stride 2, 128 channels, ReLU activation
(h3) 2D convolution: 5 filters, stride 2, 64 channels, ReLU activation
(h4) 2D convolution: 6 filters, stride 2, 32 channel, ReLU activations
(out) 2D convolution: 6 filters, stride 2, C channel
10
Under review as a conference paper at ICLR 2020
B.3	MLP for action sequence encoding
(h1) Fully connected layer with 512 neurons, ReLU activation
(h2) Fully connected layer with 512 neurons, ReLU activation
(h3) Fully connected layer with 512 neurons, ReLU activation
(out) Fully conected layer with 32 output neurons
B.4	MLP for action sequence reconstruction
(h1) Fully connected layer with 512 neurons, ReLU activation
(h2) Fully connected layer with 512 neurons, ReLU activation
(out) Fully conected layer with k × da neurons, tanh activation then scaled to action space
B.5	MLP for transition matrix A
(h1) Fully connected layer with 1024 neurons, ReLU activation
(h2) Fully connected layer with 4096 neurons, ReLU activation
(h2) Fully connected layer with 8192 neurons, ReLU activation
(out) Fully conected layer with dz × db (1024 × 32) neurons
11