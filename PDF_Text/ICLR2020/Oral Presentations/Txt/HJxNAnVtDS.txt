Published as a conference paper at ICLR 2020
On the Convergence of FedAvg on Non-IID
Data
Xiang Li*
School of Mathematical Sciences
Peking University
Beijing, 100871, China
smslixiang@pku.edu.cn
Kaixuan Huang*
School of Mathematical Sciences
Peking University
Beijing, 100871, China
hackyhuang@pku.edu.cn
Wenhao Yang*
Center for Data Science
Peking University
Beijing, 100871, China
yangwenhaosms@pku.edu.cn
Shusen Wang
Department of Computer Science
Stevens Institute of Technology
Hoboken, NJ 07030, USA
shusen.wang@stevens.edu
Zhihua Zhang
School of Mathematical Sciences
Peking University
Beijing, 100871, China
zhzhang@math.pku.edu.cn
Ab stract
Federated learning enables a large amount of edge computing devices to jointly
learn a model without data sharing. As a leading algorithm in this setting, Federated
Averaging (FedAvg) runs Stochastic Gradient Descent (SGD) in parallel on a small
subset of the total devices and averages the sequences only once in a while. Despite
its simplicity, it lacks theoretical guarantees under realistic settings. In this paper,
we analyze the convergence of FedAvg on non-iid data and establish a convergence
rate of O(T) for strongly convex and smooth problems, where T is the number of
SGDs. Importantly, our bound demonstrates a trade-off between communication-
efficiency and convergence rate. As user devices may be disconnected from
the server, we relax the assumption of full device participation to partial device
participation and study different averaging schemes; low device participation rate
can be achieved without severely slowing down the learning. Our results indicates
that heterogeneity of data slows down the convergence, which matches empirical
observations. Furthermore, we provide a necessary condition for FedAvg on
non-iid data: the learning rate η must decay, even if full-gradient is used; otherwise,
the solution will be Ω(η) away from the optimal.
1	Introduction
Federated Learning (FL), also known as federated optimization, allows multiple parties to collab-
oratively train a model without data sharing (Konevcny et al., 2015; Shokri and Shmatikov, 2015;
McMahan et al., 2017; Konevcny, 2017; Sahu et al., 2018; Zhuo et al., 2019). Similar to the central-
ized parallel optimization (Jakovetic, 2013; Li et al., 2014a;b; Shamir et al., 2014; Zhang and Lin,
2015; Meng et al., 2016; Reddi et al., 2016; RiChtdrik and Takdc, 2016; Smith et al., 2016; Zheng
et al., 2016; Shusen Wang et al., 2018), FL let the user devices (aka worker nodes) perform most of
the computation and a central parameter server update the model parameters using the descending
directions returned by the user devices. Nevertheless, FL has three unique characters that distinguish
it from the standard parallel optimization Li et al. (2019).
* Equal contribution.
1
Published as a conference paper at ICLR 2020
First, the training data are massively distributed over an incredibly large number of devices, and
the connection between the central server and a device is slow. A direct consequence is the slow
communication, which motivated communication-efficient FL algorithms (McMahan et al., 2017;
Smith et al., 2017; Sahu et al., 2018; Sattler et al., 2019). Federated averaging (FedAvg) is the
first and perhaps the most widely used FL algorithm. It runs E steps of SGD in parallel on a small
sampled subset of devices and then averages the resulting model updates via a central server once in
a while.1 In comparison with SGD and its variants, FedAvg performs more local computation and
less communication.
Second, unlike the traditional distributed learning systems, the FL system does not have control
over users’ devices. For example, when a mobile phone is turned off or WiFi access is unavailable,
the central server will lose connection to this device. When this happens during training, such a
non-responding/inactive device, which is called a straggler, appears tremendously slower than the
other devices. Unfortunately, since it has no control over the devices, the system can do nothing but
waiting or ignoring the stragglers. Waiting for all the devices’ response is obviously infeasible; it is
thus impractical to require all the devices be active.
Third, the training data are non-iid2, that is, a device’s local data cannot be regarded as samples
drawn from the overall distribution. The data available locally fail to represent the overall distribution.
This does not only bring challenges to algorithm design but also make theoretical analysis much
harder. While FedAvg actually works when the data are non-iid McMahan et al. (2017), FedAvg
on non-iid data lacks theoretical guarantee even in convex optimization setting.
There have been much efforts developing convergence guarantees for FL algorithm based on the
assumptions that (1) the data are iid and (2) all the devices are active. Khaled et al. (2019); Yu et al.
(2019); Wang et al. (2019) made the latter assumption, while Zhou and Cong (2017); Stich (2018);
Wang and Joshi (2018); Woodworth et al. (2018) made both assumptions. The two assumptions
violates the second and third characters of FL. Previous algorithm Fedprox Sahu et al. (2018)
doesn’t require the two mentioned assumptions and incorporates FedAvg as a special case when the
added proximal term vanishes. However, their theory fails to cover FedAvg.
Notation. Let N be the total number of user devices and K (≤ N) be the maximal number of
devices that participate in every round’s communication. Let T be the total number of every device’s
SGDs, E be the number of local iterations performed in a device between two communications, and
thus T is the number of communications.
Contributions. For strongly convex and smooth problems, we establish a convergence guarantee
for FedAvg without making the two impractical assumptions: (1) the data are iid, and (2) all the
devices are active. To the best of our knowledge, this work is the first to show the convergence rate of
FedAvg without making the two assumptions.
We show in Theorem 1, 2, and 3 that FedAvg has O(T) convergence rate. In particular, Theorem 3
shows that to attain a fixed precision , the number of communications is
E =O"ɪ ((1+K) EG+P!#.	⑴
Here, G, Γ, pk, and σk are problem-related constants defined in Section 3.1. The most interesting
insight is that E is a knob controlling the convergence rate: neither setting E over-small (E = 1
makes FedAvg equivalent to SGD) nor setting E over-large is good for the convergence.
This work also makes algorithmic contributions. We summarize the existing sampling3 and averaging
schemes for FedAvg (which do not have convergence bounds before this work) and propose a new
scheme (see Table 1). We point out that a suitable sampling and averaging scheme is crucial for the
convergence of FedAvg. To the best of our knowledge, we are the first to theoretically demonstrate
1In original paper (McMahan et al., 2017), E epochs of SGD are performed in parallel. For theoretical
analyses, we denote by E the times of updates rather than epochs.
2Throughout this paper, “non-iid” means data are not identically distributed. More precisely, the data
distributions in the k-th and l-th devices, denote Dk and Dl, can be different.
3Throughout this paper, “sampling” refers to how the server chooses K user devices and use their outputs for
updating the model parameters. “Sampling” does not mean how a device randomly selects training samples.
2
Published as a conference paper at ICLR 2020
Table 1: Sampling and averaging schemes for FedAvg. St 〜U (N, K) means St is a Size-K
subset uniformly sampled without replacement from [N ]. St 〜 W (N, K, P) means St contains
K elements that are iid sampled with replacement from [N] with probabilities {pk }. In the latter
scheme, St is not a set.
Paper	Sampling	Averaging	Convergence rate
McMahan et al. (2017)	St 〜U (N, K)	Pk∈St Pk wt + Pk∈St Pk Wk	-
Sahu et al. (2018)	St 〜W(N, K, P)	K Pk∈St Wk	O( T )5
Ours	St 〜 U(N, K)	Pk∈St PkK Wk	O( T)4 5 6
that FedAvg with certain schemes (see Table 1) can achieve O(T) convergence rate in non-iid
federated setting. We show that heterogeneity of training data and partial device participation slow
down the convergence. We empirically verify our results through numerical experiments.
Our theoretical analysis requires the decay of learning rate (which is known to hinder the convergence
rate.) Unfortunately, we show in Theorem 4 that the decay of learning rate is necessary for FedAvg
with E > 1, even if full gradient descent is used.4 If the learning rate is fixed to η throughout,
FedAvg would converge to a solution at least Ω(η(E - 1)) away from the optimal. To establish
Theorem 4, we construct a specific '2-norm regularized linear regression model which satisfies our
strong convexity and smoothness assumptions.
Paper organization. In Section 2, we elaborate on FedAvg. In Section 3, we present our main
convergence bounds for FedAvg. In Section 4, we construct a special example to show the necessity
of learning rate decay. In Section 5, we discuss and compare with prior work. In Section 6, we
conduct empirical study to verify our theories. All the proofs are left to the appendix.
2	Federated Averaging (FE DAV G)
Problem formulation. In this work, we consider the following distributed optimization model:
N
min F(w) , X pk Fk (w) ,	(2)
k=1
where N is the number of devices, and pk is the weight of the k-th device such that pk ≥ 0 and
PN=I Pk = 1. Suppose the k-th device holds the nk training data: χk,ι, χk2, ∙∙∙ , Xk,nk. The local
objective Fk(∙) is defined by
nk
Fk(W) , — ɪ^'(w;Xkj),	⑶
where '(•;•) is a user-specified loss function.
Algorithm description. Here, we describe one around (say the t-th) of the standard FedAvg
algorithm. First, the central server broadcasts the latest model, Wt, to all the devices. Second, every
device (say the k-th) lets Wtk = Wt and then performs E (≥ 1) local updates:
wk+i+ι《—wt+i - ηt+NFk(wk+i, ξk+i),i = 0, 1, ∙∙∙,E - 1
where ηt+i is the learning rate (a.k.a. step size) and ξtk+i is a sample uniformly chosen from the local
data. Last, the server aggregates the local models, wt+E, ∙∙∙ , wN+石,to produce the new global
model, wt+E. Because of the non-iid and partial device participation issues, the aggregation step can
vary.
4It is well know that the full gradient descent (which is equivalent to FedAvg with E = 1 and full batch) do
not require the decay of learning rate.
5The sampling scheme is proposed by Sahu et al. (2018) for FedAvg as a baseline, but this convergence rate
is our contribution.
6The convergence relies on the assumption that data are balanced, i.e., nι = n = •一 =nN. However, we
can use a rescaling trick to get rid of this assumption. We will discuss this point later in Section 3.
3
Published as a conference paper at ICLR 2020
IID versus non-iid. Suppose the data in the k-th device are i.i.d. sampled from the distribution
Dk . Then the overall distribution is a mixture of all local data distributions: D = PkN=1 pkDk .
The prior work Zhang et al. (2015a); Zhou and Cong (2017); Stich (2018); Wang and Joshi (2018);
Woodworth et al. (2018) assumes the data are iid generated by or partitioned among the N devices,
that is, Dk = D for all k ∈ [N]. However, real-world applications do not typically satisfy the iid
assumption. One of our theoretical contributions is avoiding making the iid assumption.
Full device participation. The prior work Coppola (2015); Zhou and Cong (2017); Stich (2018);
Yu et al. (2019); Wang and Joshi (2018); Wang et al. (2019) requires the full device participation in
the aggregation step of FedAvg. In this case, the aggregation step performs
N
wt+E <— Epk wk+E.
k=1
Unfortunately, the full device participation requirement suffers from serious “straggler’s effect”
(which means everyone waits for the slowest) in real-world applications. For example, if there are
thousands of users’ devices in the FL system, there are always a small portion of devices offline. Full
device participation means the central server must wait for these “stragglers”, which is obviously
unrealistic.
Partial device participation. This strategy is much more realistic because it does not require all
the devices’ output. We can set a threshold K (1 ≤ K < N) and let the central server collect the
outputs of the first K responded devices. After collecting K outputs, the server stops waiting for the
rest; the K + 1-th to N-th devices are regarded stragglers in this iteration. Let St (|St| = K) be the
set of the indices of the first K responded devices in the t-th iteration. The aggregation step performs
wt+E4—K X Pk wk+E.
k∈St
It can be proved that K P,fς∈st Pk equals one in expectation.
Communication cost. The FedAvg requires two rounds communications— one broadcast and
one aggregation— per E iterations. If T iterations are performed totally, then the number of
communications is [EC. During the broadcast, the central server sends Wt to all the devices. During
the aggregation, all or part of the N devices sends its output, say wtk+E , to the server.
3	Convergence Analysis of FEDAVG in Non-iid Setting
In this section, we show that FedAvg converges to the global optimum at a rate of O(1/T) for
strongly convex and smooth functions and non-iid data. The main observation is that when the
learning rate is sufficiently small, the effect of E steps of local updates is similar to one step update
with a larger learning rate. This coupled with appropriate sampling and averaging schemes would
make each global update behave like an SGD update. Partial device participation (K < N) only
makes the averaged sequence {wt} have a larger variance, which, however, can be controlled by
learning rates. These imply the convergence property of FedAvg should not differ too much from
SGD. Next, we will first give the convergence result with full device participation (i.e., K = N) and
then extend this result to partial device participation (i.e., K < N).
3.1	Notation and Assumptions
We make the following assumptions on the functions Fι,…，FN. Assumption 1 and 2 are standard;
typical examples are the `2 -norm regularized linear regression, logistic regression, and softmax
classifier.
Assumption 1.	Fι,∙∙∙ ,FN	are all	L-smooth: for all V and	W,	Fk(V)	≤	Fk(w)	+ (v —
w)t VFk(W) + L2 ∣∣v — wk2.
Assumption 2. Fι, ∙∙∙ , FN are all μ-strongly convex: for all V and W, Fk(V) ≥ Fk(W) + (v —
w)t VFk(W) + 2 ∣∣v — w∣2 .
4
Published as a conference paper at ICLR 2020
Assumptions 3 and 4 have been made by the works Zhang et al. (2013); Stich (2018); Stich et al.
(2018); Yu et al. (2019).
Assumption 3. Let ξtk be sampled from the k-th device’s local data uniformly at random. The
variance of stochastic gradients in each device is bounded: E ∣∣ VFk (Wk ,ξk) — VFk (Wk) ∣∣ ≤ σ2
for k = 1,…，N.
Assumption 4. The expected squared norm of stochastic gradients is uniformly bounded, i.e.,
E ∣∣ VFk (wk, ξk )∣∣2 ≤ G2 for all k = 1,…，N and t = 0,…，T 一 1
Quantifying the degree of non-iid (heterogeneity). Let F * and Fk be the minimum values of F
and Fk, respectively. We use the term Γ = F * 一 Pk=I Pk Fk for quantifying the degree of non-iid.
If the data are iid, then Γ obviously goes to zero as the number of samples grows. If the data are
non-iid, then Γ is nonzero, and its magnitude reflects the heterogeneity of the data distribution.
3.2	Convergence Result: Full Device Participation
Here we analyze the case that all the devices participate in the aggregation step; see Section 2 for the
algorithm description. Let the FedAvg algorithm terminate after T iterations and return WT as the
solution. We always require T is evenly divisible by E so that FedAvg can output WT as expected.
Theorem 1. Let Assumptions 1 to 4 hold and L,μ,σk, G be defined therein. Choose K = L,
Y = max{8κ, E} and the learning rate η = 1(七).Then FedAvg withfull device participation
satisfies	E [F (WT)] 一 F * ≤	2： f — + 2Lkwo - w*『),	(4) γ + T ∖μ
where	N B = X Pk σ2 + 6LΓ + 8(E — 1)2G2.	(5) k=i
3.3 Convergence Result: Partial Device Participation
As discussed in Section 2, partial device participation has more practical interest than full device
participation. Let the set St (⊂ [N]) index the active devices in the t-th iteration. To establish the
convergence bound, we need to make assumptions on St .
Assumption 5 assumes the K indices are selected from the distribution pk independently and with
replacement. The aggregation step is simply averaging. This is first proposed in (Sahu et al., 2018),
but they did not provide theoretical analysis.
Assumption 5 (Scheme I). Assume St contains a subset of K indices randomly selected with
replacement according to the sampling probabilities pi,…,pn . The aggregation step of FedAvg
performs wt <- K1 Pk∈st wk.
Theorem 2.	Let Assumptions 1to4 hold and L, μ,σk,G be defined therein. Let κ, γ, η, and B be
defined in Theorem 1. Let Assumption 5 hold and define C = k4 E2G2. Then
E [F (wT)] 一 F*
2κ B + C	* 2
≤ y+t	+ 2Lkw0-W k )-
(6)
Alternatively, we can select K indices from [N] uniformly at random without replacement. As a
consequence, we need a different aggregation strategy. Assumption 6 assumes the K indices are
selected uniformly without replacement and the aggregation step is the same as in Section 2. However,
to guarantee convergence, we require an additional assumption of balanced data.
Assumption 6 (Scheme II). Assume St contains a subset of K indices uniformly sampled from [N]
without replacement. Assume the data is balanced in the sense that pi = •一=PN = N. The
aggregation SteP of FedAvgperforms Wt《—— N ∑2k∈s, Pk Wk.
Theorem 3.	Replace Assumption 5 by Assumption 6 and C by C = N-K 受 E2G2. Then the same
bound in Theorem 2 holds.
5
Published as a conference paper at ICLR 2020
Scheme II requires pi = …=PN = 焉 which obviously violates the unbalance nature of FL.
Fortunately, this can be addressed by the following transformation. Let Fk (w) = pkNFk (w) be a
scaled local objective Fk . Then the global objective becomes a simple average of all scaled local
objectives:
N	1N
F(W) = X Pk Fk(W) = N X Fk(W).
k=1	k=1
Theorem 3 still holds if L, μ, σk, G are replaced by L，νL, μ，ςμ, σk = √νσ, and G = √νG,
respectively. Here, V = N ∙ maxk Pk and ς = N ∙ mink Pk.
3.4 Discussions
Choice of E. Since ∣∣wo - w*k2 ≤ 自 G2 for μ-strongly convex F, the dominating term in eqn. (6)
is
o (PN= Pk σ2+lγ+(i+K) E2G2+KG2!	⑺
Let T denote the number of required steps for FedAvg to achieve an accuracy. It follows from
eqn. (7) that the number of required communication rounds is roughly
⅛ (X (1 + ⅛)EG2 +
PkN=1 P2kσk2 + LΓ + κG2
(8)
E
Thus, T is a function of E that first decreases and then increases, which implies that over-small or
over-large E may lead to high communication cost and that the optimal E exists.
Stich (2018) showed that if the data are iid, then E can be set to O(√T). However, this setting
does not work if the data are non-iid. Theorem 1 implies that E must not exceed Ω(√T); otherwise,
convergence is not guaranteed. Here we give an intuitive explanation. If E is set big, then Wtk can
converge to the minimizer of Fk, and thus FedAvg becomes the one-shot average Zhang et al. (2013)
of the local solutions. If the data are non-iid, the one-shot averaging does not work because weighted
average of the minimizers of Fi,…，FN can be very different from the minimizer of F.
Choice of K . Stich (2018) showed that if the data are iid, the convergence rate improves substan-
tially as K increases. However, under the non-iid setting, the convergence rate has a weak dependence
on K , as we show in Theorems 2 and 3. This implies FedAvg is unable to achieve linear speedup.
We have empirically observed this phenomenon (see Section 6). Thus, in practice, the participation
ratio K can be set small to alleviate the straggler,s effect without affecting the convergence rate.
Choice of sampling schemes. We considered two sampling and averaging schemes in Theorems 2
and 3. Scheme I selects K devices according to the probabilities Pi,…，pn with replacement.
The non-uniform sampling results in faster convergence than uniform sampling, especially when
Pi,…，pn are highly non-uniform. If the system can choose to activate any of the N devices at any
time, then Scheme I should be used.
However, oftentimes the system has no control over the sampling; instead, the server simply uses
the first K returned results for the update. In this case, we can assume the K devices are uniformly
sampled from all the N devices and use Theorem 3 to guarantee the convergence. If Pi,…，pn are
highly non-uniform, then V = N ∙ maxk Pk is big and ς = N ∙ mink Pk is small, which makes the
convergence of FedAvg slow. This point of view is empirically verified in our experiments.
4 Necessity of Learning Rate Decay
In this section, we point out that diminishing learning rates are crucial for the convergence of
FedAvg in the non-iid setting. Specifically, we establish the following theorem by constructing a
ridge regression model (which is strongly convex and smooth).
6
Published as a conference paper at ICLR 2020
Theorem 4.	We artificially construct a strongly convex and smooth distributed optimization problem.
With full batch size, E > 1, and any fixed step size, FedAvg will converge to sub-optimal points.
Specfically, let W* be the solution produced by FedAvg with a small enough and constant η, and
w* the optimal solution. Then we have
IIw* - W*k2 = Ω((E -1)η) ∙kw*k2.
where we hide some problem dependent constants.
Theorem 4 and its proof provide several implications. First, the decay of learning rate is necessary of
FedAvg. On the one hand, Theorem 1 shows with E > 1 and a decaying learning rate, FedAvg
converges to the optimum. On the other hand, Theorem 4 shows that with E > 1 and any fixed
learning rate, FedAvg does not converges to the optimum.
Second, FedAvg behaves very differently from gradient descent. Note that FedAvg with E = 1
and full batch size is exactly the Full Gradient Descent; with a proper and fixed learning
rate, its global convergence to the optimum is guaranteed Nesterov (2013). However, Theorem 4
shows that FedAvg with E > 1 and full batch size cannot possibly converge to the optimum. This
conclusion doesn’t contradict with Theorem 1 in Khaled et al. (2019), which, when translated into
our case, asserts that W* will locate in the neighborhood of w* with a constant learning rate.
Third, Theorem 4 shows the requirement of learning rate decay is not an artifact of our analysis;
instead, it is inherently required by FedAvg. An explanation is that constant learning rates, combined
with E steps of possibly-biased local updates, form a sub-optimal update scheme, but a diminishing
learning rate can gradually eliminate such bias.
The efficiency of FedAvg principally results from the fact that it performs several update steps on a
local model before communicating with other workers, which saves communication. Diminishing
step sizes often hinders fast convergence, which may counteract the benefit of performing multiple
local updates. Theorem 4 motivates more efficient alternatives to FedAvg.
5	Related Work
Federated learning (FL) was first proposed by McMahan et al. (2017) for collaboratively learning a
model without collecting users’ data. The research work on FL is focused on the communication-
efficiency Konevcny et al. (2016); McMahan et al. (2017); Sahu et al. (2018); Smith et al. (2017)
and data privacy Bagdasaryan et al. (2018); Bonawitz et al. (2017); Geyer et al. (2017); Hitaj et al.
(2017); Melis et al. (2019). This work is focused on the communication-efficiency issue.
FedAvg, a synchronous distributed optimization algorithm, was proposed by McMahan et al. (2017)
as an effective heuristic. Sattler et al. (2019); Zhao et al. (2018) studied the non-iid setting, however,
they do not have convergence rate. A contemporaneous and independent work Xie et al. (2019)
analyzed asynchronous FedAvg; while they did not require iid data, their bound do not guarantee
convergence to saddle point or local minimum. Sahu et al. (2018) proposed a federated optimization
framework called FedProx to deal with statistical heterogeneity and provided the convergence
guarantees in non-iid setting. FedProx adds a proximal term to each local objective. When these
proximal terms vanish, FedProx is reduced to FedAvg. However, their convergence theory requires
the proximal terms always exist and hence fails to cover FedAvg.
When data are iid distributed and all devices are active, FedAvg is referred to as LocalSGD. Due
to the two assumptions, theoretical analysis of LocalSGD is easier than FedAvg. Stich (2018)
demonstrated LocalSGD provably achieves the same linear speedup with strictly less communication
for strongly-convex stochastic optimization. Coppola (2015); Zhou and Cong (2017); Wang and
Joshi (2018) studied LocalSGD in the non-convex setting and established convergence results.
Yu et al. (2019); Wang et al. (2019) recently analyzed LocalSGD for non-convex functions in
heterogeneous settings. In particular, Yu et al. (2019) demonstrated LocalSGD also achieves
OQNNT) convergence (i.e., linear speedup) for non-convex optimization. Lin et al. (2018)
empirically shows variants of LocalSGD increase training efficiency and improve the generalization
performance of large batch sizes while reducing communication. For LocalGD on non-iid data (as
opposed to LocalSGD), the best result is by the contemporaneous work (but slightly later than our
first version) (Khaled et al., 2019). Khaled et al. (2019) used fixed learning rate η and showed O(T)
7
Published as a conference paper at ICLR 2020
convergence to a point O(η2E2) away from the optimal. In fact, the suboptimality is due to their
fixed learning rate. As we show in Theorem 4, using a fixed learning rate η throughout, the solution
by LocalGD is at least Ω((E - 1)n) away from the optimal.
If the data are iid, distributed optimization can be efficiently solved by the second-order algorithms
Mahajan et al. (2018); Reddi et al. (2016); Shamir et al. (2014); Shusen Wang et al. (2018); Zhang
and Lin (2015) and the one-shot methods Lee et al. (2017); Lin et al. (2017); Wang (2019); Zhang
et al. (2013; 2015b). The primal-dual algorithms Hong et al. (2018); Smith et al. (2016; 2017) are
more generally applicable and more relevant to FL.
6	Numerical Experiments
Models and datasets We examine our theoretical results on a logistic regression with weight decay
λ = 1e - 4. This is a stochastic convex optimization problem. We distribute MNIST dataset (LeCun
et al., 1998) among N = 100 workers in a non-iid fashion such that each device contains samples of
only two digits. We further obtain two datasets: mnist balanced and mnist unbalanced.
The former is balanced such that the number of samples in each device is the same, while the latter is
highly unbalanced with the number of samples among devices following a power law. To manipulate
heterogeneity more precisly, we synthesize unbalanced datasets following the setup in Sahu et al.
(2018) and denote it as synthetic(α, β) where α controls how much local models differ from
each other and β controls how much the local data at each device differs from that of other devices.
We obtain two datasets: synthetic(0,0) and synthetic(1,1). Details can be found in
Appendix D.

IO1
10,
LoodgtCJig(S)
(a) The impact of E
——X=IO
--K=30
——JT=SO
——«=70
——K=IOl)
Onginal
fcbe∞I
Schemen(T)
MolIeIOEJ
0
200
50 IoO 150
Rtnmd(WS)
n≡
0	50	100	150	200
Round (B⅛)
0	50	1∞	150	200
Reund (27£)
(b)	The impact of K
(c)	Different schemes (d) Different schemes
Figure 1: (a) To obtain an accuracy, the required rounds first decrease and then increase when we
increase the local steps E. (b) In Synthetic(0,0) dataset, decreasing the numbers of active
devices each round has little effect on the convergence process. (c) In mnist balanced dataset,
Scheme I slightly outperforms Scheme II. They both performs better than the original scheme.
Here transformed Scheme II coincides with Scheme II due to the balanced data. (d) In mnist
unbalanced dataset, Scheme I performs better than Scheme II and the original scheme. Scheme II
suffers from instability while transformed Scheme II has a lower convergence rate.
Experiment settings For all experiments, we initialize all runnings with w0 = 0. In each round,
all selected devices run E steps of SGD in parallel. We decay the learning rate at the end of each
round by the following scheme η =器,where no is chosen from the set {1,0.1,0.01}. We evaluate
the averaged model after each global synchronization on the corresponding global objective. For fair
comparison, we control all randomness in experiments so that the set of activated devices is the same
across all different algorithms on one configuration.
Impact of E We expect that T /E, the required communication round to achieve curtain accuracy,
is a hyperbolic finction of E as equ (8) indicates. Intuitively, a small E means a heavy communication
burden, while a large E means a low convergence rate. One needs to trade off between communication
efficiency and fast convergence. We empirically observe this phenomenon on unbalanced datasets in
Figure 1a. The reason why the phenomenon does not appear in mnist balanced dataset requires
future investigations.
8
Published as a conference paper at ICLR 2020
Impact of K Our theory suggests that a larger K may slightly accelerate convergence since T/E
contains a term O (EG2). Figure 1b shows that K has limited influence on the convergence of
FedAvg in synthetic(0,0) dataset. It reveals that the curve of a large enough K is slightly
better. We observe similar phenomenon among the other three datasets and attach additional results
in Appendix D. This justifies that when the variance resulting sampling is not too large (i.e., B C),
one can use a small number of devices without severely harming the training process, which also
removes the need to sample as many devices as possible in convex federated optimization.
Effect of sampling and averaging schemes. We compare four schemes among four federated
datasets. Since the original scheme involves a history term and may be conservative, we carefully
set the initial learning rate for it. Figure 1c indicates that when data are balanced, Schemes I and II
achieve nearly the same performance, both better than the original scheme. Figure 1d shows that
when the data are unbalanced, i.e., pk ’s are uneven, Scheme I performs the best. Scheme II suffers
from some instability in this case. This is not contradictory with our theory since we don’t guarantee
the convergence of Scheme II when data is unbalanced. As expected, transformed Scheme II performs
stably at the price of a lower convergence rate. Compared to Scheme I, the original scheme converges
at a slower speed even if its learning rate is fine tuned. All the results show the crucial position of
appropriate sampling and averaging schemes for FedAvg.
7	Conclusion
Federated learning becomes increasingly popular in machine learning and optimization communities.
In this paper we have studied the convergence of FedAvg, a heuristic algorithm suitable for federated
setting. We have investigated the influence of sampling and averaging schemes. We have provided
theoretical guarantees for two schemes and empirically demonstrated their performances. Our work
sheds light on theoretical understanding of FedAvg and provides insights for algorithm design in
realistic applications. Though our analyses are constrained in convex problems, we hope our insights
and proof techniques can inspire future work.
Acknowledgements
Li, Yang and Zhang have been supported by the National Natural Science Foundation of China (No.
11771002 and 61572017), Beijing Natural Science Foundation (Z190001), the Key Project of MOST
of China (No. 2018AAA0101000), and Beijing Academy of Artificial Intelligence (BAAI).
References
Eugene Bagdasaryan, Andreas Veit, Yiqing Hua, Deborah Estrin, and Vitaly Shmatikov. How to
backdoor federated learning. arXiv preprint arXiv:1807.00459, 2018. 7
Keith Bonawitz, Vladimir Ivanov, Ben Kreuter, Antonio Marcedone, H Brendan McMahan, Sarvar
Patel, Daniel Ramage, Aaron Segal, and Karn Seth. Practical secure aggregation for privacy-
preserving machine learning. In Proceedings of the 2017 ACM SIGSAC Conference on Computer
and Communications Security, 2017. 7
Gregory Francis Coppola. Iterative parameter mixing for distributed large-margin training of struc-
tured predictors for natural language processing. PhD thesis, 2015. 4, 7
Robin C Geyer, Tassilo Klein, Moin Nabi, and SAP SE. Differentially private federated learning: A
client level perspective. arXiv preprint arXiv:1712.07557, 2017. 7
Briland Hitaj, Giuseppe Ateniese, and Fernando Perez-Cruz. Deep models under the GAN: infor-
mation leakage from collaborative deep learning. In ACM SIGSAC Conference on Computer and
Communications Security, 2017. 7
Mingyi Hong, Meisam Razaviyayn, and Jason Lee. Gradient primal-dual algorithm converges
to second-order stationary solution for nonconvex distributed optimization over networks. In
International Conference on Machine Learning (ICML), 2018. 8
9
Published as a conference paper at ICLR 2020
Dusan Jakovetic. Distributed optimization: algorithms and convergence rates. PhD, Carnegie Mellon
University, Pittsburgh PA, USA, 2013. 1
Ahmed Khaled, Konstantin Mishchenko, and Peter Richtdrik. First analysis of local gd on heteroge-
neous data. arXiv preprint arXiv:1909.04715, 2019. 2, 7
Jakub Konevcny. Stochastic, distributed and federated optimization for machine learning. arXiv
preprint arXiv:1707.01155, 2017. 1
Jakub Konevcny, Brendan McMahan, and Daniel Ramage. Federated optimization: distributed
optimization beyond the datacenter. arXiv preprint arXiv:1511.03575, 2015. 1
Jakub Konevcny, H Brendan McMahan, Felix X Yu, Peter Richtdrik, Ananda Theertha Suresh,
and Dave Bacon. Federated learning: strategies for improving communication efficiency. arXiv
preprint arXiv:1610.05492, 2016. 7
Yann LeCun, Leon Bottou, Yoshua Bengio, Patrick Haffner, et al. Gradient-based learning applied to
document recognition. Proceedings of the IEEE, 86(11):2278-2324,1998. 8, 24
Jason D Lee, Qiang Liu, Yuekai Sun, and Jonathan E Taylor. Communication-efficient sparse
regression. The Journal of Machine Learning Research, 18(1):115-144, 2017. 8
Mu Li, David G Andersen, Jun Woo Park, Alexander J Smola, Amr Ahmed, Vanja Josifovski, James
Long, Eugene J Shekita, and Bor-Yiing Su. Scaling distributed machine learning with the parameter
server. In 11th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI}
14), pages 583-598, 2014a. 1
Mu Li, David G Andersen, Alexander J Smola, and Kai Yu. Communication efficient distributed
machine learning with the parameter server. In Advances in Neural Information Processing Systems
(NIPS), 2014b. 1
Tian Li, Anit Kumar Sahu, Ameet Talwalkar, and Virginia Smith. Federated learning: Challenges,
methods, and future directions. arXiv preprint arXiv:1908.07873, 2019. 1
Shao-Bo Lin, Xin Guo, and Ding-Xuan Zhou. Distributed learning with regularized least squares.
Journal of Machine Learning Research, 18(1):3202-3232, 2017. 8
Tao Lin, Sebastian U Stich, and Martin Jaggi. Don’t use large mini-batches, use local sgd. arXiv
preprint arXiv:1808.07217, 2018. 7
Dhruv Mahajan, Nikunj Agrawal, S Sathiya Keerthi, Sundararajan Sellamanickam, and Leon Bottou.
An efficient distributed learning algorithm based on effective local functional approximations.
Journal of Machine Learning Research, 19(1):2942-2978, 2018. 8
Brendan McMahan, Eider Moore, Daniel Ramage, Seth Hampson, and Blaise Aguera y Arcas.
Communication-Efficient Learning of Deep Networks from Decentralized Data. In International
Conference on Artificial Intelligence and Statistics (AISTATS), 2017. 1, 2, 3, 7, 17, 25
Luca Melis, Congzheng Song, Emiliano De Cristofaro, and Vitaly Shmatikov. Exploiting unintended
feature leakage in collaborative learning. In IEEE Symposium on Security & Privacy (S&P). IEEE,
2019. 7
Xiangrui Meng, Joseph Bradley, Burak Yavuz, Evan Sparks, Shivaram Venkataraman, Davies Liu,
Jeremy Freeman, DB Tsai, Manish Amde, and Sean Owen. MLlib: machine learning in Apache
Spark. Journal of Machine Learning Research, 17(34):1-7, 2016. 1
Yurii Nesterov. Introductory lectures on convex optimization: a basic course, volume 87. Springer
Science & Business Media, 2013. 7
SashankJReddi, Jakub Konecny, Peter Richtdrik, Barnabds P6cz6s, and Alex Smola. AIDE: fast and
communication efficient distributed optimization. arXiv preprint arXiv:1608.06879, 2016. 1, 8
Peter Richtdrik and Martin Takdc. Distributed coordinate descent method for learning with big data.
Journal of Machine Learning Research, 17(1):2657-2681, 2016. 1
10
Published as a conference paper at ICLR 2020
Anit Kumar Sahu, Tian Li, Maziar Sanjabi, Manzil Zaheer, Ameet Talwalkar, and Virginia Smith.
Federated optimization for heterogeneous networks. arXiv preprint arXiv:1812.06127, 2018. 1, 2,
3, 5, 7, 8, 17, 24, 25
Felix Sattler, Simon Wiedemann, Klaus-Robert Muller, and Wojciech Samek. Robust and
communication-efficient federated learning from non-iid data. arXiv preprint arXiv:1903.02891,
2019. 2, 7
Ohad Shamir, Nati Srebro, and Tong Zhang. Communication-efficient distributed optimization using
an approximate Newton-type method. In International conference on machine learning (ICML),
2014. 1,8
Reza Shokri and Vitaly Shmatikov. Privacy-preserving deep learning. In Proceedings of the 22nd
ACM SIGSAC Conference on Computer and Communications Security, 2015. 1
Shusen Wang, Farbod Roosta Khorasani, Peng Xu, and Michael W. Mahoney. GIANT: Globally
improved approximate newton method for distributed optimization. In Conference on Neural
Information Processing Systems (NeurIPS), 2018. 1, 8
Virginia Smith, Simone Forte, Chenxin Ma, Martin Takac, Michael I Jordan, and Martin Jaggi.
CoCoA: A general framework for communication-efficient distributed optimization. arXiv preprint
arXiv:1611.02189, 2016. 1, 8
Virginia Smith, Chao-Kai Chiang, Maziar Sanjabi, and Ameet S Talwalkar. Federated multi-task
learning. In Advances in Neural Information Processing Systems (NIPS), 2017. 2, 7, 8
Sebastian U Stich. Local SGD converges fast and communicates little. arXiv preprint
arXiv:1805.09767, 2018. 2,4, 5, 6, 7, 12
Sebastian U Stich, Jean-Baptiste Cordonnier, and Martin Jaggi. Sparsified SGD with memory. In
Advances in Neural Information Processing Systems (NIPS), pages 4447-4458, 2018. 5
Jianyu Wang and Gauri Joshi. Cooperative SGD: A unified framework for the design and analysis of
communication-efficient SGD algorithms. arXiv preprint arXiv:1808.07576, 2018. 2, 4, 7
Shiqiang Wang, Tiffany Tuor, Theodoros Salonidis, Kin K Leung, Christian Makaya, Ting He, and
Kevin Chan. Adaptive federated learning in resource constrained edge computing systems. IEEE
Journal on Selected Areas in Communications, 2019. 2, 4, 7
Shusen Wang. A sharper generalization bound for divide-and-conquer ridge regression. In The
Thirty-Third AAAI Conference on Artificial Intelligence (AAAI), 2019. 8
Blake E Woodworth, Jialei Wang, Adam Smith, Brendan McMahan, and Nati Srebro. Graph oracle
models, lower bounds, and gaps for parallel stochastic optimization. In Advances in Neural
Information Processing Systems (NeurIPS), 2018. 2, 4
Cong Xie, Sanmi Koyejo, and Indranil Gupta. Asynchronous federated optimization. arXiv preprint
arXiv:1903.03934, 2019. 7
Hao Yu, Sen Yang, and Shenghuo Zhu. Parallel restarted sgd with faster convergence and less
communication: Demystifying why model averaging works for deep learning. In AAAI Conference
on Artificial Intelligence, 2019. 2, 4, 5, 7
Sixin Zhang, Anna E Choromanska, and Yann LeCun. Deep learning with elastic averaging SGD. In
Advances in Neural Information Processing Systems (NIPS), 2015a. 4
Yuchen Zhang and Xiao Lin. DiSCO: distributed optimization for self-concordant empirical loss. In
International Conference on Machine Learning (ICML), 2015. 1, 8
Yuchen Zhang, John C. Duchi, and Martin J. Wainwright. Communication-efficient algorithms for
statistical optimization. Journal of Machine Learning Research, 14:3321-3363, 2013. 5, 6, 8
Yuchen Zhang, John Duchi, and Martin Wainwright. Divide and conquer kernel ridge regression:
a distributed algorithm with minimax optimal rates. Journal of Machine Learning Research, 16:
3299-3340, 2015b. 8
11
Published as a conference paper at ICLR 2020
Yue Zhao, Meng Li, Liangzhen Lai, Naveen Suda, Damon Civin, and Vikas Chandra. Federated
learning with non-iid data. arXiv preprint arXiv:1806.00582, 2018. 7
Shun Zheng, Fen Xia, Wei Xu, and Tong Zhang. A general distributed dual coordinate optimization
framework for regularized loss minimization. arXiv preprint arXiv:1604.03763, 2016. 1
Fan Zhou and Guojing Cong. On the convergence properties of a k-step averaging stochastic gradient
descent algorithm for nonconvex optimization. arXiv preprint arXiv:1708.01012, 2017. 2, 4, 7
Hankz Hankui Zhuo, Wenfeng Feng, Qian Xu, Qiang Yang, and Yufeng Lin. Federated reinforcement
learning. arXiv preprint arXiv:1901.08277, 2019. 1
A Proof of Theorem 1
We analyze FedAvg in the setting of full device participation in this section.
A. 1 Additional Notation
Let wtk be the model parameter maintained in the k-th device at the t-th step. Let IE be the set of
global synchronization steps, i.e., IE = {nE | n = 1, 2, ∙∙∙}. If t + 1 ∈ IE, i.e., the time step to
communication, FedAvg activates all devices. Then the update of FedAvg with partial devices
active can be described as
vk+ι = wk - ηtVFk(wk,ξk),
wk	if t + 1 ∈/ IE ,
t+	1 pkvtk+1 if t + 1 ∈ IE .
(9)
(10)
Here, an additional variable vtk+1 is introduced to represent the immediate result of one step SGD
update from wtk. We interpret wtk+1 as the parameter obtained after communication steps (if possible).
In our analysis, we define two virtual sequences Vt = PN=I PkVk and Wt = PN=I PkWk. This is
motivated by (Stic , 201 ). Vt+ι results from an single step of SGD from Wt. When t + 1 ∈ IE,
both are inaccessible. When t + 1 ∈ IE, we can only fetch Wt+ι. For convenience, We define
gt = PN=IPkVFk(wk) and gt = PN=IPkVFk(Wk,ξk). Therefore, Vt+ι = Wt — ηtgt and
Egt = gt.
A.2 Key Lemmas
To convey our proof clearly, it would be necessary to prove certain useful lemmas. We defer the proof
of these lemmas to latter section and focus on proving the main theorem.
Lemma 1 (Results of one step SGD). Assume Assumption 1 and 2. If η ≤ J, we have
N
E kVt+1 - W*『≤ (1-ηtμ)E∣∣Wt - w*『+ η2Ekgt - gtk2 + 6Lη2Γ + 2E X Pk ∣∣Wt - Wk∣∣2
k=1
where Γ = F * - PN=I PkFk ≥ 0.
Lemma 2 (Bounding the variance). Assume Assumption 3 holds. It follows that
N
Ekgt-gJI2 ≤ XPkσk.
k=1
Lemma 3 (Bounding the divergence of {Wtk}). Assume Assumption 4, that ηt is non-increasing and
ηt ≤ 2ηt+E for all t ≥ 0. It follows that
N
E X Pk||Wt-Wk||2	≤ 4η2(E - I)2G2.
k=1
12
Published as a conference paper at ICLR 2020
A.3 Completing the Proof of Theorem 1
Proof. It is clear that no matter whether t + 1 ∈ Ie or t +1 ∈ ZE, we always have Wt+ι = Vt+ι.
Let ∆t = E ∣∣Wt+ι 一 w?k2. From Lemma 1, Lemma 2 and Lemma 3, it follows that
△t+i ≤ (1 一 ηtμ)∆t + η2B	(ii)
where
N
B = XPkσ2 + 6LΓ + 8(E - 1)2G2.
k=1
For a diminishing stepsize, η = t+βγ for some β > ɪ and γ > 0 such that ηι ≤ min{1, 4L }
1
4L
and ηt ≤ 2ηt+E . We will prove △t ≤
γ+t where V = max{ β⅛, (Y + 1)δi }∙
We prove it by induction. Firstly, the definition of v ensures that it holds for t = 1. Assume the
conclusion holds for some t, it follows that
△t+i ≤ (1 一 ηtμ)∆t + η2B
=A 一 βμ ∖ V + β2B
t + YJt + γ (t + γ)2
t + γ — 1 Γ β2B	βμ — 1
=V +	V
(t + Y)2	+ Ut + Y)2	(t + Y)2」
V
≤ t + Y + 1.
Then by the strong convexity of F(∙),
E[F(Wt)] 一 F*≤ IL△ ≤ 2Y⅛.
Specifically, if we choose β = 2, y = max{8 L _ 1,E} and denote K = L, then ηt = 2 γ+t and
E[F (wt)] 一 F * ≤ -7— +----+ 2lδi).
y +1 ∖μ
□
A.4 Deferred proofs of key lemmas
ProofofLemma 1. Notice that Vt+i = Wt — ηtgt, then
l∣Vt+i - W?k2 = ∣∣Wt 一 ηtgt 一 W? 一 ηtgt + ηtgtk2
=l∣Wt - W? 一 ηtgtk2 + 2ηt ^W 一 W? 一 ηtgt, gt - gti +η2 Ilgt - gt『	(12)
`-------V---------} `-----------V-------------}
A1	A2
Note that EA2 = 0. We next focus on bounding Ai . Again we split Ai into three terms:
l∣Wt 一 W? 一 ηtgtk2 = l∣Wt - w?『—2ηt Et - w?,gj + η2 I∣gtk2	(13)
x-------{---------} X--{--}
B1	B2
From the the L-smoothness of Fk (∙), it follows that
IIVFk (Wk)『≤ 2L (Fk (Wk) - F?) .	(14)
By the convexity of ∣∣∙∣∣2 and eqn.(14), we have
NN
B2 = η2 kgtk2 ≤ η2 XPk IIVFk (Wk)『≤ 2Lη2 XPk (Fk(Wk) — F：).
k=i	k=i
13
Published as a conference paper at ICLR 2020
Note that
N
Bi = -2ηt (wt - w*,gt)= -2ηt XPk (wt - w*, RFk(M))
k = 1
NN
=-2ηt XPk (Mt - wk, VFk(Wk)- 2ηt XPk〈wk - w*, VFk(Wk)〉.	(15)
k=1	k=1
By Cauchy-Schwarz inequality and AM-GM inequality, We have
-2 (Wt- Wk, VFk (Wk)〉≤ η IlWt- wk I I 2 + ηt I I VFk (Wk)『.	(16)
By the μ-strong convexity of Fk(∙), we have
-(Wk - w*, VFk(Wk)) ≤ -(Fk (Wk) - Fk (W")) - 2 iiWk - w*『.	(17)
By combining eqn. (13), eqn. (15), eqn. (16) and eqn. (17), it follows that
N
AI = IIWt- W* - ηtgtk2 ≤ Ilwt - w*『+ 2Lη2 XPk (Fk(Wk) - Fki)
k=1
E ι	」	........o
+ ηtXPk (- ||wt- wkl + ηt ||VFk (wt)U
k = 1	' ηt
N
-2ηt XPk (Fk (Wk) - Fk(W") + 2 ||wk - w*『)
k = 1
N
=(I - μηt) IIwt - w*『+ XPk ||wt - Wk||2
k=1
NN
+ 4Lη2 XPk (Fk(Wk)- Fk) - 2ηt XPk (Fk (Wk) - Fk(W"))
k=1	k=1
'--------------------V--------------------'
C
where we use eqn. (14) again.
We next aim to bound C. We define Yt = 2ηt(1 - 2Lηt). Since ηt ≤ 土, ηt ≤ Yt ≤ 2ηt. Then we
split C into two terms:
NN
C = -2ηt(1 - 2Lηt) XPk (Fk(Wk) - Fk) + 2ηt XPk (Fk(w*) - Fki)
k=1	k=1
NN
=-Yt XPk (Fk(wk) - F") + (2ηt - γt) X Pk (F* - F&
k=1	k=1
N
=-Yt XPk (Fk(wk) - F*) +4Lη2Γ
k=1
X----V--Z
D
where in the last equation, we use the notation Γ = PNI Pk (F * - F*) = F * - PNI Pk F".
14
Published as a conference paper at ICLR 2020
To bound D, we have
NN	N
XPk (Fk(Wk) - F*) = XPk (Fk(Wk) - Fk(Wt)) + XPk (Fk(Wt) - F*)
k=1	k=1	k=1
N
≥ XPk (VFk(Wt), Wk - Wt) + (F(Wt)- F*)
k=1
N
≥ -2 XPk ηt IlVFk(Wt)『+— IlWk - Wt||2 +(F(Wt) - F*)
k=1	ηt
N
12
≥ - EPk ηt L (Fk (Wt) - Fk) + 而 ||Wt - Wt1	+ (F (Wt) - F )
where the first inequality results from the convexity of Fk (∙), the second inequality from AM-GM
inequality and the third inequality from eqn. (14).
Therefore
N
C = γt X Pk
k=1
ηtL (Fk(Wt) - Fk0 + 2η ||Wk - WtIH - γt (F(Wt) - F*) + 4Lηt2r
NN
=Yt(ηtL -I) XPk(Fk(Wt)- F*) + (4Lη2 + ItrntL) γ + ɪ XPk ||Wk -而小
k=1	2ηt k=1
N
≤ 6Lntr + XPk |〔Wk — Wt『
k=1
where in the last inequality, we use the following facts: (1) ntL - 1 ≤
PN=I Pk (Fk (Wt) - F *) = F (Wt) - F *
就≤ 1.
≥ 0 (2) Γ ≥ 0 and 4Lnt2 + γtntL
Recalling the expression of A1 and plugging C into it, we have
Ai = l∣Wt - W? - ntgtk2
N
≤ (I-μnt) kWt - w*『+ 2XPk ||Wt - Wk||2 + 6n2Lr
k=1
-4 ≤ 0and
≤ 6nt2L and (3)
(18)
Using eqn. (18) and taking expectation on both sides of eqn. (12), we erase the randomness from
stochastic gradients, we complete the proof.	□
Proof of Lemma 2. From Assumption 3, the variance of the stochastic gradients in device k is
bounded by σk2 , then
| N	|2
Ekgt- gtk2 = E XPk(VFk(Wk,ξk) -VFk(Wk)),
|k=1	|
N
=XPkE||VFk(Wk芯)-VFk(Wk)『，
k=1
N
≤ XP2kσk2 .
k=1
□
Proof of Lemma 3. Since FedAvg requires a communication each E steps. Therefore, for any t ≥ 0,
there exists a to ≤ t, such that t - to ≤ E - 1 and Wk = Wto for all k = 1,2,…，N. Also, we use
15
Published as a conference paper at ICLR 2020
the fact that ηt is non-increasing and ηt0 ≤ 2ηt for all t - t0 ≤ E - 1, then
NN
E X Pk Ilwt- WkIF=E χ Pk II(Wk - wto)-(Wt- wto )∣∣2
k=1	k=1
N
≤ E X Pk IWk- wto『
k=1
N	t-1
≤ XPkEX(E - I)η2 ∣VFfc(wk,ξk)∣∣2
k=1	t=t0
N	t-1
≤ XPkX(E-1)ηt20G2
k=1	t=t0
N
≤ XPkηt20(E-1)2G2
k=1
≤ 4ηt2(E - 1)2G2.
□
B Proofs of Theorems 2 and 3
We analyze FedAvg in the setting of partial device participation in this section.
B.1 Additional Notation
Recall that Wtk is the model parameter maintained in the k-th device at the t-th step. IE = {nE | n =
1,2,…} is the set of global synchronization steps. Unlike the setting in Appendix A, When it is
the time to communicate, i.e., t + 1 ∈ IE, the scenario considered here is that FedAvg randomly
activates a subset of devices according to some sampling schemes. Again, gt = Pk=I PkVFk (Wk)
and gt = PN=IPkFk(Wk, ξk). Therefore, Vt+ι = W - ηtgt and Egt = gf
Multiset selected. All sampling schemes can be divided into tWo groups, one With replacement and
the other Without replacement. For those With replacement, it is possible for a device to be activated
several times in a round of communication, even though each activation is independent With the rest.
We denote by Ht the multiset selected Which alloWs any element to appear more than once. Note that
Ht is only Well defined for t ∈ IE. For convenience, We denote by St = HN (t,E) the most recent set
of chosen devices Where N(t, E) = max{n|n ≤ t, n ∈ IE}.
Updating scheme. Limited to realistic scenarios (for communication efficiency and loW straggler
effect), FedAvg first samples a random multiset St of devices and then only perform updates on them.
This make the analysis a little bit intricate, since St varies each E steps. HoWever, We can use a
thought trick to circumvent this difficulty. We assume that FedAvg alWays activates all devices at
the beginning of each round and then uses the parameters maintained in only a feW sampled devices
to produce the next-round parameter. It is clear that this updating scheme is equivalent to the original.
Then the update of FedAvg With partial devices active can be described as: for all k ∈ [N],
vtk+1 =Wtk -ηtVFk(Wtk,ξtk),
Wk =	vtk+1	if t +	1	∈/	IE ,
t+1	samples St+1 and average {vtk+1}k∈St+1	ift +	1	∈	IE.
(19)
(20)
Sources of randomness. In our analysis, there are tWo sources of randomness. One results from
the stochastic gradients and the other is from the random sampling of devices. All the analysis in
Appendix A only involve the former. To distinguish them, we use the notation ESt(∙), when we take
expectation to erase the latter type of randomness.
16
Published as a conference paper at ICLR 2020
B.2 Key Lemmas
Two schemes. For full device participation, we always have Wt+i = vt+i. This is true when
t + 1 ∈/ IE for partial device participation. When t+1 ∈ IE, we hope this relation establish in the
sense of expectation. To that end, we require the sampling and averaging scheme to be unbiased in
the sense that
ESt+1 wt+1 = vt+1.
We find two sampling and averaging schemes satisfying the requirement and provide convergence
guarantees.
(I)	The server establishes St+ι by i.i.d. with replacement sampling an index k ∈ {1, ∙∙∙ ,N}
with probabilities Pi, ∙∙∙ ,pN for K times. Hence St+ι is a multiset which allows a element to
occur more than once. Then the server averages the parameters by w* = K^ P,k∈st+1 vk+ι∙
This is first proposed in (Sahu et al., 2018) but lacks theoretical analysis.
(II)	The server samples St+1 uniformly in a without replacement fashion. Hence each element in
St+i only occurs once.Then server averages the parameters by wk+i = P,k∈st+1 PkNvk+ι∙
Note that when thepks are not all the same, one cannot ensure P,k∈st+1 PkN = 1.
Unbiasedness and bounded variance. Lemma 4 shows the mentioned two sampling and averaging
schemes are unbiased. In expectation, the next-round parameter (i.e., Wt+ι) is equal to the weighted
average of parameters in all devices after SGD updates (i.e., Vt+ι). However, the original scheme in
(McMahan et al., 2017) (see Table 1) does not enjoy this property. But it is very similar to Scheme II
except the averaging scheme. Hence our analysis cannot cover the original scheme.
Lemma 5 shows the expected difference between Vt+ι and Wt+ι is bounded. EStkvt+ι - Wt+ι∣∣2
is actually the variance of Wt+ι.
Lemma 4 (Unbiased sampling scheme). Ift + 1 ∈ IE, for Scheme Iand Scheme II, we have
ESt (Wt+ι) = Vt+1.
Lemma 5 (Bounding the variance of Wt). For t + 1 ∈ I, assume that η is non-increasing and
ηt ≤ 2ηt+E for all t ≥ 0. We have the following results.
(	1) For SCheme I, the expected difference between Vt+ι and Wt+ι is bounded by
ESt kvt+1 - wt+1k2 ≤ "η2E2G2.
(	2) For Scheme II, assuming p1 = p2
Wt+ι is bounded by
PN = N, the expected difference between vt+ι and
EStkvt+1 - Wt+ik2 ≤ N-Kɪη2E2G2.
N-1 K
B	.3 Completing the Proof of Theorem 2 and 3
Proof. Note that
∣∣Wt+i - w*『=∣∣Wt+i - vt+i + vt+i - w*『
=∣∣wt+i - vt+ik2 + ∣∣vt+i - w*『+ 2(wt+i - vt+i,vt+i - w*).
S-----{--------' S----V------' S-----------V-----------'
A1	A2	A3
When expectation is taken over St+i, the last term (A3) vanishes due to the unbiasedness of wt+i.
If t + 1 ∈ IE, Ai vanishes since wt+i = vt+i. We use Lemma 5 to bound A2. Then it follows that
EIIWt+i - w*『≤ (1 - ηtμ)E∣∣wt - w?『+ η2B.
17
Published as a conference paper at ICLR 2020
If t + 1 ∈ IE, we additionally use Lemma 5 to bound A1. Then
E ∣∣Wt+ι - w*『=E ∣∣Wt+ι - Vt+ιk2 + E ∣∣Vt+ι - w*『
≤ (1 - ηtμ)E ∣∣Wt - w?k2 + η2(B + C),	(21)
where C is the upper bound of n2 EStkvt+1 - Wt+J∣2 (C is defined in Theorem 2 and 3).
The only difference between eqn. (21) and eqn. (11) is the additional C. Thus we can use the
same argument there to prove the theorems here. Specifically, for a diminishing stepsize, η = t+βγ
for some β > ɪ and γ > 0 such that ηι ≤ min{ μ, 4L} = ± and η ≤ 2ηt+E, we can prove
E∣Wt+ι - w*『≤ γvt where V = max {β2(B-C, (γ + 1)∣wι - w*∣∣2}.
Then by the strong convexity of F(∙),
E[F(Wt)] - F*≤ 2∆t ≤ 2γ+-t.
Specifically, if we choose β = 2, γ = max{8 L - 1,E} and denote K = Lμ, then ηt = 2 γ+t and
E[F (Wt)] - F * ≤ -^κ7 (B+C + 2L∣wι - w*『).
Y +t I μ
□
B	.4 Deferred proofs of key lemmas
Proof of Lemma 4. We first give a key observation which is useful to prove the followings. Let
{xi }iN=1 denote any fixed deterministic sequence. We sample a multiset St (with size K) by the
procedure where for each sampling time, we sample xk with probability qk for each time. Pay
attention that two samples are not necessarily independent. We only require each sampling distribution
is identically. Let St = {iι,…，iκ} ⊂ [N] (some ik,s may have the same value). Then
KN
ESt	xk = ESt	xik = K ESt xi1 = K	qkxk.
k∈St	k=1	k=1
For Scheme I, qk = Pk and for Scheme II, qk =焉.It is easy to prove this lemma when equipped
with this observation.	口
Proof of Lemma 5. We separately prove the bounded variance for two schemes. Let St+1 =
{iι, ,一，iκ} denote the multiset of chosen indexes.
(1)	For Scheme I, Wt+ι = Kk PK=I v；+i. Taking expectation over St+ι, we have
1K	1N
EStkWt+1 - vt+ιk2 = ESt k2 X ∣∣vt+ι - vt+ι∣∣ = κ XPk ∣∣vk+ι - vt+ι∣∣	(22)
l=1	k=1
where the first equality follows from vitl+1 are independent and unbiased.
To bound eqn. (22), we use the same argument in Lemma 5. Since t + 1 ∈ IE, we know that the
time t0 = t - E + 1 ∈ IE is the communication time, which implies {wtk0 }kN=1 is identical. Then
NN
X Pk ∣∣vk+ι- vt+1∣∣2 = X Pk ∣∣(Vk+1- wto)- (Vt+1- wto )∣∣2
k=1	k=1
N
≤ X Pk ∣∣vk+1- wto∣∣2
k=1
18
Published as a conference paper at ICLR 2020
where the last inequality results from PN=IPk(Vk+1 - Wt0) = Vt+ι - Wt° and Ekx - Ex∣∣2 ≤
Ekxk2 . Similarly, we have
1N	2
EStlIWt+ι — vt+ιk ≤ κ XPkEM+ι- wto∣∣
k=1
1N	2
≤ k XPkEIlVt+ι -wt0∣∣
k=1
Nt
≤ K XPkE X E∣∣η"Fk(wk,ξk)∣∣2
k=1	i=t0
≤ KKE2η2oG2 ≤ KkG2
where in the last inequality we use the fact that ηt is non-increasing and ηt0 ≤ 2ηt.
(2)	For Scheme II, when assuming pi = p2 = •一=PN = N, we again have Wt+ι = -ɪ PK=I v；1].
EStkWt+ι - Vt+ιk2 = ESt
∣2
1 L i —	1 口
K T vt+1 - vt+i	= K2 ESt
i∈St+1	∣
N
XI {i ∈ St} (vi+1 - vt+i)
i=1
1
K2
X P (i ∈ St+1) Hvt+1 - vt+ill + X P (i,j ∈ St+1) hvt+i - vt+1, vj+1 - vt+1i
i∈[N]
N
KN Xllvt+ι- vt+1ll + X
i=1
1
K(N - 1)
i6=j
t6=j
KN(N-I) hvt+i - vt+1，vj+i - vt+1i
N
2
where we use the following equalities: (1) P (i ∈ St+i) = K and P (i,j ∈ St+i) = N(N-I) for all
i = jand ⑵ Pi∈[N] llvi+1 - Vt+1『+ Pi=j hvi+1 - vt+1, vj+i - vt+1 i =0.
Therefore,
N
EkWt+1- vt+ik2 = K(N-Iy
/	N
≤ K(N - 1)
/	N
≤ K(N - 1)
where in the last inequality we use the same argument in (1).
□
C The empirical risk minimization example in Section 4
C.1 Detail of the example
LetP > 1 be a positive integer. To avoid the trivial case, we assume N > 1. Consider the following
quadratic optimization
min F(w)，ɪ [w>Aw - 2b>w] + μ ∣∣w∣2,	(23)
w	2N	2
19
Published as a conference paper at ICLR 2020
where A ∈ R(Np+D×(Np+1) , w, b ∈ RNp+1 and μ > 0. Specifically, let b = eι，(1,0,…，0)>,
and A be a symmetric and tri-diagonal matrix defined by
i=j∈[1,Np+1],
|j - i| = 1 andi,j ∈ [1,Np+ 1] ,	(24)
otherwise,
(A)i,j =	02-,,1
where i, j are row and column indices, respectively. We partition A into a sum of N symmetric
matrices (A = PkN=1 Ak) and b into b = PkN=1 bk . Specifically, we choose b1 = b = e1 and
b2 = •一=bN = 0. To give the formulation of Ak's, We first introduce a series of sparse and
symmetric matrices Bk (1 ≤ k ≤ N):
(1,	i = j ∈ {(k — 1)p + 1,kp +1},
I 2,	i = j and (k — 1)p + 1 < i,j < kp + 1,
j = I —1, |j — i| = 1 and i,j ∈ [(k — 1)p + 1,kp + 1],
I 0,	otherwise.
(25)
Now Ak’s are given by A1 = B1+E1,1, Ak = Bk (2 ≤ k ≤ N—1) and AN = BN +ENp+1,Np+1,
where Ei,j is the matrix where only the (i,j)th entry is one and the rest are zero.
Back to the federated setting, we distribute the k-th partition (Ak, bk) to the k-th device and construct
its corresponding local objective by
Fk(W)，2 [w>AkW — 2b>w + μ∣∣wk2] .	(26)
In the next subsection (Appendix C.3), we show that the quadratic minimization with the global
objective (23) and the local objectives (26) is actually a distributed linear regression. In this example,
training data are not identically but balanced distributed. Moreover, data in each device are sparse in
the sense that non-zero features only occur in one block. The following theorem (Theorem 5) shows
that FedAvg might converge to sub-optimal points even if the learning rate is small enough. We
provide a numerical illustration in Appendix C.2 and a mathematical proof in Appendix C.4.
Theorem 5. In the above problem of the distributed linear regression, assume that each device
computes exact gradients (which are not stochastic). With a constant and small enough learning
rate η and E > 1, FedAvg converges to a sub-optimal solution, whereas FedAvg with E = 1 (i.e.,
gradient descent) converges to the optimum. Specifically, in a quantitative way, we have
kW*- w*k ≥ (E-InIlA1A2w*U
where W* is the solution produced by FedAvg and w* is the optimal solution.
C.2 Numerical illustration on the example
We conduct a few numerical experiments to illustrate the poor performance of FedAvg on the
example introduced in Section 4. Here we set N = 5,p = 4,μ = 2 X 10-4. The annealing
scheme of learning rates is given by n = 5+/5a where a is the best parameter chosen from the set
{10-2, 10-4, 10-6}.
C.3 Some properties of the example
Recall that the symmetric matrix A ∈ R(N p+1)×(N p+1) is defined in eqn. (24). Observe that A is
invertible and for all vector w ∈ RNp+1,
Np+1	Np	Np
w>Aw = 2 X wi2 —
2Xwiwi+1 = w12 +w2Np+1 + X(wi — wi+1)2 ≤ 4kwk22.	(27)
i=1	i=1	i=1
which implies that 0 Y A W 4I.
20
Published as a conference paper at ICLR 2020
SSO=BqoI0
IO0 IO1 IO2 IO3 IO4
Ro≡d (77E)
(a)	Fixed learning rates
SSo=Bqou
∙0°
10° lθɪ IO2 IO3
Round(TYE)
(b)	Decayed learning rates
---E=I
E=5
-E=IQ
——E=50
E=IoO
'-optimal
IO4
Figure 2: The left figure shows that the global objective value that FedAvg converges to is not
optimal unless E = 1. Once we decay the learning rate, FedAvg can converge to the optimal even if
E> 1.
The sparse and symmetric matrices Bk (1 ≤ k ≤ N) defined in eqn. (25) can be rewritten as
(0(k-1)p×(k-1)p
(Bk) =
∖
∖
/ 1	-1	\
-1	2	-1
-1	...	...
...2	-1
∖	-1	1	( (p+1)×(p+1)
0(N -k)p×(N -k)p
From theory of linear algebra, it is easy to follow this proposition.
Proposition 1. By the way of construction, Ak ’s have following properties:
1.	Ak is positive semidefinite with kAk k2 ≤ 4;
2.	rank(A2)= … =rank(AN-ι) = P and rank(A1) = rank( AN) = P + 1;
3.	For each k, there exist a matrix Xk ∈ Rrk ×(N p+1) such that Ak = Xk>Xk where rk =
rank(Ak). Given any k, each row ofXk has non-zero entries only on a block of coordinates,
namely Ik = {(k - 1)p + 1, (k - 1)p + 2,…，kp + 1}. As a result, A = PN=I Ak =
X>X, where X = (X>,…，XN)> ∈ R(Np+2)×(Np+1).
4.
W = A-1b is the globalminimizer ofproblem eqn.(23), given by (w*)i = 1 — Np+2 (1 ≤
i ≤ Np + 1). Let W，(1,…，1, 0,…，0)>
X----} X----}
∈ RNp+1, then A1we = X1>X1we = b1.
z
z
p+1	(N -1)p
From Proposition 1, we can rewrite these local quadratic objectives in form of a ridge linear regression.
Specifically, for k = 1,
Fi(w) = 1 [w>A1w - 2b>w + μ∣∣w∣∣2],
=[[w>X>Xiw — 2w>X>Xiw + μkw∣∣2],
=2 kXi (w - w)k2 + 1 μkwk2 + C,
21
Published as a conference paper at ICLR 2020
where C is some constant irrelevant with w). For 2 ≤ k ≤ N ,
Fk(W) = 1 [w>AkW - 2b>w + μ∣∣wk2],
=11IXk wk2 +1 μkwk2.
Similarly, the global quadratic objective eqn. (23) can be written as F(w)= 点 ∣∣X(w 一 w*)k2 +
2μkwk2.
Data in each device are sparse in the sense that non-zero features only occur in the block Ik of
coordinates. Blocks on neighboring devices only overlap one coordinate, i.e., |Ik ∩Ik+ι∣ = 1. These
observations imply that the training data in this example is not identically distributed.
The k-th device has rk (= p or p + 1) non-zero feature vectors which are vertically concatenated
into the feature matrix Xk . Without loss of generality, we can assume all devices hold p + 1 data
points since we can always add additional zero vectors to expand the local dataset. Therefore
nι =…=nN = P + 1 in this case, which implies that the training data in this example is balanced
distributed.
C.4 Proof of Theorem 5.
Proof of Theorem 5. To prove the theorem, we assume that (i) all devices hold the same amount of
data points, (ii) all devices perform local updates in parallel, (iii) all workers use the same learning
rate η and (iv) all gradients computed by each device make use of its full local dataset (hence this
case is a deterministic optimization problem). We first provide the result when μ = 0.
For convenience, we slightly abuse the notation such that Wt is the global parameter at round t rather
than step t. Let Wt(k) the updated local parameter at k-th worker at round t. Once the first worker that
holds data (A1, b1) runs E step of SGD on F1(W) from Wt, it follows that
E-1
Wt(1) = (I - ηA1)EWt +η X(I - ηA1)lb1.
l=0
For the rest of workers, we have Wt(k) = (I - ηAi)EWt (2 ≤ k ≤ N).
Therefore, from the algorithm,
N	N	E-1
Wt+1 = N x w(+)ι =	⅛ x(i一 ηAi)E) Wt + N X(I- ηAI)lbι.
k=1	i=1	l=0
Define P，∣∣N PN=I(I - ηAi)E∣2. Next we show that when η < 4, we have ρ < 1. From
Proposition 1, ∣Ak ∣2 ≤ 4 and Ak 0 for ∀ k ∈ [N]. This means ∣I - ηAk∣2 ≤ 1 for all k ∈ [N].
Then for any x ∈ RNp+1 and ∣x∣2 = 1, we have x>(I - ηAk)Ex ≤ 1 and it is monotonically
decreasing when E is increasing. Then
x> (Nr X(I 一 ηAi)E) χ ≤ x> (( X(I 一 ηAi))X
=x> (Y A) X < 1
since 0 Y A W 4I means 0 W (I - N A) Y I.
Then ∣Wt+1 一 Wt∣2 ≤ P∣Wt 一 Wt-1∣2 ≤ Pt∣W1 一 W0∣2. By the triangle inequality,
∣Wt+n 一 Wt ∣2 ≤ X ∣Wt+i+1 一 Wt+i l∣2 ≤ X Pt+i∣Wl 一 W0∣2 ≤ Pt kw11 -w0k2
i=0	i=0	一 P
which implies that {wt}t≥ι is a Cauchy sequence and thus has a limit denoted by W*. We have
1 N	-1	E-1
w*= I - N X(I- ηAi)E	N X (I - ηAI)Ib
i=1	l=0
(28)
22
Published as a conference paper at ICLR 2020
Now we can discuss the impact of E.
(1) When E = 1, it follows from eqn. (28) that We* = A-1b = W*, i.e., FedAvg converges to the
global minimizer.
(2) When E = ∞, lim ηPE=o1(I - ηA1)1 b = A+bi = W and lim N PN=I(I - ηAi)E =
E →∞	E →∞ N
diag{(1 - N)Ip； (1 - N)I - NM; (1 - N)Ip} where M ∈ R(N-2)p+1×(N-2)p+1 is some a
symmetric matrix. Actually M is almost a diagonal matrix in the sense that there are totally N -2
completely the same matrices (i.e., p+ɪeeτ ∈ R(p+1)×(p+i)) placed on the diagonal of M but
each overlapping only the lower right corner element with the top left corner element of the next
block. Therefore W* = (1,…，1, V11, ∙
|~{{}、--------------------------------
p
…，V(N-2)p+i,ι, |, ： ,})T
^^^^{^^^^™
(N-2)p+1
From (4) of Proposition 1, We* is different from W*
where V = (I - M)-1.
p
(3) When 2 ≤ E < ∞, note that
~∙ *	*
W - W
I - N X-!-1
N X (I-ηAI)IA - (I- N X(I-ηAi)E)[ w*.
l=0	i=i
(29)
The right hand side of the last equation cannot be zero. Quantificationally speaking, we have the
following lemma. We defer the proof for the next subsection.
Lemma 6. If the step size η is sufficiently small, then in this example, we have
kW*- w*k ≥ (E-6lη∣∣A1A2w*∣∣.
(30)
Since Ai A2 = 0 and W is dense, the lower bound in eqn. (30) is not vacuous.
Now We have proved the result when μ = 0. For the case where μ > 0, we replace Ai with
Ai + μI and assume μ < 4^ instead of the original. The discussion on different choice of E is
unaffected.
□
C.5 Proof of Lemma 6
Proof. We will derive the conclusion mainly from the expression eqn. (29). Let f(η) be a function of
η. We say a matrix T is Θ(f (η)) if and only if there exist some positive constants namely Ci and
C2 such that Cif(η) ≤ kTk ≤ C2f(η) for all η > 0. In the following analysis, we all consider the
regime where η is sufficiently small.
Denote by V = PiN=i Ai2. First we have
I - N XX(I - ηAi)E = I - N XX(I - EηAi + E(E2- 1)η2A2 + Θ(η3))
i=i	i=i
=N A - E(EA- 1) η2V + Θ(η3).	(31)
Then by plugging this equation into the right hand part of eqn. (29), we have
E-i	N
N X(I - ηAI)IA -(I- N X(I-ηAi)E)
l=0	i=i
=N £(I - lηAι + Θ(η2))A - (N A - E(EN- 1) η2V + Θ(η3))
=N (E(Er 1) (V - AiA) + Θ(η))
23
Published as a conference paper at ICLR 2020
Second from eqn. (31), we have that
(I- N X(I - ηAi)E!	=(EA + θW)) T = ENηAT + θ⑴.
Plugging the last two equations into eqn. (29), we have
kw* - w*k = | (ENηAT + Θ(1)) N2 (E(E- 1) (V - AιA) + Θ(η)) w*
=I (E-IηA-1 (V - AιA) + Θ(η)) W*
≥ (E∙J k(V - AιA)w*k
16
= (EJ kA1A2W*k
16
where the last inequality holds because (i) we require η to be sufficiently small and (ii) kA-1xk ≥
4 ∣∣xk for any vector X as a result of 0 < ∣∣Ak ≤ 4. The last equality uses the fact (i) V - Ai A =
Ai Pn=2 Ai and (ii) A∖A% = 0 for any i ≥ 3.	□
D	Experimental Details
D.1 Experimental Setting
Model and loss. We examine our theoretical results on a multinomial logistic regression. Specif-
ically, let f(w; xi) denote the prediction model with the parameter w = (W, b) and the form
f (w; Xi) = softmax(WXi + b). The loss function is given by
1n
F(w) = n ECrOSSEntropy(f(w; x。, y。+ λ∣w∣2.
i=i
This is a convex optimization problem. The regularization parameter is set to λ = 10-4.
Datasets. We evaluate our theoretical results on both real data and synthetic data. For real data, we
choose MNIST dataset (LeCun et al., 1998) because of its wide academic use. To impose statistical
heterogeneity, we distribute the data among N = 100 devices such that each device contains samples
of only two digits. To explore the effect of data unbalance, we further vary the number of samples
among devices. Specifically, for unbalanced cases, the number of samples among devices follows a
power law, while for balanced cases, we force all devices to have the same amount of samples.
Synthetic data allow us to manipulate heterogeneity more precisely. Here we follow the same setup as
described in (Sahu et al., 2018). In particular, we generate synthetic samples (Xk, Yk) according to
the model y = argmax(softmax(Wk x + bk)) with x ∈ R60, Wk ∈ Ri0×60 and bk ∈ Ri0, where
Xk ∈ Rnk ×60 and Yk ∈ Rnk. We model each entry of Wk and bk as N(μk, 1) with μk 〜N(0, a),
and (xk)j 〜N(Vk,六)with Vk 〜N(Bk, 1) and Bk 〜N(0, β). Here a and β allow for more
precise manipulation of data heterogeneity: α controls how much local models differ from each other
and β controls how much the local data at each device differs from that of other devices. There
are N = 100 devices in total. The number of samples nk in each device follows a power law, i.e.,
data are distributed in an unbalanced way. We denote by synthetic(α, β) the synthetic dataset with
parameter α and β .
We summarize the information of federated datasets in Table 2.
Experiments. For all experiments, we initialize all runnings with w0 = 0. In each round, all
selected devices run E steps of SGD in parallel. We decay the learning rate at the end of each round
by the following scheme η =贵,where no is chosen from the set {1,0.1,0.01}. We evaluate the
averaged model after each global synchronization on the corresponding global objective. For fair
comparison, we control all randomness in experiments so that the set of activated devices is the same
across all different algorithms on one configuration.
24
Published as a conference paper at ICLR 2020
Table 2: Statistics of federated datasets
Dataset	Details	# Devices (N)	#Training samples (n)	Samples/device	
				mean	std
MNIST	balanced	100	54200	542	0
	unbalanced	100	62864	628	800
Synthetic Data	α = 0, β = 0	100	42522	425	1372
	, α= 1,β= 1	100	27348	273	421
D.2 Theoretical verification
The impact of E. From our theory, when the total steps T is sufficiently large, the required number
of communication rounds to achieve a certain precision is
Te/E ≈O (EG2 + EG2 + P^ ― Lr + κG2! ,
which is s a function of E that first decreases and then increases. This implies that the optimal local
step E* exists. What's more, the ITJE evaluated at E* is
N
X	p2kσ2+LΓ +κG2
k=1
which implies that FedAvg needs more communication rounds to tackle with severer heterogeneity.
To validate these observations, we test FedAvg with Scheme I on our four datasets as listed in
Table 2. In each round, we activate K = 30 devices and set η0 = 0.1 for all experiments in this part.
For unbalanced MNIST, we use batch size b = 64. The target loss value is 0.29 and the minimum
loss value found is 0.2591. For balanced MNIST, we also use batch size b = 64. The target loss
value is 0.50 and the minimum loss value found is 0.3429. For two synthetic datasets, we choose
b = 24. The target loss value for synthetic(0,0) is 0.95 and the minimum loss value is 0.7999. Those
for synthetic(1,1) are 1.15 and 1.075.
The impact of K . Our theory suggests that a larger K may accelerate convergence since Te/E
contains a term O (EKG2). We fix E = 5 and no = 0.1 for all experiments in this part. We set the
batch size to 64 for two MNIST datasets and 24 for two synthetic datasets. We test Scheme I for
illustration. Our results show that, no matter what value K is, FedAvg converges. From Figure 3, all
the curves in each subfigure overlap a lot. To show more clearly the differences between the curves,
we zoom in the last few rounds in the upper left corner of the figure. It reveals that the curve of a
large enough K is slightly better. This result also shows that there is no need to sample as many
devices as possible in convex federated optimization.
Sampling and averaging schemes. We analyze the influence of sampling and averaging schemes.
As stated in Section 3.3, Scheme I iid samples (with replacement) K indices with weights pk
and simply averages the models, which is proposed by Sahu et al. (2018). Scheme II uniformly
samples (without replacement) K devices and weightedly averages the models with scaling factor
N/K . Transformed Scheme II scales each local objective and uses uniform sampling and simple
averaging. We compare Scheme I, Scheme II and transformed Scheme II, as well as the original
scheme (McMahan et al., 2017) on four datasets. We carefully tuned the learning rate for the original
scheme. In particular, we choose the best step size from the set {0.1, 0.5, 0.9, 1.1}. We did not fine
tune the rest schemes and set η0 = 0.1 by default. The hyperparameters are the same for all schemes:
E = 20, K = 10 and b = 64. The results are shown in Figure 1c and 1d.
Our theory renders Scheme I the guarantee of convergence in common federated setting. As expected,
Scheme I performs well and stably across most experiments. This also coincides with the findings of
Sahu et al. (2018). They noticed that Scheme I performs slightly better than another scheme: server
25
Published as a conference paper at ICLR 2020
—K=IO
—K=30
—K=50
—K=70
—K=WO
(a) Balanced MNIST
O 50 IOO 150	200
Round(TVfi)
5 0 5
* * *
2 2 1
*3 wq
O 50 IOO 150	200
Round (27£)
0.935 -
0.930 -
—K=IO
—K=30
—K=50
——K=7。
(b) Unbalanced MNIST
5 0 5 0 5
2∙0∙73 2
2 2 111
**OI wq
(d) Synthetic(1, 1)
(c) Synthetic(0, 0)
Figure 3: The impact of K on four datasets. To show more clearly the differences between the curves,
we zoom in the last few rounds in the upper left corner of the box.
first uniformly samples devices and then averages local models with weight pk/ Pl∈S pl. However,
our theoretical framework cannot apply to it, since for t ∈ I, ESt Wt = Vt does not hold in general.
Our theory does not guarantee FedAvg with Scheme II could converge when the training data are
unbalanced distributed. Actually, if the number of training samples varies too much among devices,
Scheme II may even diverge. To illustrate this point, we have shown the terrible performance on
mnist unbalanced dataset in Figure 1b. In Figure 4, we show additional results of Scheme II
on the two synthetic datasets, which are the most unbalanced. We choose b = 24, K = 10, E = 10
and η0 = 0.1 for these experiments. However, transformed Scheme II performs well except that it
has a lower convergence rate than Scheme I.
*31BqoK>
Onginal
----Scheme I
Scheme II
----T-Scheme ∏
(a) Synthetic(0,0)
0	50	100	150	200
Round (TIE)
Figure 4: The performance of four schemes on two synthetic datasets. The Scheme I performs stably
and the best. The original performs the second. The curve of the Scheme II fluctuates and has no sign
of convergence. Transformed Scheme II has a lower convergence rate than Scheme I.
(b) Synthetic(1,1)
0	50	100	150	200
Round(TYfi)
26