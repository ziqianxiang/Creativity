Figure 1: Overview of our attack procedure. Our attacker only requires to be online (co-located)while the attacker is monitoring the computations of a victim DL system.
Figure 2: Extracted traces while ToyNet is in use. In the left, we place our network definition inPyTorch. We show the raw trace from Flush+Reload (middle) and the de-noised trace (right).
Figure 3:	MalConv and the extracted trace. While the MalConv (left) is processing a sample, weextract a trace via Flush+Reload and process the trace (right) for the pipeline reconstruction.
Figure 4:	The reconstruction of the ProxylessNAS-CPU architecture. From the Flush+Reloadtrace (left), we find the candidate block (middle) and estimate the computation parameters (right).
Figure 5:	The traces extracted from PyTorch and TensorFlow via Flush+Reload. We illustratethe architecture of a small network (ToyNet) on the left. The sequence of computations observedfrom the our attack are listed in the middle (PyTorch) and the right (TensorFlow).
Figure 6:	The algorithm for searching candidate computational graphs. We describe our algo-rithm to populate the candidate graphs of MalConv (left) and the sample candidates (right).
