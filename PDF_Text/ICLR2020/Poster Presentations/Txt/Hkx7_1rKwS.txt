Published as a conference paper at ICLR 2020
On Solving Minimax Optimization Locally:
A Follow-the-Ridge Approach
Yuanhao Wang** 1, Guodong Zhang*2,3, Jimmy Ba2,3
1IIIS, Tsinghua University, 2University of Toronto, 3Vector Institute
yuanhao-16@mails.tsinghua.edu.cn, {gdzhang,jba}@cs.toronto.edu
Ab stract
Many tasks in modern machine learning can be formulated as finding equilibria
in sequential games. In particular, two-player zero-sum sequential games, also
known as minimax optimization, have received growing interest. It is tempting
to apply gradient descent to solve minimax optimization given its popularity and
success in supervised learning. However, it has been noted that naive application
of gradient descent fails to find some local minimax and can converge to non-
local-minimax points. In this paper, we propose Follow-the-Ridge (FR), a novel
algorithm that provably converges to and only converges to local minimax. We
show theoretically that the algorithm addresses the notorious rotational behaviour of
gradient dynamics, and is compatible with preconditioning and positive momentum.
Empirically, FR solves toy minimax problems and improves the convergence of
GAN training compared to the recent minimax optimization algorithms1.
1 Introduction
We consider differentiable sequential games with two play-
ers: a leader who can commit to an action, and a follower
who responds after observing the leader’s action. Particu-
larly, we focus on the zero-sum case of this problem which
is also known as minimax optimization, i.e.,
min max f(x, y).
x∈Rn y∈Rm
Unlike simultaneous games, many practical machine learn-
ing algorithms, including generative adversarial networks
(GANs) (Goodfellow et al., 2014; Arjovsky et al., 2017),
adversarial training (Madry et al., 2018) and primal-dual
reinforcement learning (Du et al., 2017; Dai et al., 2018),
explicitly specify the order of moves between players and
the order of which player acts first is crucial for the prob-
lem. Therefore, the classical notion of local Nash equi-
librium from simultaneous games may not be a proper
definition of local optima for sequential games since mini-
4-
-2
-8——
-8
80
-80
-160
-240
Minimax
-320
Ridge
Gradient SteP of the leader X
Gradient step of the follower y
Correction term of FR
-6	-4-2	0	2
-400
-480
■	■ -560
4	6	8
Figure 1: For a quadratic function f(x, y) =
-3x2+4xy-y2, our algorithm moves closer
to the ridge every iteration and it moves along
the ridge once it hits the ridge. Without the
FR correction term, gradient dynamics can
drift away from the ridge.
max is in general not equal to maximin. Instead, we consider the notion of local minimax (Jin et al.,
2019) which takes into account the sequential structure of minimax optimization.
8
6
0
2
0
The vanilla algorithm for solving sequential minimax optimization is gradient descent-ascent (GDA),
where both players take a gradient update simultaneously. However, GDA is known to suffer from
two drawbacks. First, it has undesirable convergence properties: it fails to converge to some local
minimax and can converge to fixed points that are not local minimax (Jin et al., 2019; Daskalakis and
Panageas, 2018). Second, GDA exhibits strong rotation around fixed points, which requires using
very small learning rates (Mescheder et al., 2017; Balduzzi et al., 2018) to converge.
In this paper, we propose Follow-the-Ridge (FR), an algorithm for minimax optimization that
addresses both issues. Specifically, We elucidate the cause of undesirable convergence of GDA - the
* These two authors contributed equally.
1Our code is made public at: https://github.com/gd-zhang/Follow-the-Ridge
1
Published as a conference paper at ICLR 2020
leader whose gradient step takes the system away from the ridge. By adding a correction term to the
follower, we explicitly cancel out negative effects of the leader’s update. Intuitively, the combination
of the leader’s update and the correction term is parallel to the ridge in the landscape (see Fig. 1),
hence the name Follow-the-Ridge. Overall, our contributions are the following:
•	We propose a novel algorithm for minimax optimization which has exact local convergence to
local minimax points. Previously, this property was only known to be satisfied when the leader
moves infinitely slower than the follower in gradient descent-ascent (Jin et al., 2019).
•	We show theoretically and empirically that FR addresses the notorious rotational behaviour of
gradient dynamics around fixed points (Balduzzi et al., 2018) and thus allows a much larger
learning rate compared to GDA.
•	We prove that our algorithm is compatible with standard acceleration techniques such as
preconditioning and positive momentum, which can speed up convergence significantly.
•	We further show that our algorithm also applies to general-sum Stackelberg games (Fiez et al.,
2019; Zeuthen, 1935) with similar theoretical guarantees.
•	Finally, we demonstrate empirically our algorithm improves the convergence performance in
both toy minimax problems and GAN training compared to existing methods.
2	Preliminaries
2.1	Minimax Optimization
We consider sequential games with two players where one player is deemed the leader and the other
the follower. We denote leader’s action by x ∈ Rn , and the follower’s action by y ∈ Rm . The leader
aims at minimizing the cost function f(x, y) while the follower aims at maximizing f(x, y). The
only assumption we make on the cost function is the following.
Assumption 1. f is twice differentiable everywhere, and thrice differentiable at critical points.
NQyy f is invertible (i.e., non-singular).
The global solution to the sequential game minχ maxy f (x, y) is an action pair (x*, y*), such that
y* is the global optimal response to x* for the follower, and that x* is the global optimal action
for the leader assuming the follower always play the global optimal response. We call this global
solution the global minimax. However, finding this global minimax is often intractable; therefore, we
follow Jin et al. (2019) and take local minimax as the local surrogate.
Definition 1 (local minimax). (x*, y*) is a local minimax for f(x, y) if (1) y* is a local maximum
of f (x*, ∙); (2) x* is a local minimum of φ(x) := f (x, r(x)), where r(x) is the implicit function
defined by Nyf(x, y) = 0 in a neighborhood of x* with r(x*) = y*.
In the definition above, the implicit function r(∙) : Rn → Rm is a local best response for the follower,
and is a ridge in the landscape of f(x, y). Local minimaxity captures an equilibrium in a two-player
sequential game if both players are only allowed to change their strategies locally. For notational
convenience, we define
Nf(x, y) = [Nxf, Nyf]> , N2f(x, y)
In principle, local minimax can be characterized in terms of the following first-order and second-order
conditions, which were established in Jin et al. (2019).
Proposition 1 (First-order Condition). Any local minimax (x*, y*) satisfies Nf(x*, y*) = 0.
Proposition 2 (Second-order Necessary Condition). Any local minimax (x*, y*) satisfies Hyy 4 0
and Hxx - HxyHy-y1Hyx <0.
Proposition 3 (Second-order Sufficient Condition). Any stationary point (x*, y*) satisfying Hyy Y
0 and Hxx - HxyHy-y1Hyx	0 is a local minimax.
The concept of global/local minimax is different from Nash equilibrium and local Nash, which are
the equilibrium concepts typically studied for simultaneous games (see Nash et al. (1950); Ratliff
et al. (2016) for more details). In particular, we note that the concept of Nash equilibrium or local
Nash does not reflect the order between the min-player and the max-player and may not exist even
Hxx Hxy
Hyx Hyy
2
Published as a conference paper at ICLR 2020
for simple functions (Jin et al., 2019). In general, the set of local minimax is a superset of local
Nash. Under some mild assumptions, local minimax points are guaranteed to exist (Jin et al., 2019).
However, the set of stable fixed points of GDA, roughly speaking the set of points that GDA locally
converges to, is a different superset of local Nash (Jin et al., 2019). The relation between the three
sets of points is illustrated in Fig. 2.
2.2	Stability of discrete dynamical systems
Gradient-based methods can reliably find local stable fixed
points - local minima in single-objective optimization. Here,	盘即 E个 M肾对V
r	OJr	7 Limit Points Nash Minimax
We generalize the concept of stability to games by taking
game dynamics as a discrete dynamical system. An itera-
tion of the form zt+1 = w(zt) can be vieWed as a discrete Figure 2: Relation betWeen local Nash, lo-
dynamical system, Where in our case w : Rn+m → Rn+m. cal minimax and GDA stable fixed points.
if w(z) = z, then z is called a fixed point. We study the stability of fixed points as a proxy to local
convergence of game dynamics.
Definition 2. Let J denote the Jacobian of w at a fixed point z. If it has spectral radius ρ(J) ≤ 1,
then we call z a stable fixed point. If ρ(J) < 1, then we call z a strictly stable fixed point.
it is knoWn that strict stability implies local convergence (e.g., see Galor (2007)). in other Words, if z
is a strictly stable fixed point, there exists a neighborhood U of z such that When initialized in U, the
iteration steps alWays converge to z.
3	Undesirable Behaviours of GDA
in this section, We discuss the undesirable behaviours of GDA in more detail. Recall that the update
rule of GDA is given by
xt+ι - Xt - η Vx f,
yt+ι J yt + ηVyf,
(1)
Where We assume the same learning rate for both the leader and the folloWer for simplicity2 . As
illustrated in Fig. 2, the set of stable fixed points of GDA can include points that are not local
minimax and, perhaps even Worse, some local minimax are not necessarily stable fixed points of
GDA. Here, We first give an example that a stable fixed point of GDA is not a local minimax. consider
minx maxy f(x, y) = 3x2 + y2 + 4xy; the only stationary point of this problem is (0, 0) and the
Jacobian of GDA at this point is
J=I-η
64
-4	-2
it is easy to see that the eigenvalues of J are e1 = e2 = 1 - 2η. Therefore, by Definition 2, (0, 0) is
a strictly stable fixed point of GDA. HoWever, one can shoW that Hyy = 2 > 0 Which doesn’t satisfy
the second-order necessary condition of local minimax.
similarly, one can easily find examples in Which a local minimax is not in the set of stable fixed
points of GDA, e.g., minx∈R maxy∈R f(x, y) = -3x2 - y2 + 4xy (see Fig. 1). in this example, the
tWo Jacobian eigenvalues are both greater than 1 no matter hoW small the learning rate is. in other
Words, GDA fails to converge to (0, 0) for almost all initializations (Daskalakis and Panageas, 2018).
As We Will discuss in the next section, the main culprit of the undesirable behaviours of GDA is
the leader Whose gradient update -ηVxf pushes the Whole system aWay from the ridge or attracts
the system to non-local-minimax points. By contrast, the folloWer’s step ηVy f can pull the system
closer to the ridge (see Fig. 1) or push it aWay from bad fixed points. To guarantee convergence to
local minimax (or avoid bad fixed points), We have to use a very small learning rate for the leader (Jin
et al., 2019; Fiez et al., 2019) so that the ηVyf term dominates. in the next section, We offer an
alternative approach Which explicitly cancels out undesirable effects of -ηVxf, thereby alloWing us
to use larger learning rates for the leader.
2in general, the learning rates of tWo players can be different. since our arguments apply to general setting
as long as the ratio ηx /ηy is a positive constant, so We assume the same learning rate for convenience.
3
Published as a conference paper at ICLR 2020
4	Follow the Ridge
Despite its popularity, GDA has the tendency to drift away from the ridge or the implicit function,
and can, therefore, fail to converge with any constant learning rate. To address these problems, we
propose a novel algorithm for minimax optimization, which we term Follow-the-Ridge (FR). The
algorithm modifies gradient descent-ascent by applying an asymmetric preconditioner. The update
rule is described in Algorithm. 1.
Algorithm 1 Follow-the-Ridge (FR). Differences from gradient descent-ascent are shown in blue.
Require: Learning rate ηx and ηy ; number of iterations T .
1:	for t = 1, ..., T do
2:	xt+1 - Xt - ηχVχf (xt, yt)	. gradient descent
3:	yt+1 - yt + ηy Vy f(xt, yt) + ηχH JHyxVxf (xt, yt)	. modified gradient ascent
The main intuition behind FR is the following. Suppose that y is a local maximum of f (xt, ∙). Let
r(X) be the implicit function defined by Vyf(X, y) = 0 around (Xt, yt), i.e., a ridge in the landscape
of f(X, y). By definition, a local minimax has to lie on a ridge; hence, it is intuitive to follow the
ridge during learning. However, if (Xt, yt) is on the ridge, then Vyf(Xt, yt) = 0, and one step of
gradient descent-ascent will take (Xt, yt) to (Xt - ηxVxf, yt), which is off the ridge. In other words,
gradient descent-ascent tends to drift away from the ridge. The correction term we introduce is
Vxr(X) (-ηxVxf(Xt,yt)) = ηxHy-y1HyxVxf.
It would bring yt to yt + Vxr(X)(Xt+1 - Xt) ≈ r(Xt+1), thereby encouraging both players to
stay along the ridge. When (Xt, yt) is not on a ridge yet, we expect the -ηxVxf term and the
ηxHy-y1HyxVxf term to move parallel to the ridge, while the ηyVyf term brings (Xt, yt) closer to
the ridge (see Fig. 1). Our main theoretical result is the following theorem, which suggests that FR
locally converges and only converges to local minimax.
Theorem 1 (Exact local convergence). With a suitable learning rate, all strictly stable fixed points of
FR are local minimax, and all local minimax points are stable fixed points of FR.
The proof is mainly based on the following observation. The Jacobian of FR dynamics at a fixed
point (χ*, y*) is (C ：= ηy/ηx)
Hxx	Hxy
-cHyx -cHyy ,
where the Hessians are evaluated at (x*, y*). J is similar to
M
I
Hy-y1Hyx
JI
I J -Hy-y1Hyx
I - ηx
Hxx - HxyHy-y1Hyx
Hxy
-cHyy
I
Therefore, the eigenvalues of J are those of I + ηyHyy and those of I - ηx(Hxx - HxyHy-y1Hyx).
As shown in second-order necessary condition 2, (x*, y*) being a local minimax implies Hyy 4 0
and Hxx - HxyHy-y1Hyx < 0; one can then show that the spectral radius of the Jacobian satisfies
P(J) ≤ 1; hence (x*, y*) is a stable fixed point by Definition 2. On the other hand, when P(J) < 1,
by the sufficient condition in Proposition 3, (x*, y*) must be a local minimax.
Remark 1 (All eigenvalues are real). We notice that all eigenvalues of J, the Jacobian of FR, are
real since both Hyy and Hxx - Hxy Hy-y1 Hyx are symmetric matrices. As noted by Mescheder
et al. (2017); Gidel et al. (2019); Balduzzi et al. (2018), the rotational behaviour (instability) of GDA
is caused by eigenvalues with large imaginary part. Therefore, FR addresses the strong rotation
problem around fixed points as all eigenvalues are real.
4.1	Accelerating Convergence with Preconditioning and Momentum
We now discuss several extension ofFR that preserves the theoretical guarantees.
Preconditioning: To speed up the convergence, it is often desirable to apply a preconditioner on the
gradients that compensates for the curvature. For FR, the preconditioned variant is given by
Xt+1	Xt	I	ηxP1Vxf
yt+1 J	卜t] - [-HyjHyx I [-ηyP2Vyf
(2)
4
Published as a conference paper at ICLR 2020
We can show that with any constant positive definite preconditioners P1 and P2, the local convergence
behavior of Algorithm 1 remains exact. We note that preconditioning is crucial for successfully
training GANs (see Fig. 9) and RMSprop/Adam has been exclusively used in GAN training.
Momentum: Another important technique in optimization is momentum, which speeds up conver-
gence significantly both in theory and in practice (Polyak, 1964; Sutskever et al., 2013). We show
that momentum can be incorporated into FR (here, we include momentum outside the correction term
which is equivalent to applying momentum to the gradient directly for simplicity. We give a detailed
discussion in Appendix D.4), which gives the following update rule:
χt+ι] — M - f^ ɪ
yt+1	yt	-Hyy Hyx
]∣^	ηχVχf ] IXt - χt-ι
ɪ [-ηyVyf + Y	[yt-yt-ι
(3)
Because all of the Jacobian eigenvalues are real, we can show that momentum speeds up local
convergence in a similar way it speeds up single objective minimization.
Theorem 2. For local minimax (x*, y*), let α = min {λ0询(-Hyy ),λ0询(Hxx — HxyH-yHyχ)},
β = ρ (V2f (x*, y*)), K := β∕α. ThenFR converges asymptotically to (x*, y*) with a rate Ω(κ-2);
FR with a momentum parameter of Y = 1 - Θ (κ-1) converges asymptotically with a rate Ω(κ-1).3
Experiments of the speedup of momentum are provided in Appendix E.2. This is in contrast to
gradient descent-ascent, whose complex Jacobian eigenvalues prevent the use of positive momentum.
Instead, negative momentum may be more preferable (Gidel et al., 2019), which does not achieve the
same level of acceleration.
4.2	General Stackelberg Games
Algorithm 2 Follow-the-Ridge (FR) for general-sum Stackelberg games.
Require: Learning rate ηx and ηy ; number of iterations T .
1:	for t = 1, ..., T do
2:	Xt+1 - Xt- ηxDxf(xt, yt)	. total derivative Dxf = Vxf -Vxyg(V^g)-1Vyf
3：	yt+ι - yt - ηyVyg(xt, yt) + ηx(Vyg)-1VyxgDxf (xt, yt)
Here, we further extend FR to general sequential games, also known as Stackelberg games. The
leader commits to an action x, while the follower plays y in response. The leader aims to minimize
its cost f(x, y), while the follower aims at minimizing g(x, y). For Stackelberg games, the notion of
equilibrium is captured by Stackelberg equilibrium, which is essentially the solution to the following
optimization problem:
min f(x, y)|y ∈ arg min g(x, y) .
x∈Rn	y∈Rm
It can be seen that minimax optimization is the special case when g = -f.
Similarly, one can define local Stackelberg equilibrium as a generalization of local minimax in
general-sum games (Fiez et al., 2019). Stackelberg game has wide applications in machine learn-
ing. To name a few, both multi-agent reinforcement learning (Littman, 1994) and hyperparameter
optimization (Maclaurin et al., 2015) can be formulated as finding Stackelberg equilibria.
For general-sum games, naive gradient dynamics, i.e., both players taking gradient updates with their
own cost functions, is no longer a reasonable algorithm, as local Stackelberg equilibria in general
may not be stationary points. Instead, the leader should try to use the total derivative of f(x, r(x)),
where r(x) is a local best response for the follower. Thus the counterpart of gradient descent-ascent
in general-sum games is actually gradient dynamics with best-response gradient (Fiez et al., 2019):
xt+ι - xt - η [Vx∕ - Vxyg(Vyyg)TVyf (xt, yt),
yt+ι - yt - ηVyg(xt,yt).
(4)
3By a rate a, we mean that one iteration shortens the distance toward the fixed point by a factor of (1 - a);
hence the larger the better.
5
Published as a conference paper at ICLR 2020
FR can be adapted to general-sum games by adding the same correction term to the follower. The
combined update rule is given in Algorithm 2. Similarly, we show that FR for Stackelberg games
locally converges exactly to local Stackelberg equilibria (see Appendix C.2 for rigorous proof.)
5	Related Work
As a special case of Stackelberg games (Ratliff et al., 2016) in the zero-sum setting, minimax
optimization concerns the problem of solving minx∈X maxy∈Y f(x, y). The problem has received
wide attention due to its extensive applications in modern machine learning, in settings such as
generative adversarial networks (GANs), adversarial training. The vast majority of this line of
research focus on convex-concave setting (Kinderlehrer and Stampacchia, 1980; Nemirovski and
Yudin, 1978; Nemirovski, 2004; Mokhtari et al., 2019b;a). Beyond the convex-concave setting,
Rafique et al. (2018); Lu et al. (2019); Lin et al. (2019); Nouiehed et al. (2019) consider nonconvex-
concave problems, i.e., where f is nonconvex in x but concave in y. In general, there is no hope to
find global optimum efficiently in nonconvex-concave setting.
More recently, nonconvex-nonconcave problem has gained more attention due to its generality. Par-
ticularly, there are several lines of work analyzing the dynamics of gradient descent-ascent (GDA)
in nonconvex-nonconcave setting (such as GAN training). Though simple and intuitive, GDA has
been shown to have undersirable convergence properties (Adolphs et al., 2019; Daskalakis and
Panageas, 2018; Mazumdar et al., 2019; Jin et al., 2019) and exhibit strong rotation around fixed
points (Mescheder et al., 2017; Balduzzi et al., 2018). To overcome this rotation behaviour of
GDA, various modifications have been proposed, including averaging (YazIcI et al., 2019), negative
momentum (Gidel et al., 2019), extragradient (EG) (Korpelevich, 1976; Mertikopoulos et al., 2019),
optimistic mirror descent (OGDA) (Daskalakis et al., 2018), consensus optimization (CO) (Mescheder
et al., 2017) and symplectic gradient (SGA) (Balduzzi et al., 2018; Gemp and Mahadevan, 2018).
However, we note that all these algorithms discard the underlying sequential structure of minimax
optimization and adopt a simultaneous game formulation. In this work, we hold that GAN train-
ing is better viewed as a sequential game rather than a simultaneous game. The former is more
consistent with the divergence minimization interpretation of GANs; there is also some empirical
evidence showing that well-performing GAN generators are closer to a saddle-point instead of a
local minimum (Berard et al., 2019), which suggests that local Nash, the typical solution concept for
simultaneous games, may not be the most appropriate one for GANs.
To the best of our knowledge, the only two methods that can (and only) converge to local minimax
are two time-scale GDA (Jin et al., 2019) and gradient dynamics with best response gradient (Fiez
et al., 2019). In two time-scale GDA, the leader moves infinitely slower than the follower, which may
cause slow convergence due to infinitely small learning rates. The dynamics in Fiez et al. (2019) is
proposed for general-sum games. However, their main result for general-sum games require stronger
assumptions and even in that case, the dynamics can converge to non-local-Stackelberg points in
general-sum games. In contrast, in general-sum games, FR will not converge to non-local-Stackelberg
points. Besides, Adolphs et al. (2019); Mazumdar et al. (2019) attempt to solve the undesirable
convergence issue of GDA by exploiting curvature information, but they focus on simultaneous game
on finding local Nash and it is unclear how to extend their algorithm to sequential games.
For GAN training, there is a rich literature on different strategies to make the GAN-game well-
defined, e.g., by adding instance noise (Salimans et al., 2016), by using different objectives (Nowozin
et al., 2016; Gulrajani et al., 2017; Arjovsky et al., 2017; Mao et al., 2017) or by tweaking the
architectures (Radford et al., 2015; Brock et al., 2019). While these strategies try to make the overall
optimization problem easily, our work deals with a specific optimization problem and convergence
issues arise in theory and in practice; hence our algorithm is orthogonal to these work.
6	Experiments
In this section, we investigate whether the theoretical guarantees of FR carry over to practical
problems. Particularly, our experiments have three main aims: (1) to test if FR converges and only
converges to local minimax, (2) to test the effectiveness of FR in training GANs with saturating loss,
(3) to test whether FR addresses the notorious rotation problem in GAN training.
6
Published as a conference paper at ICLR 2020
(a) GDA diverges	(b) GDA converges to a bad fixed	(C) Limiting cycle
point that is non local minimax
Figure 3: Trajectory of FR and other algorithms in low dimensional toy problems. Left: for g1 , (0, 0) is local
minimax. Middle: for g2, (0, 0) is NOT local minimax. Right: for g3, (0, 0) is a local minimax. The contours
are for the function value. The red triangle marks the initial position.
6.1	Low Dimensional Toy Examples
To verify our claim on exact local convergence, we first compare FR with gradient descent-ascent
(GDA), optimistic mirror descent (OGDA) (Daskalakis et al., 2018), extragradient (EG) (Korpelevich,
1976), symplectic gradient adjustment (SGA) (Balduzzi et al., 2018) and consensus optimization
(CO) (Mescheder et al., 2017) on three simple low dimensional problems:
g1 (x, y) = -3x2 - y2 +4xy
g2 (x, y) = 3x2 + y2 + 4xy
g3(x,y) =(4x2 — (y — 3x + 0.05x3)2 — 0.1y4) e-0.01(x2 +y2).
Here g1 and g2 are two-dimensional quadratic problems, which are arguably the simplest nontrivial
problems. g3 is a sixth-order polynomial scaled by an exponential, which has a relatively complicated
landscape compared to g1 and g2.
It can be seen that when running in g1, where (0, 0) is a local (and in fact global) minimax, only FR,
SGA and CO converge to it; all other method diverges (the trajectories of OGDA and EG almost
overlap). The main reason behind the divergence of GDA is that gradient of leader pushes the system
away from the local minimax when it is a local maximum for the leader. In g2, where (0, 0) is not
a local minimax, all algorithms except for FR converges to this undesired stationary point4. In this
case, the leader is still to blame for the undesirable convergence of GDA (and other variants) since
it gets trapped by the gradient pointing to the origin. In g3, FR can converge to (0, 0), which is a
local minimax, while all other methods apparently enter limit cycles around (0, 0). The experiments
suggest that even on extremely simple instances, existing algorithms can either fail to converge to a
desirable fixed point or converge to bad fixed points, whereas FR always exhibits desirable behaviors.
6.2	Generative Adversarial Networks
One particularly promising application of minimax optimization algorithms is training generative
adversarial networks (GANs). To recover the divergence minimization objective (e.g., Jensen-
Shannon divergence in standard GANs), we have to model the adversarial game as a sequential game.
According to the formulation, the generator is the leader who commits to an action first, while the
discriminator is the follower that helps the generator to learn the target data distribution.
6.2	. 1 Mixture of Gaussians
We first evaluate 4 different algorithms (GDA, EG, CO and FR) on mixture of Gaussian problems with
the original saturating loss. To satisfy the non-singular Hessian assumption, we add L2 regularization
(0.0002) to the discriminator. For both generator and discriminator, we use 2-hidden-layers MLP with
64 hidden units each layer where tanh activations is used. By default, RMSprop (Tieleman and Hinton,
2012) is used in all our experiments while the learning rate is tuned for GDA. As our FR involves
the computation of Hessian inverses which is computational prohibitive, we instead use conjugate
4Note that it is a local minimum for the follower.
7
Published as a conference paper at ICLR 2020
Gradient descent-ascent
Extra gradient
Consensus optimization
Follow the ridge
E」。U*-uω-pe9
----generator
0	10000	20000	30000	40000	50000	0	10000	20000	30000	40000	50000	0	10000	20000	30000	40000	50000	0	10000	20000	30000	40000	50000
Figure 4:	Comparison between FR and other algorithms on GANs with saturating loss. First Row: Generator
distribution. Only consensus optimization (CO) and FR capture all three modes. Second Row: Discriminator
prediction. The discriminator trained by FR converges to a flat line, indicating being fooled by the generator.
Third Row: Gradient norm as a function of iteration. Only in the case of FR, the gradient norm vanishes.
Discriminator Prediction (FR)
-4	-2	0	2	4
-0.54
-0.52
-0.50
-0.48
-0.46
Figure 5:	Comparison between FR and GDA on 2D mixture of Gaussians. Left: GDA; Right: FR.
gradient (Martens, 2010; Nocedal and Wright, 2006) to solve the linear system in the inner loop.
To be specific, instead of solving Hyyz = HyxVxf directly, we solve HyyZ = HyyHyxVxf to
ensure that the problem is well-posed since H2yy is always positive semidefinite. For all experimental
details, we refer readers to Appendix D.2.
As shown in Fig. 4, GDA suffers from the “missing mode”
problem and both discriminator and generator fail to con-
verge as confirmed by the gradient norm plot. EG fails
to resolve the convergence issue of GDA and performs
similarly to GDA. With tuned gradient penalties, consen-
sus optimization (CO) can successfully recover all three
modes and obtain much smaller gradient norm. However,
we notice that the gradient norm of CO decreases slowly
and that both the generator and the discriminator have not
converged after 50,000 iterations. In contrast, the generator
Figure 6: Path-norm and path-angle of FR
along the linear path.
trained with FR successfully learns the true distribution with three modes and the discriminator is
totally fooled by the generator. As expected, both players reach much lower gradient norm with FR,
indicating fast convergence. Moreover, we find that even if initialized with GDA-trained networks
(the top row of Fig. 4), FR can still find all the modes at the end of training.
To check whether FR fixes the strong rotation problem around fixed points, we follow Berard et al.
(2019) to plot the gradient norm and path-angle (see Fig. 6). By interpolating between the initial
parameters z and the final parameters z*, they proposed to monitor the angle between the vector field
V and the linear path from z to z*. Specifically, they looked at the quantity - path-angle, defined as
θ(α)
hz* - z, Vai
kz* - ZkkVak
where Va = V(αz + (1 - α)z*).
They showed that a high “bump” around α = 0 in the path-angle plot typically indicates strong
rotation behaviour. We choose α = [0.6, 1.2] and plot the gradient norm and path-angle along the
linear path for the updates of FR. In particular, we only observe a sign-switch around the fixed point
8
Published as a conference paper at ICLR 2020
z* without an obvious bump, suggesting that FR doesn't exhibit rotational behaviour around the fixed
point. To further check if FR converges to local minimax, we check the second-order condition of
local minimax by computing the eigenvalues of Hxx - HxyHy-y1Hyx and Hyy. As expected, all
eigenvalues of Hxx - HxyHy-y1Hyx are non-negative while all eigenvalues of Hyy are non-positive.
We also run FR on 2-D mixture of Gaussian with
the same architectures (see Fig. 5) and compare
it to vanilla GDA. Though GDA captures all the
modes, we note that both the generator and the
discriminator don’t converge which can be seen
from the gradient norm plot in Fig. 12. In con-
trast, the discriminator trained by FR is totally
fooled by the generator and gradients vanish.
We stress here that the sample quality in GAN
Figure 7: Gradient norms of GDA and FR.
models is not a good metric of checking convergence as we shown in the above example.
6.2.2 Preliminary Results on MNIST
In a more realistic setting, we test our algorithm on image generation task. Particularly, we use the
standard MNIST dataset (LeCun et al., 1998) but only take a subset of the dataset with class 0 and 1 for
quick experimenting. To stabilize the training of GANs, we employ spectral normalization (Miyato
et al., 2018) to enforce Lipschitz continuity on the discriminator. To ensure the invertibility of
the discriminator’s Hessian, we add the same amount of L2 regularization to the discriminator as
in mixture of Gaussian experiments. In terms of network architectures, we use 2-hidden-layers
MLP with 512 hidden units in each layer for both the discriminator and the generator. For the
discriminator, we use Sigmoid activation in the output layer. We use RMSProp as our base optimizer
in the experiments with batch size 2,000. We run both GDA and FR for 100,000 iterations.
E」oU4juω-pl°.J0
0 0/^20
B 0 f ∖ t 0
Q O ∖	∖ f
OOalCe
UJ-JoU4juω-pl°.J0
Figure 8: Comparison between FR and GDA on MNIST dataset. Left: GDA; Right: FR.
In Fig. 8, we show the generated samples of GDA and FR along with the gradient norm plots. Our
main observation is that FR improves convergence as the gradient norms of both discriminator and
generator decrease much faster than GDA; however the convergence is not well reflected by the
quality of generated samples. We notice that gradients don’t vanish to zero at the end of training. We
conjecture that for high-dimensional data distribution like images, the network we used is not flexible
enough to learn the distribution perfectly.
7 Conclusion
In this paper, we studied local convergence of learning dynamics in minimax optimization. To
address undesirable behaviours of gradient descent-ascent, we proposed a novel algorithm that locally
converges to and only converges to local minimax by taking into account the sequential structure of
minimax optimization. Meanwhile, we proved that our algorithm addresses the notorious rotational
behaviour of vanilla gradient-descent-ascent around fixed points. We further showed theoretically
that our algorithm is compatible with standard acceleration techniques, including preconditioning
and positive momentum. Our algorithm can be easily extended to general-sum Stackelberg games
with similar theoretical guarantees. Empirically, we validated the effectiveness of our algorithm in
both low-dimensional toy problems and GAN training.
9
Published as a conference paper at ICLR 2020
Acknowledgement
We thank Kefan Dong, Roger Grosse and Shengyang Sun for helpful comments on this project.
References
Leonard Adolphs, Hadi Daneshmand, Aurelien Lucchi, and Thomas Hofmann. Local saddle point
optimization: A curvature exploitation approach. In The 22nd International Conference on
Artificial Intelligence and Statistics, pages 486-495, 2019.
Martin Arjovsky, Soumith Chintala, and Leon Bottou. Wasserstein gan. arXiv preprint
arXiv:1701.07875, 2017.
David Balduzzi, Sebastien Racaniere, James Martens, Jakob Foerster, Karl Tuyls, and Thore Graepel.
The mechanics of n-player differentiable games. In International Conference on Machine Learning,
pages 363-372, 2018.
Hugo Berard, Gauthier Gidel, Amjad Almahairi, Pascal Vincent, and Simon Lacoste-Julien. A
closer look at the optimization landscapes of generative adversarial networks. arXiv preprint
arXiv:1906.04848, 2019.
Andrew Brock, Jeff Donahue, and Karen Simonyan. Large scale GAN training for high fidelity
natural image synthesis. In International Conference on Learning Representations, 2019. URL
https://openreview.net/forum?id=B1xsqj09Fm.
Bo Dai, Albert Shaw, Lihong Li, Lin Xiao, Niao He, Zhen Liu, Jianshu Chen, and Le Song. Sbeed:
Convergent reinforcement learning with nonlinear function approximation. In International
Conference on Machine Learning, pages 1133-1142, 2018.
Constantinos Daskalakis and Ioannis Panageas. The limit points of (optimistic) gradient descent in
min-max optimization. In Advances in Neural Information Processing Systems, pages 9236-9246,
2018.
Constantinos Daskalakis, Andrew Ilyas, Vasilis Syrgkanis, and Haoyang Zeng. Training gans with
optimism. In International Conference on Learning Representations (ICLR 2018), 2018.
Simon S Du, Jianshu Chen, Lihong Li, Lin Xiao, and Dengyong Zhou. Stochastic variance reduction
methods for policy evaluation. In International Conference on Machine Learning, pages 1049-
1058, 2017.
Tanner Fiez, Benjamin Chasnov, and Lillian J Ratliff. Convergence of learning dynamics in stackel-
berg games. arXiv preprint arXiv:1906.01217, 2019.
Oded Galor. Discrete dynamical systems. Springer Science & Business Media, 2007.
Ian Gemp and Sridhar Mahadevan. Global convergence to the equilibrium of gans using variational
inequalities. arXiv preprint arXiv:1808.01531, 2018.
Gauthier Gidel, Reyhane Askari Hemmat, Mohammad Pezeshki, Remi Le Priol, Gabriel Huang,
Simon Lacoste-Julien, and Ioannis Mitliagkas. Negative momentum for improved game dynamics.
In The 22nd International Conference on Artificial Intelligence and Statistics, pages 1802-1811,
2019.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,
Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Advances in neural informa-
tion processing systems, pages 2672-2680, 2014.
Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron C Courville.
Improved training of wasserstein gans. In Advances in neural information processing systems,
pages 5767-5777, 2017.
Roger A. Horn and Charles R. Johnson. Matrix analysis. Cambridge University Press, 2nd edition,
2013.
10
Published as a conference paper at ICLR 2020
Chi Jin, Praneeth Netrapalli, and Michael I Jordan. What is local optimality in nonconvex-nonconcave
minimax optimization? arXiv preprint arXiv:1902.00618, 2019.
David Kinderlehrer and Guido Stampacchia. An introduction to variational inequalities and their
applications, volume 31. Siam, 1980.
GM Korpelevich. The extragradient method for finding saddle points and other problems. Matecon,
12:747-756,1976.
Yann LeCun, Leon Bottou, Yoshua Bengio, Patrick Haffner, et al. Gradient-based learning applied to
document recognition. Proceedings of the IEEE, 86(11):2278-2324, 1998.
Tianyi Lin, Chi Jin, and Michael I Jordan. On gradient descent ascent for nonconvex-concave
minimax problems. arXiv preprint arXiv:1906.00331, 2019.
Michael L Littman. Markov games as a framework for multi-agent reinforcement learning. In
Machine learning proceedings 1994, pages 157-163. Elsevier, 1994.
Songtao Lu, Ioannis Tsaknakis, Mingyi Hong, and Yongxin Chen. Hybrid block successive approxi-
mation for one-sided non-convex min-max problems: algorithms and applications. arXiv preprint
arXiv:1902.08294, 2019.
Dougal Maclaurin, David Duvenaud, and Ryan Adams. Gradient-based hyperparameter optimization
through reversible learning. In International Conference on Machine Learning, pages 2113-2122,
2015.
Aleksander Madry, Aleksandar Makelov, Ludwig Schmidt, Dimitris Tsipras, and Adrian Vladu. To-
wards deep learning models resistant to adversarial attacks. In International Conference on Learn-
ing Representations, 2018. URL https://openreview.net/forum?id=rJzIBfZAb.
Xudong Mao, Qing Li, Haoran Xie, Raymond YK Lau, Zhen Wang, and Stephen Paul Smolley. Least
squares generative adversarial networks. In Proceedings of the IEEE International Conference on
Computer Vision, pages 2794-2802, 2017.
James Martens. Deep learning via hessian-free optimization. In International Conference on Machine
Learning, pages 735-742, 2010.
Eric V Mazumdar, Michael I Jordan, and S Shankar Sastry. On finding local nash equilibria (and
only local nash equilibria) in zero-sum games. arXiv preprint arXiv:1901.00838, 2019.
Panayotis Mertikopoulos, Bruno Lecouat, Houssam Zenati, Chuan-Sheng Foo, Vijay Chandrasekhar,
and Georgios Piliouras. Optimistic mirror descent in saddle-point problems: Going the extra(-
gradient) mile. In International Conference on Learning Representations, 2019. URL https:
//openreview.net/forum?id=Bkg8jjC9KQ.
Lars Mescheder, Sebastian Nowozin, and Andreas Geiger. The numerics of gans. In Advances in
Neural Information Processing Systems, pages 1825-1835, 2017.
Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normalization for
generative adversarial networks. In International Conference on Learning Representations, 2018.
URL https://openreview.net/forum?id=B1QRgziT-.
Aryan Mokhtari, Asuman Ozdaglar, and Sarath Pattathil. Proximal point approximations achieving
a convergence rate of O(1/k) for smooth convex-concave saddle point problems: Optimistic
gradient and extra-gradient methods. arXiv preprint arXiv:1906.01115, 2019a.
Aryan Mokhtari, Asuman Ozdaglar, and Sarath Pattathil. A unified analysis of extra-gradient and
optimistic gradient methods for saddle point problems: Proximal point approach. arXiv preprint
arXiv:1901.08511, 2019b.
John F Nash et al. Equilibrium points in n-person games. Proceedings of the national academy of
sciences, 36(1):48-49, 1950.
11
Published as a conference paper at ICLR 2020
Arkadi Nemirovski. Prox-method with rate of convergence o (1/t) for variational inequalities with
lipschitz continuous monotone operators and smooth convex-concave saddle point problems. SIAM
Journal on Optimization, 15(1):229-251, 2004.
Arkadi S Nemirovski and David Berkovich Yudin. Cesari convergence of the gradient method of
approximating saddle points of convex-concave functions. In Doklady Akademii Nauk, volume
239, pages 1056-1059. Russian Academy of Sciences, 1978.
Jorge Nocedal and Stephen Wright. Numerical optimization. Springer Science & Business Media,
2006.
Maher Nouiehed, Maziar Sanjabi, Jason D Lee, and Meisam Razaviyayn. Solving a class of non-
convex min-max games using iterative first order methods. arXiv preprint arXiv:1902.08297,
2019.
Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural samplers
using variational divergence minimization. In Advances in neural information processing systems,
pages 271-279, 2016.
Peter J Olver. Nonlinear systems. http://www-users.math.umn.edu/~olver/ln_/nls.
pdf, 2015.
B.T. Polyak. Some methods of speeding up the convergence of iteration methods. Ussr Computa-
tional Mathematics and Mathematical Physics, 4(5):1-17, 1964. URL https://academic.
microsoft.com/paper/1988720110.
Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with deep
convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015.
Hassan Rafique, Mingrui Liu, Qihang Lin, and Tianbao Yang. Non-convex min-max optimization:
Provable algorithms and applications in machine learning. arXiv preprint arXiv:1810.02060, 2018.
Lillian J. Ratliff, Samuel A. Burden, and S. Shankar Sastry. On the characterization of local nash
equilibria in continuous games. IEEE Transactions on Automatic Control, 61(8):2301-2307, 2016.
URL https://academic.microsoft.com/paper/2963994557.
Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. In Advances in neural information processing systems,
pages 2234-2242, 2016.
Ilya Sutskever, James Martens, George E. Dahl, and Geoffrey E. Hinton. On the importance of
initialization and momentum in deep learning. In Proceedings of The 30th International Conference
on Machine Learning, pages 1139-1147, 2013. URL https://academic.microsoft.
com/paper/104184427.
Tijmen Tieleman and Geoffrey Hinton. Lecture 6.5-rmsprop: Divide the gradient by a running
average of its recent magnitude. COURSERA: Neural networks for machine learning, 4(2):26-31,
2012.
Yasin Yazici, Chuan-Sheng Foo, Stefan Winkler, Kim-Hui Yap, Georgios Piliouras, and Vijay Chan-
drasekhar. The unusual effectiveness of averaging in GAN training. In International Conference
on Learning Representations, 2019. URL https://openreview.net/forum?id=SJgw_
sRqFQ.
F. Zeuthen. Heinrich von stackelberg: Marktformen und gleichgewicht. julius springer. 1934
(138 s.). pris r. m. 9,60. Nationalokonomisk Tidsskrift, 3, 1935. URL https://academic.
microsoft.com/paper/2607294808.
12
Published as a conference paper at ICLR 2020
A Proof of Theorem 1
Proof. First of all, note that FR’s update rule can be rewritten as
xt+1
yt+1
xt
yt
- ηx
I	Vxf
-Hy-y1Hyx cI -Vyf ,
(5)
J
I
-Hy-y1Hyx cI
where c := ηy /ηx, and that
is always invertible. Therefore, the fixed points of FR
are exactly those that satisfy Vf (x, y) = 0, i.e., the first-order necessary condition of local minimax.
Now, consider a fixed point (x*, y*). The Jacobian of FR,s update rule at (x*, y*) is given by
J = I - ηx
I	Hxx
-Hy-y1Hyx I -cHyx
Hxy
-cHyy
Observe that J is similar to
I
Hy-y1Hyx
=I - ηx
=I - ηx
Hy-y1Hyx
I
-Hy-y1Hyx
I -Hy-Iy1H
Hxx - HxyHy-y1Hyx
yx
H
Hxx
I -cHyx
xy
-cHyy
Hxy	I
-cHyy	-Hy-y1Hyx I
I
I
J
I
which is block diagonal. Therefore, the eigenvalues of J are exactly those of I + ηy Hyy and those of
I - ηx(Hxx - HxyHy-y1Hyx), which are all real because both matrices are symmetric.
Moreover, suppose that
2
ηx <
max {P(Hxx - HxyH-yHyx), CM-Hyy)}
where ρ(∙) stands for spectral radius. In this case
-1 Y 1 + ηyHyy,	-I Y I- ηx(Hxx - HxyHyy Hyx).
Therefore whether P(J) < 1 depends on whether -Hyy or Hxx - HxyHy-y1Hyx has negative eigen-
values. If (x*, y *) isa local minimax, by the necessary condition, Hyy 4 0, Hxx - HxyH-yHyx <
0. It follows that the eigenvalues of J all fall in (-1, 1]. (x*, y*) is thus a stable fixed point of FR.
On the other hand, when (x* , y* ) is a strictly stable fixed point, P(J) < 1. It follows that both Hyy
and Hxx - Hxy Hy-y1 Hyx must be positive definite. By the sufficient conditions of local minimax,
□
(x*, y*) is a local minimax.
B Proof of Theorem 2
Consider a general discrete dynamical system zt+1 J g(zt). Let z* be a fixed point of g(∙). Let
J(Z) denote the Jacobian of g(∙) at z. Similar results can be found in many texts; see, for instance,
Theorem 2.12 (Olver, 2015).
Proposition 4 (Local convergence rate from Jacobian eigenvalue). If P(J(z*)) = 1 - ∆ < 1, then
there exists a neighborhood U of z* such that for any z0 ∈ U,
Ilzt - z*k2 ≤ C (1 - ʌ) Ilzo - z*k2,
where C is some constant.
Proof. By Lemma 5.6.10 (Horn and Johnson, 2013), since P(J(z*)) = 1 - ∆, there exists a matrix
norm ∣∣ ∙ ∣∣ induced by vector norm ∣∣ ∙ ∣∣ such that ∣∣ J(z*)k < 1 - 3∆. Now consider the Taylor
expansion of g(z) at the fixed point z*:
g(z) = g(z*) +J(z*)(z -z*) +R(z -z*),
13
Published as a conference paper at ICLR 2020
where the remainder term satisfies
lim R(Z - z?
z→z* kz — z*k
0.
Therefore, We can choose 0 < δ such that whenever ∣∣z 一 z*k < δ, ∣∣R(z - z*)k ≤ ∆LIIZ — z*∣∣. In
this case,
kg(z)-g(ζ*)k≤kJ(ζ*)(ζ — z* )k + kR(z —z*)k
≤∣∣J(z*)IIlIZ-z*∣∣ + ? IIZ-z*∣
≤ (1 - -2) kz - z*k
In other words, when Z0 ∈ U = {Z| IZ - Z*I < δ},
By the equivalence of finite dimensional norms, there exists constants c1, c2 > 0 such that
∀Z,	c1 IZI2 ≤ IZI ≤ c2 IZI2.
Therefore
kzt- z*k2 ≤ ci
IZ0 - Z*I2.
□
In other words, the rate of convergence is given by the gap between ρ(J) and 1. We now prove
Theorem 2 using this view.
ProofofTheorem 2. In the following proof We use ∣∣∙∣∣ to denote the standard spectral norm. It is
not hard to see that λmaχ(-Hyy) ≤ ρ(V2f (x*, y*)) = β and IlHxyk ≤ β. Also,
β2
λmaχ(Hχχ - HxyHyjHyx) ≤ IlHxxk + IHxyk2 ∙ ∣Hyy1k ≤ β + βα = (1+ κ)β.
Therefore we choose our learning rate to be ηx = ηy =+.In this case, the eigenvalues of the
Jacobian ofFR without momentum all fall in [0, 1 - +].Using Proposition 4, we can show that
FR locally converges with a rate of Ω(κ-2).
Now, let us consider FR with momentum:
χt+ι] - Jχt] - J I
[yt+ι] — [yt]	ηx [-HyjHyx
Vxf	χt - χt-1
I -Vyf +γ yt - yt-1
(6)
This is a dynamical system on the augmented space of (χt, yt, χt-1, yt-1). Let
J := I - J I	J Hxx	Hxy
JI := 1 ηx [-HyyHyx I [-Hyx -HyyJ
be the Jacobian of the original FR at a fixed point (χ*, y*). Then the Jacobian of Polyak’s momentum
at (χ*, y*, χ*, y*) is
J	γI + J1 -γI
J2 := I 0	.
The spectrum of J2 is given by solutions to
det(λI - J2) = det ((λ2 - γλ + γ)I - YJ1) = 0.
In other words, an eigenvalue r of Ji corresponds to two eigenvalues of J2 given by the roots of
λ2 - (γ + r)λ + γ = 0. For our case, let us choose Y = 1 + 2112 - 乎.Then for any r ∈ [0, 1 - 会],
(r + γ )2 - 4γ ≤
1 - 2K2 + Y) - 4γ = 0.
Therefore the two roots of λ2 - (Y + r)λ +Y = 0 must be imaginary, and their magnitude are exactly
√γ. Since √γ ≤ 1 - 1-γ ≤ 1 - 2√121, we now know that ρ(J2) ≤ 1 - 2√121. Using Proposition 4,
we can see that FR with momentum locally converge with a rate of Ω(κ-i).	□
14
Published as a conference paper at ICLR 2020
C Proofs for Section 4
C.1 Preconditioning
Recall that the preconditioned variant of FR is given by
χt+ι ― Xt -	4
yt+1	yt	-Hyy Hyx
ηχPιVχf '
I	-ηyP2Vyf
(7)
We now prove that preconditioning does not effect the local convergence properties.
Proposition 5. If A is a symmetric real matrix, B is symmetric and positive definite, then the
eigenvalues of AB are all real, and AB and A have the same number of positive, negative and zero
eigenvalues.
Proof. AB is similar to and thus has the same eigenvalues as B 1 AB 1, which is symmetric and has
real eigenvalues. Since B 1 AB 2 is congruent to A, they have the same number of positive, negative
and zero eigenvalues (see Horn and Johnson (2013, Theorem 4.5.8)).	□
Proposition 6. Assume that P1 and P2 are positive definite. The Jacobian of (7) has only real
eigenvalues at fixed points. With a suitable learning rate, all strictly stable fixed points of (7) are
local minimax, and all local minimax are stable fixed points of (7).
Proof. First, observe that both
I
-Hy-y1Hyx I
and
P1
P2
fixed points of (7) are exactly stationary points. Let c :
given by
J = I - ηx
are both always invertible. Hence
ηy /ηx . Note that the Jacobian of (7) is
I	P1	Hxx	Hxy
-Hy-y1Hyx I	P2	-cHyx -cHyy
which is similar to
I
H-1H
Hyy Hyx
=I-	P1
= - ηx
I J -Hy-y1Hyx I
Hxy
-cHyy
Therefore the eigenvalues of J are exactly those of I - ηxP1 Hxx - HxyHy-y1Hyx and I +
ηyP2Hyy. By Proposition 5, the eigenvalues of both matrices are all real. When ythye learning rates
are small enough, i.e., when
2
m max {ρ (PI(Hxx - HxyH-y1 Hyx)) , CP(-P2Hyy) }，
whether ρ(J) ≤ 1 solely depends on whether P1 Hxx - HxyHy-y1Hyx and -P2Hyy have
negative eigenvalues. By Proposition 5, the number of positive, negative and zero eigenvalues of the
two matrices are the same as those of Hxx - HxyHy-y1Hyx and -Hyy respectively. Therefore the
proposition follows from the same argument as in Theorem 1.	□
C.2 General-sum Stackelberg Games
A general-sum Stackelberg game is formulated as follows. There is a leader, whose action is χ ∈ Rn,
and a follower, whose action is y ∈ Rm. The leader’s cost function is given by f(χ, y) while the
follower’s is given by g(χ, y). The generalization of minimax in general-sum Stackelberg games is
Stackelberg equilibrium.
Definition 3 (Stackelberg equilibrium). (x*, y*) is a (global) Stackelberg equilibrium if y* ∈ R(x*),
and ∀χ ∈ X ,
f(x*, y*) ≤ max f (x, y),
y∈R(x)
where R(x) := arg min g(x, ∙) is the best response setfor thefollower.
15
Published as a conference paper at ICLR 2020
Similarly, we have local Stackelberg equilibrium (Fiez et al., 2019) defined as follows.5
Definition 4 (Local Stackelberg equilibrium). (x*, y*) is a local Stackelberg equilibrium if
1.	y* is a local minimum of g(x*, ∙);
2.	Let r(x) be the implicit function defined by Ny g(x, y) = 0 in a neighborhood of x* with
r(x*) = y*. Then x* is a local minimum of φ(x) := f (x, r(x)).
For local Stackelberg equilibrium, we have similar necessary conditions and sufficient conditions.
For simplicity, we use the following notation when it is clear from the context
N2f(x,y)= HHxx HHxy , N2g(x,y)= GGxx
yx yy	yx
Gxy
Gyy
Similar to the zero-sum case, local Stackelberg equilibrium can be characterized using derivatives.
Proposition 7 (Necessary conditions). Any local Stackelberg equilibrium satisfies Nyg(x, y) = 0,
Nxf(x, y) - GxyGy-y1Nyf(x,y) = 0, N2yyg(x, y) < 0 and
Hxx - HxyGyyGyx - Vx (GxyG-INyf) + % (GxyGyyNyf) GyyGyx < 0.
Proposition 8 (Sufficient conditions). If (x, y) satisfy Nyg(x, y) = 0, Nxf(x, y) -
GxyGy-y1Nyf(x,y) = 0, N2yyg(x, y)	0 and
Hxx — Hxy GyyGyx — Vx (GxyGy/Vyf) + Vy (Gxy GyyVy f) GyyGyx A 0.
then (x, y) is a local Stackelberg equilibrium.
The conditions above can be derived from the definition with the observation that
V2φ(x) = V (Vxf(X,r(x))> — Vy f(x,r(X))TVr(X))
=Vxxf + VxyfVr(x) + Vx (Vyf>Vr(x)) + Vy (Vyf>Vr(x)) Vr(x)
=Hxx- HxyGyJGyx- Vx (Gxy GyyVy f) + Vy (GxyGyJVyf) GyyGyx.
Here all derivatives are evaluated at (x, r(x)). We would like to clarify that by Vxh, where h :
Rn+m → R, we mean the partial derivative of h for the first n entries. Similarly for h : Rn+m → Rk,
by Vx h we mean the first n columns of the Jacobian of h, which is k-by-(n + m).
Henceforth we will use Dxf(x, y) to denote Vxf - GxyGy-y1Vyf(x, y). The general-sum version
of Follow-the-Ridge is given by
xt+1 — Xt -	JI
yt+1	yt	-Gyy Gyx
ηxDxf(xt, yt)
I	ηyVyg(xt,yt)
(8)
Just as the zero-sum version of FR converges exactly to local minimax, we can show that the general-
sum version of FR converges exactly to local Stackelberg equilibria. As in the zero-sum setting, we
use stability of fixed points as a proxy of discussing local convergence.
Theorem 3. The Jacobian of (8) has only real eigenvalues at fixed points. With a suitable learning
rate, all strictly stable fixed points of (8) are local Stackelberg equilibria, and all local Stackelberg
equilibria are stable fixed points of (8).
Proof. This theorem only analyzes the Jacobian of (8) at fixed points; thus we will only need to
focus on the fixed points of (8) in the proof.
Let c := ηy /ηx . Note that
I
-Gy-y1Gyx I
is always invertible. Therefore, the fixed points of (8)
are exactly points (x, y) that satisfy Dxf(x, y) = 0 and Vyg(x, y) = 0, i.e. the first-order necessary
condition for local Stackelberg equilibria.
5Our definition is slightly different from that in Fiez et al. (2019)
16
Published as a conference paper at ICLR 2020
In particular, consider a fixed point z* := (x, y). The Jacobian of (8) at (x, y) is given by
J=I-ηx
I	Hxx
-Gy-y1Gyx I
-Vx(GxyGy-y1Vyf) Hxy-Vy(GxyGy-y1Vyf)
cGyx	cGyy
Observe that
I
G-1 G
yy yx
I
G-1G
- yy yx
=I - ηx
=I - ηx
Hxx
-Vχ(GχyGyyVyf )
cGyx
Hxx - HxyGy-y1Gyx
Hxy - Vy(GxyGy-y1Vyf)	I
cGyy	-Gy-y1Gyx I
-Vx()+Vy()Gy-y1Gyx Hxy - Vy()
0	cGyy
I
J
I
where is a shorthand for GxyGy-y1Vyf. Let
Hexx :=Hxx-HxyGy-y1Gyx-Vx()+Vy()Gy-y1Gyx.
We can now see that the eigenvalues of J are exactly those of I - ηxHxx and those of I - ηy Gyy . It
follows that all eigenvalues of J are real.6 Suppose that
2
ηx <
max{ρ(Hxx), cρ (Gyy)}
In that case, if (x, y) is a local Stackelberg equilibrium, then from the second-order necessary
condition, both Hxx and Gyy are positive semidefinite. As a result, all eigenvalues of J would be in
(-1, 1]. By Definition 2, this suggests that (x, y) is a stable fixed point.
On the other hand, if (x, y) is a strictly stable fixed point, then all eigenvalues of J fall in (-1, 1),
which suggests that Hxx 0 and Gyy 0. By the sufficient condition, (x, y) is a local Stackelberg
equilibrium.	□
Remark 2. From the proof above, it is can be seen that “strict local Stackelberg equilibria”, i.e.
points that satisfy the sufficient conditions, must be strictly stable fixed points of (8). Then by
Proposition 4, FR locally converges to such points. Thus, the set of points that FR locally converges
to is the same as local Stackelberg equilibria, up to degenerate cases where the Jacobian spectral
radius is exactly 1.
D Experimental Details
D.1 Low Dimensional Problems
The algorithms we compared with are
xt+1 yt+1	J	xt yt	-η	Vxf(xt, yt) -Vyf(xt, yt)	,			(GDA)	
xt+1 yt+1	J	xt yt	- 2η	Vxf(xt, yt) -Vyf(xt,yt)	+η	Vxf(xt-1 -Vyf(xt-	, yt-1) 1,yt-1)	,	(OGDA)	
xt+1 yt+1	J	xt yt	-η	Vxf(xt - ηVxf (xt, yt), yt + ηVyf(xt, yt)) -Vy f (xt - ηVxf(xt, yt), yt + ηVyf (xt, yt))					,	(EG)
xt+1 yt+1	J	xt yt	-η	I	-λHxy Vxf(xt,yt) λHyx	I	-Vyf(xt,yt)			,	(SGA)	
xt+1 yt+1	J	xt yt	-η	Vxf(xt, yt) -Vyf(xt, yt)	- γηV kVf(xt, yt)k2.			(CO)	
We used a learning rate of η = 0.05 for all algorithms, λ = 1.0 for SGA and γ = 0.1 for CO. We did
not find SGA with alignment (Balduzzi et al., 2018) to be qualitatively different from SGA in our
experiments.
6He xx is always symmetric.
17
Published as a conference paper at ICLR 2020
D.2 Mixture of Gaussian Experiment
Dataset. The mixture of Gaussian dataset is composed of 5,000 points sampled independently from
the following distributionPD(x) = 3N(-4,0.01) + 1N(0,0.01) + 1N(4,0.01) where N(μ, σ2)
is the probability density function of a ID-GaUssian distribution with mean μ and variance σ2. The
latent variables z ∈ R16 are sampled from a standard Normal distribution N(0, I). Because we want
to use full-batch methods, we sample 5,000 points that we re-use for each iteration during training.
For the two-dimensional case, we generate the data from 9 Gaussians with μχ ∈ {-3,0, 3} and
μy ∈ {-3,0,3}. The covariance matrix is 0.01I.
Neural Networks Architecture. Both the generator and discriminator are 2 hidden layer neural
networks with 64 hidden units and Tanh activations.
Other Hyperparameters. For FR, we use conjugate gradient (CG) in the inner-loop to approximately
invert the Hessian. In practice, we use 10 CG iterations (5 iterations also works well). Since the loss
surface is highly non-convex (let alone quadratic), we add damping term to stabilize the training.
Specifically, we follow Levenberg-Marquardt style heuristic adopted in Martens (2010). For both
generator and discriminator, we use learning rate 0.0002. For consensus optimization (CO), we tune
the gradient penalty coefficient using grid search over {0.01, 0.03, 0.1, 0.3, 1.0, 3.0, 10.0}.
D.3 MNIST Experiment
Dataset. The dataset we used in our experiment only includes class 0 and 1. For each class, we take
4,800 training examples. Overall, we have 9,800 examples. The latent variables z ∈ R64 are sampled
from a standard Normal distribution N(0, I).
Neural Networks Architecture. Both the generator and discriminator are 2 hidden layer neural
networks with 512 hidden units and Tanh activations. For each fully-connected layer, we use spectral
normalization to stabilize training.
Other Hyperparameters. For FR, we use conjugate gradient (CG) in the inner-loop to approximately
invert the Hessian. In practice, we use 5 CG iterations for computational consideration. We also
use the same damping scheme as MOG experiment. For both generator and discriminator, we use
learning rate 0.0001. We use batch size 2,000 in our experiments.
D.4 Computing Correction Term on MOG and MNIST Experiments
The main innovation of this work is the introduction of the correction term which encourages both
players (leader and follower) to stay close to the ridge. In the main paragraph, we focused on local
convergence of our algorithm and essentially the Hessian matrix is constant. However, we know
that the curvature (Hessian) of the loss surface might change rapidly in practice especially when
both players are parameterized by deep neural networks, making the computation of Hessian inverse
highly non-trivial. Here, we summarize detailed steps in computing ηχHyj1HyχVχf:
1.	Computing ηxHyxVxf by finite difference b := Vyf(x, y) - Vyf(x - ηxVxf, y);
2.	Assigning X J X - ηXVχf such that the Hessian H below are evaluated at the updated x;
3.	Solving linear system H2yy + λI ∆y = Hyyb using conjugate gradient to get an approx-
imation of ∆y = (Hyy + λl)-1 Hyyb ≈ ηχHyjHyχVχf;
4.	Adapting the damping coefficient λ by computing reduction ratio
=kbk2 - kVyf(X,y) -Vyf(X - ηχvχf,y + ∆y)k2
P=	kbk2-kHyy∆y - bk2	,
which measures whether the loss surface is locally quadratic or not. We note that ρ should
be exactly 1 in the quadratic case if λ = 0. We then adjust the damping with Levenberg-
Marquardt style heuristic (Martens, 2010) as follows:
λ J-
(1.1λ
0.9λ
2.0λ
λ
if0 < ρ≤ 0.5
ifρ> 0.95
ifρ≤0
otherwise
18
Published as a conference paper at ICLR 2020
5.	Setting ∆y - 0 if P ≤ 0 (essentially We don't believe the approximation if P is negative).
When momentum or preconditioning is applied, we modify Vχf above with the momentum or Pre-
conditioned version. To be specific, We apply momentum and preconditioning before the computation
of the correction term, Here, we give an example of FR with momentum:
xt+1
yt+1
mx,t+1
my,t+1
xt	I
yt - -Hy-y1Hyx
γmx,t + ηxVxf
γmy,t - ηyVyf
ηxVxf + γmx,t
I	-ηyVyf + γmy,t
(9)
J
J
which is equivalent to Eqn.(3) in the quadratic case since it is a linear dynamical system. Nevertheless,
we argue that it is more effective to use Eqn.(9) when the loss surface is highly non-quadratic.
E Additional Results
E
The Role of Preconditioning
Gradient descent-ascent	FR with preconditioning
FR (50000 iterations)
FR (500000 iterations)
Ooooo
a-suəo -lo-eəuəo
4	-6	-4	-2
discriminator
generator
∙lc-lltu-E-ts-c
E」。U*-uω-pe9
0	10000	20000	30000	40000	50000	0	10000	20000	30000	40000	50000	0	10000	20000	30000	40000	50000	0	100000 200000 300000 400000 500000
Figure 9: Ablation study on the effect of preconditioning. Vanilla FR also converges at the end of training
though it takes much longer. The KDE plots use Gaussian kernel with bandwidth 0.1.
Following the same setting as Fig. 4, we investigate the effect of preconditioning for our algorithm.
As we shown in section 4.1, FR is compatible with preconditioning with same theoretical convergence
guarantee. In Fig. 4, we use diagonal preconditioning for accelerating the training. Here, we report
the results of FR without preconditioning in Fig. 9. For fair comparison, we also tune the learning
rate for vanilla FR and the optimal learning rate is 0.05. Our first observation is that vanilla FR does
converge with 500,000 iterations which is consistent with our theoretical results. Particularly, the
discriminator is being fooled at the end of training and the gradient vanishes. Our second observation
is that it takes much longer to converge, which can be seen from the comparison between the second
column (preconditioned version) and the third column. With the same time budget (50,000 iterations),
preconditioned FR already converges as seen from the gradient norm curves while the vanilla FR is
far from converged.
E.2 The Role of Momentum
In this subsection, we discuss the effect of momentum in our algorithm. We first consider the
following quadratic problem:
f(x, y) = -0.45x21 - 0.5x22 - 0.5y12 - 0.05y22 + x1y2 + x2y2.
In this problem, (0, 0) is a local (and global) minimax. We run FR with learning rate η = 0.2 and
momentum values γ ∈ {0.0, 0.5, 0.8}, and observe how fast the iterates approach the origin.
We also compare FR with gradient descent-ascent in this problem. Note that when learning rate
ratio (ratio of the follower’s learning rate to the leader’s learning rate) is 1, GDA diverges. We use
19
Published as a conference paper at ICLR 2020
a grid search for the follower’s learning rate ηy ∈ {0.1, 0.2, 0.4, 0.8, 1.6} and learning rate ratio
c ∈ {5, 10, 20, 40, 80}. We experiment with momentum γ ∈ {0.0, ±0.1, ±0.2, ±0.4, ±0.8}. The
best result for GDA without momentum is achieved by ηy = 0.8, c = 20; the best result for GDA
with momentum is achieved by ηy = 1.6, c = 40 and γ = 0.2. The results are plotted in Fig. 10.
Figure 10: Left: distance to the origin for GDA, GDA with 0.2 momentum, FR, FR with 0.5 momentum and
FR with 0.8 momentum; Right: trajectory of each algorithm; we plot the values of x1 and y1 and the contour
for the function value on the plane (x1 , 0, y1 , 0).
We can see that momentum speeds up FR dramatically. In contrast, GDA with momentum does
not improve much over GDA without momentum. Moreover, under large momentum values (i.e.
γ = 0.8), GDA diverges even when using very large learning rate ratios.
00
E」。Urju--pa°
10000	20000	30000	40000	50000
0	10000	20000	30000	40000	50000
0	10000	20000	30000	40000	50000	0	10000	20000	30000	40000	50000
Figure 11: Empirical investigation on the effect of positive momentum. With larger momentum coefficient (e.g.,
γ = 0.9), the convergence ofFR gets further improved. The KDE plots use Gaussian kernel with bandwidth 0.1.
We further test the acceleration effect of momentum on the mixture of Gaussian benchmark. Keeping
all other hyperparameters the same as those used in Fig. 4, we conduct experiments with momentum
coefficient γ ∈ {0.8, 0.9}. As shown in the gradient norm plots of Fig. 11, FR with large positive
momentum coefficient converges faster than the one with zero momentum (the second column).
Particularly, FR is able to converge within 10,000 iterations with γ = 0.9, yielding roughly a factor
of 3 improvement in terms of convergence.
E.3 Spectrum for GAN Model
As we claimed in Section 6.2.1, all eigen-
values of Hxx - HxyHy-y1Hyx are non-
negative while all eigenvalues of Hyy are
non-positive. Here we plot all eigenvalues
of them in log scale. To be noted, we plot
the eigenvalues for -Hyy for convenience.
As expected, the Hessian matrix for the
Figure 12: Top-20 eigenvalues.
discriminator is negative semi-definite while the Schur compliment is positive semi-definite.
20