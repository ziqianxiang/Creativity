Published as a conference paper at ICLR 2020
Efficient Riemannian Optimization on the
Stiefel Manifold via the Cayley Transform
Jun Li, Li Fuxin, Sinisa Todorovic
School of EECS
Oregon State University
Corvallis, OR 97331
{liju2,lif,sinisa}@oregonstate.edu
Ab stract
Strictly enforcing orthonormality constraints on parameter matrices has been
shown advantageous in deep learning. This amounts to Riemannian optimiza-
tion on the Stiefel manifold, which, however, is computationally expensive. To
address this challenge, we present two main contributions: (1) A new efficient re-
traction map based on an iterative Cayley transform for optimization updates, and
(2) An implicit vector transport mechanism based on the combination of a pro-
jection of the momentum and the Cayley transform on the Stiefel manifold. We
specify two new optimization algorithms: Cayley SGD with momentum, and Cay-
ley ADAM on the Stiefel manifold. Convergence of Cayley SGD is theoretically
analyzed. Our experiments for CNN training demonstrate that both algorithms:
(a) Use less running time per iteration relative to existing approaches that enforce
orthonormality of CNN parameters; and (b) Achieve faster convergence rates than
the baseline SGD and ADAM algorithms without compromising the performance
of the CNN. Cayley SGD and Cayley ADAM are also shown to reduce the training
time for optimizing the unitary transition matrices in RNNs.
1	Introduction
Orthonormality has recently gained much interest, as there are significant advantages of enforcing
orthonormality on parameter matrices of deep neural networks. For CNNs, Bansal et al. (2018)
show that orthonormality constraints improve accuracy and gives a faster empirical convergence
rate, Huang et al. (2018a) show that orthonormality stabilizes the distribution of neural activations
in training, and Cogswell et al. (2015) show that orthonormality reduces overfitting and improves
generalization. For RNNs, Arjovsky et al. (2016); Zhou et al. (2006) show that the orthogonal
hidden-to-hidden matrix alleviates the vanishing and exploding-gradient problems.
Riemannian optimization on the Stiefel manifold, which represents the set of all orthonormal matri-
ces of the same size, is an elegant framework for optimization under orthonormality constraints. But
its high computational cost is limiting its applications, including in deep learning. Recent efficient
approaches incorporate orthogonality in deep learning only for square parameter matrices (Arjovsky
et al., 2016; Dorobantu et al., 2016), or indirectly through regularization (Bansal et al., 2018), which
however does not guarantee the exact orthonormality of parameter matrices.
To address the aforementioned limitations, our first main contribution is an efficient estimation of
the retraction mapping based on the Cayley transform for updating large non-square matrices of
parameters on the Stiefel manifold. We specify an efficient iterative algorithm for estimating the
Cayley transform that consists of only a few matrix multiplications, while the closed-form Cayley
transform requires costly matrix inverse operations (Vorontsov et al., 2017; Wisdom et al., 2016).
The efficiency of the retraction mapping is both theoretically proved and empirically verified in the
paper.
Our second main contribution is aimed at improving convergence rates of training by taking into
account the momentum in our optimization on the Stiefel manifold. We derive a new approach
to move the tangent vector between tangent spaces of the manifold, instead of using the standard
parallel transport. Specifically, we regard the Stiefel manifold as a submanifold of a Euclidean
1
Published as a conference paper at ICLR 2020
space. This allows for representing the vector transport (Absil et al., 2009) as a projection onto the
tangent space. As we show, since the Cayley transform implicitly projects gradients onto the tangent
space, the momentum updates result in an implicit vector transport. Thus, we first compute a linear
combination of the momentum and the gradient in the Euclidean space, and then update the network
parameters using the Cayley transform, without explicitly performing the vector transport.
We apply the above two contributions to generalize the standard SGD with momentum and ADAM
(Kingma & Ba, 2014) to the Stiefel manifold, resulting in our two new optimization algorithms
called Cayley SGD with momentum and Cayley ADAM. A theoretical analysis of the convergence
of Cayley SGD is presented. Similar analysis for Cayley ADAM is omitted, since it is very similar
to the analysis presented in (Becigneul & Ganea, 2019).
Cayley SGD and Cayley ADAM are empirically evaluated on image classification using VGG and
Wide ResNet on the CIFAR-10 and CIFAR-100 datasets (Krizhevsky & Hinton, 2009). The ex-
periments show that Cayley SGD and Cayley ADAM achieve better classification performance and
faster convergence rate than the baseline SGD with momentum and ADAM. While the baselines take
less time per epoch since they do not enforce the orthonormality constraint, they take more epochs
until convergence than Cayley SGD and Cayley ADAM. In comparison with existing optimization
methods that also account for orthonormality - e.g., Polar decomposition, QR decomposition, or
closed-form Cayley transform - our Cayley SGD and Cayley ADAM run much faster and yield
equally good or better performance in image classification.
Finally, we apply the aforementioned two contributions to training of the unitary RNNs. Wisdom
et al. (2016) proposes the full capacity unitary RNN that updates the hidden-to-hidden transition
matrix with the closed-form Cayley transform. In contrast, for our RNN training, we use the more
efficient Cayley SGD with momentum and Cayley ADAM. The results show that our RNN training
takes less running time per iteration without compromising performance.
2	Related Work
There is a host of literature on using orthonormality constraints in neural-network training. This
section reviews closely related work, which can be broadly divided in two groups: orthonormality
regularization and Riemannian optimization.
Regularization approaches can be divided as hard, which strictly enforce orthonormality, and soft.
Hard regularizations are computationally expensive. For example, Huang et al. (2018b) extend Batch
Normalization (Ioffe & Szegedy, 2015) with ZCA, and hence require costly eigenvalue decomposi-
tion. Huang et al. (2018a) derive a closed-form solution that also requires eigenvalue decomposition.
Bansal et al. (2018); Cisse et al. (2017); Xiong et al. (2016) introduce mutual coherence regulariza-
tion and spectral restricted isometry regularization; however, these regularizations are soft in that
they can not guarantee orthonormality.
Riemannian optimization guarantees that the solution respects orthonormality constraints. For ex-
ample, Cho & Lee (2017) replace Batch Normalization layers in a CNN with Riemannian optimiza-
tion on the Grassmann manifold G(n, 1), where the parameters are normalized but not orthonor-
malized. Also, Vorontsov et al. (2017); Wisdom et al. (2016); Lezcano-Casado & Martlnez-Rubio
(2019); Helfrich et al. (2017) perform Riemannian optimization on the group of unitary matrices
to stablize RNNs training, but their technique cannot be applied to non-square parameter matrices.
Becigneul & Ganea (2019) introduce a more general Riemannian optimization, but do not show how
to efficiently perform this optimization on the Stiefel manifold.
The key challenge of Riemannian optimization is that exponential mapping — the standard step for
estimating the next update point — is computationally expensive on the Stiefel manifold. Some
methods use an efficient pseudo-geodesic retraction instead of the exponential mapping. For exam-
ple, Absil & Malick (2012); Gawlik & Leok (2018); Manton (2002) use a projection-based method
to map the gradient back to the Stiefel manifold that rely on computational expensive SVD. Other
approaches are based on the closed-form Cayley transform (Fiori et al., 2012; Jiang & Dai, 2015;
Nishimori & Akaho, 2005; Zhu, 2017), but require the costly matrix inversion. Also, Wen & Yin
(2013) reduce the cost of the Cayley transform by making the restrictive assumption that the matrix
size n × p is such that 2p n. Unfortunately, this algorithm is not efficient when 2p ≥ n.
2
Published as a conference paper at ICLR 2020
3	Preliminary
This section briefly reviews some well-known properties of the Riemannian and Stiefel manifolds.
The interested reader is referred to Boothby (1986); Edelman et al. (1998) and references therein.
3.1	Riemannian Manifold
Definition 1. Riemannian Manifold: A Riemannian manifold (M, ρ) is a smooth manifold M
equipped with a Riemannian metric ρ defined as the inner product on the tangent space TxM for
each point X, Pχ(∙, ∙) : TxM X TxM → R.
Definition 2. Geodesic, Exponential map and Retraction map: A geodesic is a locally shortest
curve on a manifold. An exponential map, Expx(∙), maps a tangent vector, V ∈ Tx, to a manifold,
M. Expx(tv) represents a geodesic γ(t) : t ∈ [0,1] on a manifold, s.t. γ(0) = χ,Y(0) = V. A
retraction map is defined as a smooth mapping Rx : TxM → M on a manifold iff Rx (0) = x
and DRx (0) = idTxM, where DRx denotes the derivative of Rx, idTx M denotes an identity map
defined on TxM. It is easy to show that any exponential map is a retraction map. As computing an
exponential map is usually expensive, a retraction map is often used as an efficient alternative.
Definition 3. Parallel transport and vector transport: Parallel transport is a method to translate
a vector along a geodesic on a manifold while preserving norm. A vector transport τ is a smooth
map defined on a retraction R ofa manifold M, τ : TxM × TxM → TR(ηx) , (ηx, ξx) 7→ τηx (ξx).
τ satisfies the following properties: (1) Underlying retraction: τηx (ξx) ∈ TR(ηx); (2) Consistency:
τ0x ξx = ξx,∀ξx ∈ TxM; (3) Linearity: τηx (aξx + bζx) = aτηx(ξx) + bτηx (ζx). Usually, a vector
transport is a computationally efficient alternative to a parallel transport.
3.2	Stiefel Manifold
The Stiefel manifold St(n, p), n ≥ p, is a Riemannian manifold that is composed of all n × p
orthonormal matrices {X ∈ Rn×p : XTX = I}. In the rest of the paper, we will use notation M =
St(n, p) to denote the Stiefel manifold. We regard M as an embeded submanifold of a Euclidean
space. Hence, the Riemannian metric P is the Euclidean metric as:PX (Z1,Z2) = tr(Z>Z2), where
Z1 , Z2 are tangent vectors in TXM. The tangent space of M at X is defined as
TXM = {Z : Z>X + X>Z = 0}	(1)
The projection of a matrix Z ∈ Rn×p to TXM can be computed as
πTX (Z) = WX
where: W = W — W>, W = ZX> — ∣X(X>ZX>).	(2)
Given a derivative of the objective function Vf (X) at X in the Euclidean space, We can com-
pute the Riemannian gradient VMf (X) on the Stiefel manifold as a projection onto TXM using
πTX (Vf(X)) given by Eq.(2). It follows that optimization of f on the Riemannian manifold can
be computed as follows. First, compute VMf(Xt) in TXM. Second, transport the momentum Mt
to the current tangent space TXM and combine it linearly with the current Riemannian gradient
VMf(Xt) to update the momentum Mt+1. Finally, third, update the new parameter Xt+1 along a
curve on the manifold with the initial direction as Mt+1.
While the exponential map and parallel transport can be used to update parameters and momen-
tums in optimization on the Riemannian manifold, they are computationally infeasible on the Stiefel
manifold. In the following section, we specify our computationally efficient alternatives.
3.2.1	Parameter Updates by Iterative Cayley Transform
The Cayley transform computes a parametric curve on the Stiefel manifold using a skew-symmetric
matrix (Nishimori & Akaho, 2005). The closed-form of the Cayley transform is given by:
Y(α) = (I - 2W)-1 (I + 2 W)X,	(3)
3
Published as a conference paper at ICLR 2020
where W is a skew-symmetric matrix, i.e. W> = -W, X is on the Stiefel manifold, and α ≥ 0 is
a parameter that represents the length on the curve. It is straightforward to verify that
Y (0) = X and Y 0 (0) = WX.	(4)
From Definition 2 and the definition of the tangent space of the Stiefel manifold given by Eq.(1), the
Cayley transform is a valid retraction map on the Stiefel manifold. By choosing W = W - W>,
where W = Vf (X)X> - 2X(X>Vf (X)X>) as in Eq.(2), We see that the Cayley transform im-
plicitly projects gradient on the tangent space as its initial direction. Therefore, the Cayley transform
can represent an update for the parameter matrices on the Stiefel manifold.
However, the closed-form Cayley transform in Eq.(3) involves computing the expensive matrix in-
version, which cannot be efficiently performed in large deep neural networks.
Our first contribution is an iterative estimation of the Cayley transform that efficiently uses only
matrix multiplications, and thus is more efficient than the closed form in Eq.(3). We represent the
Cayley transform with the following fixed-point iteration:
Y(α)= X + α W (X + Y(α)),	(5)
which can be proved by moving Y(α) on the right-hand side to the left-hand side in Eq.(3). The ex-
pression in Eq.(5) is an efficient approximation of Eq.(3). In Sec. 5, we will analyze its convergence
rate to the closed-form Eq.(3).
3.2.2 Momentum Updates by the Implicit Vector Transport
Our second contribution is an efficient way to perform momentum updates on the Stiefel manifold.
We specify an implicit vector transport by combining the Cayley transform and momentum updates
in an elegant way without explicitly computing the vector transport. As the Stiefel manifold can
be viewed as a submanifold of the Euclidean space R, we have a natural inclusion of the tangent
space TXM ⊂ R. Consequently, the vector transport on the Stiefel manifold is the projection on
the tangent space. Formally, for two tangent vectors ξX, ηX ∈ TXM, the vector transport of ξX
along a retraction map r(ηX), denoted as τηX (ξX), can be computed as:
τηX (ξX) = πTr(ηX) (ξX).	(6)
We specify the retraction map r(∙) as the Cayley transform Y in Eq.(3). At optimization step k, in
Eq.(6), we choose ξX = ηX = Mk, where Mk is the momentum in step k - 1. Then, we compute
the vector transport of Mk as τMk (Mk) = πTX (Mk). As the projection onto a tangent space is a
linear map, then ατMk (Mk) + βVMf(Xk) = απTXk (Mk) + βπTXk (Vf (Xk)) = πTXk (αMk +
βVf(Xk)). Thus we first compute a linear combination of the Euclidean gradient Vf(X) and the
momentum Mk , as in the Euclidean space, and then use the iterative Cayley transform to update the
parameters, without explicitly estimating the vector transport, since the Cayley transform implicitly
project a vector onto the tangent space.
4	Algorithms
This section specifies our Cayley SGD and Cayley ADAM algorithms. Both represent our efficient
Riemannian optimization on the Stiefel manifold that consists of two main steps. As the Cayley
transform implicitly projects gradient and momentum vectors onto the tangent space, we first lin-
early combine the momentum of the previous iteration with the stochastic gradient of the objective
function f at the current point X, denoted as G(X). Then, we use the iterative Cayley transform
to estimate the next optimization point based on the updated momentum. This is used to gener-
alize the conventional SGD with momentum and ADAM algorithms to our two new Riemannian
optimizations on the Stiefel manifold, as described in Section 4.1 and Section 4.2.
4
Published as a conference paper at ICLR 2020
Algorithm 1 Cayley SGD with Momentum
1	: Input: learning rate l, momentum coefficient β,	e=10-8, q = 0.5, S = 2.
2	: Initialize X1 as an orthonormal matrix; and M1	=0
3	: for k = 0 to T do	
4	Mk+1 ― βMk - G(Xk),	. Update the momentum
5	Wk ― Mk+ιX> - 1 Xk (X> Mk+ιX>)	. Compute the auxiliary matrix
6	Wk ― Wk - W>	
7	Mk+ι ― WkXk.	. Project momentum onto the tangent space
8	α ― min{l, 2q∕(∣∣Wk || + e)}	. Select adaptive learning rate for contraction mapping
9	Initialize Y0 - X + αMk+ι	. Iterative estimation of the Cayley Transform
10	:	for i = 1 to s do	
11	γi - Xk + α Wk(Xk + Yi-1)	
12	Update Xk+ι — YS	
Algorithm 2 Cayley ADAM
1	: Input: learning rate l, momentum coefficients β1 and β2 , = 10-8, q = 0.5, s = 2.
2	: Initialize X1 as an orthonormal matrix. M1 = 0, v1 = 1
3	: for k = 0 to T do
4	Mk+1 - βιMk + (1 — βι)G(Xk)	. Estimate biased momentum
5	Vk+ι 一 β2Vk + (1 — β2)kG(Xk )∣∣2
6	Vk+ι J Vk+ι∕(1 — βk)	. Update biased second raw moment estimate
7	r J (1 — β1) ʌ/Vk+ι + e	. Estimate biased-corrected ratio
8	Wk J Mk+1X> — 1 Xk (X> Mk+1X>)	. Compute the auxiliary Skew-Symmetric matrix
9	Wk J (Wk — W>)/r
10	:	Mk+1 J rWk Xk	. Project momentum onto the tangent space
11	:	α J min{l, 2q/(|Wk | + )}	. Select adaptive learning rate for contraction mapping
12	:	Initialize Y0 J Xk — αMk+1	. Iterative estimation of the Cayley Transform
13	:	for i = 1 to s do
14	Yi J Xk — Ia W (Xk + Yi-1)
15	:	Update Xk+1 J Ys
4.1	Cayley SGD with Momentum
We generalize the heavy ball (HB) momentum update (Ghadimi et al., 2015; Zavriev & Kostyuk,
1993) in the kth optimization step1 to the Stiefel manifold. Theoretically, it can be represented as:
Mk+1 = βπTXk(Mk) - GM(Xk), Xk+1 = Y(α,Xk,Wk)	(7)
where Y (α, Xk , Wk) is a curve that starts at Xk with length α on the Stiefel manifold, specified
by the Cayley transform in Eq.(3). In practice, we efficiently perform the updates in Eq.(7) by the
proposed iterative Cayley transform and implicit vector transport on the Stiefel manifold. Specially,
we first update the momentum as if it were in the Euclidean space. Then, we update the new
parameters by iterative Cayley transform. Finally, we correct the momentum Mk+1 by projecting it
to TXk M. The details of our Cayley SGD algorithm are shown in Alg. 1.
4.2	ADAM on the Stiefel Manifold
ADAM is a recent first-order optimization method for stochastic objective functions. It estimates
adaptive lower-order moments and uses adaptive learning rate. The algorithm is designed to combine
the advantages of both AdaGrad, which performs well in sparse-gradient cases, and RMSProp,
which performs well in non-stationary cases.
We generalize ADAM to the Stiefel manifold by making three modifications to the vanilla ADAM.
First, we replace the standard gradient and momentum with the corresponding ones on the Stiefel
manifold, as described in Section 4.1. Second, we use a manifold-wise adaptive learning rate that
1 Note that we use index i in superscript to indicate our iterative steps in estimation of the Cayley transform,
and index k in subscript to indicate optimization steps.
5
Published as a conference paper at ICLR 2020
assign a same learning rate for all entries in a parameter matrix as in (Absil et al., 2009). Third, we
use the Cayley transform to update the parameters. Cayley ADAM is summarized in Alg 2.
5	Convergence Analysis
In this section, we analyze convergence of the iterative Cayley transform and Cayley SGD with
momentum. To facilitate our analysis, we make the following common assumption.
Assumption 1. The gradient Vf ofthe objective function f is Lipschitz continuous
INf (X) -Vf(Y)k ≤ LkX — Yk,	∀X,Y, where L > 0 is a constant.	(8)
Lipschitz continity is widely applicable to deep learning architectures. For some models using
ReLU, the derivative of ReLU is Lipschitz continuous almost everywhere with an appropriate Lips-
chitz constant L in Assumption 1 , except for a small neighbourhood around 0, whose measure tends
to 0. Such cases do not affect either analysis in theory or training in practice.
The above assumption allows proving the following contraction mapping theorem.
Theorem 1. For α ∈ (0, min{1, k^ }) ,the iteration Y i+1 = X + 2 W (X + Yi) is a contraction
mapping and converges to the closed-form Cayley transform Y(α) given by Eq.(3). Specifically, at
iteration i, ||Yi 一 Y(a)|| = o(α2+i).
Theorem 1 shows the iterative Cayley transform will converge. Specially, it converges faster than
other approximation algorithms, such as, e.g., the Newton iterative and Neumann Series which
achieves error bound o(αi) at the ith iteration. We further prove the following result on convergence:
Theorem 2. Given an objective function f(X) that satisfies Assumption 1, let Cayley SGD with
momentum run for t iterations with G(Xk). For ɑ = min{ 1Lβ, √+}, where A is a positive
constant, we have: mink=。,…，t E[∣∣Vm∕(Xk)∣2] = o(√+) → 0, as t → ∞.
The proofs of Theorem 1 and Theorem 2 are presented in the appendix.
6	Experiments
6.1	orthonormality in CNNs
In CNNs, for a convolutional layer with kernel KK ∈ Rcout×cin×h×w, We first reshape KK into a
matrix K of size p × n, where p = cout, n = cin × h × w. In most cases, we have p ≤ n. Then,
we restrict the matrix K on the Stiefel manifold using Cayley SGD or Cayley ADAM, while other
parameters are optimized with SGD and ADAM.
Datasets: We evaluate Cayley SGD or Cayley ADAM in image classification on the CIFAR10 and
CIFAR100 datasets (Krizhevsky & Hinton, 2009). CIFAR10 and CIFAR100 consist of of 50,000
training images and 10,000 test images, and have 10 and 100 mutually exclusive classes.
Models: We use two networks — VGG (Simonyan & Zisserman, 2014) and Wide ResNet
(Zagoruyko & Komodakis, 2016) — that obtain state of the art performance on CIFAR10 and CI-
FAR100. For VGG, every convolutional layer is followed by a batch normalization layer and a
ReLU. For Wide ResNet, we use basic blocks, where two consecutive 3-by-3 convolutional layers
are followed by the batch normalization and ReLU activation, respectively.
Training Strategies: We use different learning rates le and lst for weights on the Euclidean space
and the Stiefel manifold, respectively. We set the weight decay as 0.0005, momentum as 0.9, and
minibatch size as 128. The initial learning rates are set as le = 0.01 and lst = 0.2 for Cayley SGD
and le = 0.01 and lst = 0.4 for Cayley ADAM. During training, we reduce the learning rates by a
factor of 0.2 at 60, 120, and 160 epochs. The total number of epochs in training is 200. In training,
the data samples are normalized using the mean and variance of the training set, and augmented by
randomly flipping training images.
Our baselines include SGD with momentum and ADAM. We follow the same training strategies as
mentioned above, except for the initial learning rates set to 0.1 and 0.001, respectively.
6
Published as a conference paper at ICLR 2020
Table 1: Classification errors(%) on CIFAR10.						
Method	VGG-13	VGG-16	VGG-19	WRN 52-1	WRN 16-4	WRN 28-10
SGD	5.88	6.32	6.49	6.23	4.96	3.89
ADAM	6.43	6.61	6.92	6.77	5.32	3.86
Cayley SGD	5.90	5.77	5.85	6.35	5.15	3.66
Cayley ADAM	5.93	5.88	6.03	6.44	5.22	3.57
Table 2: Classification errors(%) on CIFAR100.						
Method	VGG-13	VGG-16	VGG-19	WRN 52-1	WRN 16-4	WRN 28-10
SGD	26.17	26.84	27.62	27.44	23.41	18.66
ADAM	26.58	27.10	27.88	27.89	24.45	18.45
Cayley SGD	24.86	25.48	25.68	27.64	23.71	18.26
Cayley ADAM	25.10	25.61	25.70	27.91	24.18	18.10
Performance: Table 1 and Table 2 show classification errors on CIFAR10 and CIFAR100 respec-
tively using different optimization algorithms. As shown in the tables, the proposed two algorithms
achieve competitive performance, and for certain deep architectures, the best performance. Specif-
ically, the network WRN-28-10 trained with Cayley ADAM achieves the best error rate of 3.57%
and 18.10% on CIFAR10 and CIFAR100 respectively. Fig. 1 compares training curves of our al-
gorithms and baselines in terms of epochs, and shows that both Cayley SGD and Cayley ADAM
converge faster than the baselines. In particular, the training curves of the baselines tend to get
stuck in a plateau before the learning rate drops, which is not the case with our algorithms. This
might be because the baselines do not enforce orthonormality of network parameters. In training,
the backpropagation of orthonormal weight vectors, in general, does not affect each other, and thus
has greater chances to explore new parameter regions. Fig. 2 also compares the training loss curve
in terms of time. Our Cayley SGD and Cayley ADAM converge the fastest among methods that also
address orthonormality. Although the baselines SGD and ADAM converge faster at the beginning
due to their training efficiency, our Cayley SGD and Cayley ADAM can catch up with the baseline
after 12000 seconds, which corresponds to the 120th epoch of SGD and ADAM, and the 60th epoch
of Cayley SGD and Cayley ADAM.
Figure 1: Training loss curves of different optimization algorithms for WRN-28-10 for epoach 40-
200. (a) Results on CIFAR10. (b) Results on CIFAR100. Both figures show that our Cayley SGD
and Cayley ADAM achieve the top two fastest convergence rates.
Comparison with State of the Art. We compare the proposed algorithms with two sets of state of
the art. The first set of approaches are soft orthonormality regularization approaches (Bansal et al.,
2018). Specially, for a weight matrix K ∈ Rn×p, SO penalizes ||KK> - I ||2F , DSO penalizes
(||KK> - I ||2F + ||K>K - I ||2F), the SRIP penalizes the spectral norm of (KK> - I). The second
set of approaches includes the following hard orthonormality methods: Polar decomposition(Absil
et al., 2009), QR decomposition(Absil et al., 2009), closed-form Cayley transform, Wen&Yin (Wen
& Yin, 2013), OMDSM(Huang et al., 2018a), DBN(Huang et al., 2018b). Note that we do not in-
7
Published as a conference paper at ICLR 2020
Figure 2: Training loss curves of different optimization algorithms for WRN-28-10 in terms of
seconds. (a) Results on CIFAR10. (b) Results on CIFAR100.
clude momentum in Polar decomposition and QR decomposition as previous work does not specify
the momentum. Also, we use the closed-form Cayley transform without momentum as an ablation
study of the momentum effect. All experiments are evaluated on the benchmark network WRN-
28-10. Table 3 shows that our algorithms achieve comparable error rates with state of the art. All
algorithms are run on one TITAN Xp GPU, and their average training time are compared per epoch.
Table 3 shows that our algorithms run much faster than existing algorithms, except for the baseline
SGD and ADAM which do not impose orthonormality constraints.
6.2	orthonormality in RNNs
In RNNs, the hidden-to-hidden transition matrix K can be modeled as a unitary matrix (Arjovsky
et al., 2016). Wisdom et al. (2016) model the hidden-to-hidden transition matrix as a full-capacity
unitary matrix on the complex Stiefel manifold: St(CN) = {K ∈ CN×N : KHK = I}.
Pixel-by-pixel MNIST: We evaluate the proposed algorithms on the challenging pixel-by-pixel
MNIST task for long-term memory. The task was used to test the capacity of uRNNs (Arjovsky
et al., 2016; Wisdom et al., 2016). Following the same setting as in Wisdom et al. (2016), we re-
shape MNIST images of 28 × 28 pixels to a T = 784 pixel-by-pixel sequences, and select 5,000 out
of the 60,000 training examples for the early stopping validation.
Training: Wisdom et al. (2016) restricted the transition unitary matrix on the Stiefel manifold via
a closed-form Cayley transform. On the contrary, we use Cayley SGD with momentum and Cayley
ADAM to reduce the training time. Table 4 shows that the proposed algorithms reduce the training
Table 3: Error rate and training time per epoch comparison to baselines with WRN-28-10 on CI-
FAR10 and CIFAR100. All experiments are performed on one TITAN XP GPU.
	Method	Error Rate(%) CIFAR10 CIFAR100		Training time(s)
Baselines	-SGD ADAM	3.89 3.85	18.66 18.52	102.5 115.2
Soft orthonormality	SO(BansaI et al., 2018) DSO (Bansal et al., 2018) SRIP (Bansal et al., 2018)	3.76 3.86 3.60	18.56 18.21 18.19	2973 311.0 321.8
Hard orthonormality	OMDSM (HUang et al., 2018a) DBN (Huang et al., 2018b) Polar (Absil et al., 2009) QR (Absil et al., 2009) Wen&Yin (Wen & Yin, 2013) Cayley closed form w/o momentum Cayley SGD (Ours) Cayley ADAM (Ours)	3.73 3.79 3.75 3.75 3.82 3.80 3.66 3.57	18.61 18.36 18.50 18.65 18.70 18.68 18.26 18.10	9436 889.4 976.5 469.3 305.8 1071.5 218.7 224.4
8
Published as a conference paper at ICLR 2020
Table 4: Pixel-by-pixel MNIST accuracy and training time per iteration of the closed-form Cayley
Transform, Cayley SGD, and Cayley ADAM for Full-uRNNs (Wisdom et al., 2016). All experi-
ments are performed on one TITAN Xp GPU.
Closed-Form	Cayley SGD	Cayley ADAM
Model	Hidden Size	Acc(%)	Time(s)	Acc(%)	Time(s)	Acc(%)	Time(s)
Full-uRNN	116	92.8	2.10	92.6	1.42	92.7	1.50
Full-uRNN	512	96.9	2.44	96.7	1.67	96.9	1.74
time by about 35% for all settings of the network, while maintaining the same level of accuracy. All
experiments are performed on one TITAN Xp GPU.
Checking Unitariness: To show that the proposed algorithms are valid optimization algorithms on
the Stiefel manifold, we check the unitariness of the hidden-to-hidden matrix K by computing the
error term ||KHK - I ||F during training. Table 5 compares average errors for varying numbers of
iterations s. As can be seen, the iterative Cayley transform can approximate the unitary matrix when
s = 2. The iterative Cayley transform performs even better than the closed form Cayley transform,
which might be an effect of the rounding error of the matrix inversion as in Eq.(3).
Table 5: Checking unitariness by computing the error ||KHK - I||F for varying numbers of itera- tions in the iterative Cayley transform and the closed-form Cayley transform.			
Hidden Size	s=0	s=1	s=2	s=3	s=4	Closed-form
n=116	3.231e-3	2.852e-4	7.384e-6	7.353e-6	7.338e-6	8.273e-5
n=512	6.787e-3	5.557e-4	2.562e-5	2.547e-5	2.544e-5	3.845e-5
7	Conclusion
We proposed an efficient way to enforce the exact orthonormal constraints on parameters by opti-
mization on the Stiefel manifold. The iterative Cayley transform was applied to the conventional
SGD and ADAM for specifying two new algorithms: Cayley SGD with momentum and Cayley
ADAM, and the theoretical analysis of convergence of the former. Experiments show that both algo-
rithms achieve comparable performance and faster convergence over the baseline SGD and ADAM
in training of the standard VGG and ResNet on CIFAR10 and CIFAR100, as well as RNNs on the
pixel-by-pixel MNIST task. Both Cayley SGD with momentum and Cayley ADAM take less run-
time per iteration than all existing hard orthonormal methods and soft orthonormal methods, and can
be applied to non-square parameter matrices.
Acknowledgements
This work was supported in part by NSF grant IIS-1911232, DARPA XAI Award N66001-17-2-4029
and AFRL STTR AF18B-T002.
References
P-A Absil and Jerome Malick. Projection-Iike retractions on matrix manifolds. SIAM Journal on
Optimization, 22(1):135-158, 2012.
P-A Absil, Robert Mahony, and Rodolphe Sepulchre. Optimization algorithms on matrix manifolds.
Princeton University Press, 2009.
Martin Arjovsky, Amar Shah, and Yoshua Bengio. Unitary evolution recurrent neural networks. In
International Conference on Machine Learning, pp. 1120-1128, 2016.
Nitin Bansal, Xiaohan Chen, and Zhangyang Wang. Can we gain more from orthogonality regular-
izations in training deep cnns? arXiv preprint arXiv:1810.09102, 2018.
9
Published as a conference paper at ICLR 2020
Gary Becigneul and Octavian-Eugen Ganea. Riemannian adaptive optimization methods. In In-
ternational Conference on Learning Representations, 2019. URL https://openreview.
net/forum?id=r1eiqi09K7.
William M Boothby. An introduction to differentiable manifolds and Riemannian geometry, volume
120. Academic press, 1986.
Minhyung Cho and Jaehyung Lee. Riemannian approach to batch normalization. In Advances in
Neural Information Processing Systems, pp. 5225-5235, 2017.
Moustapha Cisse, Piotr Bojanowski, Edouard Grave, Yann Dauphin, and Nicolas Usunier. Parseval
networks: Improving robustness to adversarial examples. In Proceedings of the 34th International
Conference on Machine Learning-Volume 70, pp. 854-863. JMLR. org, 2017.
Michael Cogswell, Faruk Ahmed, Ross Girshick, Larry Zitnick, and Dhruv Batra. Reducing overfit-
ting in deep networks by decorrelating representations. arXiv preprint arXiv:1511.06068, 2015.
Victor Dorobantu, Per Andre Stromhaug, and Jess Renteria. Dizzyrnn: Reparameterizing recurrent
neural networks for norm-preserving backpropagation. arXiv preprint arXiv:1612.04035, 2016.
Alan Edelman, Tomas A Arias, and Steven T Smith. The geometry of algorithms with orthogonality
constraints. SIAM journal on Matrix Analysis and Applications, 20(2):303-353, 1998.
Simone Fiori, Tetsuya Kaneko, and Toshihisa Tanaka. Learning on the compact stiefel manifold by
a cayley-transform-based pseudo-retraction map. In The 2012 International Joint Conference on
Neural Networks (IJCNN), pp. 1-8. IEEE, 2012.
Evan S Gawlik and Melvin Leok. High-order retractions on matrix manifolds using projected poly-
nomials. SIAM Journal on Matrix Analysis and Applications, 39(2):801-828, 2018.
Euhanna Ghadimi, Hamid Reza Feyzmahdavian, and Mikael Johansson. Global convergence of the
heavy-ball method for convex optimization. In Control Conference (ECC), 2015 European, pp.
310-315. IEEE, 2015.
Kyle Helfrich, Devin Willmott, and Qiang Ye. Orthogonal recurrent neural networks with scaled
cayley transform. arXiv preprint arXiv:1707.09520, 2017.
Lei Huang, Xianglong Liu, Bo Lang, Adams Wei Yu, Yongliang Wang, and Bo Li. Orthogonal
weight normalization: Solution to optimization over multiple dependent Stiefel manifolds in deep
neural networks. In Thirty-Second AAAI Conference on Artificial Intelligence, 2018a.
Lei Huang, Dawei Yang, Bo Lang, and Jia Deng. Decorrelated batch normalization. In The IEEE
Conference on Computer Vision and Pattern Recognition (CVPR), June 2018b.
Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by
reducing internal covariate shift. In Francis Bach and David Blei (eds.), Proceedings of the 32nd
International Conference on Machine Learning, volume 37 of Proceedings of Machine Learning
Research, pp. 448-456, Lille, France, 07-09 Jul 2015. PMLR. URL http://proceedings.
mlr.press/v37/ioffe15.html.
Bo Jiang and Yu-Hong Dai. A framework of constraint preserving update schemes for optimization
on stiefel manifold. Mathematical Programming, 153(2):535-575, 2015.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980, 2014.
Alex Krizhevsky and Geoffrey Hinton. Learning multiple layers of features from tiny images. Tech-
nical report, Citeseer, 2009.
Mario Lezcano-Casado and David Martlnez-Rubio. Cheap orthogonal constraints in neural
networks: A simple parametrization of the orthogonal and unitary group. arXiv preprint
arXiv:1901.08428, 2019.
Jonathan H Manton. Optimization algorithms exploiting unitary constraints. IEEE Transactions on
Signal Processing, 50(3):635-650, 2002.
10
Published as a conference paper at ICLR 2020
Yasunori Nishimori and Shotaro Akaho. Learning algorithms utilizing quasi-geodesic flows on the
stiefel manifold. Neurocomputing, 67:106-135, 2005.
Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image
recognition. arXiv preprint arXiv:1409.1556, 2014.
Eugene Vorontsov, Chiheb Trabelsi, Samuel Kadoury, and Chris Pal. On orthogonality and learn-
ing recurrent networks with long term dependencies. In Proceedings of the 34th International
Conference on Machine Learning-Volume 70, pp. 3570-3578. JMLR. org, 2017.
Zaiwen Wen and Wotao Yin. A feasible method for optimization with orthogonality constraints.
Mathematical Programming, 142(1-2):397-434, 2013.
Scott Wisdom, Thomas Powers, John Hershey, Jonathan Le Roux, and Les Atlas. Full-capacity
unitary recurrent neural networks. In Advances in Neural Information Processing Systems, pp.
4880-4888, 2016.
Wei Xiong, Bo Du, Lefei Zhang, Ruimin Hu, and Dacheng Tao. Regularizing deep convolutional
neural networks with a structured decorrelation constraint. In 2016 IEEE 16th International Con-
ference on Data Mining (ICDM), pp. 519-528. IEEE, 2016.
Sergey Zagoruyko and Nikos Komodakis. Wide residual networks. arXiv preprint
arXiv:1605.07146, 2016.
SK Zavriev and FV Kostyuk. Heavy-ball method in nonconvex optimization problems. Computa-
tional Mathematics and Modeling, 4(4):336-341, 1993.
Jianping Zhou, Minh N. Do, and Jelena Kovacevic. Special paraunitary matrices, Cayley transform,
and multidi- mensional orthogonal filter banks. IEEE Trans. Image Processing, 15(2):511-519,
2006.
Xiaojing Zhu. A riemannian conjugate gradient method for optimization on the stiefel manifold.
Computational Optimization and Applications, 67(1):73-110, 2017.
11
Published as a conference paper at ICLR 2020
A Preliminary
In this section, we derive some properties of the Stiefel manifold in this section to facilitate the
proofs of Theorem 1 and Theorem 2 in the main paper.
Considering the Stiefel manifold M is a bounded set and Lipschitz Assumption 1 on the gradi-
ent in Sec. 5, one straightforward conclusion is that both Vf (X) and its Stiefel manifold gradient
NMf (X) that is a projection onto the tangent space are bounded. Formally, there exists a positive
constant G, such that
||VMf(X)|| ≤ ||Vf(X)|| ≤G,∀X ∈M	(9)
As stochastic gradient G(X) = G(X; ξ) is the gradient of a sub-dataset, where ξ is a stochastic
variable for data samples and we are working are a finite dataset, it’s straightforward to show that
G(X) and its Riemannian stochastic gradient GM(X) are also bounded. For brevity, we still use the
same upper bound G, such that:
||GM(X)|| ≤ ||G(X)|| ≤G,∀X∈M	(10)
Recall the recursion in Eq.(7), we show that the momentum is also bounded:
∣∣Mk+ι∣∣ ≤ β||Mk|| + ||GM(Xk)||
k
≤ Xβk-illGM(Xi)Il
i=0
≤ 1⅛G
Therefore, we know that Wk in Eq.(7) is bounded.
(11)
B	Proof of Theorem 1
Proof. By subtracting the iterative relationship Eq.(5) by its ith iteration Yi+1 = X +
α2W (X + Yi),we have:
∣∣Yi+1- Y(α)∣∣≤ α≡IIYi- Y(α)∣∣	(12)
Therefore, since W is bounded, for α < k^, such that akWk < 1, the iteration in Eq.(5) is a
contraction mapping, and it will converge to the closed-from solution Y (α).
By differentiate Eq.(5), we have:
dY(α) __ W(X+Ym)- αwdγ(α)
-0∑~ = W(-2 -)+ 2 WP^
d2Y(a) = (i - ɑw )-ιWdY (a)
dα2	(I	2 W ) W dα
therefore, dY(α) and d Y20) are bounded, i.e. there exist a positive constant C, such that:
IIdYαII ≤ C
dα2
Using the Taylor expansion of Y in Eq.(3), we have:
Y(α) = Xk + αMk+ι + 1 α2 ^Y(Yk0)
2 dα2
where γk ∈ (0, 1). Given Y0 = Xk + αMk+1, we have:
IIY0-Y(α)II=o(α2)
Since W is bounded and。||：|| < 1, then,
IIYi- Y(α)∣∣ ≤ (α≡)i∣∣Y0 - Y(α)∣∣ = o(α2+i)
(13)
(14)
(15)
(16)
(17)
□
12
Published as a conference paper at ICLR 2020
C Proof of Theorem 2
Proof. Use Taylor expansion of Y (α), the process of Cayley SGD with momentum Eq.(7) can be
written as:
Mk+1 =πTXk(βMk) -GM(Xk)
Xk+1 = Xk + aMk+1 + 1 α2 d2Y(Yka)	(18)
2	dα2
where γk ∈ (0, 1).
Using the fact that
M=πTX(M)+πNX(M)	(19)
where πNX (M ) is the projection onto the normal space, and
∏Nx (M)= XX >M + M >X	(20)
Then, the projection of momentum can be represented as:
πTXk (Mk) = Mk - πNXk (Mk)
X X XkMk + MkXk
=Mk - Xk-------2------
=Mk- 1 Xk{[Xk-i + aMk + 1 a2 d"卜-Ia) ]>Mk
2	2	dα
+ M>[Xk-i + aMk + 1 a2 d2Y「)]}
2 da2
=Mk- aXkMk>Mk - 4a2Xk[IdY^-1。)TMk + M>d2Y"叫	(21)
Then the momentum update in Eq.(7) is equivalent to:
Mk+1 = βMk - aβXkMk>Mk - GM (Xk)
-	1 a2βXk[d2YIk-1a)>Mk + Mkr d2YIki。)〕	(22)
Therefore, the paramter update in Eq.(7) can be represented as:
Xk+1 = Xk + aβMk - aGM(Xk)
-	4a3βXk[¾a2>Mk+ Mkr¾⅛
-	a2βXkMkrMk + 1 a2 *丫(Yk。)
2	Ia2
=Xk+β(Xk -Xk-1) -aGM(Xk)+a2U	(23)
where
U = -4aβXk [dYH>Mk + M>:)]
-βXkM>Mk + 1 d2¾a) - 2d⅛)	(24)
aa
Since ||M ||, ||X ||, andk dY k are bounded, there is a positive constant D, such that
||U|| ≤D	(25)
13
Published as a conference paper at ICLR 2020
To facilitate the analysis of Cayle SGD with momentum, We introduce auxiliary variables {Pk},
such that:
r	r	α ʃɔ …、 ɑ2 L
Zk+1 = Zk — 1--β GM(Xk) + 1------β u
(26)
where
Zk = χk + pk	22 * * * * (27)
and
Pk = ʃ 1-β(Xk- XkT),k ≥ 1
[θ,k = 0
Since f (X) is a smooth function according to Assumption 1, we have:
f(Y) — f (X) — tr(Vf (X )τ(Y — X))
=[Vtr(f(Y + t(Y — X))τ(Y — X))dt — tr(Vf(X)τ(Y — X))
Jo
≤ll I (Vf(Y + t(Y — X)) — Vf(X))dt∣∣×∣∣Y — X||
Jo
≤ I L∣∣t(Y — X)∣∣dt × ∣∣Y — X∣∣
Jo
≤ 2 ∣∣Y - X ∣∣2
Then, we have
f(Zk + 1) ≤f (Zk) + tr(V f (Zk )T(Zk + 1 — Zk )) + ɪ HZk+1 — Zk H2
=f(Zk)+ tr(Vf (Zk)τ(Zk+1 — Zk)) + L∣∣ʌGM(Xk)-二U∣∣2
2 1 — P	1 — P
T	Lα2	C	Lα4
≤f (Zk)+ tr(Vf (Zk )τ(Zk+1 — Zk)) +	∣∣GM(Xk )∣∣2 +
(28)
∣∣u ∣∣2
22
≤f (Zk) — Ltr(GM(Xk )τVf (Zk)) + —tr(U TVf(Zk)) + ---G G2
1 — P	1 — P	(1 — P)
+__L04	d2
+ (1 - P)2
22
≤f (Zk) — Ltr(GM(Xk )τVf (Zk)) + χ7--zr (∣∣U ∣∣2 + ∣∣Vf (Zk )∣∣2) +	G2
1 - P	2(1 - P)	(1 - P)
+__La4	02
+ (1-P)2
2
≤f (Zk) —「加(GM(Xk )TVf (Zk)) +	(D2 + G2)
1 — P	2(1 — P)
La2	…2 Lα4	29
+αfG +αf
(29)
14
Published as a conference paper at ICLR 2020
By taking expectation over the both sides, We have:
E[f (Zk+ι)- f (Zk))]
≤EJ 1⅛tr(Vf (Zk WeXk))] + 端函 D + G2)十 二 G2 十 二 D2
≤E[-ʌtr(vf(Zk)-Vf(Xk))TVMf(Xk) - τ^tr(Vf(Xk)τV^f(Xk))]
1 — P	1 — β
+ 2(⅛) (D2 + G2)+(⅛WG2 +(1⅛D2
=E[--tr(Vf (Zk) - Vf(Xk))TVMf(Xk) - ʌ||VMf(Xk)||2]
1-P	1-P
02	nx L02	La4	…
+2Γ二团(D + G ) + Gf G + Gf D	(30)
By noticing that:
-ʌ (Vf(Zk) - Vf (Xk))TVMf(Xk)
1-P
≤ɪIIVf(Zk) - Vf(Xk)||2 + 器 J||VMf(Xk)||2	(31)
2L	2(1 — P )2
Then
E[f(Zk+ι)- f(Zk))]
≤ ɪE||Vf(Zk) - Vf (Xk)||2 + (*La；2 - ʌ)E||VMf (Xk)||2
2L	2(1 — P)	1 — P
+ 2(⅛7 (D2 + G2) + α‰ G2 + α‰ D2	(32)
According to the Lipschitz continuous property in Assumption 1, we have:
||Vf (Zk) - Vf (Xk)||2 ≤L2HZk - Xk||2
=f¾ ||Xk - X1||2
L2p2 ∣, λ 1 , 1 2 d2Y(Yka) ll2
=1■评||aMk + 2ɑ ~d^~ "
≤ 7f¾ (||aMk ||2 + || 1 α2 与色 ||2)
(1 — P)2	2	dα2
2L202p2	G2	a2C2
≤ (1 - P)2 ((I - P)2 +	4)
Therefore,
E[f (Zk+ι)- f (Zk))]
≤ -BE||Vmf(Xk)||2 + α2B0
where
a	La2
=1 - P - 2(1 - P)2
o _ LP2	G2	a2C2	D2 + G2	LG2	La2	2
=(1 - P)2 ((I - P)2 +	4)+ 2(1 - P) + (1 - P)2 + (1 - P)2
(33)
(34)
(35)
(36)
15
Published as a conference paper at ICLR 2020
SinCe α ≤ 1-β ,then
a
B
La2
1 - β - 2(1 - β)2
〉
-ɪ (1 -
1 - β(
a
aL
2(1-β)
)
2(1-β) > 0
(37)
By summing Eq.(34) over all k, We have
t
BXE||VMf(Xk)||2 ≤ E[f(Z0)
k=0
-f(Zt+1)] + (t + I)ɑ2B
≤ 于(Z0) -
f* + (t + 1)α2B
(38)
Then
min E[∣∣VMf(Xk)||2] ≤
k=0,∙∙∙ ,t
f (Z0) - f* , 2 B0
-+ (α
(t + 1)B + B
(39)
min E[||Vmf(Xk)∣∣2] ≤
k=0,∙∙∙ ,t
2(f(Z0)
-fJ(I- β)
(t + 1)α
+ q2B'(1 - β)
(40)
Use the fact that α = min{ 1-β, √= }, and notice that Z° = X。, therefore,
min E[||VMf(xk)||2]
k=0,∙∙∙ ,t
≤2(f(X0)- f*)(1- β)
t+1
≤2(f(X0)- f*)(1- β)
t + 1
，2
+
max(
max(
L
1-β,
L
1-β,
号}+
√t+11
A )
2AB0 (1 - β)
√t∏
2A(1- β) [ Lβ∙
√t+1 [(1 - β)2((I
G2
A2C2
-β)2 + 4(t +1)
)
D2 + G2	LG2
+2T-历+⑪-而+
LA2
(t + 1)(1 - β)2
D2]
(41)
Therefore, min E[||VMf (Xk)||2] = o(√1=) → 0, as t →
k=0,∙∙∙ ,t	Vt+1
∞.
□
16