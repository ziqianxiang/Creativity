Published as a conference paper at ICLR 2020
Regularizing activations in neural networks
via distribution matching with the Wasser-
STEIN METRIC
Taejong Joo
ESTsoft
Republic of Korea
tjoo@estsoft.com
Donggu Kang
ESTsoft
Republic of Korea
emppunity@gmail.com
Byunghoon Kim
Hanyang University
Republic of Korea
byungkim@hanyang.ac.kr
Ab stract
Regularization and normalization have become indispensable components in
training deep neural networks, resulting in faster training and improved general-
ization performance. We propose the projected error function regularization loss
(PER) that encourages activations to follow the standard normal distribution. PER
randomly projects activations onto one-dimensional space and computes the reg-
ularization loss in the projected space. PER is similar to the Pseudo-Huber loss in
the projected space, thus taking advantage of both L1 and L2 regularization losses.
Besides, PER can capture the interaction between hidden units by projection vec-
tor drawn from a unit sphere. By doing so, PER minimizes the upper bound of the
Wasserstein distance of order one between an empirical distribution of activations
and the standard normal distribution. To the best of the authors’ knowledge, this is
the first work to regularize activations via distribution matching in the probability
distribution space. We evaluate the proposed method on the image classification
task and the word-level language modeling task.
1	Introduction
Training of deep neural networks is very challenging due to the vanishing and exploding gradient
problem (Hochreiter, 1998; Glorot & Bengio, 2010), the presence of many flat regions and saddle
points (Shalev-Shwartz et al., 2017), and the shattered gradient problem (Balduzzi et al., 2017). To
remedy these issues, various methods for controlling hidden activations have been proposed such as
normalization (Ioffe & Szegedy, 2015; Huang et al., 2018), regularization (Littwin & Wolf, 2018),
initialization (Mishkin & Matas, 2016; Zhang et al., 2019), and architecture design (He et al., 2016).
Among various techniques of controlling activations, one well-known and successful path is con-
trolling their first and second moments. Back in the 1990s, it has been known that the neural net-
work training can be benefited from normalizing input statistics so that samples have zero mean
and identity covariance matrix (LeCun et al., 1998; Schraudolph, 1998). This idea motivated batch
normalization (BN) that considers hidden activations as the input to the next layer and normalizes
scale and shift of the activations (Ioffe & Szegedy, 2015).
Recent works show the effectiveness of different sample statistics of activations for normalization
and regularization. Deecke et al. (2019) and Kalayeh & Shah (2019) normalize activations to several
modes with different scales and translations. Variance constancy loss (VCL) implicitly normalizes
the fourth moment by minimizing the variance of sample variances, which enables adaptive mode
separation or collapse based on their prior probabilities (Littwin & Wolf, 2018). BN is also extended
to whiten activations (Huang et al., 2018; 2019), and to normalize general order of central moment
in the sense of Lp norm including L0 and L∞ (Liao et al., 2016; Hoffer et al., 2018).
In this paper, we propose a projected error function regularization (PER) that regularizes activations
in the Wasserstein probability distribution space. Specifically, PER pushes the distribution of acti-
vations to be close to the standard normal distribution. PER shares a similar strategy with previous
approaches that dictates the ideal distribution of activations. Previous approaches, however, deal
with single or few sample statistics of activations. On the contrary, PER regularizes the activations
1
Published as a conference paper at ICLR 2020
Figure 1: Limitation of statistics in terms of representing the probability distribution. In all subplots,
X has zero mean and unit variance and y 〜N(0,1). In (a) (x, y)〜N(0, I). In (b), X 〜N(0,1) but
correlated with y . In (c), x follows a skewed distribution. In (d), x follows a bi-modal distribution.
Standardization cannot differentiate (a)-(d) and whitening cannot differentiate (a), (c), and (d).
by matching the probability distributions, which considers different statistics simultaneously, e.g.,
all orders of moments and correlation between hidden units. The extensive experiments on multiple
challenging tasks show the effectiveness of PER.
2	Related works
Many modern deep learning architectures employ BN as an essential building block for better per-
formance and stable training even though its theoretical aspects of regularization and optimization
are still actively investigated (Santurkar et al., 2018; Kohler et al., 2018; Bjorck et al., 2018; Yang
et al., 2019). Several studies have applied the idea of BN that normalizes activations via the sample
mean and the sample variance to a wide range of domains such as recurrent neural network (Lei Ba
et al., 2016) and small batch size training (Wu & He, 2018).
Huang et al. (2018; 2019) propose normalization techniques whitening the activation of each layer.
This additional constraint on the statistical relationship between activations improves the gener-
alization performance of residual networks compared to BN. Although the correlation between
activations are not explicitly considered, dropout prevents activations from being activated at the
same time, called co-adaptation, by randomly dropping the activations (Srivastava et al., 2014), the
weights (Wan et al., 2013), and the spatially connected activations (Ghiasi et al., 2018).
Considering BN as the normalization in the L2 space, several works extend BN to other spaces, i.e.,
other norms. Streaming normalization (Liao et al., 2016) explores the normalization of a different
order of central moment with Lp norm for general p. Similarly, Hoffer et al. (2018) explores L1
and L∞ normalization, which enable low precision computation. Littwin & Wolf (2018) proposes a
regularization loss that reduces the variance of sample variances of activation that is closely related
to the fourth moment.
The idea of controlling activations via statistical characteristics of activations also has motivated
initialization methods. An example includes balancing variances of each layer (Glorot & Bengio,
2010; He et al., 2015), bounding scale of activation and gradient (Mishkin & Matas, 2016; Balduzzi
et al., 2017; Gehring et al., 2017; Zhang et al., 2019), and norm preserving (Saxe et al., 2013).
Although the desired initial state may not be maintained during training, experimental results show
that they can stabilize the learning process as well.
Recently, the Wasserstein metric has gained much popularity in a wide range of applications in deep
learning with some nice properties such as being a metric in a probability distribution space without
requiring common supports of two distributions. For instance, it is successfully applied to a multi-
labeled classification (Frogner et al., 2015), gradient flow of policy update in reinforcement learning
(Zhang et al., 2018), training of generative models (Arjovsky et al., 2017; Gulrajani et al., 2017;
Kolouri et al., 2019), and capturing long term semantic structure in sequence-to-sequence language
model (Chen et al., 2019).
While the statistics such as mean and (co)variance are useful summaries of a probability distribution,
they cannot fully represent the underlying structure of the distribution (Fig. 1). Therefore, regular-
2
Published as a conference paper at ICLR 2020
izing or normalizing activation to follow the target distribution via statistics can be ineffective in
some cases. For instance, normalizing activations via single mean and variance such as BN and
decorrelated BN (Huang et al., 2018) can be inadequate in learning multimodal distribution (Bilen
& Vedaldi, 2017; Deecke et al., 2019). This limitation motivates us to investigate a more general
way of regularizing the distribution of activations. Instead of controlling activations via statistics,
we define the target distribution and then minimize the Wasserstein distance between the activation
distribution and the target distribution.
3	Projected error function regularization
We consider a neural network with L layers each of which has dl hidden units in layer l. Let
D = {(xi, yi)}in=1 be n training samples which are assumed to be i.i.d. samples drawn from a
probability distribution Px,y . In this paper, we consider the optimization by stochastic gradient
descent with mini-batch of b samples randomly drawn from D at each training iteration. For i-th
element of the samples, the neural network recursively computes:
hi = Φ (Wlhi-1 + bl)	(1)
where hi0 = xi ∈ Rd0 , hli ∈ Rdl is an activation in layer l, and φ is an activation function. In the
case of recurrent neural networks (RNNs), the recursive relationship takes the form of:
hti = Φ (Wle,chl-h + WinhIt-I + bl)	(2)
where hlti is an activation in layer l at time t and hl0i is an initial state. Without loss of gener-
ality, we focus on activations in layer l of feed-forward networks and the mini-batch of samples
{(xi, yi)}ib=1. Throughout this paper, we let fl be a function made by compositions of recurrent
relation in equation 1 up to layer l, i.e., hli = fl(xi), and fjl be a j-th output of fl.
This paper proposes a new regularization loss, called projected error function regularization (PER),
that encourages activations to follow the standard normal distribution. Specifically, PER directly
matches the distribution of activations to the target distribution via the Wasserstein metric. Let
μ ∈ P(Rdl) be the Gaussian measure defined as μ(A) = ^72 JA exp (-2 ∣∣ X ∣∣2) dx and Vhl =
b Pi δhl ∈ P (Rdl) be the empirical measure of hidden activations where δhl is the Dirac unit mass
on hi. Then, the Wasserstein metric of order P between μ and Vhl is defined by:
Wp(μ, Vhl) = ɑe/nf“ Ja a dp(x, y)∏(dχ,dy))	(3)
where Q(μ, Vhl) is the set of all joint probability measures on Rdl X Rdl having the first and the
second marginals μ and Vhl, respectively.
Because direct computation of equation 3 is intractable, we consider the sliced Wasserstein distance
(Rabin et al., 2011) approximating the Wasserstein distance by projecting the high dimensional
distributions onto R (Fig. 2). It is proved by that the sliced Wasserstein and the Wasserstein are
equivalent metrics (Santambrogio, 2015; Bonnotte, 2013). The sliced Wasserstein of order one
between μ and Vhl can be formulated as:
1 b
Fμθ (X)- b EIhhi,θi≤x dxdλ(θ)
b i=1
(4)
where SdlT is a unit sphere in Rdl, μθ and Vhl represent the measures projected to the angle θ,
λ is a uniform measure on Sd-1, and Fμg (x) is a cumulative distribution function of μe. Herein,
equation 4 can be evaluated through sorting hhli, θi i for each angle θ.
While we can directly use the sliced Wasserstein in equation 4 as a regularization loss, it has a com-
putational dependency on the batch dimension due to the sorting. The computational dependency
between samples may not be desirable in distributed and large-batch training that is becoming more
and more prevalent in recent years. For this reason, we remove the dependency by applying the
swι(μ,VhC = Id ]Wi(Me,VhA)dλ(θ) =/d J
3
Published as a conference paper at ICLR 2020
Figure 2: Illustration of minimization of the sliced Wasserstein distance between the current distri-
bution and the target distribution. Note that it only concerns a distance in the projected dimension.
Algorithm 1 Backward pass under PER
Input The number of Monte Carlo evaluations s, an activation for i-th sample hi, the gradient
of the loss Vhi L,a regularization coefficient λ
1:	g — 0
2:	for k — 1 to S do
3:	Sample V 〜N(0, I)
4:	θ — v/ k V ∣∣2
5:	Project hi J hhi, θ)
6:	gk J erf (hi∕√2)
7:	g J g + gkθ/s
8:	end for
9:	return Vhi L + λg * * * *
Minkowski inequality to equation 4, and obtain the regularization loss Lper(νhl ):
SW1(μ, νhl ) ≤ ɪ ɪ /	b X IFμθ (X)- 1hhi,θi≤xl dxdλ(θ)
b XZSd-I (〈hi, θierf (hh√2θi)+/Iexp (-⅜θ^ )”(θ)=Lper(Vhl)
whose gradient with respect to hli is:
VhiLper(Vhl) = bEθ〜U(Sdl-I Jerf ((θ, h"√Iɪ) θ]
(5)
(6)
where U(Sdl-1) is the uniform distribution on Sdl-1. In this paper, expectation over U(Sdl-1) is
approximated by the Monte Carlo method with s number of samples. Therefore, PER results in
simple modification of the backward pass as in Alg. 1.
Encouraging activations to follow the standard normal distribution can be motivated by the natu-
ral gradient (Amari, 1998). The natural gradient is the steepest descent direction in a Riemannian
manifold, and it is also the direction that maximizes the probability of not increasing generaliza-
tion error (Roux et al., 2008). The natural gradient is obtained by multiplying the inverse Fisher
information matrix to the gradient. In Raiko et al. (2012) and Desjardins et al. (2015), under the
independence assumption between forward and backward passes and activations between different
layers, the Fisher information matrix is a block diagonal matrix each of which block is given by:
Fl = E(χ,y)~(χ,y)
∂ L	∂L	T
∂vec(Wl) ∂vec(Wl)
x hl-1hl-1T E(x,y)
∂L ∂L T
∂al ∂al
(7)
where vec(Wl) is vectorized Wl, hl-1 = fl-1(x), and al = WIfI-I(x) + bl for X 〜x.
Since computing the inverse Fisher information matrix is too expensive to perform every iterations,
previous studies put efforts into developing reparametrization techniques, activation functions, and
4
Published as a conference paper at ICLR 2020
Figure 3: Illustration of PER and its gradient in R. Herein, PER is shifted by c so that Lper (0) - c =
0. The Huber loss is defined as h(x) = |x| - 0.5 in |x| > 1 and h(x) = x2/2 in |x| ≤ 1 and the
PseUdo-HUber loss is defined as g(χ) = √1+ x2 - 1.
regularization losses to make Fl close to I, thereby making the gradient close to the natural gradient.
For instance, making zero mean and Unit variance activations (LeCUn et al., 1998; SchraUdolph,
1998; Glorot & Bengio, 2010; Raiko et al., 2012; Wiesler et al., 2014) and decorrelated activations
(Cogswell et al., 2016; Xiong et al., 2016; HUang et al., 2018) make E hl-1hl-1T ≈ I, and these
techniqUes resUlt in faster training and improved generalization performance. In this perspective, it
is expected that PER will enjoy the same advantages by matching νhl to N (0, I).
3.1	COMPARISON TO CONTROLLING ACTIVATIONS IN Lp SPACE
In this sUbsection, we theoretically compare PER with existing methods that control activations in
Lp space. Lp(Rd0 ) is the space of measUrable fUnctions whose p-th power of absolUte valUe is
LebesgUe integrable, and norm of f ∈ Lp (Rd0) is given by:
k f kp= Z	|f(x)|pdPx(x)1/p < ∞	(8)
Rd0
where Px is the Unknown probability distribUtion generating training samples {xi}in=1. Since we
have no access to Px, it is approximated by the empirical measUre of mini-batch samples.
The Lp norm is widely Used in the literatUre for regUlarization and normalization of neUral networks.
For instance, activation norm regUlarization (Merity et al., 2017a) penalizes L2 norm of activations.
As another example, BN and its p-th order generalization Use Lp norm sUch that the norm of the
centralized activation, or pre-activation, is boUnded:
ψ(%) = Yjξ(hj) + βj,	ξ(%) = -_hij-μj 、i/p	(9)
(Pk blhkj - "j|p)
where hj is j-th unit of hi, μj = 1b Pk % is the sample mean, βj is a learnable shift parameter,
and γjl is a learnable scale parameters. Herein, we have k ξ ◦ fjl kp = 1 for any Unit j and any
empirical measure, thus k ψ ∣∣p≤k Yjξ ◦ fj kp + k βj kp= ∣γj∣ + ∣βj∣.
PER differs from Lp norm-based approaches in two aspects. First, PER can be considered as Lp
norm with adaptive order in the projected space because it is very similar to the Pseudo-Huber loss
in one-dimensional space (Fig. 3). Herein, the Pseudo-Huber loss is a smooth approximation of
the Huber loss (Huber, 1964). Therefore, PER smoothly changes its behavior between L1 and L2
norms, making the regularization loss sensitive to small values and insensitive to outliers with large
values. However, the previous approaches use predetermined order p, which makes the norm to
change insensitively in the near-zero region when p ≤ 1 or to explode in large value region when
p> 1.
Second, PER captures the interaction between hidden units by projection vectors, unlike Lp norm.
To see this, let k fl ∣p= 1 PijIhijIp = 1 PijKhi, ej)|p where {ej}；=〔 is the natural basis of
5
Published as a conference paper at ICLR 2020
Table 1: Top-1 error rates of ResNets on CIFAR-10.
Lower is better. All numbers are rounded to two dec-
imal places. Boldface indicates the minimum error. *
and ** are results from Zhang et al. (2019) and He et al.
(2016), respectively.
Model	Method	Test error
ResNet-56	Vanilla	7.21
	BN	6.95
	PER	6.72
ResNet-110	Vanilla	6.90 (7.24*)
	BN	6.62 (6.61**)
	PER	6.19
Table 2: Top-1 error rates of 11-layer
CNNs on tiny ImageNet. Lower is bet-
ter. All numbers are rounded to two
decimal places. Boldface indicates the
minimum error. Numbers in parenthe-
ses represent results in Littwin & Wolf
(2018).
Method	Test error
Vanilla	37.45 (39.22)
BN	39.22 (40.02)
VCL	(37.30)
PER	36.74
Rdl . That is, the norm computes the regularization loss, or the normalizer, of activations with the
natural basis as a projection vector. However, PER uses general projection vectors θ 〜U(Sdl-1),
capturing the interaction between hidden units when computing the regularization loss. These two
differences make PER more delicate criterion for regularizing activations in deep neural networks
than Lp norm, as we will show in the next section.
4 Experiments
This section illustrates the effectiveness of PER through experiments on different benchmark tasks
with various datasets and architectures. We compare PER with BN normalizing the first and second
moments and VCL regularizing the fourth moments. PER is also compared with L1 and L2 acti-
vation norm regularizations that behave similarly in some regions of the projected space. We then
analyze the computational complexity PER and the impact of PER on the distribution of activations.
Throughout all experiments, we use 256 number of slices and the same regularization coefficient for
the regularization losses computed in each layer.
4.1	Image classification in CIFAR-10, CIFAR- 1 00, and tiny ImageNet
We evaluate PER in image classification task in CIFAR (Krizhevsky et al., 2009) and a subset of
ImageNet (Russakovsky et al., 2015), called tiny ImageNet. We first evaluate PER with ResNet
(He et al., 2016) in CIFAR-10 and compare it with BN and a vanilla network initialized by fixup
initialization (Zhang et al., 2019). We match the experimental details in training under BN with He
et al. (2016) and under PER and vanilla with Zhang et al. (2019), and we obtain similar performances
presented in the papers. Herein, we search the regularization coefficient over { 3e-4, 1e-4, 3e-5, 1e-
5 }. Table 1 presents results of CIFAR-10 experiments with ResNet-56 and ResNet-110. PER
outperforms BN as well as vanilla networks in both architectures. Especially, PER improves the test
errors by 0.49 % and 0.71% in ResNet-56 and ResNet-110 without BN, respectively.
We also performed experiments on an 11-layer convolutional neural network (11-layer CNN) ex-
amined in VCL (Littwin & Wolf, 2018). This architecture is originally proposed in Clevert et al.
(2016). Following Littwin & Wolf (2018), we perform experiments on 11-layer CNNs with ELU,
ReLU, and Leaky ReLU activations, and match experimental details in Littwin & Wolf (2018) ex-
cept that we used 10x less learning rate for bias parameters and additional scalar bias after ReLU
and Leaky ReLU based on Zhang et al. (2019). By doing so, we obtain similar results presented in
Littwin & Wolf (2018). Again, a search space of the regularization coefficient is { 3e-4, 1e-4, 3e-5,
1e-5 }. For ReLU and Leaky ReLU in CIFAR-100, however, we additionally search { 3e-6, 1e-6,
3e-7, 1e-7 } because of divergence of training with PER in these setting. As shown in Table 3, PER
shows the best performances on four out of six experiments. In other cases, PER gives compatible
performances to BN or VCL, giving 0.16 % less than the best performances.
Following Littwin & Wolf (2018), PER is also evaluated on tiny ImageNet. In this experiment, the
number of convolutional filters in each layer is doubled. Due to the limited time and resources, we
6
Published as a conference paper at ICLR 2020
Table 3: Top-1 error rates of 11-layer CNNs on CIFAR-10 and CIFAR-100. Lower is better. All
numbers are rounded to two decimal places. Boldface indicates the minimum error. Numbers in
parentheses represent results in Littwin & Wolf (2018).
Activation	Method	CIFAR-10	CIFAR-100
ReLU	Vanilla	8.43 (8.36)	29.45 (32.80)
	BN	7.53 (7.78)	29.13 (29.10)
	VCL	7.80 (7.80)	30.30 (30.30)
	PER	7.21	29.29
LeakyReLU	Vanilla	6.73 (6.70)	26.50 (26.80)
	BN	6.38 (7.08)	26.83 (27.20)
	VCL	6.45 (6.45)	26.30 (26.30)
	PER	6.29	25.50
ELU	Vanilla	6.74 (6.98)	27.53 (28.70)
	BN	6.69 (6.63)	26.60 (26.90)
	VCL	6.26 (6.15)	25.86 (25.60)
	PER	6.42	25.73
conduct experiments only with ELU that gives good performances for PER, BN, and VCL in CIFAR.
As shown in Table 2, PER is also effective in the larger model in the larger image classification
dataset.
4.2	Language modeling in PTB and WikiText2
We evaluate PER in word-level language modeling task in PTB (Mikolov et al., 2010) and WikiText2
(Merity et al., 2017b). We apply PER to LSTM with two layers having 650 hidden units with
and without reuse embedding (RE) proposed in Inan et al. (2017) and Press & Wolf (2016), and
variational dropout (VD) proposed in Gal & Ghahramani (2016). We used the same configurations
with Merity et al. (2017a) and failed to reproduce the results in Merity et al. (2017a). Especially,
when we rescale gradient when its norm exceeds 10, we observed divergence or bad performance
(almost 2x perplexity compared to the published result). Therefore, we rescale gradient with norm
over 0.25 instead of 10 based on the default hyperparameter of the PyTorch word-level language
model1 that is also mentioned in Merity et al. (2017a). We also train the networks for 60 epochs
instead of80 epochs since validation perplexity is not improved after 60 epochs in most cases. In this
task, PER is compared with recurrent BN (RBN; Cooijmans et al., 2017) because BN is not directly
applicable to LSTM. We also compare PER with L1 and L2 activation norm regularizations. Herein,
the search space of regularization coefficients of PER, L1 regularization, and L2 regularization is
{3e-4, 1e-4, 3e-5 }. For L1 and L2 penalties in PTB, we search additional coefficients over { 1e-5,
3e-6, 1e-6, 3e-6, 1e-6, 3e-7, 1e-7 } because the searched coefficients seem to constrain the capacity.
We list in Table 4 the perplexities of methods on PTB and WikiText2. While all regularization
techniques show regularization effects by giving improved test perplexity, PER gives the best test
perplexity except LSTM and RE-VD-LSTM in the PTB dataset wherein PER is the second-best
method. We also note that naively applying RBN often reduces performance. For instance, RBN
increases test perplexity of VD-LSTM by about 5 in PTB and WikiText2.
4.3	Analysis
In this subsection, we analyze the computational complexity of PER and its impact on closeness to
the standard normal distribution in the 11-layer CNN.
1Available in https://github.com/pytorch/examples/tree/master/word_language
model
7
Published as a conference paper at ICLR 2020
Table 4: Validation and test perplexities on PTB and WikiText2. Lower is better. All numbers are
rounded to one decimal place. Boldface indicates minimum perplexity.
Model	Method	PTB		WikiText2	
		Valid	Test	Valid	Test
LSTM	Vanilla	123.2	122.0	138.9	132.7
	L1 penalty	119.6	114.1	137.7	130.0
	L2 penalty	120.5	115.2	136.0	131.1
	RBN	118.2	115.1	156.2	148.3
	PER	118.5	114.5	134.2	129.6
RE-LSTM	Vanilla	114.1	112.2	129.2	123.2
	L1 penalty	112.2	108.5	128.6	122.7
	L2 penalty	116.6	108.2	126.5	123.3
	RBN	113.6	110.4	138.1	131.6
	PER	110.0	108.5	123.2	117.4
VD-LSTM	Vanilla	84.9	81.1	99.6	94.5
	L1 penalty	84.9	81.5	98.2	92.9
	L2 penalty	84.5	81.2	98.8	94.2
	RBN	89.7	86.4	104.3	99.4
	PER	84.1	80.7	98.1	92.6
RE-VD-LSTM	Vanilla	78.9	75.7	91.4	86.4
	L1 penalty	78.3	75.1	90.5	86.1
	L2 penalty	79.2	75.8	90.3	86.1
	RBN	83.7	80.5	95.5	90.5
	PER	78.1	74.9	90.6	85.9
4.3.1	Computational complexity
PER has no additional parameters. However, BN and VCL require additional parameters for each
channel and each location and channel in every layer, respectively; that is, 2.5K and 350K number
of parameters are introduced in BN and VCL in the 11-layer CNN, respectively. In terms of time
complexity, PER has the complexity of O(bdls) for projection operation in each layer l. On the
other hand, BN and VCL have O(bdl) complexities. In our benchmarking, each training iteration
takes 0.071 seconds for a vanilla network, 0.083 seconds for BN, 0.087 for VCL, and 0.093 seconds
for PER on a single NVIDIA TITAN X. Even though PER requires slightly more training time than
BN and VCL, this disadvantage can be mitigated by computation of PER is only required in training
and PER does not have additional parameters.
4.3.2	Closeness to the standard normal distribution
To examine the effect of PER on the closeness to N(0, I), we analyze the distribution of activations
in 11-layer CNN in different perspectives. We first analyze the distribution of a single activation hlj
for some unit j and layer l (Fig. 4). We observe that changes in probability distributions between two
consecutive epochs are small under BN because BN bound the L2 norm of activations into learned
parameters. On the contrary, activation distributions under vanilla and PER are jiggled between
two consecutive epochs. However, PER prevents the variance explosion and pushes the mean to
zero. As shown in Fig. 4, while variances of νh6 under both PER and Vanilla are very high at the
beginning of training, the variance keeps moving towards one under PER during training. Similarly,
PER recovers biased means of νh3 and νh9 at the early stage of learning.
jj
To precisely evaluate closeness to the standard normal distribution, we also analyze
SW1 (N (0, I), νhl) at each epoch (Fig. 5). Herein, the sliced Wasserstein distance is computed by
approximating the Gaussian measure using the empirical measure of samples drawn from N (0, I)
as in Rabin et al. (2011). As similar to the previous result, while BN βjl = 0 and γjl = 1 at ini-
tial state gives small SW1 (N (0, I), νhl) in early stage of training, PER also can effectively control
8
Published as a conference paper at ICLR 2020
Figure 4: Evolution of distributions of νh3, νh6, and νh9 for fixed randomly drawn i, j, k on training
ij	j
set. (a)-(c) represent values (0.25, 0.5, 0.75) quantiles under PER, vanilla, and BN. (d) and (e)
represent the sample mean and the sample variance of activations. Variance is clipped at 5 for better
visualization.
(b)SW1(N(0,I),νh6)
Figure 5: Closeness to N(0, I) in the Wasserstein probability distribution space.
the distribution without such normalization. This confirms that PER prevents the distribution of
activation to be drifted away from the target distribution. 5
5 Conclusion
We proposed the regularization loss that minimizes the upper bound of the 1-Wasserstein distance
between the standard normal distribution and the distribution of activations. In image classification
and language modeling experiments, PER gives marginal but consistent improvements over methods
based on sample statistics (BN and VCL) as well as L1 and L2 activation regularization methods.
The analysis of changes in activations’ distribution during training verifies that PER can stabilize the
probability distribution of activations without normalization. Considering that the regularization loss
can be easily applied to a wide range of tasks without changing architectures or training strategies
9
Published as a conference paper at ICLR 2020
unlike BN, we believe that the results indicate the valuable potential of regularizing networks in the
probability distribution space as a future direction of research.
The idea of regularizing activations with the metric in probability distribution space can be extended
to many useful applications. For instance, one can utilize task-specific prior when determining a
target distribution, e.g., the Laplace distribution for making sparse activation. The empirical distri-
bution of activations computed by a pretrained network can also be used as a target distribution to
prevent catastrophic forgetting. In this case, the activation distribution can be regularized so that it
does not drift away from the activation distribution learned in the previous task as different from
previous approaches constrains the changes in the the function L2 space of logits (Benjamin et al.,
2019).
Acknowledgments
We would like to thank Min-Gwan Seo, Dong-Hyun Lee, Dongmin Shin, and anonymous reviewers
for the discussions and suggestions.
References
ShUn-Ichi Amari. Natural gradient works efficiently in learning. Neural Computation, 10(2):251-
276, 1998.
Martin Arjovsky, Soumith Chintala, and Leon Bottou. Wasserstein generative adversarial networks.
In International Conference on Machine Learning, 2017.
David Balduzzi, Marcus Frean, Lennox Leary, JP Lewis, Kurt Wan-Duo Ma, and Brian McWilliams.
The shattered gradients problem: If resnets are the answer, then what is the question? In Interna-
tional Conference on Machine Learning, 2017.
Ari S Benjamin, David Rolnick, and Konrad Kording. Measuring and regularizing networks in
function space. In International Conference on Learning Representations, 2019.
Hakan Bilen and Andrea Vedaldi. Universal representations: The missing link between faces, text,
planktons, and cat breeds. arXiv preprint arXiv:1701.07275, 2017.
Nils Bjorck, Carla P Gomes, Bart Selman, and Kilian Q Weinberger. Understanding batch normal-
ization. In Advances in Neural Information Processing Systems, 2018.
Nicolas Bonnotte. Unidimensional and Evolution Methods for Optimal Transportation. PhD thesis,
Paris 11, 2013.
Liqun Chen, Yizhe Zhang, Ruiyi Zhang, Chenyang Tao, Zhe Gan, Haichao Zhang, Bai Li, Ding-
han Shen, Changyou Chen, and Lawrence Carin. Improving sequence-to-sequence learning via
optimal transport. In International Conference on Learning Representations, 2019.
Djork-Ame Clevert, Thomas Unterthiner, and Sepp Hochreiter. Fast and accurate deep network
learning by exponential linear units (ELUs). In International Conference of Learning Represen-
tations, 2016.
Michael Cogswell, Faruk Ahmed, Ross Girshick, Larry Zitnick, and Dhruv Batra. Reducing overfit-
ting in deep networks by decorrelating representations. In International Conference on Learning
Representations, 2016.
Tim Cooijmans, Nicolas Ballas, CeSar Laurent, CagIar Gulcehre, and Aaron Courville. Recurrent
batch normalization. In International Conference on Learning Representations, 2017.
Lucas Deecke, Iain Murray, and Hakan Bilen. Mode normalization. In International Conference on
Learning Representations, 2019.
Guillaume Desjardins, Karen Simonyan, Razvan Pascanu, et al. Natural neural networks. In Ad-
vances in Neural Information Processing Systems, 2015.
Charlie Frogner, Chiyuan Zhang, Hossein Mobahi, Mauricio Araya, and Tomaso A Poggio. Learn-
ing with a Wasserstein loss. In Advances in Neural Information Processing Systems, 2015.
10
Published as a conference paper at ICLR 2020
Yarin Gal and Zoubin Ghahramani. A theoretically grounded application of dropout in recurrent
neural networks. In Advances in Neural Information Processing Systems, 2016.
Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N Dauphin. Convolutional
sequence to sequence learning. In International Conference on Machine Learning, 2017.
Golnaz Ghiasi, Tsung-Yi Lin, and Quoc V Le. Dropblock: A regularization method for convolu-
tional networks. In Advances in Neural Information Processing Systems, 2018.
Xavier Glorot and Yoshua Bengio. Understanding the difficulty of training deep feedforward neural
networks. In Artificial Intelligence and Statistics, 2010.
Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron C Courville. Im-
proved training of Wasserstein gans. In Advances in Neural Information Processing Systems,
2017.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Delving deep into rectifiers: Surpass-
ing human-level performance on imagenet classification. In IEEE International Conference on
Computer Vision, 2015.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-
nition. In IEEE Conference on Computer Vision and Pattern Recognition, 2016.
Sepp Hochreiter. The vanishing gradient problem during learning recurrent neural nets and problem
solutions. International Journal of Uncertainty, Fuzziness and Knowledge-Based Systems, 6(02):
107-116,1998.
Elad Hoffer, Ron Banner, Itay Golan, and Daniel Soudry. Norm matters: Efficient and accurate
normalization schemes in deep networks. In Advances in Neural Information Processing Systems,
2018.
Lei Huang, Dawei Yang, Bo Lang, and Jia Deng. Decorrelated batch normalization. In IEEE
Conference on Computer Vision and Pattern Recognition, 2018.
Lei Huang, Yi Zhou, Fan Zhu, Li Liu, and Ling Shao. Iterative normalization: Beyond standardiza-
tion towards efficient whitening. In IEEE Conference on Computer Vision and Pattern Recogni-
tion, 2019.
Peter J Huber. Robust estimation of a location parameter. The Annals of Mathematical Statistics,
pp. 73-101, 1964.
Hakan Inan, Khashayar Khosravi, and Richard Socher. Tying word vectors and word classifiers: A
loss framework for language modeling. In International Conference on Learning Representations,
2017.
Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by
reducing internal covariate shift. In International Conference on Machine Learning, 2015.
Mahdi M Kalayeh and Mubarak Shah. Training faster by separating modes of variation in batch-
normalized models. IEEE Transactions on Pattern Analysis and Machine Intelligence, 2019.
Jonas Kohler, Hadi Daneshmand, Aurelien Lucchi, Ming Zhou, Klaus Neymeyr, and Thomas
Hofmann. Towards a theoretical understanding of batch normalization. arXiv preprint
arXiv:1805.10694, 2018.
Soheil Kolouri, Phillip E. Pope, Charles E. Martin, and Gustavo K. Rohde. Sliced Wasserstein
auto-encoders. In International Conference on Learning Representations, 2019.
Alex Krizhevsky, Geoffrey Hinton, et al. Learning multiple layers of features from tiny images.
Technical report, 2009.
Yann LeCun, Leon Bottou, Genevieve B Orr, and KlaUs-Robert Muller. Efficient backprop. In
Neural Networks: Tricks of the Trade, pp. 9-50. 1998.
11
Published as a conference paper at ICLR 2020
Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint
arXiv:1607.06450, 2016.
Qianli Liao, Kenji Kawaguchi, and Tomaso Poggio. Streaming normalization: Towards simpler
and more biologically-plausible normalizations for online and recurrent learning. arXiv preprint
arXiv:1610.06160, 2016.
Etai Littwin and Lior Wolf. Regularizing by the variance of the activations’ sample-variances. In
Advances in Neural Information Processing Systems, 2018.
Stephen Merity, Bryan McCann, and Richard Socher. Revisiting activation regularization for lan-
guage rnns. In International Conference on Machine Learning, 2017a.
Stephen Merity, Caiming Xiong, James Bradbury, and Richard Socher. Pointer sentinel mixture
models. In International Conference on Learning Representations, 2017b.
Tomas Mikolov, Martin Karafiat, LUkas BUrgeL Jan Cernocky, and Sanjeev KhUdanpur. RecUr-
rent neural network based language model. In Annual Conference of the International Speech
Communication Association, 2010.
Dmytro Mishkin and Jiri Matas. All yoU need is a good init. In International Conference on Learning
Representations, 2016.
Ofir Press and Lior Wolf. Using the oUtpUt embedding to improve langUage models. arXiv preprint
arXiv:1608.05859, 2016.
JUlien Rabin, Gabriel Peyre, Julie Delon, and Marc Bernot. Wasserstein barycenter and its applica-
tion to textUre mixing. In International Conference on Scale Space and Variational Methods in
Computer Vision, 2011.
Tapani Raiko, Harri Valpola, and Yann LeCUn. Deep learning made easier by linear transformations
in perceptrons. In Artificial Intelligence and Statistics, 2012.
Nicolas L RoUx, Pierre-Antoine Manzagol, and YoshUa Bengio. TopmoUmoUte online natUral gra-
dient algorithm. In Advances in Neural Information Processing Systems, 2008.
Olga RUssakovsky, Jia Deng, Hao SU, Jonathan KraUse, Sanjeev Satheesh, Sean Ma, Zhiheng
HUang, Andrej Karpathy, Aditya Khosla, Michael Bernstein, Alexander C. Berg, and Li Fei-Fei.
ImageNet large scale visUal recognition challenge. International Journal of Computer Vision, 115
(3):211-252, 2015.
Filippo Santambrogio. Optimal transport for applied mathematicians. Birkauser, NY, 55:58-63,
2015.
Shibani SantUrkar, Dimitris Tsipras, Andrew Ilyas, and Aleksander Madry. How does batch normal-
ization help optimization? In Advances in Neural Information Processing Systems, 2018.
Andrew M Saxe, James L McClelland, and SUrya GangUli. Exact solUtions to the nonlinear dynam-
ics of learning in deep linear neUral networks. arXiv preprint arXiv:1312.6120, 2013.
Nicol SchraUdolph. Accelerated gradient descent by factor-centering decomposition. Technical
report, 1998.
Shai Shalev-Shwartz, Ohad Shamir, and Shaked Shammah. FailUres of gradient-based deep learning.
In International Conference on Machine Learning, 2017.
Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky, Ilya SUtskever, and RUslan SalakhUtdinov.
DropoUt: A simple way to prevent neUral networks from overfitting. Journal of Machine Learning
Research, 15(1):1929-1958, 2014.
Li Wan, Matthew Zeiler, Sixin Zhang, Yann Le CUn, and Rob FergUs. RegUlarization of neUral
networks Using dropconnect. In International Conference on Machine Learning, 2013.
12
Published as a conference paper at ICLR 2020
Simon Wiesler, Alexander Richard, Ralf Schluter, and Hermann Ney. Mean-normalized stochastic
gradient for large-scale deep learning. In IEEE International Conference on Acoustics, Speech
and Signal Processing, 2014.
Yuxin Wu and Kaiming He. Group normalization. In European Conference on Computer Vision,
2018.
Wei Xiong, Bo Du, Lefei Zhang, Ruimin Hu, and Dacheng Tao. Regularizing deep convolutional
neural networks with a structured decorrelation constraint. In IEEE International Conference on
Data Mining, 2016.
Greg Yang, Jeffrey Pennington, Vinay Rao, Jascha Sohl-Dickstein, and Samuel S Schoenholz. A
mean field theory of batch normalization. In International Conference on Learning Representa-
tions, 2019.
Hongyi Zhang, Yann N Dauphin, and Tengyu Ma. Fixup initialization: Residual learning without
normalization. In International Conference on Learning Representations, 2019.
Ruiyi Zhang, Changyou Chen, Chunyuan Li, and Lawrence Carin. Policy optimization as Wasser-
stein gradient flows. In International Conference on Machine Learning, 2018.
13