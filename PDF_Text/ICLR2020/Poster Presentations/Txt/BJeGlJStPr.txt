Published as a conference paper at ICLR 2020
IMPACT: Importance Weighted Asynchronous
Architectures with Clipped Target Networks
Michael Luo	Jiahao Yao
UC Berkeley	UC Berkeley
michael.luo@berkeley.edu	jiahaoyao@berkeley.edu
Richard Liaw	Eric Liang	Ion Stoica
UC Berkeley	UC Berkeley	UC Berkeley
Ab stract
The practical usage of reinforcement learning agents is often bottlenecked by
the duration of training time. To accelerate training, practitioners often turn to
distributed reinforcement learning architectures to parallelize and accelerate the
training process. However, modern methods for scalable reinforcement learning
(RL) often tradeoff between the throughput of samples that an RL agent can
learn from (sample throughput) and the quality of learning from each sample
(sample efficiency). In these scalable RL architectures, as one increases sample
throughput (i.e. increasing parallelization in IMPALA (Espeholt et al., 2018)),
sample efficiency drops significantly. To address this, we propose a new distributed
reinforcement learning algorithm, IMPACT. IMPACT extends IMPALA with three
changes: a target network for stabilizing the surrogate objective, a circular buffer,
and truncated importance sampling. In discrete action-space environments, we
show that IMPACT attains higher reward and, simultaneously, achieves up to
30% decrease in training wall-time than that of IMPALA. For continuous control
environments, IMPACT trains faster than existing scalable agents while preserving
the sample efficiency of synchronous PPO.
1	Introduction
Proximal Policy Optimization (Schulman et al., 2017) is one of the most sample-efficient on-policy
algorithms. However, it relies on a synchronous architecture for collecting experiences, which is
closely tied to its trust region optimization objective. Other architectures such as IMPALA can
achieve much higher throughputs due to the asynchronous collection of samples from workers. Yet,
IMPALA suffers from reduced sample efficiency since it cannot safely take multiple SGD steps per
batch as PPO can. The new agent, Importance Weighted Asynchronous Architectures with Clipped
Target Networks (IMPACT), mitigates this inherent mismatch. Not only is the algorithm highly
sample efficient, it can learn quickly, training 30 percent faster than IMPALA. At the same time,
we propose a novel method to stabilize agents in distributed asynchronous setups and, through our
ablation studies, show how the agent can learn in both a time and sample efficient manner.
In our paper, we show that the algorithm IMPACT realizes greater gains by striking the balance
between high sample throughput and sample efficiency. In our experiments, we demonstrate in the
experiments that IMPACT exceeds state-of-the-art agents in training time (with same hardware) while
maintaining similar sample efficiency with PPO’s. The contributions of this paper are as follows:
1.	We show that when collecting experiences asynchronously, introducing a target network
allows for a stabilized surrogate objective and multiple SGD steps per batch (Section 3.1).
2.	We show that using a circular buffer for storing asynchronously collected experiences allows
for smooth trade-off between real-time performance and sample efficiency (Section 3.2).
3.	We show that IMPACT, when evaluated using identical hardware and neural network models,
improves both in real-time and timestep efficiency over both synchronous PPO and IMPALA
(Section 4).
1
Published as a conference paper at ICLR 2020
Weights
(a) PPO
Worker
Worker
Worker
Weights
Batch
Learner
Worker
Worker
Worker
Weights
(c) IMPACT
(b) IMPALA

Figure 1: Architecture schemes for distributed PPO, IMPALA, and IMPACT. PPO aggregates worker batches
into a large training batch and the learner performs minibatch SGD. IMPALA workers asynchronously generate
data. IMPACT consists of a batch buffer that takes in worker experience and a target’s evaluation on the
experience. The learner samples from the buffer.
2 Background
Reinforcement Learning assumes a Markov Decision Process (MDP) setup defined by the tuple
(S, A, p, γ, r) where S and A represent the state and action space, γ ∈ [0, 1] is the discount factor,
and p : S × A × S → R and R : S × A → R are the transition dynamics and reward function that
models an environment.
Let π(at |st) : S X A → [0,1] denote a stochastic policy mapping that returns an action distribution
given state St ∈ S. Rolling out policy π(a∕st) in the environment is equivalent to sampling a
trajectory T 〜 P(T), where T := (s0, a。，.…，aτ-ι, ST, aτ). We can compactly define state and
state-action marginals of the trajectory distribution pπ (St) and pπ (St, at) induced by the policy
∏(at∣st).The goal for reinforcement learning aims to maximize the following objective: J(θ)=
E(st,at)〜PnPT=O YtR(st,at)].
When θ parameterizes ∏(at∣st), the policy is updated according to the Policy Gradient Theorem
(Sutton et al., 2000):
Vθ J (θ) = E(st,at)〜p∏ (∙) ∣VθlOg πθ (atlst)^l∏θ (St ,at)],
where Aπθ (st, at) is an estimator of the advantage function. The advantage estimator is usually
ʌ ʌ ʌ ʌ
defined as the 1-step TD error, Aπθ (St, at) = r(St, at) + γV (St+1) - V (St), where V (St) is an
estimation of the value function. Policy gradients, however, suffer from high variance and large
update-step sizes, oftentimes leading to sudden drops in performance.
2.1	Distributed PPO
Per iteration, Proximal Policy Optimization (PPO) optimizes policy πθ from target πθold via the
following objective function
L(θ) = Ep∏θ°kl [min }t(θ)At, clip (rt(θ), 1 — e, 1 + e) A，],
where r (θ) = ∏∏θ„))and e is the clipping hyperparameter. In addition, many PPO implementa-
tions use GAE-λ as a low bias, low variance advantage estimator for At (Schulman et al., 2015b).
PPO’s surrogate objective contains the importance sampling ratio rt(θ), which can potentially explode
if πθold is too far from πθ. (Han & Sung, 2017). PPO’s surrogate loss mitigates this with the clipping
function, which ensures that the agent makes reasonable steps. Alternatively, PPO can also be seen as
an adaptive trust region introduced in TRPO (Schulman et al., 2015a).
In Figure 1a, distributed PPO agents implement a synchronous data-gathering scheme. Before data
collection, workers are updated to πold and aggregate worker batches to training batch Dtrain. The
learner performs many mini-batch gradient steps on Dtrain. Once the learner is done, learner weights
are broadcast to all workers, who start sampling again.
2
Published as a conference paper at ICLR 2020
2.2	Importance Weighted Actor-Learner Architectures
In Figure 1b, IMPALA decouples acting and learning by having the learner threads send actions,
observations, and values while the master thread computes and applies the gradients from a queue of
learners experience (Espeholt et al., 2018). This maximizes GPU utilization and allows for increased
sample throughput, leading to high training speeds on easier environments such as Pong. As the
number of learners grows, worker policies begin to diverge from the learner policy, resulting in stale
policy gradients. To correct this, the IMPALA paper utilizes V-trace to correct the distributional shift:
t+n-1	i-1
Vst = Vφ (st)	+ X	γi-t I Y	Cj)	Pi	(ri+1 + γVφ	(Si+1)-	Vφ	(Si))
i=t	j=t
where, Vφ is the value network, ∏θ is the policy network of the master thread, μgo is the policy
network of the learner thread, and Cj = min (弓】；((j|j))) and Pi = min (ρ, jθ((?| Si))) are clipped
IS ratios.
Algorithm 11MPACT
Input: Batch size M, number of workers W, circular buffer size N, replay coefficient K, target
update frequency ttarget, weight broadcast frequency tfrequency, learning rates α and β
1:	Randomly initialize network weights (θ, w)
2:	Initialize target network (θ0,w0) J (θ,w)
3:	Create W workers and duplicate (θ, w) to each worker
4:	Initialize circular buffer C(N, K)
5:	for t = 1, .., T do
6:	Obtain batch B of size M traversed k times from C(N, K)
7:	If k = 0, evaluate B on target θ0, append target output to B
8:	Compute policy and value network gradients
Vθ J(θ) = -1 X --(——vθπθEsRlaj)	AV-GAE - ηVθKL(∏target ,∏θ)
M	max(πtarget (Sj |aj), β πworkeri (Sj |aj))
(i,j)∈B
Vw L(W) = M X(Vw (Sj)- VV-GAE(Sj))VwVw(Sj)
j
9:	Update policy and value network weights θ J θ + αtVθJ(θ),w J w - βtVwL(w)
10:	If k = K, discard batch B from C(N, K)
11:	If t ≡ 0 (mod ttarget), update target network (θ0, w0) J (θ, w)
12:	If t ≡ 0 (mod tfrequency), broadcast weights to workers
13:	end for
Worker-i
Input: Worker sample batch size S
1:	repeat
2:	Bi = 0
3:	for t = 1, ..., S do
4:	Store (St, at, rt, St+1) ran by θi in batch Bi
5:	end for
6:	Send Bi to C(N, K)
7:	If broadcasted weights exist, set θi J θ
8:	until learner finishes
3 IMPACT Algorithm
Like IMPALA, IMPACT separates sampling workers from learner workers. Algorithm 1 and Figure 1c
describe the main training loop and architecture of IMPACT. In the beginning, each worker copies
weights from the master network. Then, each worker uses their own policy to collect trajectories
3
Published as a conference paper at ICLR 2020
	PPO	Asynchronous PPO		
Invariants	'worker	πiearner	ASync SamPIing means %。*“ is out of Sync With 限.”		
Likelihood ratio	∏J∏	, θ worker	∏∕∏ I θ worker	Πj∏ E θ learner	//maxQtargef MleorneP
Effectiveness	In synchronous PPO, all rollouts are fully on-policy, hence '。林,is the same as ∏]eamer∙	Since ∏w°rker may differ per worker, using this ratio results in trust region conflicts across multiple batches.	Since 兀后„^ is updated after each batch from the worker, only a single SGD step can be taken per batch.	The IMPACT objective allows for multiple SGD steps per async batch and has a stable trust region.
Figure 2: In asynchronous PPO, there are multiple candidate policies from which the trust region
can be defined: (1) πworkeri , the policy of the worker process that produced the batch of experiences,
(2) πlearner, the current policy of the learner process, and (3) πtarget, the policy of a target network.
Introducing the target network allows for both a stable trust region and multiple SGD steps per batch
of experience collected asynchronously from workers, improving sample efficiency. Since workers
can generate experiences asynchronously from their copy of the master policy, this also allows for
good real-time efficiency.
and sends the data (st, at, rt) to the circular buffer. Simultaneously, workers also asynchronously
pull policy weights from the master learner. In the meantime, the target network occasionally syncs
with the master learner every ttarget iterations. The master learner then repeatedly draws experience
from the circular buffer. Each sample is weighted by the importance ratio of ππζ as well as clipped
with target network ratio π∏orkeri. The target network is used to provide a stable trust region (Figure
2), allowing multiple steps per batch (i.e., like PPO) even in the asynchronous setting (i.e., with the
IMPALA architecture). In the next section, we describe the design of this improved objective.
3.1	Maximal Target-Worker Clipping
PPO gathers experience from previous iteration’s policy πθold , and the current policy trains by
importance sampling off-policy experience with respect to πθ . In the asynchronous setting, worker
i’s policy, denoted as πworkeri, generates experience for the policy network πθ. The probability that
batch B comes from worker i can be parameterized as a categorical distribution i 〜D(αι,…,αn).
We include this by adding an extra expectation to the importance-sampled policy gradient objective
(IS-PG) (Jie & Abbeel, 2010):
JIS (O)= Ei 〜D(α) E(st,at)〜∏worteri --θ- At]].
πworkeri
Since each worker contains a different policy, the agent introduces a target network for stability
(Figure 2). Off-policy agents such as DDPG and DQN update target networks with a moving average.
For IMPACT, we periodically update the target network with the master network. However, training
with importance weighted ratio ∏πθ-^ can lead to numerical instability, as shown in Figure 3. To
prevent this, we clip the importance sampling ratio from worker policy,πworkeri, to target policy, πtarget:
JAIS(θ)= Ei〜D(α) E(st,at)〜∏workeri min(⅞orkeri,ρ)At
πtarget	πworkeri
=Ei~Dg) E(St,3~πworkeri max(πtargetθβπWratei) At]],
where β = P. In the experiments, we set P as a hyperparameter with P ≥ 1 and β ≤ 1.
To see why clipping is necessary, when master network’s action distribution changes significantly
over few training iterations, worker i’s policy, πworkeri , samples data outside that of target policy,
πtarget, leading to large likelihood ratios, ：：：； . The clipping function min( ：：：： ,ρ) pulls back
4
Published as a conference paper at ICLR 2020
Likelihood Ratios
∞ ∞ ∞ ∞ ∞
10080604020
PJ(OM8H U(O8 5 8powd 山
——PI-Ta询
——Pl-Worter
——Ours
Target Network Frequency Ablation
0	2000	4000	6000	8000	10000
Time (s)
2000	4000	6000	8000	10000
Time (s)
(a) Ratio ablation study.
(b) Target update frequency study.
Figure 3: Training curves of the ablation study on control benchmarks. In (a), the IMPACT objective outperforms
other possible ratio choices for the surrogate loss: Ri = πθs-, R2 = -θ^—, R3 =---------------7——π⅛--------V. In (b),
1 πtarget,	2 πworkeri,	3	max(πtarget,βπworkeri )	,
we show the target network update frequency is robust to a range of choices. We try target network update
frequency ttarget equal to the multiple (ranging from 1/16 and 16) of n = N ∙ K, the product of the size of
circular buffer and the replay times for each batch in the buffer.
large IS ratios to ρ. Figure 10 in Appendix E provides additional intuition behind the target clipping
objective. We show that the target network clipping is a lower bound of the IS-PG objective.
For ρ > 1, the clipped target ratio is larger and serves to augment advantage estimator At. This
incentivizes the agent toward good actions while avoiding bad actions. Thus, higher values of ρ
encourages the agent to learn faster at the cost of instability.
We use GAE-λ with V-trace (Han & Sung, 2019). The V-trace GAE-λ modifies the advantage
function by adding clipped importance sampling terms to the summation of TD errors:
t+n-1	i-1
AV-GAE= X (λγ尸 Y Cj δiV,
i=t	j=t
where ci = min
C	ntarget(aj |sj)
，πworkeri (aj ∣ Sj )
(we use the convention Qtj-=1t cj
1) and δi V is the importance
sampled 1-step TD error introduced in V-trace.
3.2 Circular Buffer
IMPACT uses a circular buffer (Figure 4) to emulate the mini-batch SGD used by standard PPO. The
circular buffer stores N batches that can be traversed at max K times. Upon being traversed K times,
a batch is discarded and replaced by a new worker batch.
For motivation, the circular buffer and the target network are analogous to mini-batching from
πold experience in PPO. When target network’s update frequency n = NK, the circular buffer is
equivalent to distributed PPO’s training batch when the learner samples N minibatches for K SGD
iterations.
This is in contrast to standard replay buffers, such as in ACER and APE-X, where transitions
(st, at, rt, st+1) are either uniformly sampled or sampled based on priority, and, when the buffer is
full, the oldest transitions are discarded (Wang et al., 2016; Horgan et al., 2018).
Figure 4 illustrates an empirical example where tuning K can increase training sample efficiency and
decrease training wall-clock time.
4 Evaluation
In our evaluation we seek to answer the following questions:
1.	How does the target-clipping objective affect the performance of the agents compared to
prior work? (Section 4.1)
5
Published as a conference paper at ICLR 2020
(a) Circular Buffer.
Osososos
2 11 -TT
p」BMa>a:UBo 乏α>pos-dw
PoπgNoFrameskιp-v4 BUffer Passes Tιme(s)
(b) Wall Clock-time vs. K
p」BMa>a:UeO 工φpos-dw
(c) Sample Efficiency vs. K
Figure 4: (a): The Circular Buffer in a nutshell: N and K correspond to buffer size and max times a
batch can be traversed. Old batches are replaced by worker-generated batches. (b): The performance
of IMPACT with different K in terms of time. (c): The performance of IMPACT with different K in
terms of timesteps. IMPACT can achieve greater timestep as well as time efficiency by manipulating
K. K = 2 outperforms all other settings in time and is more sample efficient than K = 1, 4, 16, 32.
2.	How does the IMPACT circular buffer affect sample efficiency and training wall-clock time?
(Section 4.2)
3.	How does IMPACT compare to PPO and IMPALA baselines in terms of sample and real-time
performance? (Section 4.3)
4.	How does IMPACT scale with respect to the number of workers? (Section 4.4)
4.1	Target Clipping Performance
We investigate the performance of the clipped-target objective relative to prior work, which includes
PPO and IS-PG based objectives. Specifically, we consider the following ratios below:
Ri =	πθ	R2 = -π—	R3
πtarget	πworkeri
π
max(πtarget ,βπworkeΓi )
For all three experiments, we truncate all three ratios with PPO’s clipping function: c(R) =
clip(R, 1 -, 1 +) and train in an asynchronous setting. Figure 4(a) reveals two important takeaways:
first, R1 suffers from sudden drops in performance midway through training. Next, R2 trains stably
but does not achieve good performance.
We theorize that R1 fails due to the target and worker network mismatch. During periods of training
where the master learner undergoes drastic changes, worker action outputs vastly differ from the
learner outputs, resulting in small action probabilities. This creates large ratios in training and
destabilizes training. We hypothesize that R2 fails due to different workers pushing and pulling the
learner in multiple directions. The learner moves forward with the most recent worker’s suggestions
without developing a proper trust region, resulting in many worker’s suggestions conflicting with
each other.
The loss function, R3 shows that clipping is necessary and can help facilitate training. By clipping the
target-worker ratio, we make sure that the ratio does not explode and destabilize training. Furthermore,
we prevent workers from making mutually destructive suggestions by having a target network provide
singular guidance.
4.1.1	Target Network Update Frequency
In Section 3.2, an analogy was drawn between PPO’s mini-batching mechanism and the circular
buffer. Our primary benchmark for target update frequency is n = N ∙ K, where N is circular buffer
size and K is maximum replay coefficient. This is the case when PPO is equivalent to IMPACT.
In Figure 4(b), we test the frequency of updates with varying orders of magnitudes of n. In general,
we find that agent performance is robust to vastly differing frequencies. However, when n = 1 〜4,
6
Published as a conference paper at ICLR 2020
Hopper-v2
Humanoid-v2
(a) Time
Hopper-v2
Humanoid-v2
(b) Timesteps
HalfCheetah-v2
Figure 5:	IMPACT outperforms baselines in both sample and time efficiency for Continuous Control
Domains: Hopper, Humanoid, HalfCheetah.
the agent does not learn. Based on empirical results, we theorize that the agent is able to train as long
as a stable trust region can be formed. On the other hand, if update frequency is too low, the agent is
stranded for many iterations in the same trust region, which impairs learning speed.
4.2	Time and Sample Efficiency with Circular Buffer
Counter to intuition, the tradeoff between time and sample efficiency when K increases is not
necessarily true. In Figure 4b and 4c, we show that IMPACT realizes greater gains by striking the
balance between high sample throughput and sample efficiency. When K = 2, IMPACT performs the
best in both time and sample efficiency. Our results reveal that wall-clock time and sample efficiency
can be optimized based on tuning values of K in the circular buffer.
4.3	Comparison with Baselines
We investigate how IMPACT attains greater performance in wall clock-time and sample efficiency
compared with PPO and IMPALA across six different continuous control and discrete action tasks.
We tested the agent on three continuous environments (Figure 5): HalfCheetah, Hopper, and Hu-
manoid on 16 CPUs and 1 GPU. The policy networks consist of two fully-connected layers of 256
units with nonlinear activation tanh. The critic network shares the same architecture as the policy
network. For consistentency, same network architectures were employed across PPO, IMPALA, and
IMPACT.
For the discrete environments (Figure 6), Pong, SpaceInvaders, and Breakout were chosen as common
benchmarks used in popular distributed RL libraries (Caspi et al., 2017; Liang et al., 2018). Additional
experiments for discrete environments are in the Appendix. These experiments were ran on 32 CPUs
and 1 GPU. The policy network consists of three 4x4 and one 11x11 conv layer, with nonlinear
activation ReLU. The critic network shares weights with the policy network. The input of the network
is a stack of four 42x42 down-sampled images of the Atari environment. The hyper-parameters for
continuous and discrete environments are listed in the Appendix B table 1 and 2 respectively.
Figures 5 and 6 show the total average return on evaluation rollouts for IMPACT, IMPALA and
PPO. We train each algorithm with three different random seeds on each environment for a total time
7
Published as a conference paper at ICLR 2020
BreakoutNo Frameskιp-v4
SpacelnvadersNoFrameski p-v4
O 2000	«00	6000	8000	100∞
Time (s)
2015105 0-51015
PJBMa¢UBa≡apos_d 山
IMPALA
IMPACT
PPO
-- --- I _ , , i
prasωtt UeaΣφpos-d山
PJeM3l±Ue3∑3pos-d 山
(a) Time
SpacelnvadersNoFrameskip-v4
PongNoFrameskip-v4
20100-10
PJeMaa UBa≡Θpo!2dw
(b) Timesteps
Figure 6:	IMPACT outperforms PPO and IMPALA in both real-time and sample efficiency for
Discrete Control Domains: Breakout, SpaceInvaders, and Pong.
of three hours. According to the experiments, IMPACT is able to train much faster than PPO and
IMPALA in both discrete and continuous domains, while preserving same or better sample efficiency
than PPO.
Our results reveal that continuous control tasks for IMPACT are sensitive to the tuple (N, K) for the
circular buffer. N = 16 and K = 20 is a robust choice for continuous control. Although higher K
inhibits workers’ sample throughput, increased sample efficiency from replaying experiences results
in an overall reduction in training wall-clock time and higher reward. For discrete tasks, N = 1
and K = 2 works best. Empirically, agents learn faster from new experience than replaying old
experience, showing how exploration is crucial to achieving high asymptotic performance in discrete
enviornments.
4.4 IMPACT Scalability
Figure 7 shows how IMPACT’s performance scales relative to the number of workers. More workers
means increased sample throughput, which in turn increases training throughput (the rate that learner
consumes batches). With the learner consuming more worker data per second, IMPACT can attain
better performance in less time. However, as number of workers increases, observed increases in
performance begin to decline.
5 Related Work
Distributed RL architectures are often used to accelerate training. Gorila (Nair et al., 2015) and
A3C (Mnih et al., 2016) use workers to compute gradients to be sent to the learner. A2C (Mnih
et al., 2016) and IMPALA (Espeholt et al., 2018) send experience tuples to the learner. Distributed
replay buffers, introduced in ACER (Wang et al., 2016) and Ape-X (Horgan et al., 2018), collect
worker-collected experience and define an overarching heuristic for learner batch selection. IMPACT
is the first to fully incorporate the sample-efficiency benefits of PPO in an asynchronous setting.
Surreal PPO (Fan et al., 2018) also studies training with PPO in the asynchronous setting, but do
not consider adaptation of the surrogate objective nor IS-correction. Their use of a target network for
broadcasting weights to workers is also entirely different from IMPACT’s. Consequently, IMPACT is
able to achieve better results in both real-time and sample efficiency.
8
Published as a conference paper at ICLR 2020
HaIfCheetah-VZ
20
100∞
βo∞
6000
40∞
2000
P-IeMəɑueə 工 əposo,w
P-IeMətt:ueə E əpowd山
1510
——1
——2
——4
——8
—16
—32
PongNoFrameskιp-v4
——1
——2
——4
β
—16
—32
o 2ooo 4000	6000 βo∞ IoooO
Time (s)
(a)	Continuous environment.
0	100	2∞	3∞	400	500	6∞
Time (s)
(b)	Discrete environment.
Figure 7:	Performance of IMPACT with respect to the number of workers in both continuous and
discrete control tasks
Off-policy methods, including DDPG and QProp, utilize target networks to stabilize learning the Q
function (Lillicrap et al., 2015; Gu et al., 2016). This use of a target network is related but different
from IMPACT, which uses the network to define a stable trust region for the PPO surrogate objective.
6 Conclusion
In conclusion, we introduce IMPACT, which extends PPO with a stabilized surrogate objective for
asynchronous optimization, enabling greater real-time performance without sacrificing timestep
efficiency. We show the importance of the IMPACT objective to stable training, and show it can
outperform tuned PPO and IMPALA baselines in both real-time and timestep metrics.
9
Published as a conference paper at ICLR 2020
References
Joshua Achiam. Openai Spinning Up. https://spinningup.openai.com/en/latest/
spinningup/bench.html, November 2018.
Itai Caspi, Gal Leibovich, Gal Novik, and Shadi Endrawis. Reinforcement Learning Coach, December
2017. URL https://doi.org/10.5281/zenodo.1134899.
Lasse Espeholt, Hubert Soyer, Remi Munos, Karen Simonyan, Volodymir Mnih, Tom Ward, Yotam
Doron, Vlad Firoiu, Tim Harley, Iain Dunning, et al. IMPALA: Scalable Distributed Deep-RL
with Importance Weighted Acto-Learner Architectures. arXiv preprint arXiv:1802.01561, 2018.
Linxi Fan, Yuke Zhu, Jiren Zhu, Zihua Liu, Orien Zeng, Anchit Gupta, Joan Creus-Costa, Silvio
Savarese, and Li Fei-Fei. SURREAL: Open-Source Reinforcement Learning Framework and
Robot Manipulation Benchmark. In Conference on Robot Learning, pp. 767-782, 2018.
Shixiang Gu, Timothy Lillicrap, Zoubin Ghahramani, Richard E Turner, and Sergey Levine. Q-Prop:
Sample-Efficient Policy Gradient with An Off-Policy Critic . arXiv preprint arXiv:1611.02247,
2016.
Seungyul Han and Youngchul Sung. AMBER: Adaptive Multi-Batch Experience Replay for Continu-
ous Action Control. arXiv preprint arXiv:1710.04423, 2017.
Seungyul Han and Youngchul Sung. Dimension-Wise Importance Sampling Weight Clipping for
Sample-Efficient Reinforcement Learning. arXiv preprint arXiv:1905.02363, 2019.
Dan Horgan, John Quan, David Budden, Gabriel Barth-Maron, Matteo Hessel, Hado Van Hasselt,
and David Silver. Distributed Prioritized Experience Replay. arXiv preprint arXiv:1803.00933,
2018.
Tang Jie and Pieter Abbeel. On a Connection between Importance Sampling and the Likelihood
Ratio Policy Gradient. pp. 1000-1008, 2010.
Eric Liang, Richard Liaw, Robert Nishihara, Philipp Moritz, Roy Fox, Ken Goldberg, Joseph E.
Gonzalez, Michael I. Jordan, and Ion Stoica. RLlib: Abstractions for Distributed Reinforcement
Learning. In International Conference on Machine Learning (ICML), 2018.
Timothy P Lillicrap, Jonathan J Hunt, Alexander Pritzel, Nicolas Heess, Tom Erez, Yuval Tassa,
David Silver, and Daan Wierstra. Continuous Control with Deep Reinforcement Learning. arXiv
preprint arXiv:1509.02971, 2015.
Volodymyr Mnih, Adria Puigdomenech Badia, Mehdi Mirza, Alex Graves, Timothy Lillicrap, Tim
Harley, David Silver, and Koray Kavukcuoglu. Asynchronous Methods for Deep Reinforcement
Learning. In International conference on machine learning, pp. 1928-1937, 2016.
Arun Nair, Praveen Srinivasan, Sam Blackwell, Cagdas Alcicek, Rory Fearon, Alessandro De Maria,
Vedavyas Panneershelvam, Mustafa Suleyman, Charles Beattie, Stig Petersen, et al. Massively
Parallel Methods for Deep Reinforcement Learning. arXiv preprint arXiv:1507.04296, 2015.
John Schulman, Sergey Levine, Pieter Abbeel, Michael Jordan, and Philipp Moritz. Trust Region
Policy Optimization. In International conference on machine learning, pp. 1889-1897, 2015a.
John Schulman, Philipp Moritz, Sergey Levine, Michael Jordan, and Pieter Abbeel. High-Dimensional
Continuous Control using Generalized Advantage Estimation. arXiv preprint arXiv:1506.02438,
2015b.
John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. Proximal Policy
Optimization Algorithms. arXiv preprint arXiv:1707.06347, 2017.
Richard S Sutton, David A McAllester, Satinder P Singh, and Yishay Mansour. Policy Gradient
Methods for Reinforcement Learning with Function Approximation. In Advances in neural
information processing systems, pp. 1057-1063, 2000.
10
Published as a conference paper at ICLR 2020
Yuval Tassa, Yotam Doron, Alistair Muldal, Tom Erez, Yazhe Li, Diego de Las Casas, David Budden,
Abbas Abdolmaleki, Josh Merel, Andrew Lefrancq, et al. Deepmind Control Suite. arXiv preprint
arXiv:1801.00690, 2018.
Ziyu Wang, Victor Bapst, Nicolas Heess, Volodymyr Mnih, Remi Munos, Koray Kavukcuoglu,
and Nando de Freitas. Sample Efficient Actor-Critic with Experience Replay. arXiv preprint
arXiv:1611.01224, 2016.
A Additional Experiments
680
E
S 5000
；4000
CO
S
2 3∞0
φ
3 2000
<Λ
5.
∣JJ 180
0
0	2000	4000	β000	8000	10000
Time (s)
BeamRlderNOFrarneSklp-V4
0	20∞	40∞	6∞0	8000	1 0000
Time (s)
GravitarNoFrameski p-v4
——IMPALA
——IMPACT
——PPO
QbertN oFrameskip-v4
---IM>M.A
Timesteps
(a) Time
BeamRiderNoFrameskip-v4
(b) Timesteps
Figure 8:	IMPACT, PPO and IMPALA wallclock time and sample efficiency for Discrete Control
Domains: Qbert, BeamRider, and Gravitar.
B Hyper parameters for All Environments
B.1 Discrete Environments
Hyperparameters	IMPACT	IMPALA	PPO
Clip Parameter	0.3	—	0.1
Entropy Coeff	0.01	0.01	0.01
Grad Clipping	10.0	40.0	—
Discount (γ)	0.99	0.99	0.99
Lambda (λ)	0.995	—	0.995
Learning Rate	1.0 ∙ 10-4	1.0 ∙ 10-4	5.0 ∙ 10-5
Minibatch Buffer Size (N)	4	—	—
Num SGD Iterations (K)	2	—	2
Sample Batch Size	50	50	100
Train Batch Size	500	500	5000
SGD Minibatch Size	—	—	500
KL Coeff	0.0	—	0.5
KL Target	0.01	—	0.01
Value Function Coeff	1.0	0.5	1.0
Target-Worker Clipping (ρ)	2.0	—	—
Table 1: Hyperparameters for Discrete Environments.
11
Published as a conference paper at ICLR 2020
B.2 Continuous Environments
Hyperparameters	IMPACT	IMPALA	PPO
Clip Parameter	0.4	—	0.3
Entropy Coeff	0.0	0.0	0.0
Grad Clipping	0.5	0.5	—
Discount (γ)	0.995	0.995	0.99
Lambda (λ)	0.995	—	0.995
Learning Rate	3.0 ∙ 10-4	1.5 ∙ 10-5	3.0 ∙ 10-4
Minibatch Buffer Size (N)	16	—	—
Num SGD Iterations1(K)	20	—	20
Sample Batch Size	1024	1024	1024
Train Batch Size	32768	32768	163840
SGD Minibatch Size	—	—	32768
KL Coeff	1.0	—	1.0
KL Target	0.04	—	0.01
Value Function Coeff2 3	1.0	0.5	1.0
Target-Worker Clipping (ρ)	2.0	—	—
Table 2: Hyperparameters for Continuous Control Environments
B.3 Hyperparameter Budget
Listed below was the grid search we used for each algorithm to obtain optimal hyperparameters.
Optimal values were found via grid searching on each hyperparameter separately. We found that
IMPACT’s optimal hyperparameter values tend to hover close to either IMPALA’s or PPO’s, which
greatly mitigated IMPACT’s budget.
B.3.1 Discrete Environment Search
Hyperparameters	IMPACT	IMPALA	PPO
Clip Parameter	[0.1,0.2, 0.3]	—	[0.1, 0.2, 0.3, 0.4]
Grad Clipping	[10, 20, 40]	[2.5, 5, 10, 20, 40, 80]	—
Learning Rate (10-4)	[0.5, 1.0,3.0]	[0.1, 0.3, 0.5, 0.8, 1.0, 3.0, 5.0]	[0.5, 1.0, 3.0, 5.0, 8.0]
Minibatch Buffer Size (N)	[2,4,8, 16]	—	—
Num SGD Iterations (K)	[1,2,4]	—	[1,2,4,8]
Train Batch Size	—	—	[1000, 2500, 5000, 10000]
Value Function Coeff	[0.5, 1.0, 2.0]	[0.25, 0.5, 1.0, 2.0]	[0.25, 0.5, 1.0, 2.0]
# of Runs	19	17	21
Table 3: Hyperparameter Search for Discrete Environments
1ForHalfCheetah-v2, IMPACT and PPO Num SGD Iterations (K) is 32.
2For HalfCheetah-v2, IMPACT Value Function Coeff is 0.5.
3IMPALA was difficult to finetune due to unstable runs.
12
Published as a conference paper at ICLR 2020
B.4 Continuous Environment Search
Hyperparameters	IMPACT	IMPALA	PPO
Clip Parameter	[0.2, 0.3, 0.4]	—	[0.1, 0.2, 0.3, 0.4]
Grad Clipping	[0.5,1.0, 5.0]	[0.1, 0.25, 0.5, 1.0, 5.0, 10.0]	—
Learning Rate (10-4)	[1.0,3.0, 5.0]	[0.1, 0.15, 0.3, 0.5, 0.8, 1.0, 3.0, 5.0] 3	[1.0, 3.0, 5.0]
Minibatch Buffer Size (N)	[4,8,16]	—	—
Num SGD Iterations (K)	[20,26,32]	—	[20,26,32]
Train Batch Size	—	—	[65536, 98304, 131072, 163840]
KL Target	[0.01, 0.02, 0.04]	—	[0.01, 0.02, 0.04]
Value Function Coeff	[0.5, 1.0, 2.0]	[0.5, 1.0, 2.0]	[0.5, 1.0, 2.0]
# of Runs	21	17	20
Table 4: Hyperparameter Search for Continuous Environments
C IMPALA TO IMPACT
From IMPALA to IMPACT
10000
——IMPALA
0	2000	4000	6000	8000	10000
Time (s)
Figure 9:	IMPALA to IMPACT: Incrementally Adding PPO Objective, Replay, and Target-Worker
Clipping to IMPALA. The experiments are done on the HalfCheetah-v2 gym environment.
In Figure 9, we gradually add components to IMPALA until the agent is equivalent to IMPACT’s.
Starting from IMPALA, we gradually add PPO’s objective function, circular replay buffer, and
target-worker clipping. In particular, IMPALA with PPO’s objective function and circular replay
buffer is equivalent to an asynchronous-variant of PPO (APPO). APPO fails to perform as well as
synchronous distributed PPO, since PPO is an on-policy algorithm.
D IMPALA in Continuous Environments
In Figure 6, IMPALA performs substantially worse than other agents in continuous environments.
We postulate that IMPALA suffers from low asymptotic performance here since its objective is an
importance-sampled version of the Vanilla Policy Gradient (VPG) objective, which is known to
suffer from high variance and large update-step sizes. We found that for VPG, higher learning rates
encourage faster learning in the beginning but performance drops to negative return later in training.
13
Published as a conference paper at ICLR 2020
In Appendix B, for IMPALA, we heavily tuned on the learning rate, finding that small learning rates
stabilize learning at the cost of low asymptotic performance. Prior work also reveals the agents that
use VPG fail to attain good performance in non-trivial continuous tasks (Achiam, 2018). Our results
with IMPALA reaches similar performance compared to other VPG-based algorithms. The closest
neighbor to IMPALA, A3C uses workers to compute gradients from the VPG objective to send to the
learner thread. A3C performs well in InvertedPendulum yet flounders in continuous environments
(Tassa et al., 2018).
Action Distributions
Figure 10: Likelihood ratio rt (θ) for different objective functions, including PPO’s. We assume a diagonal
Gaussian policy for our policy. Left: Corresponding one dimensional action distributions for Worker i, Target,
and Master Learner; Right: Ratio values graphed as a function of possible action values. IMPACT with PPO
clipping is a lower bound of PPO.
Likelihood Ratios w.r.t Different Objectives
E The intuition of the objective
The following ratios represent the objective functions for different ablation studies. In the plots
(Figure 10), We set the advantage function to be one, i.e. At = 1.
•	IS ratio: -π^- At
πWorkeri
•	IMPACT target: min (πw⅛, P)	At
πtarget	πWorkeri
•	PPO e-clip: min (7∏-At, clip(7∏-, 1 - e, 1 + e)Aj
πWorkeri	πWorkeri
•	IMPACTtarget e-clip: min (min (F,ρ)	At, clip (min (F,ρ)三,1 - e, 1 + e) At)
πtarget	πWorkeri	πtarget	πWorkeri
According to Figure 10, IS ratio is large When πWorkeri assigns loW probability. IMPACT target e-clip
is a loWer bound of the PPO e-clip. In an distributed asynchronous setting, the trust region suffers
from larger variance stemming from off-policy data. IMPACT target e-clip ratio mitigates this by
encouraging conservative and reasonable policy-gradient steps.
14