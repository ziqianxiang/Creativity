Published as a conference paper at ICLR 2020
Genesis: Generative Scene Inference and
Sampling with Object-Centric Latent
Representations
Martin Engelcke*▽, Adam R. Kosiorek▽△,OiWi Parker Jones▽ & Ingmar Posner▽
▽ Applied AI Lab, University of Oxford; δ Dept. of Statistics, University of Oxford
Ab stract
Generative latent-variable models are emerging as promising tools in robotics and
reinforcement learning. Yet, even though tasks in these domains typically involve
distinct objects, most state-of-the-art generative models do not explicitly capture
the compositional nature of visual scenes. Two recent exceptions, monet and
iodine, decompose scenes into objects in an unsupervised fashion. Their under-
lying generative processes, however, do not account for component interactions.
Hence, neither of them allows for principled sampling of novel scenes. Here we
present genesis, the first object-centric generative model of rendered 3D scenes
capable of both decomposing and generating scenes by capturing relationships
between scene components. genesis parameterises a spatial gmm over images
which is decoded from a set of object-centric latent variables that are either in-
ferred sequentially in an amortised fashion or sampled from an autoregressive
prior. We train genesis on several publicly available datasets and evaluate its
performance on scene generation, decomposition, and semi-supervised learning.
1	Introduction
Task execution in robotics and reinforcement learning (rl) requires accurate perception of and rea-
soning about discrete elements in an environment. While supervised methods can be used to identify
pertinent objects, it is intractable to collect labels for every scenario and task. Discovering structure
in data—such as objects—and learning to represent data in a compact fashion without supervision
are long-standing problems in machine learning (Comon, 1992; Tishby et al., 2000), often formu-
lated as generative latent-variable modelling (e.g. Kingma & Welling, 2014; Rezende et al., 2014).
Such methods have been leveraged to increase sample efficiency in rl (Gregor et al., 2019) and other
supervised tasks (van Steenkiste et al., 2019). They also offer the ability to imagine environments
for training (Ha & Schmidhuber, 2018). Given the compositional nature of visual scenes, sepa-
rating latent representations into object-centric ones can facilitate fast and robust learning (Watters
et al., 2019a), while also being amenable to relational reasoning (Santoro et al., 2017). Interestingly,
however, state-of-the-art methods for generating realistic images do not account for this discrete
structure (Brock et al., 2018; Parmar et al., 2018).
As in the approach proposed in this work, human visual perception is not passive. Rather it involves
a creative interplay between external stimulation and an active, internal generative model of the
world (Rao & Ballard, 1999; Friston, 2005). That this is necessary can be seen from the physiology
of the eye, where the small portion of the visual field that can produce sharp images (fovea centralis)
motivates the need for rapid eye movements (saccades) to build up a crisp and holistic percept of
a scene (Wandell, 1995). In other words, what we perceive is largely a mental simulation of the
external world. Meanwhile, work in computational neuroscience tells us that visual features (see,
e.g., Hubel & Wiesel, 1968) can be inferred from the statistics of static images using unsupervised
learning (Olshausen & Field, 1996). Experimental investigations further show that specific brain
areas (e.g. LO) appear specialised for objects, for example responding more strongly to common
objects than to scenes or textures, while responding only weakly to movement (cf. MT) (e.g., Grill-
Spector & Malach, 2004).
* Corresponding author: martin@robots.ox.ac.uk
1
Published as a conference paper at ICLR 2020
In this work, we are interested in probabilistic generative models that can explain visual scenes
compositionally via several latent variables. This corresponds to fitting a probability distribution
pθ (x) with parameters θ to the data. The compositional structure is captured by K latent variables
so that pθ(x) = Jpθ(X | zi：K)pθ(zi：K) dzi：K. Models from this family can be optimised using
the variational auto-encoder (vae) framework (Kingma & Welling, 2014; Rezende et al., 2014), by
maximising a variational lower bound on the model evidence (Jordan et al., 1999). Burgess et al.
(2019) and Greff et al. (2019) recently proposed two such models, monet and iodine, to decom-
pose visual scenes into meaningful objects. Both works leverage an analysis-by-synthesis approach
through the machinery of vaes (Kingma & Welling, 2014; Rezende et al., 2014) to train these mod-
els without labelled supervision, e.g. in the form of ground truth segmentation masks. However, the
models have a factorised prior that treats scene components as independent. Thus, neither provides
an object-centric generation mechanism that accounts for relationships between constituent parts of
a scene, e.g. two physical objects cannot occupy the same location, prohibiting the component-wise
generation of novel scenes and restricting the utility of these approaches. Moreover, monet embeds
a convolutional neural network (cnn) inside of an recurrent neural network (rnn) that is unrolled
for each scene component, which does not scale well to more complex scenes. Similarly, iodine
utilises a cnn within an expensive, gradient-based iterative refinement mechanism.
Therefore, we introduce generative scene inference and sampling (genesis) which is, to the best
of our knowledge, the first object-centric generative model of rendered 3D scenes capable of both de-
composing and generating scenes1. Compared to previous work, this renders genesis significantly
more suitable for a wide range of applications in robotics and reinforcement learning. genesis
achieves this by modelling relationships between scene components with an expressive, autoregres-
sive prior that is learned alongside a sequential, amortised inference network. Importantly, sequen-
tial inference is performed in low-dimensional latent space, allowing all convolutional encoders and
decoders to be run in parallel to fully exploit modern graphics processing hardware.
We conduct experiments on three canonical and publicly available datasets: coloured Multi-dSprites
(Burgess et al., 2019), the GQN dataset (Eslami et al., 2018), and ShapeStacks (Groth et al., 2018).
The latter two are simulated 3D environments which serve as testing grounds for navigation and
object manipulation tasks, respectively. We show both qualitatively and quantitatively that in con-
trast to prior art, genesis is able to generate coherent scenes while also performing well on scene
decomposition. Furthermore, we use the scene annotations available for ShapeStacks to show the
benefit of utilising general purpose, object-centric latent representations from genesis for tasks
such as predicting whether a block tower is stable or not.
Code and models are available at https://github.com/applied-ai-lab/genesis.
2	Related Work
Structured Models Several methods leverage structured latent variables to discover objects in im-
ages without direct supervision. cst-vae (Huang & Murphy, 2015), air (Eslami et al., 2016),
sqair (Kosiorek et al., 2018), and spair (Crawford & Pineau, 2019) use spatial attention to par-
tition scenes into objects. tagger (Greff et al., 2016), nem (Greff et al., 2017), and r-nem (van
Steenkiste et al., 2018a) perform unsupervised segmentation by modelling images as spatial mixture
models. scae (Kosiorek et al., 2019) discovers geometric relationships between objects and their
parts by using an affine-aware decoder. Yet, these approaches have not been shown to work on more
complex images, for example visual scenes with 3D spatial structure, occlusion, perspective distor-
tion, and multiple foreground and background components as considered in this work. Moreover,
none of them demonstrate the ability to generate novel scenes with relational structure.
While Xu et al. (2018) present an extension of Eslami et al. (2016) to generate images, their method
only works on binary images with a uniform black background and assumes that object bounding
boxes do not overlap. In contrast, we train genesis on rendered 3D scenes from Eslami et al. (2018)
and Groth et al. (2018) which feature complex backgrounds and considerable occlusion to perform
both decomposition and generation. Lastly, Xu et al. (2019) use ground truth pixel-wise flow fields
as a cue for segmenting objects or object parts. Similarly, genesis could be adapted to also leverage
temporal information which is a promising avenue for future research.
1We use the terms “object” and “scene component” synonymously in this work.
2
Published as a conference paper at ICLR 2020
monet & iodine While this work is most directly related to MONet (Burgess et al., 2019) and
iodine (Greff et al., 2019), it sets itself apart by introducing a generative model that captures rela-
tions between scene components with an autoregressive prior, enabling the unconditional generation
of coherent, novel scenes. Moreover, monet relies on a deterministic attention mechanism rather
than utilising a proper probabilistic inference procedure. This implies that the training objective
is not a valid lower bound on the marginal likelihood and that the model cannot perform density
estimation without modification. Furthermore, this attention mechanism embeds a cnn in a rnn,
posing an issue in terms of scalability. These two considerations do not apply to iodine, but iodine
employs a gradient-based, iterative refinement mechanism which expensive both in terms of com-
putation and memory, limiting its practicality and utility. Architecturally, genesis is more similar
to monet and does not require expensive iterative refinement as iodine. Unlike monet, though,
the convolutional encoders and decoders in genesis can be run in parallel, rendering the model
computationally more scalable to inputs with a larger number of scene components.
Adversarial Methods A few recent works have proposed to use an adversary for scene segmenta-
tion and generation. Chen et al. (2019) and Bielski & Favaro (2019) segment a single foreground
object per image and Arandjelovic & Zisserman (2019) segment several synthetic objects SUPerim-
posed on natural images. Azadi et al. (2019) combine two objects or an object and a background
scene in a sensible fashion and van Steenkiste et al. (2018b) can generate scenes with a potentially
arbitrary nUmber of components. In comparison, genesis performs both inference and generation,
does not exhibit the instabilities of adversarial training, and offers a probabilistic formUlation which
captUres Uncertainty, e.g. dUring scene decomposition. FUrthermore, the complexity of genesis
increases with O(K), where K is the nUmber of components, as opposed to the O(K2) complexity
of the relational stage in van Steenkiste et al. (2018b).
Inverse Graphics A range of works formUlate scene Understanding as an inverse graphics problem.
These well-engineered methods, however, rely on scene annotations for training and lack probabilis-
tic formUlations. For example, WU et al. (2017b) leverage a graphics renderer to decode a strUctUred
scene description which is inferred by a neUral network. Romaszko et al. (2017) pUrsUe a similar
approach bUt instead make Use of a differentiable graphics render. WU et al. (2017a) fUrther employ
different physics engines to predict the movement of billiard balls and block towers.
3	Genesis: Generative S cene Inference and Sampling
In this section, we first describe the generative model of genesis and a simplified variant called
genesis-s. This is followed by the associated inference procedUres and two possible learning
objectives. genesis is illUstrated in FigUre 1 and FigUre 2 shows the graphical model in comparison
to alternative methods. An illUstration of genesis-s is inclUded Appendix B.1, FigUre 5.
Generative model Let x ∈ RH ×W ×C be an image. We formUlate the problem of image genera-
tion as a spatial GaUssian mixtUre model (GMM). That is, every GaUssian component k = 1, . . . , K
represents an image-sized scene component xk ∈ RH×W ×C. K ∈ N+ is the maximUm nUmber
of scene components. The corresponding mixing probabilities πk ∈ [0, 1]H×W indicate whether
the component is present at a location in the image. The mixing probabilities are normalised across
scene components, i.e. ∀i,j Pk πi,j,k = 1, and can be regarded as spatial attention masks. Since
there are strong spatial dependencies between components, we formUlate an aUtoregressive prior
distribUtion over mask variables zkm ∈ RDm which encode the mixing probabilities πk, as
KK
pθ(ZmK) = Y pθ(zm | Zmk-I) = Y pθ(Zm | Uk)lUk = Rθ(Zm-1,uk-1).	⑴
k=1	k=1
The dependence on previoUs latents Z1m:k-1 is implemented via an RNN Rθ with hidden state uk.
Next, we assUme that the scene components xk are conditionally independent given their spatial allo-
cation in the scene. The corresponding conditional distribUtion over component variables Zck ∈ RDc
which encode the scene components xk factorises as follows,
K
pθ (Zc1:K | Z1m:K) = Y pθ (Zck | Zkm) .	(2)
k=1
3
Published as a conference paper at ICLR 2020
Figure 1: genesis illustration. Given an image x, an encoder and an RNN compute the mask latents
Zm. These are decoded to obtain the mixing probabilities ∏k. The image and individual masks are
concatenated to infer the component latents Zk from which the scene components Xk are decoded.
Now, the image likelihood is given by a mixture model,
K
P(X | ZzmK,z1:K) = X Tnk Pθ (xk | Zk),	⑶
k = 1
where the mixing probabilities ∏k = ∏θ (Zmk) are created via a stick-breaking process (SBP) adapted
from Burgess et al. (2019) as follows, slightly overloading the ∏ notation,
∏1 = ∏θ(zm),	∏k = (l - X n) ∏θ(zm),	∏K = (l - X nJ .	(4)
Note that this step is not necessary for our model and instead one could use a Softmax to normalise
masks as in Greff et al. (2019).
Finally, omitting subscripts, the full generative model can be written as
Pθ(x) = ff Pθ(x | zc, zm)Pθ(zc | zm)Pθ(zm) dzm dzc ,	(5)
where We assume that all conditional distributions are Gaussian. The Gaussian components of the
image likelihood have a fixed scalar standard deviation σ2. We refer to this model as genesis. To
investigate whether separate latents for masks and component appearances are necessary for decom-
position, we consider a simplified model, GENESIS-S, with a single latent variable per component,
K
Pθ(zi：K) = ɪɪpθ(Zk | zi:k-i).	(6)
k=1
In this case, Zk takes the role of Zk in Equation (3) and of Zm in Equation (4), while Equation (2) is
no longer necessary.
Approximate posterior We amortise inference by using an approximate posterior distribution
with parameters φ and a structure similar to the generative model. The full approximate posterior
reads as follows,
qφ(z1.K, zmK | x) = qφ(zmK | χ) qφ(zc:K | χ, zmK), where
K	K	⑺
qφ(zmK I x) = ∏ qφ(zm | x, zmk-1),and q°(zc：K | x,zmK) = ∏ qφ(zk | x,zmk),
k=1	k=1
with the dependence on Zmk-I realised by an RNN Rφ. The RNN could, in principle, be shared with
the prior, but we have not investigated this option. All conditional distributions are Gaussian. For
GENESIS-S, the approximate posterior takes the form q@(zi：K I x) = QK=I qφ(zk I x, zi：k—i).
4
Published as a conference paper at ICLR 2020
(a) VAE (b) MONET
Figure 2: Graphical model of GENESIS compared to related methods. N denotes the number of
refinement iterations in iodine. Unlike the other methods, both genesis variants explicitly model
dependencies between scene components.
Learning GENESIS can be trained by maximising the evidence lower bound (ELB O) on the log-
marginal likelihood logpθ(x), given by
LELBO (x) = Eqφ (zc,zm |x)
lo P(X | zc,zm)pθ(zc | zm)pθ(Zm)一
_ °g	qφ(zc | zm, x)qφ(zm | x)	_
(8)
=Eqφ(zc,zm∣x)[logPθ(x | zc, zm)] - KL (qφ(zc, zm | x) || Pθ(zc, Zm)) .	(9)
However, this often leads to a strong emphasis on the likelihood term, while allowing the marginal
approximate posterior qφ(z) = Epdata(x) [qφ(z | x)] to drift away from the prior distribution, hence
increasing the kl-divergence. This also decreases the quality of samples drawn from the model.
To prevent this behaviour, we use the Generalised elbo with Constrained Optimisation (geco)
objective from Rezende & Viola (2018) instead, which changes the learning problem to minimising
the KL-divergence subject to a reconstruction constraint. Let C ∈ R be the minimum allowed
reconstruction log-likelihood, geco then uses Lagrange multipliers to solve the following problem,
θ?, φ? = arg min KL (qφ(zc, zm | x) || Pθ(zc, zm))
θ,φ
such that Eqφ(zc,zm∣χ)[logP(x | zc,zm)] ≥ C.
(10)
4 Experiments
In this section, we present qualitative and quantitative results on coloured Multi-dSprites (Burgess
et al., 2019), the “rooms-ring-camera” dataset from GQN (Eslami et al., 2018) and the ShapeStacks
dataset (Groth et al., 2018). We use an image resolution of 64-by-64 for all experiments. The number
of components is set to K = 5, K = 7, and K = 9 for Multi-dSprites, GQN, and ShapeStacks,
respectively. More details about the datasets are provided in Appendix A. Implementation and
training details of all models are described in Appendix B.
4.1	Component-Wise Scene Generation
Unlike previous works, genesis has an autoregressive prior to capture intricate dependencies be-
tween scene components. Modelling these relationships is necessary to generate coherent scenes.
For example, different parts of the background need to fit together; we do not want to create com-
ponents such as the sky several times; and several physical objects cannot be in the same location.
genesis is able to generate novel scenes by sequentially sampling scene components from the prior
and conditioning each new component on those that have been generated during previous steps.
After training genesis and monet on the GQN dataset, Figure 3 shows the component-by-
component generation process of novel scenes, corresponding to drawing samples from the respec-
tive prior distributions. More examples of generated scenes are shown in Figure 6, Appendix D.
With genesis, either an object in the foreground or a part of the background is generated at every
step and these components fit together to make up a semantically consistent scene that looks sim-
ilar to the training data. monet, though, generates random artefacts at every step that do not form
a sensible scene. These results are striking but not surprising: monet was not designed for scene
generation. The need for such a model is why we developed genesis.
5
Published as a conference paper at ICLR 2020
9 08 Q-H- S-S①U①0
寸 9ZL ∩=H-ij① NOIAl
Figure 3: Component-by-component scene generation with genesis and monet after training on the
GQN dataset. The first pane shows the final scene and the subsequent panes show the components
generated at each step. genesis first generates the sky and the floor, followed by individual objects,
and finally distinct parts of the wall in the background to compose a coherent scene. monet, in
contrast, only generates incomplete components that do not fit together.
Notably, genesis pursues a consistent strategy for scene generation: Step one generates the floor
and the sky, defining the layout of the scene. Steps two to four generate individual foreground
objects. Some of these slots remain empty if less than three objects are present in the scene. The
final three steps generate the walls in the background. We conjecture that this strategy evolves during
training as the floor and sky constitute large and easy to model surfaces that have a strong impact
on the reconstruction loss. Finally, we observe that some slots contain artefacts of the sky at the top
of the wall boundaries. We conjecture this is due to the fact that the mask decoder does not have
skip connections as typically used in segmentation networks, making it difficult for the model to
predict sharp segmentation boundaries. Scenes generated by genesis-s are shown in Figure 8 and
Figure 9, Appendix D. While genesis-s does separate the foreground objects from the background,
it generates them in one step and the individual background components are not very interpretable.
6
Published as a conference paper at ICLR 2020
4.2	Inference of Scene Components
Like monet and iodine, which were designed for unsupervised scene decomposition, genesis is
also able to segment scenes into meaningful components. Figure 4 compares the decomposition
of two images from the GQN dataset with genesis and monet. Both models follow a similar
decomposition strategy, but monet fails to disambiguate one foreground object in the first example
and does not reconstruct the background in as much detail in the second example. In Appendix E,
Figure 10 illustrates the ability of both methods to disambiguate objects of the same colour and
Figure 11 shows scene decomposition with genesis-s.
Following Greff et al. (2019), we quantify segmentation performance with the Adjusted Rand Index
(ARI) of pixels overlapping with ground truth foreground objects. We computed the ARI on 300
random images from the ShapeStacks test set for five models trained with different random seeds.
GENESIS achieves an ARI of 0.73 ± 0.03 which is better than 0.63 ± 0.07 for MONet. This metric,
however, does not penalise objects being over-segmented, which can give a misleading impression
with regards to segmentation quality. This is illustrated in Figure 13, Appendix E.
Inspired by Arbelaez et al. (2010), we thus propose to use the segmentation covering (SC) of the
ground truth foreground objects by the predicted masks. This involves taking a weighted mean over
mask pairs, putting a potentially undesirable emphasis on larger objects. We therefore also consider
taking an unweighted mean (mSC). For the same 300 images from the ShapeStacks test set and five
different random seeds, GENESIS (SC: 0.64 ± 0.08, mSC: 0.60 ± 0.09) again outperforms MONet
(SC: 0.52 ± 0.09, mSC: 0.49 ± 0.09). More details are provided in Appendix C.
Input Reconstruction it = 1 k = 1 k = 3 k = 4 k = 5 k = 6 k = 7
ω-ωφ⊂φ0 1① Now ω-ωφ⊂φ0 1① Now
Figure 4: Step-by-step decomposition of the same scene from GQN with genesis and monet.
Unlike monet, genesis clearly differentiates individual objects in the first example. In the second
example, genesis captures the fine-grained pattern of the wall in the background better than monet.
4.3	Evaluation of Unsupervised Representation Utility
Using a subset of the available labelled training images from ShapeStacks, we train a set of clas-
sifiers on the representations learned by genesis and several baselines to evaluate how well these
representations capture the ground truth scene state. In particular, we consider three tasks: (1) Is
a tower stable or not? (2) What is the tower’s height in terms of the number of blocks? (3) What
is the camera viewpoint (out of 16 possibilities)? Tower stability is a particularly interesting prop-
erty as it depends on in fine-grained object information and the relative positioning of objects. We
selected the third task as learning scene representations from different views has previously been
prominently explored in Eslami et al. (2018). We compare genesis and genesis - s against three
baselines: monet, a vae with a spatial broadcast decoder (bd-vae) and a vae with a deconvo-
lutional decoder (dc-vae). The results are summarised in Table 1. The architectural details of
the baselines are described in Appendix B.2 and Appendix B.3. The implementation details of the
classifiers are provided in Appendix B.5.
7
Published as a conference paper at ICLR 2020
Both genesis and genesis-s perform better than than the baselines at predicting tower stability
and their accuracies on predicting the height of the towers is only outperformed by monet. We
conjecture that monet benefits here by its deterministic segmentation network. Overall, this cor-
roborates the intuition that object-centric representations are indeed beneficial for these tasks which
focus on the foreground objects. We observe that the bd-vae does better than the dc-vae on all
three tasks, reflecting the motivation behind its design which is aimed at better disentangling the un-
derlying factors of variation in the data (Watters et al., 2019b). All models achieve a high accuracy at
predicting the camera view. Finally, we note that none of models reach the stability prediction accu-
racies reported in Groth et al. (2018) which were obtained with an Inception-v4 classifier (Szegedy
et al., 2017). This is not surprising considering that only a subset the training images is used for
training the classifiers without data augmentation and at a reduced resolution.
Table 1: Classification accuracy in % on the test sets of the ShapeStacks tasks.
Task	GENESIS	genesis-s	monet	bd-vae	dc-vae	Random
Stability	64.0	63.2	59.6	60.1	59.0	50.0
Height	80.3	80.8	88.4	78.6	67.5	22.8
View	99.3	99.7	99.5	99.7	99.1	6.25
4.4 Quantifying Sample Quality
In order to quantify the quality of generated scenes, Table 2 summarises the Frechet Inception Dis-
tances (FIDs) (Heusel et al., 2017) between 10,000 images generated by genesis as well several
baselines and 10,000 images from the Multi-dSprites and the GQN test sets, respectively. The two
genesis variants achieve the best FID on both datasets. While genesis-s performs better than
genesis on GQN, Figure 8 and Figure 9 in Appendix D show that individual scene components
are less interpretable and that intricate background patterns are generated at the expense of sensible
foreground objects. It is not surprising that the FIDs for monet are relatively large given that it
was not designed for generating scenes. Interestingly, the dc-vae achieves a smaller FID on GQN
than the bd-vae. This is surprising given that the bd-vae representations are more useful for the
ShapeStacks classification tasks. Given that the GQN dataset and ShapeStacks are somewhat simi-
lar in structure and appearance, this indicates that while FID correlates with perceptual similarity, it
does not necessarily correlate with the general utility of the learned representations for downstream
tasks. We include scenes sampled from the bd-vae and the dc-vae in Figure 7, Appendix D, where
we observe that the dc-vae models the background fairly well while foreground objects are blurry.
Table 2: Frechet Inception Distances for genesis and baselines on GQN.
Dataset	GENESIS	genesis-s	monet	bd-vae	dc-vae
Multi-dSprites	24.9	28.2	92.7	89.8	100.5
GQN	80.5	70.2	176.4	145.5	82.5
5 Conclusions
In this work, we propose a novel object-centric latent variable model of scenes called genesis. We
show that genesis is, to the best of our knowledge, the first unsupervised model to both decompose
rendered 3D scenes into semantically meaningful constituent parts, while at the same time being able
to generate coherent scenes in a component-wise fashion. This is achieved by capturing relationships
between scene components with an autoregressive prior that is learned alongside a computationally
efficient sequential inference network, setting genesis apart from prior art. Regarding future work,
an interesting challenge is to scale genesis to more complex datasets and to employ the model
in robotics or reinforcement learning applications. To this end, it will be necessary to improve
reconstruction and sample quality, reduce computational cost, and to scale the model to higher
resolution images. Another potentially promising research direction is to adapt the formulation to
only model parts of the scene that are relevant for a certain task.
8
Published as a conference paper at ICLR 2020
Acknowledgments
This research was supported by an EPSRC Programme Grant (EP/M019918/1), an EPSRC DTA
studentship, and a Google studentship. The authors would like to acknowledge the use of the
University of Oxford Advanced Research Computing (ARC) facility in carrying out this work,
http://dx.doi.org/10.5281/zenodo.22558, and the use of Hartree Centre resources.
The authors would like to thank Yizhe Wu for his help with re-implementing monet, Oliver Groth
for his support with the GQN and ShapeStacks datasets, and Rob Weston for proof reading the paper.
References
Relja Arandjelovic and Andrew Zisserman. Object Discovery with a Copy-Pasting GAN. arXiv
preprint arXiv:1905.11369, 2019.
Pablo Arbelaez, Michael Maire, Charless Fowlkes, and Jitendra Malik. Contour Detection and Hier-
archical Image Segmentation. IEEE Transactions on Pattern Analysis and Machine Intelligence,
2010.
Samaneh Azadi, Deepak Pathak, Sayna Ebrahimi, and Trevor Darrell. Compositional GAN: Learn-
ing Image-Conditional Binary Composition. arXiv preprint arXiv:1807.07560, 2019.
Rianne van den Berg, Leonard Hasenclever, Jakub M Tomczak, and Max Welling. Sylvester Nor-
malizing Flows for Variational Inference. Conference on Uncertainty in Artificial Intelligence,
2018.
Adam Bielski and Paolo Favaro. Emergence of Object Segmentation in Perturbed Generative Mod-
els. arXiv preprint arXiv:1905.12663, 2019.
Andrew Brock, Jeff Donahue, and Karen Simonyan. Large Scale GAN Training for High Fidelity
Natural Image Synthesis. arXiv preprint arXiv:1809.11096, 2018.
Christopher P Burgess, Loic Matthey, Nicholas Watters, Rishabh Kabra, Irina Higgins, Matt
Botvinick, and Alexander Lerchner. MONet: Unsupervised Scene Decomposition and Repre-
sentation. arXiv preprint arXiv:1901.11390, 2019.
Mickael Chen, Thierry Artieres, and Ludovic Denoyer. UnSUPerviSed Object Segmentation by Re-
drawing. arXiv preprint arXiv:1905.13539, 2019.
Djork-Ame Clevert, Thomas Unterthiner, and Sepp Hochreiter. Fast and Accurate Deep Network
Learning by Exponential Linear Units (ELUs). International Conference on Learning Represen-
tations, 2016.
Pierre Comon. Independent Component Analysis. In J-L.Lacoume (ed.), Higher-Order Statistics,
pp. 29-38. ElSeVier,1992.
Eric Crawford and Joelle Pineau. Spatially Invariant Unsupervised Object Detection with Convolu-
tional Neural Networks. AAAI Conference on Artificial Intelligence, 2019.
Yann N Dauphin, Angela Fan, Michael Auli, and David Grangier. Language Modeling with Gated
Convolutional Networks. International Conference on Machine Learning, 2017.
SM Ali Eslami, Nicolas Heess, Theophane Weber, Yuval Tassa, David Szepesvari, Geoffrey E Hin-
ton, et al. Attend, Infer, Repeat: Fast Scene Understanding with Generative Models. Neural
Information Processing Systems, 2016.
SM Ali Eslami, Danilo Jimenez Rezende, Frederic Besse, Fabio Viola, Ari S Morcos, Marta Gar-
nelo, Avraham Ruderman, Andrei A Rusu, Ivo Danihelka, Karol Gregor, et al. Neural Scene
Representation and Rendering. Science, 2018.
Karl Friston. A Theory of Cortical Responses. Philosophical Transactions of the Royal Society B:
Biological Sciences, 360(1456):815-836, 2005.
Xavier Glorot, Antoine Bordes, and Yoshua Bengio. Deep Sparse Rectifier Neural Networks. Inter-
national Conference on Artificial Intelligence and Statistics, 2011.
9
Published as a conference paper at ICLR 2020
KlaUs Greff, Antti Rasmus, Mathias Berglund, Tele Hao, Harri Valpola, and Jurgen Schmidhuber.
Tagger: Deep Unsupervised Perceptual Grouping. Neural Information Processing Systems, 2016.
Klaus Greff, Sjoerd van Steenkiste, and Jurgen Schmidhuber. Neural Expectation Maximization.
Neural Information Processing Systems, 2017.
Klaus Greff, Raphael LoPez Kaufmann, Rishab Kabra, Nick Watters, Chris Burgess, Daniel Zo-
ran, Loic Matthey, Matthew Botvinick, and Alexander Lerchner. Multi-Object Representation
Learning with Iterative Variational Inference. International Conference on Machine Learning,
2019.
Karol Gregor, Danilo Jimenez Rezende, Frederic Besse, Yan Wu, Hamza Merzic, and Aaron van den
Oord. Shaping Belief States with Generative Environment Models for RL. arXiv preprint
arXiv:1906.09237, 2019.
Kalanit Grill-Spector and Rafael Malach. The Human Visual Cortex. Annual Review of Neuro-
Science, 27(1):649-677, 2004.
Oliver Groth, Fabian B Fuchs, Ingmar Posner, and Andrea Vedaldi. ShapeStacks: Learning Vision-
Based Physical Intuition for Generalised Object Stacking. European Conference on Computer
Vision, 2018.
David Ha and Jurgen Schmidhuber. World Models. Neural Information Processing Systems, 2018.
Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochreiter.
GANs Trained by a Two Time-Scale Update Rule Converge to a Local Nash Equilibrium. Neural
Information Processing Systems, 2017.
Sepp Hochreiter and Jurgen Schmidhuber. Long Short-Term Memory. Neural Computation, 1997.
Jonathan Huang and Kevin Murphy. Efficient Inference in Occlusion-Aware Generative models of
Images. arXiv preprint arXiv:1511.06362, 2015.
D. H. Hubel and T. N. Wiesel. Receptive Fields and Functional Architecture of Monkey Striate
Cortex. The Journal of Physiology, 195(1):215-243, 1968.
Sergey Ioffe and Christian Szegedy. Batch Normalization: Accelerating Deep Network Training by
Reducing Internal Covariate Shift. International Conference on Machine Learning, 2015.
Michael I Jordan, Zoubin Ghahramani, Tommi S Jaakkola, and Lawrence K Saul. An Introduction
to Variational Methods for Graphical Models. Machine Learning, 37(2):183-233, 1999.
Diederik P Kingma and Jimmy Ba. Adam: A Method for Stochastic Optimization. International
Conference on Learning Representations, 2015.
Diederik P Kingma and Max Welling. Auto-Encoding Variational Bayes. International Conference
on Learning Representations, 2014.
Adam Kosiorek, Hyunjik Kim, Yee Whye Teh, and Ingmar Posner. Sequential Attend, Infer, Repeat:
Generative Modelling of Moving Objects. Neural Information Processing Systems, 2018.
Adam R Kosiorek, Sara Sabour, Yee Whye Teh, and Geoffrey E Hinton. Stacked Capsule Autoen-
coders. arXiv preprint arXiv:1906.06818, 2019.
Loic Matthey, Irina Higgins, Demis Hassabis, and Alexander Lerchner. dSprites: Disentanglement
Testing Sprites Dataset. https://github.com/deepmind/dsprites-dataset/, 2017.
Bruno A. Olshausen and David J. Field. Emergence of Simple-Cell Receptive Field Properties by
Learning a Sparse Code for Natural Images. Nature, 381:607-609, 1996.
Niki Parmar, Ashish Vaswani, Jakob Uszkoreit, Eukasz Kaiser, Noam Shazeer, Alexander Ku, and
Dustin Tran. Image Transformer. International Conference on Machine Learning, 2018.
10
Published as a conference paper at ICLR 2020
Rajesh P. N. Rao and Dana H. Ballard. Predictive Coding in the Visual Cortex: A Functional
Interpretation of Some Extra-Classical RecePtive-Field Effects. Nature Neuroscience, 2(1):79-
87, 1999.
Danilo Jimenez Rezende and Fabio Viola. Taming VAEs. arXiv preprint arXiv:1810.00597, 2018.
Danilo Jimenez Rezende, Shakir Mohamed, and Daan Wierstra. Stochastic Backpropagation and
Approximate Inference in Deep Generative Models. International Conference on Machine Learn-
ing, 2014.
Lukasz Romaszko, Christopher KI Williams, Pol Moreno, and Pushmeet Kohli. Vision-as-Inverse-
Graphics: Obtaining a Rich 3D Explanation of a Scene from a Single Image. In IEEE Interna-
tional Conference on Computer Vision, 2017.
Adam Santoro, David Raposo, David G. T. Barrett, Mateusz Malinowski, Razvan Pascanu, Peter W.
Battaglia, and Timothy P. Lillicrap. A Simple Neural Network Module for Relational Reasoning.
Neural Information Processing Systems, 2017.
Christian Szegedy, Sergey Ioffe, Vincent Vanhoucke, and Alexander A Alemi. Inception-V4,
Inception-Resnet and the Impact of Residual Connections on Learning. AAAI Conference on
Artificial Intelligence, 2017.
Naftali Tishby, Fernando C Pereira, and William Bialek. The Information Bottleneck Method. arXiv
preprint arXiv:physics/0004057, 2000.
Sjoerd van Steenkiste, Michael Chang, KlaUs Greff, and Jurgen Schmidhuber. Relational Neural
Expectation Maximization: Unsupervised Discovery of Objects and their Interactions. arXiv
preprint arXiv:1802.10353, 2018a.
Sjoerd van Steenkiste, Karol Kurach, and Sylvain Gelly. A Case for Object Compositionality in
Deep Generative Models of Images. NeurIPS Workshop on Modeling the Physical World: Learn-
ing, Perception, and Control, 2018b.
Sjoerd van Steenkiste, Francesco Locatello, Jurgen Schmidhuber, and Olivier Bachem. Are
Disentangled Representations Helpful for Abstract Visual Reasoning? arXiv preprint
arXiv:1905.12506, 2019.
Brian A. Wandell. Foundations of Vision. Sinauer Associates, 1995.
Nicholas Watters, Loic Matthey, Matko Bosnjak, Christopher P Burgess, and Alexander Lerchner.
COBRA: Data-Efficient Model-Based RL through Unsupervised Object Discovery and Curiosity-
Driven Exploration. arXiv preprint arXiv:1905.09275, 2019a.
Nicholas Watters, Loic Matthey, Christopher P Burgess, and Alexander Lerchner. Spatial Broadcast
Decoder: A Simple Architecture for Learning Disentangled Representations in VAEs. arXiv
preprint arXiv:1901.07017, 2019b.
Jiajun Wu, Erika Lu, Pushmeet Kohli, Bill Freeman, and Josh Tenenbaum. Learning to See Physics
via Visual De-Animation. Neural Information Processing Systems, 2017a.
Jiajun Wu, Joshua B Tenenbaum, and Pushmeet Kohli. Neural Scene De-rendering. IEEE Confer-
ence on Computer Vision and Pattern Recognition, pp. 699-707, 2017b.
Kun Xu, Chongxuan Li, Jun Zhu, and Bo Zhang. Multi-Objects Generation with Amortized Struc-
tural Regularization. Neural Information Processing Systems, 2018.
Zhenjia Xu, Zhijian Liu, Chen Sun, Kevin Murphy, William T Freeman, Joshua B Tenenbaum,
and Jiajun Wu. Unsupervised Discovery of Parts, Structure, and Dynamics. arXiv preprint
arXiv:1903.05136, 2019.
11
Published as a conference paper at ICLR 2020
A DATASETS
Multi-dSprites (Burgess et al., 2019) Images contain between one and four randomly se-
lected “sprites" from Matthey et al. (2017), available at https://github.com/deepmind/
dsprites-dataset. For each object and the background, We randomly select one of five dif-
ferent, equally spread values for each of the three colour channels and generate 70,000 images. We
set aside 10,000 for validation and testing each. The script for generating this data will be released
with the rest of our code.
GQN (Eslami et al.,2018) The “rooms-ring-camera" dataset includes simulated 3D scenes of a
square room with different floor and wall textures, containing one to three objects of various shapes
and sizes. It can be downloaded from https://github.com/deepmind/gqn-datasets.
ShapeStacks (Groth et al., 2018) Images show simulated block towers of different heights (two to
six blocks). Individual blocks can have different shapes, sizes, and colours. Scenes have annotations
for: stability of the tower (binary), number of blocks (two to six), properties of individual blocks,
locations in the tower of centre-of-mass violations and planar surface violations, wall and floor
textures (five each), light presets (five), and camera view points (sixteen). More details about the
dataset and download links can be found at https://shapestacks.robots.ox.ac.uk/.
B IMPLEMENTATION DETAILS
B.1	Genesis Architecture
We use the architecture from Berg et al. (2018) to encode and decode Zm with the only modification
of applying batch normalisation (Ioffe & Szegedy, 2015) before the GLU non-linearities (Dauphin
et al., 2017). The convolutional layers in the encoder and decoder have five layers with size-5
kernels, strides of[1, 2, 1, 2, 1], and filter sizes of [32, 32, 64, 64, 64] and [64, 32, 32, 32, 32],
respectively. Fully-connected layers are used at the lowest resolution.
The encoded image is passed to a long short-term memory (LSTM) cell (Hochreiter & Schmidhuber,
1997) followed by a linear layer to compute the mask latents Zm of size 64. The LSTM state size
is twice the latent size. Importantly, unlike the analogous counterpart in MONet, the decoding of
Zm is performed in parallel. The autoregressive prior p (Zm i Zmk-I) is implemented as an LSTM
with 256 units. The conditional distribution pθ (Zk | Zm) is parameterised by a multilayer perceptron
(MLP) with two hidden layers, 256 units per layer, and ELUS (Clevert et al., 2016). We use the same
component VAE featuring a spatial broadcast decoder as MONet to encode and decode Zk, but we
replace RELUS (Glorot et al., 2011) with ELUs.
For GENESIS-S, as illustrated in Figure 5, the encoder of Zk is the same as for Zm above and the
decoder from Berg et al. (2018) is again used to compute the mixing probabilities. However, GEN-
ESIS-S also has a second decoder with spatial broadcasting to obtain the scene components Xk from
Zk. We found the use of two different decoders to be important for genesis-s in order for the model
to decompose the input.
Figure 5: genesis-s overview. Given an image x, an encoder and an RNN compute latent variables
Zk. These are decoded to directly obtain the mixing probabilities ∏k and the scene components Xk.
12
Published as a conference paper at ICLR 2020
B.2	MONet Baselines
We followed the provided architectural details described in Burgess et al. (2019). Regarding un-
specified details, we employ an attention network with [32, 32, 64, 64, 64] filters in the encoder and
the reverse in the decoder. Furthermore, we normalise the mask prior with a softmax function to
compute the kl-divergence between mask posterior and prior distributions.
B.3	VAE Baselines
Both the bd-vae and the dc-vae have a latent dimensionality of 64 and the same encoder as in
Berg et al. (2018). The dc-vae also uses the decoder from Berg et al. (2018). The bd-vae has the
same spatial broadcast decoder with elus as genesis, but with twice the number of filters to enable
a better comparison.
B.4	Optimisation
The scalar standard deviation of the Gaussian image likelihood components is set to σx = 0.7. We
use geco (Rezende & Viola, 2018) to balance the reconstruction and KL divergence terms in the
loss function. The goal for the reconstruction error is set to 0.5655, multiplied by the image dimen-
sions and number of colour channels. We deliberately choose a comparatively weak reconstruction
constraint for the geco objective to emphasise kl minimisation and sample quality. For the remain-
ining GECO hyperparameters, the default value of α = 0.99 is used and the step size for updating β
is set to 10-5 . We increase the step size to 10-4 when the reconstruction constraint is satisfied to
accelerate optimisation as β tended to undershoot at the beginning of training.
All models are trained for 5 * 105 iterations with a batch size of 32 using the ADAM optimiser
(Kingma & Ba, 2015) and a learning rate of 10-4. With these settings, training GENESIS takes
about two days on a single GPU. However, we expect performance to improve with further training.
This particularly extends to training GENESIS on ShapeStacks where 5 * 105 training iterations are
not enough to achieve good sample quality.
B.5	ShapeStacks Classifiers
Multilayer perceptrons (mlps) with one hidden layer, 512 units, and elu activations are used for
classification. The classifiers are trained for 100 epochs on 50,000 labelled examples with a batch
size of 128 using a cross-entropy loss, the ADAM optimiser, and a learning rate of 10-4. As inputs
to the classifiers, we concatenate zkm and zck for GENESIS, zk for GENESIS-S, and the component
vae latents for the two monet variants.
C Segmentation Covering
Following Arbelaez et al. (2010), the segmentation covering (SC) is based on the intersection over
union (IOU) between pairs of segmentation masks from two sets S and S0. In this work, we consider
S to be the segmentation masks of the ground truth foreground objects and S0 to be the predicted
segmentation masks. The covering of S by S0 is defined as:
C (S 0 → S) = P IR X |R| m0∙aχ0 IOU(R, R0),
R∈S |R| R∈S	R0∈S0
(11)
where |R| denotes the number of pixels belonging to mask R. Note that this formulation is slightly
more general than the one in Arbelaez et al. (2010) which assumes that masks in S are non-
overlapping and cover the entire image. The above takes a weighted mean over iou values, pro-
portional to the number of pixels of the masks being covered. To give equal importance to masks of
different sizes, we also consider taking an unweighted mean (mSC):
Cm(S0 → S)=& X maχ, IOU(R, R0),	(12)
|S| R∈S R0∈S0
where |S | denotes the number of non-empty masks in S. Importantly and unlike the ARI, both
segmentation covering variations penalise the over-segmentation of ground truth objects as this de-
creases the iou for a pair of masks. This is illustrated in Figure 13, Appendix E.
13
Published as a conference paper at ICLR 2020
Figure 6: Randomly selected scenes generated by genesis and monet after training on
dataset. Images sampled from genesis contain clearly distinguishable foreground objects and back
grounds. Samples from monet, however, are mostly incoherent.
Figure 7: Randomly sele
the GQN dataset; shown
foreground objects are bl
gi
scenes generated by the BD-VAE and the DC-VAE after training
comparison. The DC-VAE generates decent scene backgrounds
14
Published as a conference paper at ICLR 2020
k = 2 k = 3
Sample k = 1
k = 6 k = 1
k = 5
k = 4

Figure 8: Component-by-component scene generation with genesis-s after training on the GQN
dataset. While genesis-s nominally achieves the best FID in Table 2, this appears to be due to
the generation of high fidelity background patterns rather than appropriate foreground objects. Fur-
thermore, unlike the components generated by genesis at every step in Figure 3, the components
generated by genesis-s are not very interpretable.
e∙ozgL
"—--S ① U ①0
eoL Q-H-w@s ① U ①o
Figure 9: Randomly selected scenes generated by genesis-s after training on the GQN dataset.
15
Published as a conference paper at ICLR 2020
E Inference of S cene Components
Reconstruction
Input
fc = l
k = 2
k = 3
k = l
k = 4
k = 5
k = 6
Figure 10: Step-by-step decomposition ofa scene from GQN with genesis and monet. Two objects
with the same shape and colour are successfully identified by both models. While colour and texture
are useful cues for decomposition, this example shows that both models perform something more
useful than merely identifying regions of similar colour.
Input Reconstruction it = 1
k=2	k=3
k=4	k=5	k=6 k=l
Figure 11: Step-by-step decomposition of the same scenes as in Figure 4 and Figure 10 with
genesis-s. While the foreground objects are distinguished from the background, they are explained
together in the first step. Subsequent steps reconstruct the background in a haphazard fashion.
16
Published as a conference paper at ICLR 2020
Genesis
Input Reconstruction
MONet
Input Reconstruction
k = 1
k = 2 k = 3
k = 4 k = 5 k = 6
k = Q k = S k = 9
k =1 k = 2
k = 3 k = 4 k = 5 k = 6
k = Q k = S
k = 9
Figure 12:	A ShapeStacks tower is decomposed by genesis and monet. Compared to the GQN
dataset, both methods struggle to segment the foreground objects properly. genesis captures the
purple shape and parts of the background wall in step k = 4. MONet explains the green shape,
the cyan shape, and parts of floor in step k = 9. This is reflected in the foreground ARI and
segmentation covering for genesis (ARI: 0.82, SC: 0.68, mSC: 0.58) and monet (ARI: 0.39, SC:
0.26, mSC: 0.35); the latter being lower as the green and cyan shapes are not separated.
k = 1 k = 1 k = 3 k = 4 k = 5 k = 6
k = l k = 8 k = 9
Genesis
Input Reconstruction
MONet
Input Reconstruction
k = 1 k = 1 k = 3 k = 4 k = 5 k = 6
k = l
k = S
Figure 13:	In this example, genesis (ARI: 0.83, SC: 0.83, mSC: 0.83) segments the four foreground
objects properly. monet (ARI: 0.89, SC: 0.47, mSC: 0.50), however, merges foreground objects and
background again in steps k = 2 and k = 9. Despite the inferior decomposition, the ARI for MONet
is higher than for genesis. This is possible as the ARI does not penalise the over-segmentation of
the foreground objects, highlighting its limitations for evaluating unsupervised instance segmenta-
tion. The segmentation covering, however, reflects the quality of the segmentatioin masks properly.
17