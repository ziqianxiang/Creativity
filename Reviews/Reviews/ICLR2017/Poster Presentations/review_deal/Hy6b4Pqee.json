{
    "Decision": {
        "title": "ICLR committee final decision",
        "comment": "There was general agreement from the reviewers that this looks like an important development in the area of probabilistic programming. Some reviewers felt the impact of the work could be very significant. The quality of the work and the paper were perceived as being quite high. The main weakness highlighted by the most negative reviewer (who felt the work was marginally below threshold) is the level of empirical evaluation given within the submitted manuscript. The authors did submit a revision and they outline the reviewer√ïs points that they have addressed. It appears that if accepted this manuscript would constitute the first peer-reviewed paper on the subject of this new software package (Edward). Based on both the numeric scores, the quality and potential significance of this work I recommend acceptance.",
        "decision": "Accept (Poster)"
    },
    "Reviews": [
        {
            "title": "A significant development to include the flexibility of inference to PPL",
            "rating": "7: Good paper, accept",
            "review": "Thank you for an interesting read.\n\nI found this paper very interesting. Since I don't think (deterministic) approximate inference is separated from the modelling procedure (cf. exact inference), it is important to allow the users to select the inference method to suit their needs and constraints. I'm not an expert of PPL, but to my knowledge this is the first package that I've seen which put more focus on compositional inference. Leveraging tensorflow is also a plus, which allows flexible computation graph design as well as parallel computation using GPUs.\n\nThe only question I have is about the design of flexible objective functions to learn hyper-parameters (or in the paper those variables associated with delta q distributions). It seems hyper-parameter learning is also specified as inference, which makes sense if using MAP. However the authors also demonstrated other objective functions such as Renyi divergences, does that mean the user need to define a new class of inference method whenever they want to test an alternative loss function?",
            "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"
        },
        {
            "title": "Very promising probabilistic programming language combining Bayes and deep learning",
            "rating": "8: Top 50% of accepted papers, clear accept",
            "review": "The paper introduces Edward, a probabilistic programming language\nbuilt over TensorFlow and Python, and supporting a broad range of most\npopular contemporary methods in probabilistic machine learning.\n\n\nQuality:\n\nThe Edward library provides an extremely impressive collection of\nmodern probabilistic inference methods in an easily usable form.\nThe paper provides a brief review of the most important techniques\nespecially from a representation learning perspective, combined with\ntwo experiments on implementing various modern variational inference\nmethods and GPU-accelerated HMC.\n\nThe first experiment (variational inference) would be more valuable if\nthere was a clear link to complete code to reproduce the results\nprovided. The HMC experiment looks OK, except the characterising Stan\nas a hand-optimised implementation seems unfair as the code is clearly\nnot hand-optimised for this specific model and hardware configuration.\nI do not think anyone doubts the quality of your implementation, so\nplease do not ruin the picture by unsubstantiated sensationalist\nclaims. Instead of current drama, I would suggest comparing\nhead-to-head against Stan on single core and separately reporting the\nextra speedups you gain from parallelisation and GPU. These numbers\nwould also help the readers to estimate the performance of the method\nfor other hardware configurations.\n\n\nClarity:\n\nThe paper is in general clearly written and easy to read. The numerous\ncode examples are helpful, but also difficult as it is sometimes\nunclear what is missing. It would be very helpful if the authors could\nprovide and clearly link to a machine-readable companion (a Jupyter\nnotebook would be great, but even text or HTML would be easier to\ncopy-paste from than a pdf like the paper) with complete runnable code\nfor all the examples.\n\n\nOriginality:\n\nThe Edward library is clearly a unique collection of probabilistic\ninference methods. In terms of the paper, the main threat to novelty\ncomes from previous publications of the same group. The main paper\nrefers to Tran et al. (2016a) which covers a lot of similar material,\nalthough from a different perspective. It is unclear if the other\npaper has been published or submitted somewhere and if so, where.\n\n\nSignificance:\n\nIt seems very likely Edward will have a profound impact on the field\nof Bayesian machine learning and deep learning.\n\n\nOther comments:\n\nIn Sec. 2 you draw a clear distinction between specialised languages\n(including Stan) and Turing-complete languages such as Edward. This\nseems unfair as I believe Stan is also Turing complete. Additionally\nno proof is provided to support the Turing-completeness of Edward.\n",
            "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"
        },
        {
            "title": "Exciting and promising approach which still needs to be demonstrated empirically",
            "rating": "5: Marginally below acceptance threshold",
            "review": "The authors propose a new software package for probabilistic programming, taking advantage of recent successful tools used in the deep learning community. The software looks very promising and has the potential to transform the way we work in the probabilistic modelling community, allowing us to perform rapid-prototyping to iterate through ideas quickly. The composability principles are used insightfully, and the extension of inference to HMC for example, going beyond VI inference (which is simple to implement using existing deep learning tools), makes the software even more compelling. \n\nHowever, the most important factor of any PPL is whether it is practical for real-world use cases. This was not demonstrated sufficiently in the submission. There are many example code snippets given in the paper, but most are not evaluated. The Dirichlet process mixture model example (Figure 12) is an important one: do the proposed black-box inference tools really work for this snippet? and will the GAN example (Figure 7) converge when optimised with real data? To convince the community of the practicality of the package it will be necessary to demonstrate these empirically. Currently the only evaluated model is a VAE with various inference techniques, which are not difficult to implement using pure TF.\n\nPresentation:\n* Paper presentation could be improved. For example the authors could use more signalling for what is about to be explained. On page 5 qbeta and qz are used without explanation - the authors could mention that an example will be given thereafter.\n* I would also suggest to the authors to explain in the preface how the layers are implemented, and how the KL is handled in VI for example.\nIt will be useful to discuss what values are optimised and what values change as inference is performed (even before section 4.4). This was not clear for the majority of the paper. \n\nExperiments:\n* Why is the run time not reported in table 1?\n* What are the \"difficulties around convergence\" encountered with the analytical entropies? inference issues become more difficult to diagnose as inference is automated. Are there tools to diagnose these with the provided toolbox? \n* Did HMC give sensible results in the experiment at the bottom of page 8? only run time is reported. \n* How difficult is it to get the inference to work (eg HMC) when we don't have full control over the computational graph structure and sampler?\n* It would be extremely insightful to give a table comparing the performance (run time, predictive log likelihood, etc) of the various inference tools on more models.\n* What benchmarks do you intend to use in the Model Zoo? the difficulty with probabilistic modelling is that there are no set benchmarks over which we can evaluate and compare many models. Model zoo is sensible for the Caffe ecosystem because there exist few benchmarks a large portion of the community was working on (ImageNet for example). What datasets would you use to compare the DPMM on for example?\n\nMinor comments:\n* Table 1: I would suggest to compare to Li & Turner with alpha=0.5 (the equivalent of Hellinger distance) as they concluded this value performs best. I'm not sure why alpha=-1 was chosen here. \n* How do you handle discrete distributions (eg Figure 5)?\n* x_real is not defined in Figure 7.\n* I would suggest highlighting M in Figure 8.\n* Comma instead of period after \"rized), In\" on page 8.\n\nIn conclusion I would say that the software developments presented here are quite exciting, and I'm glad the authors are pushing towards practical and accessible \"inference for all\". In its current form though I am forced to give the submission itself a score of 5.",
            "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"
        }
    ]
}