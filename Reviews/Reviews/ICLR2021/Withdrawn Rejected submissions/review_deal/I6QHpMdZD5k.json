{
    "Decision": {
        "title": "Final Decision",
        "decision": "Reject",
        "comment": "This paper proposes using a neural network to learn an approximate solution for desired boundary conditions to accelerate the semiconductor device simulation. The work shows that speed-up simulation is increased significantly. However, the major concern about this work is the limited contribution to the machine learning community as exposed by the reviewers. "
    },
    "Reviews": [
        {
            "title": "Authors propose using a ANN to learn an approximate solution for desired boundary conditions in order to accelerate the semiconductor device simulation, They show that the computational cost is significantly reduced. They empirically show that their method accelerates simulation by more than 12 times.",
            "review": "Contribution: Authors propose using a neural network to learn an approximate solution for desired boundary conditions in order to accelerate the semiconductor device simulation. They significately reduce the computational cost to calculate several unnecessary solutions when considering an initial solution sufficiently close to the final one by a convolutional neural network (CNN). To compute this initial solution, authors authors train a MOSFET based convolutional neural network. They empirically show that their proposed method accelerates the simulation by more than 12 times.\n\nPros:\n\n1) Proposal is original.\n2) Proposal is fast.",
            "rating": "7: Good paper, accept",
            "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"
        },
        {
            "title": "Mehtod is not new; good engineering application",
            "review": "The paper proposed to use a CNN as a low-accuracy solver to output a good initial guess from the device parameters and then the solution is refined by an expensive numerical solver to get a good accuracy. The experiment on the MOSFET problem shows that, compared with the conventional numerical solver, this hybrid strategy can accelerate the simulation by more than 12 times.\n\nPros:\n- The proposed hybrid method speeds up the simulation a lot without a sacrifice of accuracy.\n\nMajor comments:\n- This idea of using CNN to output a good initial guess is not new and has been proposed, e.g., in the paper https://arxiv.org/abs/2005.04485 . So there is little contribution in the method.\n- The problem considered in the paper is a 2D rectangle domain, which can be handled by CNN nicely. However, in practice this may not be true. The authors should consider more complex domains. For example, in https://doi.org/10.1016/j.jcp.2019.05.026 CNN is used for complex 2D geometry. In https://arxiv.org/abs/1907.04502 neural network is used to solve Poisson equation in a L-shape domain, which should also be discussed in Section 2.1.\n- This paper has no contribution in machine leaning, and instead it is an application for solving PDEs. Most part of this paper is not relevant to machine learning topics. It may be more suitable to publish this paper in an engineering journal instead of a machine learning conference.",
            "rating": "5: Marginally below acceptance threshold",
            "confidence": "5: The reviewer is absolutely certain that the evaluation is correct and very familiar with the relevant literature"
        },
        {
            "title": "Unclear whether you need a convolutional neural network to solve a 6-input problem",
            "review": "The submission proposes speeding up MOSFET simulations by learning the electrostatic field by example.\n\nOn the positive side, the submission reports 12x speedup over running MOSFET simulation. The submission speeds up the simulation by reducing the problem to a lookup of a electrostatic field as a function of 6 parameters of a MOSFET (two doping levels, oxide thickness, the gate length, V_DD, and V_g).\n\nHowever, the application doesn't seem to require a convolutional network.. the input space is only 6-dimensional, so simple techniques ought to work well. When I run into low-dimensional problems like this, I use local linear regression. [1] Namely:\n\n1. Scale each input to lie in [0,1]\n2. Choose a distance h in the 6-dimensional scaled input space (via cross-validating the following procedure)\n3. For any test point, find N points that lie within distance h of the test point\n4. Do weighted linear regression on those N points, with the tricube weighting function scaled to have support h [2]\n5. Evaluate the linear regression once for each output position.\n\nNote that in step 4, you form a NxN correlation matrix once, and perform a Cholesky decomposition on it. Then, for each position in the electrostatic output, you only need to do backsubstitution, which is O(N^2). \n\nThis would be the standard way of solving such a problem. You'd have to show that the neural network was substantially better or cheaper than this technique.\n\nAnother issue is with exactly how you measure the 12x speedup. That speedup time ignores the ~10,000 times you have to run the simulator to generate the training data. If the simulator is run only on the 1,000 test samples, then the simulator has actually slowed down by 10x (i.e., it's cheaper to not generate the training set and only simulate on the test samples). How many times is the simulator expected to run? If the simulator will run 100,000 times (e.g.), then it could be that the 5-d space is sampled densely enough where you can simply perform a nearest neighbor computation and return the electrostatic field out of memory, and do absolutely no interpolation or simulaion.\n\nReferences.\n1. https://en.wikipedia.org/wiki/Local_regression\n2. https://en.wikipedia.org/wiki/Kernel_(statistics)\n",
            "rating": "6: Marginally above acceptance threshold",
            "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"
        },
        {
            "title": "Accelerating semiconductor simulations with CNNs",
            "review": "The paper proposes a method for generating an initial guess for numerical simulations of semiconductor devices. Using CNNs to generate a better initial guess speeds up simulations by a significant constant factor.\n\nPros:\n(1) The paper addresses an important practical problem with industrial applications.\n(2) The exposition of the underlying theory and the presentation of results is very clear, the paper is well-written.\nEven a non-expert like myself is able to follow the paper.\n(3) The experimental results are promising.\n\nCons:\n(1) Even though this is a good applications paper, the theoretical contributions to machine\nlearning are minimal -- and may not be enough to match ICLR standards.\n(2) More justifications for the chosen architecture in Fig. 3, and better yet -- an experimental\ncomparison of alternative architectures would be interesting to see.\n\nOverall, despite the promising experimental results, I am concerned that the paper may not meet\nthe standards of ICLR, hence my rating.",
            "rating": "5: Marginally below acceptance threshold",
            "confidence": "2: The reviewer is willing to defend the evaluation, but it is quite likely that the reviewer did not understand central parts of the paper"
        },
        {
            "title": "Use CNN to predict initial guess for the electrostatic potential in a Newton-Rhapson solution",
            "review": "The paper proposes to use a CNN to compute an initial guess for the iterative Newton-Rhapson solution of a coupled PDE system used for semiconductor device simulation. To do so, the authors construct a \"device template\" which parametrizes the design space. The CNN then maps a device configuration in this 6-dim space to the predicted electrostatic potential in the form of a 64x64 grid. The authors provide an analysis showing why predicting the electrostatic potential alone is sufficient. Overall, this approach can provide a simulation speedup of 12x or more. The authors are also planning to publish the dataset generated for the paper.\n\nThe idea to take a data-driven approach to compute the initial approximate solution in the context of the semiconductor simulation domain is interesting. Most prior work utilizing ML to accelerate PDE solution tried to generate such solutions directly. The path taken here, while seemingly easier, is interesting from an application point of view in that the solver is still used as before, potentially alleviating concerns about the validity of ML-accelerated solutions. The claimed order of magnitude speedup is significant (but see below for some comments on this). The main downside of the paper is the very limited novelty on the ML front (off-the-shelf generator from the DC-GAN paper) and demonstrated applicability to a specific and relatively narrow domain. As such, I recommend against publication at ICLR, and would advise the authors to submit the paper to a venue where the presented advances are likely to be of wider interest.\n\nOne specific point that I believe should be addressed, is to clarify the cost of building the dataset (10k simulations) and training the network, and its impact on the effective simulation speedup. As is, the 12x speedup would seem to apply in the limit of a very large number of network inference runs, and it is unclear if this is a practically relevant setting.\n\nSuggestions for improvements:\n- Explain to the reader explicitly why this is a 2d problem while the device exists in 3d space.\n- What specifically was the validation set used for?\n- In the text it is stated that \"grid spacing is adjusted\". Please explain more how this is done.\n- The text states that the network was trained with backprop. Which specific optimizer was used, and with which hyperparameters?\n- Including parts of the explanations currently in appendix B could make the text clearer and easier to read for people from outside of your field (e.g. the importance of bias ramping, and its relation to the simulation cost).\n",
            "rating": "4: Ok but not good enough - rejection",
            "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"
        }
    ]
}