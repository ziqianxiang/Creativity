{
    "Decision": "",
    "Reviews": [
        {
            "title": "Minor experimental findings on existing sequence labeling architectures",
            "rating": "3: Clear rejection",
            "review": "The paper conducts empirical comparisons between well-known architectures for sequence labeling. Specifically, it compares LSTM-CNN-CRF (Ma and Hovy, 2016) and LSTM-CRF (Lample et al., 2016), combined with character-based architectures based on CNN or LSTM, and also different regularization techniques including a new word-level dropout scheme. \n\nQuality: Low, minor/incremental contribution due to lack of novelty and lack of significantly useful findings. \n\nClarity: Readable with some typos (e.g., \"let the model being aware...\"). Experimental results are thoroughly tabulated. \n\nOriginality: Very low. The finding that LSTMs have advantages over CNNs in modeling characters is not new (see the last paragraph of Section 4.1 of Lample et al.), though it's good to have empirical verification. One of the only novel components is the word-wise dropout (Table 5), but the improvement is minor and the technique is too thin to be considered substantial novelty. \n\nSignificance: The reported findings will be useful for practitioners who are specifically interested in incrementally improving sequence labeling performance. Otherwise, there isn't much depth. ",
            "confidence": "5: The reviewer is absolutely certain that the evaluation is correct and very familiar with the relevant literature"
        },
        {
            "title": "Very relevant paper for NLP researchers. ",
            "rating": "5: Marginally below acceptance threshold",
            "review": "\nThe paper does a very interesting and much relevant job at systematically investigating the various architectural choices and optimization settings of sequence labeling tasks for natural language processing. \n\nInvestigation concernes the use of CNN and LSTM, the various strategies for embedding refinement etc. \n\nBesides investigating systematically the different choices one has to make when designing a sequence labeling system for NLP the paper finally ends with new state of the art systems for the two tasks handled here, named entity recognition and pos tagging. This study is extensive and well explained and of clear relevance for any NLP practitioner.\n\nThe real strength of the paper is linked to the genericity of the conclusions. May we generalize this study’s conclusions to other datasets and other NLP tasks ?   \n\nActually, the conclusions are drawn from the experimental results gained in two datasets. These datasets are well known ones in the NLP field for POS tagging and for Named Entity Recognition. Yet, not being a specialist of natural language processing, i am not able to evaluate if conclusions drawn from results on these two datasets and on these two tasks may be trusted for other datasets and other NLP tasks. Which should be a strength of the paper. ",
            "confidence": "3: The reviewer is fairly confident that the evaluation is correct"
        },
        {
            "title": "comparison of CRF sequence tagging architectures",
            "rating": "4: Ok but not good enough - rejection",
            "review": "This paper does a systematic comparison of different architectures for learning representations for bigram CRF tagging models, looking at NER mostly. Additionally, several strategies for fine-tuning word type embeddings are explored. The findings help show that LSTMs are slightly better on this task than CNNs, and that fine tuning can be productively included.\n\nSome questions I had were how the gradients were scaled during dropout (or at test time when dropout is presumably disabled). Normally neurons are dropped out to zero, but here they were frequently reverted back to the original word embedding. In this case, the standard gradient transforms seem inappropriate. Were they done? Also, which embeddings were used at test time?\n\nAlso, I’m confused about the updating for common word embeddings. If the goal is to only update common word embeddings, I don’t see the point of the group lasso penalty. Also, do the settings of lambda that you provide actually zero out the proper name words and not the others? Also, what list is used to determine which group a word belongs to?\n\nOverall though, this is a useful set of results that will be helpful for people implementing chunking sequence models.\n\nSome suggestions for clarity:\nEq1 and 2 are computed using the forward algorithm, not the Viterbi algorithm. The generic term might be to say “a polynomial time dynamic programming algorithm”.\n\nSome missing citations for sequence labeling with character models (some of the original work):\ndos Santos and Zadrozny. (2014 ICML) http://proceedings.mlr.press/v32/santos14.pdf\nLing et al. (2015 EMNLP) Finding Function in Form. https://arxiv.org/abs/1508.02096",
            "confidence": "5: The reviewer is absolutely certain that the evaluation is correct and very familiar with the relevant literature"
        }
    ]
}