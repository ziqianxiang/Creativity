Under review as a conference paper at ICLR 2017
Two Methods for Wild Variational Inference
Qiang Liu Yihao Feng
Computer Science, Dartmouth College
Hanover, NH, 03755
{qiang.liu, yihao.feng.gr}@dartmouth.edu
Ab stract
Variational inference provides a powerful tool for approximate probabilistic in-
ference on complex, structured models. Typical variational inference methods,
however, require to use inference networks with computationally tractable proba-
bility density functions. This largely limits the design and implementation of vari-
ational inference methods. We consider wild variational inference methods that
do not require tractable density functions on the inference networks, and hence
can be applied in more challenging cases. As an example of application, we treat
stochastic gradient Langevin dynamics (SGLD) as an inference network, and use
our methods to automatically adjust the step sizes of SGLD, yielding significant
improvement over the hand-designed step size schemes.
1	Introduction
Probabilistic modeling provides a principled approach for reasoning under uncertainty, and has been
increasingly dominant in modern machine learning where highly complex, structured probabilistic
models are often the essential components for solving complex problems with increasingly larger
datasets. A key challenge, however, is to develop computationally efficient Bayesian inference
methods to approximate, or draw samples from the posterior distributions. Variational inference
(VI) provides a powerful tool for scaling Bayesian inference to complex models and big data. The
basic idea of VI is to approximate the true distribution with a simpler distribution by minimizing the
KL divergence, transforming the inference problem into an optimization problem, which is often
then solved efficiently using stochastic optimization techniques (e.g., Hoffman et al., 2013; Kingma
& Welling, 2013). However, the practical design and application of VI are still largely restricted by
the requirement of using simple approximation families, as we explain in the sequel.
Let p(z) be a distribution of interest, such as the posterior distribution in Bayesian inference. VI
approximates p(z) with a simpler distribution q*(z) found in a set Q = {qη(z)} of distributions
indexed by parameter η by minimizing the KL divergence objective:
min {KL@ || P) ≡ Ez〜q0 [log(qη(z)∕p(z))]},	(1)
where We can get exact result P = q* if Q is chosen to be broad enough to actually include p. In
practice, however, Q should be chosen carefully to make the optimization in (1) computationally
tractable; this casts two constraints on Q:
1.	A minimum requirement is that we should be able to sample from qη efficiently, which allows us
to make estimates and predictions based on qη in placement of the more intractable P. The samples
from qη∣ can also be used to approximate the expectation Eq [∙] in (1) during optimization. This means
that there should exist some computable function f(η; ξ), called the inference network, which takes
a random seed ξ, whose distribution is denoted by q0, and outputs a random variable z = f (η; ξ)
whose distribution is qη .
2.	We should also be able to calculate the density qη (z) or it is derivative in order to optimize the
KL divergence in (1). This, however, casts a much more restrictive condition, since it requires us to
use only simple inference network f (η; ξ) and input distributions q0 to ensure a tractable form for
the density qη of the output z = f(η; ξ).
In fact, it is this requirement of calculating qη (z ) that has been the major constraint for the design
of state-of-the-art variational inference methods. The traditional VI methods are often limited to
1
Under review as a conference paper at ICLR 2017
Given distribution Inference network	Samples
Figure 1: Wild variational inference allows us to train general stochastic neural inference networks to learn to
draw (approximate) samples from the target distributions, without restriction on the computational tractability
of the density function of the neural inference networks.
using simple mean field, or Gaussian-based distributions as qη and do not perform well for approx-
imating complex target distributions. There is a line of recent work on variational inference with
rich approximation families (e.g., Rezende & Mohamed, 2015b; Tran et al., 2015; Ranganath et al.,
2015, to name only a few), all based on handcrafting special inference networks to ensure the com-
putational tractability of qη(z) while simultaneously obtaining high approximation accuracy. These
approaches require substantial mathematical insights and research effects, and can be difficult to
understand or use for practitioners without a strong research background in VI. Methods that allow
us to use arbitrary inference networks without substantial constraints can significantly simplify the
design and applications of VI methods, allowing practical users to focus more on choosing proposals
that work best with their specific tasks.
We use the term wild variational inference to refer to variants of variational methods working with
general inference networks f (η, ξ) without tractability constraints on its output density qη (z); this
should be distinguished with the black-box variational inference (Ranganath et al., 2014) which
refers to methods that work for generic target distributions p(z) without significant model-by-model
consideration (but still require to calculate the proposal density qη (z)). Essentially, wild variational
inference makes it possible to “learn to draw samples”, constructing black-box neural samplers for
given distributions. This enables more adaptive and automatic design of efficient Bayesian infer-
ence procedures, replacing the hand-designed inference algorithms with more efficient ones that can
improve their efficiency adaptively over time based on past tasks they performed.
In this work, we discuss two methods for wild variational inference, both based on recent works that
combine kernel techniques with Stein’s method (e.g., Liu & Wang, 2016; Liu et al., 2016). The first
method, also discussed in Wang & Liu (2016), is based on iteratively adjusting parameter η to make
the random output z = f(η; ξ) mimic a Stein variational gradient direction (SVGD) (Liu & Wang,
2016) that optimally decreases its KL divergence with the target distribution. The second method is
based on minimizing a kernelized Stein discrepancy, which, unlike KL divergence, does not require
to calculate density qη(z) for the optimization thanks to its special form.
Another critical problem is to design good network architectures well suited for Bayesian infer-
ence. Ideally, the network design should leverage the information of the target distribution p(z)
in a convenient way. One useful perspective is that we can view the existing MC/MCMC meth-
ods as (hand-designed) stochastic neural networks which can be used to construct native inference
networks for given target distributions. On the other hand, using existing MC/MCMC methods as
inference networks also allow us to adaptively adjust the hyper-parameters of these algorithms; this
enables amortized inference which leverages the experience on past tasks to accelerate the Bayesian
computation, providing a powerful approach for designing efficient algorithms in settings when a
large number of similar tasks are needed.
As an example, we leverage stochastic gradient Langevin dynamics (SGLD) (Welling & Teh, 2011)
as the inference network, which can be treated as a special deep residential network (He et al.,
2016), in which important gradient information Yz logP(Z) is fed into each layer to allow efficient
approximation for the target distribution p(z). In our case, the network parameter η are the step sizes
of SGLD, and our method provides a way to adaptively improve the step sizes, providing speed-up
on future tasks with similar structures. We show that the adaptively estimated step sizes significantly
outperform the hand-designed schemes such as Adagrad.
Related Works The idea of amortized inference (Gershman & Goodman, 2014) has been recently
applied in various domains of probabilistic reasoning, including both amortized variational inference
2
Under review as a conference paper at ICLR 2017
(e.g., Kingma & Welling, 2013; Rezende & Mohamed, 2015a) and date-driven designs of Monte
Carlo based methods (e.g., Paige & Wood, 2016), to name only a few. Most of these methods,
however, require to explicitly calculate qη (z) (or its gradient).
One well exception is a very recent work (Ranganath et al., 2016) that also avoids calculating qη(z)
and hence works for general inference networks; their method is based on a similar idea related
to Stein discrepancy (Liu et al., 2016; Oates et al., 2017; Chwialkowski et al., 2016; Gorham &
Mackey, 2015), for which we provide a more detailed discussion in Section 3.2.
The auxiliary variational inference methods (e.g., Agakov & Barber, 2004) provide an alternative
way when the variational distribution qη (z) can be represented as a hidden variable model. In
particular, Salimans et al. (2015) used the auxiliary variational approach to leverage MCMC as a
variational approximation. These approaches, however, still require to write down the likelihood
function on the augmented spaces, and need to introduce an additional inference network related to
the auxiliary variables.
There is a large literature on traditional adaptive MCMC methods (e.g., Andrieu & Thoms, 2008;
Roberts & Rosenthal, 2009) which can be used to adaptively adjust the proposal distribution of
MCMC by exploiting the special theoretical properties of MCMC (e.g., by minimizing the auto-
correlation). Our method is simpler, more generic, and works efficiently in practice thanks to the
use of gradient-based back-propagation. Finally, connections between stochastic gradient descent
and variational inference have been discussed and exploited in Mandt et al. (2016); Maclaurin et al.
(2015).
Outline Section 2 introduces background on Stein discrepancy and Stein variational gradient de-
scent. Section 3 discusses two methods for wild variational inference. Section 4 discuss using
stochastic gradient Langevin dynamics (SGLD) as the inference network. Empirical results are
shown in Section 5.
2 Stein’s Identity, S tein Discrepancy, Stein Variational Gradient
Stein’s identity Stein’s identity plays a fundamental role in our framework. Let p(z) be a positive
differentiable density on Rd, and φ(z) = [φι(z),…，φd(z)]> is a differentiable vector-valued
function. Define Yz ∙ φ = Pi ∂ziφ. Stein's identity is
Ez-p[hVz logp(z), φ(z)i + Vz ∙
φ(z)] =
X
Vz ∙ (p(z)φ(z))dx
(2)
which holds once p(z)φ(z) vanishes on the boundary of X by integration by parts or Stokes’ theo-
rem; It is useful to rewrite Stein’s identity in a more compact way:
Ez~p[TPΦ(ζ)] = 0,	with TPΦ = hVz logp, φi + Vz ∙ φ,	(3)
where Tp is called a Stein operator, which acts on function φ and returns a zero-mean function
Tpφ(z) under Z 〜p. A key computational advantage of Stein,s identity and Stein operator is
that they depend on p only through the derivative of the log-density Vz logp(z), which does not
depend on the cumbersome normalization constant of p, that is, when P(Z) = p(z)/Z, We have
Vz logP(Z) = Vz logp(z), independent of the normalization constant Z. This property makes
Stein’s identity a powerful practical tool for handling unnormalized distributions widely appeared in
machine learning and statistics.
Stein Discrepancy Although Stein’s identity ensures that Tpφ has zero expectation under p, its
expectation is generally non-zero under a different distribution q. Instead, forp 6= q, there must exist
a φ which distinguishes P and q in the sense that Ez~q[Tpφ(ζ)] = 0. Stein discrepancy leverages
this fact to measure the difference between p and qby considering the “maximum violation of Stein’s
identity” for φ in certain function set F :
D(q || p)=maχ {Ez~q[TPΦ(ζ)]},	(4)
φ∈F
where F is the set of functions φ that we optimize over, and decides both the discriminative power
and computational tractability of Stein discrepancy. Kernelized Stein discrepancy (KSD) is a special
3
Under review as a conference paper at ICLR 2017
Stein discrepancy that takes F to be the unit ball of vector-valued reproducing kernel Hilbert spaces
(RKHS), that is,
F = {φ ∈Hd: IIΦI∣Hd ≤ 1},	(5)
where H is a real-valued RKHS with kernel k(z, z0). This choice of F makes it possible to get a
closed form solution for the optimization in (4) (Liu et al., 2016; Chwialkowski et al., 2016; Oates
et al., 2017):
D(q || p) = max {Ez〜q[Tpφ(z)],	s.t.	∣∣Φ∣∣Hd ≤ 1},	(6)
φ∈Hd
= ʌ/Ez,z0^q [κp(z, z0)],	⑺
where κp(z, z0) is a positive definite kernel obtained by applying Stein operator on k(z, z0) twice:
κp(z,z0)= TP(TPz 乳 k(z,z0)),
=Sp(z)sp(Z)k(z, z0) + SP(ZRz0k(z, z0) + Sp(z0)Vzk(z, z0) + Nz ∙ (Vzok(ζ,Z)),
(8)
where sp(z) = Vz logp(z) and Tpz and Tpz denote the Stein operator when treating k(z, z0) as a
function of Z and z0, respectively; here We defined Tp 0k(z, z0) = Vx logp(x)k(z, z0) + Vχk(z, z0)
which returns a d × 1 vector-valued function. It can be shown that D(q || p) = 0 if and only if q = p
When k(Z, Z0) is strictly positive definite in a proper sense (Liu et al., 2016; ChWialkoWski et al.,
2016). D(q || p) can treated as a variant of maximum mean discrepancy equipped With kernel
κp(Z, Z0) Which depends onp (Which makes D(q || p) asymmetric on q and p).
The form of KSD in (6) alloWs us to estimate the discrepancy betWeen a set of sample {Zi} (e.g.,
draWn from q) and a distribution p specified by Vz log p(Z),
DU({zi} || P) = n(n- 1)Xlκp(zi,zj儿
i6=j
D2({%} ||P) = n12χ[κp(Zi,zj儿	⑼
i,j
where DU(q || P) provides an unbiased estimator (hence called a U-statistic) for D2(q || p), and
D2 (q || p), called V-statistic, provides a biased estimator but is guaranteed to be always non-
negative: D2({zi} ||p) ≥ 0.
Stein Variational Gradient Descent (SVGD) Stein operator and Stein discrepancy have a close
connection with KL divergence, which is exploited in Liu & Wang (2016) to provide a general
purpose deterministic approximate sampling method. Assume that {Zi}in=1 is a sample (or a set
of particles) drawn from q, and we want to update {Zi}in=1 to make it “move closer” to the target
distribution p to improve the approximation quality. We consider updates of form
Zi — Zi + eφ*(zi),	∀i = 1,...,n,	(10)
where φ* is a perturbation direction, or velocity field, chosen to maximumly decrease the KL diver-
gence between the distribution of updated particles and the target distribution, in the sense that
Φ* = arg max {-怖 KL(q[eφ] || p)∣e=0 },	(11)
where q[φ] denotes the density of the updated particle Z0 = Z + φ(Z) when the density of the
original particle Z is q, and F is the set of perturbation directions that we optimize over. A key ob-
servation (Liu & Wang, 2016) is that the optimization in (11) is in fact equivalent to the optimization
for KSD in (4); we have
-ddr KL(q[eφ] || p)le=0 = Jq [Tp0(Z)],	(12)
that is, the Stein operator transforms the perturbation φ on the random variable (the particles) to the
change of the KL divergence. Taking F to be unit ball of Hd as in (5), the optimal solution φ* of
(11) equals that of (6), which is shown to be (e.g., Liu et al., 2016)
Φ*(z0) H EzF[Tpzk(Z,Z0)] = EzF[Vz logP(Z)k(Z,Z0) + Vzk(Z, z0)].
4
Under review as a conference paper at ICLR 2017
Algorithm 1 Amortized SVGD and KSD Minimization for Wild Variational Inference
for iteration t do
1.	Draw random {ξi}in=1, calculate zi = f(η; ξi), and the Stein variational gradient ∆zi in
(13).
2.	Update parameter η using (14) or (15) for amortized SVGD, or (17) for KSD minimization.
end for
By approximating the expectation under q with the empirical mean of the current particles {zi}in=1,
SVGD admits a simple form of update that iteratively moves the particles towards the target distri-
bution,
Zi 《—Zi + E∆zi,	∀i = 1, .. ., n,
∆zi = Ez∈{zi}i=1 [Vz logp(z)k(z,Zi) + Vzk(z, Zi)],	(13)
where EZ〜"}n 1 [f (z)] = Pi f (zi)∕n. The two terms in ∆zi Play two different roles: the term
with the gradient Vz log p(Z) drives the particles towards the high probability regions of p(Z),
while the term with Vzk(Z, Zi) serves as a rePulsive force to encourage diversity; to see this, con-
sider a stationary kernel k(z, z0) = k(z 一 z0), then the second term reduces to EZVzk(z, Zi)=
-EZ VZik(z, Zi), which can be treated as the negative gradient for minimizing the average similarity
EZk(Z, Zi) in terms of Zi.
It is easy to see from (13) that ∆Zi reduces to the tyPical gradient VZ logp(Zi) when there is only a
single Particle (n = 1) and VZk(Z, Zi) when Z = Zi, in which case SVGD reduces to the standard
gradient ascent for maximizing logp(Z) (i.e., maximum a posteriori (MAP)).
3	Two Methods for Wild Variational Inference
Since the direct Parametric oPtimization of the KL divergence (1) requires calculating qη(Z), there
are two essential ways to avoid calculating qη(Z): either using alternative (aPProximate) oPtimiza-
tion aPProaches, or using different divergence objective functions. We discuss two Possible aP-
Proaches in this work: one based on “amortizing SVGD” (Wang & Liu, 2016) which trains the
inference network f(η, ξ) so that its outPut mimic the SVGD dynamics in order to decrease the KL
divergence; another based on minimizing the KSD objective (9) which does not require to evaluate
q(Z) thanks to its sPecial form.
3.1	Amortized SVGD
SVGD Provides an oPtimal uPdating direction to iteratively move a set of Particles {Zi} towards the
target distribution p(Z). We can leverage it to train an inference network f(η; ξ) by iteratively ad-
justing η so that the outPut of f(η; ξ) changes along the Stein variational gradient direction in order
to maximumly decrease its KL divergence with the target distribution. By doing this, we “amortize”
SVGD into a neural network, which allows us to leverage the Past exPerience to adaPtively imProve
the comPutational efficiency and generalize to new tasks with similar structures. Amortized SVGD
is also Presented in Wang & Liu (2016); here we Present some additional discussion.
To be sPecific, assume {ξi} are drawn from q0 and Zi = f(η; ξi) the corresPonding random outPut
based on the current estimation of η. We want to adjust η so that Zi changes along the Stein vari-
ational gradient direction ∆Zi in (13) so as to maximumly decrease the KL divergence with target
distribution. This can be done by uPdating η via
n
η J argmin £ Ilf (n； ξi) - Zi-E∆Zi∣∣2∙	(14)
η	i=1
Essentially, this Projects the non-Parametric Perturbation direction ∆Zi to the change of the finite
dimensional network Parameter η. If we take the steP size E to be small, then the uPdated η by (14)
should be very close to the old value, and a single steP of gradient descent of (14) can Provide a
5
Under review as a conference paper at ICLR 2017
good approximation for (14). This gives a simpler update rule:
η - η + eX dηf(η; ξiDzi,	(15)
i
which can be intuitively interpreted as a form of chain rule that back-propagates the SVGD gradient
to the network parameter η. In fact, when we have only one particle, (15) reduces to the stan-
dard gradient ascent for maxη logp(f(η; ξ)), in which fη is trained to “learn to optimize” (e.g.,
Andrychowicz et al., 2016), instead of “learn to sample” p(z). Importantly, as we have more than
one particles, the repulsive term Yzk(z, Zi) in ∆z% becomes active, and enforces an amount of di-
versity on the network output that is consistent with the variation in p(z). The full algorithm is
summarized in Algorithm 1.
Amortized SVGD can be treated as minimizing the KL divergence using a rather special algorithm:
it leverages the non-parametric SVGD which can be treated as approximately solving the infinite
dimensional optimization minq KL(q || p) without explicitly assuming a parametric form on q, and
iteratively projecting the non-parametric update back to the finite dimensional parameter space of
η. It is an interesting direction to extend this idea to “amortize” other MC/MCMC-based inference
algorithms. For example, given a MCMC with transition probability T (z0|z) whose stationary dis-
tribution is p(z), we may adjust η to make the network output move towards the updated values z0
drawn from the transition probability T (z0|z). The advantage of using SVGD is that it provides a
deterministic gradient direction which we can back-propagate conveniently and is particle efficient
in that it reduces to “learning to optimize” with a single particle. We have been using the simple
L2 loss in (14) mainly for convenience; it is possible to use other two-sample discrepancy measures
such as maximum mean discrepancy.
3.2	KSD Variational Inference
Amortized SVGD attends to minimize the KL divergence objective, but can not be interpreted as
a typical finite dimensional optimization on parameter η. Here we provide an alternative method
based on directly minimizing the kernelized Stein discrepancy (KSD) objective, for which, thanks
to its special form, the typical gradient-based optimization can be performed without needing to
estimate q(z) explicitly.
To be specific, take qη to be the density of the random output Z = f (η; ξ) when ξ 〜qo, and We
want to find η to minimize D(qη || p). Assuming {ξi } is i.i.d. drawn from q0, we can approximate
D2(qη || p) unbiasedly with a U-statistics:
D2(qη || P) ≈ ( ) 1)Xκp(f(η; ξi), f(η; ξ)),	(16)
n(n - 1) i6=j
for which a standard gradient descent can be derived for optimizing η:
2
η J η - E ( - 1) Tdnf(η; ξi)YziKp(zi,Zj),	where	Zi = f (η; ξi).	(17)
n(n - 1) i6=j
This enables a wild variational inference method based on directly minimizing η with standard
(stochastic) gradient descent. See Algorithm 1. Note that (17) is similar to (15) in form, but replaces
∆ζi with a ∆zi α — Ej. i=j VziKp(zi, Zj). It is also possible to use the V-statistic in (9), but
we find that the U -statistic performs much better in practice, possibly because of its unbiasedness
property.
Minimizing KSD can be viewed as minimizing a constrastive divergence objective function. To see
this, recall that q[eψ] denotes the density of z0 = Z + eφ(z) when Z 〜q. Combining (11) and (6),
we can show that
D2(q Il P) ≈ 1 (KL(q Ilp) - KL(q[eφ] || p)).
That is, KSD measures the amount of decrease of KL divergence when we update the particles
along the optimal SVGD perturbation direction φ given by (11). If q = P, then the decrease of KL
6
Under review as a conference paper at ICLR 2017
divergence equals zero and D2(q || p) equals zero. In fact, as shown in Liu & Wang (2016) KSD can
be explicitly represented as the magnitude of a functional gradient of KL divergence:
D(q || P)TIdφ KL(q[Φ] || p)∣Φ=o∣∣Hd，
where q@ is the density of Z = Z + φ(z) when Z 〜q, and dφF(φ) denotes the functional gradient
of functional F(φ) w.r.t. φ defined in RKHS Hd, and dφ F(φ) is also an element in Hd. Therefore,
KSD variational inference can be treated as explicitly minimizing the magnitude of the gradient of
KL divergence, in contract with amortized SVGD which attends to minimize the KL divergence
objective itself.
This idea is also similar to the contrastive divergence used for learning restricted Boltzmann ma-
chine (RBM) (Hinton, 2002) (which, however, optimizes p with fixed q). It is possible to extend this
approach by replacing Z0 = Z + φ(Z) with other transforms, such as these given by a transition
probability of a Markov chain whose stationary distribution is p. In fact, according the so called gen-
erator method for constructing Stein operator (Barbour, 1988), any generator of a Markov process
defines a Stein operator that can be used to define a corresponding Stein discrepancy.
This idea is related to a very recent work by Ranganath et al. (2016), which is based on directly
minimizing the variational form of Stein discrepancy in (4); Ranganath et al. (2016) assumes F
consists of a neural network φτ(Z) parametrized by τ, and find η by solving the following min-max
problem:
min max Ez〜q [TPΦτ(z)].
In contrast, our method leverages the closed form solution by taking F to be an RKHS and hence
obtains an explicit optimization problem, instead of a min-max problem that can be computationally
more expensive, or have difficulty in achieving convergence.
Because Kp (x, x0) (defined in (8)) depends on the derivative Yx logp(χ) of the target distribution,
the gradient in (17) depends on the Hessian matrix Vx logp(χ) and is hence less convenient to im-
plement compared with amortized SVGD (the method by Ranganath et al. (2016) also has the same
problem). However, this problem can be alleviated using automatic differentiation tools, which be
used to directly take the derivative of the objective in (16) without manually deriving its derivatives.
4	Langevin Inference Network
With wild variational inference, we can choose more complex inference network structures to obtain
better approximation accuracy. Ideally, the best network structure should leverage the special prop-
erties of the target distribution p(Z) in a convenient way. One way to achieve this by viewing existing
MC/MCMC methods as inference networks with hand-designed (and hence potentially suboptimal)
parameters, but good architectures that take the information of the target distribution p(Z) into ac-
count. By applying wild variational inference on networks constructed based on existing MCMC
methods, we effectively provide an hyper-parameter optimization for these existing methods. This
allows us to fully optimize the potential of existing Bayesian inference methods, significantly im-
proving the result with less computation cost, and decreasing the need for hyper-parameter tuning
by human experts. This is particularly useful when we need to solve a large number of similar tasks,
where the computation cost spent on optimizing the hyper-parameters can significantly improve the
performance on the future tasks.
Stochastic Gradient Langevin Dynamics We first take the original stochastic gradient Langevin
dynamics (SGLD) algorithm (Welling & Teh, 2011) as an example. SGLD starts with a random
initialization Z0, and perform iterative update of form
zt+1 - Zt + ηt OVz logP(zt; Mt) + P2ηηt Θ ξt,	∀t = 1,…T,	(18)
where logP(Zt Mt) denotes an approximation of logP(Zt) based on, e.g., a random mini-batch
Mt of observed data at t-th iteration, and ξt is a standard Gaussian random vector of the same size
as Z, and ηt denotes a (vector) step-size at t-th iteration; here "O" denotes element-wise product.
When running SGLD for T iterations, we can treat ZT as the output of a T -layer neural network
7
Under review as a conference paper at ICLR 2017
Figure 2: Results on a 1D Gaussian mixture when training the step sizes of SGLD with T = 20
iterations. The target distribution p(x) is shown by the red dashed line. (a) The distribution of
the initialization z0 of SGLD (the green line), visualized by kernel density estimator. (b)-(d) The
distribution of the final output zT (green line) given by different types of step sizes, visualized by
kernel density estimator.
parametrized by the collection of step sizes η = {ηt}tT=1, whose random inputs include the random
initialization z0, the mini-batch Mt and Gaussian noise ξt at each iteration t. We can see that this
defines a rather complex network structure with several different types of random inputs (z0, Mt
and ξt). This makes it intractable to explicitly calculate the density of zT and traditional variational
inference methods can not be applied directly. But wild variational inference can still allow us to
adaptively improve the optimal step-size η in this case.
General Langevin Networks Based on the original formula of SGLD, we proposed a more gen-
eral langevin network structure, and each layer of the network has a form
zt+1 - Atzt + h(BtBtτVz logp^(zt; Mt) + Btξt + Dt), Vt = 1,…T, (19)
where At, Bt and Dt are network parameters at t-th iteration(whose size is d × d, and d is the size
of zt), and h(∙) denotes a smooth element-wise non-linearity function; here ξt is still a standard
gaussian random vector with the same size as z. With this more complex network, we can use fewer
layers to construct more powerful back-box samplers.
5	Empirical Results
5.1	SGLD Inference Network
We first test our algorithm with SGLD inference network with (18) formula on both a toy Gaussian
mixture model and a Bayesian logistic regression example. We find that we can adaptively learn
step sizes that significantly outperform the existing hand-designed step size schemes, and hence
save computational cost in the testing phase. In particular, we compare with the following step
size schemes, for all of which we report the best results (testing accuracy in Figure 3(a); testing
likelihood in Figure 3(b)) among a range of hyper-parameters:
1.	Constant Step Size. We select a best constant step size in {1, 2, 23, . . . , 229} × 10-6.
2.	Power Decay Step Size. We consider t = 10a × (b + t)-γ where γ = 0.55, a ∈
{-6, -5, . . . , 1, 2}, b ∈ {0, 1, . . . , 9}.
3.	Adagrad, Rmsprop, Adadelta, all with the master step size selected in {1, 2, 23, . . . , 229} × 10-6,
with the other parameters chosen by default values.
Gaussian Mixture We start with a simple 1D Gaussian mixture example shown in Figure 2 where
the target distribution p(z) is shown by the red dashed curve. We use amortized SVGD and KSD
to optimize the step size parameter of the Langevin inference network in (18) with T = 20 layers
(i.e., SGLD with T = 20 iterations), with an initial z0 drawn from a q0 far away from the target
distribution (see the green curve in Figure 2(a)); this makes it critical to choose a proper step size
to achieve close approximation within T = 20 iterations. We find that amortized SVGD and KSD
allow us to achieve good performance with 20 steps of SGLD updates (Figure 2(b)-(c)), while the
result of the best constant step size and power decay step-size are much worse (Figure 2(d)-(e)).
8
Under review as a conference paper at ICLR 2017
Steps
(a)
0.55
-0.6
-0.65
100
50
Steps
(b)
-0.7
10
→-Amortized SVGD
T KSD U-StatiStiC
-H-Adadelta
-+-Constant Rate
HIHPower Decay Rate
—RMSprop
T Adagrad
-7-SGLD(fully converged)
τ∙SVGD(fully Converged)
Figure 3: The testing accuracy (a) and testing likelihood (b) when training Langevin inference net-
work with T ∈ {10, 50, 100} layers, respectively. The results reported here are the performance of
the final result zT outputted by the last layer of the network. We find that both amortized SVGD
and KSD minimization (with U-statistics) outperform all the hand-designed learning rates. Results
averaged on 100 random trails.
Bayesian Logistic Regression We consider Bayesian logistic regression for binary classification
using the same setting as Gershman et al. (2012), which assigns the regression weights w with a
Gaussian prior po(w∣α) = N(w, α-1) andpo(α) = Gamma(a, 1, 0.01). The inference is applied
on the posterior ofz = [w, log α]. We test this model on the binary Covertype dataset1 with 581,012
data points and 54 features.
To demonstrate that our estimated learning rate can work well on new datasets never seen by the
algorithm. We partition the dataset into mini-datasets of size 50, 000, and use 80% of them for
training and 20% for testing. We adapt our amortized SVGD/KSD to train on the whole population
of the training mini-datasets by randomly selecting a mini-dataset at each iteration of Algorithm 1,
and evaluate the performance of the estimated step sizes on the remaining 20% testing mini-datasets.
Figure 3 reports the testing accuracy and likelihood on the 20% testing mini-datasets when we
train the Langevin network with T = 10, 50, 100 layers, respectively. We find that our methods
outperform all the hand-designed learning rates, and allow us to get performance closer to the fully
converged SGLD and SVGD with a small number T of iterations.
Figure 4 shows the testing accuracy and testing likelihood of all the intermediate results when train-
ing Langevin network with T = 100 layers. It is interesting to observe that amortized SVGD and
KSD learn rather different behavior: KSD tends to increase the performance quickly at the first few
iterations but saturate quickly, while amortized SVGD tends to increase slowly in the beginning
and boost the performance quickly in the last few iterations. Note that both algorithms are set up
to optimize the performance of the last layers, while need to decide how to make progress on the
intermediate layers to achieve the best final performance.
5.2	General Langevin Inference Network
We further test our algorithm with general Langevin inference network. We firstly construct one
single layer general Langevin network to approach the posterior of Bayesian logistic regression pa-
rameters and we can achieve 74.58% average accuracy and -0.5216 average testing log-likelihood
in 100 repeat experiments. This result proves the proposed general Langevin Inference Network is
quite competitive and worth to explore. Moreover, we use it as a black-box sampler to approach
more complicate Gaussian Mixture distributions.
Gaussian Mixture We consider 10 components Gaussian Mixture Models with mean and co-
variance matrix of each component randomly drawed from a uniform distribution, and we test our
methods on different dimensions models.
We construct 6 layers of general Langevin networks as a black-box sampler, and our proposed two
methods to train the black-box sampler to approximate the target distribution. Figure 5 shows our
1 https://www.csie.ntu.edu.tw/~cjlin∕libsvmtools∕datasets∕binary.html
9
Under review as a conference paper at ICLR 2017
575655
.7 0. .6 0. .5 0.
000
ycaruccA
50	100
Intermediate Steps
(a)
Intermediate Steps
(b)
-^Amortized SVGD
^^KSD U-StatistiC
THAdadelta
―^Constant Rate
-HFPower Decay Rate
-0-RMSprop
→^Adagrad
O
Figure 4:	The testing accuracy (a) and testing likelihood (b) of the outputs of the intermediate layers
when training the Langevin network with T = 100 layers. Note that both amortized SVGD and
KSD minimization target to optimize the performance of the last layer, but need to optimize the
progress of the intermediate steps in order to achieve the best final results.
results on 50 dimension Gaussian Mixture case and figure 6 shows results of different dimensions
of Gaussian Mixture. From the figures we can know that our proposed sampling structure is quite
competive comparing with NUT sampler(Hoffman & Gelman, 2014), and these two variational
inference methods can both train a good black-box sampler.
321
ESM01gol
-1
1
2
Particle
(b)	E(x2)
0 -1 -2
ESM01gol
-M-Langevin VGD
♦NUTS
T KSD U-StatiStic
012
Particle
(c)	E(x)
0
Figure 5:	Comparation between our methods and NUTS on 50 dimension Gaussian Mixture. (a)-(c)
show the mean square errors when using different number particles to estimate expectation E(h(x))
for h(x) = x, x2, and cos(x + b); for cos(ωx + b), we random draw ω ~ N(0,1) and b ~
Uniform([0, 2π]) and report the average MSE over 10 random draws of and b.
-2.1
-2.4
-2.2
ω
-2.3
6
O
20	40
Dimension
56
.6 0.
0
555
.5 0. .4
00
ESM01gol
0.4
60
0.35」*
0	20	40	60
Dimension
-1
.2 .3 .4 .5 .6
- E-SM-01g-ol -
-M-Langevin VGD
♦NUTS
T KSD U-StatiStic
E(cos(wx + b))	E(x2)	E(x)
Figure 6:	Comparation between our methods and NUTS For different dimension Gaussian Mixture.
(a)-(c) show the mean square errors when using different number particles to estimate expectation
E(h(x)) for h(x) = x, x2, and cos(x + b); for cos(ωx + b), We random draw ω ~ N(0,1) and
b ~ Uniform([0,2∏]) and report the average MSE over 10 random draws of and b.
10
Under review as a conference paper at ICLR 2017
6 Conclusion
We consider two methods for wild variational inference that allows us to train general inference net-
works with intractable density functions, and apply it to adaptively estimate step sizes of stochastic
gradient Langevin dynamics. More studies are needed to develop better methods, more applications
and theoretical understandings for wild variational inference, and we hope that the two methods we
discussed in the paper can motivate more ideas and studies in the field.
References
Agakov, Felix V and Barber, David. An auxiliary variational method. In International Conference on Neural
Information Processing, pp. 561-566. Springer, 2004.
Andrieu, Christophe and Thoms, Johannes. A tutorial on adaptive mcmc. Statistics and Computing, 18(4):
343-373, 2008.
Andrychowicz, Marcin, Denil, Misha, Gomez, Sergio, Hoffman, Matthew W, Pfau, David, Schaul, Tom,
and de Freitas, Nando. Learning to learn by gradient descent by gradient descent. arXiv preprint
arXiv:1606.04474, 2016.
Barbour, Andrew D. Stein’s method and poisson process convergence. Journal of Applied Probability, pp.
175-184, 1988.
Chwialkowski, Kacper, Strathmann, Heiko, and Gretton, Arthur. A kernel test of goodness of fit. In Proceedings
of the International Conference on Machine Learning (ICML), 2016.
Gershman, Samuel, Hoffman, Matt, and Blei, David. Nonparametric variational inference. In Proceedings of
the International Conference on Machine Learning (ICML), 2012.
Gershman, Samuel J and Goodman, Noah D. Amortized inference in probabilistic reasoning. In Proceedings
of the 36th Annual Conference of the Cognitive Science Society, 2014.
Gorham, Jack and Mackey, Lester. Measuring sample quality with Stein’s method. In Advances in Neural
Information Processing Systems (NIPS), pp. 226-234, 2015.
He, Kaiming, Zhang, Xiangyu, Ren, Shaoqing, and Sun, Jian. Deep residual learning for image recognition. In
CVPR, 2016.
Hinton, Geoffrey E. Training products of experts by minimizing contrastive divergence. Neural computation,
14(8):1771-1800, 2002.
Hoffman, Matthew D and Gelman, Andrew. The no-u-turn sampler: adaptively setting path lengths in hamilto-
nian monte carlo. Journal of Machine Learning Research, 15(1):1593-1623, 2014.
Hoffman, Matthew D, Blei, David M, Wang, Chong, and Paisley, John. Stochastic variational inference. JMLR,
2013.
Kingma, Diederik P and Welling, Max. Auto-encoding variational Bayes. In Proceedings of the International
Conference on Learning Representations (ICLR), 2013.
Liu, Qiang and Wang, Dilin. Stein variational gradient descent: A general purpose bayesian inference algo-
rithm. arXiv preprint arXiv:1608.04471, 2016.
Liu, Qiang, Lee, Jason D, and Jordan, Michael I. A kernelized Stein discrepancy for goodness-of-fit tests. In
Proceedings of the International Conference on Machine Learning (ICML), 2016.
Maclaurin, Dougal, Duvenaud, David, and Adams, Ryan P. Early stopping is nonparametric variational infer-
ence. arXiv preprint arXiv:1504.01344, 2015.
Mandt, Stephan, Hoffman, Matthew D, and Blei, David M. A variational analysis of stochastic gradient algo-
rithms. arXiv preprint arXiv:1602.02666, 2016.
Oates, Chris J, Girolami, Mark, and Chopin, Nicolas. Control functionals for Monte Carlo integration. Journal
of the Royal Statistical Society, Series B, 2017.
Paige, Brooks and Wood, Frank. Inference networks for sequential monte carlo in graphical models. arXiv
preprint arXiv:1602.06701, 2016.
11
Under review as a conference paper at ICLR 2017
Ranganath, R., Altosaar, J., Tran, D., and Blei, D.M. Operator variational inference. 2016.
Ranganath, Rajesh, Gerrish, Sean, and Blei, David M. Black box variational inference. In Proceedings of the
International Conference on Artificial Intelligence and Statistics (AISTATS), 2014.
Ranganath, Rajesh, Tran, Dustin, and Blei, David M. Hierarchical variational models. arXiv preprint
arXiv:1511.02386, 2015.
Rezende, Danilo Jimenez and Mohamed, Shakir. Variational inference with normalizing flows. In Proceedings
of the International Conference on Machine Learning (ICML), 2015a.
Rezende, Danilo Jimenez and Mohamed, Shakir. Variational inference with normalizing flows. arXiv preprint
arXiv:1505.05770, 2015b.
Roberts, Gareth O and Rosenthal, Jeffrey S. Examples of adaptive mcmc. Journal of Computational and
Graphical Statistics,18(2):349-367, 2009.
Salimans, Tim et al. Markov chain monte carlo and variational inference: Bridging the gap. In International
Conference on Machine Learning, 2015.
Tran, Dustin, Ranganath, Rajesh, and Blei, David M. Variational gaussian process. arXiv preprint
arXiv:1511.06499, 2015.
Wang, Dilin and Liu, Qiang. Learning to draw samples: With application to amortized mle for generative
adversarial learning. Submitted to ICLR 2017, 2016.
Welling, Max and Teh, Yee W. Bayesian learning via stochastic gradient Langevin dynamics. In Proceedings
of the International Conference on Machine Learning (ICML), 2011.
12