Published as a conference paper at ICLR 2017
Recurrent Environment Simulators
Silvia Chiappa, Sebastien Racaniere, Daan Wierstra & Shakir Mohamed
DeepMind, London, UK
{csilvia, sracaniere, wierstra, shakir}@google.com
Ab stract
Models that can simulate how environments change in response to actions can be
used by agents to plan and act efficiently. We improve on previous environment
simulators from high-dimensional pixel observations by introducing recurrent
neural networks that are able to make temporally and spatially coherent predictions
for hundreds of time-steps into the future. We present an in-depth analysis of the
factors affecting performance, providing the most extensive attempt to advance
the understanding of the properties of these models. We address the issue of
computationally inefficiency with a model that does not need to generate a high-
dimensional image at each time-step. We show that our approach can be used to
improve exploration and is adaptable to many diverse environments, namely 10
Atari games, a 3D car racing environment, and complex 3D mazes.
1	Introduction
In order to plan and act effectively, agent-based systems require an ability to anticipate the conse-
quences of their actions within an environment, often for an extended period into the future. Agents
can be equipped with this ability by having access to models that can simulate how the environments
changes in response to their actions. The need for environment simulation is widespread: in psy-
chology, model-based predictive abilities form sensorimotor contingencies that are seen as essential
for perception (O'Regan & Noe, 2001); in neuroscience, environment simulation forms part of
deliberative planning systems used by the brain (Niv, 2009); and in reinforcement learning, the ability
to imagine the future evolution of an environment is needed to form predictive state representations
(Littman et al., 2002) and for Monte Carlo planning (Sutton & Barto, 1998).
Simulating an environment requires models of temporal sequences that must possess a number
of properties to be useful: the models should make predictions that are accurate, temporally and
spatially coherent over long time periods; and allow for flexibility in the policies and action sequences
that are used. In addition, these models should be general-purpose and scalable, and able to learn
from high-dimensional perceptual inputs and from diverse and realistic environments. A model that
achieves these desiderata can empower agent-based systems with a vast array of abilities, including
counterfactual reasoning (Pearl, 2009), intuitive physical reasoning (McCloskey, 1983), model-based
exploration, episodic control (Lengyel & Dayan, 2008), intrinsic motivation (Oudeyer et al., 2007),
and hierarchical control.
Deep neural networks have recently enabled significant advances in simulating complex environments,
allowing for models that consider high-dimensional visual inputs across a wide variety of domains
(Wahlstrom et al., 2015; Watter et al., 2015; Sun et al., 2015; Patraucean et al., 2015). The model of
Oh et al. (2015) represents the state-of-the-art in this area, demonstrating high long-term accuracy in
deterministic and discrete-action environments.
Despite these advances, there are still several challenges and open questions. Firstly, the properties
of these simulators in terms of generalisation and sensitivity to the choices of model structure and
training are poorly understood. Secondly, accurate prediction for long time periods into the future
remains difficult to achieve. Finally, these models are computationally inefficient, since they require
the prediction of a high-dimensional image each time an action is executed, which is unnecessary in
situations where the agent is interested only in the final prediction after taking several actions.
In this paper we advance the state-of-the-art in environment modelling. We build on the work of Oh
et al. (2015), and develop alternative architectures and training schemes that significantly improves
performance, and provide in-depth analysis to advance our understanding of the properties of these
1
Published as a conference paper at ICLR 2017
(a)
(b)
Figure 1: Graphical model representing (a) the recurrent structure used in Oh et al. (2015) and (b) our
recurrent structure. Filled and empty nodes indicate observed and hidden variables respectively.
models. We also introduce a simulator that does not need to predict visual inputs after every action,
reducing the computational burden in the use of the model. We test our simulators on three diverse
and challenging families of environments, namely Atari 2600 games, a first-person game where an
agent moves in randomly generated 3D mazes, and a 3D car racing environment; and show that they
can be used for model-based exploration.
2	Recurrent Environment S imulators
An environment simulator is a model that, given a sequence of actions aι,..., a/一ι ≡ ai：T-ι and
corresponding observations xi：T of the environment, is able to predict the effect of subsequent
actions a「:T+τ'-ι, SUCh as forming predictions XT+1：T+τ，or state representations ST+1：T+τ，of the
environment.
Our starting point is the recurrent simulator of Oh et al. (2015), which is the state-of-the-art in
simulating deterministic environments with visual observations (frames) and discrete actions. This
simulator is a recurrent neural network with the following backbone structure:
St = f(st-i,C(I(Xt-i, Xt-I))),	Xt = D(St,at-i).
In this equation, st is a hidden state representation of the environment, and f a non-linear deterministic
state transition function. The symbol I indicates the selection of the predicted frame Xt-i or real
frame Xt-1, producing two types of state transition called prediction-dependent transition and
observation-dependent transition respectively. C is an encoding function consisting of a series of
convolutions, and D is a decoding function that combines the state St with the action at-1 through
a multiplicative interaction, and then transforms it using a series of full convolutions to form the
predicted frame Xt.
The model is trained to minimise the mean squared error between the observed time-series XT+1：T+T0,
corresponding to the evolution of the environment, and its prediction. In a probabilistic framework,
this corresponds to maximising the log-likelihood in the graphical model depicted in Fig. 1(a). In
this graph, the link from Xt to Xt represents stochastic dependence, as Xt is formed by adding to
Xt a Gaussian noise term with zero mean and unit variance, whilst all remaining links represent
deterministic dependences. The dashed lines indicate that only one of the two links is active,
depending on whether the state transition is prediction-dependent or observation-dependent.
The model is trained using stochastic gradient decent, in which each mini-batch consists of a set
of segments of length τ + T randomly sub-sampled from X1：T+T0. For each segment in the mini-
batch, the model uses the first τ observations to evolve the state and forms predictions of the last T
observations only. Training comprises three phases differing in the use of prediction-dependent or
observation-dependent transitions (after the first τ transitions) and in the value of the prediction
length T. In the first phase, the model uses observation-dependent transitions and predicts for T = 10
time-steps. In the second and third phases, the model uses prediction-dependent transitions and
predicts for T = 3 and T = 5 time-steps respectively. During evaluation or usage, the model can
only use prediction-dependent transitions.
2
Published as a conference paper at ICLR 2017
Action-Dependent State Transition
A strong feature of the model of Oh et al. (2015) described above is that the actions influence the
state transitions only indirectly through the predictions or the observations. Allowing the actions
to condition the state transitions directly could potentially enable the model to incorporate action
information more effectively. We therefore propose the following backbone structure:
St = f(st-i,at-i,C(I(Xt-1, Xt-I))), Xt = D(St).
In the graphical model representation, this corresponds to replacing the link from at-ι to Xt with a
link from at-1 to St as in Fig. 1(b).
Short-Term versus Long-Term Accuracy
The last two phases in the training scheme of Oh et al. (2015) described above are used to address the
issue of poor accuracy that recurrent neural networks trained using only observation-dependent tran-
sitions display when asked to predict several time-steps ahead. However, the paper does not analyse
nor discuss alternative training schemes.
In principle, the highest accuracy should be obtained by training the model as closely as possible
to the way it will be used, and therefore by using a number of prediction-dependent transitions
which is as close as possible to the number of time-steps the model will be asked to predict for.
However, prediction-dependent transitions increase the complexity of the objective function such
that alternative schemes are most often used (Talvitie, 2014; Bengio et al., 2015; Oh et al., 2015).
Current training approaches are guided by the belief that using the observation Xt-1, rather than the
prediction Xt-ι, to form the state St has the effect of reducing the propagation of the errors made in
the predictions, which are higher at earlier stages of the training, enabling the model to correct itself
from the mistakes made up to time-step t- 1. For example, Bengio et al. (2015) introduce a scheduled
sampling approach where at each time-step the type of state transition is sampled from a Bernoulli
distribution, with parameter annealed from an initial value corresponding to using only observation-
dependent transitions to a final value corresponding to using only prediction-dependent transitions,
according to a schedule selected by validation.
Our analysis of different training schemes on Atari, which considered the interplay among warm-up
length τ, prediction length T, and number of prediction-dependent transitions, suggests that, rather
than as having a corrective effect, observation-dependent transitions should be seen as restricting the
time interval in which the model considers its predictive abilities, and therefore focuses resources.
Indeed we found that, the higher the number of consecutive prediction-dependent transitions, the more
the model is encouraged to focus on learning the global dynamics of the environment, which results in
higher long-term accuracy. The highest long-term accuracy is always obtained by a training scheme
that uses only prediction-dependent transitions even at the early stages of the training. Focussing on
learning the global dynamics comes at the price of shifting model resources away from learning the
precise details of the frames, leading to a decrease in short-term accuracy. Therefore, for complex
games for which reasonable long-term accuracy cannot be obtained, training schemes that mix
prediction-dependent and observation-dependent transitions are preferable. It follows from this
analysis that percentage of consecutive prediction-dependent transitions, rather than just percentage
of such transitions, should be considered when designing training schemes.
From this viewpoint, the poor results obtained in Bengio et al. (2015) when using only prediction-
dependent transitions can be explained by the difference in the type of the tasks considered. Indeed,
unlike our case in which the model is tolerant to some degree of error such as blurriness in earlier
predictions, the problems considered in Bengio et al. (2015) are of discrete nature and such that
one prediction error at earlier time-steps can severely affect predictions at later time-steps, so that
the model needs to be highly accurate short-term in order to perform reasonably longer-term. Also,
Bengio et al. (2015) treated the prediction used to form St as a fixed quantity, rather than as a function
of St-1, and therefore did not perform exact maximum likelihood.
Prediction-Independent State Transition
In addition to potentially enabling the model to incorporate action information more effectively,
allowing the actions to directly influence the state dynamics has another crucial advantage: it
allows to consider the case of a state transition that does not depend on the frame, i.e. of the form
St = f (st-ι,at-ι), corresponding to removing the dashed links from Xt-ι and from Xt-ι to St in
3
Published as a conference paper at ICLR 2017
Fig. 1(b). We shall call such a model prediction-independent simulator, referring to its ability to
evolve the state without using the prediction during usage. Prediction-independent state transitions
for high-dimensional observation problems have also been considered in Srivastava et al. (2015).
A prediction-independent simulator can dramatically increase computational efficiency in situations
is which the agent is interested in the effect of a sequence of actions rather than of a single action.
Indeed, such a model does not need to project the lower dimensional state into the higher dimensional
prediction through the set of convolutions and vice versa at each time-step.
3	Prediction-Dependent S imulators
We analyse simulators with state transition of the form St = f (st-ι, at-ι,C(I(Xt-1, Xt-I))) on
three families of environments with different characteristics and challenges, namely Atari 2600 games
from the arcade learning environment (Bellemare et al., 2013), a first-person game where an agent
moves in randomly generated 3D mazes (Beattie et al., 2016), and a 3D car racing environment called
TORCS (Wymann et al., 2013). We use two evaluation protocols. In the first one, the model is asked
to predict for 100 or 200 time-steps into the future using actions from the test data. In the second one,
a human uses the model as an interactive simulator. The first protocol enables us to determine how
the model performs within the action policy of the training data, whilst the second protocol enables
us to explore how the model generalises to other action policies.
As state transition, we used the following action-conditioned long short-term memory (LSTM)
(Hochreiter & Schmidhuber, 1997):
Encoding: zt-i = C(I(Xt-1, Xt-I)),	(1)
Action fusion: vt = Whht-I 0 Waat-I,	(2)
Gate update: it = σ(Wivvt + Wizzt-1), ft = σ(Wfvvt + Wfzzt-1),
ot = σ(Wovvt + Wozzt-1),	(3)
Cell update: ct = ft 0 ct-1 + it 0 tanh(Wcvvt + Wczzt-1) ,	(4)
State update: ht = ot 0 tanh(ct) ,	(5)
where 0 denotes the Hadamard product, σ the logistic sigmoid function, at-1 is a one-hot vector
representation of at-ι, and W are parameter matrices. In Eqs. (2)-(5), ht and Ct are the LSTM state
and cell forming the model state st = (ht, ct); and it, ft, and ot are the input, forget, and output gates
respectively (for simplicity, we omit the biases in their updates). More details about this structure and
exact form of the encoding and decoding functions C and D for each family of environments can be
found in Appendix B.1, B.2 and B.3. We used a warm-up phase of length τ = 10 and we did not
backpropagate the gradient to this phase.
3.1	Atari
We considered the 10 Atari games Freeway, Ms Pacman, Qbert, Seaquest, Space Invaders, Bowling,
Breakout, Fishing Derby, Pong, and Riverraid. Of these, the first five were analysed in Oh et al.
(2015) and are used for comparison. The remaining five were chosen to better test the ability of
the model in environments with other challenging characteristics, such as scrolling backgrounds
(Riverraid), small/thin objects that are key aspects of the game (lines in Fishing Derby, ball in Pong
and Breakout), and sparse-reward games that require very long-term predictions (Bowling). We used
training and test datasets consisting of five and one million 210×160 RGB images respectively, with
actions chosen from a trained DQN agent (Mnih et al., 2015) according to an = 0.2-greedy policy.
Such a large number of training frames ensured that our simulators did not strongly overfit to the
training data (see training and test lines in Figs. 2 and 3, and the discussion in Appendix B.1).
Short-Term versus Long-Term Accuracy
Below we summarise our results on the interplay among warm-up length τ, prediction length T , and
number of prediction-dependent transitions - the full analysis is given in Appendix B.1.1.
The warm-up and prediction lengths τ and T regulate degree of accuracy in two different ways. 1)
The value ofτ +T determines how far into the past the model can access information - this is the case
irrespectively of the type of transition used, although when using prediction-dependent transitions
4
Published as a conference paper at ICLR 2017
information about the last T time-steps of the environment would need to be inferred. Accessing
information far back into the past can be necessary even when the model is used to perform one-step
ahead prediction only. 2) The higher the value of T and the number of prediction-dependent transi-
tions, the more the corresponding objective function encourages long-term accuracy. This is achieved
by guiding the one-step ahead prediction error in such a way that further predictions will not be
strongly affected, and by teaching the model to make use of information from the far past. The
more precise the model is in performing one-step ahead prediction, the less noise guidance should be
required. Therefore, models with very accurate convolutional and transition structures should need
less encouragement.
Increasing the percentage of consecutive prediction-dependent transitions increases long-term
accuracy, often at the expense of short-term accuracy. We found that using only observation-
dependent transitions leads to poor performance in most games. Increasing the number of consecutive
prediction-dependent transitions produces an increase in long-term accuracy, but also a decrease
in short-term accuracy usually corresponding to reduction in sharpness. For games that are too
complex, although the lowest prediction error is still achieved with prediction-dependent transitions
only, reasonable long-term accuracy cannot be obtained, and training schemes that mix prediction-
dependent and observation-dependent transitions are therefore preferable.
To illustrate these results, we compare the following training schemes for prediction length T = 15:
•	0% PDT: Only observation-dependent transitions.
•	33% PDT: Observation and prediction-dependent transitions for the first 10 and last 5 time-steps
respectively.
•	0%-20%-33% PDT: Only observation-dependent transitions in the first 10,000 parameter updates;
observation-dependent transitions for the first 12 time-steps and prediction-dependent transitions for
the last 3 time-steps for the subsequent 100,000 parameters updates; observation-dependent transi-
tions for the first 10 time-steps and prediction-dependent transitions for the last 5 time-steps for the
remaining parameter updates (adaptation of the training scheme of Oh et al. (2015) to T = 15).
•	46% PDT Alt.: Alternate between observation-dependent and prediction-dependent transitions
from a time-step to the next.
•	46% PDT: Observation and prediction-dependent transitions for the first 8 and last 7 time-steps
respectively.
•	67% PDT: Observation and prediction-dependent transitions for the first 5 and last 10 time-steps
respectively.
•	0%-100% PDT: Only observation-dependent transitions in the first 1000 parameter updates; only
prediction-dependent transitions in the subsequent parameter updates.
•	100% PDT: Only prediction-dependent transitions.
For completeness, we also consider a training scheme as in Oh et al. (2015), which consists of three
phases with T = 10, T = 3, T = 5, and 500,000, 250,000, 750,000 parameter updates respectively.
In the first phase st is formed by using the observed frame xt-1, whilst in the two subsequent phases
St is formed by using the predicted frame Xt-ι.
In Figs. 2 and 3 we show the prediction error averaged over 10,000 sequences1 for the games of
Bowling2, Fishing Derby, Pong and Seaquest. More specifically, Fig. 2(a) shows the error for
predicting up to 100 time-steps ahead after the model has seen 200 million frames (corresponding
to half million parameter updates using mini-batches of 16 sequences), using actions and warm-up
frames from the test data, whilst Figs. 2(b)-(c) and 3 show the error at time-steps 5, 10 and 100 versus
number of frames seen by the model.
These figures clearly show that long-term accuracy generally improves with increasing number
of consecutive prediction-dependent transitions. When using alternating (46% PDT Alt.), rather
than consecutive (46% PDT), prediction-dependent transitions, long-term accuracy is worse, as
we are effectively asking the model to predict at most two time-steps ahead. We can also see
1We define the prediction error as 3*1I000 P；=；00 k Xn — Xn k2, as in Oh et al. (2015).
2In this game, the player is given two chances to roll a ball down an alley in an attempt to knock down as
many of the ten pins as possible, after which the score is updated and the knocked pins are relocated. Knocking
down every pin on the first shot is a strike, while knocking every pin down in both shots is a spare. The player’s
score is determined by the number of pins knocked down, as well as the number of strikes and spares acquired.
5
Published as a conference paper at ICLR 2017
-------0% PDT
-------0%-20%-33% PDT
-------33% PDT
-------46% PDT Alt.
5 0 5 0
山uoapə
25	50	75
Time-steps
(a)
100
40
35
0
0
40	80	120	160
Number of Frames
(b)
200
OoQoQo
2 0 8 6 4 2
OL dəls,əlu二 Ie山 Uo=。-pə-d
0	80	160	240	320	400
Number of Frames
(c)
0	80	160	240	320	400
Number of Frames
Figure 2: Prediction error averaged over 10,000 sequences on (a)-(b) Bowling and (c) Fishing Derby
for different training schemes. The same color and line code is used in all figures. (a): Prediction
error vs time-steps after the model has seen 200 million frames. (b)-(c): Prediction error vs number
of frames seen by the model at time-steps 10 and 100.
that using more prediction-dependent transitions produces lower short-term accuracy and/or slower
short-term convergence. Finally, the figures show that using a training phase with only observation-
dependent transitions that is too long, as in Oh et al. (2015), can be detrimental: the models reaches
at best a performance similar to the 46% PDT Alt. training scheme (the sudden drop in prediction
error corresponds to transitioning to the second training phase), but is most often worse.
By looking at the predicted frames we could notice that, in games containing balls and paddles, using
only observation-dependent transitions gives rise to errors in reproducing the dynamics of these
objects. Such errors decrease with increasing prediction-dependent transitions. In other games, using
only observation-dependent transitions causes the model to fail in representing moving objects, except
for the agent in most cases. Training schemes containing more prediction-dependent transitions
encourage the model to focus more on learning the dynamics of the moving objects and less on
details that would only increase short-term accuracy, giving rise to more globally accurate but less
sharp predictions. Finally, in games that are too complex, the strong emphasis on long-term accuracy
produces predictions that are overall not sufficiently good.
More specifically, from the videos available at3 PDTvsODT, we can see that using only observation-
dependent transitions has a detrimental effect on long-term accuracy for Fishing Derby, Ms Pacman,
3Highlighted names like these are direct links to folders containing videos. Each video consists of 5 randomly
selected 200 time-steps ahead predictions separated by black frames (the generated frames are shown on the left,
whilst the real frames are shown on the right - the same convention will be used throughout the paper). Shown
6
Published as a conference paper at ICLR 2017
45352515
32 l0
9 dəls,əlu二s山 u-lo-pə"
0
0	80	160	240	320	400
Number of Frames
(a)
w16m12108642
OOL ds,ΘUJ山 uo-lo-pə-d
0
0	80	160	240	320	400
Number of Frames
0	80	160	240	320	400	0
Number of Frames
80	160	240	320	400
Number of Frames
(b)
Figure 3:	Prediction error on (a) Pong and (b) Seaquest for different training schemes.
Qbert, Riverraid, Seaquest and Space Invaders. The most salient features of the videos are: consistent
inaccuracy in predicting the paddle and ball in Breakout; reset to a new life after a few time-steps in
Ms Pacman; prediction of background only after a few time-steps in Qbert; no generation of new
objects or background in Riverraid; quick disappearance of existing fish and no appearance of new
fish from the sides of the frame in Seaquest. For Bowling, Freeway, and Pong, long-term accuracy
is generally good, but the movement of the ball is not always correctly predicted in Bowling and
Pong and the chicken sometimes disappears in Freeway. On the other hand, using only prediction-
dependent transitions results in good long-term accuracy for Bowling, Fishing Derby, Freeway, Pong,
Riverraid, and Seaquest: the model accurately represents the paddle and ball dynamics in Bowling
and Pong; the chicken hardly disappears in Freeway, and new objects and background are created and
most often correctly positioned in Riverraid and Seaquest.
The trading-off of long for short-term accuracy when using more prediction-dependent transitions is
particularly evident in the videos of Seaquest: the higher the number of such transitions, the better
the model learns the dynamics of the game, with new fish appearing in the right location more often.
However, this comes at the price of reduced sharpness, mostly in representing the fish.
This trade-off causes problems in Breakout, Ms Pacman, Qbert, and Space Invaders, so that schemes
that also use observation-dependent transitions are preferable for these games. For example, in
Breakout, the model fails at representing the ball, making the predictions not sufficiently good. Notice
that the prediction error (see Fig. 15 in Appendix B.1.1) is misleading in terms of desired performance,
as the 100%PDT training scheme performs as well as other mixing schemes for long-term accuracy -
this highlights the difficulties in evaluating the performance of these models.
are 15 frames per seconds. Videos associated with the material discussed in this and following sections can also
be found at https://sites.google.com/site/resvideos1729.
7
Published as a conference paper at ICLR 2017
i > I . I . I <L
8642086420
OOL ds,ΘUJ山 uo-lo-pə-d
O
24
Io
20
160
120
80
40
453525150
32 l0
9 dəls,əlu二山 ulo-pə-d
0% PDT
67% PDT
100% PDT
O
24
Io
20
160
口
80
40
(a)
Number of Frames
Number of Frames
(b)
Figure 4:	Prediction error vs number of frames seen by the model (excluding warm-up frames) for (a)
Pong and (b) Seaquest, using prediction lengths T = 10, 15, and 20, and training schemes 0%PDT,
67%PDT, and 100%PDT.
Increasing the prediction length T increases long-term accuracy when using prediction-
dependent transitions. In Fig. 4, we show the effect of using different prediction lengths T ≤ 20
on the training schemes 0%PDT, 67%PDT, and 100%PDT for Pong and Seaquest. In Pong, with
the 0%PDT training scheme, using higher T improves long-term accuracy: this is a game for which
this scheme gives reasonable accuracy and the model is able to benefit from longer history. This is
however not the case for Seaquest (or other games as shown Appendix B.1.1). On the other hand,
with the 100%PDT training scheme, using higher T improves long-term accuracy in most games (the
difference is more pronounced between T = 10 and T = 15 than between T = 15 and T = 20),
but decreases short-term accuracy. Similarly to above, reduced short-term accuracy corresponds to
reduced sharpness: from the videos available at T ≤ 20, we can see for example that the moving fish
when caught in Fishing Derby is less sharp for higher T, as well as the fish in Seaquest and the ball
in Pong.
Truncated backpropagation still enables increase in long-term accuracy. Due to memory con-
straints, we could only backpropagate gradients over sequences of length up to 20. To use T > 20,
we split the prediction sequence into subsequences and performed parameter updates separately for
each subsequence. For example, to use T = 30, we split the prediction sequence into two successive
subsequences of length 15, performed parameter updates over the first subsequence, initialised the
state of the second subsequence with the final state from the first subsequence, and then performed
parameter updates over the second subsequence. This approach corresponds to a form of truncated
backpropagation through time (Williams & Zipser, 1995) - the extreme of this strategy (with T equal
to the length of the whole training sequence) was used by Zaremba et al. (2014).
8
Published as a conference paper at ICLR 2017
E
i—
而
δ
a
U
O
局
⅛
Φ
oΞ
45352515
32 l0
9 dəls,əlu二山 ulo-pə-d
0
0	40
80	120	160	200	240
Number of Frames
(a)
864208642
OOL ds,ΘUJ山 uo-lo-pə-d
0
0	40
80	120	160	200	240
Number of Frames
0	40	80	120	160	200	240
Number of Frames
(b)
Figure 5:	Prediction error vs number of frames seen by the model (excluding warm-up frames) for
(a) Pong and (b) Seaquest, using BPTT(15, 1), BPTT(15, 2) and BTT(15, 5), and training schemes
0%PDT, 33%PDT, and 100%PDT.
In Fig. 5, we show the effect of using 2 and 5 subsequences of length 15 (indicated by BPTT(15,2)
and BTT(15,5)) on the training schemes 0%PDT, 33%PDT, and 100%PDT, for Pong and Seaquest.
We can see that the 0%PDT and 33%PDT training schemes display no difference in accuracy for
different values of T. On the other hand, with the 100%PDT training scheme, using more than one
subsequence improves long-term accuracy (the difference is more pronounced between T = 15 and
T = 30 than between T = 30 and T = 75), but decreases short-term accuracy - the difference being
small at convergence between T = 15 and T = 30, but big between T = 30 and T = 75. The
decrease in accuracy with 5 subsequences is drastic in some games.
For Riverraid, using more than one subsequence improves long-term accuracy dramatically, as shown
in Fig. 6, as it enables correct prediction after the agent death. Interestingly, using τ = 25 with
prediction length T = 15 (black line), which produces the same history length τ + T, does not give
the same amount of gain as when using two subsequences. This would seem to suggest that some
improvement is due to encouraging longer-term accuracy, indicating that this can be achieved even
when not fully backpropagating the gradient.
From the videos available at T ≥ 20, we can see that with T = 75 the predictions in some Fishing
Derby videos are faded, whilst in Pong the model can suddenly switch from one dynamics to another
for the ball and the opponent’s paddle.
In conclusion, using higher T through truncated backpropagation can improve performance. However,
in schemes that use many prediction-dependent transitions, a high value of T can lead to poor
predictions.
9
Published as a conference paper at ICLR 2017
1600
1400
1200
o 1000
lɪi
§ 800
迅
运 600
oΞ
400
200
0
1
-----BPTT(15, 1), T = 10
-----BPTT(15, 2), τ = 10
BPTT(15, 5), τ = 10
BPTT(15, 1), τ = 25
100
25	50	75
Time-steps
OOOoQ
4 2 0 8 6
9 dəls,əlu二山 UO--pθ-d
40	80	120	160	200	240
40
0
Number of Frames
Figure 6: Prediction error error vs number of frames seen by the model for Riverraid, using BPTT(15,
1), BPTT(15, 2) and BTT(15, 5), and training schemes 0%PDT, 33%PDT, and 100%PDT. The black
line is obtained with the100%PDT training scheme.
Evaluation through Human Play
Whilst we cannot expect our simulators to generalise to (sequences of) actions never chosen by the
DQN and that are not present in the training data, such as moving the agent up and down the alley
in Bowling, it is reasonable to expect some degree of generalisation in the action-wise simplest
environments such as Breakout, Freeway and Pong.
We tested these three games by having humans using the models as interactive simulators. We
generally found that models trained using only prediction-dependent transitions were more fragile to
states of the environment not experienced during training, such that the humans were able to play
these games for longer with simulators trained with mixing training schemes. This seems to indicate
that models with higher long-term test accuracy are at higher risk to overfit to the training policy.
In Fig. 7(a), we show some salient frames from a game of Pong played by a human for 500 time-steps
(the corresponding video is available at Pong-HPlay). The game starts with score (2,0), after which
the opponent scores five times, whilst the human player scores twice. As we can see, the scoring is
updated correctly and the game dynamics is accurate. In Fig. 7(b), we show some salient fames from
a game of Breakout played by a human for 350 time-steps (the corresponding video is available at
Breakout-HPlay). As for Pong, the scoring is updated correctly and the game dynamics is accurate.
These images demonstrate some degree of generalisation of the model to a human style of play.
Evaluation of State Transitions Structures
In Appendix B.1.2 and B.1.3 we present an extensive evaluation of alternative action-dependent
state transitions to the baseline (Eqs. (1)-(5)), including convolutional transformations for the action
fusion, and gate and cell updates, and different ways of incorporating action information. We also
present a comparison between action-dependent and action-independent state transitions.
10
Published as a conference paper at ICLR 2017
Figure 7: Salient frames extracted from (a) 500 frames of Pong and (b) 350 frames of Breakout
generated using our simulator with actions taken by a human player (larger versions can be found in
Figs. 47 and 48).
Some action-dependent state transitions give better performance than the baseline in some games. For
example, we found that increasing the state dimension from 1024 to the dimension of the convolved
frame, namely 2816, might be preferable. Interestingly, this is not due to an increase in the number of
parameters, as the same gain is obtained using convolutions for the gates and cell updates. These
results seem to suggest that high-dimensional sparse transition structures could be a promising
direction for further improvement. Regarding different ways of incorporation action information,
we found that using local incorporation such as augmenting the frame with action information and
indirect action influence gives worse performance that direct and global action influence, but that
there are several ways of incorporating action information directly and globally that give similar
performance.
3.2	3D Environments
Both TORCS and the 3D maze environments highlight the need to learn dynamics that are temporally
and spatially coherent: TORCS exposes the need to learn fast moving dynamics and consistency
under motion, whilst 3D mazes are partially-observed and therefore require the simulator to build an
internal representation of its surrounding using memory, as well learn basic physics, such as rotation,
momentum, and the solid properties of walls.
TORCS. The data was generated using an artificial agent controlling a fast car without opponents.
Specifics of the data and models are given in Appendix B.2.
When using actions from the test set (see Fig. 49 in Appendix B.2 and the corresponding video at
TORCS), the simulator was able to produce accurate predictions for up to several hundreds time-steps.
As the car moved around the racing track, the simulator was able to predict the appearance of new
features in the background (towers, sitting areas, lamp posts, etc.), as well as model the jerky motion
of the car caused by our choices of random actions. Finally, the instruments (speedometer and rpm)
were correctly displayed.
The simulator was good enough to be used interactively for several hundred frames, using actions
provided by a human. This showed that the model had learnt well how to deal with the car hitting
the wall on the right side of the track. Some salient frames from the game are shown in Fig. 8 (the
corresponding video can be seen at TORCS-HPlay).
3D Mazes. We used an environment that consists of randomly generated 3D mazes, containing
textured surfaces with occasional paintings on the walls: the mazes were all of the same size, but
11
Published as a conference paper at ICLR 2017
Figure 8: Salient frames highlighting coherence extracted from 700 frames of TORCS generated
using our simulator with actions taken by a human player.
Figure 9: Predicted (left) and real (right) frames at time-steps 1, 25, 66, 158 and 200 using actions
from the test data.
differed in the layout of rooms and corridors, and in the locations of paintings (see Fig. 11(b) for an
example of layout). Specifics of the data and models are given in Appendix B.3.
When using actions from the test set, the simulator was able to very reasonably predict frames even
after 200 steps. In Fig. 9 we compare predicted frames to the real frames at several time-steps (the
corresponding video can be seen at 3DMazes). We can see that the wall layout is better predicted
when walls are closer to the agent and that the depth of corridors, and far away-walls are not as long
as they should be. The lighting on the ceiling is correct on all the frames shown.
When using the simulator interactively with actions provided by a human, we could test that the
simulator had learnt consistent aspects of the maze: when walking into walls, the model maintained
their position and layout (in a rare case, We were able to walk through a painting on the wall -
paintings are rare in the dataset and hence it is not unreasonable that they would not be maintained
when stress testing the model in this way). When taking 360° spins, the wall configurations were the
same as previously generated and not regenerated afresh, and shown in Fig. 10 (see also 3DMazes-
HPLay). The coherence of the maze was good for nearby walls, but not at the end of long-corridors.
3.3	Model-based Exploration
The search for exploration strategies better than -greedy is an active area of research. Various
solutions have been proposed, such as density based or optimistic exploration (Auer et al., 2002).
Oh et al. (2015) considered a memory-based approach that steers the agent towards previously
unobserved frames. In this section, we test our simulators using a similar approach, but select a group
of actions rather than a single action at a time. Furthermore, rather than a fixed 2D environment, we
consider the more challenging 3D mazes environment. This also enables us this present a qualitative
analysis, as we can exactly measure and plot the proportion of the maze visited over time. Our aim is
to be quantitatively and qualitatively better than random exploration (using dithering of 0.7, as this
lead to the best possible random agent).
We used a 3D maze simulator to predict the outcome of sequences of actions, chosen with a hard-
coded policy. Our algorithm (see below) did N Monte-Carlo simulations with randomly selected
sequences of actions of fixed length d. At each time-step t, we stored the last 10 observed frames in
an episodic memory buffer and compared predicted frames to those in memory.
12
Published as a conference paper at ICLR 2017
(a)	(b)
Figure 11: (a) Average ratio over 10 mazes (shaded is the 68% confidence interval) of area visited by
the random agent and an agent using our model. (b) Typical example of paths followed by (left) the
random agent and (right) our agent (see the Appendix for more examples).
Our best results (see Fig. 11(a)) showed that our
for t = 1, episodeLength, d do	method covered 50% more of the maze area after
for n = 1, N do	900 time-steps than random exploration. These
Choose random actions An = at:t+d-1; results were obtained with 100 Monte-Carlo simu-
PrediCt Xn+1:t+d;	lations and sequences of 6 actions (more details are
end	given in Appendix B.4). Comparing typical paths
Follow actions in An0 where	(see Fig. 11(b)) chosen by the random explorer
n0 = argmaxn minj=0,10 ∣∣Xn+d - xt-j ||2	and by our explorer, we see the our explorer has
end	much smoother trajectories.
This is a good local exploration strategy that leads to faster movement through corridors. To
transform this into a good global exploration strategy, our explorer would have to be augmented with
a better memory in order to avoid going down the same corridor twice. These sorts of smooth local
exploration strategies could also be useful in navigation problems.
4 Prediction-Independent Simulators
A prediction-independent simulator uses a state transition of the form st = f(st-1, at-1). The
advantage of such a simulator is that, to make a prediction for any point in the future, high-dimensional
images do not need to be predicted at all intermediate time-steps. In Atari for example, this avoids
having to project from the state space of dimension 1024 to the observation space of dimension
100,800 (210×160×3) and vice versa through the encoding and decoding functions C and D - in the
used structure this enables saving around 200 million flops at each time-step.
For the state transition, we found that a working structure was to use Eqs. (1)-(5) with zt = ht and
with different parameters for the warm-up and prediction phases. As for the prediction-dependent
simulator, we used a warm-up phase of length τ = 10, but we did backpropagate the gradient back to
time-step five in order to learn the encoding function C .
Our analysis on Atari (see Appendix C) suggests that the prediction-independent simulator is much
more sensitive to changes in the state transition structure and in the training scheme than the prediction-
dependent simulator. We found that using prediction length T = 15 gave much worse long-term
accuracy than with the prediction-dependent simulator. This problem could be alleviated with the use
of prediction length T = 30 through truncated backpropagation.
13
Published as a conference paper at ICLR 2017
45352515
2 l
OL dəls,əlu二 Ie山 uo_B-pə-d
0
0	40
80	120	160	200	240
Number of Frames
OOL dss,ΘUJps山 Uo-e-pθ=ci
55
2
5 5 0 5
1 2 17
40	80	120	160	200	240
Number of Frames
(a)
70
P.-Independent S.
P.-Dependent S.
150
∑130
α)
和10
E
匚90
E
2 70
LU
50
30
0
0
0	40	80	120	160	200	240	0	40	80	120	160	200	240
Number of Frames	Number of Frames
(b)
Figure 12: Prediction error vs number of frames seen by the model (excluding warm-up frames) for
the prediction-dependent and prediction-independent simulators using BPTT(15, 2) for (a) Bowling,
Freeway, Pong and (b) Breakout, Fishing Derby, Ms Pacman, Qbert, Seaquest, Space Invaders (the
prediction-dependent simulator is trained with the 0%-100%PDT training scheme).
Fig. 12 shows as comparison of the prediction-dependent and prediction-independent simulators
using T = 30 through two subsequences of length 15 (we indicate this as BPTT(15, 2), even though
in the prediction-independent simulator we did backpropagate the gradient to the warm-up phase).
When looking at the videos available at PI-Simulators, we can notice that the prediction-independent
simulator tends to give worse long-term prediction. In Fishing Derby for example, in the long-
term the model tends to create fish of smaller dimension in addition to the fish present in the real
frames. Nevertheless, for some difficult games, the prediction-independent simulator achieves better
performance than the prediction-dependent simulator. More investigation about alternative state
transitions and training schemes would need to be performed to obtain the same overall level of
accuracy as for the prediction-dependent simulator.
5 Discussion
In this paper we have introduced an approach to simulate action-conditional dynamics and demon-
strated that is highly adaptable to different environments, ranging from Atari games to 3D car racing
environments and mazes. We showed state-of-the-art results on Atari, and demonstrated the feasibility
of live human play in all three task families. The system is able to capture complex and long-term
interactions, and displays a sense of spatial and temporal coherence that has, to our knowledge, not
been demonstrated on high-dimensional time-series data such as these.
14
Published as a conference paper at ICLR 2017
We have presented an in-deep analysis on the effect of different training approaches on short and
long-term prediction capabilities, and showed that moving towards schemes in which the simulator
relies less on past observations to form future predictions has the effect on focussing model resources
on learning the global dynamics of the images, leading to dramatic improvements in the long-term
predictions. However, this requires a distribution of resources that impacts short-term performance,
which can be harmful to the overall performance of the model for some games. This trade-off is
also causing the model to be less robust to states of the environment not seen during training. To
alleviate this problem would require the design of more sophisticated model architectures than the
ones considered here. Whilst it is also expected that more ad-hoc architectures would be less sensitive
to different training approaches, we believe that guiding the noise as well as teaching the model to
make use of past information through the objective function would still be beneficial for improving
long-term prediction.
Complex environments have compositional structure, such as independently moving objects and other
phenomena that only rarely interact. In order for our simulators to better capture this compositional
structure, we may need to develop specialised functional forms and memory stores that are better
suited to dealing with independent representations and their interlinked interactions and relationships.
More homogeneous deep network architectures such as the one presented here are clearly not optimal
for these domains, as can be seen in Atari environments such as Ms Pacman where the system has
trouble keeping track of multiple independently moving ghosts. Whilst the LSTM memory and our
training scheme have proven to capture long-term dependencies, alternative memory structures are
required in order, for example, to learn spatial coherence at a more global level than the one displayed
by our model in the 3D mazes in oder to do navigation.
In the case of action-conditional dynamics, the policy-induced data distribution does not cover the
state space and might in fact be nonstationary over an agent’s lifetime. This can cause some regions
of the state space to be oversampled, whereas the regions we might actually care about the most
-those just around the agent policy's state distribution - to be underrepresented. In addition, this
induces biases in the data that will ultimately not enable the model learn the environment dynamics
correctly. As verified from the experiments in this paper, both on live human play and model-based
exploration, this problem is not yet as pressing as might be expected in some environments. However,
our simulators displayed limitations and faults due to the specificities of the training data, such as for
example predicting agent’s death based on the recognition of a particular sequence of actions always
co-occurring with death in the training data rather than on the recognition of the real causes.
Finally, a limitation of our approach is that, however capable it might be, it is a deterministic model
designed for deterministic environments. Clearly most real world environments involve noisy state
transitions, and future work will have to address the extension of the techniques developed in this
paper to more generative temporal models.
Acknowledgments
The authors would like to thank David Barber for helping with the graphical model interpretation,
Alex Pritzel for preparing the DQN data, Yori Zwols and Frederic Besse for helping with the
implementation of the model, and Oriol Vinyals, Yee Whye Teh, Junhyuk Oh, and the anonymous
reviewers for useful discussions and feedback on the manuscript.
References
P. Auer, N. Cesa-Bianchi, and P. Fischer. Finite-time analysis of the multiarmed bandit problem. Machine
Learning, 47:235-256, 2002.
C. Beattie, J. Z. Leibo, D. Teplyashin, T. Ward, M. Wainwright, H. Kuttler, A. Lefrancq, S. Green, V. Valdas,
A. Sadik, J. Schrittwieser, K. Anderson, S. York, M. Cant, A. Cain, A. Bolton, S. Gaffney, H. King,
D. Hassabis, S. Legg, and S. Petersen. Deepmind lab. CoRR, abs/1612.03801, 2016. URL http://arxiv.
org/abs/1612.03801.
M. G. Bellemare, Y. Naddaf, J. Veness, and M. Bowling. The Arcade Learning Environment: An evaluation
platform for general agents. Journal of Artificial Intelligence Research, 47:253-279, 2013.
S. Bengio, O. Vinyals, N. Jaitly, and N. Shazeer. Scheduled sampling for sequence prediction with recurrent
neural networks. In Advances in Neural Information Processing Systems 28 (NIPS), pp. 1171-1179. 2015.
A. Graves. Generating sequences with recurrent neural networks. 2013. URL http://arxiv.org/abs/
1308.0850.
S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural Computation, 9(8):1735-1780, 1997.
15
Published as a conference paper at ICLR 2017
M. Lengyel and P. Dayan. Hippocampal contributions to control: The third way. In Advances in Neural
Information Processing Systems 20 (NIPS), pp. 889-896, 2008.
M. L. Littman, R. S. Sutton, and S. Singh. Predictive representations of state. In Advances in Neural Information
Processing Systems 14 (NIPS), pp. 1555-1561. 2002.
M. McCloskey. Intuitive physics. Scientific American, 248(4):122-130, 1983.
V	. Mnih, K. Kavukcuoglu, D. Silver, A. A. Rusu, J. Veness, M. G. Bellemare, A. Graves, M. Riedmiller, A. K.
Fidjeland, G. Ostrovski, S. Petersen, C. Beattie, A. Sadik, I. Antonoglou, H. King, D. Kumaran, D. Wierstra,
S. Legg, and D. Hassabis. Human-level control through deep reinforcement learning. Nature, 518(7540):
529-533, 02 2015. URL http://dx.doi.org/10.1038/nature14236.
V	. Mnih, A. PuigdomBnech Badia, M. Mirza, A. Graves, T. P Lillicrap, T. Harley, D. Silver, and K. KavUkcUoglu.
Asynchronous methods for deep reinforcement learning. In Proceedings of the 33rd International Conference
on Machine Learning (ICML), 2016.
Y	. Niv. Reinforcement learning in the brain. Journal of Mathematical Psychology, 53(3):139-154, 2009.
J.	Oh, X. Guo, H. Lee, R. L. Lewis, and S. P. Singh. Action-conditional video prediction using deep networks in
Atari games. In Advances in Neural Information Processing Systems 28 (NIPS), pp. 2863-2871. 2015. URL
http://arxiv.org/abs/1507.08750.
J.	K. O’Regan and A. Noe. A sensorimotor account of vision and visual consciousness. Behavioral and brain
sciences, 24(05):939-973, 2001.
P.-Y. Oudeyer, F. Kaplan, and V. V. Hafner. Intrinsic motivation systems for autonomous mental development.
Evolutionary Computation, IEEE Transactions on, 11(2):265-286, 2007.
V.	Patraucean, A. Handa, and R. Cipolla. Spatio-temporal video autoencoder with differentiable memory. CoRR,
abs/1511.06309, 2015. URL http://arxiv.org/abs/1511.06309.
J. Pearl. Causality. Cambridge University Press, 2009.
N. Srivastava, E. Mansimov, and R. Salakhutdinov. Unsupervised learning of video representations using LSTMs.
In Proceedings of the 32nd International Conference on Machine Learning (ICML), pp. 843-852, 2015.
W. Sun, A. Venkatraman, B. Boots, and J. A. Bagnell. Learning to filter with predictive state inference machines.
CoRR, abs/1512.08836, 2015. URL http://arxiv.org/abs/1512.08836.
R. S. Sutton and A. G. Barto. Reinforcement learning: An introduction. MIT Press, 1998.
E. Talvitie. Model regularization for stable sample rollouts. In Proceedings of the Thirtieth Conference Annual
Conference on Uncertainty in Artificial Intelligence (UAI-14), pp. 780-789, 2014.
N. Wahlstrom, T. B. Schon, and M. P. Deisenroth. From pixels to torques: Policy learning with deep dynamical
models. CoRR, abs/1502.02251, 2015. URL http://arxiv.org/abs/1502.02251.
M. Watter, J. Springenberg, J. Boedecker, and M. Riedmiller. Embed to control: A locally linear latent dynamics
model for control from raw images. In Advances in Neural Information Processing Systems 28 (NIPS), pp.
2728-2736, 2015.
R. J. Williams and D. Zipser. Gradient-based learning algorithms for recurrent networks and their computational
complexity. Bibliometrics, pp. 433-486, 1995.
B. Wymann, E. Espi6, C. Guionneau, C. Dimitrakakis, R. Coulom, and A. Sumner. Torcs: The open racing car
simulator, v1.3.5. 2013. URL http://www.torcs.org.
B. Xu, N. Wang, T. Chen, and M. Li. Empirical evaluation of rectified activations in convolutional network.
2015.
W. Zaremba, I. Sutskever, and O. Vinyals. Recurrent neural network regularization. CoRR, abs/1409.2329, 2014.
URL http://arxiv.org/abs/1409.2329.
16
Published as a conference paper at ICLR 2017
A	Data, Preprocessing and Training Algorithm
When generating the data, each selected action was repeated for 4 time-steps and only the 4th frame
was recorded for the analysis. The RGB images were preprocessed by subtracting mean pixel values
(calculated separately for each color channel and over an initial set of 2048 frames only) and by
dividing each pixel value by 255.
As stochastic gradient algorithm, we used centered RMSProp (Graves, 2013) with learning rate4 1e-5,
epsilon 0.01, momentum 0.9, decay 0.95, and mini-batch size 16. The model was implemented in
Torch, using the default initialization of the parameters. The state s1 was initialized to zero.
B Prediction-Dependent Simulators
As baseline for the single-step simulators we used the following state transition:
Encoding: zt-ι = CU(Xt-1, Xt-I)),
Action fusion: Vt = Whht-I 0 Waat-I,
Gate update: it = σ(Wivvt + Wizzt-1), ft = σ(Wfvvt +Wfszt-1),
ot = σ(WovVt + Wozzt-1),
Cell update: ct = ft 0 ct-1 + it 0 tanh(WcvVt + Wczzt-1) ,
State update: ht = ot 0 tanh(ct) ,
with vectors ht-1 and Vt of dimension 1024 and 2048 respectively.
B.1 Atari
We used a trained DQN agent (the scores are given in the
table on the right) to generate training and test datasets
consisting of 5,000,000 and 1,000,000 (210×160) RGB
images respectively, with actions chosen according to an
= 0.2-greedy policy. Such a large number of training
frames was necessary to prevent our simulators from
strongly overfitting to the training data. This would be
the case with, for example, one million training frames,
as shown in Fig. 13 (the corresponding video can be
seen at MSPacman). The ghosts are in frightened mode
at time-step 1 (first image), and have returned to chase
mode at time-step 63 (second image). The simulator
is able to predict the exact time of return to the chase
mode without sufficient history, which suggests that the
sequence was memorized.
Game Name	DQN Score
Bowling	51.84
Breakout	396.25
Fishing Derby	19.30
Freeway	33.38
Ms Pacman	2963.31
Pong	20.88
Qbert	14,865.43
Riverraid	13,593.49
Seaquest	17,250.31
Space Invaders	2952.09
The encoding consisted of 4 convolutional layers with 64, 32, 32 and 32 filters, of size 8 × 8, 6 × 6,
6 × 6, and 4 × 4, stride 2, and padding 0, 1, 1, 0 and 1, 1, 1, 0 for the height and width respectively.
Every layer was followed by a randomized rectified linear function (RReLU) (Xu et al., 2015)
with parameters l = 1/8, u = 1/3. The output tensor of the convolutional layers of dimension
32 × 11 × 8 was then flattened into the vector zt of dimension 2816. The decoding consisted of one
fully-connected layer with 2816 hidden units followed by 4 full convolutional layers with the inverse
symmetric structure of the encoding transformation: 32, 32, 32 and 64 filters, of size 4 × 4, 6 × 6,
6 × 6, and 8 × 8, stride 2, and padding 0, 1, 1, 0 and 0, 1, 1, 1. Each full convolutional layer (except
the last one) was followed by a RReLU.
In Fig. 14, we show one example of successful prediction at time-steps 100 and 200 for each game.
B.1.1 Short-Term Versus Long-Term Accuracy
In Figures 15-19, we show the prediction error obtained with the training schemes described in Sec.
3.1 for all games. Below we discuss the main findings for each game.
4We found that using a higher learning rate value of 2e-5 would generally increase convergence speed but
cause major instability issues, suggesting that gradient clipping would need to be used.
17
Published as a conference paper at ICLR 2017
Figure 13: Prediction that demonstrates overfitting of the model when trained on one million frames.
Bowling. Bowling is one of the easiest games to model. A simulator trained using only observation-
dependent transitions gives quite accurate predictions. However, using only prediction-dependent tran-
sitions reduces the error in updating the score and predicting the ball direction.
Breakout. Breakout is a difficult game to model. A simulator trained with only prediction-
dependent transitions predicts the paddle movement very accurately but almost always fails to
represent the ball. A simulator trained with only observation-dependent transitions struggles much
less to represent the ball but does not predict the paddle and ball positions as accurately, and the ball
also often disappears after hitting the paddle. Interestingly, the long-term prediction error (bottom-
right of Fig. 15(b)) for the 100%PDT training scheme is the lowest, as when not representing the ball
the predicted frames look closer to the real frames than when representing the ball incorrectly. A
big improvement in the model ability to represent the ball could be obtained by pre-processing the
frames with max-pooling as done for DQN, as this increases the ball size. We believe that a more
sophisticated convolutional structure would be even more effective, but did not succeed in discovering
such a structure.
Fishing Derby. In Fishing Derby, long-term accuracy is disastrous with the 0%PDT training
scheme and good with the 100%PDT training scheme. Short-term accuracy is better with schemes
using more observation-dependent transitions than in the 100% or 0%-100%PDT training schemes,
especially at low numbers of parameter updates.
Freeway. With Bowling, Freeway is one of the easiest games to model, but more parameter updates
are required for convergence than for Bowling. The 0%PDT training scheme gives good accuracy,
although sometimes the chicken disappears or its position is incorrectly predicted - this happens
extremely rarely with the 100%PDT training scheme. In both schemes, the score is often wrongly
updated in the warning phase.
Ms Pacman. Ms Pacman is a very difficult game to model and accurate prediction can only be
obtained for a few time-steps into the future. The movement of the ghosts, especially when in
frightened mode, regulated by the position of Ms Pacman according to complex rules. Furthermore,
the DQN = 0.2-greedy policy does not enable the agent to explore certain regions of the state space.
As a result, the simulator can predict well the movement of Ms Pacman, but fails to predict long-term
the movement of the ghosts when in frightened mode or when in chase mode later in the episodes. .
Pong. With the 0%PDT training scheme, the model often incorrectly predicts the direction of the
ball when hit by the agent or by the opponent. Quite rarely, the ball disappears when hit by the agent.
With the 100%PDT training scheme, the direction the ball is much more accurately predicted, but the
ball more often disappears when hit by the agent, and the ball and paddles are generally less sharp.
18
Published as a conference paper at ICLR 2017
Figure 14: One example of 200 time-step ahead prediction for each of the 10 Atari games. Displayed
are predicted (left) and real (right) frames at time-steps 100 and 200.
Qbert. Qbert is a game for which the 0%PDT training scheme is unable to predict accurately
beyond very short-term, as after a few frames only the background is predicted. The more prediction-
dependent transitions are used, the less sharply the agent and the moving objects are represented.
Riverraid. In Riverraid, prediction with the 0%PDT training scheme is very poor, as this scheme
causes no generation of new objects or background. With all schemes, the model fails to predict the
frames that follow an agent death - that,s why the prediction error increases sharply after around
time-step 13 in Fig. 18(b). The long-term prediction error is lower with the 100%PDT training
scheme, as with this scheme the simulator is more accurate before a death and is sometimes able
to predict the subsequent frames after a death. The problem of incorrect after-death prediction
disappears when using BBTT(15,2) with prediction-dependent transitions.
Seaquest. In Seaquest, with the 0%PDT training scheme, the existing fish disappears after a few
time-steps and no new fish ever appears from the sides of the frame. The more predicted frames are
used in the sequence the less sharply the fish is represented, but its dynamics and appearance from
the sides of the frame is more precisely predicted.
Space Invaders Space Invaders is a very difficult game to model and accurate prediction can only
be obtained for a few time-steps into the future. The 0%PDT training scheme is unable to predict
accurately beyond very short-term. The 100%PDT training scheme struggles to represent the bullets.
In Figs. 20-24 we show the effect of using different prediction lengths T ≤ 20 with the training
schemes 0%PDT, 67%PDT, and 100%PDT for all games.
In Figs. 25-29 we show the effect of using different prediction lengths T > 20 through truncated
backpropagation with the training schemes 0%PDT, 33%PDT, and 100%PDT for all games.
19
Published as a conference paper at ICLR 2017
Prediction Error at Time-step 10	Prediction Error	Prediction Error at Time-SteP 10	Prediction Error
22.5
20
17.5
15
12.5
10
7.5
5
2.5
0
1
25	50	75	100
Time-steps
5 3 5 2 5 1 5
32 I0
OOL dss,ΘUJps山 Uo-ε-pθ=ci
0
0	80	160	240	320
Number of Frames
160
0% PDT
0%-20%-33% PDT
33% PDT
47% PDT Alt.
47% PDT
67% PDT
0%-100% PDT
100% PDT
Oh et al.
40
0
400	0
OOOoOOO
4 2 0 8 6 4 2
25	50	75	100
Time-steps
Number of Frames
5
80	160	240	320	400
Number of Frames
20
0
0
5 巧 5i0555
7 2 7 2
g dəls,əuj二山 UO--Pə-d
⑶
(b)
Figure 15:	Prediction error (average over 10,000 sequences) for different training schemes on (a)
Bowling and (b) Breakout. Number of frames are in millions.
20
Published as a conference paper at ICLR 2017
山 Uo=O-Pə"
Oooo'0Qoo
1 8 5 2 9 6 3
2 111
g dəls,əlu二s山 UO-s-pθ一
25	50	75
Time-steps
0
100	0
Oo Q 。 。°
2 0 8 6 4 2
80	160	240	320
400
OL dəls,əuJ-Is山 Uo-IO-pə-Cl
山Uo=。-pə-d
O
Ooo°°cflo
4 2 0 8 6 4 2
80	160	240	320
Number of Frames
260
o 220
o
i 180
φ
E
二140
E
O
1 100
Q_
20
400	0
Number of Frames
80	160	240	320
Number of Frames
400
53525150
32 I0
C
55515550
7 I 2 72
Il
g dəls,əuj二一E山 Uo-Io-p。」Cl
∞
80
160	240	320
25	50	75
Time-steps
400
o
∑ 1.5
φ
ω
6 1.25
E
LU
2
1.75
0.75
0.5
0.25
80
160	240	320
Number of Frames
OOL dəls,əuj二s山 Uo-e-pθ=ci
Number of Frames
5 4 3 2 1 0
80
160	240	320
Number of Frames
O
4c
400
0
0
a
2
(b)
Figure 16:	Prediction error for different training schemes on (a) Fishing Derby and (b) Freeway.
21
Published as a conference paper at ICLR 2017
Prediction Error at Time-step 10	Prediction Error	Prediction Error at Time-step 10	Prediction Error
— — — — — —一 ∙ — —
160
120
80
40
0
1	25	50	75
Time-steps
60
50
40
30
20
10
0
9
8
7
6
5
4
3
2
1
0
1
4
3.5
3
2.5
2
1.5
1
0.5
0
0
100
80
OOL dss,ΘUJps』0」」山 Uo-e-pθ=ci
160	240	320
Number of Frames
O
4
40
10
0
250
80	160	240	320	400
Number of Frames
5
2
O
320
80
160	240
Number of Frames
400
25
453525150
32 l0
g dəls,əuj二』0」」山 Uo--PCl
320
80
50	75
Time-steps
00
160	240
Number of Frames
400
320
80
8642086420
OOL ds,ΘUJ-l-0」」山 uo-lo-pə-d
320
80
160	240
Number of Frames
00
160	240
Number of Frames
400
b
Figure 17: Prediction error for different training schemes on (a) Ms Pacman and (b) Pong.
22
Published as a conference paper at ICLR 2017
山Uo=。-pə-d
90
80
ɔ 70
60
50
40
30
20
10
0
0
E
而
o
a
U
O
迅
⅛
oΞ
山Uo=。-pə-d
o
∞ ∞ ∞ ∞
3 3 2 1 1
25	50	75
Time-steps
50
45
g 40
d
φ θf-
W 35
φ
E 30
H
玄25
上5
0
100	0
80	160	240	320	400
OOOOo
6 16 16
2 2 11
OOL dəls,əuJ-I山 UOo-pθ-d
∞
4
80	160	240	320
Number of Frames
a
OOOOO
OOoOOO
2 0 8 6 4 2
g dəls,əuj二s山 Uo-B-pə-d
25	50	75
Time-steps
00
310
Number of Frames
80	160	240	320	400
Number of Frames
O
80	160	240	320	400
Number of Frames
220
190
φ
ω 160
Φ
E
1130
o
由100
U
O
怎
70 70
oΞ
40
0
80
160	240	320
Number of Frames
Ooooooi0'0
28406284
3 2 2 2 1 1
9L dəls,əlu-I山 UO--Pə-d
4°,
80	160	240	320	400
Number of Frames

Figure 18: Prediction error for different training schemes on (a) Qbert and (b) Riverraid.
23
Published as a conference paper at ICLR 2017
Prediction Error at Time-step 10	Prediction Error	Prediction Error at Time-step 10	Prediction Error
150
125
100
75
50
25
0
40
-------0% PDT
-------0%-20%-33% PDT
-------33% PDT
-------47% PDT Alt.
-------47% PDT
25	50	75	100
1
Time-steps
5
3
O
5
0	80	160	240	320
Number of Frames
OOL dss,ΘUJps山 Uo-e-pθ=ci
280
240
200
160
120
80
40
0
1	25	50	75	100
Time-steps
160
0
400	0
⑶
-------0% PDT
-------0%-20%-33% PDT
-------33% PDT
-------47% PDT Alt.
40
5
10
0	80	160	240	320
Number of Frames
400
(b)
E
i—
而
δ
a
U
O
§
ŋ
Φ
oΞ
Ooo°°cfl
4 2 0 8 6 4 2
80	160	240	320	400
Number of Frames
0	80	160	240	320	400
Number of Frames
210
90
0
Uoooo
a7 5 3 1
OOL dəls,əuj二山 Uo--pθ=ci
80	160	240	320	400
Number of Frames
Figure 19: Prediction error for different training schemes on (a) Seaquest and (b) Space Invaders.
24
Published as a conference paper at ICLR 2017
Prediction Error at Time-step 10	PrediCtiOn Error	PrediCtion Error at Time-SteP 10	PrediCtion Error
r _ .	_ _ _	_
16
14
12
10
8
6
4
2
0
1
4
3.5
3
2.5
2
1.5
1
0.5
0
0
140
120
100
80
60
40
20
0
1
50
40
30
20
10
0
0
on
25	50	75
Time-steps
100
40	80	120	160	200
Number of Frames
d
φ
ω
Φ
E
而
δ
a
U
O
⅛
oΞ
240
(a)
40
35
30
25
20
15
10
5
25	50	75
Time-steps
9 dφls,φlu 二 IE」0」mU OB一 P ①」□_
100
00 _• dφls,φ≡l IE-0」mUpop ①」□_
40	80	120	160	200
Number of Frames
40	80	120	160	200	240
0
0
Number of Frames
40	80	120	160	200	240
Number of Frames
20
17.5
15
12.5
10
7.5
5
2.5
0
0
180
40
240	0
(b)
40
80	120	160	200	240
Number of Frames
160
140
120
100
80
40	80	120	160	200	240
Number of Frames
∣: Prediction error (average over 10,000 sequences) for different prediction lengths T ≤ 20
(a) Bowling and (b) Breakout. Number of frames are in millions and exclude warm-up frames.
25
Published as a conference paper at ICLR 2017
山 Uo=O-Pə"
OL dəls,əuJ-Is山 Uo-B-pə-d
山Uo=。-pə-d
--T = 10
——T = 15
—T = 20
Ooooooooo
28406284
3 2 2 2 1 1
25	50	75
Time-steps
95
85
”5
α)
W 65
φ
E
二 55
而
o 45
5
35
o
i25
φ
1 15
5
100	0
5 5 5 5 5
8 6 4 2
40	80	120	160	200
Number of Frames
270
o 230
o
i 190
φ
E
二150
E
O
L∏ 110
Q_
30
240	0
864 2
OOOO
25	50	75
Time-steps
00
2
1.75
o
∑ 1.5
φ
ω
6 1.25
E
LU
0.75
0.5
0.25
0
0
0
40	80	120	160	200	240	0
Number of Frames
(b)
40	80	120	160	200	240
Number of Frames
40	80	120	160	200	240
Number of Frames
0% PDT
67% PDT
100% PDT
555 1 555
7 12 7 0 2
IIOO
9 dəls,əuj二一E山 UO-lo-pə-d
40	80	120	160	200	240
Number of Frames
5 4 3 2 1
OOL dss,ΘUJ-ls山 uo-lo-pə-d
40	80	120	160	200	240
Number of Frames
Figure 21: Prediction error for different prediction lengths T ≤ 20 on (a) Fishing Derby and (b)
Freeway.
26
Published as a conference paper at ICLR 2017
60
55
ɔ 50
d
α)
ω 45
φ
4 40
可35
o
由30
U
O
⑤25
φ
20
15
0
0
1
OL dəls,əlu二 Ie山 uo_B-pə-d
Ooooooooqo,0
20864208642
2 2 11111
山 Uo。一pə
25	50	75
Time-steps
100
10
0
505050505
554433221
9 dəls,əlu二山 UO--pθ-d
40
80	120	160	200	240
Number of Frames
40	80	120	160	200	240
8 7 6 5 4 3 2
山uoapə"
25	50	75	100
40
0
Number of Frames
Uooow
4 0 6 2 8
2 2 11
OOL dəls,əlu二 Ie山 Uo。-pə-d
40	80	120	160	200	240
Number of Frames
(a)
Time-steps
45352515
2 I
5 3 5 2 5 1 5
32 l0
9 dəls,əuj二一E山 UO-lo-pə-d
40
80	120	160	200	240
Number of Frames
864208642
OOL dəls,əuj二山 uo-lo-pə-d
0 -------1------1-------1-------1-------'-------1
0	40	80	120	160	200	240
Number of Frames
(b)
0 ------1-------'-------'-------1------'-------
0	40	80	120	160	200	240
Number of Frames
Figure 22:	Prediction error for different prediction lengths T ≤ 20 on (a) Ms Pacman and (b) Pong.
27
Published as a conference paper at ICLR 2017
山Uo=。-pə-d
95
85
ɔ 75
d
α)
ω 65
由35
U
O
⑤25
φ
上15
5
0
山Uo=。-pə-d
25	50	75
Time-steps
00
40	80	120	160	200
Number of Frames
--T = 10
T = 15
T = 20
O
24
60
30
3
O O
20
280
240
d
φ
ω 200
φ
E
1160
O
由120
U
O
怎
8 80
oΞ
40
0
OOOOOO
OooOQo
4 2 0 8 6 4
OOOoQ
4 2 0 8 6
9 dəls,əuj二山 UO--Pə-d
25	50	75	100
Time-steps
40	80	120	160	200	240
Number of Frames
40	80	120	160	200	240
Number of Frames
O
°。 Oool0i0
9 5 1 7 3 9 5
2 2 2 1 1
OOL dəls,əuJ-I山 Uo--pa
40	80	120	160	200	240
Number of Frames
0% PDT
67% PDT
100% PDT
40
0
360
320
LO
∑ 280
φ
ω
2 240
E
1200
16160
U
-120
f80
40
0
40	80	120	160	200	240
Number of Frames
40	80	120	160	200	240
Number of Frames

o
(b)
Figure 23:	Prediction error for different prediction lengths T ≤ 20 on (a) Qbert and (b) Riverraid.
28
Published as a conference paper at ICLR 2017
Prediction Error at Time-step 10	Prediction Error	Prediction Error at Time-step 10	Prediction Error
--T = 10
——T = 15
—T = 20
100
80
60
40
20
0
1
45
40
35
30
25
20
15
10
5
0
180
150
120
90
60
30
0
1
50
45
40
35
30
25
20
15
10
0
25	50	75
Time-steps
40
35
5
100	0
40	80	120	160	200	240
5 5 5 5 5
1 9 7 5 3
OOL dəls,əuJ-I山 Uo--pθ-d
Number of Frames
40	80	120	160	200
Number of Frames
4π
9 dəls,əuj二s山 Uo-B-pθ=d
241
80	120	160	200	240
Number of Frames
0% PDT
67% PDT
100% PDT
80	120	160	200	240
25	50	75
Time-steps
00
O
40
OOL dəls,əuj二s山 Uo-e-pθ=ci
Number of Frames
20∞80604020∞80
2 2 11111
40	80	120	160	200
Number of Frames
O
24
40
80	120	160	200	240
Number of Frames
b
Figure 24: Prediction error for different prediction lengths T ≤ 20 on (a) Seaquest and (b) Space
Invaders.
29
Published as a conference paper at ICLR 2017
Prediction Error at Time-step 10	PrediCtiOn Error	PrediCtion Error at Time-SteP 10	PrediCtion Error
r _ .	_ _ _	_
18
16
14
12
10
8
6
4
2
0
1
4
3.5
3
2.5
2
1.5
1
0.5
0
0
25	50	75	100
Time-steps
140
120
100
80
60
40
20
0
1
50
40
30
20
10
0
0
3.5
0
40
35
40	80	120	160	200	240
Number of Frames
i 25
E
匚20
E
≡ 15
LU
o 10
^o
另5
Q_
0
40	80	120	160	200	240	0
Number of Frames
(a)
20
40	80	120	160	200	240
Number of Frames
5 5 0 5 5 5 0
1 2 172
9 dəls,əuj二山 Uo--pθ=d
17.5
T
DT
0% PD-
33% PD
100% P
25	50	75	100
Time-steps
40	80	120	160	200	240
Number of Frames
on
OOL dəls,əlu二 Ie山 uo=o-pθ一
40
40	80	120	160	200	240	0
Number of Frames
(b)
80604020008060
40	80	120	160	200	240
Number of Frames
:Prediction error (average over 10,000 sequences) for different prediction lengths T > 20
(a) Bowling and (b) Breakout. Number of frames are in millions and exclude warm-up frames.
30
Published as a conference paper at ICLR 2017
105
-----BPTT(15, 1)
-----BPTT(15, 2)
BPTT(15一 5)
山 Uo=O-Pə"
∞∞5l,∞5l,∞5l,o
3 3 2 2 1 1
0% PDT
33% PDT
100% PDT
5 5 5 5
8 6 4 2
9 dəls,əlu二山 UO-lo-pə
25	50	75
Time-steps
5
100	0
40	80	120	160	200	240
Number of Frames
山Uo=。-pə-d
0
1
5 5 5 5 5 5
0 8 6 4 2
OL dəls,əlu-I山 UO--Pə-d
40	80	120	160	200
Number of Frames
240
-----BPTT(15, 1)
-----BPTT(15, 2)
BPTT(15, 5)
2 5 15
I0
9 d ①一S,①EHIE-0」mU04θpeo:
25	50	75
Time-steps
2
1.75
o
∑ 1.5
φ
ω
6 1.25
E
LU
0.75
0.5
0.25
0
0
270
o 230
o
i 190
φ
E
二150
E
O
L∏ 110
Q_
30
0
(a)
2
1.75
1.5
1.25
1
0.75
0.5
0.25
0
100	0
40	80	120	160	200	240
Number of Frames
0% PDT
33% PDT
100% PDT
40	80	120	160	200	240
Number of Frames
0
40	80	120	160	200	240	0
Number of Frames
(b)
4 3 2 1
OOL dəls,əuj二s山 Uo-e-pθ=ci
40	80	120	160	200	240
Number of Frames
Figure 26: Prediction error for different prediction lengths through truncated BPTT on (a) Fishing
Derby and (b) Freeway.
31
Published as a conference paper at ICLR 2017
Prediction Error at Time-step 10	Prediction Error	Prediction Error at Time-step 10	Prediction Error
_ ______________ _______ _ ____________ _______
60
55
50
45
40
35
30
25
20
15
0
250
200
150
100
50
0
1	25	50	75	100
Time-steps
55
50
6 40
E
二 35
而
o 30
f 25
i20
φ
1 15
10
0
270
g 220
d
φ
ω
1 170
^cθ
o 120
5
U
O
⑤70
P
φ
oΞ
20
40	80	120	160	200	240	0
Number of Frames
(a)
------0% PDT
33% PDT
100% PDT
40	80	120	160	200	240
Number of Frames
40	80	120	160	200	240
Number of Frames
4
3
2
1
0
25	50	75	100
4
3.5
3 5 2 5 1 5 0
2 l0
9 dəls,əuj二山 Uo-IO-Pθ=d
1
40	80	120	160	200	240
Number of Frames
Time-steps
Number of Frames
0
0
864208642
OOL dəls,əlu二 Ie山 Uo。一pə一
Number of Frames
(b)
Figure 27: Prediction error for different prediction lengths through truncated BPTT on (a) Ms Pacman
and (b) Pong.
32
Published as a conference paper at ICLR 2017
70
50
250
-----BPTT(15, 1)
-----BPTT(15, 2)
BPTT(15, 5)
OOO
0 5 0
2 11
山UO__PO-Cl
60
0
100	0
40	80	120	160	200	240
0
1	25	50	75
Time-steps
95
85
ɔ 75
d
α)
ω 65
由35
U
O
⑤25
φ
上15
00 _• dφls,φ≡l IE-0」mUo 一OPΦD:
5
0	40	80	120	160	200
Number of Frames
330
290
250
210
170
130
90
50
240	0
(a)
135
Number of Frames
40	80	120	160	200	240
Number of Frames
1400
200
1200
OoOO
OoOO
0 8 6 4
山 Uo。一pə
0% PDT
33% PDT
100% PDT
5
2
5 5 5 5 5 5
1 0 9 8 7 6
9 dəls,əuj二山 Uo--pə-d
40	80	120	160	200	240
0
1	25	50	75
55
100	0
Time-steps
340
Number of Frames
300
LO
苗260
ω
Φ
三220
I—
而
O 180
岳
S 140
局
运100
0_
60
0
40	80	120	160	200	240
Number of Frames
(b)
Figure 28: Prediction error for different prediction lengths through truncated BPTT on (a) Qbert and
(b) Riverraid.
33
Published as a conference paper at ICLR 2017
120
Prediction Error at Time-step 10	Prediction Error	Prediction Error at Time-step 10	Prediction Error
100
80
60
40
20
0
1
40
35
30
25
20
15
10
5
0
200
175
150
125
100
75
50
25
0
1
50
45
40
35
30
25
20
15
10
0
25	50	75	100
Time-steps
40
35
160
0
40	80	120	160	200	240	0
Number of Frames
(a)
45
平35
φ
E
二 30
而
5 25
5
20
o
i15
φ
1 10
------0% PDT
------33% PDT
------100% PDT
40	80	120	160	200	240
Number of Frames
OOOoOOO
4 2 0 8 6 4 2
OOL ds,ΘUJ山 Uo--pa
40	80	120	160	200	240
Number of Frames
0% PDT
33% PDT
100% PDT
25	50	75	100
Time-steps
5
0	40
220
40
40	80	120	160	200	240	0
Number of Frames
(b)
80	120	160	200	240
Number of Frames
Oooooowo
08642086
2 11111
OOL dəls,əuj二山 uo-lo-pə-d
40	80	120	160	200	240
Number of Frames
Figure 29: Prediction error for different prediction lengths through truncated BPTT on (a) Seaquest
and (b) Space Invaders.
34
Published as a conference paper at ICLR 2017
B.1.2	Different Action-Dependent State Transitions
In this section we compare the baseline state transition
Encoding: Zt-I = C(I(Xt-1, Xt-I)),
Action fusion: Vt = Whht-I 0 Waat-I,
Gate update: it = σ(Wivvt + Wizzt-1), ft = σ(Wfvvt + Wfzzt-1),
ot = σ(Wovvt + Wozzt-1),
Cell update: ct = ft 0 ct-1 + it 0 tanh(Wcvvt + Wczzt-1) ,
State update: ht = ot 0 tanh(ct) ,
where the vectors ht-1 and vt have dimension 1024 and 2048 respectively (this model has around 25
millions (25M) parameters), with alternatives using unconstrained or convolutional transformations,
for prediction length T = 15 and the 0%-100%PDT training scheme.
More specifically, in Figs. 30-34 we compare the baseline transition with the following alternatives:
•	Base2816: The vectors ht-1 and vt have the same dimension as zt-1, namely 2816. This model
has around 80M parameters.
•	itz and itz 2816: Have a separate gating for zt-1 in the cell update, i.e.
ct = ft 0 ct-1 +it0tanh(Wcvvt) +itz0tanh(Wczzt-1).
This model has around 30 million parameters. We also considered removing the linear
projection of zt-1, i.e.
ct = ft 0 ct-1 + it 0 tanh(Wcvvt) + itz 0 tanh(zt-1) ,
without RReLU after the last convolution and with vectors ht-1 and vt of dimensionality
2816. This model has around 88M parameters.
•	-zt-ι and -Zt-Liz2816: Remove z— in the gate updates, i.e.
it=σ(Wivvt), ft = σ(Wfvvt), ot = σ(Wovvt),
with one of the following cell updates
ct =	ft 0	ct-1 +	it	0 tanh(Wcvvt + Wcz Zt-1) , 17M parameters ,
ct =	ft 0	ct-1 +	it	0 tanh(Wcvvt) + itz 0 tanh(Zt-1) , 56M parameters	.
•	ht-ι, ht-ι-iz, and ht-ι-iz2816: Substitute Zt-ι with ht-ι in the gate updates, i.e.
it = σ(Wivvt + Wihht-1), ft = σ(Wfvvt + Wfhht-1),
ot = σ(Wovvt + Wohht-1),
with one of the following cell updates
ct = ft	0 ct-1	+ it 0	tanh(Wcvvt	+ Wchht-1 + Wcz Zt-1) , 21M parameters ,
ct = ft	0 ct-1	+ it 0	tanh(Wcvvt	+ Wchht-1) + itz 0 tanh(Wcz Zt-1) , 24M parameters ,
ct = ft	0 ct-1	+ it 0	tanh(Wcvvt	+ Wchht-1) + itz 0 tanh(Zt-1) , 95M parameters .
As we can see from the	figures,	there is no other transition that is clearly preferable to the baseline,
with the exception of Fishing Derby, for which transitions with 2816 hidden dimensionality perform
better and converge earlier in terms of number of parameter updates.
In Figs. 35-39 we compare the baseline transition with the following convolutional alternatives
(where to apply the convolutional transformations the vectors Zt-1 and vt of dimensionality 2816 are
reshaped into tensors of dimension 32 × 11 × 8)
35
Published as a conference paper at ICLR 2017
•	C and 2C: Convolutional gate and cell updates, i.e.
it = σ(Civ(vt) + Ciz(zt-1)), ft = σ(Cfv(vt) + Cfz(zt-1)),
ot = σ(Cov(vt) + Coz(zt-1)),
Ct = ft 0 ct-1 + it 0 tanh(Ccv(vt)+ Ccz(zt-ι)),
where C denotes either one convolution with 32 filters of size 3×3, with stride 1 and
padding 1 (as to preserve the input size), or two such convolutions with RReLU nonlinearity
in between. These two models have around 16M parameters.
•	CDA and 2CDA: As above but with different action fusion parameters for the gate and cell updates,
i.e.
vti = Wihht-1 0 Wiaat-1 , vtf = Wfhht-1 0 Wfaat-1 ,
vto = Wohht-1 0 Woaat-1 , vtc = Wchht-1 0Wcaat-1 ,
it = σ(Civ(vti) + Ciz(zt-1)), ft=σ(Cfv(vtf)+Cfz(zt-1)),
ot = σ(Cov(vto) + Coz(zt-1)),
ct = ft 0 ct-1 + it 0 tanh(Ccv(vtc) + Ccz(zt-1)) .
These two models have around 40M parameters.
•	ht-ι-iz2816-2C: As 'ht-ι-iz2816' with convolutional gate and cell updates, i.e.
it =σ(Civ(vt)+Cih(ht-1)), ft = σ(Cfv(vt) + Cfh(ht-1)),
ot = σ(Cov(vt) + Coh(ht-1)),
ct = ft 0 ct-1 + it 0 tanh(Ccv(vt) +Cch(ht-1)) + itz 0 tanh(zt-1) ,
where C denotes two convolutions as above. This model has around 16M parameters.
•	ht-ι-iz2816-CDA and ht-ι-iz2816-2CDA: As above but with different parameters for the gate
and cell updates, and one or two convolutions. These two models have around 48M
parameters.
•	ht-ι-iz2816-2CA: As 'ht-ι-iz2816' with convolutional action fusion, gate and cell updates, i.e.
vt = Ch(ht-1) 0 Waat-1,
it =σ(Civ(vt)+Cih(ht-1)), ft = σ(Cfv(vt) + Cfh(ht-1)),
ot = σ(Cov(vt) + Coh(ht-1)),
ct = ft 0 ct-1 + it 0 tanh(Ccv(vt) +Cch(ht-1)) + itz 0 tanh(zt-1) ,
where C indicates two convolutions as above. This model has around 8M parameters.
B.1.3	Action Incorporation
In Figs. 40-44 we compare different ways of incorporating the action for action-dependent state
transitions, using prediction length T = 15 and the 0%-100%PDT training scheme. More specifically,
we compare the baseline structure (denoted as ’Whht-1 0Waat-1’ in the figures) with the following
alternatives:
•	Whht-1 0 Wa1 at-1 + Wa2at-1: Multiplicative/additive interaction of the action with ht-1,
i.e. vt = Whht-1 0 Wa1 at-1 + Wa2at-1. This model has around 25M parameters.
•	Wsst-1 0 Waat-1: Multiplicative interaction of the action with the encoded frame zt-1, i.e.
vt = Wzzt-1 0 Waat-1,
it = σ(Wihht-1 + Wivvt), ft = σ(Wfhht-1 + Wfvvt),
ot = σ(Wohht-1 + Wovvt),
ct = ft 0 ct-1 + it 0 tanh(Wchht-1 +Wcvvt).
This model has around 22M parameters.
36
Published as a conference paper at ICLR 2017
•	Whht-I 0 Wz zt-ι 0 Waat-1： Multiplicative interaction of the action with both ht-ι and zt-ι
in the following way
vt = Whht-1 0 Wzzt-1 0 Waat-1 ,
it = σ(Wivvt) , ft = σ(Wfvvt) , ot = σ(Wovvt)
ct = ft 0 ct-1 + it 0 tanh(Wcv vt) .
This model has around 19M parameters. We also considered having different matrices for
the gate and cell updates (denoted in the figures as ,W*hht-ι 0 W*zZt-I 0 W*aat-ι').
This model has around 43M parameters.
•	Whht-1 0 Wa1 at-1: Alternative multiplicative interaction of the action with ht-1 and zt-1
vt1 = Whht-1 0Wa1at-1 , vt2 = Wzzt-1 0Wa2at-1 ,
it = σ(Wiv1vt1 +Wiv2vt2) , ft = σ(Wfv1vt1 + Wfv2vt2) ,
ot =σ(Wov1vt1 +Wov2vt2),
ct = ft 0 ct-1 +it0tanh(Wcv1vt1 + Wcv2 vt2).
This model has around 28M parameters. We also considered having different matrices for
the gate and cell updates (denoted in the figures as 'W*h⅛-ι 0 W*a1 a1'). This model
has around 51M parameters.
•	As Input: Consider the action as an additional input, i.e.
it = σ(Wihht-1 +Wizzt-1 + Wiaat-1) ,
ft = σ(Wfhht-1 + Wfzzt-1 + Wfaat-1),
ot = σ(Wohht-1 + Wozzt-1 + Woaat-1),
ct = ft 0 ct-1 + it 0 tanh(Wchht-1 +Wczzt-1 + Wcaat-1) .
This model has around 19M parameters.
•	CA: Combine the action with the frame, by replacing the encoding with
zt-ι = C(A(I(Xt-ι, xt-ι), at-ι)),
where A indicates an augmenting operation: the frame of dimension nC = 3 × nH =
210 × nW = 160 is augmented with nA (number of actions) full-zero or full-one matrices
of dimension nH × nW, producing a tensor of dimension (nC + nA) × nH × nW. As
the output of the first convolution can be written as
nH nW nC
yj,k,l = X X X Whi,,jw xi,h+dH (k-1),w+dW (l-1) + xnC+a,h+dH(k-1),w+dW (l-1) ,
h=1 w=1 i=1
where dH and dW indicate the filter strides, with this augmentation the action has a local
linear interaction. This model has around 19M parameters.
As we can see from the figures, ’CA’ is generally considerably worse than the other structures.
Action-Independent versus Action-Dependent State Transition
In Fig. 45, we compare the baseline structure with one that is action-independent as in Oh et al.
(2015), using prediction length T = 15 and the 0%-100%PDT training scheme.
As we can see, having an an action-independent state transition generally gives worse performance in
the games with higher error. An interesting disadvantage of such a structure is its inability to predict
the moving objects around the agent in Seaquest. This can be noticed in the videos in Seaquest, which
show poor modelling of the fish. This structure also makes it more difficult to correctly update the
score in some games such as Seaquest and Fishing Derby.
37
Published as a conference paper at ICLR 2017
Prediction Error at Time-step 10	Prediction Error	Prediction Error at Time-SteP 10	Prediction Error
r _ .	_ _ _	_ ________________ __________ _ ___ _ _
7 6 5 4 3 2
0
1	25	50	75
Time-steps
52515
2 10
g dəls,əlu二山 UO-lo-pə-d
5 3 5 2 5 1 5
32 l0
0
100	0	0.2	0.4	0.6	0.8	1
Parameter Updates
16
0
0	0.2	0.4	0.6	0.8	1
Parameter Updates
(a)
8060402°
25	50	75
100
(b)
2 0 8 6 4 2
OOL ds,ΘUJ山 Uo--pθ=ci
0
0	0.2	0.4	0.6	0.8	1
Parameter Updates
2 0 8 6 4 2
g dəls,əuj二山 Uo--pə-d
0.2	0.4	0.6	0.8	1
95
90
85
80
75
70
65
60
55
50
0
Parameter Updates
0.2	0.4	0.6	0.8	1
Parameter Updates
Figure 30: Prediction error (average over 10,000 sequences) for different action-dependent state
transitions on (a) Bowling and (b) Breakout. Parameter updates are in millions.
38
Published as a conference paper at ICLR 2017
0
1
90
80
ɔ 70
φ
ω 60
由30
U
O
⑤20
φ
上10
0
0
0 5 0 5
0 7 5 2
山uoapə
25	50	75
Time-steps
0.2	0.4	0.6	0.8
Parameter Updates

80
70
IO
苗60
ω
5 50
40
δ
3 30
U
o
司20
æ
上10
0
0.8
0.2	0.4	0.6
Parameter Updates
Oooooooo
53197531
OOL ds,ΘUJ山 uo-lo-pə-d
0.8
0.2	0.4	0.6
Parameter Updates
1.5
1.25
-	1
o
岳
S 0.75
O
ŋ
φ
£ 0.5
0.25
0
1
2
1.75
1.5
1.25
1
0.75
0.5
0.25
0
0
o
d
φ
ω
Φ
E
i—
而
o
a
U
O
局
⅛
Φ
oΞ
---------Baseline
---------Base2816
---------iZ
---------iz2816
----------Zt-I
----------Zt-Liz2816
---------ht-1
ht-1-iz
---------ht-ι-iz2816
255515550
7 12 702
IIOO
g dəls,əuj二山 Uo--pə-d
0.8
25	50	75
Time-steps
00
0.2	0.4	0.6
Parameter Updates
0.2	0.4	0.6	0.8
Parameter Updates
OOL dəls,əuj二s山 Uo-e-pθ=ci
4 3 2 1 0
b
Figure 31: Prediction error for different action-dependent state transitions on (a) Fishing Derby and
(b) Freeway.
39
Published as a conference paper at ICLR 2017
140
Oo Q 。 。 O
2 0 8 6 4 2
山 Uo。一pə
0
1	25	50	75
Time-steps
45
10
100	0	0.2	0.4	0.6	0.8	1
Parameter Updates
45 ∣-∏-------1---------1--------1---------1--------- 110
0 5 0 5 0 5
4 3 3 2 2 1
OL dəls,əlu二 Ie山 UoQo-Pə-d
10
0	0.2	0.4	0.6	0.8
Parameter Updates
5
O 。 QO°Q
0 9 8 7 6 5
OOL dəls,əuJ-I山 Uo--pa
40
1	0	0.2	0.4	0.6	0.8	1
Parameter Updates
(a)
4 3 2
山Uo=。-pə-d
25
5352515
3 2 10
g dəls,əuj二山 UO--Pə-d
50	75
Time-steps
00
0.2	0.4	0.6	0.8	1
Parameter Updates
4
3.5
o
Σ 3
φ
ω
2 2.5
E
M 2
O
≤ 1.5
U
S	1
1	1
I 0.5
0
0
0.2
OOL dəls,əuj二s山 Uo-e-pθ=ci

2 0 8 6 4 2 0
0.4	0.6	0.8
Parameter Updates
O
0.2	0.4	0.6	0.8	1
Parameter Updates
b
Figure 32: Prediction error for different action-dependent state transitions on (a) Ms Pacman and (b)
Pong.
40
Published as a conference paper at ICLR 2017
250
,0Q,0i0
0 5 0 5
2 11
山 Uo。一pə
40
0
1	25	50	75
Time-steps
55
5 5 5 5 5,0
4 3 2 18
OL dəls,əlu二山 UOQo-Pə
5
100	0	0.2	0.4	0.6	0.8	1
Parameter Updates
230
o 200
o
17 170
φ
E
二140
E
O
1 110
0.2	0.4	0.6	0.8
Parameter Updates
OOOOOOO
OOOOOOO
7 6 5 4 3 2 1
山uoapəw
0
1	25	50	75
Time-steps
g dəls,əuj二s山 Uo-B-pə-d
Q_
50
1	0	0.2	0.4	0.6	0.8	1
Parameter Updates
(a)
110
30
100	0
O 。 Qo°。 。
0 9 8 7 6 5 4
0.2	0.4	0.6	0.8	1
Parameter Updates
130
OoOO
19 7 5
OL dəls,əlu二山 UO--pə一
130
OQOQ
19 7 5
9L dəls,əuJ-Ile山 Uo--pə-d
0.2	0.4	0.6	0.8	1
Parameter Updates
30 ----------1---------1---------1----------1--------- 30
0	0.2	0.4	0.6	0,8	1	0
Parameter Updates
(b)
Figure 33: Prediction error for different action-dependent state transitions on (a) Qbert and (b)
Riverraid.
41
Published as a conference paper at ICLR 2017
山Uo=。-pə-d
505050505
44332211
山 Uo。一pə
0
1	25
40
50	75
Time-steps
0 5 0 5 0 5
3 2 2 1 1
OL dəls,əlu-I山 UO--Pə-d
0.2	0.4	0.6	0.8
Parameter Updates
5 0 5 0 5 0
3 3 2 2 1 1
g dəls,əlu二山 Uo--pθ-d
5
100	0	0.2	0.4	0.6	0.8	1
Parameter Updates
70
o 60
o
50 50
φ
E
匚40
E
O
LU 30
U
O
O
5 20
ω
oΞ
10
1	0	0.2	0.4	0.6	0.8	1
Parameter Updates
(a)
40
OOOOOOO
4 2 0 8 6 4 2
IO
d
Φ
ω
Φ
E
而
δ
LS
H
⅛
□Ξ
0 -------------1-------------1-------------u-
1	25	50	75
Time-steps
100
Parameter Updates
150
140
35
30
25
20
15
10
0
0.2	0.4	0.6	0.8	1
Parameter Updates
6 120
E
匚110
E
° 100
LU
o 90
^o
节
8 80
Q_
70
0
0.2	0.4	0.6	0.8	1
Parameter Updates
(b)
Figure 34: Prediction error for different action-dependent state transitions on (a) Seaquest and (b)
Space Invaders.
42
Published as a conference paper at ICLR 2017
Prediction Error at Time-step 10	Prediction Error	Prediction Error at Time-SteP 10	Prediction Error
r _ .	_ _ ——
Time-steps
5 3 5 2 5 1 5
32 l0
0.2	0.4	0.6	0.8
Parameter Updates
0
120
14
2 0 8 6 4 2
OOL dəls,əuJ-I山 Uo--pa
0
1	0	0.2	0.4	0.6	0.8	1
Parameter Updates
⑶
75
25
2 0 8 6 4 2 0
g dəls,əuj二山 Uo--pθ=d
∞
14
0.8
100
80
60
40
20
0
1
18
16
14
12
10
8
6
4
2
0
0
50
Time-steps
0.2	0.4	0.6
Parameter Updates
0.8
O
(
OoOOOO
0 9 8 7 6 5
OOL dəls,əuj二山 uoo-pθ-d
0.8
0.2	0.4	0.6
Parameter Updates
0.2	0.4	0.6
Parameter Updates
Figure 35: Prediction error (average over 10,000 sequences) for different convolutional action-
dependent state transitions on (a) Bowling and (b) Breakout. Parameter updates are in millions.
43
Published as a conference paper at ICLR 2017
120
≡ ∞ ∞
山Uo。-pə-d
70
IO
苗60
ω
5 50
5 40
δ
30 30
U
O
⑤20
æ
10
0
1	25	50	75
100
90
80
ɔ 70
φ
ω 60
30 30
U
O
20 20
φ
10
Time-steps
150
0
0	0.2	0.4	0.6	0.8
Parameter Updates
0
0	0.2	0.4	0.6	0.8	1
Parameter Updates
10
1	0
Oo10。 。 。
3 1 9 7 5 3
OOL dəls,əlu二 Ie山 Uo。一pə一
0.2	0.4	0.6	0.8	1
Parameter Updates
⑶
5
O
O O
山uoapə
0
1	25	50	75
Time-steps
5 5 1 5 5 5
12 7 0 2
IOO
g dəls,əuj二山 Uo--pθ=d
0
100	0	0.2	0.4	0.6	0.8	1
Parameter Updates
1.75
o
∑ 1.5
φ
ω
6 1.25
E
LU
0.75
I 0.5
0.25
4 3 2 1
OOL dəls,əlu二s山 UO=o-pθ一
0 ---------1----------1---------1---------1----------
0	0.2	0.4	0.6	0.8	1
Parameter Updates
0 ---------1---------1----------1---------1----------
0	0.2	0.4	0.6	0.8	1
Parameter Updates
(b)
Figure 36: Prediction error for different convolutional action-dependent state transitions on (a)
Fishing Derby and (b) Freeway.
44
Published as a conference paper at ICLR 2017
150
Prediction Error at Time-step 10	Prediction Error	Prediction Error at Time-step 10	Prediction Error
_ __________________ ________ _
125
100
75
50
25
0
1	25	50	75
Time-steps
50
45
40
35
30
25
20
15
10
0	0.2	0.4	0.6	0.8
Parameter Updates
5
4 3 2
45
10
100	0	0.2	0.4	0.6	0.8	1
Parameter Updates
160 ----------1---------1----------1---------1---------
ο 140
ο
i 120
φ
E
匚100
E
O
LU 80
Q_
40
1	0
(a)
25	50	75	100
Time-steps
4 ɪ-π-------1-----------1----------1----------1--------- 12
5 3 5 2 5 1 5
2 l
0
0	0.2	0.4	0.6	0.8
Parameter Updates
0.2	0.4	0.6	0.8	1
Parameter Updates
5352515
3 2 10
g dəls,əuj二山 UO--Pə-d
0
0	0.2	0.4	0.6	0.8	1
Parameter Updates
0 8 6 4 2
OOL dəls,əuj二山 uοο-pθ-d
1	0
(b)
0.2	0.4	0.6	0.8	1
Parameter Updates
Figure 37: Prediction error for different convolutional action-dependent state transitions on (a) Ms
Pacman and (b) Pong.
45
Published as a conference paper at ICLR 2017
200
山Uo=。-pə-d
40
E
而
δ
a
U
O
⅛
oΞ
35
30
25
20
15
10
25	50	75	100
Time-steps
0.2	0.4	0.6	0.8	1
Parameter Updates
山Uo=。-pə-d
5 5 5 5 5
4 3 2 1
OL ds,ΘUJ山 UO--Pə-d
0.8
0.2	0.4	0.6
Parameter Updates
230
O 200
o
17 170
φ
E
二140
E
O
1 110
Q_
50
1	0

75
g dəls,əuj二s山 Uo-B-pə-d
∞
25	50
Time-steps
30
0
OoOO
19 7 5
OL dəls,əlu二山 UO--pə一
0.2	0.4	0.6	0.8	1
Parameter Updates
9L dəls,əuJ-Ile山 Uo-B-pə-d
O
130
0.2	0.4	0.6	0.8	1
Parameter Updates
00
0.2	0.4	0.6	0.8	1
30
0
Parameter Updates
907050
0.2	0.4	0.6	0.8	1
Parameter Updates
(b)
Figure 38:	Prediction error for different convolutional action-dependent state transitions on (a) Qbert
and (b) Riverraid.
46
Published as a conference paper at ICLR 2017
60
OOOOO
5 4 3 2 1
山Uo。-pə-d
0
1	25	50	75
Time-steps
35
0 5 0 5 0
3 2 2 1 1
g dəls,əlu二山 Uo-lo-pə-d
5
0	0.2	0.4	0.6	0.8	1
Parameter Updates
40
100
Ld
U
35
30
25
20
15
10
0.2
0.4
0.6
0.8
1
Parameter Updates
80
70
60
50
40
30
0.2
0.4
0.6
0.8
1
Parameter Updates
20
0
(a)
150
5 0 5glp
2 0 7 5 2
山Uo。-pə-d
0
1	25	50	75
Time-steps
40
5
0	0.2	0.4	0.6	0.8	1
Parameter Updates
100
40
Parameter Updates
150
Parameter Updates
o
φ
E
布
5
0
(b)
Figure 39:	Prediction error for different convolutional action-dependent state transitions on (a)
Seaquest and (b) Space Invaders.
47
Published as a conference paper at ICLR 2017
Prediction Error at Time-step 10	Prediction Error	Prediction Error at Time-SteP 10	Prediction Error
r _ .	_ _ ——
10
9
8
7
6
5
4
3
2
1
0
1	25	50	75
Time-steps
Ε
i—
tθ
δ
a
U
O
ŋ
φ
οΞ
3.5
--------Whht-I ® Waat-I
--------Whht-I ® WaIat-1+ WSat-
--------Wzzi-I ® Waat-I
--------Whht-I Θ Wzzt-I Θ Waat-I
--------Whht-I ® WaIat-I
0
100	0
3.5
3 5 2 5 1 5
2 l0
Oo _• dels,①EHIE-0」mUoQɑp ①」d
0
0	0.2	0.4	0.6	0.8
Parameter Updates
120
2.5
2
1.5
1
0.5
0.2	0.4	0.6	0.8	1
Parameter Updates
15
13
11
9
3
1	0	0.2	0.4	0.6	0.8	1
Parameter Updates
(a)
--------Whht-I ® Waat-I
--------Whht-I ® Wa1 at-1 + Wa2at-1
--------Wzzi-I ® Waat-I
--------Whht-I Θ Wzzt-I Θ Waat-I
--------Whht-I Θ Wa1 at-1
100
80
60
40
20
0
1
16
14
12
10
8
6
4
2
0
0
25	50	75
Time-steps
0.2	0.4	0.6	0.8
Parameter Updates
b
14
2 0 8 6 4 2 0
g dəls,əuj二山 Uo--pθ=d
∞
0.2	0.4	0.6	0.8
Parameter Updates
Oooooooo
21098765
OOL ds,ΘUJ-l山 Uo--pθ-Cl
0.2	0.4	0.6	0.8	1
Parameter Updates
Figure 40: Prediction error (average over 10,000 sequences) for different ways of incorporating the
action on (a) Bowling and (b) Breakout. Parameter updates are in millions.
48
Published as a conference paper at ICLR 2017
--------Whht-I ® Waat-I
--------Whht-I ® Wa1 at-1 + Wa2at-1
--------Wzzi-I ® Waat-I
'0OQ
9 7 5 3
山 uopθ
10
1	25	50	75
Time-steps
10
100	0	0.2	0.4	0.6	0.8	1
Parameter Updates
⑶
515
1 O
山 Uo。一pə
--------Whht-I ® Waat-I
--------Whht-I ® WaIat-1+ Wa2at-1
--------Wzzi-I ® Waat-I
--------Whht-I Θ WzZt-I Θ Waat-I
--------Whht-I Θ WaIat-I
--------W*hhtτ ® W*zζi-ι ® W*aat-ι
--------W*hht-ι ® W*a1 at-ι
g dəls,əuj二s山 Uo-B-pə-d
0 -------------1------------1------------1-
1	25	50	75
Time-steps
100
o
∑ 1.5
φ
ω
6 1.25
E
LU
0.25
1.75
0.75
0.5
5
7
5 1 5∙55
2 7 0 2
IOO
0
0	0.2	0.4	0.6	0.8	1
Parameter Updates
0 1---------1----------1---------1----------1---------1	0
0	0.2	0.4	0.6	0.8	1	0
Parameter Updates
(b)
4 3 2 1
OOL dəls,əlu二s山 UO=o-pθ一
0.2	0.4	0.6	0.8	1
Parameter Updates
Figure 41: Prediction error for different ways of incorporating the action on (a) Fishing Derby and
(b) Freeway.
49
Figure 4∙∙PrediCtion error for different WayS OfinCOrPOmtilIg the action on (a) MS PaCman and (b)
pong.
5。
Prediction Error at Time-step 10
o	7j-	pɔ	ω
5	―L	5	2	5	3	5	4
C:
0 0∙2 0∙4 0σ)0-∞
Parameter UPdateS
Prediction Error at Time-step 100
4	6	8	。	2	4
一 0 0∙2 0∙4 0σ)0-∞
Parameter UPdateS
(b)
Prediction Error
2	3	4	5	6
TimeIStePS
25 5。 75 一 ∞
Prediction Error at Ti me-step 5
U
0 0∙2 04 0σ)0-∞
Parameter UPdateS
Prediction Error at Time-step 10
-122334455
5。5。5。5。5
O
0∙2 04 0σ)ooɔ
Parameter UPdateS
25
5。
τB^e,steps
75
Prediction Error at Time-step 100
6	7 8co O 1	2
OOOOOOO
0∙2 0∙4 0σ)0-∞
Parameter UPdateS
Prediction Error
O S δ S S S §
O
PUbliShed as a ConferenCe PaPersICLR 2017
Prediction Error at Time-step 5
-12233445
5。5	。5。	5。
O
92 049698
Parameter UPdateS
Published as a conference paper at ICLR 2017
山Uo=。-pə-d
Oooooooo
4 2 0 8 6 4 2
山 Uo。一pə
25	50	75
Time-steps
40
5
100	0
OL dəls,əuJ-Is山 Uo-B-pə-d
230
g 200
d
φ
ω
φ 170
H
to
o 140
岳
⅞ 110
P
φ
□Ξ
5
0	0.2	0.4	0.6	0.8	1
Parameter Updates
(a)
1000 -------------1------------1------------1------------
O
8
O
6
O
4
O
20
--------Whht-I ® Waat-I
--------Whht-I ® WaIat-I + Wa2αt-ι
--------Wzzi-I ® Waat-I
--------Whht-I Θ Wzzt-I Θ Waat-I
0 -------------1------------1------------1-----------
1	25	50	75	100
Time-steps
Parameter Updates
0.2	0.4	0.6	0.8	1
Parameter Updates
80
0	0.2	0.4	0.6	0.8	1
Parameter Updates
115
g dəls,əuj二s山 Uo-B-pə-d
5 5 5 5 5 5
0 9 8 7 6 5
45 ----------1----------1---------1---------1---------
0	0.2	0.4	0.6	0.8	1
Parameter Updates
Figure 43: Prediction error for different ways of incorporating the action on (a) Qbert and (b)
Riverraid.
(b)
51
Figure 44〈PrediCtiOIl error for different WayS OfmCOrPOmting the action on (a) SeaqUeSt and (b)
SPaCe Invader-
52
ωo
0 0∙2
(b)
Prediction Error at Time-step 10
-2	2	3	3	4	4
(Ji O (Ji O (Ji O (Ji
- 0
0 0∙2 04 0σ)0-∞
Parameter UPdateS
Prediction Error at Time-step 100
S 8 S I 8 δ i
0∙4 o-æ 0-∞
Parameter UPdateS
Prediction Error
S δ S S S §
二∙
U
一 25
5。
5。
τB^e,steps
75
Prediction Error at Ti me-step 5
-2	2	3	3	4
5	。	5	。	5	。
0.49698
Parameter UPdateS
Prediction Error at Time-step 10
5
Prediction Error
5
0 0∙2 04 0σ)0-∞
Parameter UPdateS
Prediction Error at Time-step 100
5。
Hme，StePS
75 1 ∞
Prediction Error at Time-step 5
2	2	3	3
。	5	。	5	。	5
5
0 0∙2 04 0σ)0-∞
Parameter UPdateS
PUbliShed as a ConferenCe PaPersICLR 2017
Published as a conference paper at ICLR 2017
5 4 3 2 1 0
OL dəls,əuj二s山 Uo=O-P0」Cl
0.2	0.4	0.6	0.8	1
Parameter Updates
2
0 8 6 4 2 0
Og dəls,əlu二 Ie山 Uo=。-pə-d
0.2	0.4	0.6	0.8	1
Parameter Updates
765432 IO
9Z dəls,əlu二s山 UO-lo-pə"
4
2 0 8 6 4 2 0
OOL dəls,əuj二s山 Uo-E-pa£
0
0
5 0 5 0 5g 巧
7 5 2 0 7 5 2
OL dəls,əuj二山 Uo-IO-pə-Cl
OoOOOOOOOO
0987654321
9d dəls,əlu二 Ie山 uo_-pə-d
0.2	0.4	0.6
0.8
0.2	0.4	0.6	0.8	1
09 dφls,① E-IlE-0」」山 uo-iʒO-P ①」CL
200
180
160
140
120
100
80
60
40
20
0
Parameter Updates
0.8
1
0.2	0.4	0.6
Parameter Updates
Figure 45: Prediction error (average over 10,000 sequences) with (continuous lines) action-dependent
and (dashed lines) action-independent state transition. Parameter updates are in millions.
53
Published as a conference paper at ICLR 2017
Figure 46: Salient frames extracted from 2000 frames of Freeway generated using our simulator with
actions chosen by a human player.
B.1.4 Human Play
In Fig. 46, we show the results of a human playing Freeway for 2000 time-steps (the corresponding
video is available at Freeway-HPlay). The model is able to update the score correctly up to (14,0). At
that point the score starts flashing and to change color as a warn to the resetting of the game. The
model is not able to predict the score correctly in this warning phase, due to the bias in the data (DQN
always achieves score above 20 at this point in the game), but flashing starts at the right time as does
the resetting of the game.
Figs. 47 and 48 are larger views of the same frames shown in Fig. 7.
B.2 3D Car Racing
We generated 10 and one million (180×180) RGB images for training and testing respectively, with
an agent trained with the asynchronous advantage actor critic algorithm (Fig. 2 in (Mnih et al., 2016)).
The agent could choose among the three actions accelerate straight, accelerate left, and accelerate
right, according to an -greedy policy, with selected at random between 0 and 0.5, independently
for each episode. We added a 4th ‘do nothing’ action when generating actions at random. Smaller
lead to longer episodes (〜1500 frames), while larger e lead to shorter episodes (〜200 frames).
We could use the same number of convolutional layers, filters and kernel sizes as in Atari, with no
padding.
Fig. 49 shows side by side predicted and real frames for up to 200 actions. We found that this quality
of predictions was very common.
When using our model as an interactive simulator, we observed that the car would slightly slow down
when selecting no action, but fail to stop. Since the model had never seen occurrences of the agent
54
Published as a conference paper at ICLR 2017



,

b

,
I
b

I ,
I
Figure 47:	Salient frames extracted from 500 frames of Pong generated using our simulator with
actions chosen by a human player.
completely releasing the accelerator for more than a few consecutive actions, it makes sense it would
fail to deal with this case appropriately.
B.3	3D MAZES
Unlike Atari and TORCS, we could rely on agents with random policies to generate interesting
sequences. The agent could choose one of five actions: forward, backward, rotate left, rotate right
or do nothing. During an episode, the agent alternated between a random walk for 15 steps, and
spinning on itself for 15 steps (roughly, a complete 360° spin). This encourages coherent learning
of the predicted frames after a spin. The random walk was with dithering of 0.7, meaning that new
actions were chosen with a probability of 0.7 at every time-step. The training and test datasets were
made of 7,600 and 1,100 episodes, respectively. All episodes were of length 900 frames, resulting in
6,840,000 and 990,000 (48×48) RGB images for training and testing respectively.
We adapted the encoding by having only 3 convolutions with 64 filters of size 6 × 6, stride 2, and
padding 0, 1, and 2. The decoding transformation was adapted accordingly.
B.4	Model-based Exploration
We observed that increasing the number of Monte-Carlo simulations beyond 100 made little to
no difference, probably because with na possible actions the number of possible Monte-Carlo
simulations nda is so large that we quickly get diminishing returns with every new simulation.
55
Published as a conference paper at ICLR 2017
Figure 48:	Salient frames extracted from 350 frames of Breakout generated using our simulator with
actions taken by a human player.
Increasing significantly the sequence length of actions beyond d = 6 lead to a large decrease in
performance. To explain this, we observed that after 6 steps, our average prediction error was less
than half the average prediction error after 30 steps (0.16 and 0.37 respectively). Since the average
minimum and maximum distances did not vary significantly (from 0.23 to 0.36, and from 0.24 to 0.4
respectively), for deep simulations we ended up with more noise than signal in our predictions and
our decisions were no better than random.
Fig. 50 shows some examples of trajectories chosen by our explorer. Note that all these trajectories
are much smoother than for our baseline agent.
C Prediction-Independent Simulators
In this section we compare different action-dependent state transitions and prediction lengths T for
the prediction-independent simulator.
More specifically, in Fig. 51 we compare (with T = 15) the state transition
C(xt-1) Uptot - 1 = τ - 1 ,
Encoding: zt-1 =
ht-1	From t - 1 = τ ,
Action fusion: Vt = Whht-1 0 Waat-1,
Gate update: it = σ(Wivvt+Wizzt-1), ft = σ(Wfvvt + Wfzzt-1),
ot =σ(WovVt+Wozzt-1),
Cell update: ct = ft 0 ct-1 + it 0 tanh(WcvVt + Wczzt-1) ,
56
Published as a conference paper at ICLR 2017
Figure 49: Salient frames, predicted (left) and real (right), for TORCS from a 200 time-steps video.
where the vectors ht-1 and vt have dimension 1024 and 2048 respectively and with different matrices
W for the warm-up and the prediction phases (the resulting model has around 40M parameters - We
refer to this structure as 'Base-zt-ι = ht-i, in the figures), with the following alternatives:
•	Base-Zt-i = 0: Remove the action-independent transformation of ht-i, i.e.
zt-1
C(xt-i)
Up to t - 1 = τ - 1 ,
From t - 1 = τ ,
where 0 represents a zero-vector and with different matrices W for the warm-up and the
prediction phases. This model has around 40M parameters.
•	ht-i-itz2816-zt-i = 0: Substitute zt-i with ht-i in the gate updates and have a separate gating
for the encoded frame, i.e.
C(xt-i) Up to t - 1 = τ - 1 ,
zt-i =
0	From t - 1 = τ ,
Vt = Whht-I 乳 Waat-1,
it = σ(Wivvt + Wihht-i), ft = σ(Wfvvt + Wfhht-i),
ot = σ(WovVt + Wohht-i),
Ct = ft 0 Ct-1 + it 0 tanh(WcvVt + Wcsht-1) + iZ 0 tanh(zt-i),
with shared W matrices for the warm-up and the prediction phases, without RReLU after
the last convolution of the encoding, and with vectors ht-1 and Vt of dimensionality 2816.
This model has around 95M parameters.
As we can see, the ’Base-zt-1 = 0’ state transition performs quite poorly for long-term prediction
compared to the other transitions. With this transition, the prediction-independent simulator performs
much worse than the prediction-dependent simulator with the baseline state transition (Appendix
B.1.1). The best performance is obtained with the ’ht-1-itz2816-zt-1 = 0’ structure, which however
has a large number of parameters.
57
Published as a conference paper at ICLR 2017
Figure 50: Examples of paths followed by random baseline (left), and explorers based on our
simulator (right).
In Figs. 52 and 53, We show the effect of using different prediction lengths T on the structure 'Base-
zt-1 = ht-1’. As we can see, using longer prediction lengths dramatically improves long-term.
Overall, the best performance is obtained using two subsequences of length T = 15.
58
Published as a conference paper at ICLR 2017
山Uo-B-pə-d
0
1
2 O
8 6 4 2
25
75
50
Time-steps
100
0
0
352515
2 10
9 dəls,əlu-lle山 UOo-pθ-d
40
80
120
160
200
240
40
35
30
25
20
15
10
⑶
200
山Uo-Io-P①」CL
80
175
150
125
100
75
50
25
0
BaSe-ZtT = ht-1
BaSe-Zt-I = 0
ht-T2816-zt-ι
Time-steps
o
æ
E
而
Ld
U
0
0
70
60
50
40
30
20
10
40
80
120
160
200
Number of Frames
o
o
LU
U
φ
E
而
240
(b)
Number of Frames
5
80
70
60
50
40
30
20
10
LU
U
α)
E
i—
而
0
0
80
40
80
120
Number of Frames
0
0
120
200
40
0
Number of Frames
180
160
140
120
100
80
60
40
80
120
160
200
Number of Frames
240
Figure 51: Prediction error (average over 10,000 sequences) VS number of frames seen by the model
(excluding warm-up frames) for the prediction-independent simulator with different action-dependent
state transitions for (a) Bowling, Freeway, Pong, and (b) Breakout, Fishing Derby, Ms Pacman, Qbert,
Seaquest, Space Invaders.	59
Published as a conference paper at ICLR 2017
OL dəls,əuj二s山 Uo-lo-pə-d
山 Uo-IO-pə"
8765432 IO
山Uo-B-pə-d
25
75
50
Time-steps
100
0
0
352515
2 10
9 dəls,əlu-lle山 UOo-pθ-d
40
80	120	160
Number of Frames
200	240
150
O
80
70
0
0
453525150
2 l
40
80
Number of Frames
o
o
LU
U
φ
E
i—
布
120	160	200	240
—T = 15
--T = 20
T = 25
25
75
LU
U
α)
E
i—
而
50
Time-steps
20
0
0
17.5
15
12.5
10
7.5
5
2.5
40	80	120	160	200	240
Number of Frames
⑶
100
80
0
0
170
30
40	80	120	160	200	240	0
Number of Frames
(b)
70
60
50
40
30
20
10
40	80	120	160	200	240
Number of Frames
OOOQOQ
5 3 1 9 7 5
OOL dəls,əuj-IlE山 Uo-lo-pə-d
Figure 52: Prediction error VS number of frames seen by the model for the prediction-independent
simulator with different prediction lengths T ≤ 25 for (a) Bowling, Freeway, Pong, and (b) Breakout,
Fishing Derby, Ms Pacman, Qbert, Seaquest, Space Invaders.
60
Published as a conference paper at ICLR 2017
OL dəls,əuj二s山 Uo-lo-pə-d
8765432 IO
山Uo-B-pə-d
g dəls,əlu二s山 UO=o-pθ一
3 5
2
2515
1 O
200
80	120	160
Number of Frames
240
80
70
0
0
453525150
2 l
200
80	120	160
Number of Frames
240
O 5 O 5 。 IPo
5 2 0 7 5 2
山Uo-IO-pə
25	50	75
Time-steps
70
IO
⅛60
ω
5 50
H
玄40
o
3 30
U
O
至20
ŋ
φ
上10
0
100	0
200
80	120	160
Number of Frames
240
40
170
≡ 70
LU
80	120	160	200
Number of Frames
240
10
0
150
4130
α)
,110
E
匚90
200
80	120	160
Number of Frames
240
(b)
Figure 53: Prediction error vs number of frames seen by the model for the prediction-independent
simulator with BPTT(15, 1) and BPTT(15, 2) for (a) Bowling, Freeway, Pong, and (b) Breakout,
Fishing Derby, Ms Pacman, Qbert, Seaquest, Space Invaders.
61