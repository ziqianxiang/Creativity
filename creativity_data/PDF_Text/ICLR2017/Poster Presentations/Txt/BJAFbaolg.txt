Published as a conference paper at ICLR 2017
Learning to Generate Samples from Noise
through Infusion Training
Florian Bordes, Sina Honari, Pascal Vincent*
Montreal Institute for Learning Algorithms (MILA)
DePartement d,Informatique et de Recherche OPerationnelle
Universite de Montreal
Montreal, Quebec, Canada
{firstname.lastname@umontreal.ca}
Ab stract
In this work, we investigate a novel training Procedure to learn a generative model
as the transition oPerator of a Markov chain, such that, when aPPlied rePeatedly on
an unstructured random noise samPle, it will denoise it into a samPle that matches
the target distribution from the training set. The novel training Procedure to learn
this Progressive denoising oPeration involves samPling from a slightly different
chain than the model chain used for generation in the absence of a denoising tar-
get. In the training chain we infuse information from the training target examPle
that we would like the chains to reach with a high Probability. The thus learned
transition oPerator is able to Produce quality and varied samPles in a small number
of stePs. ExPeriments show comPetitive results comPared to the samPles gener-
ated with a basic Generative Adversarial Net.
1	Introduction and motivation
To go beyond the relatively simPler tasks of classification and regression, advancing our ability to
learn good generative models of high-dimensional data aPPears essential. There are many scenarios
where one needs to efficiently Produce good high-dimensional outPuts where outPut dimensions
have unknown intricate statistical dePendencies: from generating realistic images, segmentations,
text, sPeech, keyPoint or joint Positions, etc..., Possibly as an answer to the same, other, or multiPle
inPut modalities. These are tyPically cases where there is not just one right answer but a variety of
equally valid ones following a non-trivial and unknown distribution. A fundamental ingredient for
such scenarios is thus the ability to learn a good generative model from data, one from which we
can subsequently efficiently generate varied samPles of high quality.
Many aPProaches for learning to generate high dimensional samPles have been and are still actively
being investigated. These aPProaches can be roughly classified under the following broad categories:
•	Ordered visible dimension samPling (van den Oord et al., 2016; Larochelle & Murray,
2011). In this tyPe of auto-regressive aPProach, outPut dimensions (or grouPs of condition-
ally indePendent dimensions) are given an arbitrary fixed ordering, and each is samPled
conditionally on the Previous samPled ones. This strategy is often imPlemented using a
recurrent network (LSTM or GRU). Desirable ProPerties of this tyPe of strategy are that
the exact log likelihood can usually be comPuted tractably, and samPling is exact. Unde-
sirable ProPerties follow from the forced ordering, whose arbitrariness feels unsatisfactory
esPecially for domains that do not have a natural ordering (e.g. images), and imPoses for
high-dimensional outPut a long sequential generation that can be slow.
•	Undirected graPhical models with multiple layers of latent variables. These make infer-
ence, and thus learning, Particularly hard and tend to be costly to samPle from (Salakhutdi-
nov & Hinton, 2009).
•	Directed graPhical models trained as variational autoencoders (VAE) (Kingma & Welling,
2014; Rezende et al., 2014)
* Associate Fellow, Canadian Institute For Advanced Research (CIFAR)
1
Published as a conference paper at ICLR 2017
•	Adversarially-trained generative networks. (GAN)(Goodfellow et al., 2014)
•	Stochastic neural networks, i.e. networks with stochastic neurons, trained by an adapted
form of stochastic backpropagation
•	Generative uses of denoising autoencoders (Vincent et al., 2010) and their generalization
as Generative Stochastic Networks (Alain et al., 2016)
•	Inverting a non-equilibrium thermodynamic slow diffusion process (Sohl-Dickstein et al.,
2015)
•	Continuous transformation of a distribution by invertible functions (Dinh et al. (2014), also
used for variational inference in Rezende & Mohamed (2015))
Several of these approaches are based on maximizing an explicit or implicit model log-likelihood or
a lower bound of its log-likelihood, but some successful ones are not e.g. GANs. The approach we
propose here is based on the notion of “denoising” and thus takes its root in denoising autoencoders
and the GSN type of approaches. It is also highly related to the non-equilibrium thermodynamics
inverse diffusion approach of Sohl-Dickstein et al. (2015). One key aspect that distinguishes these
types of methods from others listed above is that sample generation is achieved thanks to a learned
stochastic mapping from input space to input space, rather than from a latent-space to input-space.
Specifically, in the present work, we propose to learn to generate high quality samples through a
process of progressive, stochastic, denoising, starting from a simple initial “noise” sample generated
in input space from a simple factorial distribution i.e. one that does not take into account any
dependency or structure between dimensions. This, in effect, amounts to learning the transition
operator of a Markov chain operating on input space. Starting from such an initial “noise” input,
and repeatedly applying the operator for a small fixed number T of steps, we aim to obtain a high
quality resulting sample, effectively modeling the training data distribution. Our training procedure
uses a novel “target-infusion” technique, designed to slightly bias model sampling to move towards
a specific data point during training, and thus provide inputs to denoise which are likely under the
model’s sample generation paths. By contrast with Sohl-Dickstein et al. (2015) which consists in
inverting a slow and fixed diffusion process, our infusion chains make a few large jumps and follow
the model distribution as the learning progresses.
The rest of this paper is structured as follows: Section 2 formally defines the model and training
procedure. Section 3 discusses and contrasts our approach with the most related methods from
the literature. Section 4 presents experiments that validate the approach. Section 5 concludes and
proposes future work directions.
2	Proposed approach
2.1	Setup
We are given a finite data set D containing n points in Rd, supposed drawn i.i.d from an unknown
distribution q*. The data set D is supposed split into training, validation and test subsets Dtrain,
Dvaiid, Dtest. We will denote 9*「&山 the empirical distribution associated to the training set, and use
x to denote observed samples from the data set. We are interested in learning the parameters of a
generative model p conceived as a Markov Chain from which we can efficiently sample. Note that
we are interested in learning an operator that will display fast “burn-in” from the initial factorial
“noise” distribution, but beyond the initial T steps we are not concerned about potential slow mixing
or being stuck. We will first describe the sampling procedure used to sample from a trained model,
before explaining our training procedure.
2.2	Generative model sampling procedure
The generative model p is defined as the following sampling procedure:
•	Using a simple factorial distributionp(0)(z(0)), draw an initial sample z(0)〜p(0), where
z(0) ∈ Rd . Since p(0) is factorial, the d components of z(0) are independent: p0 cannot
model any dependency structure. z(0) can be pictured as essentially unstructured random
noise.
•	Repeatedly apply T times a stochastic transition operatorp(t)(z(t) |z(t-1)), yielding a more
“denoised” sample z(t) ~ p(t)(z(t)|z(t-1)), where all z(t) ∈ Rd.
2
Published as a conference paper at ICLR 2017
Figure 1: The model sampling chain. Each row shows a sample from p(z(0), . . . , z(T)) for a model
that has been trained on MNIST digits. We see how the learned Markov transition operator progres-
sively denoises an initial unstructured noise sample. We can also see that there remains ambiguity in
the early steps as to what digit this could become. This ambiguity gets resolved only in later steps.
Even after a few initial steps, stochasticity could have made a chain move to a different final digit
shape.
•	Output z(T ) as the final generated sample. Our generative model distri-
bution is thus p(z(T)), the marginal associated to joint p(z(0) , . . . , z(T))	=
p(0)(z(0)) QtT=1 p(t) (z(t) |z(t-1)).
In summary, samples from model p are generated, starting with an initial sample from a simple
distribution p(0) , by taking the Tthsample along Markov chain z(0) → z(1) → z(2) → . . . → z(T)
whose transition operator is p(t) (z(t) |z(t-1)). We will call this chain the model sampling chain.
Figure 1 illustrates this sampling procedure using a model (i.e. transition operator) that was trained
on MNIST. Note that we impose no formal requirement that the chain converges to a stationary
distribution, as we simply read-out z(T) as the samples from our model p. The chain also needs not
be time-homogeneous, as highlighted by notation p(t) for the transitions.
The set of parameters θ of model p comprise the parameters of p(0) and the parameters of tran-
sition operator p(t)(z(t) |z(t-1)). For tractability, learnability, and efficient sampling, these dis-
tributions will be chosen factorial, i.e. p(0) (z(0)) = Qid=1 pi(0)(zi(0)) and p(t)(z(t) |z(t-1)) =
Qid=1 pi(t) (zi(t) |z(t-1)). Note that the conditional distribution of an individual component i,
pi(t) (zi(t) |z(t-1)) may however be multimodal, e.g. a mixture in which case p(t) (z(t) |z(t-1)) would
be a product of independent mixtures (conditioned on z(t-1)), one per dimension. In our exper-
iments, we will take the p(t) (z(t) |z(t-1)) to be simple diagonal Gaussian yielding a Deep Latent
Gaussian Model (DLGM) as in Rezende et al. (2014).
2.3	Infusion training procedure
We want to train the parameters of model p such that samples from Dtrain are likely of being gener-
ated under the model sampling chain. Let θ(0) be the parameters of p(0) and let θ(t) be the parameters
of p(t) (z(t) |z(t-1)). Note that parameters θ(t) for t > 0 can straightforwardly be shared across time
steps, which we will be doing in practice. Having committed to using (conditionally) factorial dis-
tributions for our p(0) (z(0)) and p(t) (z(t) |z(t-1)), that are both easy to learn and cheap to sample
from, let us first consider the following greedy stagewise procedure. We can easily learn pi(0) (z(0))
to model the marginal distribution of each component xi of the input, by training it by gradient
descent on a maximum likelihood objective, i.e.
θ(0)
=arg max Ex〜q； , [logp(0)(x; θ)]
(1)
This gives US a first, very crude unstructured (factorial) model of q*.
3
Published as a conference paper at ICLR 2017
Having learned this p(0), we might be tempted to then greedily learn the next stage p(1) of
the chain in a similar fashion, after drawing samples z(0) 〜p(0) in an attempt to learn to
“denoise” the sampled z(0) into x. Yet the corresponding following training objective θ(1) =
argmaxθ Ex〜q； . ,z(o)〜p(o)[logp(1)(x∣z(0); θ)] makes no sense: X and z(0) are sampled inde-
pendently of each other so z(0) contains no information about x, hence p(1) (x|z(0)) = p(1)(x). So
maximizing this second objective becomes essentially the same as what we did when learning p(0).
We would learn nothing more. It is essential, if we hope to learn a useful conditional distribution
p(1)(X|z(0)) that it be trained on particular z(0) containing some information about X. In other
words, we should not take our training inputs to be samples from p(0) but from a slightly different
distribution, biased towards containing some information about X. Let us call it q(0)(z(0) |X). A
natural choice for it, if it were possible, would be to take q(0)(z(0) |X) = p(z(0) |z(T) = X) but this
is an intractable inference, as all intermediate z(t) between z(0) and z(T ) are effectively latent states
that we would need to marginalize over. Using a workaround such as a variational or MCMC ap-
proach would be a usual fallback. Instead, let us focus on our initial intent of guiding a progressive
stochastic denoising, and think ifwe can come up with a different way to construct q(0)(z(0) |X) and
similarly for the next steps q(t)(zit) ∣z(t-1), x).
Eventually, we expect a sequence of samples from Markov chain p to move from initial “noise”
towards a specific example x from the training set rather than another one, primarily if a sample
along the chain “resembles” x to some degree. This means that the transition operator should learn
to pick up a minor resemblance with an x in order to transition to something likely to be even
more similar to x. In other words, we expect samples along a chain leading to x to both have
high probability under the transition operator of the chain p(t)(z(t) |z(t-1)), and to have some form
of at least partial “resemblance” with x likely to increase as we progress along the chain. One
highly inefficient way to emulate such a chain of samples would be, for teach step t, to sample
many candidate samples from the transition operator (a conditionally factorial distribution) until we
generate one that has some minimal “resemblance” to x (e.g. for a discrete space, this resemblance
measure could be based on their Hamming distance). A qualitatively similar result can be obtained
at a negligible cost by sampling from a factorial distribution that is very close to the one given by the
transition operator, but very slightly biased towards producing something closer to x. Specifically,
we can “infuse” a little of x into our sample by choosing for each input dimension, whether we
sample it from the distribution given for that dimension by the transition operator, or whether, with
a small probability, we take the value of that dimension from x. Samples from this biased chain, in
which we slightly “infuse” x, will provide us with the inputs of our input-target training pairs for
the transition operator. The target part of the training pairs is simply x.
2.3.1	The infusion chain
Formally we define an infusion chain ez(0) → ez(1) → . . . → ez(T -1) whose distribution
q(ez(0), . . . , ez(T -1) |x) will be “close” to the sampling chain z(0) → z(1) → z(2) → . . . → z(T -1)
of model P in the sense that q(t)(Z(t)|z(t-1), x) will be close to p(t)(z(t)|z(t-1)), but will at ev-
ery step be slightly biased towards generating samples closer to target x, i.e. x gets progres-
sively “infused” into the chain. This is achieved by defining qi(0)(ezi(0) |x) as a mixture between
pi(0) (with a large mixture weight) and δxi, a concentrated unimodal distribution around xi, such
as a Gaussian with small variance (with a small mixture weight)1. Formally q(0)(Z(0)∣x) =
(1 - α(t))p(0)(Z(0)) + α(t)δxi(Z(0)), where 1 - α(t) and a(t) are the mixture weights 2 . In
other words, when sampling a value for Z(0) from q(0) there will be a small probability α(0)
to pick value close to xi (as sampled from δxi) rather than sampling the value from pi(0). We
call α(t) the infusion rate. We define the transition operator of the infusion chain similarly as:
q(t)(z(t) |z(t-1), x) = (1 - α㈤)pit)(z(t)回tT)) + α⑴δxi(z(t)).
1 Note that δxi does not denote a Dirac-Delta but a Gaussian with small sigma.
2In all experiments, we use an increasing schedule α(t) = α(t-1) +ω with α(0) and ω constant. This allows
to build our chain such that in the first steps, we give little information about the target and in the last steps we
give more informations about the target. This forces the network to have less confidence (greater incertitude)
at the beginning of the chain and more confidence on the convergence point at the end of the chain.
4
Published as a conference paper at ICLR 2017
3Z菖毋3尊2E岁
才2看褰3悉735
苧£^岔3翦，33
等？方蜃当以73下
令艮r∙3F⅛∕3 5
莓?^Z，速23淳
惇黄图 9总/3步
像«尊 a + KM Z a *
亳京手京3a2a*
营 333333 33
*->%3333 委 33
531533333
531533333
533333233
m3%务33233
¾¾t333133
*b3 333米33
净?r蓄3 3/ 33
乎罗⅛M a 3泵£3港
一333333333
¥33333^33
多与 3 3 3 3 3 3 3
Figure 2: Training infusion chains, infused with target X =W. This figure shows the evolution
of chain q(z(0), . . . , z(30) |x) as training on MNIST progresses. Top row is after network random
weight initialization. Second row is after 1 training epochs, third after 2 training epochs, and so on.
Each of these images were at a time provided as the input part of the (input, target) training pairs for
the network. The network was trained to denoise all of them into target 3. We see that as training
progresses, the model has learned to pick up the cues provided by target infusion, to move towards
that target. Note also that a single denoising step, even with target infusion, is not sufficient for the
network to produce a sharp well identified digit.
2.3.2	Denoising-based Infusion training procedure
For all X ∈ Dtrain :
•	Sample from the infusion chain Z = (Z(O),..., Z(T T))〜q(Z(O),..., Z(T T) |x).
precisely so: Zo 〜q(O)(Z(O)|x) ... Z(t)〜q(t)(Z(t)|Z(t-1), x)...
•	Perform a gradient step so that P learns to “denoise" every Z(t) into x.
θ(t) - θ(t) + „(t)d logp(t)(χl*τ);。⑴)
+ η	∂θ(t
where η(t) is a scalar learning rate. 3
As illustrated in Figure 2, the distribution of samples from the infusion chain evolves as training
progresses, since this chain remains close to the model sampling chain.
2.4	Stochastic log likelihood estimation
The exact log-likelihood of the generative model implied by our model p is intractable. The log-
probability of an example x can however be expressed using proposal distribution q as:
log p(x) = log Eq(ez|x)
p(Z, x)
_q(e|x)
(2)
Using Jensen’s inequality we can thus derive the following lower bound:
logp(x)	≥ Eq(e∣χ) [logp(Z, x) - log q(e∣x)]	(3)
where logp(Z,x) = logP(O)(Z(O)) + (PT-LIlogp(t)(Z(t)|Z(tT))) + logP(T)(XIZ(TT)) and
log q(Z∣x) = log q(O)(Z(O)∣x) + PT-LIlog q(t)(Z(t)|Z(t-1), x).
3Since we will be sharing parameters between the p(t) , in order for the expected larger error gradients on
the earlier transitions not to dominate the parameter updates over the later transitions we used an increasing
schedule η(t) = noT for t ∈ {1,...,T}.
5
Published as a conference paper at ICLR 2017
A stochastic estimation can easily be obtained by replacing the expectation by an average using a
few samples from q(ez|x). We can thus compute a lower bound estimate of the average log likelihood
over training, validation and test data.
Similarly in addition to the lower-bound based on Eq.3 we can use the same few samples from
q(ez|x) to get an importance-sampling estimate of the likelihood based on Eq. 24.
2.4.1	Lower-bound-based infusion training procedure
Since we have derived a lower bound on the likelihood, we can alternatively choose to optimize this
stochastic lower-bound directly during training. This alternative lower-bound based infusion train-
ing procedure differs only slightly from the denoising-based infusion training procedure by using
Z(t) as a training target at step t (performing a gradient step to increase logp(t)(Z(t)∣Z(t-1); θ(t)))
whereas denoising training always uses x as its target (performing a gradient step to increase
logp(t)(x∣Z(tτ); θ(t))). Note that the same reparametrization trick as used in Variational AUto-
encoders (Kingma & Welling, 2014) can be used here to backpropagate through the chain’s Gaussian
sampling.
3	Relationship to previously proposed approaches
3.1	Markov Chain Monte Carlo for energy-based models
Generating samples as a repeated application of a Markov transition operator that operates on input
space is at the heart of Markov Chain Monte Carlo (MCMC) methods. They allow sampling from an
energy-model, where one can efficiently compute the energy or unnormalized negated log probabil-
ity (or density) at any point. The transition operator is then derived from an explicit energy function
such that the Markov chain prescribed by a specific MCMC method is guaranteed to converge to
the distribution defined by that energy function, as the equilibrium distribution of the chain. MCMC
techniques have thus been used to obtain samples from the energy model, in the process of learning
to adjust its parameters.
By contrast here we do not learn an explicit energy function, but rather learn directly a parameterized
transition operator, and define an implicit model distribution based on the result of running the
Markov chain.
3.2	Variational auto-encoders
Variational auto-encoders (VAE) (Kingma & Welling, 2014; Rezende et al., 2014) also start from
an unstructured (independent) noise sample and non-linearly transform this into a distribution that
matches the training data. One difference with our approach is that the VAE typically maps from a
lower-dimensional space to the observation space. By contrast we learn a stochastic transition oper-
ator from input space to input space that we repeat for T steps. Another key difference, is that the
VAE learns a complex heavily parameterized approximate posterior proposal q whereas our infusion
based q can be understood as a simple heuristic proposal distribution based on p. Importantly the
specific heuristic we use to infuse x into q makes sense precisely because our operator is amap from
input space to input space, and couldn’t be readily applied otherwise. The generative network in
Rezende et al. (2014) is a Deep Latent Gaussian Model (DLGM) just as ours. But their approximate
posterior q is taken to be factorial, including across all layers of the DLGM, whereas our infusion
based q involves an ordered sampling of the layers, as We sample from q(t)(Z(t)|z(t-1), x).
More recent proposals involve sophisticated approaches to sample from better approximate poste-
riors, as the Work of Salimans et al. (2015) in Which Hamiltonian Monte Carlo is combined With
variational inference, Which looks very promising, though computationally expensive, and Rezende
& Mohamed (2015) that generalizes the use of normalizing floWs to obtain a better approximate
posterior.
4Specifically, the tWo estimates (loWer-bound and IS) start by collecting k samples from q(ez|x) and com-
puting for each the corresponding ' = logp(z, x) — log q(e∣x). The lower-bound estimate is then obtained
by averaging the resulting `1 , . . . `k, Whereas the IS estimate is obtained by taking the log of the averaged
e'1,..., e'k (in a numerical stable manner as logsumexp('ι ,...,'k) — log k).
6
Published as a conference paper at ICLR 2017
3.3	Sampling from autoencoders and Generative Stochastic Networks
Earlier works that propose to directly learn a transition operator resulted from research to turn au-
toencoder variants that have a stochastic component, in particular denoising autoencoders (Vincent
et al., 2010), into generative models that one can sample from. This development is natural, since
a stochastic auto-encoder is a stochastic transition operator form input space to input space. Gen-
erative Stochastic Networks (GSN) (Alain et al., 2016) generalized insights from earlier stochastic
autoencoder sampling heuristics (Rifai et al., 2012) into a more formal and general framework.
These previous works on generative uses of autoencoders and GSNs attempt to learn a chain whose
equilibrium distribution will fit the training data. Because autoencoders and the chain are typically
started from or very close to training data points, they are concerned with the chain mixing quickly
between modes. By contrast our model chain is always restarted from unstructured noise, and is
not required to reach or even have an equilibrium distribution. Our concern is only what happens
during the T “burn-in” initial steps, and to make sure that it transforms the initial factorial noise
distribution into something that best fits the training data distribution. There are no mixing concerns
beyond those T initial steps.
A related aspect and limitation of previous denoising autoencoder and GSN approaches is that these
were mainly “local” around training samples: the stochastic operator explored space starting from
and primarily centered around training examples, and learned based on inputs in these parts of space
only. Spurious modes in the generated samples might result from large unexplored parts of space
that one might encounter while running a long chain.
3.4	Reversing a diffusion process in non-equilibrium thermodynamics
The approach of Sohl-Dickstein et al. (2015) is probably the closest to the approach we develop here.
Both share a similar model sampling chain that starts from unstructured factorial noise. Neither
are concerned about an equilibrium distribution. They are however quite different in several key
aspects: Sohl-Dickstein et al. (2015) proceed to invert an explicit diffusion process that starts from
a training set example and very slowly destroys its structure to become this random noise, they then
learn to reverse this process i.e. an inverse diffusion. To maintain the theoretical argument that
the exact reverse process has the same distributional form (e.g. p(x(t-1) |x(t)) and p(x(t) |x(t-1))
both factorial Gaussians), the diffusion has to be infinitesimal by construction, hence the proposed
approaches uses chains with thousands of tiny steps. Instead, our aim is to learn an operator that can
yield a high quality sample efficiently using only a small number T of larger steps. Also our infusion
training does not posit a fixed a priori diffusion process that we would learn to reverse. And while
the distribution of diffusion chain samples of Sohl-Dickstein et al. (2015) is fixed and remains the
same all along the training, the distribution of our infusion chain samples closely follow the model
chain as our model learns. Our proposed infusion sampling technique thus adapts to the changing
generative model distribution as the learning progresses.
Drawing on both Sohl-Dickstein et al. (2015) and the walkback procedure introduced for GSN in
Alain et al. (2016), a variational variant of the walkback algorithm was investigated by Goyal et al.
(2017) at the same time as our work. It can be understood as a different approach to learning a
Markov transition operator, in which a “heating” diffusion operator is seen as a variational approxi-
mate posterior to the forward “cooling” sampling operator with the exact same form and parameters,
except for a different temperature.
4	Experiments
We trained models on several datasets with real-valued examples. We used as prior distribution
p(0) a factorial Gaussian whose parameters were set to be the mean and variance for each pixel
through the training set. Similarly, our models for the transition operators are factorial Gaussians.
Their mean and elementwise variance is produced as the output of a neural network that receives
the previous z(t-1) as its input, i.e. p(t)(z(t)∣z(t-1)) = N(μi(z(t-1)), σ2(z(t-1))) where μ and σ2
are computed as output vectors of a neural network. We trained such a model using our infusion
training procedure on MNIST (LeCun & Cortes, 1998), Toronto Face Database (Susskind et al.,
2010), CIFAR-10 (Krizhevsky & Hinton, 2009), and CelebA (Liu et al., 2015). For all datasets, the
only preprocessing we did was to scale the integer pixel values down to range [0,1]. The network
7
Published as a conference paper at ICLR 2017
Table 3: Inception score (with standard error) of 50 000 samples generated by models trained on
CIFAR-10. We use the models in Salimans et al. (2016) as baseline. ’SP’ corresponds to the best
model described by Salimans et al. (2016) trained in a semi-supervised fashion. ’-L’ corresponds
to the same model after removing the label in the training process (unsupervised way), ’-MBF’
corresponds to a supervised training without minibatch features.
Model
Inception score
Real data SP	-L	-MBF Infusion training
11.24 ± .12^^8.09 ± .07^^4.36 ± .06^^3.87 ± .03	4.62 ± .06^^
trained on MNIST and TFD is a MLP composed of two fully connected layers with 1200 units
using batch-normalization (Ioffe & Szegedy, 2015) 5. The network trained on CIFAR-10 is based
on the same generator as the GANs of Salimans et al. (2016), i.e. one fully connected layer followed
by three transposed convolutions. CelebA was trained with the previous network where we added
another transposed convolution. We use rectifier linear units (Glorot et al., 2011) on each layer
inside the networks. Each of those networks have two distinct final layers with a number of units
corresponding to the image size. They use sigmoid outputs, one that predict the mean and the second
that predict a variance scaled by a scalar β (In our case we chose β = 0.1) and we add an epsilon
= 1e - 4 to avoid an excessively small variance. For each experiment, we trained the network
on 15 steps of denoising with an increasing infusion rate of 1% (ω = 0.01, α(0) = 0), except on
CIFAR-10 where we use an increasing infusion rate of 2% (ω = 0.02, α(0) = 0) on 20 steps.
4.1	Numerical results
Since we can’t compute the exact log-likelihood, the evaluation of our model is not straightforward.
However we use the lower bound estimator derived in Section 2.4 to evaluate our model during train-
ing and prevent overfitting (see Figure 3). Since most previous published results on non-likelihood
based models (such as GANs) used a Parzen-window-based estimator (Breuleux et al., 2011), we use
it as our first comparison tool, even ifit can be misleading (Lucas Theis & Bethge, 2016). Results
are shown in Table 1, we use 10 000 generated samples and σ = 0.17 . To get a better estimate of
the log-likelihood, we then computed both the stochastic lower bound and the importance sampling
estimate (IS) given in Section 2.4. For the IS estimate in our MNIST-trained model, we used 20
000 intermediates samples. In Table 2 we compare our model with the recent Annealed Importance
Sampling results (Wu et al., 2016). Note that following their procedure we add an uniform noise
of 1/256 to the (scaled) test point before evaluation to avoid overevaluating models that might have
overfitted on the 8 bit quantization of pixel values. Another comparison tool that we used is the
Inception score as in Salimans et al. (2016) which was developed for natural images and is thus
most relevant for CIFAR-10. Since Salimans et al. (2016) used a GAN trained in a semi-supervised
way with some tricks, the comparison with our unsupervised trained model isn’t straightforward.
However, we can see in Table 3 that our model outperforms the traditional GAN trained without
labeled data.
4.2	Sample generation
Another common qualitative way to evaluate generative models is to look at the quality of the sam-
ples generated by the model. In Figure 4 we show various samples on each of the datasets we used.
In order to get sharper images, we use at sampling time more denoising steps than in the training
time (In the MNIST case we use 30 denoising steps for sampling with a model trained on 15 denois-
ing steps). To make sure that our network didn’t learn to copy the training set, we show in the last
column the nearest training-set neighbor to the samples in the next-to last column. We can see that
our training method allow to generate very sharp and accurate samples on various dataset.
5We don’t share batch norm parameters across the network, i.e for each time step we have different param-
eters and independent batch statistics.
8
Published as a conference paper at ICLR 2017
Figure 3: Training curves: lower bounds on aver-
age log-likelihood on MNIST as infusion training
progresses. We also show the lower bounds esti-
mated with the Parzen estimation method.
Model	Test
DBM (Bengio et al., 2013)	138 ± 2-
SCAE (Bengio et al., 2013)	121 ± 1.6
GSN (Bengio et al., 2014)	214 ± 1.1
Diffusion (Sohl-Dickstein	220 ± 1.9
et al., 2015)	
GANs (Goodfellow et al.)	225 ± 2
GMMN + AE (Li et al.)	282 ± 2
Infusion training (Our)	312 ± 1.7
Table 1: Parzen-window-based estimator of
lower bound on average test log-likelihood
on MNIST (in nats).
Table 2: Log-likelihood (in nats) estimated by AIS on MNIST test and training sets as reported in
Wu et al. (2016) and the log likelihood estimates of our model obtained by infusion training (last
three lines). Our initial model uses a Gaussian output with diagonal covariance, and we applied
both our lower bound and importance sampling (IS) log-likelihood estimates to it. Since Wu et al.
(2016) used only an isotropic output observation model, in order to be comparable to them, we also
evaluated our model after replacing the output by an isotropic Gaussian output (same fixed variance
for all pixels). Average and standard deviation over 10 repetitions of the evaluation are provided.
Note that AIS might provide a higher evaluation of likelihood than our current IS estimate, but this
is left for future work.
Model	Test log-likelihood (1000ex)	Train log-likelihood (100ex)
VAE-50 (AIS)	991.435 ± 6.477	1272.586 ± 6.759
GAN-50 (AIS)	627.297 ± 8.813	620.498 ± 31.012
GMMN-50 (AIS)	593.472 ± 8.591	571.803 ± 30.864
VAE-10 (AIS)	705.375 ± 7.411	780.196 ± 19.147
GAN-10 (AIS)	328.772 ± 5.538	318.948 ± 22.544
GMMN-10 (AIS)	346.679 ± 5.860	345.176 ± 19.893
Infusion training + isotropic (IS estimate)	413.297 ± 0.460	450.695 ± 1.617
Infusion training (IS estimate)	1836.27 ± 0.551	1837.560 ± 1.074
Infusion training (lower bound)	1350.598 ± 0.079	1230.305 ± 0.532
9
Published as a conference paper at ICLR 2017
(b) Toronto Face Dataset
O. O %∕z^ /ylq2l
M60O6/VIM2 —
夕 3 5 3 8 / q 76 2
。/。。，7a87∖
IJ Q/ Oo ʃ 5 ^ZnA 76 Qf
3,4 3×0∈>∕4 , q
6 OOL 6 7NJ5I∕
5 93rOOΓtcio 9 3
Cr⅜/夕32夕夕夕4
rO416217“3
(a) MNIST
(c) CIFAR-10
(d) CelebA
Figure 4: Mean predictions by our models on 4 different datasets. The rightmost column shows the
nearest training example to the samples in the next-to last column.
10
Published as a conference paper at ICLR 2017
Figure 5: Inpainting on CelebA dataset. In each row, from left to right: an image form the test
set; the same image with bottom half randomly sampled from our factorial prior. Then several end
samples from our sampling chain in which the top part is clamped. The generated samples show
that our model is able to generate a varied distribution of coherent face completions.
4.3	Inpainting
Another method to evaluate a generative model is inpainting. It consists of providing only a partial
image from the test set and letting the model generate the missing part. In one experiment, we
provide only the top half of CelebA test set images and clamp that top half throughout the sampling
chain. We restart sampling from our model several times, to see the variety in the distribution of the
bottom part it generates. Figure 5 shows that the model is able to generate a varied set of bottom
halves, all consistent with the same top half, displaying different type of smiles and expression. We
also see that the generated bottom halves transfer some information about the provided top half of
the images (such as pose and more or less coherent hair cut).
5 Conclusion and future work
We presented a new training procedure that allows a neural network to learn a transition operator
of a Markov chain. Compared to the previously proposed method of Sohl-Dickstein et al. (2015)
based on inverting a slow diffusion process, we showed empirically that infusion training requires
far fewer denoising steps, and appears to provide more accurate models. Currently, many success-
ful generative models, judged on sample quality, are based on GAN architectures. However these
require to use two different networks, a generator and a discriminator, whose balance is reputed del-
icate to adjust, which can be source of instability during training. Our method avoids this problem
by using only a single network and a simpler training objective.
Denoising-based infusion training optimizes a heuristic surrogate loss for which we cannot (yet)
provide theoretical guarantees, but we empirically verified that it results in increasing log-likelihood
estimates. On the other hand the lower-bound-based infusion training procedure does maximize an
explicit variational lower-bound on the log-likelihood. While we have run most of our experiments
with the former, we obtained similar results on the few problems we tried with lower-bound-based
infusion training.
Future work shall further investigate the relationship and quantify the compromises achieved with
respect to other Markov Chain methods including Sohl-Dickstein et al. (2015); Salimans et al. (2015)
11
Published as a conference paper at ICLR 2017
and also to powerful inference methods such as Rezende & Mohamed (2015). As future work, we
also plan to investigate the use of more sophisticated neural net generators, similar to DCGAN’s
(Radford et al., 2016) and to extend the approach to a conditional generator applicable to structured
output problems.
Acknowledgments
We would like to thank the developers of Theano (Theano Development Team, 2016) for making this
library available to build on, Compute Canada and Nvidia for their computation resources, NSERC
and Ubisoft for their financial support, and three ICLR anonymous reviewers for helping us improve
our paper.
References
Guillaume Alain, Yoshua Bengio, Li Yao, Jason Yosinski, Eric Thibodeau-Laufer, Saizheng Zhang,
and Pascal Vincent. GSNs: generative stochastic networks. Information and Inference, 2016. doi:
10.1093/imaiai/iaw003.
Yoshua Bengio, Gregoire MesniL Yann Dauphin, and Salah Rifai. Better mixing via deep represen-
tations. In Proceedings of the 30th International Conference on Machine Learning (ICML 2013),
2013.
Yoshua Bengio, Eric Laufer, Guillaume Alain, and Jason Yosinski. Deep generative stochastic
networks trainable by backprop. In Proceedings of the 31st International Conference on Machine
Learning (ICML 2014), pp. 226-234, 2014.
Olivier Breuleux, Yoshua Bengio, and Pascal Vincent. Quickly generating representative samples
from an rbm-derived process. Neural Computation, 23(8):2058-2073, 2011.
Laurent Dinh, David Krueger, and Yoshua Bengio. Nice: Non-linear independent components esti-
mation. arXiv preprint arXiv:1410.8516, 2014.
Xavier Glorot, Antoine Bordes, and Yoshua Bengio. Deep sparse rectifier neural networks. In
Aistats, volume 15, pp. 275, 2011.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,
Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Z. Ghahramani, M. Welling,
C. Cortes, N. D. Lawrence, and K. Q. Weinberger (eds.), Advances in Neural Information Pro-
cessing Systems 27, pp. 2672-2680. Curran Associates, Inc., 2014.
Anirudh Goyal, Nan Rosemary Ke, Alex Lamb, and Yoshua Bengio. The variational walkback
algorithm. Technical report, Universite de Montreal, 2017. URL https://openreview.
net/forum?id=rkpdnIqlx. On openreview.net.
Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by
reducing internal covariate shift. Proceedings of The 32nd International Conference on Machine
Learning, pp. 448-456, 2015.
Diederik P Kingma and Max Welling. Auto-encoding variational bayes. In Proceedings of the 2nd
International Conference on Learning Representations (ICLR 2014), 2014.
Alex. Krizhevsky and Geoffrey E Hinton. Learning multiple layers of features from tiny images.
Master’s thesis, Department of Computer Science, University of Toronto, 2009.
Hugo Larochelle and Iain Murray. The neural autoregressive distribution estimator. In AISTATS,
volume 1, pp. 2, 2011.
Yann LeCun and Corinna Cortes. The mnist database of handwritten digits, 1998.
Yujia Li, Kevin Swersky, and Richard Zemel. Generative moment matching networks. In Interna-
tional Conference on Machine Learning (ICML 2015), pp. 1718-1727, 2015.
12
Published as a conference paper at ICLR 2017
Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the wild.
In Proceedings of International Conference on Computer Vision (ICCV 2015), December 2015.
Aaron van den Oord Lucas Theis and Matthias Bethge. A note on the evaluation of generative
models. In Proceedings of the 4th International Conference on Learning Representations (ICLR
2016), 2016.
Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with deep
convolutional generative adversarial networks. International Conference on Learning Represen-
tations, 2016.
Danilo Rezende and Shakir Mohamed. Variational inference with normalizing flows. In Proceedings
ofthe 32nd International Conference on Machine Learning (ICML 2015), pp. 1530-1538, 2015.
Danilo Jimenez Rezende, Shakir Mohamed, and Daan Wierstra. Stochastic backpropagation and
approximate inference in deep generative models. In Proceedings of the 31th International Con-
ference on Machine Learning, ICML 2014, Beijing, China, 21-26 June 2014, pp. 1278-1286,
2014. URL http://jmlr.org/proceedings/papers/v32/rezende14.html.
Salah Rifai, Yoshua Bengio, Yann Dauphin, and Pascal Vincent. A generative process for sam-
pling contractive auto-encoders. In Proceedings of the 29th International Conference on Machine
Learning (ICML 2012), 2012.
Ruslan Salakhutdinov and Geoffrey E Hinton. Deep boltzmann machines. In AISTATS, volume 1,
pp. 3, 2009.
Tim Salimans, Diederik Kingma, and Max Welling. Markov chain monte carlo and variational
inference: Bridging the gap. In Proceedings of The 32nd International Conference on Machine
Learning, pp. 1218-1226, 2015.
Tim Salimans, Ian J. Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. CoRR, abs/1606.03498, 2016.
Jascha Sohl-Dickstein, Eric A. Weiss, Niru Maheswaranathan, and Surya Ganguli. Deep Unsuper-
vised Learning using Nonequilibrium Thermodynamics. In Proceedings ofthe 32nd International
Conference on Machine Learning, volume 37 of JMLR Proceedings, pp. 2256-2265. JMLR.org,
2015.
Josh M Susskind, Adam K Anderson, and Geoffrey E Hinton. The toronto face database. Depart-
ment of Computer Science, University of Toronto, Toronto, ON, Canada, Tech. Rep, 3, 2010.
Theano Development Team. Theano: A Python framework for fast computation of mathematical
expressions. arXiv e-prints, abs/1605.02688, may 2016.
Aaron van den Oord, Nal Kalchbrenner, and Koray KavUkcUoglu. Pixel recurrent neural networks.
In Proceedings of the 33nd International Conference on Machine Learning (ICML 2016), pp.
1747-1756, 2016.
Pascal Vincent, Hugo Larochelle, Isabelle Lajoie, Yoshua Bengio, and Pierre-Antoine Manzagol.
Stacked denoising autoencoders: Learning useful representations in a deep network with a local
denoising criterion. Journal of Machine Learning Research, 11(Dec):3371-3408, 2010.
Yuhuai Wu, Yuri Burda, Ruslan Salakhutdinov, and Roger B. Grosse. On the quantitative analysis
of decoder-based generative models. CoRR, abs/1611.04273, 2016.
13
Published as a conference paper at ICLR 2017
A Details on the experiments
A.1 MNIST experiments
We show the impact of the infusion rate α(t) = α(t-1) + ω for different numbers of training steps
on the lower bound estimate of log-likelihood on the Validation set of MNIST in Figure 6. We also
show the quality of generated samples and the lower bound evaluated on the test set in Table 4. Each
experiment in Table 4 uses the corresponding models of Figure 6 that obtained the best lower bound
value on the validation set. We use the same network architecture as described in Section 4, i.e two
fully connected layers with Relu activations composed of 1200 units followed by two distinct fully
connected layers composed of 784 units, one that predicts the means, the other one that predicts
the variances. Each mean and variance is associated with one pixel. All of the the parameters of
the model are shared across different steps except for the batch norm parameters. During training,
we use the batch statistics of the current mini-batch in order to evaluate our model on the train and
validation sets. At test time (Table 4), we first compute the batch statistics over the entire train set
for each step and then use the computed statistics to evaluate our model on the test test.
We did some experiments to evaluate the impact of α or ω in α(t) = α(t-1) + ω. Figure 6 shows
that as the number of steps increases, the optimal value for infusion rate decreases. Therefore, if we
want to use many steps, we should have a small infusion rate. These conclusions are valid for both
increasing and constant infusion rate. For example, the optimal α for a constant infusion rate, in
Figure 6e with 10 steps is 0.08 and in Figure 6f with 15 steps is 0.06. If the number of steps is not
enough or the infusion rate is too small, the network will not be able to learn the target distribution
as shown in the first rows of all subsection in Table 4.
In order to show the impact of having a constant versus an increasing infusion rate, we show in Fig-
ure 7 the samples created by infused and sampling chains. We observe that having a small infusion
rate over many steps ensures a slow blending of the model distribution into the target distribution.
In Table 4, we can see high lower bound values on the test set with few steps even if the model
can’t generate samples that are qualitatively satisfying. These results indicate that we can’t rely on
the lower bound as the only evaluation metric and this metric alone does not necessarily indicate
the suitability of our model to generated good samples. However, it is still a useful tool to prevent
overfitting (the networks in Figure 6e and 6f overfit when the infusion rate becomes too high).
Concerning the samples quality, we observe that having a small infusion rate over an adequate
number of steps leads to better samples.
A.2 Infusion and model sampling chains on natural images datasets
In order to show the behavior of our model trained by Infusion on more complex datasets, we
show in Figure 8 chains on CIFAR-10 dataset and in Figure 9 chains on CelebA dataset. In each
Figure, the first sub-figure shows the chains infused by some test examples and the second sub-
figure shows the model sampling chains. In the experiment on CIFAR-10, we use an increasing
schedule α(t) = α(t-1) + 0.02 with α(0) = 0 and 20 infusion steps (this corresponds to the training
parameters). In the experiment on CelebA, we use an increasing schedule α(t) = α(t-1) + 0.01 with
α(0) = 0 and 15 infusion steps.
14
Published as a conference paper at ICLR 2017
(b) Networks trained with 5 infusion steps. Each
infusion rate corresponds to ω. We set α(0) = 0.
(a) Networks trained with 1 infusion step. Each in-
fusion rate in the figure corresponds to α(0) . Since
we have only one step, we have ω = 0.
(c) Networks trained with 10 infusion steps. Each
infusion rate corresponds to ω. We set α(0) = 0.
(e)	Networks trained with 10 infusion steps. In this
experiment we use the same infusion rate for each
time step such that ∀t α(t) = α(0) . Each infusion
rate in the figure corresponds to different values for
α(0).
(f)	Networks trained with 15 infusion steps. In this
experiment we use the same infusion rate for each
time step such that ∀tα(t) = α(0) . Each infu-
sion rate in the figure corresponds to different values
α(0).
Figure 6: Training curves on MNIST showing the log likelihood lower bound (nats) for different
infusion rate schedules and different number of steps. We use an increasing schedule α(t) = α(t-1) +
ω . In each sub-figure for a fixed number of steps, we show the lower bound for different infusion
rates.
15
Published as a conference paper at ICLR 2017
Table 4: Infusion rate impact on the lower bound log-likelihood (test set) and the samples generated
by a network trained with different number of steps. Each sub-table corresponds to a fixed number
of steps. Each row corresponds to a different infusion rate, where we show its lower bound and also
its corresponding generated samples from the trained model. Note that for images, we show the
mean of the Gaussian distributions instead of the true samples. As the number of steps increases, the
optimal infusion rate decreases. Higher number of steps contributes to better qualitative samples, as
the best samples can be seen with 15 steps using α = 0.01.
(a)	infusion rate impact on the lower bound log-likelihood (test set) and the samples generated by a network
trained with 1 step.
infusion rate	Lower bound (test)
0.0	824.34
0.05	885.35
0∏	967.25
0.15	1063.27
0.2	1115.15
0.25	1158.81
0.3	1209.39
0.4	1209.16
0.5	1132.05
0.6	1008.60
0.7	854.40
0.9	—	-161.37
Means of the model
∙f9gβJk9J7**6
∙,eg∙3gJ533a
3
3
i
ʃ
E
G
β
09≡f
∙∙r∙0 6E∕1qσs 击
∙g9gp72593*a
∙∙∙976√φ,2ar
(b)	infusion rate impact on the lower bound log-likelihood (test set) and the samples generated by a network
trained with 5 steps
infusion rate	Lower bound (test)
0.0	823.81
0.01	9T0ΓT9
0.03	1142.43
0.05	1303.19
0.08	1406.38
0.1	1448.66
0.15	1397.41
0.2	—	1262.57
JgCr 号 3,宙 Z
gg 3节I,s<s

(c)	infusion rate impact on the lower bound log-likelihood (test set) and the samples generated by a network
trained with 10 steps
infusion rate	Lower bound (test)	
0.0	82442	
0.01	1254.07	
0.02	1389.12	
0.03	1366.68	
0.04	1223.47	
0.05	1057.43	
0.05	846.73	
0.07	—	658.66	
915x^35 77
∙5qfγ7,J5
・ 6 73,E 2/
7
5
q
q
δ



(d)	infusion rate impact on the lower bound log-likelihood (test set) and the samples generated by a network
trained with 15 steps
• 3 8 GXMI
・q 0*。夕7彳
• /93Z”才
∙¾9 G- O q 5
• X & 夕b 4 d
• 7≠ 3。9 "
・，/ O 8 N 7-
・ CQ13<r½
• 〃 4 5/A 6
•175797
・ 9 夕1V4，
3 754 / Γ 4*
3 9S 7√/
•夕夕76 Ni
・ 7x-9<?。。—
•74 7S-，S
• 7 I Q / l<r
・ J 3 4√7⅛
・¥5-*/ I / /—
・3 U "?与，
infusion rate	Lower bound (test)
0.0	824.50
0.01	1351.03
0.02	1066.60
0.03	60930
0.04	876.93
0.05	-479.69
0.06	—	-941.78
16
Published as a conference paper at ICLR 2017
(a) Chains infused with MNIST test set samples
by a constant rate (α(0) = 0.05, ω = 0) in 15
steps.
(b) Model sampling chains on MNIST using a net-
work trained with a constant infusion rate (α(0) =
0.05, ω = 0) in 15 steps.
(c) Chains infused with MNIST test set samples
by an increasing rate (α(0) = 0.0, ω = 0.01) in
15 steps.
(d) Model sampling chains on MNIST using a
network trained with an increasing infusion rate
(α(0) = 0.0, ω = 0.01) in 15 steps.
Figure 7: Comparing samples of constant infusion rate versus an increasing infusion rate on infused
and generated chains. The models are trained on MNIST in 15 steps. Note that having an increasing
infusion rate with a small value for ω allows a slow convergence to the target distribution. In contrast
having a constant infusion rate leads to a fast convergence to a specific point. Increasing infusion
rate leads to more visually appealing samples. We observe that having an increasing infusion rate
over many steps ensures a slow blending of the model distribution into the target distribution.
17
Published as a conference paper at ICLR 2017
(a) Infusion chains on CIFAR-10. Last column corresponds to the target used to infuse the chain.
(b) Model sampling chains on CIFAR-10
Figure 8: Infusion chains (Sub-Figure 8a) and model sampling chains (Sub-Figure 8b) on CIFAR-
10.
18
Published as a conference paper at ICLR 2017
(a) Infusion chains on CelebA. Last column corresponds to the target used to infuse the chain.
(b) Model sampling chains on CelebA
Figure 9: Infusion chains (Sub-Figure 9a) and model sampling chains (Sub-Figure 9b) on CelebA.
19