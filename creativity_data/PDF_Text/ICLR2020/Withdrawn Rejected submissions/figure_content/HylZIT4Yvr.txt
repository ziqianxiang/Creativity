Figure 1:	AnyC2C examples from the Java (left) and C# (right) test sets. The highlighted expressionin each example is the target p, which we wish to generate from the rest of the snippet.
Figure 2:	The expression ∣ x > 11 is generated given its surrounding code context. At each step, themodel generates the next node (denoted by a question mark: (?) of path、, Path2 and Path3 usingthe root path R. Dashed lines denote AST parent-child relations; solid lines denote AST paths.
Figure 3: Aug-menting the ASTwith EOSnode andEOStok nodesNode Trees vs. Production Trees While we predict a single node at each step, previous work(Iyer et al., 2018; Brockschmidt et al., 2019a) predicts a grammar production rule. This moredirect grammatical representation decomposes the code in a way that often forces the model topredict with partial information. For instance, consider the expression str.Substring(3). The3Under review as a conference paper at ICLR 2020model of Brockschmidt et al. (2019a) would first predict the rule Expr→Expr.Substring(Expr),and only then expand Expr→str and Expr→3; i.e., the model needs to predict the method name(Substring) before the invoking object (str). Further, the Substring method can get either oneor two arguments, forcing the model to choose whether to use the one- or two-argument productionrule in advance. Node generation, however, allows us to predict the presence of a function call andonly then to predict its object, method name, and arguments, rather than predicting these a priori.
Figure 4:	A Java AnyC2C example from our test set along with the predictions of our model. Thepredictions of the baselines are shown in Figure 8 in Appendix D.
Figure 5:	A Java AnyC2C example from our test set along with the predictions of our model. Thepredictions of the baselines are shown in Figure 7 in Appendix D.
Figure 6: EffiCient ComPutation: Partial Paths for different time stePs share the same Prefix, allowinga shared ComPutation. In this examPle, the Prefix is the shared Path from the leaf (not shown) toGreater, and is muCh longer than either of the suffixes.
Figure 7: Java examples from our test set along with the predictions of our model and the baselines.
Figure 8: Java examples from our test set along with the predictions of our model and the baselines.
Figure 9: Java examples from our test set along with the predictions of our model and the baselines.
Figure 10: Java examples from our test set along 1w9ith the predictions of our model and the baselines.
Figure 11: Java examples from our test set along with the predictions of our model and the baselines.
Figure 12:	Java examples from our test set along with the predictions of our model and the baselines.
Figure 13:	Java examples from our test set along with the predictions of our model and the baselines.
Figure 14:	Java examples from our test set along with the predictions of our model and the baselines.
Figure 15:	C# examples from our test set of the RestrictC2C task along with the predictions of ourmodel and the baselines.
Figure 16:	C# examples from our test set of the RestrictC2C task along with the predictions of ourmodel and the baselines.
Figure 17:	C# examples from our test set of the RestrictC2C task along with the predictions of ourmodel and the baselines.
Figure 18:	C# examples from our test set of the RestrictC2C task along with the predictions of ourmodel and the baselines.
Figure 19:	C# examples from our test set of the RestrictC2C task along with the predictions of ourmodel and the baselines.
Figure 20:	C# examples from our test set of the RestrictC2C task along with the predictions of ourmodel and the baselines.
Figure 21:	C# examples from our test set of the RestrictC2C task along with the predictions of ourmodel and the baselines.
Figure 22:	C# examples from our test set of the RestrictC2C task along with the predictions of ourmodel and the baselines.
