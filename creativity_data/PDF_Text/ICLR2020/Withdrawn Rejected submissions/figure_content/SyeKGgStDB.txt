Figure 1: Training the Natural Media Painting Agent (left): We use a actor-critic-based reinforce-ment learning framework to train the painting agent. For each step, the current states of the canvasand the reference image form the observation for the policy network. Based on the observation,the painting agent predicts an action for the neural renderer Rn to execute and updates the canvasaccordingly. Roll-out of the Natural Media Painting Agent (right): We extract the actor neural net-work as the painting agent for the roll-out process. We replace the neural renderer Rn with the realrenderer Rr to get the precise synthetic results.
Figure 2: Environment Model We model the painting environment MyPaint(IibmyPaint contributors(2018)) with different paintbrush configurations. The top row is rendered by the real renderer Rrand the bottom row is rendered by the neural renderer Rn .
Figure 3: Framework for Training (Roll-out) the Constrained Agent We train the constrained agentby cascading an unconstrained agent. First, We identify a subspace of the action space and extractthe constraint C from the action a. Then We upsample the constraint C and pass it on as an observationof the constrained agent. We use Rn as renderer. For roll-out process (dashed line), We extract theconstraint from either the user defined constraint or the action of the previous step. We use realrenderer Rr to get the best visual quality.
Figure 4: l2 Loss over the Course of Training. We compute the l2 distance between the roll-outresults and the reference images on a validation dataset. (Left) is the course of training the neuralrenderer Rr using various paintbrush. (Middle) is the course of training the unconstrained agents us-ing varisous dataset. (Right) is the course of training the constrained agents using various constraintsconfigurations.
Figure 5: We trained our natural media painting agents using MNIST, KanjiVG, CelebA, and Ima-geNet as reference images (left). We generate results (right) using Rr for the training and validatingpFroorctehses.roll-out process, we employ a coarse-to-fine strategy to increase the resolution of the resultshown as Figure 6. First, We roll out the agent with a low-resolution reference image s* and get thereproduction s*. Then we divide s* and s* into patches and feed the agent as initial observation.
Figure 6: Coarse-to-fine Roll-out We roll out the trained agent using a Coarse-to-fine strategy. Wefirst roll out the model treating the reference image and canvas as one patch. Then we divide thereferenCe image and updated Canvas into patChes and feed to the agent. In this figure, we roll out100 strokes in eaCh patCh.
Figure 7: Exemplary Result Results generated by the painting agent using different paintbrushes. Wedemonstrate our natural media painting agent by rolling out agents trained with various paintbrushesfrom MyPaint.
Figure 8: Roll-out Using Constrained Painting Agents We constrain the stroke width and the colorof the agent to get the stylized results.
Figure 9: Roll-out results using Various PaintbrushesWe roll out our natural media painting agentstrained with various brushes in MyPaint. To increase the resolutions of the generated images, weincorporate the coarse-to-fine strategy. We use 8 × 8 patches for first row and 4 × 4 for second row.
Figure 10: Reproduction of Starry Night using Charcoal We roll out our natural media paintingagent trained with charcoal brush in MyPaint to reproduce Van Gogh’s starry night.We incorporatethe coarse-to-fine strategy by dividing the reference image and canvas into 16 × 16 patches.
Figure 11: Reproduction of Starry Night using Watercolor We roll out our natural media paintingagent trained with watercolor brush in MyPaint to reproduce Van Gogh’s starry night.We incorporatethe coarse-to-fine strategy by dividing the reference image and canvas into 16 × 16 patches.
