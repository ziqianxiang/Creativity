Under review as a conference paper at ICLR 2020
Unsupervised Out-of-Distribution Detection
with Batch Normalization
Anonymous authors
Paper under double-blind review
Ab stract
Likelihood from a generative model is a natural statistic for detecting out-of-
distribution (OoD) samples. However, generative models have been shown to
assign higher likelihood to OoD samples compared to ones from the training
distribution, preventing simple threshold-based detection rules. We demonstrate
that OoD detection fails even when using more sophisticated statistics based on
the likelihoods of individual samples. To address these issues, we propose a new
method that leverages batch normalization. We argue that batch normalization for
generative models challenges the traditional i.i.d. data assumption and changes the
corresponding maximum likelihood objective. Based on this insight, we propose to
exploit in-batch dependencies for OoD detection. Empirical results suggest that
this leads to more robust detection for high-dimensional images.
1	Introduction
Modern neural network models are known to make poorly calibrated predictions (Guo et al.,
2017; Kuleshov et al., 2018), and can be highly confident even for unrecognizable or irrelevant
inputs (Nguyen et al., 2015; Moosavi-Dezfooli et al., 2017). This has serious implications for AI
safety (Amodei & Clark, 2016) in real world deployments, where a model could receive inputs
that are beyond its training distribution. Detecting examples that are out of the training distribution
becomes a viable solution: when encountering such samples, the model could choose to provide low
confidence estimates or even abstain from making predictions (Cortes et al., 2017).
Density estimation is one approach to detecting out-of-distribution (OoD) samples. A likelihood-
based model is trained on the input samples; during evaluation, samples that have low likelihoods are
assumed to be out-of-distribution. For high-dimensional inputs (such as images), deep generative
models have been able to generate realistic samples as well as achieving good compression capabilities,
which indicates high likelihoods on the training distribution (Bane et al., 2016; Kingma & Welling,
2013; Kingma & Dhariwal, 2018; van den Oord et al., 2016); thus, recent works have considered
using deep generative models to detect out-of-distribution samples (Li et al., 2018). However, contrary
to popular belief, density estimates by deep generative models are highly inaccurate (Nalisnick et al.,
2018). For example, a Glow (Kingma & Dhariwal, 2018) model trained on CIFAR10 gives higher
likelihood estimates to SVHN samples than CIFAR10 ones, which makes accurate OoD detection
impossible. While alternative statistics based on likelihood estimates have been proposed to alleviate
this issue (Choi et al., 2018; Song et al., 2017), they are not able to detect OoD samples consistently.
In this paper, we propose a new statistic to detect OoD samples using deep generative models trained
with batch normalization (Ioffe & Szegedy, 2015). We argue that using batch normalization not
only improves optimization (as argued in (Kohler et al., 2018; Santurkar et al., 2018)), but also
challenges the i.i.d. assumption underlying typical likelihood-based objectives. We show in that the
training objective of generative models with batch normalization can be interpreted as maximum
pseudo-likelihood over a different joint distribution that does not assume data in the same batch are
i.i.d. samples. Empirically, we demonstrate that over this joint distribution, the estimated likelihood of
a batch of OoD samples is much lower than that of in-distribution samples. This allows us to propose
a permutation test which outperforms existing methods by a significant margin without modifying
how the underlying generative model is trained. In particular, we achieve near-perfect performance
even on cases such as Fashion MNIST vs. KMNIST, where the likelihood distributions for single
samples are nearly identical (see Figure 1, left). While generative models trained with BatchNorm
1
Under review as a conference paper at ICLR 2020
-4-20	2	4
Figure 1: (Left) Density estimation with a RealNVP model trained on Fashion MNIST. The model
assigns similar / higher likelihoods to several OoD datasets. (Right) Model mis-specification can
result in OoD samples having higher log-likelihoods.
might not provide state-of-the-art likelihood numbers on the test set, it remains competitive and could
be more suited for the OoD detection problem (Kingma & Dhariwal, 2018; Nalisnick et al., 2018).
2	Background
Setup Let X = {xi}iN=1 be a set of N observations; we assume that “in-distribution” samples
are drawn i.i.d. from some underlying distribution X 〜p(x). Our goal is to detect whether a test
sample x is “out-of-distribution”; we consider drawing the test samples from an unknown distribution
q(x), but we do not have access to samples from q(x) during training. Following definitions in
(Hendrycks & Gimpel, 2016; Liang et al., 2017), we define OoD examples as the test samples that
have low densities under p(x). We note that samples from q(x) are not necessarily all OoD; for
example, if q = p then most samples should not be classified as OoD. Detection of OoD samples is
useful for applications such as anomaly detection (Li et al., 2018) and exploration in reinforcement
learning (Ostrovski et al., 2017).
Likelihood-based generative models for out-of-distribution detection Likelihood-based models
are trained by finding parameters θ such that the corresponding pθ (x) is as close as possible to the
training distribution p(x), in terms of Kullback-Leibler divergence (KL):
argminDKL(p(x)kpθ(x)) = arg min Ep(x) [log p(x) - logpθ(x)]
θθ
Finding appropriate solutions depends heavily on choosing the right family of (parametrized) probabil-
ity distributions. In the context of images, deep neural networks have demonstrated good performance.
Likelihood-based deep generative models include variational autoencoders (Kingma & Welling, 2013)
(where variational lower bounds are optimized), autoregressive models (van den Oord et al., 2016;
Salimans et al., 2017), and invertible flow models (Dinh et al., 2016; Kingma & Dhariwal, 2018)
(where exact likelihood is optimized).
Given a sample x, we could attempt to test whether it is OoD or not by evaluating its likelihood
- log pθ (x). Intuitively, if pθ (x) is sufficiently similar to p(x), OoD samples should have low
likelihood underpθ(x). However, this is not the case for some deep generative models (Nalisnick
et al., 2018; Choi et al., 2018), where OoD samples are observed to have higher likelihoods than
samples from the training distribution p(x) across several datasets and models. For example, state-
of-the-art models trained on CIFAR10 (Krizhevsky & Hinton, 2009) assign higher likelihood to
SVHN (Netzer et al., 2011) samples than CIFAR10 samples. A similar phenomenon has also
been observed by Nalisnick et al. (2018) for models trained on Fashion MNIST (Xiao et al., 2017)
(Figure 1 (left)), where images with lower variance across pixels (such as MNIST) are assigned
higher likelihoods. This invalidates the assumption that OoD samples are assigned lower likelihoods
by existing deep generative models.
To alleviate this issue, Choi et al. (2018) use Watanabe Akaike Information Criterion (WAIC):
-WAIC(x) = -Eθ [logpθ (x)] + Varθ[logpθ(x)]	(1)
where the expectations are computed using independently trained model ensembles. This method does
not assign higher negative WAIC values for OoD samples in some simple cases, but is empirically
observed it to be effective for certain datasets and generative models.
2
Under review as a conference paper at ICLR 2020
Likelihood-based permutation tests In the context of detecting adversarial examples, Song et al.
(2017) considered using permutation tests statistics to determine whether an input x0 comes from p(x)
or not. One such test statistic uses the rank of pθ(x0) in {pθ(xι), ∙ ∙ ∙ ,pθ(XN)}, where {xi}N=ι is a
(training) dataset of N samples from p(x):
Tpe
rm =T(x0;x1,...,xN)
NN
EI[Pθ(Xi) ≤ Pθ(X )] - -2
i=1	2
∈ [0, N/2 + 1]
(2)
where Iis the indicator function. When Tperm(X) is large, X is assumed to be OoD. This addresses the
case where higher likelihood is observed for certain out-of-distribution samples (such as the SVHN
vs. CIFAR10 example in Nalisnick et al. (2018)), as both “high-likelihood” and “low-likelihood”
samples will have Tperm close to N/2 (because of the absolute value) and be identified as OoD.
3	Out-of-distribution samples and model mis-specification
Nalisnick et al. (2018) find it surprising that deep generative models assign higher likelihood to
out-of-distribution samples, given their successful generalizing on a test dataset. However, we argue
that this is to be expected when the unerlying generative model pθ(X) is mis-specified, and perhaps
this is more likely than previously anticipated in the literature.
We consider a simple example where a mis-specified model would overestimate the likelihood of
out-of-distribution samples (Figure 1, right). Let p(X) be a uniform mixture of two Gaussians on R1,
N(-1.0,0.01) and N(1.0,0.01), andpθ(x) = N(μ, σ2) be our model with parameters (μ, σ). The
maximum likelihood solution is (μ?, σ?) ≈ (0.0,1.0), where mode-covering behavior occurs. X = 0
has the largest likelihood underpθ(X), yet it is highly atypical in the original distribution. This is
also a failure mode for WAIC as discussed in (Choi et al., 2018).
Given the complexity of high-dimensional image distributions, existing likelihood-based generative
models are likely to be mis-specified, which invalidates the use of likelihood estimates to perform
OoD detection (White, 1982). Moreover, model selection is often based on the holdout method (Arlot
et al., 2010), in which we evaluate log-likelihood over a validation set sampled from p(X), but not
over out-of-distribution samples. As we do not know the entropy of p(X), we can never check whether
DKL(p(X)kpθ(X)) ≈ 0 after training. Because of the mode-seeking nature of DKL, an alternative
distribution q(X) 6= p(X) can have even lower KL-divergence withpθ(X), i.e., DKL(q(X)kpθ(X))
DKL(p(X)kpθ(X)) even ifpθ(X) is trained on samples from p(X). In Appendix B, we demonstrate
that even more sophisticated tests over log-likelihood, such as likelihood-based permutation tests,
cannot detect out-of-distribution samples effectively.
4	Detecting out-of-distribution samples with batch
NORMALIZATION
In the following sections, we argue that by taking advantage of batch normalization (BatchNorm), out-
of-distribution samples can be detected with existing deep generative models. For a batch of inputs
z = {zi}ib=1 of batch size b, batch normalization (Ioffe & Szegedy, 2015) performs normalization
over the inputs followed by a parametrized affine transformation:
z -E[z]
BatChNorm(z; γ, β, e) =	「	∙ Y + β
Var[z] +
where γ, β are trainable parameters, and is a hyperparameter for numerical stability. The mean E[z]
and variance Var[z] are computed over a single batch in training mode, and over the entire training
set in evaluation mode1. For deep generative models using batch normalization, existing literature
evaluate the log-likelihood on some validation set in evaluation mode. The role of training mode is
generally perceived to accelerate optimization (Kohler et al., 2018; Santurkar et al., 2018), similar to
supervised learning.
1This is typically done by keeping an exponential moving average over the batch statistics during training.
3
Under review as a conference paper at ICLR 2020
Table 1: Log-likelihood (measured in bits per dimension) calculated with RealNVP, VAE, Pixel-
CNN++ models on MNIST, Fashion MNIST, CIFAR10, and SVHN test sets. We train RealNVP
and VAE on FashionMNIST, and train RealNVP and PixelCNN on CIFAR10. We report likelihood
results with training mode, evaluation mode, and their difference (∆).
(a) RealNVP (trained on Fashion MNIST)					(b) RealNVP (trained on CIFAR10)			
Evaluated on	I BNMode	BPD		△	Evaluated on	BN Mode	BPD	△
Fashion MNIST	evaluation training	2.92 2.94		0.02	CIFAR10	evaluation training	3.48 3.51	0.03
MNIST	evaluation	1.74		7.73	SVHN	evaluation	2.44	8.56
	training	9.47				training	11.10	
(c) VAE (trained on Fashion MNIST)					(d) PixelCNN++ (trained on CIFAR10)			
Evaluated on ∣	BN Mode	BPD	△		Evaluated on	BN Mode	BPD	△
Fashion MNIST	evaluation training	3.19 3.20	0.01		CIFAR10	evaluation training	3.21 3.33	0.12
MNIST	evaluation	1.97		6.53	SVHN	evaluation	2.16	1.88
	training	8.50				training	4.04	
4.1	Training mode decreases likelihood of OoD batches
Our central observation is that likelihoods assigned by the model under training mode and evaluation
mode are significantly different for OoD samples, but much less so for in-distribution samples,
i.e., when we use BatchNorm statistics computed over a single batch. We evaluate log-likelihood
(measured in bits per dimension, BPD2) on Fashion MNIST, MNIST, CIFAR and SVHN test sets with
several models including RealNVP, VAE and PixelCNN++3. Pre-activation batch normalization layers
are used within the residual block for RealNVP and PixelCNN++, and before each convolutional
layer for VAE. The datasets are evaluated in both evaluation mode and training mode.
In Table 1 we found that in evaluation mode MNIST samples have smaller BPD than Fashion MNIST
for models trained on Fashion MNIST; SVHN samples have smaller BPD than CIFAR10 for models
trained on CIFAR10, which agrees with the observations in (Nalisnick et al., 2018). However, as we
change from evaluation mode to training mode, the log-likelihood of the in-distribution samples does
not change significantly, while that of OoD samples plummets (see ∆ in Table 1). In Appendix C.3,
we demonstrate that this sudden decrease in log-likelihood not only happens for samples from other
datasets, but also adversarial samples that are able to fool likelihood models and likelihood-based
permutation tests. This empirically suggests that simply by using training mode during evaluation, we
are able to consistently detect a batch of out-of-distribution samples. We further note that no special
modifications is made over the training procedure, and no additional OoD datasets are required.
Figure 2: Example demonstrating how BatchNorm miti-
gates high-likelihood in OoD distributions. p(x), pf (x)
and q(x) denote the original, model and OoD distribu-
tions. Distribution of z2 are different for q(x) under the
two modes of BatchNorm, leading to different likeli-
hood results.
2BPD is defined by the negative log-likelihood divided by the number of dimensions (Theis et al., 2015); if
the likelihood is measured in nats, then an additional division by ln 2 is needed.
3We use an implementation where we replace weight normalization with batch normalization for PixelCNN++,
see https://github.com/pclucas14/pixel-cnn-pp.
4
Under review as a conference paper at ICLR 2020
4.2 Explaining the effectivenes s of batch normalization
Why is batch normalization effective at detecting OoD batches while other likelihood-based generative
models (e.g., Glow trained with ActNorm) fail? First we provide an example to illustrate why training
mode and evaluation mode provide different likelihood estimates for OoD distributions. Then we
argue that with training mode, the learned generative model no longer assumes samples are i.i.d.,
which differs from models without BatchNorm.
4.2.1	Example of BatchNorm Mitigating Model Mis-specification
In Figure 2, we illustrate a case where BatchNorm could be useful for OoD detection. Suppose
We try to learn some distribution P(X) with a 2-d flow model with one coupling layer (Dinh et al.,
2016): f : (x1,x2) → (z1,z2) where zι = xι, z2 = x2 + (xι 一 E(xι))/^V(xι) ∙ Y + β with
learnable parameters γ, β; E(x1), V(x1) are the empirical mean and variance of a batch of x1 in
training mode, and the mean and variance of p(x1) in evaluation mode. To simplify our analysis,
We assume that the training distribution p(x1, x2) = p(x1)p(x2) where p(x1) is a mixture of two
Gaussians (N(-1, σ2) and N(1, σ2) with σ → 0) and p(x2) = δo(x2) (Dirac delta) and batch sizes
are infinite; hence z2 ≈ (xi - E(χι))∕vzV (xι) ∙ Y + β. Since the Jacobian of f is triangular and has
a determinant of 1, the likelihood of the flow model is simplypf(x1, x2) = p(f (x1, x2)); we assume
the prior p(z1 , z2) is standard Gaussian N(0, I). The optimal parameters are then Y ≈ 14 and β = 0.
Now let us consider q(x1, x2) = q(x1)p(x2) where q(x1) = Uniform(-0.5, 0.5). In evaluation
mode, z2 ≈ xi and Eq[logPf (x)] ≈ -1.92; in training mode, z2 ≈ √12xι, which decreases the
log-likelihood to Eq [logpf (x)] ≈ -2.38. We include a more detailed analysis in Appendix D. In
this case, BatchNorm manages to learn a global property of the input distribution (variance), and use
this to counteract major distributional shifts (e.g. the proposed uniform distribution q(x)). The effect
leads to lower log-likelihoods in training mode compared to that in evaluation mode.
4.2.2	Revisiting the i.i.d. Assumptions for Batch-normalized Generative Models
While it is difficult to analytically characterize the change of likelihood estimates in training mode
for high-dimensional images and deep neural networks, we provide a probabilistic interpretation as
to why training mode exhibits different behaviors than evaluation mode.
Training mode breaks the i.i.d. data assumption In training mode, the output for a particular
sample xj is affected by other samples in the same batch (denoted as x-j), so they are not treated as
i.i.d for the generative models in training mode. This suggest that using BatchNorm when training
generative models not only changes the optimization landscape but also modifies the objective: it is
no longer 焉 PN=IlogPθ(Xi) where each sample is assumed to be i.i.d.
Pseudo-likelihood perspective of training mode How should we interpret the training objective
with batch normalization? For each sample Xj , its corresponding “likelihood” objective depends
on the other samples from the same batch; we denote this as 'θ (Xj; x-j). First, we show that the
integral of exp('θ(Xj; x-j)) over any particular sample (Xj) when we fix the other samples in the
batch (X-j) is one; this allows us to treat exp(') as a probability density function5.
Proposition 1. Let b ∈ N, b > 1 be the batch size, and for all possible batch of samples of size
(b — 1), denoted as X-j, if 'θ(Xj; X-j) is the training objective over Xj for a likelihood-based
generative model with batch normalization, then:
I exp('θ(Xj; X-j))dXj = 1.
xj
where we consider likelihood-based generative models that sample either via some parametrized
distribution (such as VAE and PixelCNN) or via parametrized invertible transformations constructed
via affine coupling layers (such as RealNVP).
4By maximum likelihood, γ ≈ arg mins -s2/2 + log s = 1.
5For VAE, we assume that the inference distribution is always optimal, i.e., there is no gap between the
evidence lower bound and the log-likelihood, so we can treat the objective as exact maximum likelihood.
5
Under review as a conference paper at ICLR 2020
We defer the proofs in Appendix A.1. Moreover, if We interpret 'θ (xj; x-j) as the conditional log-
likelihood under a certain joint generative model pθ over an entire batch, our existing “log-likelihood”
objective is a surrogate to the log-likelihood objective over the joint distribution p⅛ (xι, x2,..., xb).
Proposition 2. There exists a joint distribution pθ (xι, x2,..., Xb) such thatforall j, pθ (xj∣x-j) →
`θ (xj ; x-j ) as b → ∞. Then, the objective for one batch {xj}jb=1 in training mode
bb
L train ({xj }j=1; θ) = X 'θ (Xj |x-j ) , X log pθ (Xj |X-j )	⑶
j=1	j=1
is the pseudo-log-likelihood for the joint distribution pθ (xι, X2,..., Xb) as b → ∞.
Training mode versus evaluation mode In evaluation mode, the samples are treated as i.i.d., since
the batch statistics is fixed and samples Within the same batch do not affect each other. The objective
for one batch {xj}jb=1 evaluated in evaluation mode is simply:
b
Leval({xj}jb=1; θ) = Xlogpθ(Xj)	(4)
j=1
It is evident that Ltrain and Leval are not the same objective due to the differences in i.i.d. assumptions
for samples Within the same batch. Ltrain depends on the input batch statistics, Whereas Leval does not.
If We consider OoD batches that exhibit major distributional shifts, then it is likely that Ltrain differs
from Leval. From the empirical evidence in Table 1, OoD samples have much loWer BPD on training
mode than on evaluation mode, Whereas the same does not happen for in-distribution samples.
5	A permutation test based on batch normalization
Assume that during testing we have access to some “test dataset” X, and our goal is to identify for
each test sample X ∈ X whether it is OoD or not. Based on the observations over OoD batches, we
propose a permutation test for each test sample X.
Interpolation between training and evaluation First, we propose a procedure that interpolates
between training mode and evaluation mode, generalizing the settings in Section 4. We randomly
obtain a batch of samples Xb1 from X with size b1 and a batch of samples Xb0 from p(X) with size
bo (e.g., from the training dataset X used to fit the generative model). For each Xj ∈ Xbi indexed by
j, we compute its log-likelihood under training mode by mixing X酊 and Xb° in the same batch:
logPθ(Xj∣X-j) where x— = (Xb0 ∪ X酊)\ {Xj}	(5)
Let b = b1 + b0 be the batch size and let r = b1 /b be the ratio of the test samples in the entire batch.
We note that the above procedure interpolates evaluation with training mode and evaluation with
evaluation mode. As r → 0, the effect on the batch statistics is dominated by the training samples
Xb0 , so Equation 5 converges to evaluation mode; as r → 1, the effect on the batch statistics is
dominated by the test samples Xbi, so Equation 5 converges to training mode. As we increase r
from 0 to 1, we are moving from evaluation mode to training mode.
The observations in Section 4 suggest that logpθ (Xj ∣X-j) should be relatively stable if q(X) is close
to P(X) and increase significantly if q(X) is far from P(X), which is indeed the case empirically. We
consider evaluating the average log-likelihood on the test samples when the ratio r is varied, and
show the results on several datasets and models in Figure 3. As we increase the ratio of test samples,
the corresponding log-likelihood decreases dramatically for OoD samples, but is relatively stable for
in-distribution samples.
Permutation test with BatchNorm We proceed to propose a permutation test statistics based on
training mode evaluation. For a test sample X, a fixed batch size b and fixed ratio r, we select (rb - 1)
samples from q(X) and (1 - r)b samples from p(x). The expected conditional likelihood of X is
used as the test statistic:
Sb,r (x0) = Ep,q [log Pθ (X∣X(1-r)b, Xrb-l)]	where X(i-r)b 〜p(x), Xrb-1 〜q(*)	(6)
6
Under review as a conference paper at ICLR 2020
0.1 0.2	0.4	0.6	0.8	1.0
Ratio of test samples in batch
Ratio of test samples in batch
Figure 3: Average BPD (- logpθ(xj∣x-j)) for test samples with varying ratios of test samples in
the batch. The BPD of in-distribution samples do not increase as the ratio increase, yet that of OoD
samples increase significantly. This justifies the use of ∆b,r1,r2(x0) for OoD detection.
In practice, we use monte carlo estimates for the expectation in Sb,r(x0). We select two different
ratios r1, r2 ∈ (0, 1) where r1 < r2, and compute the differences in Sb,r(x0):
∆b,r1,r2(x0) = ∣Sb,r1 (x0) - Sb,r2(x0)∣	(7)
We proceed to use the rank of ∆b,∏,r2(X) in the training set as our test statistic:
N
Tb,r1 ,r2 = T (x ; x1 , . . . , xN) , X I[∆b,r1 ,r2 (xi) ≤ ∆b,r1 ,r2 (x )]	(8)
i=1
For in-distribution samples, we expect ∆b,r1,r2 to be small across all choices of r1 and r2; for
out-of-distribution samples, ∆b,r1,r2 should be large if (r2 - r1) is large. Therefore, if q(x) = p(x),
then the statistics computed over the x 〜q(x) should be approximately uniformly distributed over
[0, N], whereas if q(x) 6= p(x), then the statistics computed over out-of-distribution samples would
be concentrated around N .
6	Experiments
We verify the effectiveness of our proposed test statistic on several datasets and models, including
RealNVP, VAE and PixelCNN++, and compare against several baselines including log-likelihood,
permutation test and WAIC. First, We train a model pθ(x) on a dataset p(x); then We proceed to
obtain the test statistic for each sample in q(x), where q(x) are several different datasets. For each
q(x) 6= p(x), We consider a binary classification problem, Where the prediction is the test statistic
for each sample x, and the label is Whether x is out-of-distribution (label 1) or not (label 0); larger
prediction values indicate x is more likely to be out-of-distribution. We evaluate the area under
the ROC curve (AUC) and average precision (AP) for each binary classification task, folloWing the
procedure in (Hendrycks & Gimpel, 2016). We select r1 = 0.1 and r2 = 0.9 for our proposed test
statistic, and the batch size B = 64.
The OoD detection results are shoWn in Table 2. As expected, using logpθ(x) results in poor AUC
and AP in cases Where the OoD samples have higher log-likelihoods; Tperm outperforms logpθ(x) in
cases Where We also consider high log-likelihood samples as OoD; WAIC achieves higher AUC / AP
than logpθ(x), yet its improvement is inconsistent across different models (RealNVP improvements
are loWer than VAE on Fashion MNIST). Our proposed statistic is able to detect all the out-of-
distribution samples by achieving near-optimal AUC / AP in most cases; this is most notable on
CIFAR vs. ImageNet and Fashion MNIST vs. KMNIST as the sample have very similar likelihood
distributions in evaluation mode. In Appendix C.4, We shoW that our method Works Well even With
r1 → 0 and r2 = 0.15; therefore, the method is not very sensitive to the r1, r2 hyperparameters. This
7
Under review as a conference paper at ICLR 2020
Table 2: Out-of-distribution classification evaluated with AUC (left) and Average Precision (right).
Higher is better. Rotation denotes q(x) uses images in p(x) yet each image is rotated randomly by
d ∈ (90, 270) degrees.
p(x)	Model	q(x)	log pθ (x)	Tperm	WAIC	Ours
		Rotation	0.76 / 0.78	0.64 / 0.68	0.99 / 0.99	0.99 / 0.99
Fashion		MNIST	0.10/0.32	0.78 / 0.71	0.24 / 0.38	1.00 / 1.00
MNIST	RealNVP	Omniglot	0.05 / 0.06	0.86 / 0.80	0.97 / 0.95	1.00 / 1.00
		KMNIST	0.47 / 0.46	0.45 / 0.45	0.63 / 0.65	1.00 / 1.00
		Rotation	0.73 / 0.72	0.61 / 0.64	0.94 / 0.95	0.97 / 0.98
Fashion	∖TXTJ	MNIST	0.13/0.33	0.73 / 0.68	0.56 / 0.64	1.00 / 1.00
MNIST	VAE	Omniglot	0.00 / 0.06	0.99 / 0.96	0.90 / 0.83	1.00 / 1.00
		KMNIST	0.55/0.54	0.50 / 0.50	0.84 / 0.87	1.00 / 1.00
		Rotation	0.87/0.87	0.79 / 0.79	0.99 / 0.98	1.00 / 1.00
	RaaINTVD RealNVP	SVHN	0.07 / 0.52	0.86 / 0.82	0.16 / 0.55	1.00 / 1.00
CIFAR10		ImageNet	0.51/0.52	0.50 / 0.51	0.58 / 0.59	0.98 / 0.97
		LSUN	0.70/0.39	0.58 / 0.56	0.60 / 0.28	0.99 / 0.98
		CIFAR100	0.52 / 0.54	0.55 / 0.55	0.53 / 0.54	0.71 / 0.75
		Rotation	0.77 / 0.75	0.67 / 0.63	0.90 / 0.85	0.99 / 0.99
Γ'TT7Λ ŋ 1 ∩	ŋ; Valr22_1__L PixelCNN++	SVHN	0.10/0.32	0.86 / 0.77	0.09 / 0.53	0.99 / 0.99
CIFAR10		ImageNet	0.51/0.51	0.49 / 0.50	0.66 / 0.69	0.89 / 0.87
		LSUN	0.72 / 0.69	0.60 / 0.58	0.78 / 0.74	0.98 / 0.97
suggest that in practice, even when the test samples contains only a small portion of the OoD samples
we can still detect them reliably by selecting r1 → 0 (evaluation mode) and r2 → 1 (training mode).
Additionally, we also perform permutation tests over entire batches of test samples, where the BPD
of evaluation mode are averaged. The AUC / AP of CIFAR10 versus OoD datasets are 1.00 / 1.00
(SVHN), 0.56 / 0.64 (CIFAR100), 0.82 / 0.68 (LSUN), and 0.56 / 0.68 (ImageNet). These results are
significantly lower than evaluated with training mode where the AUC / AP are near-perfect, which
demonstrates that utilizing training mode is behind the improvements for OoD detection.
7	Related work
Task-dependent OoD detection Out-of-distribution detection is crucial to applications such as
anomaly detection (Pidhorskyi et al., 2018; Hendrycks & Gimpel, 2016; Vyas et al., 2018), adver-
sarial defense (Song et al., 2017; 2018), and novelty detection for exploration (Marsland, 2003;
Bellemare et al., 2016; Fu et al., 2017). In the context of supervised learning, OoD detection meth-
ods (Hendrycks & Gimpel, 2016; Liang et al., 2017; DeVries & Taylor, 2018; Gal & Ghahramani,
2016; Lakshminarayanan et al., 2017) are applied to prevent poorly-calibrated neural networks (Guo
et al., 2017) from making high-confidence predictions on nonsensical inputs (Szegedy et al., 2013;
Goodfellow et al., 2014); these methods are task dependent and are not suitable for task-independent
cases, such as exploration over novel states (Fu et al., 2017; Ostrovski et al., 2017).
Generative models for task-independent OoD detection For high-dimensional inputs such as
images, deep generative models are widely applied for density estimation (van den Oord et al., 2016;
Dinh et al., 2016; Kingma & Dhariwal, 2018), and thus are naturally considered for task-independent
OoD detection (Chalapathy et al., 2018; Xu et al., 2018; Kliger & Fleishman, 2018; Ostrovski et al.,
2017; Li et al., 2018). However, recent empirical evidence suggest that likelihood estimates by
popular deep generative models are not reliable enough for OoD detection, even against samples that
are not adversarial by construction (Nalisnick et al., 2018; Hendrycks et al., 2018). To address these
issues, Skvdra et al. propose tuning the hyperparameters of VAEs with additional OoD data. Choi et
al. (Choi et al., 2018) address this empirically by assuming that OoD samples have higher variance
likelihood estimates under different independently trained models. Ren et al. consider learning a
separate density model for potentially confounding background statistics.
8
Under review as a conference paper at ICLR 2020
Statistical tests for OoD detection OoD detection can be posed as a hypothesis test where the
null hypothesis assumes the data is OoD. One could also consider a more specific goodness-of-fit
(GoF) test which determines whether a dataset is drawn from a specific distribution. Nalisnick et al.
(2019) considers Kernelized Stein discrepancy (Chwialkowski et al., 2016; Liu et al., 2016) and
Maximum-mean discrepancy (Gretton et al., 2012) as two GoF tests that scales to generative models.
They propose to compare the empirical cross-entropy of the samples with entropy of the dataset,
which is related to the permutation test proposed in Song et al. (2017). Our permutation test can also
be cast as a GoF test with r → 1, where all test samples in the same batch with training mode, but we
can also provide individual OoD predictions via different r values.
8	Conclusion
In this work, we revisit the i.i.d. assumptions in generative models trained with batch normalization,
which results in an alternative interpretation to the training objective. The difference between the
training objective and the evaluation objective explains the intriguing observation that likelihood
estimates over OoD examples in training mode are much lower than that in evaluation mode. This
allows us to develop a permutation test based on batch normalization, with which we can reliably
detect OoD examples even for difficult cases such as Fashion MNIST vs. KMNIST.
We argue that batch normalization is merely one approach to introducing non-independence between
observation variables in deep generative models. Neural processes (Garnelo et al., 2018), for
example, considers generative models conditioned on certain observation contexts, which may differ
significantly between regular and OoD batches. It would be interesting to investigate if such models
could be utilized for more reliable out-of-distribution detection methods for high-dimensional data.
References
Dario Amodei and Jack Clark. Faulty reward functions in the wild, 2016.
Sylvain Arlot, Alain Celisse, et al. A survey of cross-validation procedures for model selection.
Statistics surveys, 4:40-79, 2010.
Barry C Arnold and Press, S. James. Compatible conditional distributions. Journal of the American
Statistical Association, 84(405):152-156, March 1989. ISSN 0162-1459. doi: 10.1080/01621459.
1989.10478750.
Johannes Balla Valero Laparra, and Eero P Simoncelli. End-to-end optimized image compression.
arXiv preprint arXiv:1611.01704, 2016.
Marc Bellemare, Sriram Srinivasan, Georg Ostrovski, Tom Schaul, David Saxton, and Remi Munos.
Unifying Count-Based exploration and intrinsic motivation. In D D Lee, M Sugiyama, U V
Luxburg, I Guyon, and R Garnett (eds.), Advances in Neural Information Processing Systems 29,
pp. 1471-1479. Curran Associates, Inc., 2016.
Julian Besag. Statistical analysis of non-lattice data. Journal of the Royal Statistical Society: Series
D (The Statistician), 24(3):179-195, 1975.
Raghavendra Chalapathy, Edward Toth, and Sanjay Chawla. Group anomaly detection using deep
generative models. arXiv preprint arXiv:1804.04876, April 2018.
Hyunsun Choi, Eric Jang, and Alexander A Alemi. WAIC, but why? generative ensembles for robust
anomaly detection. arXiv preprint arXiv:1810.01392, October 2018.
Kacper Chwialkowski, Heiko Strathmann, and Arthur Gretton. A kernel test of goodness of fit.
JMLR: Workshop and Conference Proceedings, 2016.
Corinna Cortes, Giulia DeSalvo, Claudio Gentile, Mehryar Mohri, and Scott Yang. Online learning
with abstention. arXiv preprint arXiv:1703.03478, 2017.
Terrance DeVries and Graham W Taylor. Learning confidence for Out-of-Distribution detection in
neural networks. arXiv preprint arXiv:1802.04865, February 2018.
9
Under review as a conference paper at ICLR 2020
L Dinh, D Krueger, and Y Bengio. NICE: Non-linear independent components estimation. arXiv
preprint arXiv:1410.8516, 2014.
Laurent Dinh, Jascha Sohl-Dickstein, and Samy Bengio. Density estimation using real NVP. arXiv
preprint arXiv:1605.08803, May 2016.
Justin Fu, John Co-Reyes, and Sergey Levine. Ex2: Exploration with exemplar models for deep
reinforcement learning. In Advances in Neural Information Processing Systems, pp. 2577-2587,
2017.
Yarin Gal and Zoubin Ghahramani. Dropout as a bayesian approximation: Representing model
uncertainty in deep learning. In international conference on machine learning, pp. 1050-1059,
2016.
Marta Garnelo, Jonathan Schwarz, Dan Rosenbaum, Fabio Viola, Danilo J Rezende, S M Ali Eslami,
and Yee Whye Teh. Neural processes. arXiv preprint arXiv:1807.01622, July 2018.
Ian J Goodfellow, Jonathon Shlens, and Christian Szegedy. Explaining and harnessing adversarial
examples. arXiv preprint arXiv:1412.6572, 2014.
Arthur Gretton, Karsten M Borgwardt, Malte J Rasch, Bernhard Scholkopf, and Alexander Smola. A
kernel two-sample test. Journal of Machine Learning Research, 13(Mar):723-773, 2012.
Chuan Guo, Geoff Pleiss, Yu Sun, and Kilian Q Weinberger. On calibration of modern neural
networks. In Proceedings of the 34th International Conference on Machine Learning-Volume 70,
pp. 1321-1330. JMLR. org, 2017.
Dan Hendrycks and Kevin Gimpel. A baseline for detecting misclassified and Out-of-Distribution
examples in neural networks. arXiv preprint arXiv:1610.02136, October 2016.
Dan Hendrycks, Mantas Mazeika, and Thomas Dietterich. Deep anomaly detection with outlier
exposure. arXiv preprint arXiv:1812.04606, December 2018.
Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by
reducing internal covariate shift. arXiv preprint arXiv:1502.03167, 2015.
Diederik P Kingma and Prafulla Dhariwal. Glow: Generative flow with invertible 1x1 convolutions.
arXiv preprint arXiv:1807.03039, July 2018.
Diederik P Kingma and Max Welling. Auto-Encoding variational bayes. arXiv preprint
arXiv:1312.6114v10, December 2013.
Mark Kliger and Shachar Fleishman. Novelty detection with gan. arXiv preprint arXiv:1802.10560,
2018.
Jonas Kohler, Hadi Daneshmand, Aurelien Lucchi, Ming Zhou, Klaus Neymeyr, and Thomas
Hofmann. Towards a theoretical understanding of batch normalization. arXiv preprint
arXiv:1805.10694, 2018.
Alex Krizhevsky and Geoffrey Hinton. Learning multiple layers of features from tiny images.
Technical report, Citeseer, 2009.
Volodymyr Kuleshov, Nathan Fenner, and Stefano Ermon. Accurate uncertainties for deep learning
using calibrated regression. In International Conference on Machine Learning, 2018.
Balaji Lakshminarayanan, Alexander Pritzel, and Charles Blundell. Simple and scalable predictive
uncertainty estimation using deep ensembles. In Advances in Neural Information Processing
Systems, pp. 6402-6413, 2017.
Dan Li, Dacheng Chen, Jonathan Goh, and See-kiong Ng. Anomaly detection with generative
adversarial networks for multivariate time series. arXiv preprint arXiv:1809.04758, 2018.
Shiyu Liang, Yixuan Li, and R Srikant. Enhancing the reliability of out-of-distribution image
detection in neural networks. arXiv preprint arXiv:1706.02690, June 2017.
10
Under review as a conference paper at ICLR 2020
Qiang Liu, Jason Lee, and Michael Jordan. A kernelized stein discrepancy for goodness-of-fit tests.
In International conference on machine learning, pp. 276-284, 2016.
StePhen Marsland. Novelty detection in learning systems. Neural computing surveys, 3(2):157-195,
2003.
Seyed-Mohsen Moosavi-Dezfooli, Alhussein Fawzi, Omar Fawzi, and Pascal Frossard. Universal
adversarial perturbations. In Proceedings of the IEEE conference on computer vision and pattern
recognition, pp. 1765-1773, 2017.
Eric Nalisnick, Akihiro Matsukawa, Yee Whye Teh, Dilan Gorur, and Balaji Lakshminarayanan. Do
deep generative models know what they don’t know? arXiv preprint arXiv:1810.09136, October
2018.
Eric Nalisnick, Akihiro Matsukawa, Yee Whye Teh, and Balaji Lakshminarayanan. Detecting
out-of-distribution inputs to deep generative models using a test for typicality. arXiv preprint
arXiv:1906.02994, 2019.
Yuval Netzer, Tao Wang, Adam Coates, Alessandro Bissacco, Bo Wu, and Andrew Y Ng. Reading
digits in natural images with unsupervised feature learning. 2011.
Anh Nguyen, Jason Yosinski, and Jeff Clune. Deep neural networks are easily fooled: High confidence
predictions for unrecognizable images. In Proceedings of the IEEE conference on computer vision
and pattern recognition, pp. 427-436, 2015.
Georg Ostrovski, Marc G Bellemare, Aaron van den Oord, and Remi Munos. Count-based exploration
with neural density models. In Proceedings of the 34th International Conference on Machine
Learning-Volume 70, pp. 2721-2730. JMLR. org, 2017.
Stanislav Pidhorskyi, Ranya Almohsen, and Gianfranco Doretto. Generative probabilistic novelty
detection with adversarial autoencoders. In S Bengio, H Wallach, H Larochelle, K Grauman,
N Cesa-Bianchi, and R Garnett (eds.), Advances in Neural Information Processing Systems 31, pp.
6822-6833. Curran Associates, Inc., 2018.
Jie Ren, Peter J Liu, Emily Fertig, Jasper Snoek, Ryan Poplin, Mark A DePristo, Joshua V Dillon,
and Balaji Lakshminarayanan. Likelihood ratios for out-of-distribution detection. arXiv preprint
arXiv:1906.02845, 2019.
Tim Salimans, Andrej Karpathy, Xi Chen, and Diederik P Kingma. PixelCNN++: Improving the
PixelCNN with discretized logistic mixture likelihood and other modifications. arXiv preprint
arXiv:1701.05517, January 2017.
Shibani Santurkar, Dimitris Tsipras, Andrew Ilyas, and Aleksander Madry. How does batch normal-
ization help optimization? arXiv preprint arXiv:1805.11604, May 2018.
V^t Skvdra, Tomds Pevny, and VgclaV Smidl. Are generative deep models for novelty detection truly
better? arXiv preprint arXiv:1807.05027, 2018.
Yang Song, Taesup Kim, Sebastian Nowozin, Stefano Ermon, and Nate Kushman. PixelDefend:
Leveraging generative models to understand and defend against adversarial examples. arXiv
preprint arXiv:1710.10766, October 2017.
Yang Song, Rui Shu, Nate Kushman, and Stefano Ermon. Constructing unrestricted adversarial
examples with generative models. In Advances in Neural Information Processing Systems, pp.
8312-8323, 2018.
Christian Szegedy, Wojciech Zaremba, Ilya Sutskever, Joan Bruna, Dumitru Erhan, Ian Goodfellow,
and Rob Fergus. Intriguing properties of neural networks. arXiv preprint arXiv:1312.6199, 2013.
Lucas Theis, Aaron van den Oord, and Matthias Bethge. A note on the evaluation of generative
models. arXiv preprint arXiv:1511.01844, November 2015.
Rianne van den Berg, Leonard Hasenclever, Jakub M Tomczak, and Max Welling. Sylvester
normalizing flows for variational inference. arXiv preprint arXiv:1803.05649, March 2018.
11
Under review as a conference paper at ICLR 2020
Aaron van den Oord, Nal Kalchbrenner, and Koray Kavukcuoglu. Pixel recurrent neural networks.
arXiv preprint arXiv:1601.06759, January 2016.
Apoorv Vyas, Nataraj Jammalamadaka, Xia Zhu, Dipankar Das, Bharat Kaul, and Theodore L
Willke. Out-of-distribution detection using an ensemble of self supervised leave-out classifiers.
In Proceedings ofthe European Conference on Computer Vision (ECCV), pp. 550-564. openac-
cess.thecvf.com, 2018.
Halbert White. Maximum likelihood estimation of misspecified models. Econometrica: Journal of
the Econometric Society, pp. 1-25, 1982.
Han Xiao, Kashif Rasul, and Roland Vollgraf. Fashion-mnist: a novel image dataset for benchmarking
machine learning algorithms. arXiv preprint arXiv:1708.07747, 2017.
Haowen Xu, Wenxiao Chen, Nengwen Zhao, Zeyan Li, Jiahao Bu, Zhihan Li, Ying Liu, Youjian
Zhao, Dan Pei, Yang Feng, et al. Unsupervised anomaly detection via variational auto-encoder
for seasonal kpis in web applications. In Proceedings of the 2018 World Wide Web Conference on
World Wide Web, pp. 187-196. International World Wide Web Conferences Steering Committee,
2018.
12
Under review as a conference paper at ICLR 2020
A Proofs
A.1 Proof of Proposition 1
Proposition 1. Let b ∈ N, b > 1 be the batch size, and for all possible batch of samples of size
(b - 1), denoted as x-j, if `θ (xj ; x-j) is the training objective over xj for a likelihood-based
generative model with batch normalization, then:
e exp('θ(Xj; x-j))dxj = 1.
xj
where we consider likelihood-based generative models that sample either via some parametrized
distribution (such as VAE and PixelCNN) or via parametrized invertible transformations constructed
via affine coupling layers (such as RealNVP).
Proof. Note that in training mode, we can write down the batch norm function explicitly:
Z — ⅛ P P _ -∣ Zi
BatchNorm(z; γ, β, e) =	I	b =	----∙ Y + β
b/b—1 ∑i=ι(zi - b ∑i=ι z)2 + e
if we fix Z-i, γ, β and , then BatchNorm(Z; γ, β, ) is a deterministic function over Zi. The
corresponding neural network gθ(xi; x-i) is also a deterministic function over xi (given x-i).
We summarize likelihood-based generative models into two types:
•	In the first type, the neural network produces the parameters for a certain tractable distribu-
tion, which is used to compute the likelihood (or its lower bound). This includes VAE and
autoregressive models. Since the distribution over xi is parametrized by the deterministic
function gθ , so the likelihood is naturally normalized.
•	In the second type, RealNVP models are composed by affine coupling layers (Dinh et al.,
2014), which contains transformations (x, y) 7→ (x0, y0) where
X = x, y0 = s(x) ∙ y + t(x)	(9)
where s(∙) and t(∙) are neural networks (potentially with batch normalization layers). This
has the reverse
x = x0,	y = (y0 - t(x0))/s(x0)	(10)
Since BatchNorm is a deterministic function over Zi when Z-i is fixed, the corresponding
s(∙) and t(∙) functions also have the same property. Therefore, the corresponding RealNVP
model over xi with fixed x-i is also invertible.
As gθ is a deterministic function over xi , the corresponding conditional likelihood is also
normalized.
This completes the argument for likelihood-based generative models.	□
A.2 Proof of Proposition 2
Proposition 2. There exists a joint distribution pθ (xι, X2,..., Xb) such thatforall j, pθ (xj∣x-j) →
`θ (xj ; x-j ) as b → ∞. Then, the objective for one batch {xj}jb=1 in training mode
bb
L train ({xj }j=1; θ) = X 'θ (Xj |x-j ) , X log pθ (Xj |X-j )	⑶
j=1	j=1
is the PSeUdo-log-likelihoodfor the joint distribution pθ (xι, X2,..., Xb) as b → ∞.
13
Under review as a conference paper at ICLR 2020
Proof. We treat each sample in the batch as a separate random variable, and consider the correspond-
ing graphical model where batch normalization is involved. Since training mode aggregates the
statistics of all the samples, all the random variables are connected to each other.
First, We need to show that for large enough b, there exists a joint distribution pθ (xι, x2,..., Xb)
that is compatible with all the conditional distributions we defined (Arnold & Press, S. James, 1989).
From Theorem 4.1 in (Arnold & Press, S. James, 1989), we need to show that there exists a function
f such that
Pθ (χi∣χ-i) = f (x-j)
Pθ (Xj |x-j)	f (x-i)
(11)
Let f (x-j) = Exj [£k=j logpθ(Xk ∣x-k)] be the sum of conditional log-likelihood of Xk under the
expectation of some distribution over Xj . For large enough b, the value of Xj will not affect the batch
statistics, so f (x-j) = Pk=j∙ logPθ(Xk ∣x-k), so the condition for compatibility in Equation 11
holds, and there exists a compatible joint distribution, which we denote as pθ(xi, X2,..., Xb).
Next, we verify the conditions under which the product of the conditional likelihoods is a pseudo-
likelihood of pθ(xi, X2,..., Xb). The conditional likelihood for any sample Xj is independent of
X-j conditioned on its neighbors (which are X-j), so
b
LtrainHxj}b=1； θ) = ElOgpθ(Xj |X-j)
j=1
is the pseudo-log-likelihood objective (Besag, 1975) for {xj}jb=1, which approximates the log-
likelihood of thejoint distribution.	□
B Fooling likelihood-based permutation tests
As suggested by empirical evidence, we assume that model mis-specification always occurs and
that our likelihood estimates cannot be used naively for detecting out-of-distribution samples due to
the mode seeking nature of DKL . Under this assumption, likelihood-based permutation tests may
seems more effective than simple thresholding rules for detecting out-of-distribution samples, as it
treats both high-likelihood and low-likelihood samples as OoD. In this section, however, we show
that likelihood-based permutation test can also be easily fooled, making them infeasible for OoD
detection in a straightforward manner.
We consider fooling a model Pθ(X) using samples generated from another model qφ(X) (trained
on another dataset), where we modify the “temperature” T of the generative model (Kingma &
Dhariwal, 2018) (see Appendix C.2 for details). Then we gather the likelihood estimates for samples
in P(X) and q(X) and obtain the area under the ROC curve (AUC) using Tperm as prediction values
to classify if X is OoD. We consider a RealNVP (Dinh et al., 2016) model trained on CIFAR and a
PixelCNN++ (Salimans et al., 2017) model trained on Fashion MNIST. We use a RealNVP trained
on SVHN, and a PixelCNN++ trained on MNIST to fool the two Pθ(X) models respectively. For
RealNVP we set T = 1.10 and for PixelCNN++ we set T = 1.17.
In Figure 4, we show that it is possible to produce a distribution qφ(X) with generative models such
that its likelihood distribution evaluated by Pθ(X) lies around the median likelihood in P(X). This
results in low AUC and thereby confusing the test based on Tperm. We show some out-of-distribution
sample with similar bits-per-dimension (BPD) to training samples in Figure 5, where the generated
samples look drastically different from training samples visually, even though they have similar
log-likelihoods. We note that flipping the classifier predictions (i.e. using -Tperm) will not address
this issue, since we would then treat low likelihood samples as more likely to be in-distribution.
C Additional Experimental Details
C.1 Model Architectures
For RealNVP (Dinh et al., 2016), we consider downscale once, with 4 residual blocks for each affine
coupling layer and 32 channels for each convolutional layer, except for CIFAR where we have 8
residual blocks with 64 channels for each convolutional layer.
14
Under review as a conference paper at ICLR 2020
Figure 4: ROC curves for using the p-values for likelihood-based permutation tests. We assign
positive labels to samples in q(x) and negative labels to samples in p(x). While such tests can detect
OoD samples from other datasets, they could be confused by samples from another generative model.
CIFAR test samples
RealNVP samples (SVHN, T = 1.10)
3.932	3.962	3.028 3.245	3.500 3.969 3.968 3.274
3.525 3.712 3.464 3.293 3.253 3.159 3.632	4.063
Fashion MNIST test samples
PiXelCNN + + samples (MNIST, T = 1.17)
k—qgl 口 7 I
2.930 3.460	1.167	1.676	1.668 3.141 2.640 2.845
S石S般冷盘公乙
2.905 2.154 2.324 3.277	2.669 2.768 2.228 2.134
Figure 5: Samples and their BPD evaluated under pθ(x). (Top) pθ(x) is a RealNVP trained on
CIFAR. (Bottom) pθ (x) is a PixelCNN++ trained on Fashion MNIST.
For VAE (Kingma & Welling, 2013; van den Berg et al., 2018), our inference network has 6 convolu-
tional layers followed by a fully connected layer, and the generator network has 8 deconvolutional
layers. We add batch normalization to all the convolutional layers and deconvolutional layers, except
for the last two deconvolutional layers. We detail the convolutional layer hyperparameters in Table 3.
Table 3: Architecture for VAE convolutional layers. k denotes image width divided by 4, c denotes
the number of channels of the image (1 for gray, 3 for colored).
Inference network
Layer	Channels	Kernel	Stride	Padding
1	32c	5	1	2
2	32c	5	2	2
3	32c	5	1	2
4	64c	5	2	2
5	64c	5	1	2
6	256	k	1	0
Generator network
Layer	Channels	Kernel	Stride	Padding
1	64c	5	1	2
2	64c	5	2	2
3	64c	5	1	2
4	32c	5	2	2
5	32c	5	1	2
6	32c	5	1	2
7	256	5	1	2
8	256c	1	1	0
For PixelCNN++, we made two simple modifications to default hyperparameters (Salimans et al.,
2017). We reduce the number of filters in each ResNet block from 160 to 80, and we use batch
normalization after convolution as opposed to adding weight normalization over convolution.
15
Under review as a conference paper at ICLR 2020
All the models are trained with default optimizer hyperparameters with a batch size of 64. We use a
batch size of 64 also in evaluation mode.
C.2 Experimental procedures for Section B
We consider controlling the entropy of the generated samples by controlling a temperature hy-
perparameter T . In RealNVP, this is realized by multiplying the latent variable by a factor of T ,
which is equivalent to sampling from N (0, T2I). In PixelCNN++, this is realized by dividing each
pre-softmax scalar output by T; larger T values would lead to higher entropy samples.
C.3 Likelihood differences between training mode and testing mode on
GENERATED DATA
We consider measuring the likelihood differences between training mode and testing mode using a
RealNVP trained on CIFAR. The samples are generated from a RealNVP trained on SVHN, with
several temperatures T ∈ {0.7, 1.0, 1.3}. Similar to the observation with SVHN samples, there is a
large gap between training mode and evaluation mode evaluations.
Table 4: Log-likelihood (measured in bits per dimension) calculated with a RealNVP trained on
CIFAR and evaluated on generated samples from a RealNVP trained on SVHN. We report likelihood
results with training mode, evaluation mode, and their difference (∆).
Dataset	I Mode		BPD	∆
CIFAR		evaluation	3.48	0.03
		training	3.51	
SVHN		evaluation	2.44	8.56
		training	11.10	
RealNVP (SVHN, T =	1.0)	evaluation training	2.88 328	325
RealNVP (SVHN, T =	0.7)	evaluation training	1.51 317	315
RealNVP (SVHN, T =	1.3)	evaluation training	5.43 16.0	10.57
C.4 OUT-OF-DISTRIBUTION DETECTION WITH ALTERNATIVE VALUES OF r1 AND r2
We include additional results with alternative values of r1 and r2. If our method is able to achieve
high performance with small r2, this suggests that we can detect the OoD examples realiably even as
they occupy a small portion within the batch. We consider r1 → 0 (which is evaluation mode) and
r2 ∈ {0.15, 0.3, 0.5, 0.9}; we show our results in Table 5.
C.5 Histograms of log-likelihoods
We further show the histograms of log-likelihoods of several test datasets when the model is a
RealNVP trained on CIFAR-10 datasets in Figure 6; the mean BPD is computed with evaluation
mode.
D Details for the derivation in Section 4.2. 1
Suppose we try to learn some distribution p(x) with a 2-d flow model with one coupling layer (Dinh
et al., 2016): f : (x1, x2) 7→ (z1, z2) where
z1 = x1	(12)
Z2 = X2 + (xi - E(xι))/P(xι) ∙ Y + β	(13)
16
Under review as a conference paper at ICLR 2020
Table 5: Out-of-distribution classification evaluated with AUC (left) and Average Precision (right).
Rotation denotes q(x) uses images in p(x) yet randomly rotate each image by d ∈ (90, 270) degrees.
p(x)	Model	q(X)	r2 = 0.15	r2 = 0.3	r2 = 0.5	r2 = 0.9
		Rotation	0.93 / 0.95	0.91 / 0.94	0.98 / 0.99	0.99 / 0.99
Fashion	RealNVP	MNIST	0.92 / 0.93	1.00 / 1.00	1.00 / 1.00	1.00 / 1.00
MNIST		Omniglot	0.96 / 0.97	0.95 / 0.96	1.00 / 1.00	1.00 / 1.00
		KMNIST	0.86/0.88	1.00 / 1.00	1.00 / 1.00	1.00 / 1.00
		Rotation	0.88/0.91	0.94 / 0.95	0.94 / 0.95	0.97 / 0.98
Fashion	VAE	MNIST	0.86 / 0.88	0.99 / 0.99	0.56 / 0.64	1.00 / 1.00
MNIST		Omniglot	0.93 / 0.95	0.98 / 0.99	0.90 / 0.83	1.00 / 1.00
		KMNIST	0.85/0.88	0.99 / 0.99	0.84 / 0.87	1.00 / 1.00
		Rotation	1.00/1.00	1.00 / 1.00	1.00 / 1.00	1.00 / 1.00
CIFAR	RealNVP	SVHN	0.92 / 0.90	1.00 / 1.00	1.00 / 1.00	1.00 / 1.00
		ImageNet	0.74 / 0.72	0.92 / 0.90	0.98 / 0.98	0.98 / 0.97
		LSUN	0.77 / 0.75	0.98 / 0.97	1.00 / 1.00	0.99 / 0.98
		Rotation	0.87/0.83	0.97 / 0.94	1.00 / 0.99	0.99 / 0.99
CIFAR	PixelCNN++	SVHN	0.76 / 0.72	0.95 / 0.92	1.00 / 1.00	0.99 / 0.99
		ImageNet	0.62 / 0.58	0.74 / 0.70	0.87 / 0.85	0.89 / 0.87
		LSUN	0.72 / 0.69	0.80 / 0.75	0.98 / 0.98	0.98 / 0.97
1.0-
0.8-
⅞0.6-
U
Φ
Q 0.4-
0.2-
0.0-
BPD
(a) BPD of individual images.
(b) Mean BPD of batch of images.
Figure 6: Histograms of BPD of test datasets on a RealNVP dataset trained on CIFAR-10.
(14)
with learnable parameters γ, β; E(x1), V (x1) are the empirical mean and variance of a batch of x1
in training mode, and the mean and variance of p(x1) in evaluation mode.
We assume the distribution p(x1) to be a even mixture of two Gaussians (N (-1, σ2) andN (1, σ2)
with σ → 0, so it concentrates around -1 and 1), and p(x2) = δ0(x2) (x2 concentrates at zero), so
Z2 ≈ (xi - E(xi))/P(xι) ∙ Y + β.
The Jacobian of f is:
J _ ∂f (x) _ Γ 1________ 0^
== b∕√w∏ 1
so its determinant is one. The likelihood of the flow model is simply
pf(x1,x2) = p(f(x1,x2))|J| = p(f(x1,x2))
We assume the priorp(z1, z2) is standard Gaussian N(0, I). Therefore, we have:
Pf (χ1,χ2) ≈ φ(χι) ∙ φ((χι - E(χι))/VZV(χι) ∙ Y + β)
where 夕(x) is the probability density function for the standard Gaussian distribution. Note that
Y , β only depends on the second term. The maximum likelihood solution for β = 0 (due to
symmetry); for Y, we can treatp(x1) as two point distributions at -1 and 1, so we have the optimal
Y ≈ arg mins -s2/2 + log s =1. Moreover, Ep[x1] = 0 and Varp [x1] ≈1.
(15)
17
Under review as a conference paper at ICLR 2020
Forp(x1, x2) in evaluation mode, we have
Ep[logPf(x1,x2)] ≈ Ep[log P(xι) + log 夕((xι - E(xι))∕,V(xι)]
=Ep[log 2(xι) + log 2(xι)] ≈ -2.84.
For q(x1, x2) in evaluation mode, we have
Eq[logPf (x1,x2)] ≈ Eq[logP(xι) + log2(xι)] ≈ -1.92.
For q(x1,x2) in training mode, E(xι) = 0, V(xι) = 1/√12, so we have:
Eq[logPf (x1,x2)] = Eq[log 2(xi) + log夕(√12xι)] ≈ -2.38.
(16)
(17)
(18)
(19)
18