Under review as a conference paper at ICLR 2020
Policy Message Passing: A New Algorithm for
Probabilistic Graph Inference
Anonymous authors
Paper under double-blind review
Ab stract
A general graph-structured neural network architecture operates on graphs through
two core components: (1) complex enough message functions; (2) a fixed infor-
mation aggregation process. In this paper, we present the Policy Message Passing
algorithm, which takes a probabilistic perspective and reformulates the whole
information aggregation as stochastic sequential processes. The algorithm works
on a much larger search space, utilizes reasoning history to perform inference, and
is robust to noisy edges. We apply our algorithm to multiple complex graph rea-
soning and prediction tasks and show that our algorithm consistently outperforms
state-of-the-art graph-structured models by a significant margin.
1	Introduction
Not every path is created equal. Powerful sequential inference algorithms have been a core research
topic across many tasks that involve partial information, large search spaces, or dynamics over
time. An early algorithm example is dynamic programming which memorizes the local information
and uses a fixed inference trace to acquire a global optimum. In the modern deep learning era,
sequential memory architectures such as recurrent neural networks are used for sequential inference
(e.g. language generation (Sutskever et al. (2014))) to narrow down the search space. Neural-based
iterative correction is developed in amortized inference for posterior approximation (Marino et al.
(2018)). Also, a large bulk of works are developed in reinforcement learning for sequential inference
of the environment with partial observation, non-future aware states, and world dynamics.
Graph-structured models are another class of models that heavily rely on local observations and
sequential inference. It contains nodes and message functions with partial information, the final
output of model relies on a sequence of communication operations which transforms the nodes
information dynamically over iterations. A general formulation of learning graph-structured models
is maximizing the likelihood:
max p(y|s0, x; Fθ, P)
θ
(1)
The objective describes the process where it takes in the information x over a graph, starts from
initial states s0 and maps to the target output y. This process involves two key components, message
functions F and inference process P .
Message function designs focus on the choices of functions defined over the interaction between nodes
or variables. Simple log-linear potential functions are commonly used in traditional probabilistic
graphical models (Sutton et al. (2012)). Kernelized potential functions (Lafferty et al. (2004)),
gaussian energy functions (Krahenbuhl & Koltun (2011)), or semantic-driven potential functions (Lan
et al. (2011)) are developed in varied cases to adapt to specific tasks. Deep graph neural networks
generalizes the message functions to neural networks. There are a variety of function types developed
such as graph convolution operations (KiPf & Welling (2016)), attention-based functions (VelickoVic
et al. (2017)), gated functions (Li et al. (2015); Deng et al. (2016)).
Inference procedures over graphs are mainly developed under the context of probabilistic graphical
models, with the classic inference techniques such as belief propagation ( Pearl (1988)), generalized
belief propagation (Yedidia et al. (2001)), and tree-reweighted message passing ( Wainwright et al.
(2003)). However, there has not been many research in developing powerful inference process in
1
Under review as a conference paper at ICLR 2020
modern deep graph-structured models (Graph Neural Networks). Most graph-structured models still
follow a fixed hand-crafted rule for performing inference over nodes.
In this paper, we take a different tack and instead propose to represent the inference process modeled
by a neural network Pφ :
maxET-Pφ [p(y∣so, x, T; Fθ)]	(2)
φ,θ
The neural network Pφ represents the distribution over all possible inference trajectories in the
graph model. By taking the distribution perspective of message passing, the whole inference is
reformulated as stochastic sequential processes in the deep graph-structured models. This formulation
introduces several properties: Distribution nature - the possible inference trajectories in graph, besides
synchronous or asynchronous, are in a vast space with varied possibilities, leading to different results;
Consistent inference - maintaining a powerful neural network memorizing over time could lead to
more effective and consistent inference over time; Uncertainty - inference itself will affect prediction,
with a distribution, such uncertainty over the reasoning between nodes can be maintained.
The primary contributions of this paper are three folds. Firstly, we introduce a new perspective on
message passing that generalizes the whole process to stochastic inference. Secondly, we propose a
variational inference based framework for learning the inference models. Thirdly, We empirically
demonstrate that having a powerful inference machine can enhance the prediction in graph-structured
models, especially on difficult reasoning tasks, or graphs with noisy edges.
2	Background: Graph Neural Networks
A large volume of Graph Neural Network (GNN) models have been developed recently (Defferrard
et al. (2016); Li et al. (2015); Kipf & Welling (2016); Henaff et al. (2015); Duvenaud et al. (2015))
for varied applications and tasks. This line of methods typically share some common structures such
as propagation networks and output functions. In our paper, without loss of generality, we follow
a unified view of graph neural network proposed in a recent survey (Battaglia et al. (2018)) and
introduce the graph neural network architecture here.
In this formulation, there are two key components: propagation networks and output networks. In
the propagation networks, the fundamental unit is a “graph-to-graph” module. This module takes a
graph with states st as input and performs information propagation (message passing) operations to
modify the values to st+1. The graph states at each step t consists of sets of variables representing
the attributes of nodes Vt = {v}t and edges Et = {e}t, along with global properties ut. The
graph-to-graph module updates the attributes of these nodes, edges, and global properties via a set of
message passing, implemented as neural networks.
et = fe{v}t, Et, E; vt	=	fv{e}t,Vt,E;u =	fu{v}t, {e}t, E	(3)
The message passing in the standard graph neural networks is a fixed aggregation process defined by
the graph structure E . The output network is a general part of model that maps the information in the
graph states to the target output y: p(y|sT). In general, there is no restriction on the form of target
y or the output mapping function, like the target can be a set of labels for nodes, edges, the whole
graph or even sentences.
3	Graph models with policy mes sage passing
In this section we describe our stochastic graph inference algorithm under the formulation of graph
neural networks. As the inference process under the algorithms is more of a reasoning procedure,
we refer to it as reasoning in the later content. Our approach takes the initial state s0 of a graph
representing observations and latent variables in a domain, uses a set of parameterized reasoning
agents to pass messages over this graph, and infers the output prediction y. Our model contains three
main parts:
1.	Graph st , representing states of observed and latent variables.
2
Under review as a conference paper at ICLR 2020
(a) Single timestep action proposal.
Action sampling/
Function selection
Time step: t -1
Time step: t + 1
(b) Dynamic graph reasoning over multiple steps.
Figure 1: We design agents that learn to reason over graphs by sequentially performing actions
for inference. (a) We learn a function set. Each function is a possible message along an edge. At
each time step of inference, our reasoning agent examines the current graph states and produces a
distribution over the function set to sample from. (b) A set of these agents, each one considering its
own edge, is run to produce the full set of messages for a graph. Each agent maintains its own state
and can communicate with the other agents via a shared memory.
2.	A set of message functions {fk (∙, ∙; θk)}, parameterized by θk, that determine the possible
manner in which messages can be passed over edges in the graph.
3.	An automatic reasoning agent A(∙; φ), parameterized by φ, that determines which message
function would be appropriate to use along an edge in the graph.
For every timestep t during reasoning, our model takes the current graph state st and the previous
reasoning history, then generates a distribution over actions for choosing which messages to pass
(or pass no information). The new graph state st+1 is obtained through performing message passing
actions sampled from the distribution. The final prediction is thus inferred sequentially through the
operation of the reasoning agents over the graph. Fig. 1 illustrates the algorithm.
3.1	Model definition
Our inference procedure operates on graphs. We start with an initial graph state s0 = (v0, e0, u0),
where v0, e0, and u0 contain information about individual nodes, edges, and global information
about the graph respectively. Nodes in this graph can represent observations or latent variables from
our domain; we assume the set of nodes is known and fixed. Edges in this graph represent possible
relationships between nodes, over which we will potentially pass messages during inference. The
edges are assumed known and fixed, though our method will permit flexibility via its inference.
Given a graph state s, we can output y using a network fo(s; θo). Note that in general this formulation
could have a variety of possible output functions, corresponding to different tasks. In the current
instantiation we focus on a single such output function that is used for a single task. Given the initial
graph state s0 , we perform a set of reasoning steps that pass messages over this graph to obtain a
refined graph representation. The goal of this message passing is to successively refine the graph state
such that the graph state can be accurately decoded to match the correct output for the given input
graph. The update functions we define will modify the node attributes v , though the formulation
could be generalized to edge and global attributes as well.
Message Formulation: The message passing is decomposed into operations on edges in the graph.
For the ith node in the graph, we update its state by passing messages from all nodes in its neighbour
set N (i).
vi = X fzij(vi,vj)	(4)
j∈N(i)
The form of message to pass is a crucial component of our method. We select the function fzi (∙, ∙)
to use in this message passing for each edge.
3
Under review as a conference paper at ICLR 2020
We define a common set of functions {fk (∙, ∙)}o≤k≤κ that can be used across any edge in the graph.
To allow for no information to be passed along an edge, We define the function fo(∙, ∙) = 0. Each of
the other functions fk(∙, ∙) is a non-linear function (e.g. MLP) with its own learnable parameters θk.
Reasoning Agents: Alongside these functions, we define a reasoning agent that determines which
function to use on a particular edge in the graph at the current time step of inference. We run one
copy of this reasoning agent for each edge of the graph. The reasoning agent takes as input the
current graph state and for its edge (i, j) outputs a distribution over the message to pass on that edge
(computed by a network A). The reasoning agent maintains state hitj (propagated via a network
B) over iterations of inference so that it can potentially remember which types of message passing
actions were taken at different time steps t. We also include a global state htu = Pij hitj which can
be used to share information across the agents operating on different edges.
The networks are updated and distributions computed using the following equations:
htij+1 = B(st, i, j, hitj; θB)	(5)
∏(zi+ ι∣st) U A(st,i,j, hij, hu； Θa) + 1	(6)
where π(zti+j 1 |st ) is a distribution over zti+j 1, the message function to use for edge (i, j) on step
t + 1 given the current graph state. Note that a uniform prior is added to message distribution
for regularization, though in general other priors could be used for this purpose. The parameters
φ = (θA, θB) for the reasoning agent are shared; however, each edge maintains its own copy of these
agents, via different states hitj .
Action sampling: Given these distributions π, we can now use them to perform inference by
sampling actions from these distributions. In our implementation, the Gumbel softmax trick is used
for differentiable sampling.
By executing a set of actions {zt} sampled from each of these distributions π, our model takes
selected nodes and corresponding message functions to pass, and the graph state is updated to st+1
after one reasoning/passing step. Over a sequence of time steps, this process corresponds to a
reasoning trajectory τ = (z1, z2, . . . , zT) that produces a sequence of graph states (s0, s1, . . . , sT).
At test time, we evaluate a learned model by sampling multiple such reasoning trajectory sequences
and aggregating the results.
3.2	Learning objective
We assume that we are provided with training data that specify an input graph structure along with
its corresponding value to be inferred. For ease of exposition, we derive our learning objective for
a single training data pair of graph s with target value y. For the learning objective, we adopt a
probabilistic view on reasoning. As per the previous section, we can infer these values by running
a particular reasoning process. However, rather than fixing a reasoning process, we could instead
imagine inferring values y by marginalizing over all possible reasoning sequences τ.
p(y∣s) = fp(y,τ |s) = fp(y∣τ, s)p(τ ∣s)	(7)
ττ
The “prior” p(τ |s) could be either a learnable prior or a hand-designed prior. Belief propagation or
other neural message passing frameworks define a delta function where the prior is deterministic and
fixed. Here we instead adopt a learnable prior ∏ for P(T|s), where the reasoning process depends on
the graph states. τ represents the latent reasoning sequence. Given a graph initial state and ground
truth label y, we are interested in the posterior distribution over trajectories that describes an efficient
and effective reasoning process. We adopt standard variational inference to approximate the posterior
distribution and try to find such action spaces.
As per the previous section, we have a method for computing y given a reasoning sequence τ .
However, as in variational inference applications, evaluation of the summation in Eq. 7 is challenging.
Standard sampling approaches, i.e. choosing an inference procedure from an arbitrary proposal
distribution, would be likely to lead to inference procedures ineffective for the given graph/inference
task. Instead, we utilize our reasoning agent as a proposal distribution to propose inference procedures.
If the proposal distribution is close to the posterior distribution over reasoning actions, then we can
4
Under review as a conference paper at ICLR 2020
conduct both effective and efficient inference to obtain the final desired output. Hence, we hope to
minimize the following KL divergence:
KL(q(τ)∣∣∏*(τ|y, S))
(8)
where q is the proposal distribution over reasoning actions. ∏ is the true posterior distribution over
reasoning sequences given the target inference values y and graph state s, which is unknown. We
adopt the standard variational inference method to derive the following equations:
logp(y∣s) - KL(q(τ|y, s)∣∣∏*(τ|y, S)) = E-q[logp(y∣τ, s)] - KL(q(τ|s, y)∣∣π(τ|s))⑼
We can optimize the right hand side, which is also known as the evidence lowerbound (ELBO). The
log likelihood and KL divergence in Eq. 8 are then implicitly optimized. We can also decide to define
the learning objective as a product of probabilities over the T time steps in the reasoning process. In
this case, the objective would be:
Ezt~q[logp(y∣zt, st-ι)]
-KL(q(τ|so, y)∣∣∏(τ∣so))
(10)
To summarize, we learn the parameters of the networks f and {fk} which specify p(y∣τ, s); and
A and B which specify π(τ |S). This is accomplished by maximizing the ELBO in Eq. 10 over all
graph-target value pairs in the training data.
Interpretation of Learning Objective: The learning objective consists in two terms. Likelihood
term: This term provides main objective for the agent and model to maximize. The policy should be
learned to perform accurate reasoning to fit the data and maximize the likelihood of the ground truth
values for y. KL term: The policy we learn in proposal distribution can be used to guide the learnable
prior agent toward good inference procedures. The KL divergence term in the objective function can
be used to achieve this.
3.3	Mixed sampling from sequential distributions
As the whole inference over graphs is a sequential procedure, there is a common issue that will appear
in the above formulation: the drifting problem when facing unfamiliar graph states in some inference
step t. The proposal distribution in the variational inference formulation has access to ground truth
data, which will lead to ”good” graph states in most cases, while the prior agent will probably face
some graph states that will lead to failure predictions and even drift away further. Similar issues
have been found in sequential data generation (Lamb et al. (2016)) or imitation learning (Ross et al.
(2011)). In our model, we adopt a easy fix by mix the sampling from both prior and proposal in the
trajectory level, to have graph neural networks visit different states, and by firstly rollout using prior
agent, then use the proposal agent to complete the rest trajectory. The objective is re-weighted using
importance sampling weights when mixing the trajectories.
4	Experiments
We test our proposed model on two types of modalities of data: complex visual reasoning tasks
and social network classification. Visual data has more information and more complex possible
interactions or variations between nodes in the graph, while social network has larger scale of graphs.
4.1	Visual reasoning
We introduce two visual reasoning tasks: (1) visual cue-based position reasoning and (2) large-scale
image puzzle solving. To solve these visual based reasoning tasks, we require a model to have a
strong ability in handling imperfect observations, performing inference, handling noisy edges, and
flexibly making modifications to graph nodes.
Baseline methods: We compare our proposed model with several popular graph neural network
based variants. These models all more or less have the ability to learn and control the information
flow, and have been demonstrated to have strong performance on many tasks or applications.
5
Under review as a conference paper at ICLR 2020
(a) Illustration of the “Where am I” dataset
and tasks. Each object is extracted from the
original image along with its context. Be-
tween some patches there will be similar pat-
terns appear.
number of objects	25	36
random	4	2.78
GNN	32.92	16.21
GNN-attention	40.26	21.58
RRN	35.10	19.62
NRI	38.74	18.84
PMP (ours)	81.26	46.8
(b) Performance results on ”Where am I”
dataset, measured by per-node position clas-
sification accuracy.
Figure 2:	Our “Where am I” dataset(left) and results compared with baseline methods measured by
per object accuracy(right).
•	Graph Neural Network (Battaglia et al. (2018)). We follow the graph neural network model
described in the survey Battaglia et al. (2018). The graph neural network contains three
update functions: node, edge, global states. The aggregation process we used is mean
pooling of messages.
•	Attention-based Graph Neural Network (VelickoVic et al. (2017); Wang et al. (2018);
Vaswani et al. (2017)). An attention mechanism is used for modulating the information flow
from different messages and can be Viewed as a non-probabilistic single-step Version of our
model. We implement the attention by using sigmoid gates oVer different message functions.
•	Recurrent Relational Network (Battaglia et al. (2018)). We follow the open source code
and implement the recurrent relational network (RRN) model. The RRN model updates the
node states through a Gated Recurrent Unit and adds dense superVision across all timesteps.
•	Neural Relational Inference model (Kipf et al. (2018)). The Neural Relational Inference
model is the first proposed probabilistic model that captures the distribution oVer graph
structures. We follow the same implementation and use four function types on each edge
with entropy as an extra penalty in the objectiVe function.
4.1.1 “Where am I”: VISUAL POSITION REASONING
Task design: We firstly design a synthetic dataset named “Where am I”. The dataset is based on the
Shapes Andreas et al. (2016) dataset, initially proposed in the Visual Question Answering (VQA)
context. The dataset contains 30K images with shape objects randomly dropped on k × k grids. We
assume that each shape object has a 3 × 3 context field of View and ensure that all those shape objects
are connected within the Visible context. The dataset is set up to haVe two grid settings, 9 × 9 and
12 × 12, which contain 25 objects and 36 objects respectiVely. For each image, the position for one
object is known and the model needs to perform inference oVer objects by comparing the context to
infer the correct position of other objects.
Model setup and problem difficulties: We build a graph to solVe this problem. Each node in the
graph represents one object, one of them contains a known position tuple (x, y), and the positions for
the rest obejcts are unknown. The graph is assumed to be fully connected. We use graph networks
with 50 hidden dimension on both node and edge, ELU as actiVation functions. Each model takes 7
and 8 steps of inference for 25 object and 36 object cases respectiVely. The difficulty of this problem
is that for each object, there are 16 ways/configurations to oVerlap with another object. Each position
configuration can contain N candidates. If N is larger than 1, there will be confusion, and models
need to solVe other objects first to proVide more context information. The task in general needs model
to perform iteratiVe modification of nodes content and aVoid false messages.
Experiment results: Table 2b shows the performance of each model measured by the classification
accuracy for each object. Our proposed Policy Message Passing (PMP) model and its Variants achieVe
a large performance boost oVer the baselines, demonstrating that there exists a strong need for this
kind of dynamical reasoning in complex tasks. The models with fixed structure and rigid aggregation
6
Under review as a conference paper at ICLR 2020
Models	Acc(%)				Kendall-tau			
	2x2	3x3	4x4	5x5	2x2	3x3	4x4	5x5
Mena et al. (2018)	1.0	.97	^T9^^	79	1.0	.96	.88	78
PMP	1.0	1.0	.99	.99	1.0	1.0	.99	.99
(b) We compare our model’s performance with state-of-the-art deep
learning based puzzle solving model on Celeba dataset.
(a) Illustration of the image puzzle solving
task. The example image is from visual
genome.
Figure 3:	Image puzzle solving problem(left) and results compared with state-of-the-art method on
Celeba dataset(right).
processes tend to not learn or generalize well. Attention based models slightly alleviate that problem,
but are not able to perform consistent and strategic reasoning over objects.
4.1.2 Image puzzle s olving on benchmarks
Task design and datasets: Next we move on to large-scale benchmark datasets with real images
containing complex visual information. We test our model on the Jigsaw Puzzle solving task for
real images. Given an image with size H × W, we divide the image into d × d non-overlapping
patches. The d2 patches are un-ordered and need to be reassembled into the original image. We use
two datasets to mainly test our model: (1) Visual Genome - The Visual Genome dataset contains
64346 images for training and 43903 images for testing. It is often used in image based scene graph
generation tasks, indicating that there exists very rich interactions and relationships between visual
elements in the image. We test the models on three different puzzle sizes: 3 × 3, 4 × 4, and 6 × 6 (2)
COCO dataset - We use the COCO dataset (2014 version) that contains 82783 images for training
and 40504 images for testing. We set up three tasks, 3 × 3, 4 × 4 and 6 × 6 for evaluation.
Evaluation metric and model implementation: To evaluate the models’ performance, we use per-
patch classification score over the d2 classes and measure the Kendall-tau correlation score between
predicted patch order and the ground-truth order. For all graph models, we use 50 hidden dimensions
on both nodes and edges. Models will perform d + 2 steps of inference. For all baseline methods, we
use 200 dimensions for nodes and messages, while still remain 50 dimensions for our main model.
Models	Accuracy(%)			Kendall-tau		
	3x3	4x4	6x6	3x3	4x4	6x6
random	11.11	6.25	2.78	-	-	-
GNN	93.86	77.37	50.81	94.54	82.54	74.55
GNN-attention	91.29	81.36	68.39	92.70	86.56	79.11
RRN	89.91	78.14	62.52	85.33	84.46	76.63
NRI	87.63	81.93	69.01	89.12	86.67	79.78
PMP	98.31	9796	90.53	99.27	98.67	96.01
Table 1: Performance results on COCO dataset, measured by per-patch classification accuracy and
correlation score Kendall-tau. We use Kendall-tau×100 here for better comparison. Results are
shown across different puzzle sizes.
Experiment results: Tables 1 and 4a summarize the results of all models across varied task settings.
Our proposed models consistently outperform baseline models by a 10% - 20% margin, even when
baseline models have much larger capacity on the graphs. This is a further indication that having a
powerful inference process is crucial to deep graph-structured models.
Analysis on number of inference steps and size of function set: We further examine the impact of
inference steps and number of functions in function set on our models, shown in 4b. We found that
empirically a function set of size 4 is enough for message diversity. For inference step analysis, we
test our PMP model on 6 × 6 puzzles and found with 6 steps the model can already achieve a good
performance. Similar behaviours are found for baseline models too. We only plot our main model in
the figure.
7
Under review as a conference paper at ICLR 2020
Models	Accuracy(%)	Kendall-tau
	3x3	4x4	6x6	3x3	4x4	6x6
random	11.11	6.25	2.78	-	-	-
GNN	82.83	72.46	61.22	85.47	79.94	79.58
GNN-attention	86.87	77.35	71.27	88.75	85.51	83.35
RRN	85.60	77.27	69.23	88.07	83.31	78.50
NRI	87.63	73.51	70.62	89.37	80.06	79.91
PMP	97.92	9674	94.61	98.58	98.07	97.05
(a) Performance results on Visual Genome dataset, measured by per-patch
classification accuracy and correlation score Kendall-tau. Results are
shown across different puzzle sizes.
(b) Analysis of our model on num-
ber of inference steps and number
of functions.
Figure 4:	Performance on Visual Genome(left) and model analysis plots(right).
Comparison with state-of-the-art puzzle solving method: We compared our method with state-
of-the-art deep learning based image puzzle solving on the CelebA dataset. The results are shown
in Table 3b. Our model shows near perfect puzzle solving results on 2 × 2, 3 × 3, 4 × 4 and 5 × 5
settings.
4.2 Social network classification with noisy edges
We further inspect on models’ ability on handling noisy edges on large scale graphs. Current graph
neural network benchmark datasets on social networks, such as Cora (Sen et al. (2008)), heavily
rely on well caliberated edge matrix as a strong prior information for inference. The burden on
aggregation process are less, compare to more general cases where adjacency matrix information are
often noisy or missing. In this experiment, we compare our model’s performance with two state-of-
the-art graph-structured models: (1) Graph Convolutional Networks (GCN) and (2) Graph Attention
Networks (GAT) on a standard benchmark Cora. Instead of using only the well designed adjacency
matrix information, We also generate perturbation to the matrix by adding {%50, %100, %200} * |E|
more noisy edges, |E | is the number of edges in the original graph. For implementation, we use the
official release of the codes on tWo baseline models and default settings. In our proposed model,
We folloW the same hyper-parameters in graph netWorks and uses recurrent netWork agent With 32
hidden dimensions. Results summarized in table 2 shoW that our model is more robust to noisy edges
in performing inference over large scale graphs.
Models	Noisy edges		
	50%	100%	200%
GCN	26.55 ± 1.3	23.53 ± 1.44	22.62 ± 1.84
GAT	58.83 ± 1.35	45.82 ± 2.55	34.53 ± 0.45
PMP	65.37 ± 1.36	61.42 ± 1.31	50.3 ± 1.13
Table 2: The performance of node classification for Cora dataset under varied noisy edge settings.
The experiment folloWs the standard transductive setup in Yang et al. (2016).
5 Conclusion
Reasoning over graphs can be formulated as a learnable process in a Bayesian frameWork. We
described a reasoning process that takes as input a graph and generates a distribution over messages
that could be passed to propagate data over the graph. Both the functional form of the messages
and the parameters that control the distribution over these messages are learned. Learning these
parameters can be achieved via a variational approximation to the marginal distribution over provided
graph label. Future possibilities include adapting our model to use a more general set of functions
Where some of them is not differentiable.
8
Under review as a conference paper at ICLR 2020
References
Jacob Andreas, Marcus Rohrbach, Trevor Darrell, and Dan Klein. Neural module networks. In
Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp. 39-48,
2016.
Peter W Battaglia, Jessica B Hamrick, Victor Bapst, Alvaro Sanchez-Gonzalez, Vinicius Zambaldi,
Mateusz Malinowski, Andrea Tacchetti, David Raposo, Adam Santoro, Ryan Faulkner, et al.
Relational inductive biases, deep learning, and graph networks. arXiv preprint arXiv:1806.01261,
2018.
Michael Defferrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks on
graphs with fast localized spectral filtering. In Advances in Neural Information Processing Systems,
pp. 3844-3852, 2016.
Zhiwei Deng, Arash Vahdat, Hexiang Hu, and Greg Mori. Structure inference machines: Recurrent
neural networks for analyzing relations in group activity recognition. In Computer Vision and
Pattern Recognition (CVPR), 2016.
David K Duvenaud, Dougal Maclaurin, Jorge Iparraguirre, Rafael Bombarell, Timothy HirzeL Alan
Aspuru-Guzik, and Ryan P Adams. Convolutional networks on graphs for learning molecular
fingerprints. In Advances in neural information processing systems, pp. 2224-2232, 2015.
Mikael Henaff, Joan Bruna, and Yann LeCun. Deep convolutional networks on graph-structured data.
arXiv preprint arXiv:1506.05163, 2015.
Thomas Kipf, Ethan Fetaya, Kuan-Chieh Wang, Max Welling, and Richard Zemel. Neural relational
inference for interacting systems. arXiv preprint arXiv:1802.04687, 2018.
Thomas N Kipf and Max Welling. Semi-supervised classification with graph convolutional networks.
arXiv preprint arXiv:1609.02907, 2016.
Philipp Krahenbuhl and Vladlen Koltun. Efficient inference in fully connected crfs with gaussian
edge potentials. In Advances in neural information processing systems, pp. 109-117, 2011.
John Lafferty, Xiaojin Zhu, and Yan Liu. Kernel conditional random fields: representation and clique
selection. In Proceedings of the twenty-first international conference on Machine learning, pp. 64.
ACM, 2004.
Alex M Lamb, Anirudh Goyal Alias Parth Goyal, Ying Zhang, Saizheng Zhang, Aaron C Courville,
and Yoshua Bengio. Professor forcing: A new algorithm for training recurrent networks. In
Advances In Neural Information Processing Systems, pp. 4601-4609, 2016.
Tian Lan, Yang Wang, Weilong Yang, Stephen N Robinovitch, and Greg Mori. Discriminative latent
models for recognizing contextual group activities. IEEE Transactions on Pattern Analysis and
Machine Intelligence, 34(8):1549-1562, 2011.
Yujia Li, Daniel Tarlow, Marc Brockschmidt, and Richard Zemel. Gated graph sequence neural
networks. arXiv preprint arXiv:1511.05493, 2015.
Joseph Marino, Yisong Yue, and Stephan Mandt. Iterative amortized inference. arXiv preprint
arXiv:1807.09356, 2018.
Gonzalo Mena, David Belanger, Scott Linderman, and Jasper Snoek. Learning latent permutations
with gumbel-sinkhorn networks. arXiv preprint arXiv:1802.08665, 2018.
Judea Pearl. Probabilistic reasoning in intelligent systems: networks of plausible inference. Morgan
Kaufmann, 1988.
Stephane Ross, Geoffrey Gordon, and Drew Bagnell. A reduction of imitation learning and structured
prediction to no-regret online learning. In Proceedings of the fourteenth international conference
on artificial intelligence and statistics, pp. 627-635, 2011.
Prithviraj Sen, Galileo Namata, Mustafa Bilgic, Lise Getoor, Brian Galligher, and Tina Eliassi-Rad.
Collective classification in network data. AI magazine, 29(3):93-93, 2008.
9
Under review as a conference paper at ICLR 2020
Ilya Sutskever, Oriol Vinyals, and Quoc V Le. Sequence to sequence learning with neural networks.
In Advances in neural information processing Systems, pp. 3104-3112, 2014.
Charles Sutton, Andrew McCallum, et al. An introduction to conditional random fields. Foundations
and TrendsR in Machine Learning, 4(4):267-373, 2012.
Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,
L Ukasz Kaiser, and Illia Polosukhin. Attention is all you need. In I. Guyon, U. V. Luxburg,
S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett (eds.), Advances in Neural
Information Processing Systems 30, pp. 5998-6008. Curran Associates, Inc., 2017. URL http:
//papers.nips.cc/paper/7181-attention-is-all-you-need.pdf.
Petar Velickovic, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro Lio, and Yoshua
Bengio. Graph attention networks. arXiv preprint arXiv:1710.10903, 2017.
Martin J. Wainwright, Tommi S. Jaakkola, and Alan S. Willsky. Tree-based reparameterization frame-
work for analysis of sum-product and related algorithms. IEEE Transactions on information theory,
49(5):1120-1146, 2003.
Xiaolong Wang, Ross Girshick, Abhinav Gupta, and Kaiming He. Non-local neural networks. In
Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp. 7794-7803,
2018.
Zhilin Yang, William W Cohen, and Ruslan Salakhutdinov. Revisiting semi-supervised learning with
graph embeddings. arXiv preprint arXiv:1603.08861, 2016.
Jonathan S Yedidia, William T Freeman, and Yair Weiss. Generalized belief propagation. In Advances
in neural information processing systems, pp. 689-695, 2001.
10