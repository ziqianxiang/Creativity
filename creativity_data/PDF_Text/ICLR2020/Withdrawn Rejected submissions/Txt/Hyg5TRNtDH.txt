Under review as a conference paper at ICLR 2020
Unsupervised Temperature Scaling:
Robust Post-processing Calibration for Do-
main Shift
Anonymous authors
Paper under double-blind review
Ab stract
The uncertainty estimation is critical in real-world decision making applications,
especially when distributional shift between the training and test data are preva-
lent. Many calibration methods in the literature have been proposed to improve the
predictive uncertainty of DNNs which are generally not well-calibrated. However,
none of them is specifically designed to work properly under domain shift condi-
tion. In this paper, we propose Unsupervised Temperature Scaling (UTS) as a ro-
bust calibration method to domain shift. It exploits unlabeled test samples instead
of the training one to adjust the uncertainty prediction of deep models towards the
test distribution. UTS utilizes a novel loss function, weighted NLL, which allows
unsupervised calibration. We evaluate UTS on a wide range of model-datasets to
show the possibility of calibration without labels and demonstrate the robustness
of UTS compared to other methods (e.g., TS, MC-dropout, SVI, ensembles) in
shifted domains.
1	Introduction
The predictive distributions provided by Deep Neural Networks (DNNs) have been increasingly used
for decision-support systems, for applications ranging from medical diagnoses assistance (Esteva
et al., 2017) to self-driving cars (Bojarski et al., 2016). In DNNs, the predictive distributions usually
corresponds to the output of a softmax layer, which is typically interpreted as the confidence over the
different classes. The i.i.d hypothesis made in learning usually assumes that the data distributions
over the classes are the same at learning and inference time. However, in real-world applications,
the distribution of data at inference time (i.e., the test data) may shift and actually be different from
the original training distribution - corresponding to distribution shift in representation of data which
we refer that as domain shift. For instance, in image classification problem, domain shift happens
when the test images are different in illumination, view point, resolution, background or intensity
noise from the training set. However, they are the same classification problem with the same objects
occurance rate. Arguably, building DNNs that are robust to the domain shift problem is necessary for
its safe deployment in decision-making systems. Dealing with this, predictive uncertainty is the key
to obtain a meaningful estimation for practitioners to know when prediction accuracy is degrading
and allows a system to abstain from making decisions due to low confidence.
The predicted uncertainty in DNNs usually are not calibrated with a tendency to be overconfident.
Many probabilistic and post-processing calibration methods have been proposed under i.i.d assump-
tions to adjust the certainty of DNNs. In recent studies (Ovadia et al., 2019; Maddox et al., 2019),
uncertainty under domain shift condition gets more attention and the common calibration methods
have been assessed regarding to the domain shift, although they are not designed to be robust under
such condition. In this paper, for the first time, we specifically focused on calibration for the domain
shift in image classification. We show post-processing calibration approaches that use Negative Log
Likelihood (NLL) as the calibration loss like Temperature Scaling (TS) (Guo et al., 2017) may be-
come robust to the domain shift problem if they calibrate the model using the test samples. However,
they need labels of the samples to apply calibration. Labeling the test samples even for the small set
is not always an easy task and need human experts effort which can be accompanied with the label-
ing noise and huge time burden. Neuron cells classification taken by electron microscope (Ostroff &
Zeng, 2015), pathology images (Khosravi et al., 2018) and skin disease classification (Kolkur et al.,
1
Under review as a conference paper at ICLR 2020
2018) are three examples of applications that have expensive labeling procedure with high risk of
labeling noise that need senior experts to label them.
In this work, we propose a new approach called Unsupervised Temperature Scaling (UTS) with
similar framework of TS and using unlabeled test samples for calibrating the pre-trained model.
This novel idea brings the chance of robust calibration to the domain shift. Possibility of using
the test samples to calibrate, makes UTS a proper solution not only for domain shift but also for
many practical calibration problems like calibrating off-the-shelf-models. More specifically, UTS is
proposed with following contributions and foreseen impacts:
•	Unsupervised post-processing calibration: UTS brings a new look to NLL loss function
which is used as the calibration loss in several post-processing methods. UTS approxi-
mates a weight function to estimate the per class distribution of data to compute NLL. This
new way of computing NLL makes it independent of the labels. In addition, computing
weighted NLL has the same order of time and memory complexity as the classic NLL,
without any additional hyper-parameter to fine-tune.
•	Robustness to the domain shift: UTS is a robust calibration solution to shifted domains.
It adjusts the the model uncertainty based on the test and not the training domain. Therefore
by change of distribution in the test domain, UTS can follow the distribution shift easily.
•	Calibration of off-the-shelf models: The pre-trained models for classification tasks are
usually only trained to achieve higher accuracy rate without paying attention to the predic-
tive uncertainty. In fact, many of them are released without the training data that removes
the possibility of retraining them to calibrate, like available Pytorch pre-trained models.
UTS brings a chance to use these models for decision-making applications by calibrating
them on a test data without need of labeling them.
2	Related Work
Calibration of predictive uncertainty for DNNs are widely investigated in recent literature. Calibra-
tion methods can be categorized in two groups: probabilistic or post-processing approaches.
Probabilistic approaches refer to methods that use Bayesian theory (Bernardo & Smith, 2009) for
estimating the conditional distribution of data. As the exact Bayesian inference is not practical, a
variety of approximation are proposed such as Laplace approximation (MacKay, 1992; Ritter et al.,
2018b;a; Kirkpatrick et al., 2017), Variational Bayesian methods (Molchanov et al., 2017; Louizos
& Welling, 2017; Blundell et al., 2015; Louizos & Welling, 2016; Wen et al., 2018) and Monte
Carlo Markov Chains (MCMC) (Neal, 2012; Balan et al., 2015; Chen et al., 2014) to make Bayesian
deep networks tractable. MC-dropout (Gal & Ghahramani, 2016) replaces complicated sampling
with simple dropout in training and test phases, which has been shown to approximate Variational
Bayesian inference. Ensemble of DNNs (Lakshminarayanan et al. (2017)) is another straightforward
probabilistic approach that can achieve better calibrated results than MC-dropout. This approach is
appropriate for parallel computing, with multiple DNNs running at the same time. However, keeping
the models in the memory during the test time brings high memory complexity.
Post-processing approaches are much less complex, albeit less accurate compared to probabilistic
calibration. In post-processing approaches, the main idea is to decrease the miscalibration of the
network by minimizing a calibration loss (Gneiting & Raftery, 2007) such as NLL. In order to train
the neural network, NLL is used to simultaneously increase accuracy and decrease miscalibration.
However, it easily gets overfitted to confidence and makes the network overconfident (Guo et al.,
2017). Post-processing approaches like TS, Platt-Scaling (Platt et al., 1999), Histogram Binning
(Zadrozny & Elkan, 2001), Isotonic Regression (Zadrozny & Elkan, 2002), and Bayesian Binning
into Quantiles (Naeini et al., 2015) fine-tunes the softmax layer by keeping the DNNs’ weights
unchanged. They do not need to retrain the deep network from scratch and they only need to find the
best parameter of softmax softening function by minimizing a calibration loss (like NLL) on a small
validation set. Temperature Scaling is the state-of-the-art among the post-processing approaches
which uses NLL as the loss function. It only uses one parameter T to rescale the logit layer and
soften the softmax output. Therefore with keeping the accuracy unchanged it can calibrate the
model with the minimum time and memory complexity. These features leads us to focus on TS and
try to propose a robust post-processing solution for domain shift based on TS framework.
2
Under review as a conference paper at ICLR 2020
Robustness to the domain shift: Previously, the results of calibrated model were also reported for
different domains such as Out-Of-Distribution (OOD) and Adversaries (Lakshminarayanan et al.,
2017; Ritter et al., 2018b) to show the model is uncertain about what it does not learn before.
Recently, people get into importance of domain shift problem in calibration and assess how the
calibrated methods would behave under domain shift condition (Ovadia et al., 2019; Maddox et al.,
2019). Domain shift concept is different from adversaries and OOD. In the case of OOD, training
and test domains are completely different in task distributions and in the case of adversaries the
distribution shifts between the training and test is made with the goal of fooling the classifier. In
domain shift, the training and test domains are distributionally different but related. The relation
between two domains can be used as the prior knowledge to help improving the accuracy or having
better calibration. In the literature of calibration, to the best of our knowledge, there is no work that
specifically designed to calibrate the model considering domain shift assumptions. In this paper we
will focus on Covariate shift as the most famous domain shift setting in image classification and
propose UTS as a robust calibration method accordingly.
3	Preliminaries
In this section, we define the domain shift and calibration setup to clarify UTS objectives. Then,
we explain why NLL can be used as a calibration loss and when optimizing NLL will lead to a
calibrated model toward the domain shift settings. Finally, we bring a deep analysis of the post-
processing method TS which uses NLL as a calibration loss. We show TS can be a robust calibration
solution to the domain shift if it uses labeled samples from the test domain to apply calibration. We
discuss TS sensitivity to the labels of samples as the preliminaries to propose UTS method in the
next section.
3.1	Problem Setup
Considering the domain shift assumptions, the goal of calibration in this work is to improve un-
certainty estimation of a pre-trained model for different shifted domains. In this setting, qs (x, y)
is considered as the ground-truth distribution of the source domain and qt(x, y) is considered as
the ground-truth distribution of the target domain where X 〜 X ∈ Rd andy ∈ {1,2,...,K}.
In the setting of domain shift, the source and target domains have different but related dis-
tributions. The relation between the domains is defined by Covariate Shift assumption (Adel &
Wong (2015)) which is: the data distributions qs(X, y) 6= qt(X, y) where the conditional distribution
qs (y|X) = qt(y|X), and the task and marginal distributions qs(y) = qt(y) and qs(X) 6= qt(X), re-
SPectively. Let d(x) = {Sy (x), y} denotes the pre-trained model in which y is the class prediction
and Sy (x) is its associated confidence. In domain shift setting, for deep neural networks, model d(∙)
is a DNN trained on the source domain and would be tested on the target domain. In this setting,
Sy(X) is the output of the softmax layer which is calibrated when Sy(X) = qt(y|X).
Miscalibration of DNNs can be explained in different ways. Temperature Scaling models the miscal-
ibration as the rescaled logit layers by scaling factor T*. TS objective is to find T* value to rescale
the logit layer back and makes the model calibrated. More specifically, the calibrated output of TS
is defined as Sy (x; T *) = exp( fy^x))/PK=I exp( jχ)) where f (x) = [fι(x), f2(x),..., fk (x)]>
is the logit layer of model d(X). In this paper, considering the same definition of miscalibration as
TS, we propose UTS under domain shift condition. UTS objective is to find the scaling factor T*
that Sy (x; T*) = qt(y∣x), given that We have access to the source pre-trained model d(∙), unlabeled
calibration set C = {xi}=〜qt(x) and the known task distribution qs(y).
3.2	Robustness to Domain Shift with NLL Loss Function
To calibrate a model, first we need to evaluate the quality of predicted uncertainty of the model.
Evaluating the quality of predictive uncertainty is challenging, as the ground-truth of the uncertainty
estimate is usually not available. Accordingly, scoring rules are defined to measure the quality of
predictive uncertainty (Gneiting & Raftery (2007)). Scoring rules are numerical scores that rank the
distribution prediction pθ (y|x) by giving lower score to better prediction of true distribution q(y∣x).
Let a scoring rule be a function R(pθ, (x, y)) that evaluates the quality of the predictive distribution
Pθ(y|x) based on the samples (x,y)〜q(x,y) where q(x,y) is the true distribution of the data.
3
Under review as a conference paper at ICLR 2020
The expected scoring rule is defined by R(pθ, q) = q(x, y)R(pθ, (x, y))dydx. A proper scoring
rule function is one where R(pθ, q) ≤ R(q, q) with equality if and only if pθ(y|x) = q(y∣x) for all
samples.
Negative Log Likelihood (NLL) is a proper scoring rule based on Gibbs inequality i.e., R(pθ, q) =
Eq(χ)q(y∣x) logPθ(y|x) ≤ Eq(x)q(y∣x) log q(y∣x). Therefore minimizing NLL w.r.t θ on the sam-
ples generated from q(x, y) distribution, leads to pθ(y|x) → q(y∣x). Under the domain shift as-
sumption, as the training and test domains have different distributions, the final goal of calibration
is pθ (y|x) = qt(y∣x). In the case of using NLL as the loss function, if we minimize NLL on the
samples that are generated from the test domain, we will have pθ(y|x) → qt(y∣x) and makes the
method robust to the domain shift. One of the post-processing methods that uses NLL as the loss
function is TS. Therefore, TS has the ability to get robust to the domain shift.
3.3	Temperature Scaling Analysis
TS (Guo et al. (2017)) is the state-of-the-art post-processing approach which rescales the logit layer
of a deep model by parameter T that is called temperature. TS is used to soften the output of the
softmax layer and makes it more calibrated. The best value of T will be obtained by minimizing
NLL loss function (explained in Sec.(3.2), why minimizing NLL leads to more calibrated model)
respecting to T conditioned by T > 0 on the calibration set as defined in Eq. (1):
τ*
TTS
NLL
z----W------^-----------
arg min (-X log(Syi(Xi； T))
T	i=1
s.t : T > 0,
{xi,yi}L=ι ∈ C 〜q(x,y),
(1)
{
where Syi(Xi; T) = exp( fyi(χi))/PK=I exp(fjT)), is the softed version of softmax by applying
parameter T on the logit layer fj (x). TS has the minimum time and memory complexity with
order of O(1) among calibration approaches as it only optimizes one parameter T on small labeled
calibration set. Having only one parameter helps TS not only tobe efficient and practical but also not
to get overfitted to NLL loss function when it is optimized on small calibration set. TS previously
is applied for calibration (Guo et al. (2017)), distilling the knowledge (Hinton et al. (2015)) and
enhancing the output of DNNs for better discrimination between the in and out distribution samples
(Liang et al. (2017)). TS models the uncalibration as the rescaling factor in the logit layer. By
computing the derivative of NLL respecting to T in Eq. (1), and find the minimum, we will have:
L	LK
X fyi (Xi) = XX fk Sk(X TTS).	⑵
i=1	i=1 k=1
It shows regarding to the true label of the samples, TS selects the T value which maximizes the
Sk (Xi, T) for k = yi and minimize Sk (Xi, T) for all the other k 6= yi. Therefore for correctly
classified samples that yi = arg maxy Sy(Xi), T approaches 0 to increase the confidence of that
class toward 1 and for the misclassified samples, T goes toward ∞ to decrease the confidence of
predicted label. The balance between the correctly classified and misclassified samples brings back
the optimal value of T .
TS uses NLL as the loss function then by selecting the calibration set from the test domain instead
of the training one, we can make TS robust to the domain shift problem. We refer to this approach
as TS-Target. TS is highly dependent on the labels of the samples. however, Labeling the test
samples is a challenging task. When the calibration set contains data with labeling noise or unlabeled
samples, TS loses the balance to find the optimal TTS and cannot calibrate the network successfully.
Later, in Sec. (5.3), we will show even a small portion of the noise has big distortion in TS results.
This brings the idea of Unsupervised Temperature Scaling which makes TS independent of labeled
data and robust to the domain shift.
4	Unsupervised Temperature S caling
Considering the assumptions in Sec. (3.1), its main objective is to find TUTS for the unlabeled
calibration set. UTS the same as TS uses NLL as the proper scoring rule to minimize the calibration
4
Under review as a conference paper at ICLR 2020
Class y = 1 -	Class y = 2 A Class y = 3 M
Figure 1: A color view of the weight function in a three class classification problem. For the samples which
are classified as class y = k and for the samples that y = k but located near to the decision boundary, the
*
Wk (x, w ) = 1 which is shown with darker hue. For the samples that y = k and are far from the decision
boundary Wk (x, w*) → 0, which is with lighter hue. The decision boundary is illustrated by the black line.
gap and finds the optimal T value. The first step of using NLL in UTS is to make NLL independent
of labeled data. Considering NLL loss function, we can rewrite it with focus on per class distribution,
formalized as:
K
NLL = - X X	N (Syi (Xi； T))，	(3)
k=1 (xi,yi)∈q(x,y=k)
In Eq. (3), NLL is the summation of K different sample sets, generated from class distribution
q(x, y = k) where k ∈ {1, 2, . . . , K}. When the labels of the samples are available, they can be
used as the guide to select the samples set for each class distribution. But in the absence of the
labels, the main question is how to select the samples generated from qt (x, y = k) and calculate
NLL. To come along with this challenge, instead of selecting the samples by labels, UTS applies
weights on the samples. The weight function Wk (x; w*) represents the probability that sample X
is drawn from q(x, y = k). Later, in Sec. (4.1) we will give specific details of the weight function
Wk(X; w*) and how to approximate it. By applying weights on the samples, the UTS loss function
is defined as the Weighted NLL (WNLL) which is:
WNLL
Z	—人—	—{
TU*TS = arg min -XKXL
Wk(Xi; W*) log (Sk(Xi; T)))	s.t : T > 0, {xi}L=ι ∈ C 〜q(x)
T	k=1 i=1
(4)
4.1	Weight Function Wk(∙; ∙)
We start the discussion about the weight function by introducing a fact from the Bayes rule (Jin et al.
(2017)):
q My=k )=q (y=k|x) q (χ,y=k)	⑸
When a sample has a true label of y = k it is drawn from distribution q(X, y = k). However, Eq.(5)
shows that even samples with true label of y 6= k can be used as the samples drawn from the dis-
tribution q(X, y = k) by applying weight of q(y = k|X)/q(y 6= k|X). Therefore, we can simply use
the weight of 1 for the samples with true label of y = k and the weight of q(y = k|X)/q(y 6= k|X)
for the samples y 6= k to change all the samples in the calibration set to the samples drawn from
q(X, y = k). Therefore, we define the weight function as Eq.(6):
{
Wk (Xi) =
1,
q(y=k|xi)
ι-q(y=k∣χi)
if Xi 〜q(x, y = k)
otherwise.
(6)
5
Under review as a conference paper at ICLR 2020
Algorithm 1: Unsupervised Temperature Scaling
Require: qs(y): task distribution
Require: d(∙): the pre-trained model
Require: C 〜qt(x): unlabeled calibration set derived from test domain
1:	Find the optimal w* = arg mi□w(PK=ι PL=i Wk X； w)-q(y = k))2,
2:	Find the optimal TUTS = arg minT (- PK=I PL=I Wfcg; w*) log (Sk (x，; T)))
3:	Calibrate softmax output of model d(∙) by: Sy (x; TU TS) = exp( T*(x))/ PK=I exp( Tj(X)). * 1 * * * 5
To compute Wk(∙) for the samples, We need the ground-truth distribution q(x, y = k) that in UTS
setting is not available. However we can approximate it empirically referring to UTS assumptions
(Sec. (3.1)).
Proposition 1: Let d(∙) be a model which gets miscalibrated with rescaled logit layer by factor w*.
Then, with known qt(y), the empirical approximation of Wk (∙) is equal Wk (∙; ∙) which is defined as:
ʌ *	11,	if yi = k
k xi,w — 11∕exp(W* log(Sy=k(xi; w1*)-1 — 1)), otherwise.
(7)
where w* is:
w* = arg min XK XL
Wk(xi; w) - qt(y = k)) , {xi}i=ι ∈ C 〜qt(x)	⑻
k=1 i=1
Proposition 1 valid for the domain shift setting with Covariate shift assumption and also for the case
that there is no distribution shift between the training and test datasets. The validity of Proposition
1 for both settings are provided in Appendix A. Fig. 1 illustrates a schematic view of the weight
function Wk(∙; ∙) in the feature space. The color hue is correlated with the weight values. For the
samples that are classified as y = k and for the samples with y = k located near to the decision
boundary, the weight is equal to 1. The weight would decrease as the samples fall further from the
decision boundary which shows they are less probable to be drawn from distribution q(x, y = k).
Time Complexity of UTS: Computing Wk (∙; ∙) is a one parameter optimization which has the time
complexity of O(1). After approximating the weight function Wk(•;•), UTS minimizes WNLL
(Eq.(4)) with the same time complexity to find the optimal TU*TS which leads to have UTS with the
total time complexity of O(1). Algorithm 1 summarizes UTS.
Validity of UTS in Practice: UTS is valid when there is no domain shift or when the there is Co-
variate Shift between domains. When the test and training datasets are different in representation
but keeps the same proportions of each class occurrence, it is categorized as Covariate shift assump-
tion. In many applications like medical image classifications, the probability of happening a class
of object is staying the same during the training and test phases which means qs (y) = qt (y) but
the illumination, capturing noise, resolution, and image size and viewpoint can vary between two
domains which means qs(x) 6= qt(x). Therefore, in classification problems with Covariate Shift
assumption or without any shift, UTS only needs to calculate empirically the number of occurrence
of each class to the total number of samples in the training set and use it as qt (y) to calibrate the
model.
5 Experiments
We conduct the experiments to analyze the behavior of UTS in comparison to the other methods for
two different calibration scenarios. First, we compare UTS with several post processing methods
that use NLL as the loss function in the experiment with the same training and test domain
distributions. This experiment is designed to be a proof of concept to show that weighted NLL
of UTS can indeed calibrate the model without accessing the labels. Second, in order to show the
success of UTS in calibrating the model under domain shift condition, we compare UTS, TS and
6
Under review as a conference paper at ICLR 2020
Table 1: The results of NLLJ for UTS and other post-processing approaches With the same training and test
domains. In all cases UTS can calibrate the model without labeled samples, however it does not achieve the
best results. This experiment shoWs UTS can calibrate off-the-shelf-models With only test samples. The mean
are reported in 20 independent runs.
Dataset	Model	Uncalibrated	TS	UTS	Vector Scaling	Matrix Scaling
Birds	ResNet50	0.9383	0.9287	0.9313	0.9355	7.1423
MNIST	Lenet-5	0.1044	0.0243	0.0429	0.0988	0.1187
SVHN	ResNet110	0.2107	0.1534	0.1566	0.1936	0.2070
SVHN	DenseNet100	0.1803	0.1608	0.1735	0.1687	0.1754
CIFAR10	DenseNet40	0.2895	0.2221	0.2848	0.2912	0.2883
CIFAR10	DenseNet100	0.1973	0.1559	0.1635	0.2006	0.1965
CIFAR10	ResNet110	0.3134	0.2069	0.2341	0.2907	0.3103
CIFAR10	VGG16	0.2608	0.2036	0.2099	0.2503	0.2573
CIFAR100	DenseNet40	1.0964	1.0064	1.0217	1.2876	1.4914
CIFAR100	DenseNet100	1.1285	0.8751	0.8889	1.2470	1.2761
CIFAR100	ResNet110	1.2442	1.0466	1.0636	1.3869	1.5358
CIFAR100	WideResNet40-4	0.8751	0.8192	0.8439	0.8757	0.8609
3 more probabilistic approaches for the training and test domains with different distributions.
We also study the results of TS-Target that is a TS Which selects the calibration set from the target
(test) domain. TS-Target has the most accurate uncertainty prediction among all other baselines for
the shifted domain distributions. HoWever, We Will shoW in the third section of Experiments part, it
suffers from the labeling noise Which justifies our try to make TS unsupervised.
5.1	Calibration with the Same Training and Test Domains
Here We consider the training and the test domains have the same distribution. Our goal is to shoW
UTS can calibrate the models Without labels in the case of no domain shift.
Experiment Setup We compare UTS With several post-processing baselines Which are Temperature
Scaling (TS) (Guo et al. (2017)) and Matrix and Vector Scaling (Platt et al. (1999)) on a Wide range
of different state-of-the-art deep convolutional netWorks With variations in depth Which are ResNet
(He et al. (2016)), WideResNet (Zagoruyko & Komodakis (2016)), DenseNet (Iandola et al. (2014)),
LeNet (LeCun et al. (1998a)), and VGG (Simonyan & Zisserman (2014)). We test the methods on
different datasets such as CIFAR-10 and CIFAR-100 (Krizhevsky & Hinton (2009)), SVHN (Netzer
et al. (2011)), MNIST (LeCun et al. (1998b)), and Calthec-UCSD Birds (Wah et al. (2011)). We
use all the data pre-processing, training procedures and hyper-parameters tuning for each dataset as
described in each mentioned reference. To setup the calibration set, We randomly select 20% of the
test dataset. Then, We consider the rest to be evaluated as a test set. We repeat each experiment
20 times independently and report the mean of NLL as a calibration metric. More explanation of
experiment setup and the baselines, datasets and calibration metrics are provided in Appendix B.
Results In Table 1, the calibration results based on NLL are compared betWeen TS and UTS, Which
have only one parameter for fine-tuning the softmax output layer, and Matrix and Vector scaling,
Which apply a linear function on logit layers. In all cases, TS calibrates the netWork better than all
the other methods. Although the results of UTS are not better than TS, UTS shoWs improvement in
calibration for all dataset-models. It means the Weighted NLL as the approximation of NLL With
unlabeled samples can Work properly to calibrate the model even though it is not as accurate as the
NLL With access to labels. Although Matrix and Vector Scaling can define more complex functions
to soften the softmax layer, they suffer from over-fitting W.r.t the validation set in confidence. We
also provide the complete results With mean and standard deviation for accuracy as Well as other
standard calibration metrics (NLL, ECE and Brier Score) in Appendix C.1. The explanation about
the ECE and Brier are given in Appendix B.3.
5.2	Calibration Under Domain Shift Setting
In this section, We divide the experiments into tWo parts. First, We compare UTS to the uncalibrated
model (UNC), TS and TS-Target on different domain shift scenarios. The goal of this experiment is
to compare the gap of calibration betWeen UTS and TS-Target that can be considered as the ground-
7
Under review as a conference paper at ICLR 2020
MNIST Rotation
MNIST -
Figure 2: Results show accuracy and Brier Score] in different degree of shifting for MNIST and CIFAR10
datasets. Comparing TS and TS-Target results shows TS-Target is more robust to domain shift than TS. UTS
with small gap is following TS-Target that is the labeled version of UTS and can be considered as the ground-
truth for it. The pre-trained models are trained on MNIST and CIFAR10 datasets and tested on different degree
of shifted MNIST and CIFAR10 datasets to model domain shift.
CIFAR10 - Gaussian Noise
• UNC	. 11-dropout	⅜ svi	. ensemble	XTS	φ TS-Target	A UTS
Figure 3: Comparison between different post-processing and probabilistic approaches under domain shift. The
results are reported for Brier Score] vs Accuracy. TS-Target has the most calibrated output comparing to the
other probabilistic approaches. UTS after TS-Target achieves the best results which shows comparing to the
other probabilistic approaches, it is robust to the domain shift. The models are trained on MNIST and CIFAR10
later during the test different degrees of shifts applied on them to make the domain shift
truth for UTS when the labels are available. Later, we also evaluate the robustness of UTS, which
was specifically designed to domain shift, and several probabilistic approaches, which only consider
the case of calibration for the same distribution setting. The goal of the experiment is to show that
UTS can be indeed robust for different shifting domain scenarios.
Experiment Setup We follow the same experimental setup as Sec (5.1) but with different domain
shift assumptions. We use the benchmark proposed specifically for domain shift problem in (Ovadia
et al. (2019)). They model the distribution shift by applying different operations like rotation, trans-
lation (rolling), and with different severity levels of intensity corruptions proposed in (Hendrycks
& Dietterich (2019)). In the first part of this section, we compare the result of the UTS to uncal-
ibrated, TS and TS-Target on MNIST and CIFAR10 datasets applying rotation, pixel translation
and Gaussian noise to the test domain. In the second part, we add more probabilistic baselines
such as LL-Dropout(Gal & Ghahramani (2016)), SVI (Blundell et al. (2015)) and Ensemble (Lak-
shminarayanan et al. (2017)) with more variation of the domain shifts in the sense of corruption of
intensities. Specific details of baselines and experiment can be found in Appendix B.1
Results As we can see in Fig. 2, the accuracy of the model degrades by the effect of domain shift.
TS family approaches does not change the accuracy during the calibration therefore, all the methods
have the same accuracy as the uncalibrated one. TS-Target has the same setting as TS with the
difference that it uses the labeled calibration set from the target domain. Then, in ideal situation,
UTS uncertainty prediction would reach the TS-Target performance. We can see that UTS is working
better than uncalibrated model (UNC) and TS which uses the source data for calibration under the
domain shift condition. The gap between UTS and TS-Target is interestingly small in the sense of
Brier Score. More results for other domain shifts are provided in Appendix C.2. We also provide
the analysis of UTS sensitivity to number of calibration samples in compared to TS and TS-Target
in Appendix C.4 which shows UTS obtains stable results in decreasing the number of samples from
20% to 2.5% of test detest size.
8
Under review as a conference paper at ICLR 2020
CIFAR10 - ResNet100	CIFAR100 - DenseNet100	MNIST - Lenet5	SVHN - ResNet110
Figure 4: Sensitivity of TS approach to the labeling noise. Even with small percentage of noise in the labels of
samples TS cannot calibrate the model. UTS is completely robust to the labeling noise as it is an unsupervised
approach. Shaded regions represent std over 20 runs.
In Fig. 3 we compare probabilistic approaches to UTS, uncalibrated model (UNC), TS and TS-
Target. As all the calibration metrics are dependent on the accuracy of the models, controlling the
accuracy to have fair comparison between the methods is important. Otherwise, the better calibration
can be as the result of having better accuracy and not the calibration itself. Accordingly, we apply the
shifts to the datasets and check the accuracy of the UTS with other approaches, and select the domain
shift settings that UTS accuracy is near to the others. As we can see for different combination of
model and datasets, UTS can achieve better results than any other probabilistic approaches and has
a small gap with TS-Target which achieves the best results. It shows that using the test samples to
fine-tune the calibration toward test distribution can help the model to be robust to the domain shift
problem. As mentioned before, labeling the test samples is not a trivial task, therefore, using directly
TS-Target might not be possible in many cases which justifies the importance of an unsupervised
approaches like UTS. In the next section, we show that for a weakly supervision of the test samples,
TS-Target cannot be successful in calibration and it needs exact labeling of the test domain samples
that might be impractical in many cases.
5.3	TS Sensitivity to Labeling Noise
When the labeled samples are available for calibration, TS shows the best results with and without
domain shifts. In this section, we will investigate the sensitivity of TS with labeling noise. We apply
different rates of random altering the labels only for the calibration set and evaluate the calibration
success of TS, UTS and uncalibrated methods accordingly. As we can see in Fig. 4, TS is extremely
sensitive to the noise of labeling. Therefore, in order to have a successful calibration for TS in
shifted domains, the exact labeling of test samples is essential which might be not feasible for many
applications. UTS is robust to the labeling noise as it is an unsupervised calibration method and it
can remove the challenge of labeling the test samples, completely. More results for more datasets-
models are provided in Appendix C.3.
6 Discussion and Future Work
In this paper, we propose UTS as a robust unsupervised post-processing method to the domain shift
calibration challenge. UTS is a member of TS family approaches which have low time and memory
complexity, and can calibrate with few number of samples while preserving the accuracy intact.
UTS utilizes a new calibration loss function, weighted NLL which is independent of the labels. The
computational complexity of weighted NLL is in the same order of NLL which makes UTS a fast
and practical calibration solution. Since UTS uses the test samples to adjust the uncertainty, we
show it is robust to domain shift and can make off-the-shelf models calibrated when their training
samples are not available anymore.
Recent studies (Maddox et al., 2019; Kumar et al., 2018) mentioned that using TS with probabilistic
approaches can even improve the uncertainty prediction of already calibrated models. Therefore,
we believe this work can be extended in the direction of combining UTS with such approaches in
order to achieve more robust domain shift solutions. We also consider another direction of this work
towards exploring UTS for more variant domain shift assumptions. In this paper, we study UTS
only for Covariate Shift assumption, however, it can be extended to other shifting scenarios such as
OOD and adversaries, in future.
9
Under review as a conference paper at ICLR 2020
References
Tameem Adel and Alexander Wong. A probabilistic covariate shift assumption for domain adapta-
tion. In Twenty-Ninth AAAI Conference on Artificial Intelligence, 2015.
Anoop Korattikara Balan, Vivek Rathod, Kevin P Murphy, and Max Welling. Bayesian dark knowl-
edge. In Advances in Neural Information Processing Systems,pp. 3438-3446, 2015.
Jose M Bernardo and Adrian FM Smith. Bayesian theory, volume 405. John Wiley & Sons, 2009.
Charles Blundell, Julien Cornebise, Koray Kavukcuoglu, and Daan Wierstra. Weight uncertainty in
neural networks. arXiv preprint arXiv:1505.05424, 2015.
Mariusz Bojarski, Davide Del Testa, Daniel Dworakowski, Bernhard Firner, Beat Flepp, Prasoon
Goyal, Lawrence D Jackel, Mathew Monfort, Urs Muller, Jiakai Zhang, et al. End to end learning
for self-driving cars. arXiv preprint arXiv:1604.07316, 2016.
Glenn W Brier. Verification of forecasts expressed in terms of probability. Monthey Weather Review,
78(1):1-3, 1950.
Tianqi Chen, Emily Fox, and Carlos Guestrin. Stochastic gradient hamiltonian monte carlo. In
International Conference on Machine Learning, pp. 1683-1691, 2014.
Andre Esteva, Brett Kuprel, Roberto A Novoa, Justin Ko, Susan M Swetter, Helen M Blau, and
Sebastian Thrun. Dermatologist-level classification of skin cancer with deep neural networks.
Nature, 542(7639):115, 2017.
Yarin Gal and Zoubin Ghahramani. Dropout as a bayesian approximation: Representing model
uncertainty in deep learning. In international conference on machine learning, pp. 1050-1059,
2016.
Tilmann Gneiting and Adrian E Raftery. Strictly proper scoring rules, prediction, and estimation.
Journal of the American Statistical Association, 102(477):359-378, 2007.
Chuan Guo, Geoff Pleiss, Yu Sun, and Kilian Q Weinberger. On calibration of modern neural
networks. arXiv preprint arXiv:1706.04599, 2017.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-
nition. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp.
770-778, 2016.
Dan Hendrycks and Thomas Dietterich. Benchmarking neural network robustness to common cor-
ruptions and perturbations. arXiv preprint arXiv:1903.12261, 2019.
Geoffrey Hinton, Oriol Vinyals, and Jeff Dean. Distilling the knowledge in a neural network. arXiv
preprint arXiv:1503.02531, 2015.
Forrest Iandola, Matt Moskewicz, Sergey Karayev, Ross Girshick, Trevor Darrell, and Kurt Keutzer.
Densenet: Implementing efficient convnet descriptor pyramids. arXiv preprint arXiv:1404.1869,
2014.
Long Jin, Justin Lazarow, and Zhuowen Tu. Introspective classification with convolutional nets. In
Advances in Neural Information Processing Systems, pp. 823-833, 2017.
Pegah Khosravi, Ehsan Kazemi, Marcin Imielinski, Olivier Elemento, and Iman Hajirasouliha. Deep
convolutional neural networks enable discrimination of heterogeneous digital pathology images.
EBioMedicine, 27:317-328, 2018.
James Kirkpatrick, Razvan Pascanu, Neil Rabinowitz, Joel Veness, Guillaume Desjardins, Andrei A
Rusu, Kieran Milan, John Quan, Tiago Ramalho, Agnieszka Grabska-Barwinska, et al. Overcom-
ing catastrophic forgetting in neural networks. Proceedings of the national academy of sciences,
114(13):3521-3526, 2017.
Ms Seema Kolkur, D Kalbande, and Vidya Kharkar. Machine learning approaches to multi-class
human skin disease detection. Int. J. Comput. Intell. Res, 14:29-39, 2018.
10
Under review as a conference paper at ICLR 2020
Alex Krizhevsky and Geoffrey Hinton. Learning multiple layers of features from tiny images. Tech-
nical report, Citeseer, 2009.
Alex Krizhevsky, Vinod Nair, and Geoffrey Hinton. Cifar-10 and cifar-100 datasets. URl:
https://www. cs. toronto. edu/kriz/cifar. html, 6, 2009.
Aviral Kumar, Sunita Sarawagi, and Ujjwal Jain. Trainable calibration measures for neural networks
from kernel mean embeddings. In International Conference on Machine Learning, pp. 2810-
2819, 2018.
Balaji Lakshminarayanan, Alexander Pritzel, and Charles Blundell. Simple and scalable predictive
uncertainty estimation using deep ensembles. In Advances in Neural Information Processing
Systems, pp. 6402-6413, 2017.
Yann LeCun, Leon Bottou, Yoshua Bengio, Patrick Haffner, et al. Gradient-based learning applied
to document recognition. Proceedings of the IEEE, 86(11):2278-2324, 1998a.
Yann LeCun, Corinna Cortes, and Christopher Burges. Mnist dataset, 1998b.
Shiyu Liang, Yixuan Li, and R Srikant. Enhancing the reliability of out-of-distribution image detec-
tion in neural networks. arXiv preprint arXiv:1706.02690, 2017.
Christos Louizos and Max Welling. Structured and efficient variational deep learning with matrix
gaussian posteriors. In International Conference on Machine Learning, pp. 1708-1716, 2016.
Christos Louizos and Max Welling. Multiplicative normalizing flows for variational bayesian neural
networks. In Proceedings of the 34th International Conference on Machine Learning-Volume 70,
pp. 2218-2227. JMLR. org, 2017.
David JC MacKay. Bayesian methods for adaptive models. PhD thesis, California Institute of
Technology, 1992.
Wesley Maddox, Timur Garipov, Pavel Izmailov, Dmitry Vetrov, and Andrew Gordon Wilson. A
simple baseline for bayesian uncertainty in deep learning. arXiv preprint arXiv:1902.02476, 2019.
Dmitry Molchanov, Arsenii Ashukha, and Dmitry Vetrov. Variational dropout sparsifies deep neural
networks. In Proceedings of the 34th International Conference on Machine Learning-Volume 70,
pp. 2498-2507. JMLR. org, 2017.
Mahdi Pakdaman Naeini, Gregory Cooper, and Milos Hauskrecht. Obtaining well calibrated prob-
abilities using bayesian binning. In Twenty-Ninth AAAI Conference on Artificial Intelligence,
2015.
Radford M Neal. Bayesian learning for neural networks, volume 118. Springer Science & Business
Media, 2012.
Yuval Netzer, Tao Wang, Adam Coates, Alessandro Bissacco, Bo Wu, and Andrew Y Ng. Reading
digits in natural images with unsupervised feature learning. NIPS, 01 2011.
Linnaea Ostroff and Hongkui Zeng. Electron microscopy at scale. Cell, 162(3):474-475, 2015.
Yaniv Ovadia, Emily Fertig, Jie Ren, Zachary Nado, D Sculley, Sebastian Nowozin, Joshua V Dil-
lon, Balaji Lakshminarayanan, and Jasper Snoek. Can you trust your model’s uncertainty? eval-
uating predictive uncertainty under dataset shift. arXiv preprint arXiv:1906.02530, 2019.
John Platt et al. Probabilistic outputs for support vector machines and comparisons to regularized
likelihood methods. Advances in large margin classifiers, 10(3):61-74, 1999.
Hippolyt Ritter, Aleksandar Botev, and David Barber. Online structured laplace approximations for
overcoming catastrophic forgetting. In Advances in Neural Information Processing Systems, pp.
3742-3752, 2018a.
Hippolyt Ritter, Aleksandar Botev, and David Barber. A scalable laplace approximation for neural
networks. 2018b.
11
Under review as a conference paper at ICLR 2020
Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image
recognition. arXiv preprint arXiv:1409.1556, 2014.
Catherine Wah, Steve Branson, Peter Welinder, Pietro Perona, and Serge Belongie. The caltech-ucsd
birds-200-2011 dataset. 2011.
Yeming Wen, Paul Vicol, Jimmy Ba, Dustin Tran, and Roger Grosse. Flipout: Efficient pseudo-
independent weight perturbations on mini-batches. arXiv preprint arXiv:1803.04386, 2018.
Bianca Zadrozny and Charles Elkan. Obtaining calibrated probability estimates from decision trees
and naive bayesian classifiers. In Icml, volume 1, pp. 609-616. Citeseer, 2001.
Bianca Zadrozny and Charles Elkan. Transforming classifier scores into accurate multiclass proba-
bility estimates. In Proceedings of the eighth ACM SIGKDD international conference on Knowl-
edge discovery and data mining, pp. 694-699. ACM, 2002.
Sergey Zagoruyko and Nikos Komodakis. Wide residual networks. arXiv preprint
arXiv:1605.07146, 2016.
12
Under review as a conference paper at ICLR 2020
A Proof of Proposition 1
First we investigate the validity of Proposition 1 for the settings with no distribution shift.
Proposition 1: let Wk (∙) be a weight function defined as:
w / 、— f 1,	if χi 〜q(X, y = k)
Wk (Xi) = t⅛=⅛⅛ ,otherwise.
and let d(∙) be a model which gets miscalibrated with rescaled logit layer by factor w*. Then,
with known task distribution q(y), the empirical approximation of Wk(∙) is equal Wk(∙; ∙) which is
defined as:
1,
if y = k
Wk (xi,w*)
1∕exp(亲 log(Sy=k(Xi)T - 1)), otherwise.
where w* is:
w* = arg min I E Wl(Xik X； W)- 4(期=k) I	Xi ∈ C 〜q(x)
w	k=1 i=1
Proof: For simplicity we split the proof into two parts. First, we show that for a known value
of w*, Wk(∙; ∙) is the approximation Wk(∙). In other words, 1∕exp(亲 log(Sy=k(x)-1 — 1))=
q(y = k∣χ)∕q(y = k∣χ):
The Softmax output of an uncalibrated model d(∙) with rescaled logit layer by a factor w*, can be
formulated as:
S (χ) =	exp(w*fk (Xi))
y=k	PK=I exP(w* fj (Xi))
Sy6=k(χ) = 1 - Sy=k (χ)
Therefore calibrated output will be defined as:
Sy=k(X； w*) = PKXPfk(Xi))	= q(y = k|x)
j =1 exp(fj (χi))
Sy6=k(X, w*) = 1 - Sy=k(X, w*) = q(y 6= k|X)
Considering these definitions:
1
eχp (a Iog(Sy=k(x)-1 - 1)) =eχp (亲 log
1
exp( w * fj (xi)) -exp(w * fk (xi))
exp(w*fk(xi))
(	exp(fk(xi))	ʌ
〈PK=1 eχp(fk (Xi)) J
ι _	exp(fk(xi))	ʌ
PK=1 exP(fj (Xi)) J
Sy=k(x; w*)	_ q(y = k∣X)	_ q(y = k∣X)
1 - Sy=k (X;w*)	1 - q(y = k|X)	q(y 6= k|X)
13
Under review as a conference paper at ICLR 2020
We consider yi = k as the rough estimation of condition Xi 〜 q(x, y = k) . The accuracy of the
uncalibrated model is the same as calibrated one when it gets uncalibrated by rescaled logit layer.
Therefore we can use the prediction output of uncalibrated model to have a rough estimation of the
samples that X 〜q(x, y = k).
Now in the SeCOnd part, we show that w* = arg minw (PK=I Pi= 1 Wk(xi； w) — q(y = k))
where Xi ∈ C ~ q(x)
Referring to Wk(∙) definition, we can simply show:
Wk(X)q(X, y)dX = q(y = k)
x
Which means Eq(χ,y)[Wk(x)] = q(y = k), and as Wk(•； ∙) is equal to Wk(∙), empirically we can
show xc∈C Wk(Xi； w*) = q(y = k). In this problem setting, we assume q(y) is known. Therefore,
w* can befound easily by minimizing (PK=I Pi=ι Wk(x2; W) — q(y
2
Now we show the validity of Proposition 1 under Covariate Shift assumptions.
Corollary 1: Considering the same weight function Wk (∙) defined in Proposition 1, let d(∙) be a
model which gets miscalibrated with rescaled logit layer by factor w* toward the target domain
qt(X, y). Assume covariate shift where qs(y|X) = qt(y|X), qs(y) = qt(y) and qs(X) 6= qt(X). Then,
with known qs(y), the empirical approximation of Wk(∙) IS equal Wk(∙； ∙) which is defined as:
if y = k
1,
Wk (xi,w*)
1∕exp(亲 log(Sy=k(Xi)T - 1)), otherwise.
where w* is:
w* = arg min
w
Wk (Xi； w) - qs(y = k)	Xi ∈ C ~ qt(x)
Proof: The first part of the proof is exactly the same as Proposition 1 with considering that w* with
new assumptions is the scaling factor that makes the model uncalibrated towards the target domain.
Therefore, we will conclude:
Sy=k(X； W*)
qt(y = k|X)	qt(y = k|X)
1 - Sy=k(X; w*)	1 - qt(y = k|X)	qt(y 6= k|X)
For the second part of the proof, we have:
Wk(X)qs (X, y)dX = qs (y = k)
x
Referring to covariate shift assumption where qs(y|X) = qt(y|X) and qs(y) = qt(y), we can deduce:
Wk(X)qt(X, y)dX = qt(y = k)
x
Which means Eqt (x,y) [Wk(X)] = qt(y
cally we can show xc∈C Wk(Xi； w*)
k), and as Wk(∙<) is equal to Wk(∙), empiri-
qt(y
qs (y) is known that is equal to qt (y).	Therefore,
(pK=1 Pi= Wk(Xi； Wi(L k))2.
k). In this problem setting, we assume
w* can be found easily by minimizing
14
Under review as a conference paper at ICLR 2020
B	Experimental Setups
B.1	Baselines
•	Temperature Scaling (Guo et al. (2017)): It is explained in Sec. (3.3)
•	Matrix and Vector Scaling (Platt et al. (1999)): Matrix Scaling applies a linear transforma-
tion on the logits to soften them:
Sy=yi(Xi； θ, b) = max σ(θ.f (Xi) + b)(k)
y^i = arg max σ(θ.f (Xi) + b)(k)	⑼
k
Where σ is the softmax function which takes logit layer f(X) as an input. The parameters
θK ×K and bK are optimized with respect to NLL on the validation set. Vector Scaling is
the relaxed version of Matrix Scaling in which θK×K is a diagonal matrix.
•	ll-Dropout Monte-Carlo Dropout(Gal & Ghahramani (2016)), A pre-trained model which
is trained with dropout rate p = 0.5 only on the activation function before the last layer,
and keeping the dropout active during the test with the same rate.
•	Ensembles Ensembles of 10 networks trained independently on the entire dataset using the
random initialization(Lakshminarayanan et al. (2017)).
•	SVI Stochastic Variational Bayesian Inference for deep learning (Blundell et al. (2015);
Wen et al. (2018) with the specific settings of training mentioned in (Ovadia et al. (2019))
B.2	Datasets
We apply the calibration method on different image classification datasets. For each experiment, the
size of validation set is 20% of the test set which is selected randomly. For all the model-dataset we
have trained them on the training set.
1.	CIFAR-10 (Krizhevsky et al. (2009)): It contains 60000, 32×32 color images of 10 different
objects, with 6000 images per class. The size of training and test sets are 50000 and 10000
respectively.
2.	CIFAR-100 (Krizhevsky et al. (2009)): With the same setting as CIFAR-10, except it has
100 classes of different objects containing 600 images in each class.
3.	SVHN (Netzer et al. (2011)): It contains 32×32 color images of numbers between 0 to 9
that has 73257 digits for training, 26032 digits for testing.
4.	MNIST (LeCun et al. (1998b)): It contains 28×28 gray-scale images of numbers between
0 to 9. It has 60,000 images for training, and 10,000 images for test.
5.	Calthec-UCSD Birds (Wah et al. (2011)): It contains 11,788 color images of 200 different
birds species. We divided randomly into 7073 training, and 4715 testing samples.
B.3	Calibration Metrics
Expected Calibration Error (ECE)
ECE (Naeini et al. (2015)) measures the average gap between the accuracy and predicted prob-
abilities. Based on this definition of calibration, ECE is proposed as empirical expectation error
between the accuracy and confidence. It is calculated by partitioning the range of confidence be-
tween [0 , 1] into B equally-spaced confidence bins and then assign the samples to each bin Bb where
b = {1, . . . , B} by their confidence range. Later it calculates the weighted absolute difference be-
tween the accuracy and confidence for each subset Bl . More specifically:
ECE = X 哈卜CC(Bb)- Conf(Bb) ∣,
b=1
(10)
where N is the total number of samples. In this paper, we Consider B = 15 to report the ECE
error. ECE is not derivable funCtion. Therefore mostly it is ignored as the loss funCtion of the
15
Under review as a conference paper at ICLR 2020
post-processing approaches in calibrating the model by gradient decent optimizing methods.
Brier Score
Brier Score (Brier (1950)) is a scoring rule for measuring the accuracy of predicted probabilities.
It is computed as the square error of predicted probability and the one-hot encoding of the correct
label. That is:
1K
B(xi,yi) = K E(Sy(Xi)- δ(y - yi))	(11)
y=1
C More Experimental Results
C.1 Tables of Accuracy, NLL, ECE and Brier Score
We report additional results of the experiment applied in Sec. 5.1 to evaluate the behavior of UTS in
calibration with the same training and test domains. We report the accuracy, NLL, ECE and Brier
Score in Table 2, 3, 4, and 5, respectively. Notice that TS family approaches keep the accuracy
unchanged while Matrix and Vector Scaling can change the accuracy. In two cases Matrix and
Vector Scaling improve the accuracy. However, they get overfitted on validation set and lose the
accuracy and calibration in general. We report the results for different calibration score to show
that UTS will calibrate the model regarding different calibration evaluation metrics. NLL and Brier
Score have related definition of calibration as both of them are proper scoring rule. But ECE has
different calibration definition. The detail explanation are given in Sec. (B.3) for each score. We can
see in Table 4, UTS even can calibrate the model better than TS for two dataset-model combination
with ECE definition of calibration.
Table 2: Accuracy of different post-processing approaches for different model-datasets
Dataset	Model	UnCalibrated,TS, UTS	Vector Scaling	Matrix Scaling
Birds	ResNet50	76.03 +/- 0.17	75.94 +/- 0.31	38.82 +/- 1.92
MNIST	Lenet-5	99.19 +/- 0.03	99.18 +/- 0.03	99.11 +/- 0.05
SVHN	ResNet110	96.09 +/- 0.08	96.07 +/- 0.08	96.08 +/- 0.08
SVHN	DenseNet100	95.77 +/- 0.03	95.94 +/- 0.02	95.86 +/- 0.02
CIFAR10	DenseNet40	92.67 +/- 0.12	92.20 +/- 0.10	92.55 +/- 0.04
CIFAR10	DenseNet100	95.08 +/- 0.09	94.81 +/- 0.12	95.02 +/- 0.11
CIFAR10	ResNet110	93.62 +/- 0.13	93.53 +/- 0.14	93.49 +/- 0.13
CIFAR10	VGG16	93.42 +/- 0.12	93.39 +/- 0.14	93.40 +/- 0.11
CIFAR100	DenseNet40	71.56 +/- 0.18	66.89 +/- 0.56	63.79 +/- 0.81
CIFAR100	DenseNet100	75.87 +/- 0.15	73.38 +/- 0.25	73.12 +/- 0.15
CIFAR100	ResNet110	70.41 +/- 0.26	67.24 +/- 0.20	65.27 +/- 0.28
CIFAR100	WideResNet40-4	79.80 +/- 0.22	79.57 +/- 0.15	79.79 +/- 0.17
Table 3: NLLJ for UTS and other post-processing approaches. The mean and Std are reported in 20 independent
runs.
Dataset	Model	Uncalibrated	TS	UTS	Vector Scaling	Matrix Scaling
Birds	ResNet50	0.9383 +/- 0.0086	0.9287 +/- 0.0077	0.9313 +/- 0.0078	0.9355 +/- 0.0093	7.1423 +/- 0.2424
MNIST	Lenet-5	0.1044 +/- 0.0064	0.0243 +/- 0.0013	0.0429 +/- 0.0009	0.0988 +/- 0.0073	0.1187 +/- 0.0094
SVHN	ResNet110	0.2107 +/- 0.0035	0.1534 +/- 0.0023	0.1566 +/- 0.0030	0.1936 +/- 0.0035	0.2070 +/- 0.0036
SVHN	DenseNet100	0.1803 +/- 0.0017	0.1608 +/- 0.0013	0.1735 +/- 0.0048	0.1687 +/- 0.0025	0.1754 +/- 0.0017
CIFAR10	DenseNet40	0.2895 +/- 0.0058	0.2221 +/- 0.0034	0.2848 +/- 0.0419	0.2912 +/- 0.0076	0.2883 +/- 0.0061
CIFAR10	DenseNet100	0.1973 +/- 0.0060	0.1559 +/- 0.0035	0.1635 +/- 0.0051	0.2006 +/- 0.0098	0.1965 +/- 0.0061
CIFAR10	ResNet110	0.3134 +/- 0.0083	0.2069 +/- 0.0047	0.2341 +/- 0.0109	0.2907 +/- 0.0090	0.3103 +/- 0.0081
CIFAR10	VGG16	0.2608 +/- 0.0060	0.2036 +/- 0.0039	0.2099 +/- 0.0065	0.2503 +/- 0.0093	0.2573 +/- 0.0064
CIFAR100	DenseNet40	1.0964 +/- 0.0067	1.0064 +/- 0.0053	1.0217 +/- 0.0053	1.2876 +/- 0.0215	1.4914 +/- 0.0520
CIFAR100	DenseNet100	1.1285 +/- 0.0072	0.8751 +/- 0.0042	0.8889 +/- 0.0054	1.2470 +/- 0.0186	1.2761 +/- 0.0129
CIFAR100	ResNet110	1.2442 +/- 0.0132	1.0466 +/- 0.0090	1.0636 +/- 0.0140	1.3869 +/- 0.0186	1.5358 +/- 0.0204
CIFAR100	WideResNet40-4	0.8751 +/- 0.0111	0.8192 +/- 0.0096	0.8439 +/- 0.0089	0.8757 +/- 0.0095	0.8609 +/- 0.0103
16
Under review as a conference paper at ICLR 2020
Table 4: ECEJ for UTS and other post-processing approaches. The mean and Std are reported in 20 independent
runs.
Dataset	Model	Uncalibrated	TS	UTS	VS	MS
Birds	ResNet50	0.0601 +/- 0.0015	0.0397 +/- 0.0025	0.0350 +/- 0.0024	0.0576 +/- 0.0019	0.2940 +/- 0.0089
MNIST	Lenet-5	0.0074 +/- 0.0004	0.0027 +/- 0.0009	0.0199 +/- 0.0014	0.0074 +/- 0.0004	0.0077 +/- 0.0005
SVHN	ResNet110	0.0266 +/- 0.0004	0.0044 +/- 0.0009	0.0127 +/- 0.0036	0.0247 +/- 0.0003	0.0264 +/- 0.0005
SVHN	DenseNet100	0.0160 +/- 0.0004	0.0059 +/- 0.0009	0.0106 +/- 0.0013	0.0139 +/- 0.0003	0.0156 +/- 0.0005
CIFAR10	DenseNet40	0.0409 +/- 0.0007	0.0070 +/- 0.0009	0.0351 +/- 0.0039	0.0410 +/- 0.0021	0.0419 +/- 0.0008
CIFAR10	DenseNet100	0.0262 +/- 0.0010	0.0073 +/- 0.0017	0.0157 +/- 0.0040	0.0281 +/- 0.0033	0.0262 +/- 0.0017
CIFAR10	ResNet110	0.0431 +/- 0.0009	0.0088 +/- 0.0009	0.0226 +/- 0.0021	0.0435 +/- 0.0023	0.0439 +/- 0.0012
CIFAR10	VGG16	0.0419 +/- 0.0010	0.0169 +/- 0.0009	0.0297 +/- 0.0043	0.0402 +/- 0.0011	0.0419 +/- 0.0011
CIFAR100	DenseNet40	0.0861 +/- 0.0011	0.0109 +/- 0.0018	0.0390 +/- 0.0062	0.1312 +/- 0.0054	0.1553 +/- 0.0102
CIFAR100	DenseNet100	0.1223 +/- 0.0016	0.0152 +/- 0.0011	0.0372 +/- 0.0063	0.1416 +/- 0.0020	0.1452 +/- 0.0039
CIFAR100	ResNet110	0.1265 +/- 0.0006	0.0102 +/- 0.0027	0.0447 +/- 0.0048	0.1567 +/- 0.0045	0.1740 +/- 0.0074
CIFAR100	WideResNet40-4	0.0894 +/- 0.0012	0.0402 +/- 0.0027	0.0689 +/- 0.0033	0.0839 +/- 0.0037	0.0850 +/- 0.0023
Table 5: Brier ScoreJ for UTS and other post-processing approaches. The mean and std are reported in 20
independent runs.
Dataset	Model
Birds	ResNet50
MNIST	Lenet-5
SVHN	ResNet110
SVHN	DenseNet100
CIFAR10	DenseNet40
CIFAR10	DenseNet100
CIFAR10	ResNet110
CIFAR10	VGG16
CIFAR100	DenseNet40
CIFAR100	DenseNet100
CIFAR100	ResNet110
CIFAR100	WideResNet40-4
Uncalibrated TS
0.0017 +/- 0.0000
0.0015 +/- 0.0001
0.0066 +/- 0.0001
0.0066 +/- 0.0001
0.0118 +/- 0.0001
0.0080 +/- 0.0002
0.0108 +/- 0.0002
0.0108 +/- 0.0002
0.0040 +/- 0.0000
0.0037 +/- 0.0000
0.0043 +/- 0.0000
0.0030 +/- 0.0000
0.0017 +/- 0.0000
0.0012 +/- 0.0001
0.0061 +/- 0.0001
0.0065 +/- 0.0001
0.0109 +/- 0.0001
0.0075 +/- 0.0002
0.0098 +/- 0.0001
0.0098 +/- 0.0003
0.0039 +/- 0.0000
0.0033 +/- 0.0000
0.0040 +/- 0.0000
0.0029 +/- 0.0000
UTS
0.0017 +/- 0.0000
0.0014 +/- 0.0000
0.0062 +/- 0.0001
0.0065 +/- 0.0001
0.0115 +/- 0.0002
0.0076 +/- 0.0002
0.0100 +/- 0.0001
0.0102 +/- 0.0003
0.0039 +/- 0.0000
0.0034 +/- 0.0000
0.0040 +/- 0.0000
0.0030 +/- 0.0000
VS
0.0017 +/- 0.0000
0.0015 +/- 0.0001
0.0065 +/- 0.0001
0.0063 +/- 0.0001
0.0121 +/- 0.0002
0.0084 +/- 0.0005
0.0110 +/- 0.0003
0.0106 +/- 0.0002
0.0048 +/- 0.0001
0.0040 +/- 0.0000
0.0048 +/- 0.0001
0.0031 +/- 0.0000
MS
0.0043 +/- 0.0001
0.0016 +/- 0.0001
0.0066 +/- 0.0001
0.0064 +/- 0.0001
0.0118 +/- 0.0001
0.0080 +/- 0.0003
0.0108 +/- 0.0002
0.0107 +/- 0.0002
0.0052 +/- 0.0002
0.0040 +/- 0.0001
0.0051 +/- 0.0001
0.0030 +/- 0.0000
C.2 Comparing Different TS Family approaches to UTS for Domain Shift
Scenarios
In this section, we provide more results to compare the behavior of UTS with TS and TS-Target
in different domain shift applied to CIFAR10 dataset. Details of shifting operation can be found
in (Hendrycks & Dietterich, 2019). We can see in Fig. 5 that TS-Target has the most calibration
robustness to the domain shift and followed by UTS with small gap.
C.3 More Experimental Results for Sensitivity of TS to the Labeling Noise
In this section, we provide more experiments for more models and datasets. As we can see in Fig. 3,
TS shows a huge sensitivity to the noise of labeling in calibration set. UTS is completely robust
to this noise as it is an unsupervised method. It shows if TS wants to calibrate the model without
available labeled data, the labeling phase should be handled precisely. Otherwise TS results are not
reliable.
C.4 Analysis of UTS Sensitivity to Number of Samples
In this experiment, we show the impact of number of available calibration samples on TS, UTS and
TS-Target. As we can see in Fig.7, TS and UTS vary significantly when the number of samples are
really few (between 30 〜50) while TS-Target is not affected severely (the variance of TS-Target
comparing to other methods is small then it is not properly shown in the image). However, by
increasing the number of samples to 500, UTS reaches to the optimal TUTS and after that increasing
the number of samples does not consequences better results.
17
Under review as a conference paper at ICLR 2020
CIFAR10 - Brightness
CIFAR10 - Elastic Transform
CIFAR10 - Gaussian Blur
Figure 5: Robustness of UTS to domain shift problem in compare to TS, Ts-Target and uncalibrated methods.
UTS with small gap caan follow TS-Target which shows it is a robust method to domain shift
18
Under review as a conference paper at ICLR 2020
Birds - ResNet50
CIFAR10 - DenseNet40
CIFARI0-VGG16
CIFAR10 - DenseNet100
CIFAR100 - DenseNet40
CIFAR100 - WideResNet40-4
SVHN - Densenet100
Noise
Noise
Figure 6: Sensitivity of TS method to the labeling noise in calibration set in compare to UTS and uncalibrated
methods. UTS is not sensitive to the labeling noise in calibration sets at all as it is an unsupervised approach.
Shaded regions represent std over 20 runs.
0.2
0.3
CIFAR100-ResNet110
19
Under review as a conference paper at ICLR 2020
|C| = 2000
|C| = 2000
|C| = 2000
Figure 7: Comparing the stability of different TS family approaches to the number of calibration samples. TS-
Target has the best stability. However UTS converges quickly to the optimal solution. Consider that collecting
samples for UTS comparing to TS-Target is much less expensive task as it does not need labeled samples. The
number of samples in calibration set C from top row to the bottom is 30, 50, 500, 1000, and 2000.
20