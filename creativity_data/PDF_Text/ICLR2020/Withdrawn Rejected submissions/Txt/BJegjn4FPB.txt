Under review as a conference paper at ICLR 2020
ILS-SUMM: Iterated Local Search for Unsu-
pervised Video Summarization
Anonymous authors
Paper under double-blind review
Ab stract
In recent years, there has been an increasing interest in building video summariza-
tion tools, where the goal is to automatically create a short summary of an input
video that properly represents the original content. We consider shot-based video
summarization where the summary consists of a subset of the video shots which
can be of various lengths. A straightforward approach to maximize the represen-
tativeness of a subset of shots is by minimizing the total distance between shots
and their nearest selected shots. We formulate the task of video summarization
as an optimization problem with a knapsack-like constraint on the total summary
duration. Previous studies have proposed greedy algorithms to solve this prob-
lem approximately, but no experiments were presented to measure the ability of
these methods to obtain solutions with low total distance. Indeed, our experi-
ments on video summarization datasets show that the success of current methods
in obtaining results with low total distance still has much room for improvement.
In this paper, we develop ILS-SUMM, a novel video summarization algorithm to
solve the subset selection problem under the knapsack constraint. Our algorithm is
based on the well-known metaheuristic optimization framework - Iterated Local
Search (ILS), known for its ability to avoid weak local minima and obtain a good
near-global minimum. Extensive experiments show that our method finds solu-
tions with significantly better total distance than previous methods. Moreover, to
indicate the high scalability of ILS-SUMM, we introduce anew dataset consisting
of videos of various lengths.
1	Introduction
In recent years, the amount of video data has significantly increased. In addition to many cinema
movies, news videos, and TV-shows, people frequently shoot events with their cellphone and share
it with others on social media. To illustrate, it has been reported that every minute, 300 hours
of new videos are uploaded to YouTube. Consequently, the user’s ability to manage, search, and
retrieve a specific item of content is limited. One remedy to this challenge can be an automatic video
summarization algorithm where the goal is to create a shortened video that contains the essence of
the original video. If fact, several commercial video summarization products are already on the
market.
Various video summarization algorithms have been suggested in the literature. In most methods, the
process consists of two main stages - segmenting the video into short video shots, and then choosing
a subset of the shots to aggregate a summary (Otani et al., 2019). In order to be a good summary,
this shot subset selection should optimize a certain property. For example, the selected shots should
well represent the content of the video in the sense that each object from the original video has a
similar object in the summary.
Video summarization approaches can generally be divided into supervised and unsupervised. Su-
pervised methods include exploiting a ground truth importance score of each frame to train a model
(Zhang et al., 2016; Zhao et al., 2018; Gygli et al., 2015) and utilizing auxiliary data such as web
images (Khosla et al., 2013), titles (Song et al., 2015), category (Potapov et al., 2014) and any other
side information (Yuan et al., 2017). A pitfall ofa supervised approach is the necessity of expensive
human-made labels. This drawback is especially restrictive because of the complicated and vague
structure of a good summary, which requires a lot of labeled data.
1
Under review as a conference paper at ICLR 2020
In contrast, unsupervised methods do not need human-made labels as they follow rational guide-
lines for creating a good summary. One group of unsupervised algorithms maximizes the similarity
between the original video and the generated summary using generative adversarial networks as
evaluators (Mahasseni et al., 2017; Jung et al., 2019; Yuan et al., 2019), or by dictionary learning
(Cong et al., 2011; Zhao & Xing, 2014). Another salient group of methods seek to minimize the to-
tal distance between shots and their nearest selected shots while satisfying the limit on the summary
duration. Attempts in this direction include using submodular optimization (Gygli et al., 2015),
reinforcement learning (Zhou et al., 2018) and clustering methods (Chheng, 2007; De Avila et al.,
2011; Hadi et al., 2006).
Even though several methods have been proposed for minimizing this total distance, no experiments
have presented to directly measure the success of these methods in obtaining solutions with low total
distance. Our experiments indicate that the best current existing method obtains solutions with total
distance, which is, in some datasets around 10% worse than the optimal solution on average. Hence,
we see that there is room for a new method that leads to better solutions.
In this paper, we propose ILS-SUMM, a novel unsupervised video summarization algorithm which
uses the Iterated Local Search (ILS) optimization framework (LoUrenco et al., 2003) to find a rep-
resentative subset of shots. We formalize the following optimization problem: given the entire set
of shots with varied shot duration, select a subset which minimizes the total distance between shots
and their nearest selected shots while satisfying a knapsack constraint, i.e., the limit on the summary
duration. This problem is known in the Operations Research field as the Knapsack Median (KM)
problem, and is known to be NP-hard. A major challenge in performing a local search in the solu-
tion domain is the high chance of getting stuck in a local minimum because of the hard knapsack
constraint (Fang et al., 2002). Therefore we use the ILS framework, which is the basis for several
State-of-the-art algorithms for NP-hard problems (LoUrenco et al., 2019).
ILS-SUMM creates a video summary by selecting shots that well represent the original video, us-
ing the ILS framework. First, it initializes a solUtion that satisfies the sUmmary dUration limit.
Then, it applies steps of improvements by adding or replacing one shot at a time, while allowing
only steps that obey the knapsack constraint. When a local minimUm point is reached, the ILS
execUtes a gentle, yet noticeable, pertUrbation to the cUrrent solUtion, to get oUt from the local
minimUm while trying to keep part of the high qUality of the solUtion it obtained. We perform exten-
sive experiments on the SUmMe and TvSUm benchmarks showing that oUr method finds solUtions
that are on average less than 2% worse than the optimal solUtion, which is significantly sUperior
than the resUlts of previoUs methods. Moreover, experiments on long real open-soUrce movies in-
dicate ILS-SUMM scalability. A Python implementation of the proposed method is released in
[www.githUb.com/ArthUrName/ILS-SUMM].
2	Related Work
2.1	Video Summarization
VarioUs UnsUpervised video sUmmarization methods have been presented in the recent literatUre.
Most methods share the Underlying assUmption that a good sUmmary shoUld represent and be similar
to the original video. Cong et al. (2011) and Zhao & Xing (2014) bUild a representative dictionary
of key frames that minimizes the reconstrUction error of the original video. Mahasseni et al. (2017)
train a deep neUral network to minimize the distance between original videos and a distribUtion of
their sUmmarizations.
Chheng (2007) clUster the video shots into k clUsters Using the k means algorithm, and then select
shots from varioUs clUsters. Gygli et al. (2015) apply sUbmodUlarity optimization to minimize the
total distance between shots and the nearest of the selected shots. ZhoU et al. (2018) Use a reinforce-
ment learning framework to train a neUral network to select frames sUch that the representativeness
and diversity of the sUmmary will be maximized.
In recent years, most methods evalUate their resUlts by measUring the similarity between aUtomatic
sUmmaries and hUman-made sUmmaries. Recently, Otani et al. (2019) observed that randomly gen-
erated sUmmaries obtain competitive or better performance in this metric to the state-of-the-art.
Based on this sUrprising observation, instead of evalUating oUr method Using hUman labels, we mea-
2
Under review as a conference paper at ICLR 2020
sure the success of our algorithm in terms of having low total distance between all shots and the
nearest of the selected shots.
2.2	Iterated Local Search
In the ILS framework, a sequence of locally optimal solutions is iteratively generated by a heuristic
algorithm. The initial point of the heuristic search in each iteration is a perturbation of a previous
obtained solution, rather than a complete random trail. ILS has been applied successfully to various
optimization problems, leading to high performance and even established the current state-of-the-art
algorithms in some tasks.
Some successful applications of ILS include solving common combinatorial problems such as
graph partitioning problems, traveling salesperson problems and scheduling problems (De Corte
& Sorensen, 20l6), in addition to other applications such as image registration (Cordon & Damas,
2006), car sequencing (Cordeau et al., 2008; Ribeiro et al., 2008) and the generalized quadratic mul-
tiple knapsack problem (Avci & Topaloglu, 2017). To the best of our knowledge, this paper is the
first to apply Iterated Local Search to the Knapsack Median problem.
3	Method
In this section, we introduce an unsupervised method for video summarization, based on the Iterated
Local Search (ILS) optimization framework.
3.1	Formulation
Given an input video v, the video is divided temporally into a set of shots Sv = {s1, s2, . . . sN},
where N is the number of shots in the video. We denote the duration in seconds of a shot s as t (s).
Each shot is represented by its middle frame feature vector x (s) (for details see section 4.1). A
condensed video summary is a representative subset of shots Ssumm ⊆ Sv . The summarization
task is then formulated by the following optimization problem. We denote T D(Ssumm|Sv, x(s)) as
the total distance between all video shots and their nearest shot in Ssumm :
T D(Ssumm|Sv, x(s)) = X min {dist (x (s0) ,x (s))}	(1)
s∈Ss
umm
s0∈Sv
The objective is to obtain the subset Ssumm that minimizes the total distance:
S；Umm = argmin TD(SSumm∖Sv,x(s)),	(2)
Ssumm ⊆Sv
subject to:
X t (s) ≤ T,	(3)
s∈Ssumm
where dist (x, y) denotes some distance metric between x and y, and T is the maximum total dura-
tion in seconds allowed for the video summary. Equation 2 expresses the goal that the subset will
minimize the total distance between shots and their nearest selected shots. Equation 3 encodes the
knapsack constraint which limits the total duration of the selected shots not to exceed T seconds.
This problem is known in the Operations Research field as the Knapsack Median (KM) problem.
Motivated by the success of Iterated Local Search (ILS) in many computationally hard problems
(Lourenco et al., 2019), We use this simple yet powerful metaheuristic to address the KM problem,
and consequently obtain a representative video summary. A fundamental component in the ILS
framework is a local search algorithm. In the following section, we first introduce a local search
algorithm tailored to the KM problem, which we name Local-Search-SUMM, and subsequently we
present the complete ILS-SUMM algorithm.
3.2	Local-Search-SUMM
A local search algorithm starts from a particular solution of a given problem and sequentially im-
proves the solution by performing a local move at each step (Osman & Kelly, 1997). The pseudo-
code of Local-Search-SUM, a local search algorithm we developed for the KM problem is given by
3
Under review as a conference paper at ICLR 2020
Algorithm 1 Local-Search-SUM
1:	Input: Sinit, Sv, x(s), t(s), T
2:	S* := Sinit
3:	for k :=1 to MAX-TRIALS do
4:	S := Select(N(S*, Sv, t(s), T), x(s))
5:	if f(S|Sv,x(s)) < f(S*|Sv,x(s)) then
6:	S* := S
7:	end if
8:	end for
9:	return: S *
Algorithm 2 ILS-SUMM
1:	Input: Sinit, Sv, x(s), t(s), T
2:	S* := Local-Search-SUMM(Sinit , Sv , x(s), t(s), T )
3:	S_Best := S*
4:	M := 1
5:	while M ≤ M_MAX do
6:	S0 := Perturbation(S* , Sv, M, t(s), T)
7:	S0* := Local-Search-SUMM(S0, Sv , x(s), t(s), T)
8:	S * :=Acceptance-Criterion(S_Best,S0*, S *,Sv ,x(S))
9:	if f(S0*∣Sv,x(S)) < f(S_Best ∣Sv,x(S)) then
10:	SRst := S0*
11:	M := 1
12:	else
13:	M := M+ 1
14:	end if
15:	end while
16:	return: S_BeSt
Algorithm 1. This algorithm contains the following functions: f() - an objective function, N() - a
map between a solution S to a neighborhood of solutions, and SeIect () - a function that selects one
of the neighbors, all detailed below. As an input, Local-Search-SUM gets Sinit - an initialization of
a solution. In each iteration of the algorithm, it selects a neighbor of the current solution and moves
to this neighbor if it decreases the objective function. The loop continues until a local minimum
is reached or until MAX_TRIALS, i.e., the predefined maximum number of trials, is reached. To
solve the KM problem with a local search algorithm, we use the setting as described below.
Objective function. Straightforwardly, we define the objective function as the total distance be-
tween shots and their nearest selected shots:
f(Ssumm|Sv,x(S)) = T D(Ssumm|Sv, x(S))
(4)
Note that an extension to a multi-objective function is straightforward, by changing f() to be a
weighted sum of objectives as proposed by Gygli et al. (2015).
Initialization. To deal with the knapsack constraint, we define the local search initialization and
neighborhood such that throughout all the solution process, only feasible solutions will be consid-
ered. To ensure that the initialized solution Sinit satisfies the knapsack constraint, the initialization
subset is set to be the single shortest shot.
Neighborhood. A neighborhood N(Ssumm, Sv, t(S), T) includes any subset which is obtained by
swapping or adding a single shot to Ssumm, while satisfying the knapsack constraint. Removing a
shot will never decrease the objective function, and therefore is not included in the neighborhood
set.
Selection. As a selection method, Select (N(), x(S)), we use the steepest descent method, i.e., se-
lecting the neighbor which decreases the objective function the most. To boost run-time performance
the algorithm first considers adding a shot, and only if this is impossible it considers swaps. This
approach reduces the complexity of the algorithm and demonstrates significantly better run-time
performance in our experiments.
4
Under review as a conference paper at ICLR 2020
Algorithm 3 Perturbation
1:	Input: S, Sv, M, t(s), T
2:	S0 — S
3:	for m := 1 to M do
4:	S0 — S0 ∪ arg min t(s)∖ arg max t(s)
s∈Sv |s/S0	s∈S0
5:	end for
6:	if P t (s) > T then
s∈S0
7:	S0 — S
8:	end if
9:	return: S0
3.3 ILS-SUMM
A local search algorithm may lead to a poor local minimum that is far away from the global min-
imum. Hence, after getting stuck in a local minimum, it is worthwhile to continue searching for
other solutions which potentially can be far better. ILS performs this continued search, by repeat-
edly calling a local search algorithm which in each call starts from a different starting solution. As
illustrated in figure 1, in each iteration the starting point of the next iteration is a perturbation of the
current solution.
ILS-SUMM pseudo-code is given by Algorithm 2. It consists of three main components which
are executed at each iteration: A perturbation of the last solution, a call of a local search algo-
rithm and a decision whether to accept the new found local minimum or to stay with the old
solution. As a local search, we use the Local-Search-SUMM introduced above. In the follow-
ing, we will go into more details regarding the perturbation mechanism and acceptance criterion.
Perturbation. In this stage, the previous solu-
tion is modified to a different solution. Specifi-
cally, ILS-SUMM perturbs a given subset S by
swapping M shots in S with M shots that are
currently not in S. See the perturbation mech-
anism pseudo-code in Algorithm 3. To maxi-
mize the chance of getting a feasible solution,
the perturbation is executed in a constraint-
greedy manner. This constraint greediness
means that the longest-duration currently se-
lected shots are swapped with the shortest-
duration non-selected shots. However, if the
new solution does not satisfy the knapsack con-
straint, then the original solution is returned
(line 7). This perturbation mechanism is deter-
ministic. Another option is to add randomness
when selecting which shots to swap. Since the
stochastic version did not lead to an improve-
ment in the experiments, we retain the deter-
ministic version which also enjoys the benefit
of repeatability.
Figure 1: Illustration of Iterated Local Search
framework. Given a local minimum S *, a per-
turbation leads to a solution S0 . Then, a call of
a local search algorithm obtains a local minimum
S0* which is potentially better than S*.
The strength of the perturbation can range between two extremes. On one extreme, it can totally
change the solution and in fact, restart from a new solution. These complete initializations typically
lead to long iterations and poor solutions because of the low quality of the starting solution. On
the other extreme, applying a weak perturbation which only slightly changes the solution may lead
to being stuck repeatedly in the same local minimum; hence, a good perturbation has a balanced
intensity. As described in the ILS-SUMM pseudo code (Algorithm 2), we use a gradually increasing
perturbation strength. It starts from M = 1 and gradually increases M by one until M^AX, i.e., a
5
Under review as a conference paper at ICLR 2020
predefined maximum value of M is reached. In this way, we use the minimal strength of perturbation
that accomplishes exiting the current local minimum.
Acceptance Criterion. In this stage, the algorithm decides which solution will be perturbed in the
next iteration to get a new starting point. Two extreme cases of this procedure are either to always
continue with the new local minimum obtained or to stick with the currently best achieved local
minimum. The first extreme can be interpreted as a random walk over the local minima, whereas
the second extreme can be viewed as a greedy local search over the local minima (LoUrenco et al.,
2019). An intermediate approach would be to prioritize good solutions while occasionally exploring
inferior solUtions. An example of sUch a scheme is the Metropolis HeUristic where worse solUtions
randomly get the chance to be explored. An interesting modification of the Metropolis HeUristic is
SimUlated Annealing (Van Laarhoven & Aarts, 1987), where the temperatUre of these exploration
events, i.e., the probability of moving to a worse solUtion, progressively decreases. Since all the
above options demonstrate similar resUlts in oUr experiments, we assign an acceptance criterion
which chooses the best achieved local minimUm.
4	Experiments
4.1	Experimental Setup
Datasets. We evaluate our approach on two popular video summarization datasets - SumMe (GygIi
et al., 2014) and TvSUm (Song et al., 2015), as well as on oUr new Open SoUrce Total Distance
dataset with full-length videos which we present below. SumMe consists of 25 user videos on
various topics such as cooking, traveling, and sport. Each video length ranges from 1 to 6 minutes.
TvSum consists of 50 videos with a duration varying between 2 to 10 minutes. We use a video
shot segmentation technology to subdivide each video into shots (for details see Section 4.1). For
SumMe and TvSum we use their common summary length limit which is 15% of the video length.
We use Python PuLP library to obtain the optimal total distance of each video using an integer
programming solver. As we will show in the results section, this integer programming tool has poor
run-time scalability, but is useful for obtaining the optimal total distance as ground truth.
To evaluate the total distance results and the scalability on longer movies, we establish a new total
distance dataset - Open-Source-Total-Distance (OSTD). This dataset consists of 18 movies with
duration range between 10 and 104 minutes leveraged from the OVSD dataset (Rotman et al., 2016).
For these videos, we set the summary length limit to be the minimum between 4 minutes and 10%
of the video length. Links for OSTD movies and ground truth optimal total distance of all above
datasets are available on [www.github.com/ArthurName/ILS-SUMM].
Implementation Details. For temporal segmentation, we use two different types of shot segmenta-
tion methods, in accordance with video types. For the OSTD movies, we use FFprobe Python tool
(Python Software Foundation, 2019) since this tool has high accuracy when applied on videos with
fast shots transitions. For the SumMe and TvSum datasets, we use KTS proposed by Potapov et al.
(2014), since this shot segmentation method is more appropriate for catching slow shot transitions
which are common in these two datasets. For feature extraction, we use the RGB color histogram
with 32 bins for each of the three color channels. See some comments on using deep features in
section 4.3.
For the perturbation mechanism of the ILS-SUMM, we set the maximum value of M to be 5 since
we found that this value leads to a balanced perturbation intensity. However, we observed that
ILS-SUMM is not sensitive to this value, and other values are just as satisfactory.
Evaluation. To compare between different approaches, we calculate the total distance defined in
equation (1) that each approach achieved for each video. We then calculate the optimality percent-
age, i.e., the ratio between the optimal value and the achieved value, mutiplied by 100. For each
method, we average all optimality percentages achieved on all the videos of a specific dataset, and
report the averaged optimality ratio.
Comparison. To compare total distance results with other approaches, we apply DR-DSN (Zhou
et al., 2018) and Submodularity (Gygli et al., 2015) on the datasets. For both methods, we use the
implementations provided by the original authors. Although both methods can optimize multiple
objectives, for our experiments we set them to maximize only representativeness since this is the
6
Under review as a conference paper at ICLR 2020
Figure 2: ILS-SUMM selection in Cosmos Laundromat movie from OSTD data set. The middle
frame of shot is presented. A red circle denotes the shots that were chosen by ILS-SUMM algorithm.
evaluation metric we use. As mentioned above, an extension of our method to a multi-objective
setting is straightforward, but to simplify the comparison we focus on representativeness.
4.2	Results
First, we compare our method with simple local search baselines. Then, we compare our method
with previously proposed algorithms.
Comparison with baselines. We set the baseline algorithms as two variants of local search algo-
rithms. The first baseline is Local-Search-SUMM described above in Algorithm 1. The second
baseline, denoted by Restarts-SUMM, repeatedly restarts Local-Search-SUMM initialized with a
different single shot at each restart and then selects the best result. The algorithm stops when it fin-
ishes going over the entire video shots or when the run-time resources are reached. For each video
we set the Restart-SUMM maximum run-time allowed to be the video duration. Table 1 reports the
total distance achieved by the baselines and ILS-SUMM on SumMe, TvSum, and OSTD datasets.
Table 1: Results (total distance optimality percentage) of different variants of local search on
SumMe, TVSum and OSTD.
	SUmMe	TVSUm	OSTD
Local-Search-SUMM	70.80%	87.11%	91.66%
-Restart-SUMM-	93.19%	98.19%	94.95%
ILS-SUMM	98.48%	99.27%	98.38%
We can see that ILS-SUMM clearly outperforms Local-Search-SUMM. This result demonstrates the
importance of the exploration process of ILS, since stopping the algorithm in the first reached local
minimum as done in Local-Search-SUMM is far from optimal.
7
Under review as a conference paper at ICLR 2020
Although Restart-SUMM is significantly better than Local-Search-SUMM, it is still inferior to ILS-
SUMM. More essentially, Restart-SUMM is highly unpractical since in many videos the time it
takes for generating a summary with Restart-SUMM is equal to the time it takes watching the full
video (for more details see the run-time analysis below). This indicates the usefulness of the ILS
perturbation mechanism, which rather than initializing the solution to a completely new solution,
partially reuses the good solution it already obtained and thus obtains better results in less time.
Comparison with previous approaches. Table 2 shows the results of ILS-SUMM measured against
other video summarization methods that aim to minimize total distance, on SumMe, TvSum, and
OSTD. It can be seen that ILS-SUMM significantly outperforms the other approaches on all datasets.
Table 2: Results (total distance optimality percentage) of different approaches on SumMe, TVSum
and OSTD. Our ILS-SUMM exhibits a significant advantage over others
	SumMe	TVSum	OSTD
-DR-DSN-	90.78%	82.50%	62.56%
SUbmodUlarity	85.18%	94.14%	95.99%
ILS-SUMM-	98.48%	99.27%	98.38%
Run-time performance. Table 3 presents the run-time measurements of the PuLP, Submodular-
ity, Restart-SUMM and ILS-SUMM methods in OSTD dataset. Our experiments demonstrate that
for obtaining a reasonable solution, submodularity is the fastest approach. These results may be
expected since Submodularity runs only two iterations of greedily adding shots, without any fur-
ther exploration. However, as we presented above, ILS-SUMM obtains significantly better results
than submodular optimization, while enjoying a substantially better run-time scalability than PuLP.
With these numbers it is possible to make a decision of solution optimality vs. run-time for a given
specific use of video summarization.
Table 3: Run-time comparison (% of video duration) between PuLP, Submodularity, Restart-SUMM
and ILS-SUMM in OSTD dataset.
	PULP	Submodularity	Restart-SUMM	ILS-SUMM
Big BUck BUnny (596 [Sec])	1.96%	0.02%	8.08%	-0.33%-
La Chute dune Plume (624 [Sec])	0.48%	0.01%	2.12%	-0.09%-
Elephants Dream (654 [Sec])	0.60%	0.01%	2.34%	-0.11%-
Meridian (719[Sec])	1.66%	0.01%	5.10%	-0.21%-
Cosmos Laundromat (731 [Sec])	0.95%	0.01%	2.41%	-0.06%-
Tears ofSteel (734 [Sec])	1.51%	0.01%	6.90%	-0.29%-
Sintel (888 [Sec])	0.83%	0.01%	5.67%	-0.32%-
Jathia's Wager (1261 [Sec])	2.09%	0.02%	21.20%	-0.38%-
1000 Days (2620 [Sec])	5.48%	0.02%	71.48%	-0.98%-
Pentagon (3034 [Sec])	4.71%	0.02%	50.10%	-0.60%-
Seven Dead Men (3424 [Sec])	22.49%	0.02%	62.47%	-0.36%-
Boy Who Never Slept (4186 [Sec])	25.47%	0.03%	100%	-0.84%-
Sita Sings the Blues (4891 [Sec])	58.33%	0.06%	100%	-4.97%-
CH7 (5189 [Sec])	24.10%	0.02%	100%	-0.85%-
Honey (5210 [Sec])	45.12%	0.03%	100%	-1.19%-
Valkaama (5586 [Sec])	51.82%	0.04%	100%	-1.86%-
StarWreCk (6195 [Sec])	91.96%	0.05%	100%	-2.38%-
RoUte 66 (6205 [Sec])	49.06%	0.05% —	100% —	3.13%
4.3	Deep Features
Recently, deep features are being used for many applications, including video summarization, as
they give state-of-the-art results in many applications such as semantic image classification, visual
art processing and image restoration. However, since the question of what is a right evaluation of
video summarization is still an open question (Otani et al., 2019), there is no solid evidence for an
advantage in using deep features rather than color histogram features for this task. To decide which
8
Under review as a conference paper at ICLR 2020
(a) Visualization of the color histogram features.
(b) Visualization of the deep features.
Figure 3: Visualization of the features of the shots of ”Bearpark Climbing” video from SumMe
dataset. In each figure the features dimension were reduced to two dimensions using PCA. Figure
(a) visualizes the color histogram features, and Figure (b) visualizes the deep features.
features to use, we extracted both types of features for all videos from the SumMe dataset. For
color histograms we used 32 bins of each of the RGB channels, and as deep features we used the
penultimate layer from the ResNet model (He et al., 2016) pre-trained on ImageNet (Deng et al.,
2009). Then, for each video, we applied a dimensionality reduction on these features using PCA.
We observed that even though deep features are better in representing the semantics of the images,
color histogram features seem to represent background and scene changes better. For example,
Figure 3a visualizes the color histogram feature space of the ”Bearpark Climbing” video from the
SumMe dataset, and Figure 3b visualizes the deep feature space. The plot’s axes are the two first
principle components of the shot features. Each shot is represented by the image of the middle
frame in the shot. It can be seen that in both cases, deep and shallow features, different scenes
tend to be located and grouped in different parts of the feature space. However, the grouping of the
color histogram space visually looks better than the deep features grouping, especially given the task
definition of creating a summary which is visually similar to the source. Therefore we used the color
histogram features to represents shots in this paper. Future research may examine the integration of
deep and color histogram features.
5	Conclusion
In this paper, we have proposed a new subset selection algorithm based on the Iterated Local Search
(ILS) framework for unsupervised video summarization. Motivated by the success of ILS in many
computationally hard problems, we leverage this method for explicitly minimizing the total distance
between video shots and their nearest selected shots under a knapsack-like constraint on the total
summary duration. We have shown that a proper balance between local search and global explo-
ration indeed leads to an efficient and effective algorithm for the Knapsack Median problem. Our
experiments on video summarization datasets indicate that ILS-SUMM outperforms other video
summarization approaches and finds solutions with significantly better total distance. Furthermore,
experiments on a long videos dataset we have introduced demonstrate the high saclability of our
method.
References
Mustafa Avci and Seyda Topaloglu. A multi-dtart iterated local search algorithm for the generalized
quadratic multiple knapsack problem. Computers & Operations Research, 83:54-65, 2017.
9
Under review as a conference paper at ICLR 2020
Tommy Chheng. Video summarization using clustering. Department of Computer Science Univer-
sity of California, Irvine, 2007.
Yang Cong, Junsong Yuan, and Jiebo Luo. Towards scalable summarization of consumer videos via
sparse dictionary selection. IEEE Transactions on Multimedia, 14(1):66-75, 2011.
Jean-Francois Cordeau, Gilbert Laporte, and Federico Pasin. Iterated tabu search for the car se-
quencing problem. European Journal ofOperational Research, 191(3):945-956, 2008.
Oscar Cordon and Sergio Damas. Image registration with iterated local search. Journal OfHeuristics,
12(1-2):73-94, 2006.
Sandra Eliza Fontes De Avila, Ana Paula BrandaO Lopes, Antonio da LUz Jr, and Arnaldo de Albu-
querque Araujo. Vsumm: A mechanism designed to produce static video summaries and a novel
evaluation method. Pattern Recognition Letters, 32(1):56-68, 2011.
Annelies De Corte and Kenneth Sorensen. An iterated local search algorithm for water distribution
network design optimization. Networks, 67(3):187-198, 2016.
Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale hier-
archical image database. In 2009 IEEE Conference on Computer Vision and Pattern Recognition,
pp. 248-255. Ieee, 2009.
Hai Fang, Y Kilani, Jimmy Ho-Man Lee, and Peter J Stuckey. Reducing search space in local search
for constraint satisfaction. In AAAI/IAAI, pp. 28-33, 2002.
Michael Gygli, Helmut Grabner, Hayko Riemenschneider, and Luc Van Gool. Creating summaries
from user videos. In European Conference on Computer Vision, pp. 505-520. Springer, 2014.
Michael Gygli, Helmut Grabner, and Luc Van Gool. Video summarization by learning submodular
mixtures of objectives. In Proceedings of the IEEE Conference on Computer Vision and Pattern
Recognition,pp. 3090-3098, 2015.
Youssef Hadi, Fedwa Essannouni, and Rachid Oulad Haj Thami. Unsupervised clustering by k-
medoids for video summarization. In ISCCSP06 (The Second International Symposium on Com-
munications, Control and Signal Processing), 2006.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-
nition. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp.
770-778, 2016.
Yunjae Jung, Donghyeon Cho, Dahun Kim, Sanghyun Woo, and In So Kweon. Discriminative
feature learning for unsupervised video summarization. In Proceedings of the AAAI Conference
onArtificial Intelligence, volume 33, pp. 8537-8544, 2019.
Aditya Khosla, Raffay Hamid, Chih-Jen Lin, and Neel Sundaresan. Large-scale video summariza-
tion using web-image priors. In Proceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pp. 2698-2705, 2013.
Helena R LOUrenco, Olivier C Martin, and Thomas Stutzle. Iterated local search. In Handbook of
Metaheuristics, pp. 320-353. Springer, 2003.
Helena Ramalhinho LOUrenco, Olivier C Martin, and Thomas Stutzle. Iterated local search: Frame-
work and applications. In Handbook ofMetaheuristics, pp. 129-168. Springer, 2019.
Behrooz Mahasseni, Michael Lam, and Sinisa Todorovic. Unsupervised video summarization with
adversarial lstm networks. In Proceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pp. 202-211, 2017.
Ibrahim H Osman and James P Kelly. Meta-heuristics theory and applications. Journal of the
Operational Research Society, 48(6):657-657, 1997.
Mayu Otani, Yuta Nakashima, Esa Rahtu, and Janne Heikkila. Rethinking the evaluation of video
summaries. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,
pp. 7596-7604, 2019.
10
Under review as a conference paper at ICLR 2020
Danila Potapov, Matthijs Douze, Zaid Harchaoui, and Cordelia Schmid. Category-specific video
summarization. In European Conference on Computer Vision, pp. 540-555. Springer, 2014.
Python Software Foundation. Ffprobe, https://pypi.org/project/ffprobe, 2019.
Celso C Ribeiro, Daniel Aloise, Thiago F Noronha, Caroline Rocha, and Sebastian Urrutia. A hybrid
heuristic for a multi-objective real-life car sequencing problem with painting and assembly line
constraints. European Journal of Operational Research, 191(3):981-992, 2008.
Daniel Rotman, Dror Porat, and Gal Ashour. Robust and efficient video scene detection using
optimal sequential grouping. In 2016 IEEE International Symposium on Multimedia (ISM), pp.
275-280. IEEE, 2016.
Yale Song, Jordi Vallmitjana, Amanda Stent, and Alejandro Jaimes. Tvsum: Summarizing web
videos using titles. In Proceedings of the IEEE Conference on Computer Vision and Pattern
Recognition, pp. 5179-5187, 2015.
Peter JM Van Laarhoven and Emile HL Aarts. Simulated annealing. In Simulated Annealing: Theory
and Applications, pp. 7-15. Springer, 1987.
Li Yuan, Francis EH Tay, Ping Li, Li Zhou, and Jiashi Feng. Cycle-sum: cycle-consistent adversarial
lstm networks for unsupervised video summarization. arXiv preprint arXiv:1904.08265, 2019.
Yitian Yuan, Tao Mei, Peng Cui, and Wenwu Zhu. Video summarization by learning deep side
semantic embedding. IEEE Transactions on Circuits and Systems for Video Technology, 29(1):
226-237, 2017.
Ke Zhang, Wei-Lun Chao, Fei Sha, and Kristen Grauman. Video summarization with long short-
term memory. In European Conference on Computer Vision, pp. 766-782. Springer, 2016.
Bin Zhao and Eric P Xing. Quasi real-time summarization for consumer videos. In Proceedings of
the IEEE Conference on Computer Vision and Pattern Recognition, pp. 2513-2520, 2014.
Bin Zhao, Xuelong Li, and Xiaoqiang Lu. Hsa-rnn: Hierarchical structure-adaptive rnn for video
summarization. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recog-
nition, pp. 7405-7414, 2018.
Kaiyang Zhou, Yu Qiao, and Tao Xiang. Deep reinforcement learning for unsupervised video sum-
marization with diversity-representativeness reward. In Thirty-Second AAAI Conference on Arti-
ficial Intelligence, 2018.
11