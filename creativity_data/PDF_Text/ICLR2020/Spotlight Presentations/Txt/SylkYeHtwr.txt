Published as a conference paper at ICLR 2020
SUMO: Unbiased Estimation of Log Marginal
Probability for Latent Variable Models
Yucen Luo*
Tsinghua University
luoyc15@mails.tsinghua.edu.cn
Alex Beatson
Princeton University
abeatson@cs.princeton.edu
Mohammad Norouzi
Google Research
mnorouzi@google.com
Jun Zhu
Tsinghua University
dcszj@tsinghua.edu.cn
David Duvenaud
University of Toronto
duvenaud@cs.toronto.edu
Ryan P. Adams
Princeton University
rpa@princeton.edu
Ricky T. Q. Chen*
University of Toronto
rtqichen@cs.toronto.edu
Ab stract
Standard variational lower bounds used to train latent variable models produce bi-
ased estimates of most quantities of interest. We introduce an unbiased estimator
of the log marginal likelihood and its gradients for latent variable models based on
randomized truncation of infinite series. If parameterized by an encoder-decoder
architecture, the parameters of the encoder can be optimized to minimize its vari-
ance of this estimator. We show that models trained using our estimator give better
test-set likelihoods than a standard importance-sampling based approach for the
same average computational cost. This estimator also allows use of latent variable
models for tasks where unbiased estimators, rather than marginal likelihood lower
bounds, are preferred, such as minimizing reverse KL divergences and estimating
score functions.
1	Introduction
Latent variable models are powerful tools for constructing highly expressive data distributions and
for understanding how high-dimensional observations might possess a simpler representation. La-
tent variable models are often framed as probabilistic graphical models, allowing these relation-
ships to be expressed in terms of conditional independence. Mixture models, probabilistic principal
component analysis (Tipping & Bishop, 1999), hidden Markov models, and latent Dirichlet allo-
cation (Blei et al., 2003) are all examples of powerful latent variable models. More recently there
has been a surge of interest in probabilistic latent variable models that incorporate flexible nonlinear
likelihoods via deep neural networks (Kingma & Welling, 2014). These models can blend the advan-
tages of highly structured probabilistic priors with the empirical successes of deep learning (Johnson
et al., 2016; Luo et al., 2018). Moreover, these explicit latent variable models can often yield rel-
atively interpretable representations, in which simple interpolation in the latent space can lead to
semantically-meaningful changes in high-dimensional observations (e.g., Higgins et al. (2017)).
It can be challenging, however, to fit the parameters of a flexible latent variable model, since com-
puting the marginal likelihood of the data requires integrating out the latent variables. Typical
approaches to this problem include the celebrated expectation maximization algorithm (Dempster
et al., 1977), Markov chain Monte Carlo, and the Laplace approximation. Variational inference gen-
eralizes expectation maximization by forming a lower bound on the aforementioned (log) marginal
likelihood, using a tractable approximation to the unmanageable posterior over latent variables.
The maximization of this lower bound—rather than the true log marginal likelihood—is often rela-
tively straightforward when using automatic differentiation and Monte Carlo sampling. However, a
* Equal contribution.
1
Published as a conference paper at ICLR 2020
lower bound may be ill-suited for tasks such as posterior inference and other situations where there
exists an entropy maximization objective; for example in entropy-regularized reinforcement learn-
ing (Williams & Peng, 1991; Mnih et al., 2016; Norouzi et al., 2016) which requires minimizing the
log probability of the samples under the model.
While there is a long history in Bayesian statistics of estimating the marginal likelihood (e.g., New-
ton & Raftery (1994); Neal (2001)), we often want high-quality estimates of the logarithm of the
marginal likelihood, which is better behaved when the data is high dimensional; it is not as suscepti-
ble to underflow and it has gradients that are numerically sensible. However, the log transformation
introduces some challenges: Monte Carlo estimation techniques such as importance sampling do
not straightforwardly give unbiased estimates of this quantity. Nevertheless, there has been signifi-
cant work to construct estimators of the log marginal likelihood in which it is possible to explicitly
trade off between bias against computational cost (Burda et al., 2016; Bamler et al., 2017; Nowozin,
2018). Unfortunately, while there are asymptotic regimes where the bias of these estimators ap-
proaches zero, it is always possible to optimize the parameters to increase this bias to infinity.
In this work, we construct an unbiased estimator of the log marginal likelihood. Although there
is no theoretical guarantee that this estimator has finite variance, we find that it can work well in
practice. We show that this unbiased estimator can train latent variable models to achieve higher test
log-likelihood than lower bound estimators at the same expected compute cost. More importantly,
this unbiased estimator allows us to apply latent variable models in situations where these models
were previously problematic to optimize with lower bound estimators. Such applications include
latent variable modeling for posterior inference and for reinforcement learning in high-dimensional
action spaces, where an ideal model is one that is highly expressive yet efficient to sample from.
2	Preliminaries
2.1	Latent variable models
Latent variable models (LVMs) describe a distribution over data in terms of a mixture over unob-
served quantities. Let pθ(x) be a family of probability density (mass) functions on a data space X,
indexed by parameters θ. We will generally refer to this as a “density” for consistency, even when
the data should be understood to be discrete; similarly we will use integrals even when the marginal-
ization is over a discrete set. In a latent variable model, pθ (x) is defined via a space of latent
variables Z, a family of mixing measures on this latent space with density denoted pθ(z), and a
conditional distribution pθ(x | z). This conditional distribution is sometimes called an “observation
model” or a conditional likelihood. We will take θ to parameterize both pθ (x | z) and pθ (z) in the
service of determining the marginal pθ (x) via the mixture integral:
Pθ(x) := / Pθ(X | z)pθ(Z) dz = Ez〜pθ(z) [pθ(X | z)].
Z
(1)
This simple formalism allows for a large range of modeling approaches, in which complexity can
be baked into the latent variables (as in traditional graphical models), into the conditional likelihood
(as in variational autoencoders), or into both (as in structured VAEs). The downside of this mixing
approach is that the integral may be intractable to compute, making it difficult to evaluate pθ(x)—
a quantity often referred to in Bayesian statistics and machine learning as the marginal likelihood
or evidence. Various Monte Carlo techniques have been developed to provide consistent and of-
ten unbiased estimators ofpθ(X), but it is usually preferable to work with log pθ (X) and unbiased
estimation of this quantity has, to our knowledge, not been previously studied.
2.2	Training latent variable models
Fitting a parametric distribution to observed data is often framed as the minimization of a difference
between the model distribution and the empirical distribution. The most common difference measure
is the forward Kullback-Leibler (KL) divergence; if pdata(X) is the empirical distribution andpθ(X)
is a parametric family, then minimizing the KL divergence (DKL) with respect to θ is equivalent to
maximizing the likelihood:
pd (X)
DKL(Pdata || Pθ ) =	Pdata(X) log ——dx= dx = -Edata [log Pθ (x)] + const.
X	pθ (X)
(2)
2
Published as a conference paper at ICLR 2020
Equivalently, the optimization problem of finding the MLE parameters θ comes down to maximizing
the expected log probability of the data:
θMLE = arg min DKL(Pdata || Pθ) = arg max Edata [log Pθ (x)] .	(3)
θθ
Since expectations can be estimated in an unbiased manner using Monte Carlo procedures, simple
subsampling of the data enables powerful stochastic optimization techniques, with stochastic gradi-
ent descent in particular forming the basis for learning the parameters of many nonlinear models.
However, this requires unbiased estimates of Vθ logpθ(x), which are not available for latent vari-
able models. Instead, a stochastic lower bound of logpθ (x) is often used and then differentiated for
optimization.
Though many lower bound estimators (Burda et al., 2016; Bamler et al., 2017; Nowozin, 2018) are
applicable, we focus on an importance-weighted evidence lower bound (Burda et al., 2016). This
lower bound is constructed by introducing a proposal distribution q(z; x) and using it to form an
importance sampling estimate of the marginal likelihood:
pθ(x | z) pθ (z)	pθ(x | z) pθ (z)
Pθ(X)=J	Pθ(x	I Z) Pθ(z) dz = J	q(z; x)-q(z,	χ)-dz =	Ez〜q -χ)-- .	(4)
IfK samples are drawn from q(z; x) then this provides an unbiased estimate ofpθ (x) and the biased
“importance-weighted autoencoder” estimator IWAEK (x) oflogpθ(x) is given by
1 K pθ(x I zk)pθ(zk)	iid
IWAEk (x)=log KN——q(^―^)——,Zk 〜q(z； x).	(5)
The special case of K = 1 generates an unbiased estimate of the evidence lower bound (ELBO),
which is often used for performing variational inference by stochastic gradient descent. While the
IWAE lower bound acts as a useful replacement of log pθ (x) in maximum likelihood training, it may
not be suitable for other objectives such as those that involve entropy maximization. We discuss tasks
for which a lower bound estimator would be ill-suited in Section 3.4.
There are two properties of IWAE that will allow us to modify it to produce an unbiased estimator:
First, it is consistent in the sense that as the number of samples K increases, the expectation of
IWAEK (x) converges to logpθ(x). Second, it is also monotonically non-decreasing in expectation:
logpθ(x) = lim E[IWAEK(x)]	and	E[IWAEK+1(x)] ≥ E[IWAEK(x)] .	(6)
K→∞
These properties are sufficient to create an unbiased estimator using the Russian roulette estimator.
2.3 Russian roulette estimator
In order to create an unbiased estimator of the log probability function, we employ the Russian
roulette estimator (Kahn, 1955). This estimator is used to estimate the sum of infinite series, where
each sample of the estimator almost surely requires only a finite amount of computation. Intuitively,
the Russian roulette estimator relies on a randomized truncation and upweighting of each term to
account for the possibility of not computing the remaining terms.
To illustrate the idea, let ∆k denote the k-th term of an infinite series. Assume the partial sum of the
series P∞=ι ∆k converges to some quantity We wish to obtain. We can construct a simple estimator
by always computing the first term then flipping a coin b 〜Bernoulli(q) to determine whether we
stop or continue evaluating the remaining terms. With probability 1 - q, we compute the rest of the
series. By reweighting the remaining future terms by 1/(1-q), we obtain an unbiased estimator:
Y = ∆ι + ( P= △k
1-q
「一 ~ P∞ c∆	∞ ~
lb=0 + (0) Ib=I	E[Y] = ∆ 1 + W=2	(1 - q) = X ∆k.
- q	k=1
To obtain the “Russian roulette” (RR) estimator (Forsythe & Leibler, 1950), we repeatedly apply this
trick to the remaining terms. In effect, we make the number of terms a random variable K, taking
values in 1, 2, . . . to use in the summation (i.e., the number of coin flips) from some distribution
3
Published as a conference paper at ICLR 2020
with probability mass function p(K) = P(K = K) with support over the positive integers. With K
drawn from p(K), the estimator takes the form:
K ∆	∞
Y(K) = E PKd⅛	EK-P(K) [Y(K)] = ∑δ k.	⑺
k=1	k=1
The equality on the right hand of equation 7 holds so long as (i) P(K ≥k) > 0, ∀k > 0, and (ii) the
series converges absolutely, i.e., P∞=ι ∣∆k| < ∞ (Chen et al. (2019); Lemma 3). This condition
ensures that the average of multiple samples will converge to the value of the infinite series by the
law of large numbers. However, the variance of this estimator depends on the choice of p(K) and
can potentially be very large or even infinite (McLeish, 2011; Rhee & Glynn, 2015; Beatson &
Adams, 2019).
3	SUMO: Unbiased estimation of log probability for LVMs
3.1	Russian roulette to debias lower bounds
We can turn any absolutely convergent series into a telescoping series and apply the Russian roulette
randomization to form an unbiased stochastic estimator. We focus here on the IWAE bound de-
scribed in Section 2.2. Let ∆k(x) = IWAEk+1(x) - IWAEk(x), then since Eq[∆k(x)] converges
absolutely, we apply equation 7to construct our estimator, which we call SUMO (Stochastically
Unbiased Marginalization Objective). The detailed derivation of SUMO is in Appendix A.1.
K ∆ (x)
SUMO(X)= IWAEι(x) +V—k(ɪ	where K 〜P(K).	(8)
P(K ≥ k)
The randomized truncation of the series using the Russian roulette estimator means that this is an
unbiased estimator of the log marginal likelihood, regardless of the distribution p(K):
E [SUMO(x)] = logpθ (x) ,	(9)
where the expectation is taken over p(K) and q(z; x) (see Algorithm 1 for our exact sampling
procedure). Furthermore, under some conditions, We have E [VθSUMO(x)] = VθE [SUMO(χ)]=
Vθ logpθ(x) (see Appendix A.4).
3.2	OPTIMIZING VARIANCE-COMPUTE PRODUCT BY CHOICE OF p(K)
To efficiently optimize a limit, one should choose an estimator to minimize the product of the sec-
ond moment of the gradient estimates and the expected compute cost per evaluation. The choice
of P(K) effects both the variance and computation cost of our estimator. Denoting G^ := VθY
and ∆gk := Vθ[IWAEk+1(x) - IWAEk(x)], the Russian roulette estimator is optimal across a broad
family of unbiased randomized truncation estimators if the ∆gk are statistically independent, in which
case it has second moment E||G||2 = P∞=ι 叫9川沙(兀之左)(Beatson & Adams, 2019). While the
∆gk are not in fact strictly independent with our sampling procedure (Algorithm 1), and other estima-
tors within the family may perform better, we justify our choice by showing that E∆i ∆j for i 6= j
converges to zero much faster than E∆* 1 2 3 4 5 6k (Appendices A.2 & A.3). In the following, we assume
independence of ∆gk and choose P(K) to minimize the product of compute and variance.
Algorithm 1 Computing SUMO, an unbiased estimator of log P(x).
Input: x, m ≥ 1, encoder q(z; x), decoderp(x,z), P(K), reverse_cdf (∙) = P(K ≥ ∙)
1: Sample K 〜P(K)..
2: Sample {zk}K+m % q(z; x)
3: log wk — logp(x,zk) — log q(zk ； x)
4: ks — [1,...,K + m]
5: cum.iwae J log_cumsum_exp(logWk) — log(ks[:k+1])
6: inv_weights = 1/reverse_cdf(ks)
return cum_iwae[m-1] + sum(inv_weights * (cum_iwae[m:] - cum_iwae[m-1:-1]))
4
Published as a conference paper at ICLR 2020
We first show that E∣∣∆g∣∣2 is O(1∕k2) (Appendix A.5). This implies the optimal CompUte-Variance
product (Rhee & Glynn, 2015; Beatson & Adams, 2019) is given by P(K ≥ k) 8 p∕E∣∆k||2). In
oUr case, this gives P(K ≥ k) = 1/k, which resUlts in an estimator with infinite expected compUta-
tion and no finite bound on variance. In fact, any p(K) which gives rise to provably finite variance
requires a heavier tail than P(K ≥ k) = 1/k and so will have infinite expected computation.
Though we could not theoretically show that our estimator and gradients have finite variance, we
empirically find that gradient descent converges —even in the setting of minimizing log probability.
We plot ∣∣∆k||2 for the toy variational inference task used to assess signal to noise ratio in Tucker
et al. (2018) and Rainforth et al. (2018b), and find that they converge faster than R in practice
(Appendix A.6). While this indicates the variance is better than the theoretical bound, an estimator
having infinite expected computation cost will always be an issue as it indicates significant proba-
bility of sampling arbitrarily large K. We therefore modify the tail of the sampling distribution such
that the estimator has finite expected computation:
P(K≥k)={1/:∙(1-o.i)k-a ifk<α	(IO)
We typically choose α = 80, which gives an expected computation cost of approximately 5 terms.
3.2.1	Trading variance and compute
One way to improve the RR estimator is to construct it so that some minimum number of terms (de-
noted here as m) are always computed. This puts a lower bound on the computational cost, but can
potentially lower variance, providing a design space for trading off estimator quality against com-
putational cost. This corresponds to a choice ofRR estimator in which P(K = K) = 0 for K ≤ m.
This computes the sum out to m terms (effectively computing IWAEm) and then estimates the re-
maining difference with Russian roulette:
SUMO(X) = IWAEm(X) + XX J^(X) , K 〜P(K)	(11)
P(K ≥ k)
k=m
In practice, instead of tuning parameters ofp(K), we set m to achieve a given expected computation
cost per estimator evaluation for fair comparison with IWAE and related estimators.
3.3	TRAINING q(z ; X) TO REDUCE VARIANCE
The SUMO estimator does not require amortized variational inference, but the use of an “encoder”
to produce an approximate posterior q(z; X) has been shown to be a highly effective way to perform
rapid feedforward inference in neural latent variable models. We use φ to denote the parameters of
the encoder qφ (z; X). However, the gradients of SUMO with respect to φ are in expectation zero
precisely because SUMO is an unbiased estimator of logpθ (X), regardless of our choice ofqφ(z; X).
Nevertheless, we would expect the choice of qφ(z; X) significantly impacts the variance of our esti-
mator. As such, we optimize qφ(z; X) to reduce the variance of the SUMO estimator. We can obtain
unbiased gradients in the following way (Ruiz et al., 2016; Tucker et al., 2017):
VφVar[SUMO] = VφE[SUMO2] - 2^φ(E[SUMO∏r = E[V。SUMO2] .	(12)
Notably, the expectation of this estimator depends on the variance of SUMO, which we have not
been able to bound. In practice, we observe gradients which are sometimes very large. We apply
gradient clipping to the encoder to clip gradients which are excessively large in magnitude. This
helps stabilize the training progress but introduces bias into the encoder gradients. Fortunately,
the encoder itself is merely a tool for variance reduction, and biased gradients with respect to the
encoder can still significantly help optimization.
3.4	Applications of unbiased log probability
Here we list some applications where an unbiased log probability is useful. Using SUMO to replace
existing lower bound estimates allows latent variable models to be used for new applications where
a lower bound is inappropriate. As latent variable models can be both expressive and efficient to
sample from, they are frequently useful in applications where the data is high-dimensional and
samples from the model are needed.
5
Published as a conference paper at ICLR 2020
Minimizing log pθ (x). Some machine learning objectives include terms that seek to increase the
entropy of the learned model. The “reverse KL” objective—often used for training models to per-
form approximate posterior inference-minimizes Ex〜p@(x)[logpθ(x) - logπ(x)] where π(x) is a
target density that may only be known up a normalization constant. Local updates of this form are
the basis of the expectation propagation procedure (Minka, 2001). This objective has also been used
for distilling autoregressive models that are inefficient at sampling (Oord et al., 2018). Moreover, re-
verse KL is connected to the use of entropy-regularized objectives (Williams & Peng, 1991; Ziebart,
2010; Mnih et al., 2016; Norouzi et al., 2016) in decision-making problems, where the goal is to
encourage the decision maker toward exploration and prevent it from settling into a local minimum.
Unbiased score function Vθ logpθ(x). The score function is the gradient of the log-likelihood
with respect to the parameters and has uses in estimating the Fisher information matrix and per-
forming stochastic gradient Langevin dynamics (Welling & Teh, 2011), among other applications.
Of particular note, the REINFORCE gradient estimator (Williams, 1992)—generally applicable for
optimizing objectives of the form maxθ Ex〜p@(x)[R(x)]—is estimated using the score function.
This can be replaced with the gradient of SUMO which itself is an estimator of the score func-
tion Vθ logpθ(x).
VθEx 〜pθ(x) [R(χ)] = Ex 〜pθ(x) [R(x)Vθ log pθ (x)]
=Ex 〜pο(x)[R(x)Vθ E[SUMO(x)]]	(13)
=Ex 〜pθ(x)[E[R(X)Vθ SUMO(X)]]
where the inner expectation is over the stochasticity of the SUMO estimator. Such estimators are
often used for reward maximization in reinforcement learning wherepθ(x) is a stochastic policy.
4	Related Work
There is a long history in Bayesian statistics of marginal likelihood estimation in the service of
model selection. The harmonic mean estimator (Newton & Raftery, 1994), for example, has a long
(and notorious) history as a consistent estimator of the marginal likelihood that may have infinite
variance (Murray & Salakhutdinov, 2009) and exhibits simulation psuedo-bias (Lenk, 2009). The
Chib estimator (Chib, 1995), the Laplace approximation, and nested sampling (Skilling, 2006) are
alternative proposals that can often have better properties (Murray & Salakhutdinov, 2009). An-
nealed importance sampling (Neal, 2001) probably represents the gold standard for marginal like-
lihood estimation. These, however, turn into consistent estimators at best when estimating the log
marginal probability (Rainforth et al., 2018a). Bias removal schemes such as jackknife variational
inference (Nowozin, 2018) have been proposed to debias log-evidence estimation, IWAE in partic-
ular. Hierarchical IWAE (Huang et al., 2019) uses a joint proposal to induce negative correlation
among samples and connects the convergence of variance of the estimator and the convergence of
the lower bound.
Russian roulette also has a long history. It dates back to unpublished work from von Neumann and
Ulam, who used it to debias Monte Carlo methods for matrix inversion (Forsythe & Leibler, 1950)
and particle transport problems (Kahn, 1955). It has gained popularity in statistical physics (Spanier
& Gelbard, 1969; Kuti, 1982; Wagner, 1987), for unbiased ray tracing in graphics and render-
ing (Arvo & Kirk, 1990), and for a number of estimation problems in the statistics community (Wei
& Murray, 2017; Lyne et al., 2015; Rychlik, 1990; 1995; Jacob & Thiery, 2015; Jacob et al., 2017).
It has also been independently rediscovered many times (Fearnhead et al., 2008; McLeish, 2011;
Rhee & Glynn, 2012; Tallec & Ollivier, 2017).
The use of Russian roulette estimation in deep learning and generative modeling applications has
been gaining traction in recent years. It has been used to solve short-term bias in optimization
problems (Tallec & Ollivier, 2017; Beatson & Adams, 2019). Wei & Murray (2017) estimates the
reciprocal normalization constant of an unnormalized density. Han et al. (2018) uses a similar ran-
dom truncation approach to estimate the distribution of eigenvalues in a symmetric matrix. Along
similar motivations with our work, Chen et al. (2019) uses this estimator to construct an unbiased
estimator of the change of variables equation in the context of normalizing flows (Rezende & Mo-
hamed, 2015), and Xu et al. (2019) uses itto construct unbiased log probability for a nonparameteric
distribution in the context of variational autoencoders (Kingma & Welling, 2014).
6
Published as a conference paper at ICLR 2020
Though we extend latent variable models to applications that require unbiased estimates of log
probability and benefit from efficient sampling, an interesting family of models already fulfill
these requirements. Normalizing flows (Rezende & Mohamed, 2015; Dinh et al., 2017) offer ex-
act log probability and certain models have been proven to be universal density estimators (e.g.
Huang et al. (2018)). However, these models often require restrictive architectural choices with no
dimensionality-reduction capabilities, and make use of many more parameters to scale up (Kingma
& Dhariwal, 2018) than alternative generative models. Discrete variable versions of these models
are still in their infancy and make use of biased gradients (Tran et al., 2019; Hoogeboom et al.,
2019), whereas latent variable models naturally extend to discrete observations.
5	Density Modeling Experiments
We first compare the performance of SUMO when used as a replacement to IWAE with the same
expected cost on density modeling tasks. We make use of two benchmark datasets: dynamically
binarized MNIST (LeCun et al., 1998) and binarized OMNIGLOT (Lake et al., 2015).
We use the same neural network architecture as IWAE (Burda et al., 2016). The prior p(z) is a 50-
dimensional standard Gaussian distribution. The conditional distributions p(xi |z) are independent
Bernoulli, with the decoder parameterized by two hidden layers, each with 200 tanh units. The
approximate posterior q(z; x) is also a 50-dimensional Gaussian distribution with diagonal covari-
ance, whose mean and variance are both parameterized by two hidden layers with 200 tanh units.
We reimplemented and tuned IWAE, obtaining strong baseline results which are better than those
previously reported. We then used the same hyperparameters to train with the SUMO estimator.
We find clipping very large gradients can help performance, as large gradients may be infrequently
sampled. This introduces a small amount of bias into the gradients while reducing variance, but
can nevertheless help achieve faster convergence and should still result in a less-biased estimator.
A posthoc study of the effect on final test performance as a function of this bias-variance tradeoff
mechanism is discussed in Appendix A.7. We note that gradient clipping is only done for the density
modeling experiments.
The averaged test log-likelihoods and standard deviations over 3 runs are summarized in Table 1.
To be consistent with existing literature, we evaluate our model using IWAE with 5000 samples.
In all the cases, SUMO achieves slightly better performance than IWAE with the same expected
cost. We also bold the results that are statistically insignificant from the best performing model
according to an unpaired t-test with significance level 0.05. However, we do see diminishing returns
as we increase k, suggesting that as we increase compute, the variance of our estimator may impact
performance more than the bias of IWAE.
6	Latent variables models for entropy maximization
We move on to our first task for which a lower bound estimate of log probability would not suf-
fice. The reverse KL objective is useful when we have access to a (possibly unnormalized) target
Table 1: Test negative log-likelihood of the trained model, estimated using IWAE(k=5000). For
SUMO, k refers to the expected number of computed terms.
Training Objective	MNIST			OMNIGLOT		
	k=5	k=15	k=50	k=5	k=15	k=50
ELBO (burda et al., 2016)	86.47	—	86.35	107.62	—	107.80
IWAE (burda et al., 2016)	85.54	—	84.78	106.12	—	104.67
ELBO (our impl.)	85.97±0.01	85.99±0.05	85.88±0.07	106.79±0.08	106.98±0.19	106.84±0.13
IWAE (our impl.)	85.28±0.01	84.89±0.03	84.50±0.02	104.96±0.04	104.53±0.05	103.99±0.12
JVI (our impl.)	—	—	84.75±0.03	—	—	104.08±0.11
SUMO	85.09±0.01	84.71±0.02	84.40±0.03	104.85±0.04	104.29±0.12	103.79±0.14
7
Published as a conference paper at ICLR 2020
Target log probability Training w/ IWAE (k=15) TrainingW/SUMO (k=15)	Model samples
Figure 1: We trained latent variable models for posterior inference, which requires minimizing log
probability under the model. Training with IWAE leads to optimizing for the bias while leaving the
true model in an unstable state, whereas training with SUMO—though noisy—leads to convergence.
distribution but no efficient sampling algorithm.
minDkl(Pe(X) W*(X)) = minEx〜pe(x)[logpθ(X) - logp*(X)]	(14)
A major problem with fitting latent variables models to this objective is the presence of an entropy
maximization term, effectively a minimization oflogpe(X). Estimating this log marginal probability
with a lower bound estimator could result in optimizing θ to maximize the bias of the estimator
instead of the true objective. Our experiments demonstrate that this causes IWAE to often fail to
optimize the objective unless we use a large amount of computation.
Modifying IWAE. The bias of the IWAE estimator can be interpreted as the KL between an
importance-weighted approximate posterior qIW (z; X) implicitly defined by the encoder and the
true posterior p(z|X) (Domke & Sheldon, 2018). Both the encoder and decoder parameters can
therefore affect this bias. In practice, we find that the encoder optimization proceeds at a faster
timescale than the decoder optimization: i.e., the encoder can match qIW (z; X) to the decoder’s
posterior p(z|X) more quickly than the latter can match an objective. For this reason, we train the
encoder to reduce bias and use a minimax training objective
min max Ex〜p(x)[IWAEK (x) — logp*(x)]	(15)
p(x,z) q(z;x)
Though this is still a lower bound with unbounded bias, it makes for a stronger baseline than op-
timizing q(z; X) in the same direction as p(X, z). We find that this approach can indeed work in
practice, but requires setting k extremely high.
We choose a “funnel” target distribution (Fig-
ure 1) similar to the distribution used as a
benchmark for inference in Neal et al. (2003),
where p* has support in R2 and is defined
p*(X1, X2) = N(X1; 0, 1.352)N(X2; 0, e2x1)
We use neural networks with one hidden layer
of 200 hidden units and tanh activations for
both the encoder and decoder networks. We
use 20 latent variables, with p(z), pe(X|z), and
qφ(z; X) all being Gaussian distributed.
Figure 2 shows the learning curves when using
IWAE and SUMO. Unless k is set very large,
IWAE will at some point start optimizing the
bias instead of the actual objective. The reverse
KL is a non-negative quantity, so any estimate
significantly below zero can be attributed to the
unbounded bias. On the other hand, SUMO
Figure 2: Training with reverse KL requires min-
imizing log p(X). SUMO estimates are unbiased
and trains well, but minimizing the lower bound
IWAE with small k leads to estimates of -∞.
correctly optimizes for the objective even with a small expected cost. Increasing the expected cost k
for SUMO simply reduces variance. We also found that if k is set sufficiently large, then IWAE can
work when we train using the minimax objective in equation 15, suggesting that a sufficiently debi-
ased estimator can also work in practice. However, this requires much more compute and likely does
not scale compared to SUMO. We also visualize the contours of the resulting models in Figure 1.
For IWAE, we visualize the model a few iterations before it reaches numerical instability.
8
Published as a conference paper at ICLR 2020
O	20∞ 4OOO 60∞ SoOO 100∞
Iteration
QPBO w/ 100 variables
QPBO w/ 500 variables
QPBO w/ 500 variables
& Entropy regularization
Figure 3: Latent variable policies allow faster exploration than autoregressive policy models, while
being more expressive than an independent policy. SUMO works well with entropy regularization,
whereas IWAE is unstable and converges to similar performance as the non-latent variable model.
7 Latent variable policies for combinatorial optimization
Let us now consider the problem of finding the maximum of a non-differentiable function, a special
case of reinforcement learning without an interacting environment. Variational optimization (Staines
& Barber, 2012) can be used to reformulate this as the optimization of a parametric distribution,
maxR(X) ≥ maxEx〜p@(x)[R(x)],	(16)
which is now a differentiable function with respect to the parameters θ, whose gradients can be
estimated using a combination of the REINFORCE gradient estimator and the SUMO estima-
tor (equation 13). Furthermore, entropy regularized reinforcement learning—where we maximize
R(x) + λH(pθ) with H(pθ) being the entropy of pθ (x)—encourages exploration and is inherently
related to minimizing a reverse KL objective with the target being an exponentiated reward (Norouzi
et al., 2016).
For concreteness, we focus on the problem of quadratic pseudo-Boolean optimization (QPBO)
where the objective is to maximize
R(x) =	wi(xi) +	wij(xi, xj)
(17)
i=1
i<j
where {xi}id=1 ∈ {0, 1} are binary variables. Without further assumptions, QPBO is NP-
hard (Boros & Hammer, 2002). As there exist complex dependencies between the binary variables
and optimization of equation 16 requires sampling from the policy distribution pθ (x), a model that
is both expressive and allows efficient sampling would be ideal. For this reason, we motivate the
use of latent variable models with independent conditional distributions, trained using the SUMO
estimator. Our baselines are an autoregressive policy, which captures dependencies but for which
sampling must be performed sequentially, and an independent policy, which is easy to sample from
but captures no dependencies.
d
PLVM(X)= / ɪɪpθ(Xi∣z)p(z)dz
i=1
d
pAutoreg (X) :=	p(Xi	∣X<i	)
i=1
d
pIndep (X) :=	p(Xi)
i=1
We note that Haarnoja et al. (2018) also argued for latent variable policies in favor of learning diverse
strategies but ultimately made use of normalizing flows which do not require marginalization.
We constructed one problem instance for each d ∈ {100, 500}, which we note are already intractable
for exact optimization. For each instance, we randomly sampled the weights wi and wij uniformly
from the interval [-1, 1]. Figure 3 shows the performance of each policy model. In general, the
independent policy is quick to converge to a local minima and is unable to explore different re-
gions, whereas more complex models have a better grasp of the “frontier” of reward distributions
during optimization. The autoregressive model works well overall but is much slower to train due
to its sequential sampling procedure; with d = 500, it is 19.2× slower per iteration than SUMO.
Surprisingly, we find that estimating the REINFORCE gradient with IWAE results in decent perfor-
mance when no entropy regularization is present. With entropy regularization, all policies improve
9
Published as a conference paper at ICLR 2020
significantly; however, training with IWAE in this setting results in performance similar to the inde-
pendent model, suggesting that it may not be using the latent state. On the other hand, SUMO works
with both REINFORCE gradient estimation and entropy regularization, albeit at the cost of slower
convergence due to variance.
8 Conclusion
We introduced SUMO, a new unbiased estimator of the log probability for latent variable models,
and demonstrated tasks for which this estimator performs better than standard lower bounds. Specif-
ically, we investigated applications involving entropy maximization where a lower bound performs
poorly, but our unbiased estimator can train properly with relatively smaller amount of compute.
In the future, we plan to investigate new families of gradient-based optimizers which can handle
heavy-tailed stochastic gradients. It may also be fruitful to investigate the use of convex combination
of consistent estimators within the SUMO approach, as any convex combination is unbiased, or to
apply variance reduction methods to increase stability of training with SUMO.
Acknowledgements
This work was partially funded by NSF IIS-1421780. Y.L and J.Z were supported by the NSF China
Project (No. 61620106010), Beijing NSF Project (No. L172037), the JP Morgan Faculty Research
Program and the NVIDIA NVAIL Program with GPU/DGX Acceleration.
References
James Arvo and David Kirk. Particle transport and image synthesis. ACM SIGGRAPH Computer
Graphics, 24(4):63-66,1990.
Robert Bamler, Cheng Zhang, Manfred Opper, and Stephan Mandt. Perturbative black box varia-
tional inference. In Advances in Neural Information Processing Systems. 2017.
Alex Beatson and Ryan P. Adams. Efficient optimization of loops and limits with randomized
telescoping sums. In International Conference on Machine Learning, 2019.
Mikoaj Bikowski, Dougal J. Sutherland, Michael Arbel, and Arthur Gretton. Demystifying MMD
GANs. In International Conference on Learning Representations, 2018.
David M Blei, Andrew Y Ng, and Michael I Jordan. Latent Dirichlet allocation. Journal of Machine
Learning Research, 3(Jan):993-1022, 2003.
Endre Boros and Peter L Hammer. Pseudo-Boolean optimization. Discrete Applied Mathematics,
123(1-3):155-225, 2002.
Yuri Burda, Roger Grosse, and Ruslan Salakhutdinov. Importance weighted autoencoders. In Inter-
national Conference on Learning Representations, 2016.
Ricky TQ Chen, Jens Behrmann, David Duvenaud, and Jorn-Henrik Jacobsen. Residual flows for
invertible generative modeling. Advances in Neural Information Processing Systems, 2019.
Siddhartha Chib. Marginal likelihood from the Gibbs output. Journal of the American Statistical
Association, 90(432):1313-1321, 1995.
Arthur P Dempster, Nan M Laird, and Donald B Rubin. Maximum likelihood from incomplete data
via the EM algorithm. Journal of the Royal Statistical Society: Series B (Methodological), 39(1):
1-22, 1977.
Laurent Dinh, Jascha Sohl-Dickstein, and Samy Bengio. Density estimation using real NVP. In
International Conference on Learning Representations, 2017.
Justin Domke and Daniel R Sheldon. Importance weighting and variational inference. In Advances
in Neural Information Processing Systems, pp. 4470-4479, 2018.
10
Published as a conference paper at ICLR 2020
Paul Fearnhead, Omiros Papaspiliopoulos, and Gareth O Roberts. Particle filters for partially ob-
served diffusions. Journal of the Royal Statistical Society: Series B (Statistical Methodology), 70
(4):755-777, 2008.
George E Forsythe and Richard A Leibler. Matrix inversion by a Monte Carlo method. Mathematics
of Computation, 4(31):127-129, 1950.
Tuomas Haarnoja, Kristian Hartikainen, Pieter Abbeel, and Sergey Levine. Latent space policies
for hierarchical reinforcement learning. In International Conference on Machine Learning, pp.
1846-1855, 2018.
Insu Han, Haim Avron, and Jinwoo Shin. Stochastic Chebyshev gradient descent for spectral opti-
mization. In Advances in Neural Information Processing Systems, pp. 7386-7396, 2018.
Irina Higgins, Loic Matthey, Arka Pal, Christopher Burgess, Xavier Glorot, Matthew M Botvinick,
Shakir Mohamed, and Alexander Lerchner. beta-VAE: Learning basic visual concepts with a
constrained variational framework. In International Conference on Machine Learning, 2017.
Emiel Hoogeboom, Jorn WT Peters, Rianne van den Berg, and Max Welling. Integer discrete flows
and lossless compression. arXiv preprint arXiv:1905.07376, 2019.
Chin-Wei Huang, David Krueger, Alexandre Lacoste, and Aaron Courville. Neural autoregressive
flows. In International Conference on Machine Learning, 2018.
Chin-Wei Huang, Kris Sankaran, Eeshan Dhekane, Alexandre Lacoste, and Aaron Courville. Hier-
archical importance weighted autoencoders. In International Conference on Machine Learning,
pp. 2869-2878, 2019.
Pierre E Jacob and Alexandre H Thiery. On nonnegative unbiased estimators. The Annals of Statis-
tics, 43(2):769-784, 2015.
Pierre E Jacob, John O'Leary, and YveS F Atchade. Unbiased Markov chain Monte Carlo with
couplings. arXiv preprint arXiv:1708.03625, 2017.
Matthew Johnson, David K Duvenaud, Alex Wiltschko, Ryan P Adams, and Sandeep R Datta. Com-
posing graphical models with neural networks for structured representations and fast inference.
In Advances in Neural Information Processing Systems, pp. 2946-2954, 2016.
Herman Kahn. Use of different Monte Carlo sampling techniques. Santa Monica, CA: RAND
Corporation, 1955. URL https://www.rand.org/pubs/papers/P766.html.
Diederik P Kingma and Max Welling. Auto-encoding variational Bayes. In International Conference
on Learning Representations, 2014.
Durk P Kingma and Prafulla Dhariwal. Glow: Generative flow with invertible 1x1 convolutions. In
Advances in Neural Information Processing Systems, pp. 10215-10224, 2018.
Julius Kuti. Stochastic method for the numerical study of lattice fermions. Physical Review Letters,
49(3):183, 1982.
Brenden M Lake, Ruslan Salakhutdinov, and Joshua B Tenenbaum. Human-level concept learning
through probabilistic program induction. Science, 350(6266):1332-1338, 2015.
Yann LeCun, Leon Bottou, Yoshua Bengio, Patrick Haffner, et al. Gradient-based learning applied
to document recognition. Proceedings of the IEEE, 86(11):2278-2324, 1998.
Peter Lenk. Simulation pseudo-bias correction to the harmonic mean estimator of integrated likeli-
hoods. Journal of Computational and Graphical Statistics, 18(4):941-960, 2009.
Yucen Luo, Tian Tian, Jiaxin Shi, Jun Zhu, and Bo Zhang. Semi-crowdsourced clustering with deep
generative models. In Advances in Neural Information Processing Systems, pp. 3212-3222, 2018.
Anne-Marie Lyne, Mark Girolami, Yves Atchade, Heiko Strathmann, Daniel Simpson, et al. On
Russian roulette estimates for Bayesian inference with doubly-intractable likelihoods. Statistical
science, 30(4):443-467, 2015.
11
Published as a conference paper at ICLR 2020
Don McLeish. A general method for debiasing a Monte Carlo estimator. Monte Carlo Methods and
Applications,17(4):301-315, 2011.
Thomas P Minka. Expectation propagation for approximate Bayesian inference. In Proceedings
of the Seventeenth Conference on Uncertainty in Artificial Intelligence, pp. 362-369. Morgan
Kaufmann Publishers Inc., 2001.
Volodymyr Mnih, Adria Puigdomenech Badia, Mehdi Mirza, Alex Graves, Timothy Lillicrap, Tim
Harley, David Silver, and Koray Kavukcuoglu. Asynchronous methods for deep reinforcement
learning. In International Conference on Machine Learning, pp. 1928-1937, 2016.
Iain Murray and Ruslan Salakhutdinov. Evaluating probabilities under high-dimensional latent vari-
able models. In D. Koller, D. Schuurmans, Y. Bengio, and L. Bottou (eds.), Advances in Neural
Information Processing Systems 21, pp. 1137-1144. 2009.
Radford M Neal. Annealed importance sampling. Statistics and Computing, 11(2):125-139, 2001.
Radford M Neal et al. Slice sampling. The Annals of Statistics, 31(3):705-767, 2003.
Michael A Newton and Adrian E Raftery. Approximate Bayesian inference with the weighted like-
lihood bootstrap. Journal of the Royal Statistical Society: Series B (Methodological), 56(1):3-26,
1994.
Mohammad Norouzi, Samy Bengio, Navdeep Jaitly, Mike Schuster, Yonghui Wu, Dale Schuurmans,
et al. Reward augmented maximum likelihood for neural structured prediction. In Advances In
Neural Information Processing Systems, pp. 1723-1731, 2016.
Sebastian Nowozin. Debiasing evidence approximations: On importance-weighted autoencoders
and jackknife variational inference. In International Conference on Learning Representations,
2018.
Aaron van den Oord, Yazhe Li, Igor Babuschkin, Karen Simonyan, Oriol Vinyals, Koray
Kavukcuoglu, George van den Driessche, Edward Lockhart, Luis C Cobo, Florian Stimberg, et al.
Parallel Wavenet: Fast high-fidelity speech synthesis. In International Conference on Machine
Learning, 2018.
Tom Rainforth, Robert Cornish, Hongseok Yang, Andrew Warrington, and Frank Wood. On nesting
Monte Carlo estimators. In International Conference on Machine Learning, 2018a.
Tom Rainforth, Adam R Kosiorek, Tuan Anh Le, Chris J Maddison, Maximilian Igl, Frank Wood,
and Yee Whye Teh. Tighter variational bounds are not necessarily better. In International Con-
ference on Machine Learning, 2018b.
Sashank J Reddi, Satyen Kale, and Sanjiv Kumar. On the convergence of Adam and beyond. In
International Conference on Learning Representations, 2018.
Danilo Jimenez Rezende and Shakir Mohamed. Variational inference with normalizing flows. In
International Conference on Machine Learning, 2015.
Chang-han Rhee and Peter W Glynn. A new approach to unbiased estimation for SDEs. In Pro-
ceedings of the Winter Simulation Conference, pp. 17. Winter Simulation Conference, 2012.
Chang-han Rhee and Peter W Glynn. Unbiased estimation with square root convergence for SDE
models. Operations Research, 63(5):1026-1043, 2015.
Francisco JR Ruiz, Michalis K Titsias, and David M Blei. Overdispersed black-box variational in-
ference. In Proceedings of the Thirty-Second Conference on Uncertainty in Artificial Intelligence,
2016.
Tomasz Rychlik. Unbiased nonparametric estimation of the derivative of the mean. Statistics &
probability letters, 10(4):329-333, 1990.
Tomasz Rychlik. A class of unbiased kernel estimates of a probability density function. Applica-
tiones Mathematicae, 22(4):485-497, 1995.
12
Published as a conference paper at ICLR 2020
John Skilling. Nested sampling for general Bayesian computation. Bayesian Analysis, 1(4):833-
859, 2006.
Jerome Spanier and Ely M Gelbard. Monte Carlo Principles and Neutron Transport Problems.
Addison-Wesley Publishing Company, 1969.
Joe Staines and David Barber. Variational optimization. arXiv preprint arXiv:1212.4507, 2012.
Corentin Tallec and Yann Ollivier. Unbiasing truncated backpropagation through time. arXiv
preprint arXiv:1705.08209, 2017.
Michael E Tipping and Christopher M Bishop. Probabilistic principal component analysis. Journal
of the Royal Statistical Society: Series B (Statistical Methodology), 61(3):611-622, 1999.
Dustin Tran, Keyon Vafa, Kumar Krishna Agrawal, Laurent Dinh, and Ben Poole. Discrete flows:
Invertible generative models of discrete data. arXiv preprint arXiv:1905.10347, 2019.
George Tucker, Andriy Mnih, Chris J Maddison, John Lawson, and Jascha Sohl-Dickstein. Rebar:
Low-variance, unbiased gradient estimates for discrete latent variable models. In Advances in
Neural Information Processing Systems, pp. 2627-2636, 2017.
George Tucker, Dieterich Lawson, Shixiang Gu, and Chris J Maddison. Doubly reparameterized
gradient estimators for Monte Carlo objectives. In International Conference on Learning Repre-
sentations, 2018.
Wolfgang Wagner. Unbiased Monte Carlo evaluation of certain functional integrals. Journal of
Computational Physics, 71(1):21-33, 1987.
Colin Wei and Iain Murray. Markov Chain Truncation for Doubly-Intractable Inference. In Pro-
ceedings of the 20th International Conference on Artificial Intelligence and Statistics, 2017.
Max Welling and Yee W Teh. Bayesian learning via stochastic gradient Langevin dynamics. In
Proceedings of the 28th International Conference on Machine Learning, pp. 681-688, 2011.
Ronald J Williams. Simple statistical gradient-following algorithms for connectionist reinforcement
learning. Machine learning, 8(3-4):229-256, 1992.
Ronald J Williams and Jing Peng. Function optimization using connectionist reinforcement learning
algorithms. Connection Science, 3(3):241-268, 1991.
Kai Xu, Akash Srivastava, and Charles Sutton. Variational Russian roulette for deep Bayesian
nonparametrics. In International Conference on Machine Learning, pp. 6963-6972, 2019.
Brian D Ziebart. Modeling purposeful adaptive behavior with the principle of maximum causal
entropy. PhD thesis, figshare, 2010.
13
Published as a conference paper at ICLR 2020
A Appendix
A. 1 Derivation of SUMO
Let
K
Eq[IWAEk(x)] = Ezι,..,zki)log K X Pp(X (Zk)pθ(zk)
k=1	q(zk ; x)
where z1, .., zk are sampled independently from q(z; x). And we define the k-th term of the infinite
series ∆k(x) := Eq [IWAEk+1(x)] - Eq[IWAEk(x)]. Using the properties of IWAE in equation 6,
we have ∆k (x) ≥ 0, and
∞∞
X ∣∆ k (X)I = X ∆ k (X)
k=1	k=1
lim Eq [IWAEk (X)] - Eq[IWAE1 (X)]
k→∞
log pθ(X) - Eq[IWAE1 (X)] < ∞,
(18)
which means the series converges absolutely. This is a sufficient condition for finite expectation of
the Russian roulette estimator (Chen et al. (2019); Lemma 3). Applying equation 7 to the series:
∞
log Pp (x) = Eq [IWAEι(x)] + X ∆ k (x)
k=1
Eq [IWAEι(x)] + EK 〜P(K)
K
X
k=1
Y / 、
∆ k(x)
P(K ≥ k
K
Es(K)1[IWAEι(x)] + X Eq [IWAEkP(IKx≥片WAEk(X)]
ES(K)1"lWAEι(x) + X IWAyK) ≥ kWAEk(X) ## .
Let ∆k(X) := IWAEk+1(X)	IWAEk(X), Hence our estimator is constructed:
SUMO(X)
IWAE1(X) + X P(Kl¾
K 〜p(K), Zk iid q(z; x).
(19)
(20)
(21)
(22)
(23)
And it can be easily seen from equation 22 and equation 23 that SUMO is an unbiased estimator of
the log marginal likelihood:
Ek^p(K),zi,...,zk^q(z;x) [SUMO(x)] = logPp(x).
(24)
A.2 CONVERGENCE OF ∆k
We follow the analysis of JVI (Nowozin, 2018), which applied the delta method for moments to
show the asymptotic results on the bias and variance of IWAEk both at a rate of O(ɪ). We build on
this analysis to analyze the convergence of ∆k.
Let Wi = p(；|Zi)P)Zi) and we define Yk := 1 Pk=I Wi as the sample mean and we have E [Yk ]=
E[w] = μ.
IWAEk = log Yk = log [μ + (Yk - μ)]
∞ ( 1)t
=log μ - X ɪt (Yk - μ)
t=1 μ
(25)
We note that We rely on ||Yk - μ∣∣ < 1 for this power series to converge. This condition was implic-
itly assumed, but not explicitly noted, in (Nowozin, 2018). This condition will hold for sufficiently
14
Published as a conference paper at ICLR 2020
large k so long as the moments of Wi exist: one could bound the probability ||K -μ∣∣ ≥ 1 by Cheby-
shev,s inequality or by the Central Limit Theorem. We use the central moments Yt ：= E[(K - μ)t]
and μt ：= E[(w - μ)t] for t ≥ 2.
E∆k = E(IWAEk+ι - IWAEk)2
∞ ( —1)t	,	æ ( —1)t	.
IOgμ - X t (K+ι- μ) - log μ+X + t (K - μ)
. q tμt q tμt
æ (―1)t .	.	一
X寸[(…一—〃)]
Expanding Eq. 28 to order two gives
eδ∕c = E — (K - μ - Yk+ι	+ μ) + ʒ-2	[(Yk	-	μ)2	- (Yk+i	-	u)2]	+	o(k-2)
μ	2μ
=-EE Yk+1 - Yk + ^X~(Yk + Yk+1 - 2μ)(Yk - Yk + 1) + o(k-2)
μ2 |_	2μ
=-E E 2(Yk+1 - Yk ) + ʒ-(Yk + Yk+1)(Yk - Yk+1)	+ o(k-2)
μ2	2μ
Since we use cumulative sum to compute Yk and Yk+ι, we obtain Yk+ι
kYk+wk+ι
k+1
2 Wk+1 - 1	( Wk+1 + ⅞+⅛ Pli=I Wk ∖/ Wk+1 - 1 λ
k+1 +1	2⅛μ	k 1 k + ι )
2
+ o(k-2)
(26)
(27)
(28)
(29)
(30)
(31)
(32)
2k + 1 v-`k
We note that Wk+1] = O( 1) and -k+1-稼.i=1 k = O(1). Therefore ∆k is O(k), and E∆^
O( k2).
A.3 Convergence of ∆k∆j
Without loss of generality, suppose j ≥ k + 1,
E∆k ∆j = E
[(Yk - μ)t - (Yk+1 - μ)t]
[(Yj- μ)t - (Yj+1 - μ)t]
))
(33)
E
E
2
For clarity, let Ck = Yk - μ be the zero-mean random variable. Nowozin (2018) gives the relations
22
股不竺⅛2阻⅛
== =
23 4
7 7 7
== =
]] ]
2k 3k 4k
Ck Ck Ck
[[ [
EE E
(34)
E∆k ∆j = E
μ4 - 3μ2
+ —k—
- Cjt+1)
(35)
(36)
(37)
Expanding both the sums inside the brackets to order two:
E∆k∆j ≈ E』(Ck+1 - Ck )(Cj+1 - Cj)	(1)
μ2
-E 2μ3(C2+1- Ck)(Cj+1- Cj)	(2)
-E2^3 (Ck+1 - Ck ) (Cj+1 - Cj)	(3)
+ E4-4 (C2+1 - Ck)(Cj+1 - Cj )	⑷
15
Published as a conference paper at ICLR 2020
We will proceed by bounding each of the terms (1), (2), (3), (4). First, we decompose Cj. Let
Bkj= 1 Pj= k+ι(Wi- μ).
1	j	k	1j	k
Cj	=	-	I	kCk	+	ɪ2 (Wi	-	μ)	j =	1Ck	+	1 (wi (Wi	-	μ)	=	[Ck	+ Bk,j
j	i=k+1	j	j	i=k+1	j
(38)
We know that Bk,j is independent of Ck and E[Bk,j] = 0, implying E[CkBk,j] = 0. Note
k2	2 k	2
j Ck + 2 j Ck Bk,j + Bk,j .
Now we show that (1) is zero:
E[-2 (Ck+ 1 - Ck )(Cj+1 - Cj1二 μ2	1	k+1 二 μ2E [Ck+1 j + j + Ck+1Bj+1,k+1 k + 1 C 2	B	C	C k 	j-Ck+1 - Bj,k+1Ck+1 - Ck j + 1 k - CkBj + 1,k + jCk + CkBj,kJ / E[ - j≡) Ck+1+C2 jj⅛ _ ɪ[- k + 1 μ2 + 丝 k ] — 0 二 μ2[- j(j + 1) k+1 + 7 j(j + 1)] =
We now investigate (2):
E[-2μ3(C2+1 - C2)(Cj+ι - Cj)]=	=2⅛ Eh	Ck j + 1 + CkBj+ 1,k - Ck j -	Ck2Bj,k
		+ C3+1 j+1 + Ck+1Bj,k + j	Ck2 + CkBj+1,ki
	/ E[-	j≡) C2+1 + C2 j⅛]	
	=2⅛ [-	μ3	+	μ3	] = kj(j + 1) + (k +1)j(j + 1) ] =	=-W [--L_.
			2μ3 [k(k + 1)j(j + 1)
We now show that (3) is zero:
E[2μ3 (Ck+ 1 - Ck ) (Cj - C2+1)]
2^3 E[Ck + 1C2 - Ck+1C2+1
1 [丝_	〃3	_竺
2μ3[ j - (j + 1)2 - j
- CkCj2 +CkCj2+1)]
〃3	]
(j + 1)2]
0
Finally, we investigate (4):
Using the relation in equation 36, we have
k2	2k
E[Ck Cj ] = E[Ck ( j2 Ck + ^-Ck Bj,k + Bj,k )]
_ k2	,	(j — k)μ2
=~γ γ4 + γ2	万
j2	j2
=(2k + j - 3).2 + μ4
j 2k
(39)
(40)
(41)
16
Published as a conference paper at ICLR 2020
(2k + j - 3)μ2 + μ4
j2k
(2k + j - 2)μ2 + μ4
(j + 1)2k
—
_ (2k + j - I)μ2 + μ4	(2k + jj)μ2 + μ4
j2(k + 1)	+(j + 1)2(k +1)
=(j2 - 5j - 3)μ2___________μ4
=j2(j + 1)2k(k + 1) - (j + 1)2k(k + 1)
=j2(μ - μ4) - (5j + 3)μ2
=	j2(j + 1)2k(k +1)-
=O(j-2k-2)
In summary, E∆k∆j is O(k-2j-2 ).
A.4 Gradient of SUMO
Assume that VjSUMO is bounded: it is sufficient that VθIWAEI is bounded and that the sampling
probabilities are chosen such that the partial sums of 靛线)converge, i.e. P(K ≥ k) > ck∣∣Vθ ∆k ||
for some constant c. Then we have E [VθSUMO(x)] = VθE [SUMO(x)] = Vθ logpθ(x) directly
by the dominated convergence theorem, as long as SUMO is everywhere differentiable, which is
satisfied by all of our experiments. If ReLU neural networks are to be used, one may be able to
show the same property using Theorem 5 of Bikowski et al. (2018), assuming finite higher moments
and Lipschitz continuity.
A.5 CONVERGENCE OF V IWAEk+1 - IWAEk
The IWAE log likelihood estimate is:
k Pθ(x,Zi)
i=1 qψ (Zi|x)
Lk = log
The gradient of this with respect to λ, where λ is either θ or ψ, is
dLk _	1 XX d Pθ(x, Zi)
F — Pk=I p(z,X ⅛ dλqψ(ZiIx)
We abbreviate Wi := ：；(：；), and Vi = dw. In both λ= ψ and λ= θ cases, it suffices to treat the
wi and νi as i.i.d. random variables with finite variance and expectation. Being a likelihood ratio,
Wi could be ill behaved when the importance sampling distribution qψ (zi∣x) is is particularly mis-
matched from the true posterior p(zi∣x) = E-pθ(X)ZiX Z). However, the analysis from IWAE (Burda
et al., 2016) requires assuming that the likelihood ratios Wi = pθ(ZjX) are bounded, and We adopt
this assumption. Reasoning about when this assumption holds, and the behavior of IWAE-like esti-
mators when it does not, is an interesting area for future work.
Consider the differences between two gradients: we label ∆g as follows:
.=dLk+1 _ dLk
k := ^^dλ	dλ
We have:
1	1	1k
∆k = ^→+ι— νk+1 + (^fc+ι--------E— X X Vi
i=1 Wi	i=1 Wi i=1 Wi i=1
k
_	1	wk+1
=Pk=II Wi νk+1	(Pk=II Wi)(Pk=1 Wi) i=ιVi
17
Published as a conference paper at ICLR 2020
KKK
Figure 4: A comparison of SUMO estimations with different distributions and IWAE estimations of
test negative log-likelihood on a trained model with IWAE1 objective on MNIST. The expected cost
is K + 5 for each evaluation. The results are averaged over 100 runs (mean in bold and std shaded).
We again let Yk denote the kth sample mean 1 Pi wi. Then:
g 1	wk+1
δa = IkY νk+1 + EYY+1νk
The sample means Yk and μk have finite expectation and variance. The variance vanishes as k → ∞
(but the expectation does not change).
E∣∣∆g ||2 = k12 E|| νk+1 +
Lt νk+1 , k	wk+1 Vk
e W + E Yk Yk+ι
E∣∣∆g ||2 = k12 l∣EΦk∣∣2 +
k Wk+ιVk∣ ∣2
E YkYk+1 ||2
:= φk
k12 Var(φk)
The second term vanishes at a rate strictly faster than 吉：the variance of φk goes to zero as k → ∞.
But the first term does not: φk is a biased estimator of φ∞ so Eφk does change with k, but it does
not necessarily go to zero:
ν k	wEν	Eν
Eφ∞ = ElEw + k + i(Ew)2]=鼠
Thus, E∣∣∆g ∣∣2 is at most O(,).
A.6 Empirical Confirmation on the Convergence of E∆k and E∣∣∆g∣∣2
We measure the ∆ and ∣∣∆g∣∣2 on a toy example to verify the convergence rates empirically. We
re-implement the toy Gaussian example from Rainforth et al. (2018b); Tucker et al. (2018). The
generative model is pθ(x, Z) = N(z∣θ, I)N(x|z, I), where both X and Z are in RD. The encoder is
qφ(z|x) = N(z|Ax + b, 31), where φ = (A, b). The synthetic dataset was generated with D = 20
and N = 1000 data points using the true model parameter θtrue from a standard Gaussian. Alongside
∣∣∆k||2, we plot several reference convergence rates such as O(1∕kc), c > 1, and O(ck), c < 1, as a
visual guide. The results are shown in Figure 5. Following the setup in Rainforth et al. (2018b), we
sample a group of model parameters close to the optimal values which are perturbed by Gaussian
noise from N(0, 0.012). The gradient ∆gk is taken w.r.t. the model parameter θ.
A.7 Bias-Variance Tradeoff via Gradient Clipping
While SUMo is unbiased, its variance is extremely high or potentially infinite. This property leads
to poor performance compared to lower bound estimates such as iWAE when maximizing log-
likelihood. in order to obtain models with competitive log-likelihood values, we can make use of
gradient clipping. This allows us to ignore rare gradient samples with extremely large values due to
the heavy-tailed nature of its distribution.
18
Published as a conference paper at ICLR 2020
(a) Mean of estimated of E∆2k with increasing k over
ten random trials with 1000 samples per trial. X and
Y axis are on log scale. Empirically the convergence
rate of ∆2k is between O(1/k2) and O(1/k3).
(b) Mean of estimated E∣∣∆k∣∣2 With increasing k
over ten trials with 1000 samples per trial. Empiri-
cally the convergence is faster than theoretical analy-
sis O(1/k2).
Figure 5: Empricial validation of the convergence rate of the norms of ∆ and ∆g.
Gradient clipping introduces bias in favor of reduced variance. Figure 6 shoWs hoW the performance
changes as a function of the clipping value, and more importantly, the percentage of clipped gradi-
ents. As shoWn, neither full clipping nor no clipping are desirable. We performed this experiment
after reporting the results in Table 1, so this grid search Was not used to tune hyperparameters for
our experiments. As bias is introduced, We do not use gradient clipping for entropy maximization
or policy gradient (REINFORCE).
^ΠNtt(υl
-I^INtt(υl
86.75
86.50
86.25
86.00
85.75
85.50
85.25
85.00
84.75
Figure 6: Test negative log-likelihood against the gradient clipping norm and clipping percentage,
when training with SUMO (k=15).
A.8 Experimental Setup
In density modeling experiments, all the models are trained using a batch size of 100 and the AMS-
Grad optimizer (Reddi et al., 2018) with parameters lr = 0.001, β1 = 0.9, β2 = 0.999 and
= 10-4. The learning rate is reduced by factor 0.8 if the validation likelihood does not improve
for 50 epochs. We use gradient norm scaling in both the inference and generative networks. We
train SUMO using the same architecture and hyperparameters as IWAE except the gradient clipping
norm. We set the gradient norm to 5000 for encoder and {20, 40, 60} for decoder in SUMO. For
IWAE, the gradient norm is fixed to 10 in all the experiments. We report the performance of models
with early stopping if no improvements have been observed for 300 epochs on the validation set.
We add additional plots of the test NLL against the norm and percentage of gradients clipped for
the decoder in Figure 6. The plot is based on MNIST with expected number of compute k = 15.
Gradient clipping was not used in the other experiments except the density modeling ones, where it
was used as a simple tool to obtain a better bias-variance trade-off.
19
Published as a conference paper at ICLR 2020
A.8.1 Reverse KL and Comb inatorial Optimization
These two tasks use the same encoder and decoder architecture: one hidden layer with tanh non-
linearities and 200 hidden units. We set the latent state to be of size 20. The prior is a standard
Gaussian with diagonal covariance, while the encoder distribution is a Gaussian with parameterized
diagonal covariance. For reverse KL, we used independent Gaussian conditional likelihoods for
p(x|z), while for combinatorial optimization we used independent Bernoulli conditional distribu-
tions. We found it helps stablize training for both IWAE and SUMO to remove momentum and used
RMSprop with learning rate 0.00005 and epsilon 1e-3 for fitting reverse KL. We used Adam with
learning rate 0.001 and epsilon 1e-3, plus standard hyperparameters for the combinatorial optimiza-
tion problems. SUMO used an expected compute of 15 terms.
20