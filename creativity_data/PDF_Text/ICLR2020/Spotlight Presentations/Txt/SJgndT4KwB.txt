Published as a conference paper at ICLR 2020
Finite Depth and Width Corrections to the
Neural Tangent Kernel
Boris Hanin
Department of Mathematics
Texas A&M University
College Station, TX 77843, USA
bhanin@math.tamu.edu
Mihai Nica
Department of Mathematics
University of Toronto
Toronto, Canada
mnica@math.utoronto.ca
Ab stract
We prove the precise scaling, at finite depth and width, for the mean and variance
of the neural tangent kernel (NTK) in a randomly initialized ReLU network. The
standard deviation is exponential in the ratio of network depth to width. Thus,
even in the limit of infinite overparameterization, the NTK is not deterministic
if depth and width simultaneously tend to infinity. Moreover, we prove that for
such deep and wide networks, the NTK has a non-trivial evolution during training
by showing that the mean of its first SGD update is also exponential in the ratio
of network depth to width. This is sharp contrast to the regime where depth is
fixed and network width is very large. Our results suggest that, unlike relatively
shallow and wide networks, deep and wide ReLU networks are capable of learning
data-dependent features even in the so-called lazy training regime.
1 Introduction
Modern neural networks are typically overparameterized: they have many more parameters than the
size of the datasets on which they are trained. That some setting of parameters in such networks
can interpolate the data is therefore not surprising. But it is a priori unexpected that not only can
such interpolating parameter values can be found by stochastic gradient descent (SGD) on the highly
non-convex empirical risk but also that the resulting network function generalizes to unseen data. In
an overparameterized neural network N (x) the individual parameters can be difficult to interpret,
and one way to understand training is to rewrite the SGD updates
δθp = - λ ~∂θ~,	P = 1,...,P
of trainable parameters θ = {θp}pP=1 with a loss L and learning rate λ as kernel gradient descent
updates for the values N(x) of the function computed by the network:
λ |B|	∂L
δn(X) = - λhKN(X, ∙), VLsi = - |B| ∑SKN(χ,xj)赤(Xj,y).
(1)
Here B = {(x1, y1), . . . , (x|B|, y|B|)} is the current batch, the inner product is the empirical `2 inner
product over B, and KN is the neural tangent kernel (NTK):
P
KN(X,xO) = X 西(X)西(XO).
p=1 p	p
Relation (1) is valid to first order in λ. It translates between two ways of thinking about the difficulty
of neural network optimization:
(i) The parameter space view where the loss L, a complicated function of θ ∈ R#parameters , is
minimized using gradient descent with respect to a simple (Euclidean) metric;
1
Published as a conference paper at ICLR 2020
(ii) The function space view where the loss L, which is a simple function of the network map-
ping x 7→ N (x), is minimized over the manifold MN of all functions representable by
the architecture of N using gradient descent with respect to a potentially complicated Rie-
mannian metric KN on MN .
A remarkable observation of Jacot et al. (2018) is that KN simplifies dramatically when the network
depth d is fixed and its width n tends to infinity. In this setting, by the universal approximation
theorem (Cybenko, 1989; Hornik et al., 1989), the manifold MN fills out any (reasonable) ambient
linear space of functions. The results in Jacot et al. (2018) then show that the kernel KN in this limit
is frozen throughout training to the infinite width limit of its average E[KN] at initialization, which
depends on the depth and non-linearity of N but not on the dataset.
This mapping between parameter space SGD and kernel gradient descent for a fixed kernel can be
viewed as two separate statements. First, at initialization, the distribution of KN converges in the
infinite width limit to the delta function on the infinite width limit of its mean E[KN]. Second, the
infinite width limit of SGD dynamics in function space is kernel gradient descent for this limiting
mean kernel for any fixed number of SGD iterations. As long as the loss L is well-behaved with
respect to the network outputs N(x) and E[KN] is non-degenerate in the subspace of function
space given by values on inputs from the dataset, SGD for infinitely wide networks will converge
with probability 1 to a minimum of the loss. Further, kernel method-based theorems show that
even in this infinitely overparameterized regime neural networks will have non-vacuous guarantees
on generalization (Wei et al., 2018). However, as (Wei et al., 2018) shows, the regularized neural
networks at finite width can have better sample complexity the corresponding infinite width kernel
method.
But replacing neural network training by gradient descent for a fixed kernel in function space is
also not completely satisfactory for several reasons. First, it suggests that no feature learning occurs
during training for infinitely wide networks in the sense that the kernel E[KN] (and hence its asso-
ciated feature map) is data-independent. In fact, empirically, networks with finite but large width
trained with initially large learning rates often outperform NTK predictions at infinite width (Arora
et al., 2019). One interpretation is that, at finite width, KN evolves through training, learning data-
dependent features not captured by the infinite width limit of its mean at initialization. In part for
such reasons, it is important to study both empirically and theoretically finite width corrections to
KN . Another interpretation is that the specific NTK scaling of weights at initialization (Chizat &
Bach, 2018b;a; Mei et al., 2019; 2018; Rotskoff & Vanden-Eijnden, 2018a;b) and the implicit small
learning rate limit (Li et al., 2019) obscure important aspects of SGD dynamics. Second, even in
the infinite width limit, although KN is deterministic, it has no simple analytical formula for deep
networks, since it is defined via a layer by layer recursion. In particular, the exact dependence, even
in the infinite width limit, of KN on network depth is not well understood.
Moreover, the joint statistical effects of depth and width on KN in finite size networks remain
unclear, and the purpose of this article is to shed light on the simultaneous effects of depth and
width on KN for finite but large widths n and any depth d. Our results apply to fully connected
ReLU networks at initialization for which our main contributions are:
1. In contrast to the regime in which the depth d is fixed but the width n is large, KN is
not approximately deterministic at initialization so long as d/n is bounded away from 0.
Specifically, for a fixed input x the normalized on-diagonal second moment ofKN satisfies
E KN (x, x)2
E [Kn (x, x)]2
exp(5d∕n)(1 + O(d∕n2)).
Thus, when d/n is bounded away from 0, even when both n, d are large, the standard
deviation of KN (x, x) is at least as large as its mean, showing that its distribution at
initialization is not close to a delta function. See Theorem 1.
2. Moreover, when L is the square loss, the average of the SGD update ∆KN (x, x) to
KN (x, x) from a batch of size one containing x satisfies
Ej∆KNM)] '工 exp(5d∕n)(1 + o(d∕n2)),
[ N (x, x)]	nn0
2
Published as a conference paper at ICLR 2020
where n0 is the input dimension. Therefore, if d2 * /nn0 > 0, the NTK will have the potential
to evolve in a data-dependent way. Moreover, if n0 is comparable to n and d/n > 0 then it
is possible that this evolution will have a well-defined expansion in d/n. See Theorem 2.
In both statements above, ' means is bounded above and below by universal constants. We em-
phasize that our results hold at finite d, n and the implicit constants in both ' and in the error terms
O(d/n2) are independent of d, n. Moreover, our precise results, stated in §2 below, hold for networks
with variable layer widths. We have denoted network width by n only for the sake of exposition.
The appropriate generalization of d/n to networks with varying layer widths is the parameter
d1
β := X -1,
i=1 nj
which in light of the estimates in (1) and (2) plays the role of an inverse temperature.
1.1 Prior Work
A number of articles (Bietti & Mairal, 2019; Dyer & Gur-Ari, 2019; Lee et al., 2019; Yang, 2019)
have followed up on the original NTK work Jacot et al. (2018). Related in spirit to our results is
the work Dyer & Gur-Ari (2019), which uses Feynman diagrams to study finite width corrections
to general correlations functions (and in particular the NTK). The most complete results obtained
by Dyer & Gur-Ari (2019) are for deep linear networks but a number of estimates hold general
non-linear networks as well. The results there, like in essentially all previous work, fix the depth d
and let the layer widths n tend to infinity. In contrast, our results (as well as those of Hanin (2018);
Hanin & Nica (2018); Hanin & Rolnick (2018)), do not treat d as a constant, suggesting that the
1/n expansions (e.g. in Dyer & Gur-Ari (2019)) can be promoted to d/n expansions. Also, the
sum-over-path approach to studying correlation functions in randomly initialized ReLU nets was
previously taken up for the forward pass by Hanin & Rolnick (2018) and for the backward pass by
Hanin (2018) and Hanin & Nica (2018). We also point the reader to Theorems 3.1 and 3.2 in Arora
et al. (2019), which provide quantitative rates of convergence for both the neural tangent kernel
and the resulting full optimization trajectory of neural networks at large but finite width (and fixed
depth).
2 Formal Statement of Results
Consider a ReLU network N with input dimension n0, hidden layer widths n1, . . . , nd-1, and
output dimension nd = 1. We will assume that the output layer of N is linear and initialize the
biases in N to zero. Therefore, for any input x ∈ Rn0 , the network N computes N (x) = x(d)
given by
x(0) = x, y(i) := Wc(i)x(i-1),	x(i) := ReLU(y(i)),	i =1, . . . ,d,	(2)
where for i = 1, . . . , d - 1
c(d) := (1/ni-i)T/2W⑴，C⑴：=(2/ni-i)T/2W⑺，	Waie 〜〃仙儿 ⑶
and μ is a fixed probability measure on R that We assume has a density with respect to LebesgUe
measure and satisfies:
μ is symmetric around 0,	Var[μ] = 1,
Z∞
∞
x4dμ(x)
μ4 < ∞.
(4)
The three assumptions in (4) hold for virtually all standard network initialization schemes with the
exception of orthogonal weight initialization. But believe our results extend hold also for this case
but not do take up this issue. The on-diagonal NTK is
KN (x, x)
d nj-1 nj	2 d	nj	2
X X1X1( ∂⅞ (χ))+X Xι(卷 3),
(5)
and we emphasize that although we have initialized the biases to zero, they are not removed from
the list of trainable parameters. Our first result is the following:
3
Published as a conference paper at ICLR 2020
Theorem 1	(Mean and Variance of NKT on Diagonal at Init). We have
e[Kn(χ,χ)] = d ∣1 + kxk2
2	n0
Moreover, we have that E[KN (x, x)2] is bounded above and below by universal constants times
(
d2 ∣∣x∣∣4
exp(5β)	----2一
n0
\
d kxk2
no
d
X e-5 Pij=1
j=1
ni
d
X e-5 Pij=1
i,j=1
i≤j
d1
β = X ɪ
i=1 ni
+
+
1
n
/
times a multiplicative error(1 + O (Pd=I n⅛) ). In particular, if all the hidden layer widths are
equal (i.e. ni = n, for i = 1, . . . , d - 1), we have
E KN (x, x)2
E [Kn(x, x)]2
exp(5β)(1 + O Ielny),
β = d/n,
where f ' g means f is bounded above and below by universal constants times g.
This result shows that in the deep and wide double scaling limit
ni , d → ∞,
0<
lim
ni ,d→∞
d1
X ɪ
i=1 ni
< ∞,
the NTK does not converge to a constant in probability. This is contrast to the wide and shallow
regime where ni → ∞ and d < ∞ is fixed.
Our next result shows that when L is the square loss KN (x, x) is not frozen during training. To
state it, fix an input x ∈ Rn0 to N and define ∆KN (x, x) to be the update from one step of SGD
with a batch of size 1 containing x (and learning rate λ).
Theorem 2	(Mean of Time Derivative of NTK on Diagonal at Init). We have that
E λ-1∆KN(x, x) is bounded above and below by universal constants times
∣∣x∣∣4 X X e-5/n'-6P'=i1 n
n20	n`
0 i1 ,i2 — 1 '—i1
ii<i2
Il 112 d	.	i2 — 1 —6 p` 1 ∣1 -1
+ kxk2 X e-5 Pi=I n⅛ X e	1+1 ni
n0	n`
ii,i2 — 1	'^i1
i1<i2
exp (5β)
times a multiplicative error of size(1 + O (Pd=I	),where β = Pd=ι 1/ni, as in Theorem 1.
In particular, if all the hidden layer widths are equal (i.e. ni = n, for i = 1, . . . , d - 1), we find
EEKNxf ' dβ exP(5β)(1 + O(")， β = d/n.
Observe that when d is fixed and ni = n → ∞, the pre-factor in front of exp (5β) scales like 1/n.
This is in keeping with the results from Dyer & Gur-Ari (2019) and Jacot et al. (2018). Moreover,
it shows that if d, n, no grow in any way so that dβ∕no = d2∕nno → 0, the update ΔKn (x, x) to
KN (x, x) from the batch {x} at initialization will have mean 0. It is unclear whether this will be
true also for larger batches and when the arguments of KN are not equal. In contrast, if ni ' n
and β = d/n is bounded away from 0, ∞, and the no is proportional to d, the average update
E[ΔKN (x, x)] has the same order of magnitude as E[KN (x)].
2.1 Organization for the Rest of the Article
The remainder of this article is structured as follows. First, we give an outline of the proofs of
Theorems 1 and 2 in §3 and particularly in §3.1, which gives an in-depth but informal explanation
of our strategy for computing moments of KN and its time derivative. Next, in the Appendix
Section §A, we introduce some notation about paths and edges in the computation graph ofN. This
4
Published as a conference paper at ICLR 2020
notation will be used in the proofs of Theorems 1 and 2 presented in the Appendix Section §B-§D.
The computations in §B explain how to handle the contribution to KN and ∆KN coming only from
the weights of the network. They are the most technical and we give them in full detail. Then, the
discussion in §C and §D show how to adapt the method developed in §B to treat the contribution
of biases and mixed bias-weight terms in KN , KN2 and ∆KN . Since the arguments are simpler in
these cases, we omit some details and focus only on highlighting the salient differences.
3 Overview of Proof of Theorems 1 and 2
The proofs of Theorems 1 and 2 are so similar that we will prove them at the same time. In this
section and in §3.1 we present an overview of our argument. Then, we carry out the details in
Appendix Sections §B-§D below. Fix an input x ∈ Rn0 to N . Recall from (5) that
KN (x, x) = Kw + Kb ,
where we’ve set
Kw :
weights
(6)
and have suppressed the dependence on X, N. Similarly, we have
-2λ δKN(X,x) = δWw + 2δWb + ∆bb,
where we have introduced
∆ww := X	∂N(x)∂N.(X)∂N(X)(N(X)- n*(x))
∂w ∂w∂w0 ∂w0
weights w,w0
∆wb :
X dN ( ∖
∂w . ∂w (X)
∂2N
weight w, bias b
∂N
△bb := T	而(X)
biases b,b0
∂w∂b
∂2N
∂b∂b
∂N
(x)而(X)(N(X)- N*(x))
∂N
(x)Ib(X)(N(X)- N*(x))
and have used that the loss on the batch {x} is given by L(X) = 2 (N(x) 一 N*(x))2 for some
target value N* (x) . To prove Theorem 1 We must estimate the following quantities：
E[Kw], E[Kb], E[Kw2], E[KwKb], E[Kb2].
To prove Theorem 2, we must control in addition
E[∆ww], E[∆wb],	E[∆bb].
The most technically involved computations will turn out to be those involving only weights:
namely, the terms E[Kw], E[Kw2], E[∆ww]. These terms are controlled by writing each as a sum
over certain paths γ that traverse the network from the input to the output layers. The corresponding
results for terms involving the bias will then turn out to be very similar but with paths that start
somewhere in the middle of network (corresponding to which bias term was used to differentiate the
network output). The main result about the pure weight contributions to KN is the following
Proposition 3 (Pure weight moments for KN , ∆KN). We have
E[Kw] = - ∣X∣2.
n0
Moreover,
d2
E[Kw] ' — l∣Xk4 exp (5β)	1 + O
n0
d1
β := X ɪ.
ni
i=1 i
Finally,
E[∆ww] ` 吗2
n0
d	i2-1
X	X ɪ
n`
iι ,i2 = l '=iι
ii <i2
exp (5β)
LmL-6 pi=i
1
n
5
Published as a conference paper at ICLR 2020
We prove Proposition 3 in §B below. The proof already contains all the ideas necessary to treat the
remaining moments. In §C and §D we explain how to modify the proof of Proposition 3 to prove the
following two Propositions:
Proposition 4 (Pure bias moments for KN , ∆KN). We have
E[Kb]
d
2
Moreover,
d
E[Kb] ' X
i,j=1
i≤j
exp(5 XXX nɪ) (ι+O
e-5 Pj=ι n⅛
Finally, with probability 1, we have ∆bb = 0.
Proposition 5 (Mixed bias-weight moments for KN , ∆KN). We have
E[KbKw] ' dkxk2
n0
d
X	e-5Pij
j=1
1
ni
exp(5 XXX nɪ) (ι+O
Further, E[∆wb] is bounded above and below by universal constants times
kxk2 eχp(5 X 力 X
j<
e-5 Pjα=ι nα X ɪe-6 PZ-j+i na I (1+ O
'=j n'	I ∖
The statements in Theorems 1 and 2 that hold for general ni now follow directly from Propositions
3-5. The asymptotics when ni ' n follow from some routine algebra.
3.1	Idea of Proof of Propositions 3-5
Before turning to the details of the proof of Propositions 3-5 below, we give an intuitive explanation
of the key steps in our sum-over-path analysis of the moments of Kw , Kb , ∆ww , ∆wb , ∆bb . Since
the proofs of all three Propositions follow a similar structure and Proposition 3 is the most compli-
cated, we will focus on explaining how to obtain the first 2 moments of Kw . Since the biases are
initialized to zero and Kw involves only derivatives with respect to the weights, for the purposes of
analyzing Kw the biases play no role. Without the biases, the output of the neural network, N (x)
can be express as a weighted sum over paths in the computational graph of the network:
n0
N(x) = Xxa X wt(γ),
a=1	γ∈Γ1a
where Γ1a is the collection of paths in N starting at neuron a and the weight of a path wt(γ) is defined
in (13) in the Appendix and includes both the product of the weights along γ and the condition that
every neuron in γ is open at x. The path γ begins at some neuron in the input layer of N and passes
through a neuron in every subsequent layer until ending up at the unique neuron in the output layer
(see (10)). Being a product over edge weights in a given path, the derivative of wt(γ) with respect
to a weight We on an edge e of the computational graph of N is:
∂wt(γ)	wt(γ)
^∂WΓ = -Wr 1{e∈γ}.
(7)
There is a subtle point here that wt(γ) also involves indicator functions of the events that neurons
along γ are open at x. However, with probability 1, the derivative with respect to We of these
indicator functions is identically 0 at x. The details are in Lemma 11.
6
Published as a conference paper at ICLR 2020
Because Kw is a sum of derivatives squared (see (6)), ignoring the dependence on the network input
x, the kernel Kw roughly takes the form
Kw〜
Σ Σ
γ1 ,γ2 e∈γ1 ∩γ2
Qk=I Wt(Yk)
We2
where the sum is over collections (γ1, γ2) of two paths in the computation graph of N and edges e
in the computational graph of N that lie on both (see Lemma 6 for the precise statement). When
computing the mean, E[Kw], by the mean zero assumption of the weights We (see (4)), the only
contribution is when every edge in the computational graph of N is traversed by an even number of
paths. Since there are exactly two paths, the only contribution is when the two paths are identical,
dramatically simplifying the problem. This gives rise to the simple formula for E[Kw] (see (23)).
The expression
Kw〜
Σ Σ
γ1,γ2,γ3,γ4 e1∈γ1∩γ2
e2 ∈γ3 ∩γ4
Q4=1 Wt(Yk )
We2l Wl
for Kw2 is more complex. It involves sums over four paths in the computational graph of N as in the
second statement of Lemma 6. Again recalling that the moments of the weights have mean 0, the
only collections of paths that contribute to E[Kw2 ] are those in which every edge in the computational
graph of N is covered an even number of times:
E[Kw]〜£ EE
γ1 ,γ2 ,γ3 ,γ4 e1 ∈γ1 ∩γ2
even	e2 ∈γ3 ∩γ4
Qk=I Wt(Yk)
We2l We22
(8)
However, there are now several ways the four paths can interact to give such a configuration. Itis the
combinatorics of these interactions, together with the stipulation that the marked edges e1 , e2 belong
to particular pairs of paths, which complicates the analysis of E[Kw2 ]. We estimate this expectation
in several steps:
1.	Obtain an exact formula for the expectation in (8):
E "⅛Wγk2# = FCeiE
e1 e2
where F(Γ, e1, e2) is the product over the layers ` = 1, . . . , d in N of the “cost” of the
interactions of Y1 , . . . , Y4 between layers ` - 1 and `. The precise formula is in Lemma 7.
2.	Observe the dependence of F(Γ, e1, e2) on e1, e2 is only up to a multiplicative constant:
F(Γ,e1,e2) ' F*(Γ).
The precise relation is (24). This shows that, up to universal constants,
E[Kw] ' X	F*(口# n`i, `2 ∈ [d] γγ13 ,,γγ42 toggethe at layyer `12 o .
γ1 ,γ2,γ3,γ4
even
This is captured precisely by the terms Ij , IIj defined in (27),(28).
3.	Notice that F*(Γ) depends only on the un-ordered multiset of edges E = Eγ ∈ ∑4ven
determined by Γ (see (17) for a precise definition). We therefore change variables in the
sum from the previous step to find
E[Kw] `	^X F*(E)Jacobian(E,e1,e2),
E∈Σ4even
where Jacobian(E, e1, e2) counts how many collections of four paths Γ ∈ Γe4ven that
have the same EΓ also have paths Y1 , Y2 pass through e1 and paths Y3 , Y4 pass through e2 .
Lemma 8 gives a precise expression for this Jacobian. It turns outs, as explained just below
Lemma 8, that
Jacobian(E, e1, e2) ' 6#loops(E),
where a loop in E occurs when the four paths interact. More precisely, a loop occurs
whenever all four paths pass through the same neuron in some layer (see Figures 1 and 2).
7
Published as a conference paper at ICLR 2020
4.	Change variables from unordered multisets of edges E ∈ Σe4ven in which every edge is
covered an even number of times to pairs of paths V ∈ Γ2 . The Jacobian turns out to be
2-#loops(E) (Lemma 9), giving
E[KW] ` X F*(V)3#100Ps(V).
V∈Γ2
5.	JUst like F* (V), the term 3#loops(V) is again a product over layers ` in the computational
graph of N of the “cost” of interactions between our four paths. Aggregating these two
terms into a single functional F*(E) and factoring out the l/n` terms in F*(V) we find
that:
E[KW] ` [E [F* (V)i,
where the 1 /n` terms cause the sum to become an average over collections V of two inde-
pendent paths in the computational graph ofN, with each path sampling neurons uniformly
at random in every layer. The precise result, including the dependence on the input x, is in
(42).
6.	Finally, we use Proposition 10 to obtain for this expectation estimates above and below that
match up multiplicative constants.
Figure 1: Cartoon of the four paths γ1, γ2, γ3, γ4 between layers `1 and `2 in the case where there is
no interaction. Paths stay with there original partners γ1 with γ2 and γ3 with γ4 at all intermediate
layers.
Figure 2: Cartoon of the four paths γ1, γ2, γ3, γ4 between layers `1 and `2 in the case where there is
exactly one “loop” interaction between the marked layers. Paths swap away from their original part-
ners exactly once at some intermediate layer after `1, and then swap back to their original partners
before '2.
3.2	Conclusion
Taken together Theorems 1 and 2 show that in fully connected ReLU nets that are both deep and
wide the neural tangent kernel KN is genuinely stochastic and enjoys a non-trivial evolution during
training. This suggests that in the overparameterized limit n, d → ∞ with d/n ∈ (0, ∞), the kernel
KN may learn data-dependent features. Moreover, our results show that the fluctuations of both
KN and its time derivative are exponential in the inverse temperature β = d/n.
It would be interesting to obtain an exact description of its statistics at initialization and to describe
the law of its trajectory during training. Assuming this trajectory turns out to be data-dependent,
8
Published as a conference paper at ICLR 2020
our results suggest that the double descent curve Belkin et al. (2018; 2019); Spigler et al. (2018)
that trades off complexity vs. generalization error may display significantly different behaviors
depending on the mode of network overparameterization.
However, it is also important to point out that the results in Hanin (2018); Hanin & Nica (2018);
Hanin & Rolnick (2018) show that, at least for fully connected ReLU nets, gradient-based training is
not numerically stable unless d/n is relatively small (but not necessarily zero). Thus, we conjecture
that there may exist a “weak feature learning” NTK regime in which network depth and width are
both large but 0 < d/n 1. In such a regime, the network will be stable enough to train but flexible
enough to learn data-dependent features. In the language of Chizat & Bach (2018b) one might say
this regime displays weak lazy training in which the model can still be described by a stochastic
positive definite kernel whose fluctuations can interact with data.
Finally, it is an interesting question to what extent our results hold for non-linearities other than
ReLU and for network architectures other than fully connected (e.g. convolutional and residual).
Even in fully connected networks, the input/outpu Jacobian already displays different spectral statis-
tics depending on the non-linearity (Pennington et al., 2017). Moreover, typical ConvNets, are sig-
nificantly wider than they are deep, and we leave it to future work to adapt the techniques from the
present article to these more general settings (the neural tangent kernel for finite depth convolutional
networks is studied in part in (Arora et al., 2019)).
References
Sanjeev Arora, Simon S Du, Wei Hu, Zhiyuan Li, Russ R Salakhutdinov, and Ruosong Wang.
On exact computation with an infinitely wide neural net. In Advances in Neural Information
Processing Systems, pp. 8139-8148, 2019.
Mikhail Belkin, Daniel Hsu, Siyuan Ma, and Soumik Mandal. Reconciling modern machine learning
and the bias-variance trade-off. arXiv preprint arXiv:1812.11118, 2018.
Mikhail Belkin, Daniel Hsu, and Ji Xu. Two models of double descent for weak features. arXiv
preprint arXiv:1903.07571, 2019.
Alberto Bietti and Julien Mairal. On the inductive bias of neural tangent kernels. arXiv preprint
arXiv:1905.12173, 2019.
Lenaic Chizat and Francis Bach. On the global convergence of gradient descent for over-
parameterized models using optimal transport. In Advances in neural information processing
systems, pp. 3036-3046, 2018a.
Lenaic Chizat and Francis Bach. A note on lazy training in supervised differentiable programming.
arXiv preprint arXiv:1812.07956, 2018b.
George Cybenko. Approximation by superpositions of a sigmoidal function. Mathematics of Con-
trol, Signals, and Systems (MCSS), 2(4):303-314, 1989.
Ethan Dyer and Guy Gur-Ari. Asymptotics of wide networks from feynman diagrams. In ICML
Workshop on Physics for Deep Learning, 2019.
Boris Hanin. Which neural net architectures give rise to exploding and vanishing gradients? In
Advances in Neural Information Processing Systems, 2018.
Boris Hanin and Mihai Nica. Products of many large random matrices and gradients in deep neural
networks. arXiv preprint arXiv:1812.05994, 2018.
Boris Hanin and David Rolnick. How to start training: The effect of initialization and architecture.
In Advances in Neural Information Processing Systems, pp. 571-581, 2018.
Boris Hanin and David Rolnick. Deep relu networks have surprisingly few activation patterns. In
Advances in Neural Information Processing Systems, 2019.
Kurt Hornik, Maxwell Stinchcombe, and Halbert White. Multilayer feedforward networks are uni-
versal approximators. Neural networks, 2(5):359-366, 1989.
9
Published as a conference paper at ICLR 2020
Arthur Jacot, Franck Gabriel, and Clement Hongler. Neural tangent kernel: Convergence and gen-
eralization in neural networks. In Advances in neural information processing Systems, pp. 8571-
8580, 2018.
Jaehoon Lee, Lechao Xiao, Samuel S Schoenholz, Yasaman Bahri, Jascha Sohl-Dickstein, and Jef-
frey Pennington. Wide neural networks of any depth evolve as linear models under gradient
descent. arXiv preprint arXiv:1902.06720, 2019.
Yuanzhi Li, Colin Wei, and Tengyu Ma. Towards explaining the regularization effect of initial large
learning rate in training neural networks. arXiv preprint arXiv:1907.04595, 2019.
Song Mei, Andrea Montanari, and Phan-Minh Nguyen. A mean field view of the landscape of
two-layers neural networks. arXiv preprint arXiv:1804.06561, 2018.
Song Mei, Theodor Misiakiewicz, and Andrea Montanari. Mean-field theory of two-layers neural
networks: dimension-free bounds and kernel limit. arXiv preprint arXiv:1902.06015, 2019.
Jeffrey Pennington, Samuel Schoenholz, and Surya Ganguli. Resurrecting the sigmoid in deep
learning through dynamical isometry: theory and practice. In Advances in neural information
processing systems, pp. 4788-4798, 2017.
Grant Rotskoff and Eric Vanden-Eijnden. Parameters as interacting particles: long time convergence
and asymptotic error scaling of neural networks. In Advances in neural information processing
systems, pp. 7146-7155, 2018a.
Grant M Rotskoff and Eric Vanden-Eijnden. Neural networks as interacting particle systems:
Asymptotic convexity of the loss landscape and universal scaling of the approximation error.
arXiv preprint arXiv:1805.00915, 2018b.
Stefano Spigler, Mario Geiger, StePhane d'Ascoli, Levent Sagun, Giulio Biroli, and Matthieu Wyart.
A jamming transition from under-to over-parametrization affects loss landscape and generaliza-
tion. arXiv preprint arXiv:1810.09665, 2018.
Colin Wei, Jason Lee, Qiang Liu, and Tengyu Ma. Regularization matters: Generalization and
optimization of neural nets v.s. their induced kernel. arXiv preprint arXiv:1810.05369, 2018.
Greg Yang. Scaling limits of wide neural networks with weight sharing: Gaussian process behavior,
gradient independence, and neural tangent kernel derivation. arXiv preprint arXiv:1902.04760,
2019.
A Notation
In this section, we introduce some notation, adapted in large part from Hanin & Nica (2018), that
will be used in the proofs of Theorems 1 and 2. For n ∈ N, we will write
[n] := {1, . . . , n}.
It will also be convenient to denote
[n]ekven := {a ∈ [n]k | every entry in a appears an even number of times}.
Given a ReLU network N with input dimension n0, hidden layer widths n1, . . . , nd-1, and output
dimension nd = 1, its computational graph is a directed multipartite graph whose vertex set is the
disjoint union [n0] ' •…'[nd ] and in which edges are all possible ways of connecting vertices from
[ni-1] with vertices from [ni] for i = 1, . . . , d. The vertices are the neurons in N, and we will write
for ` ∈ {0, . . . , d} and α ∈ [n` ]
z(`, α) := neuron number α in layer `.	(9)
Definition 1 (Path in the computational graph of N). Given 0 ≤ 'ι < '2 ≤ d and aι ∈ [n`i ], α2 ∈
[n'2], a path Y in the computational graph of N from neuron z('1,a1) to neuron z('2,a2) is a
collection of neurons in layers '1,..., '2:
Y =	(Y('ι),...,Y('2)),	Yej)	∈	[nj ],	Y ('l) =	α1,	Y('2)	= α2.	(10)
10
Published as a conference paper at ICLR 2020
Further, we will write
Zk = {(z1,...,zk) | zj are neurons in N }.
Given a collection of neurons
Z = (z(`1, α1), . . . , z(`k, αk)) ∈ Zk
we denote by
k	γj is a path starting at neuron z(`j ,αj )
ΓZ :=	(γ1 , . . . , γk )	ending at the output neuron z(d,1)
Note that with this notation, We have Yi ∈「；(',仪)for each i = 1,...,k. For Γ ∈ ΓZ, We also set
Γ(') = {α ∈ [n`] | ∃j ∈ [k] s.t. Yj (') = k}.
Correspondingly, We Will Write
∣Γ(')∣ := # distinct elements in Γ(').
(11)
..	...	...	I . . . ÷7? ..	♦.一	..
If each edge e in the computational graph of N is assigned a weight We , then associated to a path γ
is a collection of weights:
Wcγ(i) := Wc(γ(i-1),γ(i)) .
(12)
Definition 2 (Weight of a path in the computational graph of N). Fix 0 ≤ ` ≤ d, and let γ be a
path in the computation graph of N starting at layer ` and ending at the output. The weight of a
this ath at a iven inut x to N is
s pa a a gven npu x o s
d-1
wt(Y) := Wcγ(d) Y Wcγ(j)1{γ open at x},	(13)
j='+1
where
d
1{γ open at x} = ɪ ɪ ξγ ) (X),	ξγ ' (X) := 1{yY') >0}，
i='
is the event that all neurons along Y are openfor the input x. Here y(') is as in (2).
Next, for an edge e ∈ [ni-1] × [ni] in the computational graph of N We Will Write
`(e) = i	(14)
for the layer of e. In the course of proving Theorems 1 and 2, it Will be useful to associate to every
Γ ∈ Γk (~n) an unordered multi-set of edges EΓ.
Definition 3 (Unordered multisets of edges and their endpoints). For n, n0 , ` ∈ N set
Σk (n, n0) = {(α1, β1), . . . , (αk, βk) | (αj, βj ) ∈ [n] × [n0]}
to be the unordered multiset of edges in the complete directed bi-paritite graph Kn,n0 oriented from
[n] to [n0]. For every E ∈ Σk (n, n0) define its left and right endpoints to be
L(E) := {α ∈ [n] | ∃j = 1, . . . , k s.t. α = αj}	(15)
R(E) := {β ∈ [n0] | ∃j = 1, . . . , k s.t. β = βj},	(16)
where L(E), R(E) are unordered multi-sets.
Using this notation, for any collection Z = (z(`1, α1), . . . , z(`k, αk)) of neurons and Γ =
(Y1, . . . , Yk) ∈ ΓkZ, define for each ` ∈ [d] the associated unordered multiset
E γ(') := {(α,β) ∈ [n`-i,n`] ∣∃j = 1,...,k s.t. Yj (' - 1) = α, Yj (') = β}
of edges betWeen layers ` - 1 and ` that are present in Γ. Similarly, We Will Write
∑Z ：= {(E(0),...,E (d)) ∈ ∑k (n0,n1)×…×Σk (nd-i,nd) ∣∃Γ ∈ ΓZ s.t. E(') = Eγ('), ' ∈ [d]}
(17)
for the set of all possible edge multisets realized by paths in ΓkZ. On a number of occasions, We Will
also Write
ΣkZ,even := {E ∈ ΣkZ | every edge in E appears an even number of times}
11
Published as a conference paper at ICLR 2020
and correspondingly
ΓkZ,even := {Γ ∈ ΓkZ | EΓ ∈ ΣkZ,even}.
We will moreover say that for a path γ an edge e = (α, β) ∈ [ni-1] × [ni] in the computational
graph of N belongs to γ (written e ∈ γ) if
γ(i - 1) = α,	γ(i) = β.	(18)
Finally, for an edge e = (α, β) ∈ [ni-1] × [ni] in the computational graph of N, we set
We = Wα(i,)β ,	Wce = Wcα(i,)β
for the normalized and unnormalized weights on the edge corresponding to e (see (3)).
B Proof of Proposition 3
We begin with the well-known formula for the output of a ReLU net N with biases set to 0 and a
linear final layer with one neuron:
n0
N(x) = Xxa X wt(γ).
a=1 γ∈Γ1a
(19)
The weight of a path wt(γ) was defined in (13) and includes both the product of the weights along
γ and the condition that every neuron in γ is open at x. As explained in §A, the inner sum in (19) is
over paths γ in the computational graph of N that start at neuron a in the input layer and end at the
output neuron and the random variables Wcγ(i) are the normalized weights on the edge of γ between
layer i - 1 and layer i (see (12)). Differentiating this formula gives sum-over-path expressions for
the derivatives of N with respect to both x and its trainable parameters. For the NTK and its first
SGD update, the result is the following:
Lemma 6 (weight contribution to KN and ∆KN as a sum-over-paths). With probability 1,
Kw
2
X Yxak	X X
a∈[n0]2 k=1	Γ∈Γ2a	e∈γ1∩γ2
Γ=(γ1,γ2)
Qk=I Wt(Yk)
We2
where the sum is over collections Γ of two paths in the computation graph of N and edges e that lie
on both paths. Similarly, almost surely,
Kw2
4
X Yxak	X X
a∈[n0]4 k=1	Γ∈Γ4 (~n)	e1∈γ1∩γ2
Γ=(γ1,a...,γ4) e2∈γ3,γ4
Qk=I Wt(Yk)
WeIWe2
and
∆ww
4
X Yxak
a∈[n0]4 k=1
Γ∈Γ4a(~n)
Γ=(γ1,...,γ4)
e1∈γ1∩γ2
e2 ∈γ2 ,γ3
e1 6=e2
Q4=1 Wt(Yk)
WeIWe2
Σ Σ
plus a term that has mean 0.
The notation [n0]k , Γka , e ∈ Y, etc is defined in §A. We prove Lemma 6 in §B.1 below. Let us
emphasize that the expressions for Kw2 and ∆ww are almost identical. The main difference is that in
the expression for ∆ww, the second path Y2 must contain both e1 and e2 while Y4 has no restrictions.
Hence, while for Kw2 the contribution from a collection of four paths Γ = (Y1, Y2, Y3, Y4) is the same
as from the collection Γ0 = (Y2, Y1, Y4, Y3) , for ∆ww the contributions are different. This seemingly
small discrepancy, as We shall see, causes the normalized expectation E[∆ww]∕E[Kw] to converge
to zero when d < ∞ is fixed and n → ∞ (see the l/n` factors in the statement of Theorem 2).
In contrast, in the same regime, the normalized second moment E[Kw2 ]/E[Kw]2 remains bounded
away from zero as in the statement of Theorem 1. Both statements are consistent with prior results
in the literature Dyer & Gur-Ari (2019); Jacot et al. (2018). Taking expectations in Lemma 6 yields
the following result.
12
Published as a conference paper at ICLR 2020
Lemma 7 (Expectation of Kw , Kw2 , ∆ww as sums over 2, 4 paths). We have,
n0	2
E[Kw] = X	Y xak	X X H(Γ,e)	(20)
a∈[n0]e2ven k=1	Γa ∈Γe2ven e∈γ1∩γ2
Γ=(γ1,γ2)
where
d1
H(Ue) = 1{γ1=γ2} n --
i=1 ni-1
Similarly,
4
E[Kw2] = X Yxak	X X F(Γ,e1,e2),	(21)
a∈[n0]4even k=1	Γ∈Γ4a,even ee21∈∈γγ13∩∩γγ24
Γ=(γ1,...,γ4)
where
1 d 22-∣Γ(i)∣	r
F(Γ,ei,e2) = 2 Y	Y	〃4{91)l = lr”.
i=1	i-1	i='(e1),'(e2)
Finally,
4
E[∆ww] = X Yxak X X	F(Γ, e1, e2).	(22)
a∈[n0]e4ven k=1	Γ∈Γ4aeven e1 ∈γ1∩γ2
even	a,even e2 ∈γ2 ,γ3
Γ=(γ1,...,γ4) e1 6=e2
Lemma 7 is proved in §B.2. The expression (20) is simple to evaluate due to the delta function in
H(Γ, e). We obtain:
n0	d	d	d
E[Kw] = X Xa X XY ɪ= d Y ɪ Y n kxk2 = F kxk2，	(23)
ni-1	ni-1	n0
a=1	γ∈Γ1 (~n) e∈γ i=1	i=1	i=1
where in the second-to-last equality we used that the number of paths in the comutational graph of
N from a given neuron in the input to the output neuron equals Qi=1,...,d ni and in the last equality
we used that nd = 1. This proves the first equality in Theorem 1.
It therefore remains to evaluate (21) and (22). Since they are so similar, we will continue to discuss
them in parallel. To start, notice that the expression F(Γ, e1, e2) appearing in (21) and (22) satisfies
2-2 FKr) ≤ F(r,e1, e2) ≤ 2F*。,
2μ4	2
where
F*(Γ)：
d
Y
i=1
22-∣r(i)∣	1
2	1{∣Γ(i-1)∣ = ∣Γ(i)∣ = 1}
F	μ4
(24)
For the remainder of the proof we will write
f ' g ^⇒	∃ constants C,c> 0 depending only on μ s.t. Cg ≤ f ≤ Cg.
Thus, in particular,
F(Γ,e1,e2) ` F*(Γ).
The advantage of F*(Γ) is that it does not depend on e1,e2. Observe that for every a =
(α1, α2, α3, α4) ∈ [n0]e4ven, we have that either α1 = α2, α1 = α3, or α1 = α4. Thus, by
symmetry, the sum over Γe4ven(~n) in (21) and (22) takes only four distinct values, represented by the
following possibilities:
aj ∈ [n0]even
((1,1,1,1),
J (1, 2,1, 2),
(((1, 1, 2, 2),
1(1, 2, 2,1),
j=1
j=2
j=3,
j=4
13
Published as a conference paper at ICLR 2020
keeping track of which paths γ1 , . . . , γ4 begin at the same neuron in the input layer to N . Hence,
since
4
X	Y xak = kxk42 - kxk44
a=(a1,...,a4)∈[n0]4even k=1
a1 =a2 , a3=a4 , a1 6=a3
we find
E[Kw2] ' kxk44 I1 + (kxk24 - kxk44)(I2 + I3 + I4),	(25)
and similarly,
E[∆ww] ' kxk44 II1 + (kxk24 - kxk44)(II2+II3+II4),	(26)
where
Ij = E	F*(D# {edges e1,e2 | eι ∈ γι ∩ γ2, e2 ∈ γ3 ∩ γ4}	(27)
Γ∈Γ4aj,even(~n)
Γ=(γ1,...,γ4)
IIj = E	F*(D# {edges e1,e2 | eι ∈ γι ∩ γ2, e2 ∈ Y2,γ3, eι = e2}.	(28)
Γ∈Γ4a even (~n)
aj,even
Γ=(γ1,...,γ4)
To evaluate Ij , IIj let us write
Tiα,β(Γ)	:= 1γα(i-1)=γβ(i-1), Γ =	(γ1,	. . .	,γ4)	, α,β =	1, . . . ,4	(29)
γα (i)=γβ (i)
for the indicator function of the event that paths γα , γβ pass through the same edge between layers
i - 1, i in the computational graph of N. Observe that
d
# {edges e1 , e2 | e1 ∈ γ1 ∩ γ2 , e2 ∈ γ3 ∩ γ4 } = X Ti11,2Ti32,4
i1,i2 =1
and
d
# {edges e1 , e2 |	e1 ∈ γ1 ∩ γ2,	e2	∈	γ2, γ3,	e1	6=	e2 }	= X	Ti11,2Ti22,3 .
i1,i2=1
i1 6=i2
Thus, we have
d
Ij =	Ij,i1,i2 ,
i1 ,i2=1
where
"2 = X	F*(Γ)琮2T3,4,
Γ∈Γ4aj,even
Γ=(γ1,...,γ4)
d
IIj =	I Ij,i1,i2,
i1 ,i2=1
i1 6=i2
IIj,i1,i2 = E	F* (Γ)Ti1,2T⅛3.
Γ∈Γ4aj,even
Γ=(γ1,...,γ4)
To simplify Ij,i1,i2 and IIj,i1,i2 observe that F* (Γ) depends only on Γ only via the unordered edge
multi-set (i.e. only which edges are covered matters; not their labelling)
Er = (Er ⑴,…,Er(d)) ∈ ∑2ven
defined in Definition 3. Hence, we find that for j = 1, 2, 3, 4, i1, i2 = 1, . . . , d,
Ij,i1,i2 = X	F*(E)# Γ ∈ Γ4aj,even(~n)
E∈Σ4a even (~n)
aj,even
EΓ=E, r(0)=aj ,t=1,2	o
γ1 (it-1)=γ2(it-1), γ1 (it)=γ2 (it)
(30)
IIj,i1,i2 = X	F*(E)#	Γ∈Γ4aj,even(~n)
E∈Σ4aj,even(~n)
EΓ=E, r(0)=aj
γ1(i1 -1)=γ2(i1-1), γ1(i1)=γ2(i1)
γ2(i2-1)=γ3(i2-1), γ2(i2)=γ3(i2)
(31)
14
Published as a conference paper at ICLR 2020
The counts in Ij,*,” 混 and IIj,=Mι 然 have a convenient representation in terms of
C (E, i1, i2 ) := 1{∃ '=min(i 1,i2),..., max(iι,i2-1) s.t. ∣R(E('))∣ = 1}
Cb(E, i1, i2) :=
1{∃ '=0,...,min(i1,i2)-l s.t. ∣R(E('))∣ = 1}.
(32)
(33)
Informally, the event Cb(E, i1, i2) indicates the presence ofa “collision” of the four paths in Γ before
the earlier of the layers i1, i2, while C(E, i1, i2) gives a “collision” between layers i1, i2; see Section
3.1 for the intuition behind calling these collisions. We also write
A(E, i1, i2) : = 1 IL(E(i1))I=IR(E(i1))I=1
IL(E(i2))I=IR(E(i2))I=1
61
+
+ 61 j |R(E(iI))I=IR(E(逅/=2)
∃ ∃ min(i1,i2)≤'<max(i1,i2) >
I s.t. ∣R(E('))∣ = 1	J
Finally, for E ∈ Σ4a,even (~n), we will define
|L(E(i1))|=|R(E(i1))|=1, |R(E(i2))|=2 or
|L(E(i2))|=|R(E(i2))|=1,|R(E(i1))|=2
+ 36 1(∃ min(E⅛E'黑U(iι,i2)).
I s.t. ∣R(E('))∣ = 1	J
(34)
#loops(E) = #{i ∈ [d] | |L(E(i))| =1, |R(E(i))| =2}.	(35)
That is, a loop is created at layer i if the four edges in E all begin at occupy the same vertex in layer
i - 1 but occupy two different vertices in layer i. We have the following Lemma.
Lemma 8 (Evaluation of Counting Terms in (30) and (31)). Suppose E ∈ Σ4aj,even for some j =
1, 2, 3, 4. For each i1 , i2 ∈ {1, . . . , d},
# Γ = (γ1 , . . . , γ4 ) ∈ Γaj ,even
EΓ=E, Γ(0)=aj,t=1,2	o
γ1 (it-1)=γ2(it-1), γ1(it)=γ2(it)
equals
Similarly,
equals
6#loops(E)A(E,i1,i2) ∙ 1b^ρ . . y	j = 1,2
C(E, i1, i2),	j =3,4
4	EΓ=E, Γ(0)=aj, t=1,2
# Γ ∈ Γaj,even γ1(i1-1)=γ2(i1-1),γ1(i1)=γ2(i1)
6# loops (E)A(E,i1,i2)C(E,i1,i2) ∙ 1%”..、 j = 1,2
C(E, i1, i2),	j = 3, 4
(36)
(37)
We prove Lemma 8 in §B.3 below. Assuming it for now, observe that
≤ ≤ A(E, i1, i2) ≤ 1
36
and that the conditions L(E(1)) = aj are the same forj = 2,3, 4 since the equality it is in the sense
of unordered multi-sets. Thus, we find that E[Kw2 ] is bounded above/below by a constant times
d
kxk44	X X	F*(E)	+ (kxk24	-	kxk44)	X	F*(E)(1 +	2Cb(E,	i1, i2)).
i1,i2=1 E∈Σ4a1,even	E∈Σ4a2,even
Similarly, E[∆ww] is bounded above/below by a constant times
(38)
d
X
i1 ,i2=1
i1 6=i2
kxk44	F*(E)6#loops(E)C(E,i1,i2)
E∈Σ4a1 ,even
(39)
+(kxk2 -kxk4) X	F*(E)6#l。。PS(E)C(E,i1,i2)(l + 2C(E,i2,i2)) .
E∈Σ4
∈ a2 ,even
Observe that every unordered multi-set four edge multiset E ∈ Σ4even can be obtained by starting
from some V ∈ Γ2, considering its unordered edge multi-set EV and doubling all its edges. This
map from Γ2 to Σe4ven is surjective but not injective. The sizes of the fibers is computed by the
following Lemma.
15
Published as a conference paper at ICLR 2020
Lemma 9. Fix E ∈ ∑4ven.. The number of V ∈ ΓZ so that E = 2 ∙ EV is 2#loops (V )+1{∣v ⑼心),
where as in (35),
#loops(V) = #{i ∈ [d] | |V(i - 1)| = 1, |V (i)| = 2}.
Lemma 9 is proved in §B.4. Using it and that 0 ≤ Cb(E, i1, i2) ≤ 1, the relation (38) shows that
E[Kw2 ] is bounded above/below by a constant times
d2 X F*(V)3#loops(V) (kxk4 1{∣v⑼∣=i} + (kxk2 -kxk4)1{∣v⑼∣=2}) ∙	(40)
V∈Γ2
Similarly, E[∆ww] is bounded above/below by a constant times
d
X X F*(V)3#loops(V)C(V,i1,i2) (kxk4 1{∣v(0)∣ = i} + (kxk4 -kxk4)1{∣v⑼∣=2}) , (41)
i1,i2=1 V∈Γ2
i1 6=i2
where, in analogy to (32), we have
C(V,i1,i2) :=
1{∃'=iι,…,i2 — 1 s.t. |V(')∣ = 1}.
Let us introduce
d
F* (V) := F* (V) ∙ 3#l00Ps(V) Y n
i=0
=2≠{i∈[d] | |V(i)|=i}3#iooPs(V)μ#{i∈[d] | IV(i-1)|=|V(i) = 1}
Since the number of V in Γ2 (~n) with sPecified V(0) equals Qid=1 ni2 , we find that so that for each
x 6= 0, we have
件'dEx [F*(V)i
kxk2	n0
(42)
and similarly,
E⅛w] ' & X	Ex hF*(V)C(V,i1,i2)i .
kxk2	n0 i1,i2=1
i1 6=i2
Here, Ex is the exPectation with resPect to the Probability measure on V = (v1, v2) ∈
Γ2 obtained by taking v1 , v2 indePendent, each drawn from the Products of the measure
x21/ kxk22 , . . . , x2n0 / kxk22 on [n0] and the uniform measure on [ni], i = 1, . . . , d.
We are now in a Position to comPlete the Proof of Theorems 1 and 2. To do this, we will evaluate the
exPectations Ex above to leading order in Pi 1/ni with the helP of the following elementary result
which is Proven as Lemma 18 in Hanin & Nica (2018).
Proposition 10. Let A0, A1, . . . , Ad be independent events with probabilities p0, . . . ,pd and
B0 , . . . , Bd be independent events with probabilities q0 , . . . , qd such that
Aj ∩ Bj = 0,	∀j = 0,...,d.
Denote by Xi the indicator that the event Ai happens, Xi := 1{Ai}, and by Yi the indicator that Bi
happens, Yi = 1{Bi}. Further, fix for every i ∈ 1, . . . , d some αi ≥ 1, Ki ≥ 1 as well as γi > 0.
Define
d
Z = YαiXiγiXi-1XiKiYi.
i=1
Then, ifγi ≥ 1 for every i, we have:
d
E [Z] ≤ Y (1 + Pi(αi - 1) + qi(Ki - 1) + PiPi-iaiai-iγi-i(γi - 1)),	(43)
i=1
where by convention α0 = γ0 = 1. In contrast, ifγi ≤ 1 for every i, we have:
d
E[Z] ≥ Y(1 +pi(αi 一 1) + PiPi-iai-iai(γi 一 1))	(44)
i=1
16
Published as a conference paper at ICLR 2020
We first apply Proposition 10 to the estimates above for E[Kw2]. To do this, recall that
3#loops(V)
d
Y 31{|V (i-1)|=1, |V (i)|=2}
i=1
Since |V (d)| = 1, we may also write
3#loops(V)
1d
_ 31{ 31{∣V(i-1)l = 2, |V(i)l = ι}
i=1
1|V (i-1)|=|V (i)|=1}
31|V (i)|=1}
Putting this together with (42) and noting that
dd
22-|V (i)| = 21{|V (i)|=1}
i=1
i=1
we find that
E[KW]∕kxk4 ' n12Ex ]Y (μ34)1{lv…TV" 61(∣v(i)∣=i).
Since the contribution for each layer in the product is bounded above and below by constants, we
have that E[Kw2 ]∕ kxk42 is bounded below by a constant times
d2Exm (1 ∧ μ4)1{1V…=lv(i)l=1} 61{∣V(i)∣=i)
(45)
and above by a constant times
μ4)1{1V(i-1)1=1V(i)l=1} 61{∣V(i)∣=i}
(46)
Here, note that the initial condition given by x and the terminal condition that all paths end at one
neuron in the final layer are irrelevant. The expression (45) is there precisely E[Zd-1 ∕n02] from
Proposition 10 where Xi is the event that |V(i)| = 1,匕=0, αi = 6, γi = 1 ∧ μ4 ≤ 1, and
Ki = 1. Thus, since for i = 1, . . . ,d - 1, the probability of Xi is 1∕ni + O(1∕ni2), we find that
E[Kw2]∕ kxk42 ≥
nd2 ∏ (1+n+O
(n12+ 4)) ≥ nexp
ni ni1 n0
d-1
5 X LO
.i=2 ni
where in the last inequality we used that 1 + x ≥ ex-x2/2 for x ≥ 0. Since e-1/n1+1/nd ' 1, we
conclude
E[Kw]/kχk4 ≥ neχp(5β)(1+O(β-1 X/)), β=X；.
0	i=1 i	i=1 i
When combined with (23) this gives the lower bound in Proposition 3. The matching upper bound
is obtained from (46) in the same way using the opposite inequality from Proposition 10.
To complete the proof of Proposition 3, we prove the analogous bounds for E[∆ww] in a similar
fashion. Namely, we fix 1 ≤ i1 < i2 ≤ d and write
i2-1
C(V,ii,i2) = x iA',	a` ：= n|V%2VB=ιj}.
'=iι
The set a` is the event that the first collision between layers i1,i2 occurs at layer '. We then have
i2-1
Ex E(V)C(V,i1,i2)] = X Ex E(V)1{A'}],
'=iι
17
Published as a conference paper at ICLR 2020
On the event a`, notice that F* (V) only depends on the layers 1 ≤ i ≤ iι and layers ' < i ≤ d
because the event a` fixes what happens in layers iι < i ≤ '. Mimicking the estimates (45), (46)
and the application of Proposition 10 and using independence, we get that:
(d 1 ∖
Eχ[F*(V)1{A'}] ` exp X — Ex(1{4})
i=1 ni
∖i∕[iι,'))
Finally, we compute:
Ex d)	= P (A')	= = ɪ	Y(1- ɪ)	' LXp	(- X ɪ!,
`	n`	ni n`	ni
i=i1	i=i1
Combining this we obtain that E[∆ww]/ kxk42 is bounded above and below by constants times
1
-2
n20
d i2 -1
X X 1ee-5/n'-6 Pi=iι n1i
n`
iι ,i2 = l '=iι
ii<i2
exp(5 X n⅛(1+O
This completes the proof of Proposition 3, modulo the proofs of Lemmas 6-9, which we supply
below.
B.1 Proof of Lemma 6
Fix an input x ∈ Rn0 to N. We will continue to write as in (2) y(i) for the vector of pre-activations
as layer i corresponding to x. We need the following simple Lemma.
Lemma 11. With probability 1, either there exists i so that y(i) = 0 or, for every i ∈ [d], j ∈ [ni]
we have yj(i) 6= 0.
Proof. The argument is similar to Lemma 8 in Hanin & Rolnick (2019). Namely, fix i ∈ [d], j ∈
[ni]. If y(`)= 0 for every ', then there exists at least one path Y in the computational graph of
the map X → yji) so that, y#) > 0 for each ' = 1,...,i - 1. For event that yji) = 0 is therefore
contained in the union over all non-empty subsets Γ of the collection of all paths in the computational
graph ofx 7→ yj(i) of the event that
i
XY cΥ') = 0.
γ∈Γ'=1
For each fixed Γ this event defines a co-dimension 1 set in the space of all the weights. Hence, since
the joint distribution of the weights has a density with respect to Lebesgue measure (see just before
(4)), the union of this (finite number) of events has measure 0. This shows that on the even that
y(') = 0 for every ', yji) = 0 with probability 1. Taking the union over i, j completes the proof. □
Lemma 11 shows that for our fixed x, with probability 1, the derivative of each ξj(i) in (19) vanishes.
Hence, almost surely, for any edge e in the computational graph of N :
∂N
∂wejj
(x)
X X Wt(Y)
Txa T We .
a=1	γ∈Γ1a
e∈γ
(47)
This proves the formulas for KN , KN2 . To derive the result for ∆KN , we write
∆KN
18
Published as a conference paper at ICLR 2020
where the loss L on a single batch containing only X is 1 (N(x) - N*(χ))2. We therefore find
∆KN
- 2λ
edges e1 ,e2
∂N	∂2N	∂N
∂We1 ∂Weι ∂We2 ∂We2
(N(x) - N*(x)).
Σ
Using (47) and again applying Lemma 11, we find that with probability 1
∂ 2N Xn0	^X	wt(γ1)wt(γ2)
∂Weι dWe?	= a=1 xa	⅛ι	We1We2	.
γ ∈Γa
e1,e2 ∈γ, e16=e2
Thus, almost surely
__L∆K	- X 11 X X	Q4 = 1 Wt(Yk)
2λ δKN =T IIxakT	W2	W2 W2
a∈[n0]4 k=1 Γa∈Γ4(~n) e1∈γ1,γ2	e1 e2
a	e2 ∈γ2 ,γ3
e16=e2
-NG) X Y Xak X X Q⅛a.
a∈[n0]3 k=1 Γ∈Γ3 (~n) e1∈γ1,γ2	e1 e2
a	e2 ∈γ2 ,γ3
e16=e2
To complete the proof of Lemma 6 it therefore remains to check that this last term has mean 0. To
do this, recall that the output layer of N is assumed to be linear and that the distribution of each
weight is symmetric around 0 (and hence has vanishing odd moments). Thus, the expectation over
the weights in layer d has either 1 or 3 weights in it and so vanishes.
B.2 Proof of Lemma 7
Lemma 7 is almost a corollary of of Theorem 3 in Hanin (2018) and Proposition 2 in Hanin &
Nica (2018). The difference is that, in Hanin (2018); Hanin & Nica (2018), the biases in N were
assumed to have a non-degenerate distribution, whereas here we’ve set them to zero. The non-
degeneracy assumption is not really necessary, so we repeat here the proof from Hanin (2018) with
the necessary modifications.
If x = 0, then N(x) = 0 for any configuration of weights since the network biases all vanish. Will
therefore suppose that x 6= 0. Let us first show (20). We have from Lemma 6 that
E[KN (x, x)] =	xa1 xa2	E
a∈[n0]2	Γ∈Γ2	e∈γ1∩γ2
a,even
Qkk=I Wt(Yk)
Wt2
(48)
To compute the inner expectation, write Fj for the sigma algebra generated by the weight in layers
up to and including j . Let us also define the events:
Sj := {x(j) 6= 0},
where we recall from (2) that x(j) are the post-activations in layer j. Supposing first that e is not in
layer d, the expectation becomes
E
Qd-I CYi)C却由河北)>o} E
Wt2
Wcγ(1d)Wcγ(2d)
We have
E WCγ(1d)WCγ(2d)	Fd-1
1
n， 1 1J Yi (d- l)=γ2 (d— 1)
nd-1	γ1(d)=γ2(d)
Thus, the expectation in (48) becomes ^^ 1 ʃYl(d-1)=γ2(d—^)\ times
Yi (d)=Y2 (d)
E
Qk=IQd-2 CYi)1{yγk)>0}
We
2
Y	WCY(kd-1) 1{yγ(dk-i) >0}
k=1
E
19
Published as a conference paper at ICLR 2020
Note that given Fd-2, the pre-activations yj(d-1) of different neurons in layer d - 1 are independent.
Hence,
2
E Y Wcγ(kd-1)1{yγ(dk-1)>0}	Fd-2
k=1
Q2k=1 E Wγ(kd-1) 1{yγ(dk-1)>0} Fd-2
E 1{yγ(d-1) >0} Qk=1 Wγk	Fd-2
γ1(d - 1) 6= γ2(d - 1)
γ1(d - 1) = γ2(d - 1)
Recall that by assumption, the weight matrix Wc(d-1) in layer d - 1 is equal in distribution to
-Wc(d-1) . This replacement leaves the product Q2k=1 Wcγ(kd-1) unchanged but changes 1{y(d-1) >0}
to 1{y(d-1) ≤0}. On the event Sd-1 (which occurs whenever yγ(dk-2) > 0) we have that yγ(d1-1) 6= 0
with probability 1 since we assumed that the distribution of each weight has a density relative to
Lebesgue measure. Hence, symmetrizing over ±Wc(d), we find that
2
E Y Wcγ(kd-1) 1{yγ(dk-1) >0}	Fd-2
k=1
1
nd-2
γ1 (d-1)=γ2 (d-1)
γ1 (d-2)=γ2 (d-2)
Similarly, if e is in layer i, then we automatically find that γ1(i - 1) = γ2(i - 1) and γ1(i) = γ2(i),
giving an expectation of 1/ni-11	γ (i)=γ (i)	. Proceeding in this way yields
γ1 (i-1)=γ2(i-1)
d1
E [KN (x,x)] = E xaι xa2∏ ——	E E δYι=Y2
a∈[n0]2 i=1 i-1 Γ∈Γ2a,even(~n e∈γ1∩γ2
xa1xa2
a∈[n0]2	Γ∈Γ2a,even(~n)
d1
δYl=Y2 Π —,
i=1 ni-1
which is precisely (20). The proofs of (21) and (22) are similar. We have
E[KN(χ,χ)2] = X YY Xak X X E "QW2W2γk)
a∈[n0]4 k=1	Γ∈Γ4 e1∈γ1 ,γ2	e1 e2
a e2∈γ3,γ4
As before let us first assume that edges e1 , e2 are not in layer d. Then,
4
E Y wt(γk )
k1
E
4 d-1	4
Y Y	Wcγ(ki)1{yγ(ik)>0}E Y	Wcγ(kd)	Fd-1	.
k1 i1 k=1
The the inner expectation is
1
neach weight appears ano ∙
even number of times
11
一2一 μ4
nd2-1 4
{∣Γ(d-1)∣ = ∣Γ(d)∣ = 1}
In contrast, if d = '(eι) or d = '(e2), then the inner expectation is
1
1
neach weight appears ano _2	.
n
even numer o mes	d-1
Again symmetrizing with respect to ±Wc(d) and using that the pre-activation of different neurons
are independent given the activations in the previous layer we find that, on the event {yγ(dk-2) > 0},
4
E Y Wcγ(kd-1)1{yγ(dk-1)>0} Fd-2
k1
22-|r(d-I)I
1 neach weight appears ano 2
even number of times	nd-1
where L is the event that ∣Γ(d - 1)| = ∣Γ(d)∣ = 1 and eι, e? are not in layer d - 1. Proceeding in
this way one layer at a time completes the proofs of (21) and (22).
20
Published as a conference paper at ICLR 2020
B.3	Proof of Lemma 8
Fix j = 1,..., 4, edges e1,e2 with '(eι) ≤ '(e2) in the computational graph of N and E ∈
Σ4aj,even. The key idea is to decompose E into loops. To do this, define
i0 = -1,	ik(E) := min{i > ii-1 | |L(E(i))| = 1, |R(E(i))| = 2}, k ≥ 1, . . . , #loops(E).
For each i = 1, . . . , d there exists unique k = 1, . . . , #loops(E) so that
ik-1(E) ≤ i < ik(E).
We will say that two layers i, j = 1, . . . , d belong to the same loop of E if exists k =
1, . . . , #loops(E) so that
ik-1(E) ≤ i,j < ik(E).
We proceed layer by layer to count the number of Γ ∈ Γ4a ,even satisfying Γ(0) = aj and EΓ = E.
To do this, suppose we are given Γ(i - 1) ∈ [ni-1]4 and we have L(E(i)) = 2. Then Γ(i - 1) is
some permutation of (α1, α1, α2, α2) with α1 6= α2. Moreover, for j = 1, 2 there is a unique edge
(with multiplicity 2) in E(i) whose left endpoint is αj . Therefore, Γ(i - 1) determines Γ(i) when
L(E(i)) = 2. In contrast, suppose L(E(i)) = 1. If R(E(i)) = 1, then E(i) consists of a single
edge with multiplicity 4, which again determines Γ(i - 1), Γ(i). In short, Γ(i) determines Γ(j) for
all j belonging to the same loop of E as i. Therefore, the initial condition Γ(0) = aj determines
Γ(i) for all i ≤ i1 and the conditions e1 ∈ γ1, e2 ∈ γ2 determine Γ in the loops of E containing the
layers of e1, e2 .
Finally, suppose L(E(i)) = 1 and R(E(i)) = 2 (i.e. i = ik(E) for some k = 1, . . . , d) and that
e1 , e2 are not contained in the same loop of E layer i. Then all 42 = 6 choices of Γ(i) satisfy
Γ(i) = R(E(i)), accounting for the factor of 6#loops(E). The concludes the proof in the case j = 1.
the only difference in the cases j = 2, 3, 4 is that if γ1 (0) 6= γ2(0) (and hence γ3(0) 6= γ4(0)), then
since '(eι) ≤ '(e2) in order to satisfy eι ∈ γ1,γ2 we must have that iι(E) <'(eι).	□
B.4	Proof of Lemma 9
The proof of Lemma 9 is essentially identical to the proof of Lemma 8. In fact it is slightly simpler
since there are no distinguished edges e1 , e2 to consider. We omit the details.	□
C Proof of Proposition 4
In this section, we seek to estimate E[Kb], E[Kb2], E[∆bb]. The approach is essentially identical
to but somewhat simpler than our proof of Proposition 3 in §B. We will therefore focus here on
explaining the salient differences. Our starting point is the following analog of Lemma 6, which
gives a sum-over-paths expression for the bias contribution Kb to the neural tangent kernel. To state
it, let us define, for any collection Z = (z1, . . . , zk) ∈ Zk of k neurons in N
k
1{yZ >0} :=	1{yzj >0},
j=1
to be the event that the pre-activations of the neurons zk are positive.
Lemma 12 (Kb as a sum over paths). With probability 1,
2
Kb = X
1{Z>0}XY
wt(γk),	(49)
Z∈Z1	Γ∈Γ(2Z,Z) k=1
where Z1, Γ(2Z,Z), wt(γ) are defined in §A. Further, almost surely,
∆bb = 0.	(50)
The proof of this result is a small modification of the proof of Lemma 6 and hence is omitted. Taking
expectations, we therefore obtain the following analog to Lemma 7.
21
Published as a conference paper at ICLR 2020
Lemma 13 (Expectation of Kb , Kb2 as a sum over paths). We have
E[Kb] = 1 X X H (Γ),
Z∈Z1 Γ∈Γ(2Z,Z),even
Γ=(γ1,γ2)
H(Γ)
d
1{γ1=γ2}
i='(Z )+1
1
ni-1
(51)
Moreover,
1
2
E[Kb2]
Σ Σ
Z=(z1,z2)∈Z2 Γ∈Γ(4Z,Z)
'(Z1)≤'(Z2)
Hb(Γ),
even
where for Γ = (γ1, . . . ,γ4) ∈ Γ(4Z,Z),even we have
Hb(Γ)
'(Z2)
1	γ1(i0)=γ2(i0)
i0 ='(zι) + 1	[γι(i0-I)=Y2(i0-I)ʃ
d
Y
i='(Z2) + 1
2∣Γ(i)∣-2
2-
i-1
1{∣Γ(i)∣ = ∣Γ(i-1)∣}
μ4
(52)
The proof is identical to the argument used in §B.2 to establish Lemma 7, so we omit the details.
The relation (51) is easy to simplify:
E[Kb]
1 XX 口 士
Z∈Z1 γ∈Γz i='(Z) + 1	i 1
d
2
1ZX1 n^
where We used that the number paths from a neuron in layer ' to the output of N equals QQd=+ι n%.
This proves the first statement in Proposition 4. Next, let us explain how to simplify E[Kb2]. The key
computation is the following
Lemma 14. Fix two neurons zι, z2 with '(zι) ≤ '(z2) and write Z = (z1,z1, z2,z2). Then,
X
Hb (Γ) '
Γ∈Γ4Z,even
1
------------exp
n'(z1)n'(z2)
d
5X
、i='(z2)+1
1 + O I X
∖i='(z2)+1
(53)
Proof. The proof of Lemma 14 is a simplified version of the computation of E[Kw2 ] (starting
around (24) and ending at the end of the proof of Proposition 3). Specifically, note that for Γ =
(Y1,...,Y4) ∈ rZ,even With '(ZI) ≤ '(z2), the delta functions 1{γι (i0)=γ2 (i0)} 1{γι (i0-I)=γ2 (i0-1)}
in the definition (52) of H(Γ) ensures that γ1,γ2 go through the same neuron in layer '(z2). To
condition on the index of this neuron, We recall that We denote by z(j, β) neuron number β in layer
j. We have
n'(z2)	'(Z2)	[
X H (Γ) = XX	∏	1[ γι(i0)=Y2(i0))占 X H (Γ)
Γ∈ΓZeven	β=1 Y1,Y2m→z('(z2),β) i0='(z1) + 1 lγιCi0τ)=Y2Ci0τ)/ i 1 Γ∈ΓZo
,even	Z ,even
1	n'(z2)
---------X	X H(Γ),
&(ZI)T β=ι Γ∈Γ40
Z0,even
(54)
where Z0 = (z('(z2),β),z('(z2),β),z2,z2) and
d	2∣Γ(i)∣-2 r
H (Γ) =	∏	J— μjr⑸ 1=1r(i-I)I}.
i='(z2)+1 ni-1
Since the inner sum in (54) is independent ofβ by symmetry, we find
X H(Γ) = ^z^	X H (Γ),	(55)
r∈rZ,even	n'(ZI)T 曰％〃…“
22
Published as a conference paper at ICLR 2020
where Z00 = (1, 1, z2, z2). The inner sum in (55) is now precisely one of the terms Ij from (27)
without counting terms involving edges e1,e2, except that the paths start at neuron 1 in layer '(z2).
The changes of variables from Γ ∈ Γe4ven to E ∈ Σe4ven to V ∈ Γ2 that we used to estimate
the Ij’s are no far simpler. In particular, Lemma 8 still holds but without any of the A(E, i1, i2),
C(E, i1, i2), Cb(E, i1, i2) terms. Thus, we find that
H(Γ) '
Γ∈Γ4,even
H(E)6#loops(E) '	H(V)3#loops(V),
4,even
E∈ΣZ00
V ∈Γ2Z000
where for the second estimate we applied Lemma 9 and have written Z000 = (1, z2). Thus, as in the
derivation of (42), we find that
X H(Γ)'/E [H* (V)],
Γ∈p4,even	'(Z2)
where
H (V) = 2#{iE[d] | |V(i)| = 1}3#looPS(V)从#{记圈 | IV(i-I)I = IV⑴| = 1}
and E is the expectation over pairs of paths starting from neurons I,z2 in layer '(z2) to the output of
the network for which neurons in subsequent layers are chosen independently and uniformly among
all neurons in that layer. This is precisely the expectation we evaluated in the end of the proof for
Proposition 3. Thus, applying Proposition 10 exactly as in that case, we find that
F(Γ) '
Γ∈Γ4,even
1	d1
-e exp I 5	∖-------+ O
n'(z2)	< i=W) + 1 ni
d
X
i='(z2)+1
Putting this together with (54) completes the proof of Lemma 14.
□
Lemma 14 combined with Lemma 13 yields
E[Kb2] '
dd
X exp ∣5 X ɪ
i,j=1	i=j+1 i
i≤j
as claimed in the statement Proposition 4.

D Proof of Proposition 5
We begin by computing E[KbKw]. We will use a hybrid of the procedures for computing E[Kb2]
and E[Kw2 ]. Recall from Lemmas 6 and 12 that
Kb= X 1{yz>0}	X YY Wt(Yk),	Kw = XY Xak X X Qk=Wt(Yk)
Z∈Z1	Γ∈Γ(2Z,Z) k=1	a∈[n0]2 k=1	Γ∈Γ2a e∈γ1 ,γ2	e
Γ=(γ1,γ2)
Therefore, the expectation of the product E[KbKw] has the following form
XY Xak X X X E "l{yz>0} Qk=Wt(Yk) # .
a∈[n0]2 k=1	Z∈Z1 Γ∈Γ(Z,Z,a) e∈γ3,γ4	e
Here, for a neuron Z and a = (a1 , a2 ) ∈ [n0]2 we’ve denoted by Γ(4Z,Z,a) the set of four tuples
(Y1, . . . , Y4) of paths in the computational graph of N where Y1, Y2 start from Z and Y3, Y4 start
at neurons a1 , a2 respectively. The analog of Lemmas 7 and 13 (with essentially the same proof),
gives that the expectation in the previous line equals
Il ∣∣2 '(Z)	1	d
"ɪ Π 1{Y3(i) = Y4(i)} ― Π
n
i=1	i 1 i='(Z) + 1
22-IΓ(i)I
^2
ni2-1
1{∣Γ(i-1)∣ = ∣Γ(i)∣=1, i='(e)}
μ4
23
Published as a conference paper at ICLR 2020
which, up to a multiplicative constant equals
'(Z)	1	d	22-∣Γ(i)∣ ,
GZ(γ)	:=	kxk2 Y 1{Y3(i)=Y4(i)} - Y	-2— μ1{lr(iT)ITr⑸E,	(56)
i=i	ni-1 i='(Z),+1	ni-1
which is independent of e. Thus, we find
d
E[KbKw] ' kxk2 XX X	GZ(Γ)T3i,4(Γ),
i=1 Z∈Z 1 Γ∈Γ(4Z,Z,1,1),even
where if Γ = (γ1, . . . , γ4) we recall that T3i,4(Γ) is the indicator function of the event that paths
γ3, γ4 pass through the same edge in the computational graph of N at layer i (see (29)).
As before, note that the delta functions 1{γ3(i)=γ4(i)} ensure that γ3, γ4 pass through the same
neuron in layer '(Z). Thus, We may condition on the common neuron through which γ3, γ4 must
pass at layer '(Z) to obtain that E[KbKw] is bounded above and below by a constant times
d	H ∣∣2 d	n'(Z)
kxk2XX X	GZ Cr)T3,4(r)=用 XXX X	GZ Cr)T3,4(r),
i=1Z∈Z 1 Γ∈Γ(4Z,Z,1,1),even	0 i=1Z∈Z 1β=1 Γ∈Γ4Z0,even
where Z0 = (Z, Z, z('(Z), β),z('(Z), β)) and we have set
∙^∙
GbZCr)
d	22-∣Γ(i)∣ r
∏2	1{∣Γ(i-1)∣ = ∣Γ(i)∣ = 1}
一n	μ4
i='(Z) + 1	i-1
Notice that T3,4 = 1 if i ≤ '(Z). Moreover, for i ≥ '(Z) + 1, the same argument as in the proof
of Lemma 8 shows that the number of r ∈ r4Z0,even for which γ3, γ4 pass through the same edge at
layer i and correspond to the same unordered multiset of edges E equals
6#IooPS(E)-1{∣R(E(i)) HL(E(i))∣ = 1} ` 6#IooPS(E).
As in the proof of Proposition 3, observe that GbZ Cr)T3i,4Cr) depends only on the unordered multiset
of edges EΓ in r. Thus, we find that
E[KbKw] ' dkx2 X n'(Z)	X	GZ(E)6#looPS(E)
n0	Z∈Z1	E∈Σ4 0
Z0,even
APPlying ProPosition 10 as in the end of the Proof of ProPositions 3 and 4 we conclude
e∈X	GZ(E)6#loops(E)=Kexp (5 i=X+ι ⅛) (ι+O (X ⅛)).
Z0,even
Hence,
EKbKw] ' djn0f
X exp 卜 5X 力 I exp(5X 力(ι+O
To complete the proof of Proposition 5 it remains to evaluate E[∆wb]. To do this, we note that, as in
the proof of Lemma 6, we have
∆wb = XY Xak X 1{yz>0}	X X Qk=Wt(Yk)
a∈[n0]2 k=1	Z∈Z1	Γ∈Γ(4Z,Z,a1,a2)e∈γ2,γ3	We
a=(a1,a2)
plus a term that has mean 0. Therefore, as in Lemma 7, we find
E[∆wb] ` kxk2 X X	P(r)#{edges e belonging to both γ2,γ3},
n0
0 Z∈Z1 Γ∈Γ4
(Z,Z,1,1),even
24
Published as a conference paper at ICLR 2020
where
P(Γ)
'(Z)	1	d
∏ ~ 1jγ3(i-i)=γ4(i-i)i	π
i=1 i-1 I Y3(i)=Y4(i)	J i='(Z)+1
22-∣Γ(i)l
一 2
ni2-1
μ1{∣Γ(i-1)∣ = ∣Γ(i)∣ = 1}
Thus, we have
E[∆wb] '
kxk2 X X X
no
0	i=1 Z∈Z1 E∈Σ4 0
Z0,even
P(E)T2i,3(E)# Γ ∈ Γ4Z0,evenEγΓ2(=i-E1γ)2=(γi)3=(iγ-31(i)) ,
where T2i,3(E) is as in (29), the sum is over unordered edge multisets E (see (17)), and we’ve set
Z0 = (Z, Z, z(0, 1), z(0, 1)).
As in Lemma 8, the counting term satisfies
# {Γ ∈ ΓZo,even 巴= Eιγ=(Y3=iY3(i)} ' 1{'(Z)<i}C(E,'(Z),i)6#l00Ps(E),
where C(E, i, j ) was defined in (32) and is the event that there exists a collision between layers i, j
(i.e. there exists ' = i,...,j - 1 so that ∣R(E('))∣ = 1). Proceeding now as in the derivation of
E[∆ww] at the end 0f the pr00f 0f Pr0p0siti0n 3, we find
E∆wb] ' exP (5 X 力 XL Pa=I 亳 X ^	Pj	(1十。(X
0	∖ i=1 i) i,j=1	'=j '	∖	∖i=1 i / /
j<i
This completes the proof of Proposition 5.

25