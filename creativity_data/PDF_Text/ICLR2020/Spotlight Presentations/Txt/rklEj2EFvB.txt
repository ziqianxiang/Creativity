Published as a conference paper at ICLR 2020
Estimating Gradients for Discrete Random
Variables by Sampling without Replacement
Wouter Kool
University of Amsterdam
ORTEC
w.w.m.kool@uva.nl
Herke van Hoof
University of Amsterdam
h.c.vanhoof@uva.nl
Max Welling
University of Amsterdam
CIFAR
m.welling@uva.nl
Ab stract
We derive an unbiased estimator for expectations over discrete random variables
based on sampling without replacement, which reduces variance as it avoids
duplicate samples. We show that our estimator can be derived as the Rao-
Blackwellization of three different estimators. Combining our estimator with RE-
INFORCE, we obtain a policy gradient estimator and we reduce its variance using
a built-in control variate which is obtained without additional model evaluations.
The resulting estimator is closely related to other gradient estimators. Experiments
with a toy problem, a categorical Variational Auto-Encoder and a structured pre-
diction problem show that our estimator is the only estimator that is consistently
among the best estimators in both high and low entropy settings.
1 Introduction
Put replacement in your basement! We derive the unordered set estimator1: an unbiased (gradi-
ent) estimator for expectations over discrete random variables based on (unordered sets of) samples
without replacement. In particular, we consider the problem of estimating (the gradient of) the
expectation of f(x) where x has a discrete distribution p over the domain D, i.e.
Ex~p(X)[f(X)] = Σχ∈D p(x)f (x).
(1)
This expectation comes up in reinforcement learning, discrete latent variable modelling (e.g. for
compression), structured prediction (e.g. for translation), hard attention and many other tasks that
use models with discrete operations in their computational graphs (see e.g. Jang et al. (2016)). In
general, x has structure (such as a sequence), but we can treat it as a ‘flat’ distribution, omitting
the bold notation, so x has a categorical distribution over D given by p(x), x ∈ D. Typically, the
distribution has parameters θ, which are learnt through gradient descent. This requires estimating
the gradient VθEx〜p8 (χ) [f (x)], using a set of samples S. A gradient estimate e(S) is unbiased if
ES[e(S )] = vθ Ex 〜pθ (x)[f (X)].
(2)
The samples S can be sampled independently or using alternatives such as stratified sampling which
reduce variance to increase the speed of learning. In this paper, we derive an unbiased gradient esti-
mator that reduces variance by avoiding duplicate samples, i.e. by sampling S without replacement.
This is challenging as samples without replacement are dependent and have marginal distributions
that are different from p(x). We further reduce the variance by deriving a built-in control variate,
which maintains the unbiasedness and does not require additional samples.
Related work. Many algorithms for estimating gradients for discrete distributions have been pro-
posed. A general and widely used estimator is REINFORCE (Williams, 1992). Biased gradients
based on a continuous relaxations of the discrete distribution (known as Gumbel-Softmax or Con-
crete) were jointly introduced by Jang et al. (2016) and Maddison et al. (2016). These can be com-
bined with the straight through estimator (Bengio et al., 2013) if the model requires discrete samples
or be used to construct control variates for REINFORCE, as in REBAR (Tucker et al., 2017) or
1Code available athttps://github.com/wouterkool/estimating- gradients- without- replacement.
1
Published as a conference paper at ICLR 2020
RELAX (Grathwohl et al., 2018). Many other methods use control variates and other techniques
to reduce the variance of REINFORCE (Paisley et al., 2012; Ranganath et al., 2014; Gregor et al.,
2014; Mnih & Gregor, 2014; Gu et al., 2016; Mnih & Rezende, 2016).
Some works rely on explicit summation of the expectation, either for the marginal distribution (Tit-
Sias & Lazaro-Gredilla, 2015) or globally summing some categories while sampling from the re-
mainder (Liang et al., 2018; Liu et al., 2019). Other approaches use a finite difference approxima-
tion to the gradient (Lorberbom et al., 2018; 2019). Yin et al. (2019) introduced ARSM, which uses
multiple model evaluations where the number adapts automatically to the uncertainty.
In the structured prediction setting, there are many algorithms for optimizing a quantity under a
sequence of discrete decisions, using (weak) supervision, multiple samples (or deterministic model
evaluations), or a combination both (Ranzato et al., 2016; Shen et al., 2016; He et al., 2016; Norouzi
et al., 2016; Bahdanau et al., 2017; Edunov et al., 2018; Leblond et al., 2018; Negrinho et al., 2018).
Most of these algorithms are biased and rely on pretraining using maximum likelihood or gradually
transitioning from supervised to reinforcement learning. Using Gumbel-Softmax based approaches
in a sequential setting is difficult as the bias accumulates because of mixing errors (Gu et al., 2018).
2 Preliminaries
Throughout this paper, we will denote with B k an ordered sample without replacement of size k
and with Sk an unordered sample (of size k) from the categorical distribution p.
Restricted distribution. When sampling without replacement, we remove the set C ⊂ D already
sampled from the domain and we denote with pD\C the distribution restricted to the domain D \ C :
pD\C (x)
p(x)
1 -	c∈C p(c) ,
X ∈ D \ C.
(3)
Ordered sample without replacement Bk. Let Bk = (b1, ..., bk), bi ∈ D be an ordered sample
without replacement, which is generated from the distribution P as follows: first, sample bi 〜p,
then sample b2 〜pD∖{b1}, b3 〜pD∖{bl,b2}, etc. i.e. elements are sampled one by one without
replacement. Using this procedure, B k can be seen as a (partial) ranking according to the Plackett-
Luce model (Plackett, 1975; Luce, 1959) and the probability of obtaining the vector Bk is
kk
P(Bk )=YY PDI(7 T-P^
i=1	i=1 j<i
(4)
We can also restrict Bk to the domain D \ C, which means that bi 6∈ C for i = 1, ..., k:
k
PD\C(Bk) = Y
i=1
PD∖C(bi)
1- P pD''C(bj)
j<i
k
Y
i=1
P(bi)
1- P P(C)- P p(bj)
c∈C	j<i
(5)
Unordered sample without replacement. Let S k ⊆ D be an unordered sample without replace-
ment from the distribution P, which can be generated simply by generating an ordered sample and
discarding the order. We denote elements in the sample with s ∈ Sk (so without index) and we write
B(Sk) as the set of all k! permutations (orderings) Bk that correspond to (could have generated) Sk.
It follows that the probability for sampling Sk is given by:
kk
P(Sk)= X P(Bk )= X ∏ T-P^ =(∏P(s))∙ X ∏ l-ɪb-ʌ.
Bk∈B(Sk)	Bk ∈B(Sk) i=1 j<i j	s∈Sk	Bk ∈B(Sk) i=1 j<i j
(6)
The last step follows since Bk ∈ B(Sk) is an ordering of Sk, such that Qik=1P(bi) = Qs∈S P(s).
Naive computation ofP(Sk) is O(k!), but in Appendix B we show how to compute it efficiently.
2
Published as a conference paper at ICLR 2020
When sampling from the distribution restricted to D \ C, we sample Sk ⊆ D \ C with probability:
k
1
PD∖C(Sk) =	∏ p(s)	∙	∑	∏
s∈Sk
Bk∈B(Sk) i=1
1 -	p(c) -	p(bj).
(7)
c∈C	j<i
The Gumbel-Top-k trick. As an alternative to sequential sampling, we can also sample B k and
Sk by taking the top k of Gumbel variables (Yellott, 1977; Vieira, 2014; Kim et al., 2016). Following
notation from Kool et al. (2019c), we define the perturbed log-probability gφi = φi + gi , where
φi = logp(i) and gi 〜GUmbel(0). Then let bi = arg maxi∈D gφi, b2 = arg maXi∈D∖{bι} gφi, etc.,
so Bk is the top k of the perturbed log-probabilities in decreasing order. The probability of obtaining
Bk Using this procedUre is given by eqUation 4, so this provides an alternative sampling method
which is effectively a (non-differentiable) reparameterization of sampling withoUt replacement. For
a differentiable reparameterization, see Grover et al. (2019).
It follows that taking the top k pertUrbed log-probabilities without order, we obtain the Unordered
sample set Sk. This way of sampling Underlies the efficient compUtation of p(Sk) in Appendix B.
3 Methodology
In this section, we derive the unordered set policy gradient estimator: a low-variance, Unbiased
estimator of VθEp@(x)[f (x)] based on an unordered sample without replacement Sk. First, We
derive the generic (non-gradient) estimator for E[f (x)] as the Rao-Blackwellized version ofa single
sample Monte Carlo estimator (and two other estimators!). Then we combine this estimator with
REINFORCE (Williams, 1992) and we show how to reduce its variance using a built-in baseline.
3.1	Rao-Blackwellization of the single sample estimator
A very crude but simple estimator for E[f (x)] based on the ordered sample Bk is to only use the
first element b1, which by definition is a sample from the distribution p. We define this estimator as
the single sample estimator, which is unbiased, since
EBk 〜p(Bk)f (bI)] = Eb)ι^^p(bι)[f (b1)] = Ex 〜p(x)f (X)].
(8)
Discarding all but one sample, the single sample estimator is inefficient, but we can use Rao-
Blackwellization (Casella & Robert, 1996) to signficantly improve it. To this end, we consider the
distribution Bk |Sk, which is, knowing the unordered sample Sk, the conditional distribution over
ordered samples Bk ∈ B(Sk) that could have generated Sk.2 Using Bk |Sk, we rewrite E[f (b1)] as
EBk-p(Bk)[f(bI)] = ESk〜P(Sk) [EBk-p(Bk∣Sk) [f(bI)]] = ESk〜p(Sk) [Ebi〜p(bι∣Sk) [f(bI)]] ∙
The Rao-Blackwellized version of the single sample estimator computes the inner conditional ex-
pectation exactly. Since Bk is an ordering of Sk, we have b1 ∈ Sk and we can compute this as
EbI〜p(bι∣Sk) [f(b1)] = E P(b1 = SISk)f(s)
(9)
s∈Sk
where, in a slight abuse of notation, P(b1 = S|Sk) is the probability that the first sampled element
b1 takes the value S, given that the complete set of k samples is Sk. Using Bayes’ Theorem we find
P(b1 = S|Sk)
p(Sk|b1 = S)P (b1 = S)	pD\{s} (Sk \ {S})p(S)
p(Sk)
p(Sk)
(10)
The step p(Sk |b1 = S) = pD\{s} (Sk \ {S}) comes from analyzing sequential sampling without
replacement: given that the first element sampled is S, the remaining elements have a distribution
restricted to D\ {S}, so sampling Sk (including S) given the first element S is equivalent to sampling
the remainder Sk \ {S} from the restricted distribution, which has probability pD\{s} (Sk \ {S}) (see
equation 7).
2Note that Bk|Sk is not a Plackett-Luce distribution restricted to Sk !
3
Published as a conference paper at ICLR 2020
The unordered set estimator. For notational convenience, we introduce the leave-one-out ratio.
Definition 1. The leave-one-out ratio of s w.r.t. the set S is given by R(Sk, s)
PD∖{s}(Sk∖{s})
P(Sk)
Rewriting equation 10 as P(b1 = s|Sk) = p(s)R(Sk, s) shows that the probability of sampling s
first, given Sk, is simply the unconditional probability multiplied by the leave-one-out ratio. We now
define the unordered set estimator as the Rao-Blackwellized version of the single-sample estimator.
Theorem 1.	The unordered set estimator, given by
eUS(Sk) = X p(s)R(Sk,s)f(s)	(11)
s∈Sk
is the Rao-Blackwellized version of the (unbiased!) single sample estimator.
Proof. Using P(b1 = s|Sk) = p(s)R(Sk, s) in equation 9 we have
Ebι~p(bι∣Sk) [f(bI)] = X P(b1 = s|Sk)f(s) = X p(s)R(Sk, s)f(s).	(12)
s∈Sk	s∈Sk
□
The implication of this theorem is that the unordered set estimator, in explicit form given by equa-
tion 11, is an unbiased estimator ofE[f(x)] since it is the Rao-Blackwellized version of the unbiased
single sample estimator. Also, as expected by taking multiple samples, it has variance equal or lower
than the single sample estimator by the Rao-BlackWell Theorem (Lehmann & Scheffe, 1950).
3.2	Rao-Blackwellization of other estimators
The unordered set estimator is also the result of Rao-BlackWellizing tWo other unbiased estimators:
the stochastic sum-and-sample estimator and the importance-weighted estimator.
The sum-and-sample estimator. We define as sum-and-sample estimator any estimator that relies
on the identity that for any C ⊂ D
Ex~p(x)[f (X)] = Ex〜pD∖C(χ)
p(c)f(c) + 1 -	p(c)	f(x) .
c∈C	c∈C
(13)
For the derivation, see Appendix C.1 or Liang et al. (2018); Liu et al. (2019). In general, a sum-and-
sample estimator With a budget of k > 1 evaluations sums expectation terms fora set of categories C
(s.t. |C| < k) explicitly (e.g. selected by their value f (Liang et al., 2018) or probability p (Liu et al.,
2019)), and uses k - |C | (doWn-Weighted) samples from D \ C to estimate the remaining terms. As
is noted by Liu et al. (2019), selecting C such that
1-E c∈c P(C)
k—|CI
is minimized guarantees to reduce
variance compared to a standard minibatch of k samples (which is equivalent to setting C = 0). See
also Fearnhead & Clifford (2003) for a discussion on selecting C optimally. The ability to optimize
C depends on whether p(c) can be computed efficiently a-priori (before sampling). This is difficult
in high-dimensional settings, e.g. sequence models which compute the probability incrementally
while ancestral sampling. An alternative is to select C stochastically (as equation 13 holds for any
C), and we choose C = Bk—1 to define the stochastic sum-and-sample estimator:
k —1	/ k —1	∖
eSSAS(Bk) = Xp(bj)f(bj) +	1-Xp(bj)	f(bk).	(14)
j=1	j=1
For simplicity, we consider the version that sums k - 1 terms here, but the following results also
hold for a version that sums k - m terms and uses m samples (without replacement) (see Appendix
C.3). Sampling without replacement, it holds that bk∣Bk-1 〜pD∖Bk 1, so the unbiasedness follows
from equation 13 by separating the expectation over Bk into expectations over Bk—1 and bk|Bk—1:
EBk--P(Bk-I) [Ebk^p(bk∣Bk-1) [eSSAS(Bk)]] = EBk--P(Bk-I) [E[f(x)]] = E[f(x)].
4
Published as a conference paper at ICLR 2020
In general, a sum-and-sample estimator reduces variance if the probability mass is concentrated on
the summed categories. As typically high probability categories are sampled first, the stochastic
sum-and-sample estimator sums high probability categories, similar to the estimator by Liu et al.
(2019) which we refer to as the deterministic sum-and-sample estimator. As we show in Appendix
C.2, Rao-Blackwellizing the stochastic sum-and-sample estimator also results in the unordered set
estimator. This even holds for a version that uses m samples and k-m summed terms (see Appendix
C.3), which means that the unordered set estimator has equal or lower variance than the optimal (in
terms of m) stochastic sum-and-sample estimator, but conveniently does not need to choose m.
The importance-weighted estimator. The importance-weighted estimator (Vieira, 2017) is
eIW(Sk,κ)= X 钙f(s).	(15)
s∈Sk q(s,κ)
This estimator is based on the idea of priority sampling (Duffield et al., 2007). It does not use
the order of the sample, but assumes sampling using the Gumbel-Top-k trick and requires access
to κ, the (k + 1)-th largest perturbed log-probability, which can be seen as the ‘threshold’ since
gφs > κ ∀s ∈ Sk. q(s, a) = P (gφs > a) can be interpreted as the inclusion probability of
s ∈ Sk (assuming a fixed threshold a instead of a fixed sample size k). For details and a proof of
unbiasedness, see Vieira (2017) or Kool et al. (2019c). As the estimator has high variance, Kool
et al. (2019c) resort to normalizing the importance weights, resulting in biased estimates. Instead,
we use Rao-Blackwellization to eliminate stochasticity by κ. Again, the result is the unordered set
estimator (see Appendix D.1), which thus has equal or lower variance.
3.3	The unordered set policy gradient estimator
Writing pθ to indicate the dependency on the model parameters θ, we can combine the unordered set
estimator with REINFORCE (Williams, 1992) to obtain the unordered set policy gradient estimator.
Corollary 1. The unordered set policy gradient estimator, given by
eUSPG(Sk) = X Pθ(S)R(Sk, s)Vθ logpθ(s)f (s) = X Vepe(s)R(Sk, s)f (s),	(16)
s∈Sk	s∈Sk
is an unbiased estimate of the policy gradient.
Proof. Using REINFORCE (Williams, 1992) combined with the unordered set estimator we find:
VeEpo(x)[f (x)]= Epe(x)[Vθ logpθ(x)f (x)]= Esk_pθ(sk)X pθ(S)R(Sk, s)Vθ logpθ(s)f (s)
s∈Sk
□
Variance reduction using a built-in control variate. The variance of REINFORCE can be re-
duced by subtracting a baseline from f . When taking multiple samples (with replacement), a simple
and effective baseline is to take the mean of other (independent!) samples (Mnih & Rezende, 2016).
Sampling without replacement, we can use the same idea to construct a baseline based on the other
samples, but we have to correct for the fact that the samples are not independent.
Theorem 2.	The unordered set policy gradient estimator with baseline, given by
e USPGBL(Sk) = E Vθpθ (s)R(Sk, s) If (s) - E pe (S)RD'ySk, s0)f (s0) ) ,	(17)
s∈Sk	s0∈Sk
where
pD'{3}(Sk∖{s,s0})
pD'{s} (Sk ∖{s})
is the second order leave-one-out ratio, is an unbiased estimate of the policy gradient.
(18)
5
Published as a conference paper at ICLR 2020
Proof. See Appendix E.1.	□
This theorem shows how to include a built-in baseline based on dependent samples (without re-
placement), without introducing bias. By having a built-in baseline, the value f (s) for sample s is
compared against an estimate of its expectation E[f (s)], based on the other samples. The difference
is an estimate of the advantage (Sutton & Barto, 2018), which is positive if the sample s is ‘bet-
ter’ than average, causing pθ(s) to be increased (reinforced) through the sign of the gradient, and
vice versa. By sampling without replacement, the unordered set estimator forces the estimator to
compare different alternatives, and reinforces the best among them.
Including the pathwise derivative. So far, we have only considered the scenario where f does
not depend on θ. If f does depend on θ, for example in a VAE (Kingma & Welling, 2014; Rezende
et al., 2014), then we use the notation fθ and we can write the gradient (Schulman et al., 2015) as
Vθ Epθ (χ)[fθ (x)] = Epθ(χ)[Vθ log Pθ (x)fθ (x) + Vθ fθ (x)].	(19)
The additional second (‘pathwise’) term can be estimated (using the same samples) with the standard
unordered set estimator. This results in the full unordered set policy gradient estimator:
eFUSPG(Sk) = X Vθpθ(s)R(Sk,s)fθ(s)+ Xpθ(s)R(Sk,s)Vθfθ(s)
s∈Sk	s∈Sk
= X R(Sk, s)Vθ (pθ(s)fθ(s))	(20)
s∈Sk
Equation 20 is straightforward to implement using an automatic differentiation library. We can also
include the baseline (as in equation 17) but We must make sure to call stop_gradient (detach in
PyTorch) on the baseline (but not on fθ(s)!). Importantly, we should never track gradients through
the leave-one-out ratio R(Sk, s) Which means it can be efficiently computed in pure inference mode.
Scope & limitations. We can use the unordered set estimator for any discrete distribution from
Which We can sample Without replacement, by treating it as a univariate categorical distribution
over its domain. This includes sequence models, from Which We can sample using Stochastic Beam
Search (Kool et al., 2019c), as Well as multivariate categorical distributions Which can also be treated
as sequence models (see Section 4.2). In the presence of continuous variables ora stochastic function
f, We may separate this stochasticity from the stochasticity over the discrete distribution, as in
Lorberbom et al. (2019). The computation of the leave-one-out ratios adds some overhead, although
they can be computed efficiently, even for large k (see Appendix B). For a moderately sized model,
the costs of model evaluation and backpropagation dominate the cost of computing the estimator.
3.4 Relation to other multi-sample estimators
Relation to Murthy’s estimator. We found out that the ‘vanilla’ unordered set estimator (equa-
tion 11) is actually a special case of the estimator by Murthy (1957), knoWn in statistics literature
for estimation of a population total Θ = Pi∈D yi. Using yi = p(i)f (i), We have Θ = E[f (i)], so
Murthy’s estimator can be used to estimate expectations (see equation 11). Murthy derives the esti-
mator by ‘unordering’ a convex combination of Raj (1956) estimators, Which, using yi = p(i)f (i),
are stochastic sum-and-sample estimators in our analogy.
Murthy (1957) also provides an unbiased estimator of the variance, Which may be interesting for
future applications. Since Murthy’s estimator can be used With arbitrary sampling distribution, it
is straightforWard to derive importance-sampling versions of our estimators. In particular, We can
sample S Without replacement using q(x) > 0, x ∈ D, and use equations 11, 16, 17 and 20, as long
as We compute the leave-one-out ratio R(Sk , s) using q.
While part of our derivation coincides With Murthy (1957), We are not aWare of previous Work
using this estimator to estimate expectations. Additionally, We discuss practical computation of
p(S ) (Appendix B), We shoW the relation to the importance-Weighted estimator, and We provide the
extension to estimating policy gradients, especially including a built-in baseline Without adding bias.
6
Published as a conference paper at ICLR 2020
Relation to the empirical risk estimator. The empirical risk loss (Edunov et al., 2018) estimates
the expectation in equation 1 by summing only a subset S of the domain, using normalized proba-
Pθ (S)
Ps0∈S Pθ (S).
bilities ^ (S)
Using this loss, the (biased) estimate of the gradient is given by
eRISK(Sk) = £ Ve p
S∈Sk
Pe(S)— ʌ f(S)
.0∈sk Pθ(s0)J f( )
(21)
The risk estimator is similar to the unordered set policy gradient estimator, with two important
differences: 1) the individual terms are normalized by the total probability mass rather than the
leave-one-out ratio and 2) the gradient w.r.t. the normalization factor is taken into account. As a
result, samples ‘compete’ for probability mass and only the best can be reinforced. This has the
same effect as using a built-in baseline, which we prove in the following theorem.
Theorem 3.	By taking the gradient w.r.t. the normalization factor into account, the risk estimator
has a built-in baseline, which means it can be written as
押KFk =工JVPe(S)P^ (f (S) - ∑ Pe⑺P^f(" . (22)
S∈S	S ∈S
Proof. See Appendix F.1	□
This theorem highlights the similarity between the biased risk estimator and our unbiased estimator
(equation 17), and suggests that their only difference is the weighting of terms. Unfortunately, the
implementation by Edunov et al. (2018) has more sources of bias (e.g. length normalization), which
are not compatible with our estimator. However, we believe that our analysis helps analyze the bias
of the risk estimator and is a step towards developing unbiased estimators for structured prediction.
Relation to VIMCO. VIMCO (Mnih & Rezende, 2016) is an estimator that uses k samples (with
replacement) to optimize an objective of the form log 1 Pi f (xi), which is amulti-sample stochastic
lower bound in the context of variational inference. VIMCO reduces the variance by using a local
baseline for each of the k samples, based on the other k - 1 samples. While we do not have a
log term, as our goal is to optimize general E[f (x)], we adopt the idea of forming a baseline based
on the other samples, and we define REINFORCE with replacement (with built-in baseline) as the
estimator that computes the gradient estimate using samples with replacement Xk = (x1, ..., xk) as
eRFWR(Xk) = 1 XX Ve logpv(Xi) ∣f (xi)-占 X f (Xj) ∣ .	(23)
i=1	- j 6=i
This estimator is unbiased, as Exi,xj [Ve logPe(Xi)f(Xj)] = 0 for i 6= j (see also Kool et al.
(2019b)). We think of the unordered set estimator as the without-replacement version of this es-
timator, which weights terms by Pe(S)R(Sk, s) instead of 1. This puts more weight on higher
probability elements to compensate for sampling without replacement. If probabilities are small and
(close to) uniform, there are (almost) no duplicate samples and the weights will be close to 1, so the
gradient estimate of the with- and without-replacement versions are similar.
Relation to ARSM. ARSM (Yin et al., 2019) also uses multiple evaluations (‘pseudo-samples’)
of Pe and f. This can be seen as similar to sampling without replacement, and the estimator also
has a built-in control variate. Compared to ARSM, our estimator allows direct control over the
computational cost (through the sample size k) and has wider applicability, for example it also
applies to multivariate categorical variables with different numbers of categories per dimension.
Relation to stratified/systematic sampling. Our estimator aims to reduce variance by changing
the sampling distribution for multiple samples by sampling without replacement. There are alterna-
tives, such as using stratified or systematic sampling (see, e.g. Douc & CaPPe (2005)). Both partition
the domain D into k strata and take a single sample from each stratum, where systematic sampling
uses common random numbers for each stratum. In applications involving high-dimensional or
structured domains, it is unclear how to partition the domain and how to sample from each partition.
Additionally, as samples are not independent, it is non-trivial to include a built-in baseline, which
we find is a key component that makes our estimator perform well.
7
Published as a conference paper at ICLR 2020
2	4	β	8	10	12	14	16
Number of eval uaU<jns (lncl. baseline)
(a) High entropy (η = 0)
-→- Stratified (no bɪ)
-→- Systematic (no bɪ)
- REINF. w.r. (no bl)
— Det sum & sample (no bl)
-→- Stoch. sum & sample (no bl)
— Unordered (no bl)
-REINF. w.r. (built-in bl)
— Det sum & sample (sample bɪ)
— Stoch. sum & sample (sample bɪ)
-Unordered (built-in bl)
2	4	β	8	10	12	14 lβ
Number cf evaluations (lncl. baseline)
(b) Low entropy (η = —4)
Figure 1: Bernoulli gradient variance (on log scale) as a function of the number of model evaluations
(including baseline evaluations, so the sum-and-sample estimators with sampled baselines use twice
as many evaluations). Note that for some estimators, the variance is 0 (log variance -∞) for k = 8.
4 Experiments
4.1	Bernoulli toy experiment
We use the code by Liu et al. (2019) to reproduce their Bernoulli toy experiment. Given a vector p =
(0.6,0.51,0.48) the goal is to minimize the loss L(η)=6方3应〜Bern(σ(η)) [P3=ι(xi - Pi)2].
Here x1 , x2 , x3 are i.i.d. from the Bernoulli(σ(η)) distribution, parameterized by a scalar η ∈ R,
where σ(η) = (1 + exp(-η))-1 is the sigmoid function. We compare different estimators, with and
without baseline (either ‘built-in’ or using additional samples, referred to as REINFORCE+ in Liu
et al. (2019)). We report the (log-)variance of the scalar gradient 嗡 as a function of the number of
model evaluations, which is twice as high when using a sampled baseline (for each term).
As can be seen in Figure 1, the unordered set estimator is the only estimator that has consistently
the lowest (or comparable) variance in both the high (η = 0) and low entropy (η = -4) regimes and
for different number of samples/model evaluations. This suggests that it combines the advantages
of the other estimators. We also ran the actual optimization experiment, where with as few as k = 3
samples the trajectory was indistinguishable from using the exact gradient (see Liu et al. (2019)).
4.2	Categorical Variational Auto-Encoder
We use the code from Yin et al. (2019) to train a categorical Variational Auto-Encoder (VAE) with
20 dimensional latent space, with 10 categories per dimension (details in Appendix G.1). To use
our estimator, we treat this as a single factorized distribution with 1020 categories from which we
can sample without replacement using Stochastic Beam Search (Kool et al., 2019c), sequentially
sampling each dimension as if it were a sequence model. We also perform experiments with 102
latent space, which provides a lower entropy setting, to highlight the advantage of our estimator.
Measuring the variance. In Table 1, we report the variance of different gradient estimators with
k = 4 samples, evaluated on a trained model. The unordered set estimator has the lowest variance
in both the small and large domain (low and high entropy) setting, being on-par with the best of
the (stochastic3) sum-and-sample estimator and REINFORCE with replacement4. This confirms the
toy experiment, suggesting that the unordered set estimator provides the best of both estimators. In
Appendix G.2 we repeat the same experiment at different stages of training, with similar results.
3We cannot use the deterministic version by Liu et al. (2019) since we cannot select the top k categories.
4We cannot compare against VIMCO (Mnih & Rezende, 2016) as it optimizes a different objective.
Table 1: VAE gradient log-variance of different unbiased estimators with k = 4 samples.
	ARSM RELAX REINFORCE	Sum & sample REINF.w.r. Unordered
Domain	(no bl) (sample bl) (no bl) (sample bl) (built-in bl) (built-in bl)
Small 102	13?45^^1167^^11.52	7.49	629	629	665	629
Large 1020	15.55	15.86	13.81	8.48	13.77	8.44	7.06	7.05
8
Published as a conference paper at ICLR 2020
1®
155
150
145
140
135
130
Training -ELBO (102 latent space)
Epoch
(a) Small domain (latent space size 102)
Training -ELBO (1O20 latent space)
150
140
130
120
IU
90
80
70
60
(b) Large domain (latent space size 1020)
Figure 2: VAE smoothed training curves (-ELBO) of two independent runs when training with
different estimators with k = 1, 4 or 8 (thicker lines) samples (ARSM has a variable number).
Some lines coincide, so we sort the legend by the lowest -ELBO achieved and report this value.
ELBO optimization. We use different estimators to optimize the ELBO (details in Appendix
G.1). Additionally to the baselines by Yin et al. (2019) we compare against REINFORCE with
replacement and the stochastic sum-and-sample estimator. In Figure 2 we observe that our estima-
tor performs on par with REINFORCE with replacement (and built-in baseline, equation 23) and
outperforms other estimators in at least one of the settings. There are a lot of other factors, e.g.
exploration that may explain why we do not get a strictly better result despite the lower variance.
We note some overfitting (see validation curves in Appendix G.2), but since our goal is to show
improved optimization, and to keep results directly comparable to Yin et al. (2019), we consider
regularization a separate issue outside the scope of this paper. These results are using MNIST bina-
rized by a threshold of 0.5. In Appendix G.2 we report results using the standard binarized MNIST
dataset from Salakhutdinov & Murray (2008).
4.3	Structured Prediction for the Travelling Salesman Problem
To show the wide applicability of our estimator, we consider the structured prediction task of pre-
dicting routes (sequences) for the Travelling Salesman Problem (TSP) (Vinyals et al., 2015; Bello
et al., 2016; Kool et al., 2019a). We use the code by Kool et al. (2019a)5 to reproduce their TSP
experiment with 20 nodes. For details, see Appendix H.
We implement REINFORCE with replacement (and built-in baseline) as well as the stochastic sum-
and-sample estimator and our estimator, using Stochastic Beam Search (Kool et al., 2019c) for
sampling. Also, we include results using the biased normalized importance-weighted policy gradient
estimator with built-in baseline (derived in Kool et al. (2019b), see Appendix D.2). Additionally,
we compare against REINFORCE with greedy rollout baseline (Rennie et al., 2017) used by Kool
et al. (2019c) and a batch-average baseline. For reference, we also include the biased risk estimator,
either ‘sampling’ using stochastic or deterministic beam search (as in Edunov et al. (2018)).
In Figure 3a, we compare training progress (measured on the validation set) as a function of the
number of training steps, where we divide the batch size by k to keep the total number of samples
equal. Our estimator outperforms REINFORCE with replacement, the stochastic sum-and-sample
estimator and the strong greedy rollout baseline (which uses additional baseline model evaluations)
and performs on-par with the biased risk estimator. In Figure 3b, we plot the same results against the
number of instances, which shows that, compared to the single sample estimators, we can train with
less data and less computational cost (as we only need to run the encoder once for each instance).
5 https://github.com/wouterkool/attention- learn- to- route
9
Published as a conference paper at ICLR 2020
1.40%
1.20»
1.00%
a
2 0.80%
£
§0.60%
0«%
0.20%
0.00%
Performance vs. training steps
0	500∞	1O∞∞	150000	200000	250000
Steps
(a) Performance vs. training steps
(b) Performance vs. number of instances
Figure 3: TSP validation set optimality gap measured during training. Raw results are light,
smoothed results are darker (2 random seeds). We compare our estimator against different un-
biased and biased (dotted) multi-sample estimators and against single-sample REINFORCE, with
batch-average or greedy rollout baseline.
5 Discussion
We introduced the unordered set estimator, a low-variance, unbiased gradient estimator based on
sampling without replacement, which can be used as an alternative to the popular biased Gumbel-
Softmax estimator (Jang et al., 2016; Maddison et al., 2016). Our estimator is the result of Rao-
Blackwellizing three existing estimators, which guarantees equal or lower variance, and is closely
related to a number of other estimators. It has wide applicability, is parameter free (except for the
sample size k) and has competitive performance to the best of alternatives in both high and low
entropy regimes.
In our experiments, we found that REINFORCE with replacement, with multiple samples and a
built-in baseline as inspired by VIMCO (Mnih & Rezende, 2016), is a simple yet strong estimator
which has performance similar to our estimator in the high entropy setting. We are not aware of any
recent work on gradient estimators for discrete distributions that has considered this estimator as
baseline, while it may be often preferred given its simplicity. In future work, we want to investigate
if We can apply our estimator to estimate gradients 'locally' (Titsias & Lazaro-Gredilla, 2015), as
locally we have a smaller domain and expect more duplicate samples.
Acknowledgments
This research Was funded by ORTEC. We Would like to thank anonymous revieWers for their feed-
back that helped improve the paper.
References
Dzmitry Bahdanau, Philemon Brakel, Kelvin Xu, Anirudh Goyal, Ryan LoWe, Joelle Pineau, Aaron
Courville, and Yoshua Bengio. An actor-critic algorithm for sequence prediction. In International
Conference on Learning Representations, 2017.
IrWan Bello, Hieu Pham, Quoc V Le, Mohammad Norouzi, and Samy Bengio. Neural combinatorial
optimization With reinforcement learning. arXiv preprint arXiv:1611.09940, 2016.
Yoshua Bengio, Nicholas Leonard, and Aaron Courville. Estimating or propagating gradients
through stochastic neurons for conditional computation. arXiv preprint arXiv:1308.3432, 2013.
George Casella and Christian P Robert. Rao-BlackWellisation of sampling schemes. Biometrika, 83
(1):81-94,1996.
Randal Douc and Olivier Cappe. Comparison of resampling schemes for particle filtering. In ISPA
2005. Proceedings of the 4th International Symposium on Image and Signal Processing and Anal-
ysis, 2005., pp. 64-69. IEEE, 2005.
Nick Duffield, Carsten Lund, and Mikkel Thorup. Priority sampling for estimation of arbitrary
subset sums. Journal of the ACM (JACM), 54(6):32, 2007.
10
Published as a conference paper at ICLR 2020
Sergey Edunov, Myle Ott, Michael Auli, David Grangier, et al. Classical structured prediction losses
for sequence to sequence learning. In Proceedings of the 2018 Conference of the North Ameri-
can Chapter of the Association for Computational Linguistics: Human Language Technologies,
Volume 1 (Long Papers), volume 1, pp. 355-364, 2018.
Paul Fearnhead and Peter Clifford. On-line inference for hidden markov models via particle filters.
Journal of the Royal Statistical Society: Series B (Statistical Methodology), 65(4):887-899, 2003.
Will Grathwohl, Dami Choi, Yuhuai Wu, Geoffrey Roeder, and David Duvenaud. Backpropagation
through the void: Optimizing control variates for black-box gradient estimation. In International
Conference on Learning Representations, 2018.
Karol Gregor, Ivo Danihelka, Andriy Mnih, Charles Blundell, and Daan Wierstra. Deep autoregres-
sive networks. In International Conference on Machine Learning, pp. 1242-1250, 2014.
Aditya Grover, Eric Wang, Aaron Zweig, and Stefano Ermon. Stochastic optimization of sorting
networks via continuous relaxations. In International Conference on Learning Representations,
2019.
Jiatao Gu, Daniel Jiwoong Im, and Victor OK Li. Neural machine translation with Gumbel-greedy
decoding. In Thirty-Second AAAI Conference on Artificial Intelligence (AAAI), 2018.
Shixiang Gu, Sergey Levine, Ilya Sutskever, and Andriy Mnih. Muprop: Unbiased backpropagation
for stochastic neural networks. In International Conference on Learning Representations, 2016.
Di He, Yingce Xia, Tao Qin, Liwei Wang, Nenghai Yu, Tie-Yan Liu, and Wei-Ying Ma. Dual
learning for machine translation. In Advances in Neural Information Processing Systems, pp.
820-828, 2016.
Eric Jang, Shixiang Gu, and Ben Poole. Categorical reparameterization with gumbel-softmax. In
International Conference on Learning Representations, 2016.
Carolyn Kim, Ashish Sabharwal, and Stefano Ermon. Exact sampling with integer linear programs
and random perturbations. In Thirtieth AAAI Conference on Artificial Intelligence, 2016.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In International
Conference on Learning Representations, 2015.
Diederik P Kingma and Max Welling. Auto-encoding variational Bayes. In International Conference
on Learning Representations, 2014.
Wouter Kool, Herke van Hoof, and Max Welling. Attention, learn to solve routing problems! In
International Conference on Learning Representations, 2019a.
Wouter Kool, Herke van Hoof, and Max Welling. Buy 4 reinforce samples, get a baseline for
free! In Deep Reinforcement Learning Meets Structured Prediction Workshop at the International
Conference on Learning Representations, 2019b.
Wouter Kool, Herke Van Hoof, and Max Welling. Stochastic beams and where to find them: The
gumbel-top-k trick for sampling sequences without replacement. In International Conference on
Machine Learning, pp. 3499-3508, 2019c.
Hugo Larochelle and Iain Murray. The neural autoregressive distribution estimator. In Proceedings
of the Fourteenth International Conference on Artificial Intelligence and Statistics, pp. 29-37,
2011.
Remi Leblond, Jean-Baptiste Alayrac, Anton Osokin, and Simon Lacoste-JUlien. Searnn: Training
RNNs with global-local losses. In 6th International Conference on Learning Representations,
2018.
EL Lehmann and Henry Scheffe. Completeness, similar regions, and unbiased estimation: Part i.
Sankhya： The Indian Journal ofStatistics, pp. 305-340, 1950.
11
Published as a conference paper at ICLR 2020
Chen Liang, Mohammad Norouzi, Jonathan Berant, Quoc V Le, and Ni Lao. Memory augmented
policy optimization for program synthesis and semantic parsing. In Advances in Neural Informa-
tion Processing Systems, pp. 9994-10006, 2018.
Runjing Liu, Jeffrey Regier, Nilesh Tripuraneni, Michael Jordan, and Jon Mcauliffe. Rao-
Blackwellized stochastic gradients for discrete distributions. In International Conference on Ma-
chine Learning, pp. 4023-4031, 2019.
Guy Lorberbom, Andreea Gane, Tommi Jaakkola, and Tamir Hazan. Direct optimization through
argmax for discrete variational auto-encoder. arXiv preprint arXiv:1806.02867, 2018.
Guy Lorberbom, Chris J Maddison, Nicolas Heess, Tamir Hazan, and Daniel Tarlow. Direct
policy gradients: Direct optimization of policies in discrete action spaces. arXiv preprint
arXiv:1906.06062, 2019.
R Duncan Luce. Individual choice behavior: A theoretical analysis. John Wiley, 1959.
Chris J Maddison, Daniel Tarlow, and Tom Minka. A* sampling. In Advances in Neural Information
Processing Systems, pp. 3086-3094, 2014.
Chris J Maddison, Andriy Mnih, and Yee Whye Teh. The concrete distribution: A continuous re-
laxation of discrete random variables. In International Conference on Learning Representations,
2016.
Andriy Mnih and Karol Gregor. Neural variational inference and learning in belief networks. In
International Conference on Machine Learning, pp. 1791-1799, 2014.
Andriy Mnih and Danilo Rezende. Variational inference for Monte Carlo objectives. In International
Conference on Machine Learning, pp. 2188-2196, 2016.
MN Murthy. Ordered and unordered estimators in sampling without replacement. Sankhya： The
Indian Journal of Statistics (1933-1960), 18(3/4):379-390, 1957.
Renato Negrinho, Matthew Gormley, and Geoffrey J Gordon. Learning beam search policies via
imitation learning. In Advances in Neural Information Processing Systems, pp. 10673-10682,
2018.
Mohammad Norouzi, Samy Bengio, Navdeep Jaitly, Mike Schuster, Yonghui Wu, Dale Schuurmans,
et al. Reward augmented maximum likelihood for neural structured prediction. In Advances In
Neural Information Processing Systems, pp. 1723-1731, 2016.
John Paisley, David M Blei, and Michael I Jordan. Variational Bayesian inference with stochastic
search. In International Conference on Machine Learning, pp. 1363-1370, 2012.
Robin L Plackett. The analysis of permutations. Journal of the Royal Statistical Society: Series C
(Applied Statistics), 24(2):193-202, 1975.
Des Raj. Some estimators in sampling with varying probabilities without replacement. Journal of
the American Statistical Association, 51(274):269-284, 1956.
Rajesh Ranganath, Sean Gerrish, and David Blei. Black box variational inference. In Artificial
Intelligence and Statistics, pp. 814-822, 2014.
Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli, and Wojciech Zaremba. Sequence level train-
ing with recurrent neural networks. In International Conference on Learning Representations,
2016.
Steven J Rennie, Etienne Marcheret, Youssef Mroueh, Jerret Ross, and Vaibhava Goel. Self-critical
sequence training for image captioning. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pp. 7008-7024, 2017.
Danilo Jimenez Rezende, Shakir Mohamed, and Daan Wierstra. Stochastic backpropagation and ap-
proximate inference in deep generative models. In International Conference on Machine Learn-
ing, pp. 1278-1286, 2014.
12
Published as a conference paper at ICLR 2020
Geoffrey Roeder, Yuhuai Wu, and David K Duvenaud. Sticking the landing: Simple, lower-variance
gradient estimators for variational inference. In Advances in Neural Information Processing Sys-
tems,pp. 6925-6934, 2017.
Ruslan Salakhutdinov and Iain Murray. On the quantitative analysis of deep belief networks. In
International Conference on Machine Learning, pp. 872-879, 2008.
John Schulman, Nicolas Heess, Theophane Weber, and Pieter Abbeel. Gradient estimation using
stochastic computation graphs. In Advances in Neural Information Processing Systems, pp. 3528-
3536, 2015.
Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua Wu, Maosong Sun, and Yang Liu. Minimum
risk training for neural machine translation. In Proceedings of the 54th Annual Meeting of the
Association for Computational Linguistics (Volume 1: Long Papers), volume 1, pp. 1683-1692,
2016.
Richard S Sutton and Andrew G Barto. Reinforcement learning: An introduction. MIT press, 2018.
Michalis K Titsias and MigUeI Lazaro-Gredilla. Local expectation gradients for black box varia-
tional inference. In Advances in Neural Information Processing Systems-Volume 2, pp. 2638-
2646, 2015.
George TUcker, Andriy Mnih, Chris J Maddison, John Lawson, and Jascha Sohl-Dickstein. Rebar:
Low-variance, Unbiased gradient estimates for discrete latent variable models. In Advances in
Neural Information Processing Systems, pp. 2627-2636, 2017.
Tim Vieira.	GUmbel-max trick and weighted reservoir sampling, 2014.
URL	https://timvieira.github.io/blog/post/2014/08/01/
gumbel-max-trick-and-weighted-reservoir-sampling/.
Tim Vieira. Estimating means in a finite Universe, 2017. URL https://timvieira.github.
io/blog/post/2017/07/03/estimating-means-in-a- finite-universe/.
Oriol Vinyals, Meire FortUnato, and Navdeep Jaitly. Pointer networks. In Advances in Neural
Information Processing Systems, pp. 2692-2700, 2015.
Ronald J Williams. Simple statistical gradient-following algorithms for connectionist reinforcement
learning. Machine learning, 8(3-4):229-256, 1992.
John I Yellott. The relationship between LUce’s choice axiom, ThUrstone’s theory of comparative
jUdgment, and the doUble exponential distribUtion. Journal of Mathematical Psychology, 15(2):
109-144, 1977.
Mingzhang Yin, YUgUang YUe, and MingyUan ZhoU. Arsm: AUgment-reinforce-swap-merge esti-
mator for gradient backpropagation throUgh categorical variables. In International Conference on
Machine Learning, pp. 7095-7104, 2019.
13
Published as a conference paper at ICLR 2020
A Notation
Throughout this appendix we will use the following notation from Maddison et al. (2014):
eφ(g) = exp(-g + φ)
Fφ(g) = exp(- exp(-g + φ))
fφ(g) = eφ(g)Fφ(g).
This means that Fφ(g) is the CDF and fφ(g) the PDF of the Gumbel(φ) distribution. Additionally
we will use the identities by Maddison et al. (2014):
Fφ(g)Fγ (g) = Flog(exp(φ)+exp(γ)) (g)	(24)
「 eγ(g)Fφ(g)∂g =(Fφ(b)- Fφ(a))exp(Y).	(25)
g=a	exp(φ)
Also, we will use the following notation, definitions and identities (see Kool et al. (2019c)):
φi = log p(i)	(26)
φS = log p(i) = log	exp φi	(27)
Φd∖s = log X p(i) = log ( 1 - X p(i)∖ = log(1 - exp(φs))	(28)
i∈D∖S	∖ i∈S )
Gφi 〜GUmbel (φi)	(29)
Gφs = max Gφi 〜GUmbel(φs)	(30)
For a proof of eqUation 30, see Maddison et al. (2014).
B COMPUTATION OF p(Sk), pD\C (S \ C) AND R(Sk, s)
We can sample the set Sk from the Plackett-LUce distribUtion Using the GUmbel-Top-k trick by
drawing Gumbel variables Gφi 〜Gumbel (φi) for each element and returning the indices of the k
largest GUmbels. If we ignore the ordering, this means we will obtain the set Sk if mini∈Sk Gφi >
maXi∈D∖sk Gφi. Omitting the superscript k for clarity, We can use the Gumbel-Max trick, i.e. that
G$d\s = maxi∈s Gφi 〜GUmbel(Φd∖s) (equation 30) and marginalize over G@d、s :
p(S)=P(mi∈iSnGφi >GφD∖S)
=P(Gφi>GφD∖S,i∈S)
∞
gφD∖S =-∞
∞
gφD∖S =-∞
fφD∖S(gφD\S)P(Gφi >gφD∖S,i∈S)∂gφ
D∖S
f φD∖S (gφD∖S ) J J (1 — Fφi (gφD∖S )) dgφD∖S
i∈S
-Fφi Fφ-D1∖S(u)∂u
(31)
(32)
Here we have used a change of variables u = FφD∖S (gφD∖S ). This expression can be efficiently
numerically integrated (although another change of variables may be required for numerical stability
depending on the values of φ).
Exact computation in O(2k). The integral in equation 31 can be computed exactly using the
identity
Y(ai-bi)=X(-1)|C|Ybi Y ai
i∈S	C⊆S	i∈C i∈S∖C
14
Published as a conference paper at ICLR 2020
which gives
∞
p(S) =
gφD∖S =-∞
fφD∖S (gφD∖S ) J J (1 - FφilgφD∖S )) dgφD∖S
i∈S
∞
X(-1)|C|
C⊆S	gφD∖S =-∞
fφD∖S(gφD∖S)	Fφi (gφD∖S )	1∂ gφD∖S
i∈C
i∈S∖C
∞
(-1)	eφD∖S (gφD∖S )FφD∖S (gφD∖S )FφC (gφD∖S )∂gφD∖S
∞
X(-1)|C|
C⊆S	gφD∖S
X(-1)|C|(1-0)
C⊆S
eφD∖S (gφ
D∖S )Fφ(D∖S)∪C (gφD∖S )∂gφD∖S
=-∞
exp(φD∖s)
eχp(φ(D∖s)∪c )
C⊆S
1 - Ei∈s PW
1 - Pi∈s∖c P(i)
(33)
Computation of pD∖C (S \ C). When using the Gumbel-Top-k trick over the restricted domain
D \ C, we do not need to renormalize the log-probabilities φs , s ∈ D \ C since the Gumbel-Top-k
trick applies to unnormalized log-probabilities. Also, assuming C ⊆ Sk, it holds that (D \ C) \ (S \
C) = D \ S. This means that we can compute pD∖C (S \ C) similar to equation 31:
PD∖C(S \ C) = P(.mn Gφi > Gφ(D∖s∖(s∖cJ
i∈S ∖C
=P(i∈mSi∖nCGφi >GφD∖S)
∞
gφD∖S =-∞
fφD∖S (gφD∖S )	] ]	(1 - FφilgφD∖s )) dgφD∖S .
i∈S∖C
(34)
Computation of R(Sk, s). Note that, using equation 10, it holds that
X PPA∖{(S(^ J)P(S) = X P(bι = s1Sk) = 1
s∈Sk	s∈Sk
from which it follows that
P(Sk)=	PP∖∖s}(Sk \ {s})P(s)
s∈Sk
such that
R(Sk s) = PD∖∖s}(Sk∖{s}) =	pD∖∖s}(Sk∖{s})
,	P(Sk)	Ps0∈sk pD∖∖s0}(Sk \ {s0})p(s0).
(35)
This means that, to compute the leave-one-out ratio for all s ∈ Sk, we only need to compute
PP∖∖s}(Sk \ {s}) for s ∈ Sk. When using the numerical integration or summation in O(2k), we can
reuse computation, whereas using the naive method, the cost is O(k ∙ (k - 1)!) = O(k!), making the
total computational cost comparable to computing just P(Sk), and the same holds when computing
the ‘second-order’ leave one out ratios for the built-in baseline (equation 17).
15
Published as a conference paper at ICLR 2020
Details of numerical integration. For computation of the leave-one-out ratio (equation 35) for
large k we can use the numerical integration, where we need to compute equation 34 with C = {s}.
For this purpose, we rewrite the integral as
Z∞
=JφD∖s(gφD∖S ) Y (1-
Fφi (gφD∖S )) dgΦD∖S
Z∖ Y (1- Fφi (F-1∖s(u)))du
u=0 i∈S∖C
/1	Y(I-UexP@7d\s9 ∂u
exp(b) ∙ Z VexP⑹T Y(I - vexp(φi-φD∖S+b)) ∂v
v=0	i∈S∖C
exp(a + φD∖S) ∙ /1 vexp(a+φD∖s)-1
Y 1 - vexp(φi+a) ∂v.
i∈S∖C
Here we have used change of variables v = uexp(-b) and a = b - φD∖S . This form allows to
compute the integrands efficiently, as
π
i∈S∖C
1 - vexP(φi+a)
Qi∈s (1-vexp(φi+a))
Qi∈c (1 -vexp(φi + a))
where the numerator only needs to computed once, and, since C = {s} when computing equa-
tion 35, the denominator only consists of a single term.
The choice of a may depend on the setting, but we found that a = 5 is a good default option
which leads to an integral that is generally smooth and can be accurately approximated using the
trapezoid rule. We compute the integrands in logarithmic space and sum the terms using the stable
logsumexp trick. In our code we provide an implementation which also computes all second-order
leave-one-out ratios efficiently.
C	The sum-and-sample estimator
C.1 Unbiasedness of the sum-and-sample estimator
We show that the sum-and-sample estimator is unbiased for any set C ⊂ D (see also Liang et al.
(2018); Liu et al. (2019)):
Ex〜pD∖C(x)	Ep(C)f(c) +	1 - Ep(C)	f(X)
c∈C	x∈C
二 X P(C)f (C) + (1 - X P(C)) Ex 〜pD\C(x)[f(x)]
c∈C	c∈C
二 XP(C)f (C)+(1 - X P(C))	X 1 - P(X)加C)f (X)
c∈C	c∈C	x∈D∖C 1 - c∈C p(C)
X P(C)f (C) + X P(X)f (X)
c∈C	x∈D∖C
P(X)f (X)
x∈D
二 Ex〜p(x) [f (x)]
16
Published as a conference paper at ICLR 2020
C.2 Rao-Blackwellization of the stochastic sum-and-sample estimator
In this section we give the proof that Rao-Blackwellizing the stochastic sum-and-sample estimator
results in the unordered set estimator.
Theorem 4.	Rao-Blackwellizing the stochastic sum-and-sample estimator results in the unordered
set estimator, i.e.
k-1	k-1
EBk〜P(Bk∣sk) Xp(bj)f(bj) + I 1 - Xp(bj) I f(bk) = X P(S)R(Sk,s)f(s).	(36)
j=1	j=1	s∈Sk
Proof. To give the proof, we first prove three Lemmas.
Lemma 1.
P(bk = S|Sk)
P(Sk \ {s})_______P(s)_______
P(Sk)	1 - Ps0∈sk∖{s} P(SO)
(37)
Proof. Similar to the derivation of P(b1 = S|Sk) (equation 10 in the main paper), we can write:
P(bk = S|S k ) = P(Sk ∩VS)
P(S k )
P(Sk \ {s})pD∖(sk∖{s})(s)
=	P(S k)
=P(Sk \ {s})_________p(s)________
P(Sk)	1 - Ps0∈Sk∖{s}P(SO)
The step from the first to the second row comes from analyzing the event Sk∩bk = S using sequential
sampling: to sample Sk (including S) with S being the k-th element means that we should first sample
Sk \ {s} (in any order), and then sample S from the distribution restricted to D \ (Sk \ {s}).	□
Lemma 2.
P(S) + P(S \{s})] 1 -Pzs0∈SP(SO) 0、=PDvM(S ∖{S})
1 - 2^s0∈S∖{s} P(S )
(38)
Dividing equation 33 by 1 -	s0∈SP(S0) on both sides, we obtain
17
Published as a conference paper at ICLR 2020
Proof.
P(S)
1 - Ps,∈sp(s0)
CCS
1
1 - Ps∈s∖c P(s0)
CX SICIE⅛ + (-「
1 - Eg∖(c∪{s}) P(s0)
X (-1)i citɪpj~π5+ X (-1)|CU{s}I
CCS∖{s}	Es0∈s∖c P(S )	c⊆S∖{s}
1 - Σs0∈S∖(CU{s}) P(SO)
X (-1)I cI—,、L1-----------「
C⅛fs}	1 - P(S)- Ps0∈(S∖{s})∖C P(SO)
(-1) C
CCS∖{s}
1
1 - Ps0∈(S∖{s})∖C P(SO)
1	X (-1) ∣C ∣____________1__________________P(S \ {s})
1-	P(S) C⅛fs}^	1 - ∑so∈(S∖{s})∖C I⅛⅛ - 1- Ps0∈S∖{s} P(SO)
1	PD∖{s}(S ∖{s})	p(s ∖{s})
-
1 - P(S)I- Ps,∈S∖{s} !⅛⅛	1 - Ps,∈S∖{s} P(SO)
PD∖{s}(S∖{s})	p(S ∖{s})
-----:~:--------------:   - ---------------:  
1 - P(S) - Es0∈S∖{s} P(S)	1 - Es0∈S∖{s} P(S)
PD∖{s} (S ∖{s})	p(S ∖{s})
---- -------1—~ -----------------:—~.
1 - Ps0∈SP(SO)	1 - Ps0∈S∖{s} P(SO)
Multiplying by 1 - Es∈s p(so) and rearranging terms proves Lemma 2.	□
Lemma 3.
p(s) + |1 - X P(SO)) P(bk = s|Sk) = P(S)R(Sk, S)	(39)
∖	s0∈Sk	/
Proof. First using Lemma 1 and then Lemma 2 We find
p(s)+ |1 - E p(so) ) P(bk = s|Sk)
∖	s0∈Sk	/
=P(S) +
1 -	P(SO)
s0∈Sk
P(Sk \ {s})_______p(s)________
P(Sk)	1 - Σs∕∈Sk∖{s}P(SO)
忌 W )+1--(P(SO) P(Sk \{s})
=P(Sk) PDvM(S k \{s})
=P(S)R(Sk, s).
—
1
1
□
18
Published as a conference paper at ICLR 2020
Now we can complete the proof of Theorem 4 by adding p(bk)f (bk) - p(bk)f(bk) = 0 to the
estimator, moving the terms independent of Bk outside the expectation and using Lemma 3:
^k-1	( k-1	∖ 一
EBk〜P(Bk ∣Sk) X p(bj )f (bj ) +11 - X p(bj )1 f (bk )
j=1	j=1
-k	( k ∖
=EBk 〜P(Bk ∣sk) X p(bj )f (bj ) + 1 - X p(bj ) f (bk)
j=1	j=1
=Xp(s)f (s) + EBk 〜P(Bk ∣Sk) 1(1 - X p(s0)1 f(bk)1
s∈Sk	s0 ∈Sk
=X p(s)f(s) + X(I- X p(s0)j P(bk = s∣Sk)f(s)
s∈Sk	s∈Sk	s0∈Sk
=X (P(S)+ (1- X p(s0)) P(bk = s|Sk)) f(s)
s∈Sk	s0∈Sk
= X p(S)R(Sk, S)f(S).
s∈Sk
□
C.3 The stochastic sum-and-sample estimator with multiple samples
As was discussed in Liu et al. (2019), one can trade off the number of summed terms and number of
sampled terms to maximize the achieved variance reduction. As a generalization of Theorem 4 (the
stochastic sum-and-sample estimator with k - 1 summed terms), we introduce here the stochastic
sum-and-sample estimator that sums k - m terms and samples m > 1 terms without replacement.
To estimate the sampled term, we use the unordered set estimator on the m samples without replace-
ment, on the domain restricted to D \ Bk-m. In general, we denote the unordered set estimator
restricted to the domain D \ C by
eUS,D\C(Sk) =	p(S)RD\C(Sk, S)f(S)	(40)
s∈Sk \C
where RD\C (Sk, S) is the leave-one-out ratio restricted to the domain D \ C, similar to the second
order leave-one-out ratio in equation 18:
RD\C(Sk, S)
pθD∖C)VM((Sk' c)∖{s})
PDCC(Sk \ C)
(41)
While we can also constrain Sk ⊆ (D \ C), this definition is consistent with equation 18 and allows
simplified notation.
Theorem 5.	Rao-Blackwellizing the stochastic sum-and-sample estimator with m > 1 samples
results in the unordered set estimator, i.e.
k-m	k-m
EBk-p(Bk∣Sk) XP(bj)f(bj)+ (1- XP(bj)) eUS,D∖Bk-m(Sk) = X P(S)R(Sk, S)f(S).
j=1	j=1	s∈Sk
(42)
Proof. Recall that for the unordered set estimator, it holds that
eUS(Sk) = Ebi〜p(bι∣sk) [f(bι)] = Ex〜P(X) [f(x)∣x ∈ Sk]	(43)
□
19
Published as a conference paper at ICLR 2020
which for the restricted equivalent (with restricted distribution pD\C) translates into
eus,D∖C (Sk)= Ex 〜pD\c(x)[f(χ)∣χ ∈ Sk ] = Ex 〜p(x)ff (x)∣x ∈ Sk ,x∈ C ] .	(44)
Now we consider the distribution bk-m+1 |Sk, Bk-m: the distribution of the first element sampled
(without replacement) after sampling Bk-m, given (conditionally on the event) that the set of k
samples is Sk, so we have bk-m+1 ∈ Sk and bk-m+1 6∈ Bk-m. This means that its conditional
expectation of f(bk-m+1) is the restricted unordered set estimator for C = Bk-m since
eUS，D\Bk-m (s k )= Ex 〜p(x) ff(χ)∣χ ∈ Sk ,χ∈ Bk-m]
=Ebk-m+1 〜p(bk-m+ι∣Sk,Bk-m) [f (bk-m+1)] .	(45)
Observing that the definition (equation 42) of the stochastic sum-and-sample estimator does not
depend on the actual order of the m samples, and using equation 45, we can reduce the multi-
sample estimator to the stochastic sum-and-sample estimator with k0 = k - m + 1, such that the
result follows from equation 36.
k-m	k-m
EBk 〜P(Bk | Sk) X p(bj)f(bj) + 1 - X p(bj)	eUS,D\Bk-m (Sk)
j=1	j=1
=EBk — m-p( Bk-m∣ sk)
=EBk — m-p( Bk-m∣ sk)
k-m	k-m
Xp(bj)f(bj)+	1-Xp(bj) eUS,D\Bk-m(Sk)
j=1	j=1
k-m	k-m
E p(bj )f (bj ) + I 1 - ΣS p(bj ) I Ebk-m+1 〜p(bk-m+ι∣Sk,Bk-m) [f(bk-m+1)]
=1	j=1
k-m	k-m
=EBk-m+1 〜p( Bk-m+11 sk)
p(bj)f(bj)+ 1-	p(bj) f(bk-m+1)
j=1	j=1
^=ESk— m + 1 | Sk Ebk — m+1 ^p(Bk-m+1∣Sk-m + 1)
k-m	k-m
X p(bj )f(bj	) + 1 - X p(bj ) f(bk-m+1)
=1	j =1
=ESk— m + 1 |Sk E P(S)R(S k , S)f (S)
s∈Sk
= Xp(S)R(Sk,S)f(S).
s∈Sk
(46)
D The importance-weighted estimator
D. 1 Rao-B lackwellization of the importance-weighted estimator
In this section we give the proof that Rao-Blackwellizing the importance-weighted estimator results
in the unordered set estimator.
Theorem 6.	Rao-Blackwellizing the importance-weighted estimator results in the unordered set
estimator, i.e.:
EK 〜p(κ | Sk) X1
T (Q f(s)= Xp(S)R(Sk,S)f(S).
s∈Sk	φs κ	s∈Sk
(47)
Here we have slightly rewritten the definition of the importance-weighted estimator, using that
q(S, a) = P (gφs > a) = 1 - Fφs (a), where Fφs is the CDF of the Gumbel distribution (see
Appendix A).
Proof. We first prove the following Lemma:
20
Published as a conference paper at ICLR 2020
Lemma 4.
EK〜p(κ∣sk)],、= R(Sk,s)	(48)
1 - Fφs (κ)
Proof. Conditioning on Sk , we know that the elements in Sk have the k largest perturbed log-
probabilities, so κ, the (k + 1)-th largest perturbed log-probability is the largest perturbed log-
probability in D \ Sk, and satisfies K = maXs∈D∖sk gφs = gφcksk 〜GUmbel(φ0∖sk). Computing
p(κ∣Sk) using Bayes' Theorem, We have
p(κ∣Sk)
p(Sk∣κ)p(κ)
P(Sk)
Πs∈Sk (1 - Fφs (KXfΦD∖sk (K)
P(Sk)
(49)
which allows US to compute (using equation 34 with C = {s} and gφð∖s = κ)
EK 〜p(κ∣Sk)
-	1	-
一1 - Fφs (K) 一
∞1
∕=-∞p(KISk )T-Fφ^ dK
∞	∏s∈sk (1 - Fφs (K))fφD∖sk (K)	1 d
=-∞	Pm	1- Fφs (K) K
1 pD∖{s}
p(S k )P
(1
s∈Sk∖{s}
-F©s (Ky) fφD∖Sk(K)dK
(S \ {s})
=R(Sk, s).
□
Using Lemma 4 we find
~P(K|Sk) Xk I-PF)(K) f (S)
Ep(S)Ef(KiSk)	1- FX(K) f (s)
s∈Sk	- φs (K)
P(S)R(Sk, S)f(S).
s∈Sk
□
D.2 The importance-weighted policy gradient estimator with built-in baseline
For self-containment we include this section, which is adapted from our unpublished workshop
paper (Kool et al., 2019b). The importance-weighted policy gradient estimator combines REIN-
FORCE (Williams, 1992) with the importance-weighted estimator (Duffield et al., 2007; Vieira,
2017) in equation 15 which results in an unbiased estimator of the policy gradient VθEp@(方)[fθ(x)]:
eIWPG(Sk,k) = X 弋Vθ logpθ(s)f(s) = X Vp^f (s)	(50)
s∈Sk qθ,K(S)	s∈Sk qθ,K(S)
Recall that K is the (k + 1)-th largest perturbed log-probability (see Section 3.2). We compute a
lower variance but biased variant by normalizing the importance weights using the normalization
W(Sk) = Pg qPθ⅛.
21
Published as a conference paper at ICLR 2020
As We show in Kool et al. (2019b), We can include a 'baseline' B(Sk) = Ps∈sk qpθ(Ss) f(s) and
correct for the bias (since it depends on the complete sample Sk) by weighting individual terms of
the estimator by 1 - pθ (s) + pθ(SL:
qθ,κ (s)
eIWPGBL(Sk ,κ)= X 4 f(s)(1- pθ (s) + 鼻)-B(Sk))	(51)
s∈Sk qθ,κ(s)	qθ,κ(s)
For the normalized version, we use the normalization W(Sk) = Ps∈sk pθ(Ss) for the baseline, and
qθ,κ s
Wi(Sk) = W (Sk) - pθ (Ss) + pθ (S) to normalize the individual terms:
qθ,κ s
vθEy~pθ⑺ [f (y)] ≈ X Wi(Sky ∙ ：；p；Ss) (f (S) - W(Ik))	(52)
s∈Sk	,κ
It seems odd to normalize the terms in the outer sum by 印.a)instead of W (Sk), but equation 52
can be rewritten into a form similar to equation 17, i.e. with a different baseline for each sample, but
this form is more convenient for implementation (Kool et al., 2019b).
E The unordered set policy gradient estimator
E.1 Proof of unbiasedness of the unordered set policy gradient estimator
WITH BASELINE
To prove the unbiasedness of result we need to prove that the control variate has expectation 0:
Lemma 5.
ESkRF) £Vepe(s)R(Sk,s) Epe(s0)RD∖{s}(Sk,s0)f(s0) =0.	(53)
s∈Sk	s0∈Sk
SP0ro6=ofS.
For S0
Similar to equation 10, we apply Bayes’ Theorem conditionally on b1 = S to derive for
P(b2 = s0∣Sk,bι = s) = P(Sk|b2 =%£ ?出=s0|b1 = s0)
P(Sk|b1 = S)
=pD\{s,s0}(Sk\{s,s0})pDvM(S0)
PD∖{s}(Sk ∖{s})
=pθ(SO)、RD∖{s}(Sk,s0).
1 - pθ(S)
S we have RD\{s} (Sk, S0) = 1 by definition, so using equation 54 we can show that
X Pθ(S0)RD∖{s}(Sk,S0)f(s0)
s0∈Sk
=Pθ (S)f(S)+	X Pθ (S0)RD∖{s} (Sk ,S0)f (s0)
s0∈Sk ∖{s}
=PΘ(S)f(S) + (1 -PΘ(s))	X	1⅛⅛RD∖{s}(Sk, S0)f(S0)
s0∈Sk∖{s}	Pθ S
= Pθ(S)f(S) + (1 - Pθ(S))	X	P(b2 = S0|Sk, b1 = S)f (S0)
s0 ∈Sk∖{s}
=PΘ(S)f (s) + (1-PΘ(S))Eb2〜Pθ(b2∖sk,bι=s) [f (b2)]
=Eb2〜「°但¥,bι=s) [Pθ(bι)f(bi) + (1 -Pθ(b1))f(b2)].
(54)
22
Published as a conference paper at ICLR 2020
Now we can show that the control variate is actually the result of Rao-Blackwellization:
Esk^Pθ(sk) X Vepe(S)R(Sk,s) X pθ(s0)RD∖{s}(Sk,s0)f(s0)
s∈Sk	s0∈Sk
=ESk〜「。⑻)X pe(S)R(Sk, s)Ve logpe(S) X pe(s0)RD∖{s}(Sk, s0)f (s0)
s∈Sk	s0 ∈Sk
=ESk〜p°(sk)	X P(bι = s|Sk)Ve logpe(S) X pe(s0)RD∖{s}(Sk,s0)f (s0) I
s∈Sk	s0∈Sk
=ESk〜p°(sk) Ebi〜Pθ(bι∣sk) Velogpe(bi) X pe(s0)RD∖{b1 }(Sk,s0)f (s0) I I
s0∈Sk
=ESk〜pθ(sk) [Ebi〜pθ(bi∣sk) [Velogpe(bi)Eb2〜pθ(b2∣sk,bi) [pe(bi)f(bi) + (I-pe(bi))f(b2)]]]
=ESk〜pθ(Sk) [EBk〜pθ(Bk∣Sk) [Velogpe(bi) (pe(bι)f (bi) + (I-pe(bι))f (b2))]]
=EBk〜pθ(Bk) [VelogPe(bi)(pe(bi)f(bi) + (1 -Pe(bi))f(b2))]
This expression depends only on bi and b2 and we recognize the stochastic sum-and-sample estima-
tor for k = 2 used as ‘baseline’. As a special case of equation 13 for C = {bi}, we have
Eb2~Pθ(b2∣bι)[(pe(bi)f(bi)+(1-pe(bi))f(b2))] =
Ei ~pθ (i) [f (i)].	(55)
Using this, and the fact that Ebi〜p®®) [Ve logPe(bi)] = VeEbi〜p®(bi) [1] = Ve 1 = 0 we find
ESk〜pe®) X VePe(S)R(Sk,s) X Pe(S)RD',"s(Sk,s0)f(s0)
s∈Sk	s0 ∈Sk
=EBk〜p°(Bk) [Ve logPe(bi)(pe(bi)f (bi) + (1 -Pe(bi))f (b2))]
=Ebi~Pθ (bi) [Ve logPe(bi)Eb2〜pe(b2∣bi) [(Pe(bi)f(bi) + (I-Pe(bi))f (b2))]]
=Ebi~pe (bi) [Ve logpe(bi)Eχ〜pe⑺[f (x)]]
=Ebi〜pe(bi) [Ve logpe(bi)] Ex〜p®⑺[f(x)]
=0 ∙ Ex〜pe(x) [f (X)]
=0
□
23
Published as a conference paper at ICLR 2020
F The RISK estimator
F.1 Proof of built-in baseline
We show that the RISK estimator, taking gradients through the normalization factor actually has a
built-in baseline. We first use the log-derivative trick to rewrite the gradient of the ratio as the ratio
times the logarithm of the gradient, and then swap the summation variables in the double sum that
arises:
eRISK(S)= J Ve (P⅛) "S)
=JI Ve log H) f(S)
Σ
s∈S
Σ
s∈S
Pe (S)
Ps0∈s Pe(SO)
Pe (S)
Vθ logPθ(s) - Vθ log E Pθ(s0) f(s)
s0∈Spe(s0)	pe(s)
s0∈S
Ve pe (s)	Pso∈s Ve pe (s0)
-------------------------
s0∈Spθ(s0)
f(s)
Σ
s∈S
VθPθ(s)f(s) _ Es,s,∈sPθ(s)VθPθ(s0)f(s)
s0∈S pθ (s0)
(Ps,∈s Pθ (s0))2
Σ
s∈S
Vepe(s)f(s) _ Es,s,∈sPθ(s0)VθPθ(s)f(s0)
Σ
s∈S
Ps0∈S pθ (SO)	(Ps0∈S Pe (SO)) 2
Vepe(S)	(f( J P∈sPe⑺f(s0)
Ps0∈sPe(s0) If(S)	Ps0∈sPe⑺
Xg ∑≡‰ f (SY p⅛) ff
G	Categorical Variational Auto-Encoder
G.1 Experimental details
We use the code6 by Yin et al. (2019) to reproduce their categorical VAE experiment, of which we
include details here for self-containment. The dataset is MNIST, statically binarized by thresholding
at 0.5 (although we include results using the standard binarized dataset by Salakhutdinov & Murray
(2008); Larochelle & Murray (2011) in Section G.2). The latent representation z is K = 20 dimen-
sional with C = 10 categories per dimension with a uniform prior P(zk = c) = 1/C, k = 1, ..., K.
The encoder is parameterized by φ as qφ(z|x) = Qk qφ(zk |x) and has two fully connected hidden
layers with 512 and 256 hidden nodes respectively, with LeakyReLU (α = 0.1) activations. The
decoder, parameterized by θ, is given by Pe(x|z) = QiPe(xi|z), where xi ∈ {0, 1} are the pixel
values, and has fully connected hidden layers with 256 and 512 nodes and LeakyReLU activation.
ELBO optimization. The evidence lower bound (ELBO) that we optimize is given by
L(Φ, θ) = Ez〜qφ(z∣x) [lnPe(x|z) +lnP(Z)- ln qφ(z∣x)]	(56)
=Ez〜qφ(z∣x) [lnPe(x|z)] — KL(qφ (z∣x)∣∣p(z)) .	(57)
For the decoder parameters θ, since qφ(z∣x) does not depend on θ, it follows that
VeL(φ, θ)= Ez〜qφ(z∣x) [Ve lnPe(x|z)] .	(58)
For the encoder parameters φ, we can write VφL(φ, θ) using equation 57 and equation 19 as
VφL(φ, θ) = Ez〜qφ(z∣χ) [Vφlnqφ(z∣x)lnPe(x|z)] — VφKL(qφ (z∣x)∣∣p(z)).	(59)
6https://github.com/ARM-gradient/ARSM
24
Published as a conference paper at ICLR 2020
This assumes we can compute the KL divergence analytically. Alternatively, we can use a sample
estimate for the KL divergence, and use equation 56 with equation 19 to obtain
VφL(φ, θ) = Ez 〜qφ(z∣χ) [Vφ ln qφ(z∣x)(ln pθ (x∣z)+ln p(z) - ln qφ(z∣x)) + Vφ ln qφ(z∣x)]
(60)
=Ez〜qφ(z∣x) [Vφlnqφ(z∣x)(lnp(x|z) — lnqψ(z∣x))].	(61)
Here we have left out the term Ez〜qφ(z∣χ) [Vφ ln qψ(z∖x)] = 0, similar to Roeder et al. (2017), and,
assuming a uniform (i.e. constant) prior lnp(z), the term Ez〜qφ(z∣χ) [Vφ ln qψ(z∖x) lnp(z)] = 0.
With a built-in baseline, this second term cancels out automatically, even if it is implemented. De-
spite the similarity of the equation 56 and equation 57, their gradient estimates (equation 60 and
equation 59) are structurally dissimilar and care should be taken to implement the REINFORCE
estimator (or related estimators such as ARSM and the unordered set estimator) correctly using au-
tomatic differentiation software. Using Gumbel-Softmax and RELAX, we take gradients ‘directly’
through the objective in equation 57.
We optimize the ELBO using the analytic KL for 1000 epochs using the Adam (Kingma & Ba, 2015)
optimizer. We use a learning rate of 10-3 for all estimators except Gumbel-Softmax and RELAX,
which use a learning rate of 10-4 as we found they diverged with a higher learning rate. For ARSM,
as an exception We use the sample KL, and a learning rate of 3 ∙ 10-4, as suggested by the authors.
All reported ELBO values are computed using the analytic KL. Our code is publicly available7 .
G.2 Additional results
Gradient variance during training. We also evaluate gradient variance of different estimators
during different stages of training. We measure the variance of different estimators with k = 4
samples during training with REINFORCE with replacement, such that all estimators are computed
for the same model parameters. The results during training, given in Figure 4, are similar to the
results for the trained model in Table 1, except for at the beginning of training, although the rankings
of different estimator are mostly the same.
Negative ELBO on validation set. Figure 5 shows the -ELBO evaluated during training on the
validation set. For the large latent space, we see validation error quickly increase (after reaching
a minimum) which is likely because of overfitting (due to improved optimization), a phenomenon
observed before (Tucker et al., 2017; Grathwohl et al., 2018). Note that before the overfitting starts,
both REINFORCE without replacement and the unordered set estimator achieve a validation error
similar to the other estimators, such that in a practical setting, one can use early stopping.
Results using standard binarized MNIST dataset. Instead of using the MNIST dataset binarized
by thresholding values at 0.5 (as in the code and paper by Yin et al. (2019)) we also experiment with
the standard (fixed) binarized dataset by Salakhutdinov & Murray (2008); Larochelle & Murray
(2011), for which we plot train and validation curves for two runs on the small and large domain
in Figure 6. This gives more realistic (higher) -ELBO scores, although we still observe the effect
of overfitting. As this is a bit more unstable setting, one of the runs using REINFORCE with
replacement diverged, but in general the relative performance of estimators is similar to using the
dataset with 0.5 threshold.
7https://github.com/wouterkool/estimating-gradients-without-replacement
25
Published as a conference paper at ICLR 2020
Training log variance (102 latent space), k=4 samples
∙,9ueμe> BO- 3u"-pe&
∙,9ueμe> 60-u"-pe&
Training log variance (102° latent space), k=4 samples
0	200	400	600	800	0	200	400	600	800
Epoch	Epoch
(a) Small domain (latent space size 102)	(b) Large domain (latent space size 1020)
Figure 4:	Gradient log variance of different unbiased estimators with k = 4 samples, estimated every
100 (out of 1000) epochs while training using REINFORCE with replacement. Each estimator is
computed 1000 times with different latent samples for a fixed minibatch (the first 100 records of
training data). We report (the logarithm of) the sum of the variances per parameter (trace of the
covariance matrix). Some lines coincide, so we sort the legend by the last measurement and report
its value.
Validation -ELBO (102 latent space)	Validation -ELBO (102° Iatentspace)
179.1 k=lST Gumbel-Softmax
149.9 k=IRELAX
—— 135.2 k=1 REINFORCE (sample bl)
----134.7 k=* AfiSM
----134.4 k=β Sum & sample (sample bl)
——134.2 k=4 Unordered (built-in bl)
134.2 k=4 REINF. w.r. (built-in bl)
—133.9 k=8 Unordered (built-in bl)
----133.9 k=4 Sum & sample (sample bl)
----133.8 k=8 REINF. w.r. (built-in bl)
200	400	600	800
Epoch
400	600	800
Epoch
(b) Large domain (latent space size 1020)
(a) Small domain (latent space size 102)
Figure 5:	Smoothed validation -ELBO curves during training of two independent runs when with
different estimators with k = 1, 4 or 8 (thicker lines) samples (ARSM has a variable number). Some
lines coincide, so we sort the legend by the lowest -ELBO achieved and report this value.
26
Published as a conference paper at ICLR 2020
1®
155
150
145
140
135
130
Training -ELBO (102 latent space)
200	400	600	800
Epoch
150-
140-
130-
120-
110-
100-
90
80
70-
60-
Tralnlng -ELBO (102° latent space)
200	400	600	800
Epoch
(a)	Training -ELBO, small domain (102)
(b)	Training -ELBO, large domain (1020)
1®
155
150
145
140
135
130
Validation -ELBO (102 latent space)
210.9 k≡=l ST Gumbel-Softmax
---176.3 k=8 REINF. w.r. (built-in bl)
——153.2 k=IRELAX
—— 142.5 k=l REINFORCE (sample bl)
---142.0 k=* ARSM
----141.7 k=4 REINF. w.r. (built-in bl)
---141.6 Ar=B Sum & sample (sample bl)
---141.5 k=S Unordered (built-in bl)
----141.4 k=4 Sum & sample (sample bl)
——Ul.l k=4 Unordered (built-in bl)
0	200	400	600	800
Epoch
150-
140-
130-
120-
110-
100-
90
80
70-
60-
Valldatlon -ELBO (102° Iatentspace)
—— 157.5 k= IRELAX
112.1 k= 1 ST Gunibel-Softniax
---107.8k=4Sum&sample (sample bɪ)
---107.6 k=8 Sum & sample (sample bl)
106.9 k=4 REINF. w.r. (bullt-ln bl)
——106.7 k=4 Unondered (bullt-ln bl)
—— 106.5 k= 1 REINFORCE (sample bl)
--- 106.4 k=8 Unordered (bullt-ln bl)
105.2 k=* ARSM
104.9 k=8 REINF. w.r. (built-in bl)
400	600	800
Epoch
(c)	Validation -ELBO, small domain (102)
(d)	Validation -ELBO, large domain (1020)
Figure 6:	Smoothed training and validation -ELBO curves during training on the standard binarized
MNIST dataset (Salakhutdinov & Murray, 2008; Larochelle & Murray, 2011) of two independent
runs when with different estimators with k = 1, 4 or 8 (thicker lines) samples (ARSM has a variable
number). Some lines coincide, so we sort the legend by the lowest -ELBO achieved and report this
value.
27
Published as a conference paper at ICLR 2020
H	Travelling Salesman Problem
The Travelling Salesman Problem (TSP) is a discrete optimization problem that consists of finding
the order in which to visit a set of locations, given as x, y coordinates, to minimize the total length
of the tour, starting and ending at the same location. As a tour can be considered a sequence of
locations, this problem can be set up as a sequence modelling problem, that can be either addressed
using supervised (Vinyals et al., 2015) or reinforcement learning (Bello et al., 2016; Kool et al.,
2019a).
Kool et al. (2019a) introduced the Attention Model, which is an encoder-decoder model which
considers a TSP instances as a fully connected graph. The encoder computes embeddings for all
nodes (locations) and the decoder produces a tour, which is sequence of nodes, selecting one note
at the time using an attention mechanism, and uses this autoregressively as input to select the next
node. In Kool et al. (2019a), this model is trained using REINFORCE, with a greedy rollout used as
baseline to reduce variance.
We use the code by Kool et al. (2019a) to train the exact same Attention Model (for details we refer
to Kool et al. (2019a)), and minimize the expected length of a tour predicted by the model, using
different gradient estimators. We did not do any hyperparameter optimization and used the exact
same training details, using the Adam optimizer (Kingma & Ba, 2015) with a learning rate of 10-4
(no decay) for 100 epochs for all estimators. For the baselines, we used the same batch size of 512,
but for estimators that use k = 4 samples, We used a batch size of 512 = 128 to compensate for the
additional samples (this makes multi-sample methods actually faster since the encoder still needs to
be evaluated only once).
28