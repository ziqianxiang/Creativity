Published as a conference paper at ICLR 2020
Learning to Balance:
Bayesian Meta-Learning for Imbalanced and
Out-of-distribution Tasks
Hae Beom Lee1*, Hayeon Lee1*, Donghyun Na2；
Saehoon Kim3, Minseop Park3, Eunho Yang1,3, Sung Ju Hwang1,3
KAIST1,TmaxData2, AITRICS3, South Korea
{haebeom.lee, hayeon926, eunhoy, sjhwang82}@kaist.ac.kr
donghyun_na@tmax.co.kr, {shkim, mike_seop}@aitrics.com
Ab stract
While tasks could come with varying the number of instances and classes in realistic
settings, the existing meta-learning approaches for few-shot classification assume
that the number of instances per task and class is fixed. Due to such restriction,
they learn to equally utilize the meta-knowledge across all the tasks, even when
the number of instances per task and class largely varies. Moreover, they do not
consider distributional difference in unseen tasks, on which the meta-knowledge
may have less usefulness depending on the task relatedness. To overcome these
limitations, we propose a novel meta-learning model that adaptively balances the
effect of the meta-learning and task-specific learning within each task. Through
the learning of the balancing variables, we can decide whether to obtain a solution
by relying on the meta-knowledge or task-specific learning. We formulate this
objective into a Bayesian inference framework and tackle it using variational
inference. We validate our Bayesian Task-Adaptive Meta-Learning (Bayesian
TAML) on multiple realistic task- and class-imbalanced datasets, on which it
significantly outperforms existing meta-learning approaches. Further ablation
study confirms the effectiveness of each balancing component and the Bayesian
learning framework.
1	Introduction
Despite the success of deep learning in many real-world tasks such as visual recognition and machine
translation, such good performances are achievable at the availability of large training data, and
many fail to generalize well in small data regimes. To overcome this limitation of conventional
deep learning, recently, researchers have explored meta-learning (Schmidhuber, 1987; Thrun & Pratt,
1998) approaches, whose goal is to learn a model that generalizes well over distribution of tasks,
rather than instances from a single task, in order to utilize the obtained meta-knowledge across tasks
to compensate for the lack of training data for each task.
However, so far, most existing meta-learning approaches (Santoro et al., 2016; Vinyals et al., 2016;
Snell et al., 2017; Ravi & Larochelle, 2017; Finn et al., 2017; Li et al., 2017) have only targeted
an artificial scenario where all tasks participating in the multi-class classification problem have
equal number of training instances per class. Yet, this is a highly restrictive setting, as in real-world
scenarios, tasks that arrive at the model may have different training instances (task imbalance), and
within each task, the number of training instances per class may largely vary (class imbalance).
Moreover, the new task may come from a distribution that is different from the task distribution the
model has been trained on (out-of-distribution task) (See (a) of Figure 1).
Under such a realistic setting, the meta-knowledge may have a varying degree of utility to each task.
Tasks with small number of training data, or close to the tasks trained in meta-training step may want
to rely mostly on meta-knowledge obtained over other tasks, whereas tasks that are out-of-distribution
or come with more number of training data may obtain better solutions when trained in a task-specific
* Equal contribution
1
Published as a conference paper at ICLR 2020
(⑶ RealiStic DataSetS ) Meta-Training
▲ ▲ I ★ ★
△ △ I ☆ ☆
Meta-Test
((b) Learning to Balance)
☆
OOD
∕∖
Λ Λ
Large task
θ * Z*
Ta T	.∙∙∙∙型∙∙a Tail class
H………
Small task Head class
Figure 1: Concept. (a) To handle task imbalance, class imbalance and out-of-distribution (OOD) tasks, we
introduce task-specific balancing variables γτ, ωτ, and zτ. (b) With those variables, we learn to balance between
the meta-knowledge θ and task-specific update to handle imbalances and distributional shift.
manner. Furthermore, for multi-class classification, we may want to treat the learning for each
class differently to handle class imbalance. Thus, to optimally leverage meta-learning under various
imbalances, it would be beneficial for the model to task- and class-adaptively decide how much to
use from the meta-learner, and how much to learn specifically for each task and class.
To this end, we propose a novel Bayesian meta-learning framework, which we refer to as Bayesian
Task-Adaptive Meta-Learning (Bayesian TAML), that learns variables to adaptively balance the
effect of meta- and task-specific learning. Specifically, we first obtain set-representations for each
task, which are learned to convey useful statistics about the task or class distribution, such as mean,
variance, and cardinality (the number of elements in the set), and then learn the distribution of three
balancing variables a function of the set: 1) task-dependent learning rate multiplier, which decides
how far away to deviate from the meta-knowledge, when performing task-specific learning. Tasks
with higher shots could benefit from taking gradient steps afar, while tasks with few shots may need
to stay close to the initial parameter. 2) class-dependent learning rate, which decides how much
information to use from each class, to automatically handle class imbalance where the number of
instances per class can largely vary. 3) task-dependent modulator for initial model parameter, which
modifies the shared initialization for each task, such that each task can decide how much and what to
use from the shared initial model parameter and what to ignore based on its set representation. This
is especially useful when handling out-of-distribution task, which may need to ignore some of the
meta-knowledge.
We validate our model on CIFAR-FS and miniImageNet dataset, as well as a new dataset that consists
of heterogeneous datasets, under a scenario where every class in each episode can have any number
of shots, that leads to task and class imbalance, and where the dataset at meta-test time is different
from that of meta-training time. The experimental results show that our Bayesian TAML significantly
improves the performance over the existing approaches under these realistic scenarios. Further
analysis of each component reveals that the improvement is due to the effectiveness of the balancing
terms for handling task and class imbalance, and out-of-distribution tasks.
To summarize, our contribution in this work is threefold:
•	We consider a novel problem of meta-learning under a realistic task distribution, where the
number of instances across classes and tasks could largely vary, or the unseen task at the
meta-test time is largely different from the seen tasks.
•	For effective meta-learning with such imbalances, we propose a Bayesian task-adaptive
meta-learning (Bayesian TAML) framework that can adaptively adjust the effect of the
meta-learner and the task-specific learner, differently for each task and class.
•	We validate our model on realistic imbalanced few-shot classification tasks with a varying
number of shots per task and class and show that it significantly outperforms existing
meta-learning models.
2	Related Work
Meta-learning Meta-learning (Schmidhuber, 1987; Thrun & Pratt, 1998) is an approach to learn
a model to generalize over a distribution of task. The approaches in general can be categorized
into either memory-based, metric-based, and optimization-based methods. A memory-based ap-
proach (Santoro et al., 2016) learns to store correct instance and label into the same memory slot
and retrieve it later, in a task-generic manner. Metric-based approaches learn a shared metric
2
Published as a conference paper at ICLR 2020
space (Vinyals et al., 2016; Snell et al., 2017). Snell et al. (2017) defines the distance between the
instance and the class prototype, such that the instances are closer to their correct prototypes than to
others. As for optimization-based meta-learning, MAML (Finn et al., 2017) learns a shared initial-
ization parameter that is optimal for any tasks within few gradient steps from the initial parameter.
Meta-SGD (Li et al., 2017) improves upon MAML by learning the learning rate differently for each
parameter. For effective learning of a meta-learner, meta-learning approaches adopt the episodic
training strategy (Vinyals et al., 2016) which trains and evaluates a model over a large number of
tasks, which are called meta-training and meta-test phase, respectively. However, existing approaches
only consider an artificial scenario which samples the classification of classes with exactly the same
number of training instances, both within each episode and across episodes. On the other hand, we
consider a more challenging scenario where the number of shots per class and task could vary at each
episode, and that the task given at meta-test time could be an out-of-distribution task.
Task-adaptive meta-learning The goal of learning a single meta-learner that works well for all
tasks may be overly ambitious and leads to suboptimal performances for each task. Thus recent
approaches adopt task-adaptively modified meta-learning models. Oreshkin et al. (2018) proposed to
learn the temperature scaling parameter to work with the optimal similarity metric. Qiao et al. (2018)
also suggested a model that generates task-specific parameters for the network layers, but it only
trains with many-shot classes, and implicitly expects generalization to few-shot cases. Rusu et al.
(2019) proposed a network type task-specific parameter producer, and Lee & Choi (2018) proposed to
differentiate the network weights into task-shared and task-specific weights. Our model also aims to
obtain task-specific parameter for each task, but is rather focused on learning how to balance between
the meta-learning and task-/class-specific learning.
Probabilistic meta-learning Recently, a probabilistic version of MAML has been proposed (Finn
et al., 2018), where they interpret a task-specific gradient update as a posterior inference process
under variational inference framework. Kim et al. (2018) proposed Bayesian MAML with a similar
motivation but with a stein variational inference framework and chaser loss. Gordon et al. (2019)
proposed a probabilistic meta-learning framework where the parameter for a novel task is rapidly
estimated under decision theoretic framework, given a set representation of a task. The motivation
behind these works is to represent the inherent uncertainty in few-shot classification tasks. Our model
also uses Bayesian modeling, but it focuses on leveraging the uncertainties of the meta-learner and
the gradient-direction in order to balance between meta- and task- or class-specific learning.
3	Learning to Balance
We first introduce notations and briefly recap the model-agnostic meta-learning (MAML) by Finn
et al. (2017). Suppose a task distribution p(τ) that randomly generates task τ consisting of a training
______ °___________ - ~ _ . ~ _ =________________ - . .
set DT = {Xτ, Yτ} and a test set DT = {XT, Yτ}. Then, the goal of MAML is to meta-learn the
initial model parameter θ as a meta-knowledge to generalize over the task distribution p(τ), such that
we can easily obtain the task-specific predictor θT in a single (or a few) gradient step from the initial
θ. Toward this goal, MAML optimizes the following gradient-based meta-learning objective:
min X L(θ - αVeL(θ; DT); DT)	(1)
T 〜P(T )
where α denotes stepsize and L denotes empirical loss such as negative log-likelihood of observations.
Note that by meta-learning the initial point θ, the task-specific predictor θT = θ - αVθL(θ; DT)
can minimize the test loss L(∙; DT) even With DT consisting of only a few samples. We can easily
extend the Eq. (1), such that we obtain θT with more than one inner-gradient steps from the initial θ.
However, the existing MAML framework has the following limitations that prevent the model from
efficiently solving real-world problems involving class/task imbalance and out-of-distribution tasks.
1.	Class imbalance. MAML does not provide any framework to handle class imbalance within
each task. Therefore, classes with large number of training instances (head classes) may
dominate the task-specific learning during the inner-gradient steps, yielding low performance
on classes with fewer shots (tail classes).
2.	Task imbalance. The model has a fixed number of inner-gradient steps and stepsize α
across all tasks, which prevents the model from adaptively deciding how much to resort to
3
Published as a conference paper at ICLR 2020
the meta-knowledge or how much to learn from the given dataset, depending on the number
of the training examples per task.
3.	Out-of-distribution tasks. The model assumes that the initial model parameter θ will be
equally useful for the unseen tasks, but for unseen tasks that are significantly different from
the previously seen tasks, the initial parameter may be less useful.
3.1	Task-Adaptive Meta-Learning (TAML)
As shown in Figure 1 for the concepts, we introduce three balancing variables ωτ , γτ , zτ to tackle
each problem mentioned above. How to generate these variables will be described in Section 4. Also,
see the experimental section for how to generate the realistic tasks with class and task imbalance.
Tackling class imbalance. To handle class imbalance, we vary the learning rate of class-specific
gradient for each inner-optimization step. Specifically, for class c = 1, . . . , C, we introduce a set of
class-specific scalars ωτ = (ω1τ, . . . , ωCτ ) ∈ [0, 1]C, which are multiplied to each of the class-specific
gradients VθL(θ; Dj),..∙, VθL(θ; DC), where DT is the set of instances and labels for class c. We
expect ωcτ to be large for tail-classes with small number of training instances, such that they could be
considered more in the inner-optimization steps. We generate ωτ with Softmax function, and denote
the input to the function as ωτ.
Tackling task imbalance. To control whether the model parameter for the current task stays close
to the initial parameter or deviate far from it, we introduce task-dependent learning-rate multipliers
γτ = (γ1τ, . . . , γLτ) ∈ [0, ∞)L, such that for each layer l = 1, . . . , L, the learning rate becomes
γ1τ α, γ2τ α, . . . , γLτα1. We expect γτ to be large for large tasks, such that they rely more on task-
specific updates, while small tasks use small γτ to benefit more from the meta-knowledge. To amplify
the step-size difference between large and small tasks, we generate γτ with an exponential function,
and denote the input to the function as Yτ.
Tackling out-of-distribution tasks. Finally, we introduce zτ which modulates the initial parameter
θ for each task. We expect zτ to learn to relocate the initial θ to a new starting point, such that
out-of-distribution (OOD) tasks can deviate much from the shared initialization θ if the current
initialization is suboptimal for the given task. Specifically, We use zτ = 1 + zτ for the channel of
the convolutional network weights and zτ = zτ for the biases, which modify the initial parameter as
follows: θo J θ ◦ zτ for the weights and θo J θ + zτ for the biases, where θo denotes the new
initialization modulated by zτ. We denote this operation as θ * zτ, which is similar to task-dependent
modulation of batch normalization parameters (Oreshkin et al., 2018; Requeima et al., 2019).
A unified framework. Finally, we assemble all these components together into a single unified
framework. With a slight abuse of notations, the update rule can be written as follows:
θ0 = θ * zτ,	(2)
C
θk = θk-1 - γτ ◦ α ◦ X ωcτ Vθk-1 L(θk-1; Dcτ) for k = 1, . . . , K	(3)
c=1
where α is a multi-dimensional global learning rate vector that is learned (Li et al., 2017), and the
multiplication operator ◦ is appropriately defined. The last step θK corresponds to the task-specific
predictor θτ .
3.2	Bayesian Task-Adaptive Meta-Learning
We now introduce the variational inference framework for the input of the three balancing variables,
that we previously denote as ωτ, Yτ, zτ. Bayesian modeling allows to incorporate randomness in
the posterior of those variables. In MAML framework, such randomness generates the ensemble
of diverse task-specific predictors, which allows to effectively exploit the information in the given
dataset Dτ . Bayesian modeling also allows to find more robust latent structures of those balancing
variables (See Figure 7).
1We initially exponentially decayed the learning rate γ ∈ [0, 1], but found it suboptimal as it prevents the
learning rate from growing for many-shot tasks.
4
Published as a conference paper at ICLR 2020
Firstly, define Xτ = {xn}N= 1 and YT = {yn}N= 1 for training, and XT = {Xm}M=ι and YT =
{ym}M= ι for test. Let φτ denote the collection of ωτ, YT and zτ for uncluttered notation. Then,
inspired by Gordon et al. (2019) and Finn et al. (2018), we define the generative process for meta-
learning framework as follows for each task τ (See Figure 2):
Nτ	Mτ
p(γτ, YT, Φτ∣χτ, XT ； θ)=p(φτ ) Y p(yn∣χn, φτ ； θ) Y p(ym∣χm, φτ ； θ)	⑷
n=1	m=1
for the complete data likelihood. Note that the deterministic θ is shared across all the tasks.
4 Variational Inference
The goal of learning for each task τ is to maximize the conditional log-
.. .. . . ~ . _ , ____________________________________ ______
likelihood of the joint dataset DT and DT: log P(YT, YTIXT, Xτ; θ).
However, solving it involves the true posterior p(φτ[Dτ, Dτ), which
is intractable. Thus, we resort to amortized variational inference with
a tractable form of approximate posterior q(φτ ∣Dτ, DT; ψ) parameter-
ized by ψ. We let the three variables share the same inference network
pipeline to minimize the computational cost. Further, similarly to
Ravi & Beatson (2019), we drop the dependency on the test dataset
Dτ for the approximate posterior, in order to make the two different
pipelines consistent; one for meta-training where we observe the whole
test dataset, and the other for meta-testing where the test labels are
unknown. The form of our approximate posterior is now q(φτ ∖Dτ; ψ).
It greatly simplifies the inference framework, while ensuring to have a
Figure 2: Graphical model.
(a) Generative process. (b) In-
ference.
valid lower bound of the log evidence. Also, considering that performing the inner-gradient steps with
the training dataset Dτ automatically maximizes the training log-likelihood in MAML framework, we
slightly modify the objective so that the expected log-likelihood term only involves the test examples
with the appropriate scaling factor. The resultant form of the approximated lower bound that suits for
our meta-learning purpose is as follows:
N + M Mτ
lθ,ψ = τM+τ τ X Eq。*，M[logp(ym∣χm,φt；θ)] -kleφTIDT；ψ)kp(φτ)].⑸
τ	m=1
We assume q(φτ |DT; ψ) fully factorizes for each variable and also for each dimension as well:
q(φτ∣Dτ； ψ) = Y q(ωτ∣Dτ； ψ) Y q(YT∣Dτ； ψ) Y q(zτ∣Dτ； ψ)
(6)
l
i
c
where we assume that each single dimension of q(φτ IDτ; ψ) follows univariate Gaussian having
trainable mean and variance. We also let each dimension ofpriorp(φτ) factorize into N(0, 1), such
that the KL-divergence can have the especially simple closed form (Kingma & Welling, 2014).
The final form of the meta-training minimization objective with Monte-Carlo (MC) approximation
for the expectation in Eq. (5) is as follows:
1 Mτ 1 S	1
minIT X ςX Tog P(ym lxm, φs ； θ) 十 丁 ∣ JU KLEφ ID ； ψ)kP(φ )]∙	⑺
θ,ψ Mτ m=1 S s=1	Nτ +Mτ
where φT 〜q(φτ∣Dτ; ψ). We implicitly assume the reparameterization trick for φτ to obtain
stable and unbiased gradient estimate w.r.t. ψ (Kingma & Welling, 2014). We set the MC sample
size to S = 1 for meta-training for computational efficiency. When meta-testing, we perform MC
approximation with sufficiently large sample size (e.g. S = 10):
1S
p(yτ∣xτ;θ) = Eq[p(yT∣xτ,φτ;θ)] ≈ S Ep(yτ∣xτ,ΦT; θ),	ΦT 〜q(Φτ∣Dτ;ψ).	(8)
s=1
or we may naively approximate by taking the expectation inside for computational efficiency:
Eq[p(yTIxT, φτ; θ)] ≈ p(yT∣xT,Eq[φτ]; θ).	(9)
In the experimental section, we show that Eq. (8) largely outperforms Eq. (9).
5
Published as a conference paper at ICLR 2020
Figure 3: Inference Network. The proposed dataset encoder captures the instance-wise and class-wise statistics
hierarchically, from which we infer three different balancing variables.
yτ
。丁 : test
4.1	Dataset encoding
The main challenge in modeling our variational distribution q(φτ∣Dτ; ψ) is to decide how to refine
the training dataset Dτ into informative representation, which is not trivial. This inference network
should capture all the necessary statistical information to recognize any imbalances in the dataset Dτ .
Mean-pooling (Edwards & Storkey, 2017) or sum-pooling (Zaheer et al., 2017) is frequently used
as a practical set-encoder, where each instance in the set is transformed by the shared nonlinearity,
and then averaged or summed together to generate a single vector summarizing the set, followed
by an additional nonlinearity. However, for the classification dataset Dτ which is the set of (class)
sets, those non-hierarchical pooling methods will perform poorly as they ignore the label information.
Therefore, we use a two-layer hierarchical set encoder which first encodes each class as a set of
samples and then encodes the set as the set of classes (see the Appendix B for the justification).
However, there is an additional limitation of mean pooling when using it to describe a task: it does
not recognize the number of elements in the set2. This could be a critical limitation in recognizing
the imbalances in the given task. Therefore we explicitly input the number of elements into the
set encoder. Yet, the set cardinality alone is insufficient in capturing the distribution of the dataset.
Suppose that we have a set containing replications of a single instance. Then, although the set has
only limited information, the set encoding cannot recognize it and will overestimate the information.
To prevent this, we encode the variance of the set as well.
Based on this intuition, we define the set encoder StatisticsPooling (∙) that generates the concatena-
tion of the set statistics such as mean, variance, and cardinality. We use this encoder to first encode
each class, and then the whole set of classes as follows:
vτ = StatisticsPooling {NN2 (sc)}cC=1 ,	sc = StatisticsPooling {NN1 (x)}x∈Xτ
for classes c = 1, . . . , C. Xτc is the collection of class c examples in task τ. NN1 and NN2 are some
neural networks parameterized by ψ. The vector vτ finally summarizes the entire dataset Dτ for
few-shot classification. Note that the class-specific balancing variables ωj ,...,ωιc are generated
from si,..., SC, and other task-specific balancing variables YT and zτ are generated from vτ with a
few additional layers (See Figure 3).
5	Experiments
We next validate our method on multiple benchmark datasets with more realistic task distribution.
Datasets We validate our method on the following benchmark datasets. CIFAR-FS: This
dataset (Bertinetto et al., 2019) is a variant of CIFAR-100 dataset that consists of 100 general
object categories. Each class comes with 600 examples, each of which is a color image that contains
32 × 32 pixels. We split the dataset into 64/16/20 classes for training/validation/test. SVHN: This
dataset (Netzer et al., 2011) is frequently used as an OOD dataset for CIFAR-10 and CIFAR-100.
It consists of 26, 032 color images of 32 × 32 pixels, from 10 digits classes. miniImageNet: This
dataset (Vinyals et al., 2016) is a subset of the ImageNet dataset (Russakovsky et al., 2015). It
consists of total 100 classes, each of which has 600 images resized into 84 × 84. We split the dataset
into subsets containing 64/16/20 classes for training/validation/test. CUB: This dataset contains
11, 788 images of 200 bird species. We resize the images into 84 × 84. We split the dataset into
2We also found out that sum-pooling is very unstable in encoding set of variable size.
6
Published as a conference paper at ICLR 2020
Table 1: Any-shot classification results. For each model, we run 3 independent trials and jointly test them
over total 9, 000 = 3 × 3, 000 episodes. We report mean accuracies and 95% confidence intervals.
Meta-training	CIFAR-FS		miniImageNet	
Meta-test	CIFAR-FS	SVHN	miniImageNet	CUB
MAML (Finn et al., 2017)	71.55±0.23	45.17±0.22	66.64±0.22	65.77±0.24
Meta-SGD (Li et al., 2017)	72.71±0.21	46.45±0.24	69.95±0.20	65.94±0.22
MT-net (Lee & Choi, 2018)	72.30±0.22	49.17±0.21	67.63±o.23	66.09±0.23
ABML (Ravi & Beatson, 2019)	67.24±0.24	36.52±0.17	56.91±0.i9	57.88±0.20
Prototypical Networks (Snell et al., 2017)	73.24±0.20	42.91±0.18	69.11±0.i9	60.80±0.19
Proto-MAML (Triantafillou et al., 2020)	71.80±0.21	40.16±0.17	68.96±0.18	61.77±0.19
Bayesian TAML	75.15±o.20	51.87±0.23	71.46±ο.i9	7i.7i±0.2i
Table 2: Multi-dataset any-shot classification results.
Meta-training	Aircraft, QuickDraw, and VGG-FloWer
Meta-test	Aircraft	QuickDraw	VGG-FloWer	Traffic Signs	Fashion-MNIST
MAML	48.60±0.17	69.02±0.i8	^^60.38±0.i6-	51.96±0.22	63.10±0.15
Meta-SGD	49.71±0.17	70.26±0.16	59.41±0.27	52.07±0.35	62.71±0.25
MT-net	51.68±0.17	68.78±0.18	64.20±o.i6	56.36±0.23	62.86±0.15
Prototypical Networks	50.63±0.16	72.3i±0.i7	65.52±0.i5	49.93±0.18	64.26±0.13
Proto-MAML	51.15±0.17	69.84±0.18	65.24±0.17	53.93±0.20	63.72±0.15
Bayesian TAML	54.43±0.i6	72.03±0.i6	67.72±ο.i6	64.8i±0.2i	68.94±0.i3
100/50/50 classes for training/validation/test. Since this dataset is fine-grained, we regard it as an
out-of-distribution dataset of the coarse-grained miniImageNet dataset.
Realistic task distribution To define realistic task distribution p(τ), we first randomly sample
C = 5 classes from the whole set of classes. Then with 0.5 probability, we sample the set size
Nc 〜Unif(1,50) independently for each class C = 1,...,C,in order to simulate class imbalance.
On the other hand, with the other 0.5 probability, we again sample the set size Nc 〜Unif(1,50)
but apply the same single sample to all the classes, in order to simulate task imbalance. We set the
number of test (or query) examples to 15 for each class.
Experimental setup We use conventional 4-block convolutional neural networks with 32 chan-
nels (Finn et al., 2017). All the baselines and our model become transductive through batch normal-
ization at meta-test time, following Finn et al. (2017). We perform early-stopping for all the baselines
and our model with meta-validation set performance. We set the number of inner-gradient steps to 5
for meta-training and 10 for meta-testing, for all the models that take inner-gradient steps. See the
Appendix A for more details about the experimental setup.3
5.1	Main results
Any-shot classification Table 1 shows the results under the realistic task distribution with task and
class imbalance. We first observe that Meta-SGD and MT-net outperforms MAML. They precondition
the inner-gradients with diagonal or block-diagonal matrix (Flennerhag et al., 2020), which seems
to provide extra flexibility to handle task and class imbalance. ABML, one of the recent Bayesian
meta-learning models, largely underperforms MAML in this setting, mainly because each task-
specific predictor is excessively regularized by the prior distribution. However, our graphical model
in Figure 2 does not directly impose a prior distribution on task-specific predictors, but only on the
balancing variables φ. Prototypical Networks perform relatively well on in-distribution (ID) tasks but
not on out-of-distribution (OOD) tasks. This is because metric-based models do not take the gradient
steps for OOD tasks, such that the novel information in the dataset cannot be effectively incorporated
into each task-specific predictor. Proto-MAML has been proposed to take the advantage of both
metric-based and gradient-based approach (Triantafillou et al., 2020), but it does not outperform
Prototypical Networks in our experiments. Finally, we observe that our Bayesian TAML significantly
outperforms all the baselines on both ID and OOD datasets. Bayesian TAML performs especially
well on OOD datasets, because when the given task largely differs from the meta-knowledge, the
model is able to deviate far from the meta-knowledge; however this is difficult for the other baselines.
Multi-dataset any-shot classification We further test our model under a more challenging setting
where tasks could come from a highly heterogeneous dataset (Triantafillou et al., 2020). We meta-
3Code is available at https://github.com/haebeom-lee/l2b
7
Published as a conference paper at ICLR 2020
train the models with Aircrafts, Quickdraw and VGG-Flower dataset, and meta-test with the three
datasets plus two additional datasets for OOD tasks - Traffic Signs and Fashion-MNIST. We see from
Table 2 that Bayesian TAML also largely outperforms baselines in this setting. rototypical Networks
perform relatively well for this multi-dataset classification due to their ability of learning a flexible
metric space. Proto-MAML brings only marginal improvements on Prototypical Networks since it
takes additional gradient steps without considering task dependency. On the other hand, Bayesian
TAML effectively combines the advantage of both metric-based and gradient-based approaches by
task-dependently modulating the gradient steps to handle task and class imbalance as well. See the
Appendix A for the detailed experimental setup.
5.2	Effectiveness of the Balancing Variables
We now validate the effectiveness of the three balancing variables to clearly show their effectiveness.
zτ for handling distributional shift. zτ modulates the initial model parameter θ , and decides
what and how much to use from the meta-knowledge θ based on the relatedness between the initial
θ and the task at hand. We validate the effectiveness of this balancing variable by examining the
performance of the baseline methods and our models using the datasets (SVHN, CUB) that are
highly heterogeneous from the meta-training datasets (CIFAR-FS, miniImageNet). The results in
Table 3 show that our model with only zτ can effectively handle these out-of-distribution (OOD)
tasks. We observe in Figure 4 that zτ actually relocates the initial θ far from the initial parameter for
these OOD tasks given at meta-test time, with larger displacements for highly heterogeneous tasks
(Figure 4, right). This allows the model to either stick to, or deviate from the meta-knowledge based
on the similarity between the tasks given at the meta-training and meta-test time. Moreover, the
last two rows of Table 3 show that the MC approximation in Eq. (8) largely outperforms the naive
approximation in Eq. (9), which suggests that zτ learns very large variance. We conjecture that the
role of such random initialization in MAML framework is to increase the effective learning rate for
minilmageNet
• CUB
★ Initial Theta
Figure 4: T-SNE visualization of θ and θ * E[zτ].
OOD tasks (See Appendix D for the discussion).
Meta-training	CIFAR-FS	miniImageNet
Meta-test	SVHN	CUB
MAML	45.17±0.22	65.77±0.24
Meta-SGD	46.45 ±0.24	65.94±0.22
B. z-TAML (naive approx.)	47.80±o.20	67.90±0.21
B. z-TAML (MC approx.)	52.29±0.24	69.11±0.22
Table 3: Ablation study on distributional shift.
γτ and zτ for handling task imbalance. We then examine how the two balancing variables, γτ
and zτ handle inter-task imbalance where tasks used for meta-learning have largely different number
of instances. Figure 5(a) shows the performance of the baseline models and our models with each of
the balancing variables, when the number of instances per task varies from 5 to 2000. We observe
that our Bayesian z-TAML and Bayesian γ-TAML largely outperform Meta-SGD, especially by
large degree when the number of instances per task is large. Figure 5(b) shows that the effectiveness
of zτ largely depends on the number of MC samples used in Eq. (8), demonstrating the importance of
incorporating uncertainties in random initializations for handling task imbalance. We further observe
from Figure 5(c) that the task-dependent learning rate multiplier γτ rapidly grows as the number
of instances per task increases. This agrees with our intuition that larger tasks should take larger
inner-gradient steps, to learn more from the given task rather than resorting to meta-knowledge.
5	25	100	250	500	1000	2000
Number of instances Per task
(a) Task size vs. Acc.
<
44
38
32
26
5
74
68
区62
I56
50
(b) MC sample size vs. Acc.
Δ Z-TAML (S=1)
*z-TAML (S=3)
-I-TAML (S=10)
q ExtraPoIation)
25	100	250	500	1000	2000
Number of instances Per task
(c) Task size vs. E(γτ )
5	25	100	250	500	1000	2000
Number of instances Per task
Figure 5: Ablation study on task imbalance (Meta-training: CIFAR-FS, Meta-test: SVHN).
8
Published as a conference paper at ICLR 2020
ωτ for handling class imbalance. ωτ rescales the class-specific gradients to handle class
imbalance where the number of instances per class (i.e. shot) largely varies. Table 4 shows the results
under the varying degree of class imbalance across the task distribution. We observe that Bayesian
ω-TAML outperforms Meta-SGD, especially by larger degree under higher class imbalance. Notably,
Bayesian ω-TAML outperforms a heuristic balancing method which divides each class-specific
gradient by the cardinality of each class set (Meta-SGD with 1/N). The accuracy improvements over
Meta-SGD in Figure 6 demonstrate that this heuristic balancing method overly emphasizes the tail
classes with few training instances, thereby deteriorating the performance on classes with sufficiently
large number of instances. On the other hand, our Bayesian ω-TAML learns the appropriate
balancing variables which allow to obtain large performance gains on all classes.
Meta-training / Meta-test CIFAR-FS / CIFAR-FS	Number of instances per class		
	10	5 - 25	1 - 50
MAML	73.60±0.19	71.15±0.19	67.43±0.22
Meta-SGD	73.25±0.19	72.68±0.19	71.61±0.19
Meta-SGD with 1/N	71.33±o.19	72.43±0.19	72.23±0.19
Bayesian ω-TAML	73.44±o.18	73.20±0.18	72.86±0.19
Table 4: Ablation study on class imbalance.
5
g 4
g 3
S 2
工1
> 0
-1
-2
0.4
0.3
0.2
0.1
Number of instances per class
0.5
Figure 6: E[ωτ] and accuracy improvements
over Meta-SGD.
0
5.3	More ablation studies
Effectiveness of Bayesian modeling We further demonstrate the effectiveness of Bayesian mod-
eling by comparing it with the deterministic version of our model (Deterministic TAML), where
three balancing variables are no longer stochastic. We apply `2 regularization on the variables with
coefficients that are equivalent to the KL-divergence in Eq. (5). The results in Table 5 show that the
Bayesian TAML significantly outperforms its deterministic counterpart, especially with larger gap on
the OOD task (SVHN). We also see from the last two rows of the table that MC approximation in
Eq. (8) is more beneficial for the OOD tasks than for the ID tasks (See Appendix D for the discussion).
Figure 7 further shows that the balancing variable γτ for handling task imbalance, more sensitively
reacts on Bayesian TAML than on Deterministic TAML, which suggests that Bayesian modeling
amplifies the effect of the balancing variables.
Meta-training: CIFAR-FS	CIFAR-FS	SVHN	3		o	Det-COnV2 A Det-Conv3	XZzZr	
MAML	70.19±0.23	41.81±0.19			O Bayes-Conv2	j<	
	Meta-SGD	72.71±0.21	46.45±0.24		2	—Bayes-Conv3 O Bayes-Conv4	/	
Deterministic TAML	73.82±0.21	46.78±0.24		1.5		
Bayesian TAML (Naive approx.)	73.52±0.20	47.15±0.20		1		
Bayesian TAML (MC approx.)	75.15±0.20	51.87±0.23		0.5	5	25	50	100	150	200	250
Table 5: Classification performance of Bayesian and Determin-					Number of instances per task	
istic TAML on seen and unseen dataset.			Figure 7: E[γτ] vs. Bayesianness.			
Dataset encoding Finally, we perform an ablation
study of the proposed task encoding network. The
results in Table 6 show that the proposed hierarchi-
cal encoding scheme for classification dataset, with
set cardinality and variance is significantly more ef-
fective than simple mean-pooling methods (Zaheer
et al., 2017; Edwards & Storkey, 2017)4.
Meta-training / Meta-test	Hierarchical encoding	
CIFAR-FS / CIFAR-FS	×	7
Mean	73.84±0.21	73.69±0.21
Mean + N	73.17±0.21	74.88±0.20
Mean + Var. + N	73.93±0.21	75.15±0.20
Table 6: Ablation study on dataset encoding
schemes. N: Set cardinality.
6	Conclusion
We propose Bayesian TAML that learns to balance the effect of meta-learning and task-adaptive
learning, to consider meta-learning under a more realistic task distribution where each task and
class can have varying number of instances. Specifically, we encode the dataset for each task into
4We also found out that using set cardinality is more effective than utilizing higher-order statistics such as
skewness or kurtosis (See the Appendix C for further ablation study).
9
Published as a conference paper at ICLR 2020
hierarchical representations, and use it to modulate the original parameter, learning rate, and the class-
specific gradients. We use a Bayesian framework to infer the posterior of these balancing variables,
and propose an effective variational inference framework to solve for them. Our model outperforms
existing meta-learning methods when validated on imbalanced few-shot classification tasks. Further
analysis of each balancing variable shows that each variable effectively handles task imbalance, class
imbalance, and out-of-distribution tasks. We believe that our work makes a meaningful step toward
application of meta-learning to real-world problems.
Acknowledgements This work was supported by Google AI Focused Research Award, Samsung
Research Funding Center of Samsung Electronics (No. SRFC-IT1502-51), the Engineering Research
Center Program through the National Research Foundation of Korea (NRF) funded by the Korean
Government MSIT (NRF-2018R1A5A1059921), and the Institute of Information & communications
Technology Planning & Evaluation (IITP) grant funded by the Korea government(MSIT) (No.2019-
0-00075, and Artificial Intelligence Graduate School Program (KAIST)).
References
Luca Bertinetto, Joao F Henriques, Philip HS Torr, and Andrea Vedaldi. Meta-learning with differen-
tiable closed-form solvers. In ICLR, 2019.
Harrison Edwards and Amos Storkey. Towards a neural statistician. In ICLR, 2017.
Chelsea Finn, Pieter Abbeel, and Sergey Levine. Model-agnostic meta-learning for fast adaptation of
deep networks. In ICML, 2017.
Chelsea Finn, Kelvin Xu, and Sergey Levine. Probabilistic model-agnostic meta-learning. In NeurIPS,
2018.
Sebastian Flennerhag, Andrei A. Rusu, Razvan Pascanu, Francesco Visin, Hujun Yin, and Raia
Hadsell. Meta-learning with warped gradient descent. In ICLR, 2020.
Jonathan Gordon, John Bronskill, Matthias Bauer, Sebastian Nowozin, and Richard E Turner. Meta-
learning probabilistic inference for prediction. In ICLR, 2019.
Sebastian Houben, Johannes Stallkamp, Jan Salmen, Marc Schlipsing, and Christian Igel. Detection
of traffic signs in real-world images: The german traffic sign detection benchmark. In The 2013
international joint conference on neural networks (IJCNN), pp. 1-8. IEEE, 2013.
Takashi Kawashima Jongmin Kim Jonas Jongejan, Henry Rowley and Nick Fox-Gieg. The quick,
draw! - a.i. experiment. 2016. URL http://quickdraw.withgoogle.com.
Taesup Kim, Jaesik Yoon, Ousmane Dia, Sungwoong Kim, Yoshua Bengio, and Sungjin Ahn.
Bayesian model-agnostic meta-learning. In NeurIPS, 2018.
Diederik P. Kingma and Max Welling. Auto encoding variational bayes. In ICLR, 2014.
Yoonho Lee and Seungjin Choi. Gradient-based meta-learning with learned layerwise metric and
subspace. In ICML, 2018.
Zhenguo Li, Fengwei Zhou, Fei Chen, and Hang Li. Meta-sgd: Learning to learn quickly for few
shot learning. arXiv preprint arXiv:1707.09835, 2017.
Subhransu Maji, Esa Rahtu, Juho Kannala, Matthew Blaschko, and Andrea Vedaldi. Fine-grained
visual classification of aircraft. arXiv preprint arXiv:1306.5151, 2013.
Yuval Netzer, Tao Wang, Adam Coates, Alessandro Bissacco, Bo Wu, and Andrew Y Ng. Reading
digits in natural images with unsupervised feature learning. 2011.
Maria-Elena Nilsback and Andrew Zisserman. Automated flower classification over a large number
of classes. In 2008 Sixth Indian Conference on Computer Vision, Graphics & Image Processing,
pp. 722-729. IEEE, 2008.
10
Published as a conference paper at ICLR 2020
Boris Oreshkin, PaU RodrigUez L6pez, and Alexandre Lacoste. Tadam: Task dependent adaptive
metric for improved few-shot learning. In NeurIPS, 2018.
SiyUan Qiao, Chenxi LiU, Wei Shen, and Alan L YUille. Few-shot image recognition by predicting
parameters from activations. In CVPR, 2018.
Sachin Ravi and Alex Beatson. Amortized bayesian meta-learning. In ICLR, 2019.
Sachin Ravi and HUgo Larochelle. Optimization as a model for few-shot learning. In ICLR, 2017.
James ReqUeima, Jonathan Gordon, John Bronskill, Sebastian Nowozin, and Richard E TUrner. Fast
and flexible mUlti-task classification Using conditional neUral adaptive processes. In NeurIPS,
2019.
Olga RUssakovsky, Jia Deng, Hao SU, Jonathan KraUse, Sanjeev Satheesh, Sean Ma, Zhiheng HUang,
Andrej Karpathy, Aditya Khosla, Michael Bernstein, et al. Imagenet large scale visUal recognition
challenge. International journal of computer vision, 115(3):211-252, 2015.
Andrei A RUsU, DUshyant Rao, JakUb Sygnowski, Oriol Vinyals, Razvan PascanU, Simon Osindero,
and Raia Hadsell. Meta-learning with latent embedding optimization. In ICLR, 2019.
Adam Santoro, Sergey BartUnov, Matthew Botvinick, Daan Wierstra, and Timothy Lillicrap. Meta-
learning with memory-aUgmented neUral networks. In ICML, 2016.
Jurgen Schmidhuber. Evolutionary principles in self-referential learning, or on learning how to learn:
the meta-meta-…hook. PhD thesis, Technische Universitat Munchen, 1987.
Jake Snell, Kevin Swersky, and Richard Zemel. Prototypical networks for few-shot learning. In NIPS,
2017.
Sebastian ThrUn and Lorien Pratt (eds.). Learning to Learn. KlUwer Academic PUblishers, Norwell,
MA, USA, 1998. ISBN 0-7923-8047-9.
Eleni TriantafilloU, Tyler ZhU, Vincent DUmoUlin, Pascal Lamblin, Kelvin XU, Ross Goroshin, Carles
Gelada, Kevin Swersky, Pierre-Antoine Manzagol, and HUgo Larochelle. Meta-dataset: A dataset
of datasets for learning to learn from few examples. In ICLR, 2020.
Oriol Vinyals, Charles BlUndell, Timothy Lillicrap, Daan Wierstra, et al. Matching networks for one
shot learning. In NIPS, 2016.
Han Xiao, Kashif RasUl, and Roland Vollgraf. Fashion-mnist: a novel image dataset for benchmarking
machine learning algorithms. arXiv preprint arXiv:1708.07747, 2017.
Manzil Zaheer, Satwik KottUr, Siamak Ravanbakhsh, Barnabas Poczos, RUslan R SalakhUtdinov, and
Alexander J Smola. Deep sets. In NIPS, 2017.
11
Published as a conference paper at ICLR 2020
A Experimental Setup
A.1 Baselines
We describe the baseline models and our task-adaptive learning to balance model.
1)	MAML. The Model-Agnostic Meta-Learning (MAML) model by Finn et al. (2017), which aims
to learn the global initial model parameter, from which we can take a few gradient steps to get
task-specific predictors.
2)	ABML. This model interprets MAML under hierarchical Bayesian framework, but they propose to
share and amortize the inference rules across both global initial parameters as well as the task-specific
parameters.
3)	MT-net. A gradient-based meta-learning model proposed by Lee & Choi (2018). The model
obtains a task-specific parameter only w.r.t. a subset of the whole dimension (M-net), followed by a
linear transformation to learn a metric space (T-net).
4)	Meta-SGD. A base MAML with the learnable learning-rate vector (without any restriction on
sign) element-wisely multiplied to each step inner-gradient (Li et al., 2017).
5)	Prototypical Networks. A metric-based few-shot classification model proposed by Snell et al.
(2017). The model learns a metric space based on Euclidean distance between class prototypes and
query embeddings.
6)	Proto-MAML. A variant of MAML (Triantafillou et al., 2020) that replaces the initialization of
the final fully-connected layer matrix with the equivalent one of the Prototypical Networks (Snell
et al., 2017). This model combines the advantage of both metric-based and gradient-based approach.
We set α to 0.0005 for any-shot classification and 0.01 for multi-dataset experiments.
7)	Bayesian TAML. Our model that can adaptively balance between meta- and task-specific learners
for each task and class.
A.2 Any-shot classification.
We describe more detailed experimental settings for any-shot classification. For MAML, ABML and
MT-NET, we set the inner-gradient stepsize α to 0.5 for CIFAR-FS / SVHN, and 0.1 for miniImageNet
/ CUB, after searching the range α ∈ {0.01, 0.05, 0.1, 0.5}.
CIFAR-FS and SVHN: We meta-train all models for total 50K iterations with meta-batch size set
to 4. The outer learning rate is set to 0.001 for all the baselines and our models.
miniImageNet and CUB: We meta-train all models for total 80K iterations with meta-batch size
set to 1. The outer learning rate is set to 0.0001 for all the baselines and our models.
A.3 Multi-dataset Classification
For multi-dataset classification, we construct a subset of the whole collection of the Meta-Dataset (Tri-
antafillou et al., 2020). We resize the images into 32 × 32 pixels. For each task, We uniformly select
one dataset among Aircrafts, Quickdraw and VGG-Flower and randomly sample 10 classes from the
dataset. Then we sample instances from each class with the number of instances per class ranging
from 1 to 50. The number of test instances is equally set to 15 for all classes. At meta-test time, we
use the three datasets plus two more out-of-distribution datasets - Traffic Signs and Fashion-MNIST.
For MAML, ABML and MT-NET, we set the inner-gradient stepsize α to 0.5. We set the number of
classes for each task to 10, meta-batch size to 3, meta-training iterations to 60K, and outer learning
rate to 0.001 for all models.
Aircraft: We split this dataset (Maji et al., 2013) into 70/15/15 classes for meta- train-
ing/validation/test with 100 examples for each class.
Quick Draw: We split this dataset (Jonas Jongejan & Fox-Gieg, 2016) into 241/52/52 classes for
meta- training/validation/test with randomly sampled 200 examples for each class.
VGG Flower: This dataset (Nilsback & Zisserman, 2008) contains 40 between 258 images for
each class and we split this dataset into 71/16/15 classes for meta- training/validation/test.
12
Published as a conference paper at ICLR 2020
Traffic Signs: This dataset (Houben et al., 2013) has only test set consisting of 43 classes. Each
class has 900 examples.
Fashion-MNIST: We use the test set of Fashion-MNIST (Xiao et al., 2017) for meta-testing. This
dataset has 10 classes with 1000 examples per class.
A.4 Inference network architecture
We describe the network architecture of the inference network that takes a classification dataset as an
input and generates three balancing variables as output.
Shared encoder NN1 : Xτ1 , . . . , XτC → s1 , . . . , xC
3 X 3 ConV2d with 10-dim and ReLU
2	× 2 Max pool
3	× 3 Conv2d with 10-dim and ReLU
2 × 2 Max pool
fc layer with 64-dim
Statistics Pooling for each class c = 1, . . . , C.
fc layer with 4-dim (across the statistics) and ReLU
Shared encoder NN2 : s1 , . . . , sC → vτ
fc layer with 128-dim and ReLU
fc layer with 32-dim
Statistics Pooling over all the class representations
fc layer with 4-dim (across the statistics) and ReLU
Generate ω ： sτ,..., SC → (μω ,σω j,..dc ,σω C)________________________
fc layer with 64-dim and ReLU
fc layer to generate (μ1°, σ[ J for each class C = 1,...,C.
Generate γτ: VT → "；1 ,σγ1),..., (〃；L, σγL)
fc layer with 64-dim and ReLU
fc layer to generate (μ1, σYa) for each layer l = 1,...,L.
Generate zτ: vτ → μT, σT
fc layer with 64-dim and ReLU
fc layer to generate (μT, σζ) for the output channels
B Justification for Set-of-Sets structure.
Based on the previous justification of DeepSets (Zaheer et al., 2017), we can easily justify the Set-of-
Sets structure proposed in the main paper as well, in terms of the two-level permutation invariance
properties required for any classification dataset. The main theorem of DeepSets is:
Theorem 1. A function f operating on a setX ∈ X is a valid set function (i.e. permutation invariant),
iff it can be decomposed as f(X) = ρ2( x∈X ρ1(x)), where ρ1 and ρ2 are appropriate nonfcities.
See (Zaheer et al., 2017) for the proof. Here we apply the same argument twice as follows.
1. A function f operating on a set of representations {S1, . . . , SC} (we assume each Sc is an
output from a shared function g) is a valid set function (i.e. permutation invariant w.r.t. the
order of {S1, . . . , SC}), iff it can be decomposed as f({S1, . . . , SC}) = ρ2(PcC=1 ρ1(Sc))
with appropriate nonfcities ρ1 and ρ2 .
13
Published as a conference paper at ICLR 2020
2.	A function g operating on a set of examples {xc,1, . . . , xc,N} is a valid set function (i.e.
permutation invariant w.r.t. the order of {xc,1 , . . . , xc,N}) iff it can be decomposed as
g({xc,1, . . . , xc,N}) = ρ4(PiN=1 ρ3(xc,i)) with appropriate nonfcities ρ3 and ρ4.
Inserting sc = g({xc,1, . . . , xc,N}) into the expression of f, we arrive at the following valid compos-
ite function operating on a set of sets:
f{g({xc,1,...,xc,N})}cC=1 =ρ2	Xc=C1ρ1 ρ4 Xi=N1ρ3(xc,i)
(10)
Let F denote the composite of f and (multiple) g and let NN2 denote the composite of ρ1 and ρ4 .
Further define NN1 := ρ3 and NN3 := ρ2. Then, we have
F ({{xi,1,..., Xl,N },..., {xc,1, ..., XC,N }}) = NN3 XC NN2 XN NN1 (xc,i)	(11)
where C is the number of classes and N is the number of examples per class. See Section A.4 for the
actual encoder structure.
C Ablation Study on Higher-order Statistics
While our framework does not place any restriction on selecting the statistics for set encoding, we per- form further ablation study on the effectiveness of higher-order statistics for our specific experimen- tal setting. We see from Table 7 that the higher- order statistics such as element-wise sample skew- ness and kurtosis improve the performance given sample mean and diagonal covariance. However, the set cardinality seems more effective than those	Meta-training	Meta-test CIFAR-FS	CIFAR-FS	SVHN Mean + Var.	73.37±o.2i	49.81 ±0.22 Mean + Var. + Skew.	73.66±0.21	50.33±0.23 Mean + Var. + Kurt.	73.47±o.2i	5O.27±o.23 Mean + Var. + N	75.15±o.2o	51.87±o.23 Table 7: Further ablation study on dataset encoding schemes. N: Set cardinality.
statistics as it could be the most direct and relevant criteria for detecting imbalances in a set.
D Analysis on Random Initialization for S olving
Out-of-Distribution Tasks
In this section, we analyze the effect of the variance of zτ for
solving OOD tasks, that randomizes the MAML initialization
parameter θ. Define E勺①叮⑼仇]=θ * Eq[zτ], the initial-
ization parameter modulated by the posterior mean of zτ . Then,
we measure the `2 distance from Eq [θ0] to the two different
versions of the final task-specific parameter θτ after taking 10
gradient steps, in order to see how the posterior variance of zτ
affects the final task-specific parameter θτ as a function of zτ :
•	θτ(Eq[zτ]]): Task-specific predictor θτ obtained with-
out the variance of zτ , such that the expectation is
taken before the inner-gradient steps.
•	Ez [θτ (zτ)]: Task-specific predictor θτ obtained with
the variance in the random initialization, such that the
expectation is taken outside of the gradient steps. We
evaluate the expectation with MC approximation, hav-
ing the ensemble of the diverse task-specific predictor
samples θ1τ , . . . , θSτ (we use S = 50).
L2 Distance from %[80]
叫 Etj[z[)	E(J ⑻(z，)]
由 ID ・ OOD
Figure 8: `2 distance between the ini-
tialization and the task-specific param-
eters, under different treatment of the
expectation over q(zτ∣Dτ; ψ). We use
Bayesian z-TAML and evaluate with
CIFAR-FS / SVHN 50-shot tasks.
Figure 8 suggests that the role of the random initialization is to increase the effective learning rate for
the OOD tasks. We see from the left bar graph that if we do not consider variance in the initialization
(θτ (Eq [zτ])), the OOD tasks deviate relatively less than the ID tasks (4.61 vs. 5.18), although it
14
Published as a conference paper at ICLR 2020
should deviate much considering the distributional discrepancy. On the other hand, if we incorporate
the random initialization to obtain task-specific parameter (Eq [θτ (zτ)]), OOD tasks can deviate
further from the initialization (4.61 → 5.11). It directly results in the performance gain because the
task-specific learner can exploit more of the information in the OOD tasks.
15