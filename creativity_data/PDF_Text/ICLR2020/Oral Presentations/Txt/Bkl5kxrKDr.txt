Published as a conference paper at ICLR 2020
A Generalized Training Approach
for Multiagent Learning
Paul Muller pmuller@...	Shayegan Omidshafiei somidshafiei@...	Mark Rowland markrowland@...	Karl Tuyls karltuyls@...
Julien Perolat	Siqi Liu	Daniel Hennes	Luke Marris
perolat@...	liusiqi@...	hennes@...	marris@...
Marc Lanctot	Edward Hughes	Zhe Wang	Guy Lever
lanctot@...	edwardhughes@...	zhewang@...	guylever@...
Nicolas Heess	Thore Graepel		Remi Munos
heess@...	thore@.	..	munos@...
...google.com.	DeepMind.
Ab stract
This paper investigates a population-based training regime based on game-theoretic
principles called Policy-Spaced Response Oracles (PSRO). PSRO is general in the
sense that it (1) encompasses well-known algorithms such as fictitious play and
double oracle as special cases, and (2) in principle applies to general-sum, many-
player games. Despite this, prior studies of PSRO have been focused on two-player
zero-sum games, a regime wherein Nash equilibria are tractably computable. In
moving from two-player zero-sum games to more general settings, computation
of Nash equilibria quickly becomes infeasible. Here, we extend the theoretical
underpinnings of PSRO by considering an alternative solution concept, α-Rank,
which is unique (thus faces no equilibrium selection issues, unlike Nash) and
applies readily to general-sum, many-player settings. We establish convergence
guarantees in several games classes, and identify links between Nash equilibria
and α-Rank. We demonstrate the competitive performance of α-Rank-based PSRO
against an exact Nash solver-based PSRO in 2-player Kuhn and Leduc Poker. We
then go beyond the reach of prior PSRO applications by considering 3- to 5-player
poker games, yielding instances where α-Rank achieves faster convergence than
approximate Nash solvers, thus establishing it as a favorable general games solver.
We also carry out an initial empirical validation in MuJoCo soccer, illustrating the
feasibility of the proposed approach in another complex domain.
1	Introduction
Creating agents that learn to interact in large-scale systems is a key challenge in artificial intelligence.
Impressive results have been recently achieved in restricted settings (e.g., zero-sum, two-player
games) using game-theoretic principles such as iterative best response computation (Lanctot et al.,
2017), self-play (Silver et al., 2018), and evolution-based training (Jaderberg et al., 2019; Liu et al.,
2019). A key principle underlying these approaches is to iteratively train a growing population of
player policies, with population evolution informed by heuristic skill ratings (e.g., Elo (Elo, 1978))
or game-theoretic solution concepts such as Nash equilibria. A general application of this principle
is embodied by the Policy-Space Response Oracles (PSRO) algorithm and its related extensions
(Lanctot et al., 2017; Balduzzi et al., 2019). Given a game (e.g., poker), PSRO constructs a higher-
level meta-game by simulating outcomes for all match-ups of a population of players’ policies. It then
trains new policies for each player (via an oracle) against a distribution over the existing meta-game
1
Published as a conference paper at ICLR 2020
policies (typically an approximate Nash equilibrium, obtained via a meta-solver1), appends these
new policies to the meta-game population, and iterates. In two-player zero sum games, fictitious play
(Brown, 1951), double oracle (McMahan et al., 2003), and independent reinforcement learning can
all be considered instances of PSRO, demonstrating its representative power (Lanctot et al., 2017).
Prior applications of PSRO have used Nash equilibria as the policy-selection distribution (Lanctot
et al., 2017; Balduzzi et al., 2019), which limits the scalability of PSRO to general games: Nash
equilibria are intractable to compute in general (Daskalakis et al., 2009); computing approximate
Nash equilibria is also intractable, even for some classes of two-player games (Daskalakis, 2013);
finally, when they can be computed, Nash equilibria suffer from a selection problem (Harsanyi et al.,
1988; Goldberg et al., 2013). It is, thus, evident that the reliance of PSRO on the Nash equilibrium
as the driver of population growth is a key limitation, preventing its application to general games.
Recent work has proposed a scalable alternative to the Nash equilibrium, called α-Rank, which
applies readily to general games (Omidshafiei et al., 2019), making it a promising candidate for
population-based training. Given that the formal study of PSRO has only been conducted under the
restricted settings determined by the limitations of Nash equilibria, establishing its theoretical and
empirical behaviors under alternative meta-solvers remains an important and open research problem.
We study several PSRO variants in the context of general-sum, many-player games, providing
convergence guarantees in several classes of such games for PSRO instances that use α-Rank as
a meta-solver. We also establish connections between Nash and α-Rank in specific classes of
games, and identify links between α-Rank and the Projected Replicator Dynamics employed in prior
PSRO instances (Lanctot et al., 2017). We develop a new notion of best response that guarantees
convergence to the α-Rank distribution in several classes of games, verifying this empirically in
randomly-generated general-sum games. We conduct empirical evaluations in Kuhn and Leduc Poker,
first establishing our approach as a competitive alternative to Nash-based PSRO by focusing on
two-player variants of these games that have been investigated in these prior works. We subsequently
demonstrate empirical results extending beyond the reach of PSRO with Nash as a meta-solver by
evaluating training in 3- to 5-player games. Finally, we conduct preliminary evaluations in MuJoCo
soccer (Liu et al., 2019), another complex domain wherein we use reinforcement learning agents as
oracles in our proposed PSRO variants, illustrating the feasibility of the approach.
2	Preliminaries
Games We consider K-player games, where each player k ∈ [K] has a finite set of pure strategies
Sk. Let S = Qk Sk denote the space of pure strategy profiles. Denote by S-k = Ql6=k Sl the set
of pure strategy profiles excluding those of player k. Let M(s) = (M1 (s), . . . , MK(s)) ∈ RK
denote the vector of expected player payoffs for each s ∈ S. A game is said to be zero-sum if
Pk Mk(s) = 0 for all s ∈ S. A game is said to be symmetric if all players have identical strategy
sets Sk, and for any permutation ρ, strategy profile (s1, . . . , sK) ∈ S, and index k ∈ [K], one has
Mk(s1, . . . , sK) = M ρ(k) (sρ(1) , . . . , sρ(K)). A mixed strategy profile is defined as π ∈ ∆S, a
tuple representing the probability distribution over pure strategy profiles s ∈ S. The expected payoff
to player k under a mixed strategy profile π is given by Mk(π) = Ps∈S π(s)M k(s).
Nash Equilibrium (NE) Given a mixed profile π, the best response for a player k is de-
fined BRk(π) = argmaxν∈∆ k [Mk(ν, π-k)]. A factorized mixed profile π(s) = Qk πk(sk)
is a Nash equilibrium (NE) if πk ∈ BRk(π) for all k ∈ [K]. Define NASHCONV(π) =
Pk Mk(BRk(π), π-k) - Mk(π); roughly speaking, this measures “distance” from an NE (Lanctot
et al., 2017). In prior PSRO instances (Lanctot et al., 2017), a variant of the replicator dynamics
(Taylor and Jonker, 1978; Maynard Smith and Price, 1973), called the Projected Replicator Dynamics
(PRD), has been used as an approximate Nash meta-solver (see Appendix E for details on PRD).
α-Rank While NE exist in all finite games (Nash, 1950), their computation is intractable in general
games, and their non-uniqueness leads to an equilibrium-selection problem (Harsanyi et al., 1988;
Goldberg et al., 2013). This limits their applicability as the underlying driver of training beyond the
two-player, zero-sum regime. Recently, an alternate solution concept called α-Rank was proposed by
1A meta-solver is a method that computes, or approximates, the solution concept that is being deployed.
2
Published as a conference paper at ICLR 2020
y
Meta-solver ʌl
(c) Expand: append a new policy
to each player’s policy space us-
ing the oracle O.
(a) Complete: compute missing (b) Solve: given the updated pay-
payoff tensor M entries via game	off tensor M, calculate meta-
simulations.	strategy π via meta-solver M.
Figure 1: Overview of PSRO(M, O) algorithm phases.
Omidshafiei et al. (2019), the key associated benefits being its uniqueness and efficient computation in
many-player and general-sum games, making it a promising means for directing multiagent training.
The α-Rank distribution is computed by constructing the response graph of the game: each strategy
profile s ∈ S of the game is a node of this graph; a directed edge points from any profile s ∈ S to
σ ∈ S in the graph if (1) s and σ differ in only a single player k’s strategy and (2) Mk(σ) > Mk(s).
α-Rank constructs a random walk along this directed graph, perturbing the process by injecting a
small probability of backwards-transitions from σ to s (dependent on a parameter, α, whose value
is prescribed by the algorithm); this ensures irreducibility of the resulting Markov chain and the
existence of a unique stationary distribution, π ∈ ∆S , called the α-Rank distribution. The masses
of π are supported by the sink strongly-connected components (SSCCs) of the response graph
(Omidshafiei et al., 2019). For more details on α-Rank, see Appendix D and Rowland et al. (2019).
Oracles We define an oracle O as an abstract computational entity that, given a game, computes
policies with precise associated properties. For instance, a best-response oracle Ok (π) = BRk(π)
computes the best-response policy for any player k, given a profile π. One may also consider
approximate-best-response oracles that, e.g., use reinforcement learning to train a player k’s policy
against a fixed distribution over the other players’ policies, π-k. Oracles play akey role in population-
based training, as they compute the policies that are incrementally added to players’ growing policy
populations (McMahan et al., 2003; Lanctot et al., 2017; Balduzzi et al., 2019). The choice of oracle
O also affects the training convergence rate and final equilibrium reached (e.g., Nash or α-Rank).
Empirical Game-theoretic Analysis PSRO relies on principles from empirical game-theoretic
analysis (EGTA) (Walsh et al., 2002; Phelps et al., 2004; Wellman, 2006). Given a game (e.g., poker),
EGTA operates via construction of a higher-level ‘meta-game’, where strategies s correspond to
policies (e.g., ‘play defensively’ in poker) rather than atomic actions (e.g., ‘fold’). A meta-payoff
table M is then constructed by simulating games for all joint policy combinations, with entries
corresponding to the players’ expected utilities under these policies. Game-theoretic analysis can
then be conducted on the meta-game in a manner analogous to the lower-level game, albeit in a much
more scalable manner. As the theoretical discussion hereafter pertains to the meta-game, we use s,
M , and π to respectively refer to policies, payoffs, and distributions at the meta-level, rather than the
underlying low-level game. In our analysis, it will be important to distinguish between SSCCs of the
underlying game, and of the meta-game constructed by PSRO; we refer to the latter as meta-SSCCs.
3 Policy- S pace Response Oracles: Nash and B eyond
We first overview Policy-Space Response Oracles (PSRO) prior to presenting our findings. Given an
underlying game (e.g., Poker), PSRO first initializes the policy space S using randomly-generated
policies, then expands the players’ policy populations in three iterated phases: complete, solve, and
3
Published as a conference paper at ICLR 2020
Algorithm 1 PSRO(M, O)
1:	Initialize the players’ policy set S = Qk Sk via random policies
2:	for iteration ∈ {1, 2,…} do
3:	Update payoff tensor M for new policy profiles in S via game simulations	. (Fig. 1a)
4:	Compute the meta-strategy π using meta-solver M(M)	. (Fig. 1b)
5:	Expand the policy space for each player k ∈ [K] via Sk J Sk ∪ Ok (π)	. (Fig. 1c) * 4
Game type	M	O	Converges to α-Rank?
SP	α-Rank	BR	X (Example 1)
SP	α-Rank	PBR	✓ (SUb-SSCCJ Proposition 3)
MP	α-Rank	BR	X (Example 2)
MP	α-Rank	PBR	✓ (With novelty-bound OraCleJ Proposition 1)
SP/MP	Uniform or Nash	BR	X (Examples 4 and 5, Appendix A.2)
Table 1: Theory overview. SP and MP, resp., denote single and multi-population games. BR and PBR,
resp., denote best response and preference-based best response. ^Defined in the noted propositions.
expand (see Algorithm 1 and Fig. 1). In the complete phase, a meta-game consisting of all match-ups
of these joint policies is synthesized, with missing payoff entries in M completed through game
simulations. Next, in the solve phase, a meta-solver M computes a profile π over the player policies
(e.g., Nash, α-Rank, or uniform distributions). Finally, in the expand phase, an oracle O computes at
least one new policy s0k for each player k ∈ [K], given profile π. As other players’ policy spaces
S-k and profile π-k are fixed, this phase involves solving a single-player optimization problem.
The new policies are appended to the respective players’ policy sets, and the algorithm iterates.
We use PSRO(M, O) to refer to the PSRO instance using meta-solver M and oracle O. Notably,
PSRO-based training for two-player symmetric games can be conducted using a single population of
policies that is shared by all players (i.e., Sk is identical for all k). Thus, we henceforth refer to two-
player symmetric games as ‘single-population games’, and more generally refer to games that require
player-specific policy populations as ‘multi-population games’. Recent investigations of PSRO have
solely focused on Nash-based meta-solvers and best-response-based oracles (Lanctot et al., 2017;
Balduzzi et al., 2019), with theory focused around the two-player zero-sum case. Unfortunately, these
guarantees do not hold in games beyond this regime, making investigation of alternative meta-solvers
and oracles critical for further establishing PSRO’s generalizability.
4 Generalizing PSRO Theory
This section establishes theoretical properties of PSRO for several useful classes of general games.
We summarize our results in Table 1, giving a full exposition below.
4.1 Establishing Convergence to α-RANK
It is well-known that PSRO(Nash, BR) will eventually
return an NE in two-player zero-sum games (McMahan
et al., 2003). In more general games, where Nash faces
the issues outlined earlier, α-Rank appears a promis-
ing meta-solver candidate as it applies to many-player,
general-sum games and has no selection problem. How-
ever, open questions remain regarding convergence
guarantees of PSRO when using α-Rank, and whether
standard BR oracles suffice for ensuring these guaran-
tees. We investigate these theoretical questions, namely,
A
A
B
C
D
X
Player 2
B C DX
0	-φ	1	Φ	—ε
Φ	0	-φ2	1	—ε
-1	φ2	0	-φ	—ε
-φ	-1	φ	~0~	—ε
ε	ε	ε	ε	~0~
Table 2: Symmetric zero-sum game used to
analyze the behavior of PSRO in Example 1.
Here, 0 < ε 1 and φ 1.
whether particular variants of PSRO can converge to the α-Rank distribution for the underlying game.
A first attempt to establish convergence to α-Rank might involve running PSRO to convergence (until
the oracle returns a strategy already in the convex hull of the known strategies), using α-Rank as the
meta-solver, and a standard best response oracle. However, the following example shows that this
will not work in general for the single-population case (see Fig. A.5 for a step-by-step illustration).
4
Published as a conference paper at ICLR 2020
Example 1. Consider the symmetric zero-sum game specified in Table 2. As X is the sole sink
component of the game’s response graph (as illustrated in Fig. A.5a), the single-population α-Rank
distribution for this game puts unit mass on X. We now show that a PSRO algorithm that computes
best responses to the α-Rank distribution over the current strategy set need not recover strategy X,
by computing directly the strategy sets of the algorithm initialized with the set {C}.
1.	The initial strategy space consists only of the strategy C; the best response against C is D.
2.	The α-Rank distribution over {C, D} puts all mass on D; the best response against D is A.
3.	The α-Rank distribution over {C, D, A} puts all mass on A; the best response against A is B.
4.	The α-Rank distribution over {C, D, A, B} puts mass (1/3, 1/3, 1/6, 1/6) on (A, B, C, D) respec-
tively. For φ sufficiently large, the payoff that C receives against B dominates all others, and
since B has higher mass than C in the α-Rank distribution, the best response is C.
Thus, PSRO(α-Rank, BR) leads to the algorithm terminating with strategy set {A, B, C, D} and not
discovering strategy X in the sink strongly-connected component.
This conclusion also holds in the multi-population case, as the following counterexample shows.
Example 2. Consider the game in Table 2, treating it now as a multi-population problem. It is
readily verified that the multi-population α-Rank distributions obtained by PSRO with initial strategy
sets consisting solely of C for each player are: (i) a Dirac delta at the joint strategy (C, C), leading
to best responses of D for both players; (ii) a Dirac delta at (D, D) leading to best responses of A
for both players; (iii) a Dirac delta at (A, A), leading to best responses of B for both players; and
finally (iv) a distribution over joint strategies of the 4×4 subgame induced by strategies A, B, C, D
that leads to a best response not equal to X; thus, the full α-Rank distribution is again not recovered.
4.2	A New Response Oracle
The previous examples indicate that the use of standard best responses in PSRO may be the root
cause of the incompatibility with the α-Rank solution concept. Thus, we define the Preference-based
Best Response (PBR) oracle, which is more closely aligned with the dynamics defining α-Rank, and
which enables us to establish desired PSRO guarantees with respect to α-Rank.
Consider first the single-population case. Given an N -strategy population {s1 , . . . , sN } and corre-
sponding meta-solver distribution (πi)iN=1 ∈ ∆N, a PBR oracle is defined as any function satisfying
PBR(Pinisi) ⊆ argmaxσ Pinil [M 1(σ,si) > M2(σ,si)] ,	(1)
where the arg max returns the set of policies optimizing the objective, and the optimization is over
pure strategies in the underlying game. The intuition for the definition of PBR is that we would like
the oracle to return strategies that will receive high mass under α-Rank when added to the population;
objective (1) essentially encodes the probability flux that the vertex corresponding to σ would receive
in the random walk over the α-Rank response graph (see Section 2 or Appendix D for further details).
We demonstrate below that the use of the PBR resolves the issue highlighted in Example 1 (see
Fig. A.6 in Appendix A for an accompanying visual).
Example 3. Steps 1 to 3 of correspond exactly to those of Example 1. In step 4, the α-Rank
distribution over {C, D, A, B} puts mass (1/3, 1/3, 1/6, 1/6) on (A, B, C, D) respectively. A beats C
and D, thus its PBR score is 1/3. B beats A and D, thus its PBR score is 1/2. C beats B, its PBR
score is thus 1/3. D beats C, its PBR score is thus 1/6. Finally, X beats every other strategy, and
its PBR score is thus 1. Thus, there is only one strategy maximizing PBR, X, which is then chosen,
thereby recovering the SSCC of the game and the correct α-Rank distribution at the next timestep.
In the multi-population case, consider a population of N strategy profiles {s1, . . . , sN} and corre-
sponding meta-solver distribution (ni)iN=1. Several meta-SSCCs may exist in the multi-population
α-Rank response graph. In this case, we run the PBR oracle for each meta-SSCC separately, as
follows. Suppose there are ` meta-SSCCs, and denote by n(`) the distribution n restricted to the `th
meta-SSCC, for all 1 ≤ ` ≤ L. The PBR for player k on the `th meta-SSCC is then defined by
PBRk(Pi ni'si) ⊆ argmaxσ Pi ∏(')1 [Mk(σ,s-k) > Mk(sk,s-k)].	⑵
Thus, the PBR oracle generates one new strategy for each player for every meta-SSCC in the α-Rank
response graph; we return this full set of strategies and append to the policy space accordingly, as
5
Published as a conference paper at ICLR 2020
in Line 5 of Algorithm 1. Intuitively, this leads to a diversification of strategies introduced by the
oracle, as each new strategy need only perform well against a subset of prior strategies. This hints at
interesting links with the recently-introduced concept of rectified-Nash BR (Balduzzi et al., 2019),
which also attempts to improve diversity in PSRO, albeit only in two-player zero-sum games.
We henceforth denote PSRO(α-Rank, PBR) as α-PSRO for brevity. We next define α-CONV, an
approximate measure of convergence to α-Rank. We restrict discussion to the multi-population case
here, describing the single-population case in Appendix A.4. With the notation introduced above, we
define PBR-SCOREk(σ; π,S) = Pi p`π(')l [Mk(σ, s-k) > Mk(sk,s-k)], and
α-CONV = Pk maxσ PBR-SCOREk (σ) - maxs∈Sk PBR-SCOREk (s) ,
where maxσ is taken over the pure strategies of the underlying game. Unfortunately, in
the multi-population case, a PBR-SCORE of 0 does not necessarily imply α-partial con-
vergence. We thus introduce a further measure, PCS-Score, defined by PCS-Score
# of α-PSRO strategy profiles in the underlying game's SSCCs
# of α-PSRO strategy profiles in meta-SSCCS
which assesses the quality of the α-PSRO popula-
tion. We refer readers to Appendix C.3 for pseudocode detailing how to implement these measures in
practice.
4.3	α-PSRO: Theory, Practice, and Connections to Nash
We next study the theoretical properties of PSRO(α-Rank, PBR), which we henceforth refer to as
α-PSRO for brevity. We consider that α-PSRO has converged if no new strategy has been returned
by PBR for any player at the end of an iteration. Proofs of all results are provided in Appendix B.
Definition 1. A PSRO algorithm is said to converge α-fully (resp., α-partially) to an SSCC of the
underlying game if its strategy population contains the full SSCC (resp., a sub-cycle of the SSCC,
denoted a ‘sub-SSCC’) after convergence.
Definition 2. We also adapt PBR to be what we call novelty-bound by restricting the arg max in
Equation (1) to be over strategies not already included in the population with PBR-Score > 0.
In particular, the novelty-bound version of the PBR oracle is given by restricting the arg max appearing
in (2) to only be over strategies not already present in the population.
These definitions enable the following results for α-PSRO in the single- and multi-population cases.
Proposition 1. If at any point the population of α-PSRO contains a member of an SSCC of the game,
then α-PSRO will α-partially converge to that SSCC.
Proposition 2. If we constrain the PBR oracle used in α-PSRO to be novelty-bound, then α-PSRO
will α-fully converge to at least one SSCC of the game.
Stronger guarantees exist for two-players symmetric (i.e., single-population) games, though the
multi-population case encounters more issues, as follows.
Proposition 3. (Single-population) α-PSRO converges α-partially to the unique SSCC.
Proposition 4. (Multi-population) Without a novelty-bound oracle, there exist games for which
α-PSRO does not converge α-partially to any SSCC.
Intuitively, the lack of convergence without a novelty-bound oracle can occur due to intransitivities
in the game (i.e., cycles in the game can otherwise trap the oracle). An example demonstrating
this issue is shown in Fig. B.7, with an accompanying step-by-step walkthrough in Appendix B.4.
Specifically, SSCCs may be hidden by “intermediate” strategies that, while not receiving as high a
payoff as current population-pool members, can actually lead to well-performing strategies outside
the population. As these “intermediate” strategies are avoided, SSCCs are consequently not found.
Note also that this is related to the common problem of action/equilibrium shadowing, as detailed in
Matignon et al. (2012).
In Section 5, we further investigate convergence behavior beyond the conditions studied above. In
practice, we demonstrate that despite the negative result of Proposition 4, α-PSRO does significantly
increase the probability of converging to an SSCC, in contrast to PSRO(Nash, BR). Overall, we
have shown that for general-sum multi-player games, it is possible to give theoretical guarantees
6
Published as a conference paper at ICLR 2020
for a version of PSRO driven by α-Rank in several circumstances. By contrast, using exact NE in
PSRO is intractable in general. In prior work, this motivated the use of approximate Nash solvers
generally based on the simulation of dynamical systems or regret minimization algorithms, both of
which generally require specification of several hyperparameters (e.g., simulation iterations, window
sizes for computing time-average policies, and entropy-injection rates), and a greater computational
burden than α-Rank to carry out the simulation in the first place.
Implementing the PBR Oracle Recall from Section 3 that the BR oracle inherently solves a single-
player optimization problem, permitting use of a single-agent RL algorithm as a BR approximator,
which is useful in practice. As noted in Section 4.1, however, there exist games where the BR
and PBR objectives are seemingly incompatible, preventing the use of standard RL agents for PBR
approximation. While exact PBR is computable in small-scale (e.g., normal-form) games, we next
consider more general games classes where PBR can also be approximated using standard RL agents.
Definition 3. Objective A is ‘compatible’ with objective B if any solution to A is a solution to B.
Proposition 5. A constant-sum game is denoted as win-loss if Mk(s) ∈ {0, 1} for all k ∈ [K] and
s ∈ S. BR is compatible with PBR in win-loss games in the two-player single-population case.
Proposition 6. A symmetric two-player game is denoted monotonic if there exists a function f :
S → an and a non-decreasing function σ : R → R such that M 1(s, V) = σ(f(s) 一 f (ν)). BR is
compatible with PBR in monotonic games in the single-population case.
Finally, we next demonstrate that under certain conditions, there are strong connections between the
PBR objective defined above and the broader field of preference-based RL (Wirth et al., 2017).
Proposition 7. Consider symmetric win-loss games where outcomes between deterministic strategies
are deterministic. A preference-based RL agent (i.e., an agent aiming to maximize its probability of
winning against a distribution π of strategies {s1, . . . , sN}) optimizes exactly the PBR objective (1).
Given this insight, we believe an important subject of future work will involve the use of preference-
based RL algorithms in implementing the PBR oracle for more general classes of games. We conclude
this section with some indicative results of the relationship between α-Rank and NE.
Proposition 8. For symmetric two-player zero-sum games where off-diagonal payoffs have equal
magnitude, all NE have support contained within that of the single-population α-Rank distribution.
Proposition 9. In a symmetric two-player zero-sum game, there exists an NE with support contained
within that of the α-Rank distribution.
For more general games, the link between α-Rank and Nash equilibria will likely require a more
complex description. We leave this for future work, providing additional discussion in Appendix A.3.
5	Evaluation
We conduct evaluations on games of increasing complexity, extending beyond prior PSRO applications
that have focused on two-player zero-sum games. For experimental procedures, see Appendix C.
Oracle comparisons We evaluate here the performance of the BR and PBR oracles in games where
PBR can be exactly computed. We consider randomly generated, K-player, general-sum games with
increasing strategy space sizes, |Sk|. Figure 2 reports these results for the 4- and 5-player instances
(see Appendix C.4 for 2-3 player results). The asymmetric nature of these games, in combination with
the number of players and strategies involved, makes them inherently, and perhaps surprisingly, large
in scale. For example, the largest considered game in Fig. 2 involves 5 players with 30 strategies each,
making for a total of more than 24 million strategy profiles in total. For each combination of K and
|Sk |, we generate 1e6 random games. We conduct 10 trials per game, in each trial running the BR
and PBR oracles starting from a random strategy in the corresponding response graph, then iteratively
expanding the population space until convergence. Importantly, this implies that the starting strategy
may not even be in an SSCC.
As mentioned in Section 4.2, α-CONV and PCS-Score jointly characterize the oracle behaviors in
these multi-population settings. Figure 2a plots α-CONV for both oracles, demonstrating that PBR
outperforms BR in the sense that it captures more of the game SSCCs. Figures 2b and 2c, respectively,
7
Published as a conference paper at ICLR 2020
O: BR
O: PBR
20
∣sil
(a) α-CONV
98s,sud 3」8s，sud
(b) PCS-Score for O = BR
Figure 2: OraCle Comparisons for randomly-generated games with varying player strategy spaCe sizes
|Sk|. Top and bottom rows, respeCtively, Correspond to 4- and 5-player games.
1 O
>UO。LlS(DN
IO1	IO2
Total Pool Length
(a) Kuhn poker.
(c) PCS-SCORE for O = PBR
(b) LeduC poker.
Figure 3: Results for 2-player poker domains.

98s,sud 3」8s，sud
plot the PCS-Score for BR and PBR over all game instanCes. The PCS-Score here is typiCally
either (a) greater than 95%, or (b) less than 5%, and otherwise rarely between 5% to 95%. For all
values of |Sk|, PBR Consistently disCovers a larger proportion of the α-Rank support in Contrast to
BR, serving as useful validation of the theoretiCal results of SeCtion 4.3.
Meta-solver comparisons We Consider next the standard benChmarks of Kuhn and LeduC poker
(Kuhn, 1950; Southey et al., 2005; LanCtot et al., 2019). We detail these domains in Appendix C.2,
noting here that both are K-player, although LeduC is signifiCantly more Complex than Kuhn. We first
Consider two-player instanCes of these poker domains, permitting use of an exaCt Nash meta-solver.
Figure 3 Compares the NashConv of PSRO(M, BR) for various meta-solver M ChoiCes. Note that
the x axis of Figure 3 and Figure 4 is the Total Pool Length (The sum of the length of eaCh player’s
pool in PSRO) instead of the number of iterations of PSRO, sinCe ReCtified solvers Can add more than
one poliCy to the pool at eaCh PSRO iteration (Possibly doubling pool size at every PSRO iteration).
It is therefore more pertinent to Compare exploitabilities at the same pool sizes rather than at the same
number of PSRO iterations.
In Kuhn poker (Fig. 3a), the α-Rank, Nash, and the ProjeCted RepliCator DynamiCs (PRD) meta-
solvers Converge essentially at the same rate towards zero NashConv, in Contrast to the slower
rate of the Uniform meta-solver, the very slow rate of the ReCtified PRD solver, and the seemingly
Constant NashConv of the ReCtified Nash solver. We provide in Appendix C.5 a walkthrough of
the first steps of the ReCtified Nash results to more preCisely determine the Cause of its plateauing
NashConv. A high level explanation thereof is that it is Caused by ReCtified Nash CyCling through
the same poliCies, effeCtively not disCovering new poliCies. We posit these CharaCteristiCs, antipodal
to the motivation behind ReCtified Nash, Come from the important faCt that ReCtified Nash was
designed to work only in symmetriC games, and is therefore not inherently well-suited for the Kuhn
and LeduC poker domains investigated here, as they are both asymmetriC games. We did not add the
ReCtified PRD results the other, greater-than-2 players experiments, as its performanCe remained
non-Competitive.
As noted in LanCtot et al. (2017), PSRO(Uniform, BR) Corresponds to FiCtitious Play (Brown, 1951)
and is thus guaranteed to find an NE in suCh instanCes of two-player zero-sum games. Its slower
ConvergenCe rate is explained by the assignment of uniform mass aCross all poliCies s ∈ S, implying
that PSRO essentially wastes resourCes on training the oraCle to beat even poor-performing strategies.
While α-Rank does not seek to find an approximation of Nash, it nonetheless reduCes the NashConv
yielding Competitive results in Comparison to an exaCt-Nash solver in these instanCes. Notably, the
similar performanCe of α-Rank and Nash serves as empiriCal evidenCe that α-Rank Can be applied
8
Published as a conference paper at ICLR 2020
(b) 4-player Kuhn.
(C) 5-player Kuhn.
—Oi-Rank
—PRD
—Uniform
Figure 4: Results for poker domains with more than 2 players.
Competitively even in the two-player zero-sum setting, while also showing great promise to be
deployed in broader settings where Nash is no longer traCtable.
We next Consider signifiCantly larger variants of Kuhn and LeduC Poker involving more than two
players, extending beyond the reaCh of prior PSRO results (LanCtot et al., 2017). Figure 4 visualizes
the NashConv of PSRO using the various meta-solvers (with the exCeption of an exaCt Nash
solver, due to its intraCtability in these instanCes). In all instanCes of Kuhn Poker, α-Rank and
PRD show Competitive ConvergenCe rates. In 3-player LeduC poker, however, α-Rank shows fastest
ConvergenCe, with Uniform following throughout most of training and PRD eventually reaChing a
similar NashConv. Several key insights Can be made here. First, Computation of an approximate
Nash via PRD involves simulation of the assoCiated repliCator dynamiCs, whiCh Can be ChaotiC
(Palaiopanos et al., 2017) even in two-player two-strategy games, making it Challenging to determine
when PRD has suitably Converged. SeCond, the addition of the projeCtion step in PRD severs its
ConneCtion with NE; the theoretiCal properties of PRD were left open in LanCtot et al. (2017), leaving
it without any guarantees. These limitations go beyond theoretiCal, manifesting in praCtiCe, e.g., in
Fig. 4d, where PRD is outperformed by even the uniform meta-solver for many iterations. Given
these issues, we take a first (and informal) step towards analyzing PRD in Appendix E. For α-Rank,
by Contrast, we both establish theoretiCal properties in SeCtion 4, and faCe no simulation-related
Challenges as its Computation involves solving of a linear system, even in the general-sum many-player
Case (Omidshafiei et al., 2019), thus establishing it as a favorable and general PSRO meta-solver.
MuJoCo Soccer While the key objeCtive of this paper is to take a first step in establishing a
theoretiCally-grounded framework for PSRO-based training of agents in many-player settings, an
exCiting question regards the behaviors of the proposed α-Rank-based PSRO algorithm in Complex
domains where funCtion-approximation-based poliCies need to be relied upon. In Appendix F, we
take a first step towards ConduCting this investigation in the MuJoCo soCCer domain introduCed in
Liu et al. (2019). We remark that these results, albeit interesting, are primarily intended to lay the
foundation for use of α-Rank as a meta-solver in Complex many agent domains where RL agents
serve as useful oraCles, warranting additional researCh and analysis to make ConClusive insights.
6	Related Work
We disCuss the most Closely related work along two axes. We start with PSRO-based researCh
and some multiagent deep RL work that foCuses on training of networks in various multiagent
settings. Then we Continue with related work that uses evolutionary dynamiCs (α-Rank and repliCator
dynamiCs) as a solution ConCept to examine underlying behavior of multiagent interaCtions using
meta-games.
PoliCy-spaCe response oraCles (LanCtot et al., 2017) unify many existing approaChes to multiagent
learning. Notable examples inClude fiCtitious play (Brown, 1951; Robinson, 1951), independent
reinforCement learning (Matignon et al., 2012) and the double oraCle algorithm (MCMahan et al.,
2003). PSRO also relies, fundamentally, on prinCiples from empiriCal game-theoretiC analysis
(EGTA) (Walsh et al., 2002; Phelps et al., 2004; Tuyls et al., 2018; Wellman, 2006; VorobeyChik,
2010; WiedenbeCk and Wellman, 2012; WiedenbeCk et al., 2014). The related Parallel Nash Memory
(PNM) algorithm (Oliehoek et al., 2006), whiCh Can also be seen as a generalization of the double
oraCle algorithm, inCrementally grows the spaCe of strategies, though using a searCh heuristiC rather
than exaCt best responses. PNMs have been suCCessfully applied to games settings utilizing funC-
tion approximation, notably to address exploitability issues when training Generative Adversarial
Networks (GANs) (Oliehoek et al., 2019).
9
Published as a conference paper at ICLR 2020
PSRO allows the multiagent learning problem to be decomposed into a sequence of single-agent
learning problems. A wide variety of other approaches that deal with the multiagent learning problem
without this reduction are also available, such as Multiagent Deep Deterministic Policy Gradients
(MADDPG) (Lowe et al., 2017), Counterfactual Multiagent Policy Gradients (COMA) (Foerster et al.,
2018), Differentiable Inter-Agent Learning (DIAL) (Foerster et al., 2016), Hysteretic Deep Recurrent
Q-learning (Omidshafiei et al., 2017), and lenient Multiagent Deep Reinforcement Learning (Palmer
et al., 2018). Several notable contributions have also been made in addressing multiagent learning
challenges in continuous-control settings, most recently including the approaches of Iqbal and Sha
(2019); Gupta et al. (2017); Wei et al. (2018); Peng et al. (2017); Khadka et al. (2019). We refer
interested readers to the following survey of recent deep multiagent RL approaches Hernandez-Leal
et al. (2019).
α-Rank was introduced by Omidshafiei et al. (2019) as a scalable dynamic alternative to Nash
equilibria that can be applied in general-sum, many-player games and is capable of capturing the
underlying multiagent evolutionary dynamics. Concepts from evolutionary dynamics have long been
used in analysis of multiagent interactions from a meta-game standpoint (Walsh et al., 2002; Tuyls
and Parsons, 2007; Hennes et al., 2013; Bloembergen et al., 2015; Tuyls et al., 2018).
7	Discussion
This paper studied variants of PSRO using α-Rank as a meta-solver, which were shown to be
competitive with Nash-based PSRO in zero-sum games, and scale effortlessly to general-sum many-
player games, in contrast to Nash-based PSRO. We believe there are many interesting directions
for future work, including how uncertainty in the meta-solver distribution, informed by recent
developments in dealing with incomplete information in games (Reeves and Wellman, 2004; Walsh
et al., 2003; Rowland et al., 2019), can be used to inform the selection of new strategies to be added
to populations. In summary, we strongly believe that the theoretical and empirical results established
in this paper will play a key role in scaling up multiagent training in general settings.
Acknolwedgements
The authors gratefully thank Bart De Vylder for providing helpful feedback on the paper draft.
References
David Balduzzi, Marta Garnelo, Yoram Bachrach, Wojciech Czarnecki, Julien Perolat, Max Jader-
berg, and Thore Graepel. Open-ended learning in symmetric zero-sum games. In International
Conference on Machine Learning (ICML), 2019.
Daan Bloembergen, Karl Tuyls, Daniel Hennes, and Michael Kaisers. Evolutionary dynamics of
multi-agent learning: A survey. J. Artif IntelL Res. (JAIR), 53:659-697, 2015.
George W Brown. Iterative solution of games by fictitious play. Activity Analysis of Production and
Allocation, 13(1):374-376, 1951.
Ross Cressman and Yi Tao. The replicator equation and other game dynamics. Proceedings of the
National Academy of Sciences USA, 111:10810-10817, 2014.
Constantinos Daskalakis. On the complexity of approximating a Nash equilibrium. ACM Transactions
on Algorithms, 9(3):23, 2013.
Constantinos Daskalakis, Paul W Goldberg, and Christos H Papadimitriou. The complexity of
computing a Nash equilibrium. SIAM Journal on Computing, 39(1):195-259, 2009.
Arpad E Elo. The rating of chessplayers, past and present. Arco Pub., 1978.
Jakob Foerster, Ioannis Alexandros Assael, Nando de Freitas, and Shimon Whiteson. Learning to
communicate with deep multi-agent reinforcement learning. In Advances in Neural Information
Processing Systems (NIPS), 2016.
10
Published as a conference paper at ICLR 2020
Jakob N Foerster, Gregory Farquhar, Triantafyllos Afouras, Nantas Nardelli, and Shimon Whiteson.
Counterfactual multi-agent policy gradients. In AAAI Conference on Artificial Intelligence, 2018.
Paul W Goldberg, Christos H Papadimitriou, and Rahul Savani. The complexity of the homotopy
method, equilibrium selection, and Lemke-Howson solutions. ACM Transactions on Economics
and Computation, 1(2):9, 2013.
Jayesh K Gupta, Maxim Egorov, and Mykel Kochenderfer. Cooperative multi-agent control using
deep reinforcement learning. In International Conference on Autonomous Agents and Multiagent
Systems, pages 66-83. Springer, 2017.
John C Harsanyi, Reinhard Selten, et al. A general theory of equilibrium selection in games. MIT
Press Books, 1, 1988.
Daniel Hennes, Daniel Claes, and Karl Tuyls. Evolutionary advantage of reciprocity in collision
avoidance. In AAMAS Workshop on Autonomous Robots and Multirobot Systems (ARMS), 2013.
Pablo Hernandez-Leal, Bilal Kartal, and Matthew E Taylor. A survey and critique of multiagent deep
reinforcement learning. Autonomous Agents and Multi-Agent Systems, pages 1-48, 2019.
Shariq Iqbal and Fei Sha. Actor-attention-critic for multi-agent reinforcement learning. In Interna-
tional Conference on Machine Learning, pages 2961-2970, 2019.
Max Jaderberg, Wojciech M. Czarnecki, Iain Dunning, Luke Marris, Guy Lever, Antonio Garcia
Castaneda, Charles Beattie, Neil C. Rabinowitz, Ari S. Morcos, Avraham Ruderman, Nico-
las Sonnerat, Tim Green, Louise Deason, Joel Z. Leibo, David Silver, Demis Hassabis, Koray
Kavukcuoglu, and Thore Graepel. Human-level performance in 3D multiplayer games with
population-based reinforcement learning. Science, 364(6443):859-865, 2019.
Shauharda Khadka, Somdeb Majumdar, and Kagan Tumer. Evolutionary reinforcement learning for
sample-efficient multiagent coordination. arXiv preprint arXiv:1906.07315, 2019.
Harold W Kuhn. A simplified two-person poker. Contributions to the Theory of Games, 1:97-103,
1950.
Marc Lanctot, Vinicius Zambaldi, Audrunas Gruslys, Angeliki Lazaridou, Karl Tuyls, Julien Perolat,
David Silver, and Thore Graepel. A unified game-theoretic approach to multiagent reinforcement
learning. In Neural Information Processing Systems (NIPS), 2017.
Marc Lanctot, Edward Lockhart, Jean-Baptiste Lespiau, Vinicius Zambaldi, Satyaki Upadhyay,
Julien Perolat, Sriram Srinivasan, Finbarr Timbers, Karl Tuyls, Shayegan Omidshafiei, Daniel
Hennes, Dustin Morrill, Paul Muller, Timo Ewalds, Ryan Faulkner, Janos Kramar, Bart De Vylder,
Brennan Saeta, James Bradbury, David Ding, Sebastian Borgeaud, Matthew Lai, Julian Schrit-
twieser, Thomas Anthony, Edward Hughes, Ivo Danihelka, and Jonah Ryan-Davis. OpenSpiel: A
framework for reinforcement learning in games. arXiv preprint arXiv:1908.09453, 2019.
Siqi Liu, Guy Lever, Josh Merel, Saran Tunyasuvunakool, Nicolas Heess, and Thore Graepel. Emer-
gent coordination through competition. In International Conference on Learning Representations
(ICLR), 2019.
Ryan Lowe, Yi Wu, Aviv Tamar, Jean Harb, Pieter Abbeel, and Igor Mordatch. Multi-agent actor-critic
for mixed cooperative-competitive environments. In Advances in Neural Information Processing
Systems (NIPS), 2017.
Laetitia Matignon, Guillaume J. Laurent, and Nadine Le Fort-Piat. Independent reinforcement
learners in cooperative Markov games: A survey regarding coordination problems. The Knowledge
Engineering Review, 27(1):1-31, 2012.
J. Maynard Smith and G. R. Price. The logic of animal conflicts. Nature, 246:15-18, 1973.
H. Brendan McMahan, Geoffrey J. Gordon, and Avrim Blum. Planning in the presence of cost
functions controlled by an adversary. In International Conference on Machine Learning (ICML),
2003.
11
Published as a conference paper at ICLR 2020
Anna Nagurney and Ding Zhang. Projected dynamical systems and variational inequalities with
applications, volume 2. Springer Science & Business Media, 2012.
John F Nash. Equilibrium points in n-person games. Proceedings of the National Academy of
Sciences, 36(1):48-49,1950.
Frans A. Oliehoek, Edwin D. de Jong, and Nikos Vlassis. The parallel Nash memory for asymmetric
games. In Proceedings of the Genetic and Evolutionary Computation Conference (GECCO), pages
337-344, July 2006. doi: 10.1145/1143997.1144059. URL http://www.cs.bham.ac.uk/
~wbl∕biblio∕gecco2006∕docs∕p337.pdf. (best paper nominee in coevolution track).
Frans A. Oliehoek, Rahul Savani, JoSe Gallego, EliSe van der Pol, and Roderich Groβ. Beyond
local nash equilibria for adversarial networks. In Martin Atzmueller and Wouter Duivesteijn,
editors, Artificial Intelligence, pages 73-89, Cham, 2019. Springer International Publishing. ISBN
978-3-030-31978-6.
Shayegan Omidshafiei, Jason Pazis, Christopher Amato, Jonathan P. How, and John Vian. Deep decen-
tralized multi-task multi-agent reinforcement learning under partial observability. In International
Conference on Machine Learning (ICML), 2017.
Shayegan Omidshafiei, Christos Papadimitriou, Georgios Piliouras, Karl Tuyls, Mark Rowland,
Jean-Baptiste Lespiau, Wojciech M Czarnecki, Marc Lanctot, Julien Perolat, and Remi Munos.
α-Rank: Multi-agent evaluation by evolution. Scientific Reports, 9, 2019.
Gerasimos Palaiopanos, Ioannis Panageas, and Georgios Piliouras. Multiplicative weights update
with constant step-size in congestion games: Convergence, limit cycles and chaos. In Neural
Information Processing Systems (NIPS), 2017.
Gregory Palmer, Karl Tuyls, Daan Bloembergen, and Rahul Savani. Lenient multi-agent deep
reinforcement learning. In Autonomous Agents and Multiagent Systems (AAMAS), 2018.
Peng Peng, Ying Wen, Yaodong Yang, Quan Yuan, Zhenkun Tang, Haitao Long, and Jun Wang.
Multiagent bidirectionally-coordinated nets: Emergence of human-level coordination in learning
to play starcraft combat games. arXiv preprint arXiv:1703.10069, 2017.
Steve Phelps, Simon Parsons, and Peter McBurney. An evolutionary game-theoretic comparison of
two double-auction market designs. In AAMAS Workshop on Agent-Mediated Electronic Commerce,
2004.
Daniel M Reeves and Michael P Wellman. Computing best-response strategies in infinite games of
incomplete information. In Uncertainty in Artificial Intelligence (UAI), 2004.
Julia Robinson. An iterative method of solving a game. Annals of Mathematics, 54(2):296-301,
1951.
Mark Rowland, Shayegan Omidshafiei, Karl Tuyls, Julien Perolat, Michal Valko, Georgios Piliouras,
and Remi Munos. Multiagent evaluation under incomplete information. To appear in Neural
Information Processing Systems (NeurIPS), 2019.
Peter Schuster and Karl Sigmund. Replicator dynamics. Journal of Theoretical Biology, 100(3):
533-538, 1983.
David Silver, Thomas Hubert, Julian Schrittwieser, Ioannis Antonoglou, Matthew Lai, Arthur
Guez, Marc Lanctot, Laurent Sifre, Dharshan Kumaran, Thore Graepel, Timothy Lillicrap, Karen
Simonyan, and Demis Hassabis. A general reinforcement learning algorithm that masters chess,
shogi, and Go through self-play. Science, 362(6419):1140-1144, 2018.
Finnegan Southey, Michael Bowling, Bryce Larson, Carmelo Piccione, Neil Burch, Darse Billings,
and Chris Rayner. Bayes’ bluff: Opponent modelling in poker. In Uncertainty in Artificial
Intelligence (UAI), 2005.
Peter D Taylor and Leo B Jonker. Evolutionary stable strategies and game dynamics. Mathematical
Biosciences, 40(1-2):145-156, 1978.
12
Published as a conference paper at ICLR 2020
Karl Tuyls and Simon Parsons. What evolutionary game theory tells us about multiagent learning.
Artif Intell.,171(7):406-416, 2007.
Karl Tuyls, Julien Perolat, Marc Lanctot, Joel Z Leibo, and Thore Graepel. A generalised method for
empirical game theoretic analysis. In Autonomous Agents and Multiagent Systems (AAMAS), 2018.
Yevgeniy Vorobeychik. Probabilistic analysis of simulation-based games. ACM Trans. Model.
ComPut SimuL, 20(3):16:1-16:25, October 2010.
William E Walsh, Rajarshi Das, Gerald Tesauro, and Jeffrey O Kephart. Analyzing complex strategic
interactions in multi-agent systems. In AAAI WorkshoP on Game-Theoretic and Decision-Theoretic
Agents, 2002.
William E Walsh, David C Parkes, and Rajarshi Das. Choosing samples to compute heuristic-strategy
Nash equilibrium. In International WorkshoP on Agent-Mediated Electronic Commerce, pages
109-123. Springer, 2003.
Ermo Wei, Drew Wicke, David Freelan, and Sean Luke. Multiagent soft q-learning. In 2018 AAAI
SPring SymPosium Series, 2018.
Michael P Wellman. Methods for empirical game-theoretic analysis. In AAAI Conference on Artificial
Intelligence, 2006.
Bryce Wiedenbeck and Michael P. Wellman. Scaling simulation-based game analysis through
deviation-preserving reduction. In Autonomous Agents and Multiagent Systems (AAMAS), 2012.
Bryce Wiedenbeck, Ben-Alexander Cassell, and Michael P. Wellman. Bootstrap statistics for
empirical games. In Autonomous Agents and MultiAgent Systems (AAMAS), pages 597-604, 2014.
Christian Wirth, Riad Akrour, Gerhard Neumann, and Johannes Furnkranz. A survey of Preference-
based reinforcement learning methods. The Journal of Machine Learning Research, 18(1):4945-
4990, 2017.
13
Published as a conference paper at ICLR 2020
Appendices
14
Published as a conference paper at ICLR 2020
A Examples
A.1 Further Exposition of Examples 1 and 2
Player 2
	A	B	C	D	X
A	~0~	-φ	1	Φ	一ε
B	φ	0	-φ2	1	—ε
Player 1 C	-1	Φ2	0	-φ	—ε
D	-φ	-1	Φ	0	—ε
X	ε	ε	ε	ε	0
(a) Overview. Full payoff table on left, full response graph on right, with values over directed edges indicating
the payoff gained by deviating from one strategy to another.
	Player 2					
	A	B	C	D	X	
A	0	一φ	1	Φ	—ε	
B	Φ	0	-≠2	1	—ε	
Player 1 C	—1	Φ2	O	一φ	—ε	
D	一φ	—1	0	0	—ε	• j一 C
X	ε	ε	ε	ε	0	
(b) Consider an initial strategy space consisting only of the strategy C; the best response against C is D.
(c)	The α-Rank distribution over {C, D} puts all mass on D; the best response against D is A.
	Player 2				
	A	B	C	D	X
A	O	一φ	1	Φ	—ε
B	Φ	0	—φ2	1	—ε
Player 1 C	-1	Φ2	0	一φ	—ε
D	一0	—1	φ	0	—ε
X	、£」	ε	ε	ε	0
(d)	The α-Rank distribution over {C, D, A} puts all mass on A; the best response against A is B.
Player 2
	A	B	C	D	X
A	0	一0	-1-	Φ	—ε
B	Φ	~~O~	一φ2	ɪɪ	—ε
Player 1 C	—1	ɪ	0	一φ	—ε
D	一φ	-1	Φ	~0~	—ε
X	ε		ε	ε	0
(e)	The α-Rank distribution over {C, D, A, B} puts mass (1/3, 1/3, 1/6, 1/6) on (A, B, C, D) respectively. For
φ sufficiently large, the payoff that C receives against B dominates all others, and since B has higher mass than
C in the α-Rank distribution, the best response is C.
Figure A.5: Example 1 with oracle O = BR. In each step above, the α-Rank support is highlighted
by the light green box of the payoff table, and the BR strategy against it in bold, dark green.
15
Published as a conference paper at ICLR 2020
Player 1
(e) The α-Rank distribution over {C, D, A, B} puts mass (1/3, 1/3, 1/6, 1/6) on (A, B, C, D) respectively. A
beats C and D, and therefore its PBR score is 1/3. B beats A and D, therefore its PBR score is 1/2. C beats B,
its PBR score is therefore 1/3. D beats C, its PBR score is therefore 1/6. Finally, X beats every other strategy,
and its PBR score is thus 1. There is only one strategy maximizing PBR, X, which is then chosen, and the SSCC
of the game, recovered.
Figure A.6: Example 1 with oracle O = PBR. Steps (a) to (d) are not shown as they are identical to
their analogs in Fig. A.5.
A.2 Example behavior of PSRO(Nash, BR)
A first attempt to establish convergence to α-Rank might involve running PSRO to convergence (until
the oracle returns a strategy already in the convex hull of the known strategies), and then running
α-Rank on the resulting meta-game. However, the following provides a counterexample to this
approach when using either PSRO(Nash, BR) or PSRO(Uniform, BR).
Player 2
ABX
A
Player 1 B
X
0	1	ε
u~	ɪ	—ε
—ε	ε	~0~
(a) Example 4
Player 1
Table	3: Illustrative games used to analyze the behavior of PSRO in Example 4. Here, 0 < ε 1.
The first game is symmetric, whilst the second is zero-sum. Both tables specify the payoff to Player 1
under each strategy profile.
Example 4.	Consider the two-player symmetric game specified in Table 3a. The sink strongly-
connected component of the single-population response graph (and hence the α-Rank distribution)
contains all three strategies, but all NE are supported on {A, B} only, and the best response to a
strategy supported on {A, B} is another strategy supported on {A, B}. Thus, the single-population
variant of PSRO, using M ∈ {Nash, Uniform} with initial strategies contained in {A, B} will
terminate before discovering strategy X; the full α-Rank distribution will thus not be recovered.
Example 5.	Consider the two-player zero-sum game specified in Table 3b. All strategy profiles recieve
non-zero probability in the multi-population α-Rank distribution. However, the Nash equilibrium
over the game restricted to actions A, B for each player has a unique Nash equilibrium of (1/2, 1/2).
Player 1’s best response to this Nash is to play some mixture of A and B, and therefore strategy X is
not recovered by PSRO(Nash, BR) in this case, and so the full α-Rank distribution will thus not be
recovered.
A.3 Counterexamples: α-RANK vs. Nash S upport
The Game of Chicken The Game of Chicken provides an example where the support of α-Rank-
in the multipopulation case - does not include the full support of Nash Equilibria.
This game has three Nash equilibria: Two pure, (D,C) and (C,D), and one mixed, where the population
plays Dare with probability 3. Nevertheless, α-rank only puts weight on (C,D) and (D,C), effectively
not putting weight on the full mixed-nash support.
16
Published as a conference paper at ICLR 2020
Player 1
Player 2
DC
D	10	172T
C		^WT
Table 4: Game of Chicken payoff table
Prisoner’s Dilemma The Prisoner’s Dilemma provides a counterexample that the support of α-
Rank- in the multi-population case - does not include the full support of correlated equilibria.
Player 1
D
C
Player 2
DC
,(0,0)、	(3,-1)
I (-1,3)	(2, 2)
Table 5: Prisoner’s Dilemma payoff table
This game has correlated equilibria that include (C,D), (D,C) and (C,C) in their support; nevertheless,
α-Rank only puts weight on (D,D), effectively being fully disjoint from the support of the correlated
equilibria.
A.4 Single-population α-CONV
In analogy with the multi-population definition in Section 4.2, we define a single-population ver-
sion of α-CONV. We start by defining the single-population version of PBR-Score, given by
PBR-SCORE(σ;π,S) = Pi ∏il [M 1(σ,Si) > M2(σi, Si)]. The single-population a-CθNV is
then defined as
α-CONV = max PBR-Score(σ) - max PBR-Score(s) ,
σ	s∈S
where maxσ is taken over the pure strategies of the underlying game.
17
Published as a conference paper at ICLR 2020
B	Proofs
B.1	Proof of Proposition 1
Proposition 1. If at any point the population of α-PSRO contains a member of an SSCC of the game,
then α-PSRO will α-partially converge to that SSCC.
Proof. Suppose that a member of one of the underlying game’s SSCCs appears in the α-PSRO
population. This member will induce its own meta-SSCC in the meta-game’s response graph. At least
one of the members of the underlying game’s corresponding SSCC will thus always have positive
probability under the α-Rank distribution for the meta-game, and the PBR oracle for this meta-SSCC
will always return a member of the underlying game’s SSCC. If the PBR oracle returns a member of
the underlying SSCC already in the PSRO population, we claim that the corresponding meta-SSCC
already contains a cycle of the underlying SSCC. To see this, note that if the meta-SSCC does not
contain a cycle, it must be a singleton. Either this singleton is equal to the full SSCC of the underlying
game (in which we have α-fully converged), or it is not, in which case the PBR oracle must return a
new strategy from the underlying SSCC, contradicting our assumption that it has terminated. □
B.2	Proof of Proposition 2
Proposition 2. If we constrain the PBR oracle used in α-PSRO to be novelty-bound, then α-PSRO
will α-fully converge to at least one SSCC of the game.
Proof. Suppose that α-PSRO has converged, and consider a meta-SSCC. Since α-PSRO has con-
verged, it follows that each strategy profile of the meta-SSCC is an element of an SSCC of the
underlying game. Any strategy profile in this SSCC which is not in the meta-SSCC will obtain a
positive value for the PBR objective, and since α-PSRO has converged, there can be no such strategy
profile. Thus, the meta-SSCC contains every strategy profile contained within the corresponding
SSCC of the underlying game, and therefore conclude that α-PSRO α-fully converges to an SSCC of
the underlying game.	□
B.3	Proof of Proposition 3
Proposition 3. (Single-population) α-PSRO converges α-partially to the unique SSCC.
Proof. The uniqueness of the SSCC follows from the fact that in the single-population case, the
response graph is fully-connected. Suppose at termination of α-PSRO, the α-PSRO population
contains no strategy within the SSCC, and let s be a strategy in the SSCC. We claim that s attains a
higher value for the objective defining the PBR oracle than any strategy in the α-PSRO population,
which contradicts the fact that α-PSRO has terminated. To complete this argument, we note that
by virtue of s being in the SSCC, we have M1(s, s0) > M1(s0, s) for all s0 outside the SSCC, and
in particular for all s0 ∈ S, thus the PBR objective for s is 1. In contrast, for any si ∈ S, the PBR
objective for si is upper-bounded by 1 -πi. Ifπi > 0, then this shows si is not selected by the oracle,
since the objective value is lower than that of s. If πi = 0, then the objective value for si is 0, and so
an SSCC member will always have a maximal PBR score of 1 against a population not composed of
any SSCC member, and all members of that population have < 1 PBR scores. Consequently, single-
population α-PSRO cannot terminate before it has encountered an SSCC member. By Proposition 1,
the proposition is therefore proven.	□
B.4	Proof of Proposition 4
Proposition 4. (Multi-population) Without a novelty-bound oracle, there exist games for which
α-PSRO does not converge α-partially to any SSCC.
Proof. We exhibit a specific counterexample to the claim. Consider the three-player, three-strategy
game with response graph illustrated in Fig. B.7a; note that we do not enumerate all strategy profiles
not appearing in the SSCC for space and clarity reasons. The sequence of updates undertaken by
α-PSRO in this game is illustrated in Figs. B.7b to B.7f; whilst the singleton strategy profile (3, 2, 3)
18
Published as a conference paper at ICLR 2020
forms the unique SSCC for this game, α-PSRO terminates before reaching it, which concludes the
proof. The steps taken by the algorithm are described below; again, we do not enumerate all strategy
profiles not appearing in the SSCC for space and clarity reasons.
1.	Begin with strategies [[2], [1], [1]] in the α-PSRO population (Player 1 only has access to strategy
2,	Players 2 and 3 only have access to strategy 1)
2.	The PBR to (2,1,1) for player 2 is 2, and no other player has a PBR on this round. We add
2 to the strategy space of player 2, which changes the space of available joint strategies to
[(2, 1, 1), (2, 2, 1)].
3.	α-Rank puts all its mass on (2,2,1). The PBR to (2,2,1) for player 3 is 2, and no other player has a
PBR on this round. We add strategy 2 to player 3’s strategy space, which changes the space of
available joint strategies to [(2, 1, 1), (2, 2, 1), (2, 2, 2)].
4.	α-Rank puts all its mass on (2,2,2). The PBR to (2,2,2) for player 1 is 1, and no other player has a
PBR on this round. We add strategy 1 to player 1’s strategy space, which changes the space of
available joint strategies to [(1,1,1),(1,1,2),(1,2,1),(1,2,2),(2,1,1),(2,2,1),(2,2,2)].
5.	Define σ as the α-Rank probabilities of the meta-game. Player 1 playing strategy 2 has a PBR
score of σ((1, 1, 1)) + σ((1, 2, 1)), and the same player playing strategy 3 has a PBR score of
σ((1, 2, 1)), which is lower than the PBR Score of playing strategy 2. No other player has a valid
PBR for this round, and therefore, α-PSRO terminates.
□
In the above example, pictured in Fig. B.7, a relatively weak joint strategy (Strategy (3,2,1)) bars
agents from finding the optimal joint strategy of the game (Strategy (3,2,3)) : getting to this joint
strategy requires coordinated changes between agents, and is therefore closely related to the common
problem of Action/Equilibrium Shadowing mentioned in (Matignon et al., 2012).
B.5	Proof of Proposition 5
Proposition 5. A constant-sum game is denoted as win-loss if Mk(s) ∈ {0, 1} for all k ∈ [K] and
s ∈ S. BR is compatible with PBR in win-loss games in the two-player single-population case.
Proof. We manipulate the best-response objective as follows:
M1(ν, π) = X π(s)M1(ν, s)
s∈S
=^Xπ(s)l[M 1(ν, S) > M2(ν, s)].
s∈S
Noting that the final line is the single-population PBR objective, We are done.	□
B.6	Proof of Proposition 6
Proposition 6. A symmetric two-player game is denoted monotonic if there exists a function f :
S → R and a non-decreasing function σ : R → R such that M 1(s, V) = σ(f(s) 一 f (ν)). BR is
compatible with PBR in monotonic games in the single-population case.
Proof. ReWriting the objectives given that the game is monotonic, We have that the value-based
objective becomes
KK
X πkM1 (s, sk) = X πkσ(f(s) 一 f(sk)) .
k=1	k=1
Given the fact that the only condition We have on σ is its non-decreasing character, this objective
does not reduce to maximizing f(s) in the general case.
The objective for PBR is
KK
XΠk 1[M 1(s, Sk) > M2(s, Sk)] = X∏kl[σ(f (s) — f (Sk)) > σ(f(sk) 一 f (s))]
k=1	k=1
19
Published as a conference paper at ICLR 2020
3,2,3
20,20,20^^
10,10,1
3,3,3
1,1,5
(a)	Full response graph.
(b)	α-PSRO Step 1.
(c) α-PSRO Step 2.
(d) α-PSRO Step 3.
(e) α-PSRO Step 4.
(f) α-PSRO Step 5.
Figure B.7: The three-player, three-strategy game serving as a counterexample in the proof of
Proposition 4. Strategy profiles are illustrated by gray circles, with payoffs listed beneath. All strategy
profiles not pictured are assumed to be dominated, and are therefore irrelevant in determining whether
α-PSRO reaches an SSCC for this game.
20
Published as a conference paper at ICLR 2020
Since σ is non-decreasing,
σ(f(s) - f(sk)) > σ(f(sk) - f(s)) ⇒ f(s)>f(sk)
and conversely,
f(s)>f(sk) ⇒ σ(f(s) - f(sk)) ≥ σ(f(sk) - f(s))
Without loss of generality, we reorder the strategies such that if i < k, f(si) ≤ f(sk).
Let sv maximize the value objective. Therefore, by monotonicity, sv maximizes σ(f (s) - f (sK)).
Three possibilities then ensue.
If there exists s such that
σ(f(s) - f(sK)) >σ(f(sK)-f(s))
then
σ(f(sv) - f(sK)) > σ(f(sK) - f(sv))
since sv maximizes σ(f(s) - f(sK)) and σ is non-decreasing. Consequently sv maximizes the PBR
objective. Indeed, let us remark that for all k ≤ K , we have that
σ(f(sv) - f(sk)) > σ(f(sk) - f(sv))
since
σ(f(sv) - f(sk)) ≥ σ(f(sv) - f(sK)) > σ(f(sK) - f(sv)) ≥ σ(f(sk) - f(sv))
Else, if there does not exist any policy s such that σ(f (s) - f(sK)) > σ(f(sK) - f (s)), that is, for
all s,
σ(f(s) - f(sK)) ≤σ(f(sK)-f(s))
Since sK is a possible solution to the value objective,
σ(f(sv) - f(sK)) = σ(f(sK) - f(sv))
Let n be the integer such that
sn = argmax{f(sk), sk ∈ Population | ∃s s.t. σ(f(s) - f(sk)) > σ(f (sk) - f (s))}
If sn exists, then we have that for all si such that f (si) > f (sn),
σ(f(sv) - f(si)) = σ(f(si) - f(sv))
The PBR objective is
K
X∏kl[σ(f(s) - f(sk)) > σ(f (Sk)- f(s))]
k=1
which, according to our assumptions, is equivalent to
n
X∏kl[σ(f(s) - f(sk)) > σ(f (Sk)- f(s))]
k=1
We know that for all i ≤ n, σ(f (Sv) - f(Si)) > σ(f (Si) - f (Sv)), and therefore, Sv maximizes the
PBR objective.
Finally, if Sn doesn't exist, then any policy is solution to the PBR objective, and therefore Sv is. □
A toy example showing the compatibility between Best Response and Preference-based Best Response
is shown in Fig. B.8. The setting is that of a monotonic game where every strategy is assigned a
number. Strategies are then dominated by all strategies with higher number than theirs. We compute
BR and PBR on an initial population composed of one strategy that we choose to be dominated by
every other strategy. Any strategy dominating the current population is a valid solution for PBR,
as represented in Fig. B.8c; whereas, if we consider that the game is monotonic with σ a strictly
increasing function, only one strategy maximizes Best Response, strategy N - and it is thus the only
solution of BR, as shown in Fig. B.8d.
As we can see, the solution of BR is part of the possible solutions of PBR, demonstrating the result of
Proposition 6: BR is compatible with PBR in monotonic games.
21
Published as a conference paper at ICLR 2020
(a) Full response graph of a monotonic game.
(b) Starting population (green).
(c) Current population (green) and possible solutions (d) Current population (green) and possible solution
of PBR (yellow)	of BR (yellow).
Figure B.8: Toy example of compatibility between PBR and BR: The solution returned by BR is one
of the possible solutions of PBR.
B.7	Proof of Proposition 7
Proposition 7. Consider symmetric win-loss games where outcomes between deterministic strategies
are deterministic. A preference-based RL agent (i.e., an agent aiming to maximize its probability of
winning against a distribution π of strategies {s1, . . . , sN}) optimizes exactly the PBR objective (1).
Proof. Commencing with the above preference-based RL objective, we calculate as follows,
arg max P
σ
N
σ beats	πisi = arg max Ei [P(σ beats si|index i selected)]
σ
i=1
N
= arg max	πiP(σ beats si)
σ	i=1
N
=arg max E ∏ 1 [σ receives a positive expected payoff against si]
σ	i=1
with the final equality whenever game outcomes between two deterministic strategies are deterministic.
Note that this is precisely the PBR objective (1).
□
B.8	Proof of Proposition 8
Proposition 8. For symmetric two-player zero-sum games where off-diagonal payoffs have equal
magnitude, all NE have support contained within that of the single-population α-Rank distribution.
Proof. In the single-population case, the support of the α-Rank distribution is simply the (unique)
sink strongly-connected component of the response graph (uniqueness follows from the fact that
the response graph, viewed as an undirected graph, is fully-connected). We will now argue that for
a strategy s in the sink strongly-connected component and a strategy z outside the sink strongly-
connected component, we have
X π(a)M 1 (s, a) > Xπ(a)M1(z,a),	(3)
a∈S	a∈S
This inequality states that when an opponent plays according to π, the expected payoff to the row
player is greater if they defect to s whenever they would have played z . This implies that if a supposed
symmetric Nash equilibrium contains a strategy z outside the sink strongly-connected component
in its support, then it could receive higher reward by playing s instead, which contradicts the fact
that it is an NE. We show (3) by proving a stronger result — namely, that s dominates z as strategies.
Firstly, since s is the sink strongly-connected component and z is not, s beats z, and so M1 (s, z) >
M1(s, s) = M1(z, z) > M 1(z, s). Next, ifa 6∈ {s, z} is in the sink strongly-connected component,
then a beats z, and so M1 (s, a) > M1 (z, a) if s beats a, and M1 (s, a) = M1 (z, a) otherwise.
Finally, if a 6= s, z is not in the sink strongly-connected component, then M1 (s, a) = M 1(z, a) is z
beats a, and M 1(s, a) > M 1(z, a) otherwise. Thus, (3) is proven, and the result follows. □
22
Published as a conference paper at ICLR 2020
B.9	Proof of Proposition 9
Proposition 9. In a symmetric two-player zero-sum game, there exists an NE with support contained
within that of the α-Rank distribution.
Proof. Consider the restriction of the game to the strategies contained in the sink strongly-connected
component of the original game. Let π be an NE for this restricted game, and consider this as a
distribution over all strategies in the original game (putting 0 mass on strategies outside the sink
component). We argue that this is an NE for the full game, and the statement follows. To see this, note
that since any strategy outside the sink strongly-connected component receives a non-positive payoff
when playing against a strategy in the sink strongly-connected component, and that for at least one
strategy in the sink strongly-connected component, this payoff is negative. Considering the payoffs
available to the row player when the column player plays according to π, we observe that the expected
payoff for any strategy outside the sink strongly-connected component is negative, since every strategy
in the sink strongly-connected component beats the strategy outside the component. The payoff when
defecting to a strategy in the sink strongly-connected component must be non-positive, since π is an
NE for the restricted game.	□
23
Published as a conference paper at ICLR 2020
C Additional Details on Experiments
C.1 Experimental Procedures
The code backend for the Poker experiments used OpenSpiel (Lanctot et al., 2019). Specif-
ically, we used OpenSpiel’s Kuhn and Leduc poker implementations, and exact best
responses were computed by traversing the game tree (see implementation details in
https://github.com/deepmind/open_spiel/blob/master/open_spiel/
python/algorithms/best_response.py). 100 game simulations were used to estimate
the payoff matrix for each possible strategy pair.
Although the underlying Kuhn and Leduc poker games are stochastic (due to random initial card
deals), the associated meta-games are essentially deterministic (as, given enough game simulations,
the mean payoffs are fixed). The subsequent PSRO updates are, thus, also deterministic.
Despite this, we report averages over 2 runs per PSRO M, primarily to capture stochasticity due
to differences in machine-specific rounding errors that occur due to the distributed computational
platforms we run these experiments on.
For experiments involving α-Rank, we conduct a full sweep over the ranking-intensity parameter, α,
following each iteration of α-PSRO. We implemented a version of α-Rank (building on the Open-
Spiel implementation https://github.com/deepmind/open_spiel/blob/master/
open_spiel/python/egt/alpharank.py) that used a sparse representation for the underly-
ing transition matrix, enabling scaling-up to the large-scale NFG results presented in the experiments.
For experiments involving the projected replicator dynamics (PRD), we used uniformly-initialized
meta-distributions, running PRD for 5e4 iterations, using a step-size of dt = 1e - 3, and exploration
parameter γ = 1e - 10. Time-averaged distributions were computed over the entire trajectory.
C.2 Domain Description and Generation
C.2.1 Normal Form Games Generation
Algorithms 2 to 4 provide an overview of the procedure we use to randomly-generate normal-form
games for the oracle comparisons visualized in Fig. 2.
Algorithm 2 GenerateTransitive(Actions, Players, meanvalue = [0.0, 1.0], meanprobability = [0.5, 0.5],
Var = 0.1)
1:	T =[]
2:	for Player k do
3:	Initialize fk = [0] * Actions
4:	for Action a ≤ Actions do
5:	Randomly sample mean μ from meanvalue according to meanprobability
6：	fk [a]〜N(μ, var)
7:	for Player k do
8:	T[k] = fk - ∣Players∣-1 Ei=k fi
9:	Return T
Algorithm 3 GenerateCyclic(Actions, Players, var = 0.4)
1:	C =[]
2:	for Player k do
3:	Initialize C [k]〜N (0, var), Shape(C [k]) = (ActiOnSFirStPlayer,..., ActiOnSLaStPIayer)
4:	for Player k do
5:	Sum = Actions ai of all player i6=k C[k][a1, . . . , ak-1, : , ak+1, ...]
6:	Shape(Sum) = (1, . . . , 1, ActionsPlayer k, 1, . . . , 1)
7:	C[k] = C[k] - Sum
8:	Return C
24
Published as a conference paper at ICLR 2020
Algorithm 4 General Normal Form Games Generation(Actions, Players)
1:	Generate matrix lists T = GenerateTransitive(Actions, Players), C = GenerateCyclic(Actions,
Players)
2:	Return [T [k] + C[k] for Player k]
C.2.2 Kuhn and Leduc Poker
K-player Kuhn poker is played with a deck of K + 1 cards. Each player starts with 2 chips and 1
face-down card, and antes 1 chip to play. Players either bet (raise/call) or fold iteratively, until each
player is either in (has contributed equally to the pot) or has folded. Amongst the remaining players,
the one with the highest-ranked card wins the pot.
Leduc Poker, in comparison, has a significantly larger state-space. Players in Leduc have unlimited
chips, receive 1 face-down card, ante 1 chip to play, with subsequent bets limited to 2 and 4 chips in
rounds 1 and 2. A maximum of two raises are allowed in each round, and a public card is revealed
before the second round.
C.3 PBR computation in Normal Form Games
The algorithms used to compute PBR and PBR-Score in the games generated by the algorithm
described in Section C.2.1 is shown in Algorithms 5 and 6. Note that they compute the multipopulation
version of PBR. PCS-Score is computed by pre-computing the full game’s SSCC, and computing
the proportion of currently selected strategies in the empirical game that also belongs to the full
game’s SSCC.
Note that the PBR-Score and PCS-Score are useful measures for assessing the quality of con-
vergence in our examples, in a manner analogous to NashConv. The computation of these scores
is, however, not tractable in general games. Notably, this is also the case for NashConv (as it
requires computation of player-wise best responses, which can be problematic even in moderately-
sized games). Despite this, these scores remain a useful way to empirically verify the convergence
characteristics in small games where they can be tractably computed.
Algorithm 5 PBR Score(Strategy S, Payoff Tensor, Current Player Id, Joint Strategies, Joint Strategy
Probability)
1:	New strategy score = 0
2:	for Joint strategy J, Joint probability P in Joint Strategies, Joint Strategy Probability do
3:	New strategy = J
4:	New strategy[Current Player Id] = S
5:	New strategy payoff = Payoff Tensor[New Strategy]
6:	Old strategy payoff = Payoff Tensor[J]
7:	New strategy score += P * (New Strategy Payoff > Old Strategy Payoff)
8:	Return New strategy score
Algorithm 6 PBR(Payoff Tensor list LM, Joint Strategies per player PJ, Alpharank Probability per
Joint Strategy PA, Current Player)
1:	maxP BR = 0
2:	maxstrat = None
3:	for Strategy S available to Current Player among all possible strategies do
4:	score = PBR Score(S, LM[Current Player Id], Current Player Id, PJ, PA)
5:	if New Strategy Score > maxP BR then
6:	maxP BR = New Strategy Score
7:	maxstrat = S
8:	Return maxPBR, maxstrat
25
Published as a conference paper at ICLR 2020
C.4 Additional Oracle Comparison Results
We present additional oraCle Comparisons in Fig. C.9, all of these in the multi-population Case.
-Ο: BR — Ο: PBR
>coolβ
>CΟΟIΟ
20 30 40 50 60 70 80 90 100
∣sil
≥ 0.95
o
o
0
0-
8-
6-
4-
PCS-Score ∈ (0.05, 0.95)	PCS-Score ≤ 0.05
∣s*l
(a) α-CONV
400	600	800	1000
Wl
Q 8 6 4 2。
Iooooo
aJ8s-sod
10	15	20	25	30
∣sil
(b) PCS-SCOREforBR
0.2 -
0.0-l
0
1.0-
ɛ 0.8-
M n!^
小 0∙4-
⅛ 02-
0.0-∣
10
∣sil
(C) PCS-SCOREfor PBR
Figure C.9: OraCle Comparisons for randomly-generated normal-form games with varying player
strategy spaCe sizes |Sk|. The rows, in order, Correspond to 2- to 5-player games.
C.5 Notes on Rectified Nash performance
This seCtion provides additional insights into the ReCtified Nash results detailed in SeCtion 5. We
begin with an important disClaimer that ReCtified Nash was developed solely with symmetriC games in
mind. As Kuhn Poker and LeduC Poker are not symmetriC games, they lie beyond the theoretiCal sCope
of ReCtified Nash. Nevertheless, Comparing the performanCe of reCtified and non-reCtified approaChes
from an empiriCal perspeCtive yields insights, whiCh may be useful for future investigations that seek
to potentially extend and apply reCtified training approaChes to more general games.
As noted in the main paper, the poor performanCe of PSRO using ReCtified Nash (in Fig. 3) is initially
surprising as it indiCates premature ConvergenCe to a high-NashConv distribution over the players’
poliCy pools. Investigating this further led to a Counterintuitive result for the domains evaluated:
ReCtified Nash was, roughly speaking, not inCreasing the overall diversity of behavioral poliCies
added to eaCh player’s population pool. In Certain regards, it even prevented diversity from emerging.
To more ConCretely pinpoint the issues, we detail below the first 3 iterations of PSRO(ReCtified Nash,
BR) in Kuhn Poker. Payoff matriCes at eaCh PSRO iteration are inCluded in Tables 6a to 6C. For
Clarity, we also inClude the 5 best responses trained by ReCtified Nash and the poliCies they were
trained against, in their order of disCovery: 2 poliCies for Player 1 (in Fig. C.11) and 3 poliCies for
Player 2 (in Fig. C.12).
1.	Iteration 0: both players start with uniform random poliCies.
2.	Iteration 1:
•	Player 1 trains a best response against Player 2’s uniform random poliCy; its poliCy set
is now the original uniform poliCy, and the newly-Computed best response.
•	Player 2 trains a best response against Player 1’s uniform random poliCy; its poliCy set
is now the original uniform poliCy, and the newly-Computed best response.
•	Player 2’s best response beats both of Player 1’s poliCies.
•	Payoff values are represented in Table 6a.
26
Published as a conference paper at ICLR 2020
(a) Kuhn poker Exploitability.
—Uniform
—α-Rank
—PRD
---Nash
—PRD (rectified)
—Nash (rectified)
Total Pool Length
(b) Kuhn poker Diversity.
Figure C.10: Policy Exploitability and Diversity in 2-player Kuhn for a given seed and 100 simulations
per payoff entry.
3.	Iteration 2:
•	By Rectified Nash rules, Player 1 only trains policies against policies it beats; i.e., only
against Player 2’s random policy, and thus it adds the same policy as in iteration 1 to
its pool.
•	Player 2 trains a best response against the Nash mixture of Player 1’s first best response
and random policy. This policy also beats all policies of player 1.
•	Payoff values are represented in Table 6b.
4.	Iteration 3:
•	Player 1 only trains best responses against Player 2’s random policy.
•	Player 2 only trains best responses against the Nash of Player 1’s two unique policies.
This yields the same policies for player 2 as those previously added to its pool (i.e., a
loop occurs).
•	Payoff values are represented in Table 6c
5.	Rectified Nash has looped.
As noted above, Rectified Nash loops at iteration 3, producing already-existing best responses against
Player 1’s policies. Player 1 is, therefore, constrained to never being able to train best responses
against any other policy than Player 2’s random policy. In turn, this prevents Player 2 from training
additional novel policies, and puts the game in a deadlocked state.
Noise in the payoff matrices may lead to different best responses against the Nash Mixture of policies,
effectively increasing diversity. However, this effect did not seem to manifest in our experiments. To
more clearly illustrate this, we introduce a means of evaluating the policy pool diversity, counting
the number of unique policies in the pool. Specifically, given that Kuhn poker is a finite state game,
comparing policies is straightforward, and only amounts to comparing each policy’s output on all
states of the games. If two policies have exactly the same output on all the game’s states, they are
equal; otherwise, they are distinct. We plot in Fig. C.10 the policy diversity of each meta-solver, where
we observe that both Rectified Nash and Rectified PRD discover a total of 5 different policies. We
have nevertheless noticed that in a few rare seeds, when using low number of simulations per payoff
entry (Around 10), Rectified Nash was able to converge to low exploitability scores, suggesting a
relationship between payoff noise, uncertainty and convergence of Rectified Nash whose investigation
we leave for future work. We also leave the investigation of the relationship between Policy Diversity
and Exploitability for future work, though note that there appears to be a clear correlation between
both. Overall, these results demonstrate that the Rectified Nash solver fails to discover as many
unique policies as the other solvers, thereby plateauing at a low NashConv.
Finally, regarding Rectified PRD, which performs better in terms of NashConv when compared to
Rectified Nash, we suspect that payoff noise in combination with the intrinsic noise of PRD, plays
a key factor - but those two are not enough to deterministically make Rectified PRD converge to
0 exploitability, since in the seed that generated Fig. C.10, it actually doesn’t (Though it indeed
converges in Fig. 3). We conjecture this noisier behavior may enable Rectified PRD to free itself
from deadlocks more easily, and thus discover more policies on average. A more detailed analysis of
Rectified PRD is left as future work.
27
Published as a conference paper at ICLR 2020
Bet
0.50
Bet
0.50
0.50
1p
1pb
2pb
0.50
05
0.50
0.50
0.50
Bet
150
Bet
,50
Bet
0.50
ass
0.50
Bet
,50
Bet
0.50
Bet
,50
Bet
,50
eal:2
0.50
0.50
0.50
0.50
Bet
).50
Bet
0.50
Bet
050
Bet
0.50
Bet
,50
Bet
0.50
0.50
Bet
0.50
Bet
050
Pass
0.50



(a)	Initial (uniform) policies.
Bet
0.00
Bet
,50
1.00
1.01：
2pb
0.50
<>
O
O
O
O
Pass
0.50
Pass
0.00
Bet
,50
Pass
0.50
Bet
150
Pass
0.50
Pass
0.50
Bet
,00
Bet
0.50
Bet
,00
Bet
.50
Bel
,50
eal:2
Bet
050
PaSS
0.00
0.00
Pass
0.00
Bet
1.00
Bet
).50
Bet
0.50
Bet
LcC
1pb
Bet
,00
Pass
0.50
Bet
0.50


(b)	Player 1’s first best response indicated in blue, and the policy it best-responded against in red.
Figure C.11: Game tree with both players’ policies visualized. Player 1 decision nodes and action
probabilities indicated, respectively, by the blue square nodes and blue arrows. Player 2’s are likewise
shown via the red counterparts.
28
Published as a conference paper at ICLR 2020
Bet
0.50
Bet
0.50
0.50
0.50
1p
2pb
050
050
050
Bet
,50
Bet
0.50
ass
0.50
Bet
,50
Bet
,50
1pb
eal:2
0.50
0.50
0.50
Bet
050
Bet
).50
Bet
0.50
Bet
050
Bet
0.50
Bet
,50
Bet
0.50
0.50
Bet
0.50
Bet
050
Pass
0.50



(a)	Initial (uniform) policies.
Bet
0.50
Bet
.00
0.50
0.50
1p
1pb
2pb
Pass
0.00
3
Bet
,50
Bet
,00
ass
0.50
Bet
,00
Bel
,00
Pass
0.00
Pa ss
0.00
令
Pa SS
0.00
,00
Pa ss
0.01：
eal:2
0.50
0.50
0.50
Bet
).50
Bet
0.50
Bet
,50
Bet
0.50
Bet
1.00
Bet
l.00
Bet
1.00
Pass
0.00
Bet
.00
FO
◊乂



(b)	Player 2’s first best response indicated in red, and the policy it best-responded against in blue.
Bet
0.25
Bet
.00
0.25
2pb
Pass
0.25
Bet
.00
Bet
0.00
Pass
0.00
Pass
0.00
令
Pass
0.00
Bet
,75
Bet
,00
0.00
eal:2
Pass
0.25
Bet
).75
ass
0.25
Bet
0.75
ass
0.75
PaSS
0.75
Bet
0.00
Bet
1.00
Bet
0.00
1pb
Bet
.75
Pass
Bet
0.00
Bet
1.00
Bet
0.25
PaSs
1.00
FO
◊艮


(c)	Player 2’s second best response indicated in red, and the policy it best-responded against in blue.
Figure C.12: Game tree with both players’ policies visualized. Player 1 decision nodes and action
probabilities indicated, respectively, by the blue square nodes and blue arrows. Player 2’s are likewise
shown via the red counterparts.
29
Published as a conference paper at ICLR 2020
0.1014 -0.4287
0.4903 -0.1794
(a) Iteration 1.
0.1014 0.4903 0.5169 0.5024	-0.4287 -0.2461 -0.2284 -0.1794 -0.4988 -0.5228 -0.1726 -0.4946	-0.5 -0.1832 -0.4901 -0.5066 (b) Iteration 2.
-0.1014	-0.4287	-0.2461	-0.2284	-0.264	-0.2602	-0.2505-
0.4903	-0.1794	-0.4988	-0.5228	-0.5015	-0.5501	-0.5159
0.5169	-0.1726	-0.4946	-0.5	-0.5261	-0.5279	-0.4979
0.5024	-0.1832	-0.4901	-0.5066	-0.5069	-0.4901	-0.5033
0.4893	-0.1968	-0.5084	-0.4901	-0.5015	-0.4883	-0.4796
0.4841	-0.1496	-0.4892	-0.491	-0.4724	-0.4781	-0.5087
0.5179	-0.1769	-0.503	-0.521	-0.4991	-0.4739	-0.4649
0.4959	-0.1613	-0.5123	-0.518	-0.5126	-0.5039	-0.4853
(c) Iteration 3.
Table 6: PSRO(Rectified Nash, BR) evaluated on 2-player Kuhn Poker. Player 1’s payoff matrix
shown for each respective training iteration.
30
Published as a conference paper at ICLR 2020
D α-RANK in Detail
In this section we give further details of α-Rank; for a full description, see Omidshafiei et al. (2019).
Essentially α-Rank defines a directed response graph over the pure strategy profiles of the game under
study, by indicating when a player has an incentive to make a unilateral deviation from their current
strategy. An irreducible (noisy) random walk over this graph is then defined, and the strategy profile
rankings are obtained by ordering the masses of this Markov chain’s unique invariant distribution π.
The Markov transition matrix C that specifies this random walk is defined as follows for the multi-
population case; see Omidshafiei et al. (2019) for the single-population case. Consider a pure strategy
(σk,
∈S
profile s ∈ S, and let σ =
k, which uses strategy σk
s-k) be the pure strategy profile which is equal to s, except for player
instead of sk . Let Cs,σ denote the transition probability from s to σ,
and Cs,s the self-transition probability of s, with each defined as:
1-exp(-α(Mk (σ)-Mk (s)))
η 1—exp(-αm(Mk(σ)-Mk(s)))
η
m
(
if Mk (σ) 6= Mk(s)
otherwise,
1 - Cs,
k∈[K]
σ∣σk ∈Sk∖{sk}
where η = (Pl(|Sl | - 1))—1. If two strategy profiles s and s0 differ in more than one player’s
strategy, then Cs,s0 = 0. Here α ≥ 0 and m ∈ N are parameters to be specified; the form of
this transition probability is described by evolutionary dynamics models from evolutionary game
theory and is explained in more detail in Omidshafiei et al. (2019). Large values of α correspond to
higher selection pressure in the evolutionary model under consideration; the version of α-Rank used
throughout this paper corresponds to the limiting invariant distribution as α → ∞, under which only
strategy profiles appearing in the sink strongly-connected components of the response graph can have
positive mass.
31
Published as a conference paper at ICLR 2020
E Towards Theoretical Guarantees for the Projected Replicator
Dynamics
Computing Nash equilibria is intractable for general games and can suffer from a selection problem
(Daskalakis et al., 2009); therefore, it quickly becomes computationally intractable to employ an
exact Nash meta-solver in the inner loop of a PSRO algorithm. To get around this, Lanctot et al.
(2017) use regret minimization algorithms to attain an approximate correlated equilibrium (which
is guaranteed to be an approximate Nash equilibrium under certain conditions on the underlying
game, such as two-player zero-sum). A dynamical system from evolutionary game theory that also
converges to equilibria under certain conditions is the replicator dynamics (Taylor and Jonker, 1978;
Schuster and Sigmund, 1983; Cressman and Tao, 2014; Bloembergen et al., 2015), which defines a
dynamical system over distributions of strategies (πsk(t) | k ∈ [K], s ∈ Sk), given by
∏ S (t) = ∏k(t)[Mk (s,π-k (t)) - Mk (πk (t))] , for all k ∈ [K ], s ∈ Sk ,	(4)
with an arbitrary initial condition. Lanctot et al. (2017) introduced a variant of replicator dynamics,
termed projected replicator dynamics (PRD), which projects the flow of the system so that each
distribution πk(t) lies in the set ∆*k = {π ∈ ∆sk | πs ≥ γ∕(∣Sk| + 1), ∀s ∈ Sk}; see, e.g.,
Nagurney and Zhang (2012) for properties of such projected dynamical systems. This heuristically
enforces additional “exploration” relative to standard replicator dynamics, and was observed to
provide strong empirical results when used as a meta-solver within PSRO. However, the introduction
of projection potentially severs the connection between replicator dynamics and Nash equilibria, and
the theoretical game-theoretic properties of PRD were left open in Lanctot et al. (2017).
Here, we take a first step towards investigating theoretical guarantees for PRD. Specifically, we
highlight a possible connection between α-Rank, the calculation of which requires no simulation,
and a constrained variant of PRD, which we denote the ‘single-mutation PRD’ (or s-PRD), leaving
formal investigation of this connection for future work.
Specifically, S-PRD is a dynamical system over distributions (πk(t)∣k ∈ [K], S ∈ Sk) that follows
the replicator dynamics (equation 4), with initial condition restricted so that each π0k lies on the
1-skeleton ∆S1) = {π ∈ ∆sk | Ps∈sk Ins=O ≤ 2}. Further, whenever a strategy distribution
πtk enters a δ-corner of the simplex, defined by ∆[Sδk] = {π ∈ ∆(S1k) | ∃s ∈ Sk s.t. πs ≥ 1 - δ},
the non-zero element of πk(t) with mass at most δ is replaced with a uniformly randomly chosen
strategy after a random time distributed according to Exp(μ), for some small μ > 0. This concludes
the description of s-PRD. We note at this stage that s-PRD defines, essentially, a dynamical system
on the 1-skeleton (or edges) of the simplex, with random mutations towards a uniformly-sampled
randomly strategy profile s at the simplex vertices. At a high-level, this bears a close resemblance to
the finite-population α-Rank dynamics defined in Omidshafiei et al. (2019); moreover, we note that
the connection between s-PRD and true α-Rank dynamics becomes even more evident when taking
into account the correspondence between the standard replicator dynamics and α-Rank that is noted
in Omidshafiei et al. (2019, Theorem 2.1.4).
We conclude by noting a major limitation of both s-PRD and PRD, which can limit their practical
applicability even assuming a game-theoretic grounding can be proven for either. Specifically, with
all such solvers, simulation of a dynamical system is required to obtain an approximate equilibrium,
which may be costly in itself. Moreover, their dynamics can be chaotic even for simple instances
of two-player two-strategy games (Palaiopanos et al., 2017). In practice, the combination of these
two limitations may completely shatter the convergence properties of these algorithms in practice,
in the sense that the question of how long to wait until convergence becomes increasingly difficult
(and computationally expensive) to answer. By contrast, α-Rank does not rely on such simulations,
thereby avoiding these empirical issues.
We conclude by remarking again that, albeit informal, these results indicate a much stronger theoretical
connection between α-Rank and standard PRD that may warrant future investigation.
32
Published as a conference paper at ICLR 2020
F	MuJoCo Soccer Experiment
While the key objective of this paper is to take a first step in establishing a theoretically-grounded
framework for PSRO-based training of agents in many-player settings, an exciting question concerns
the behaviors of the proposed α-Rank-based PSRO algorithm in complex domains where function-
approximation-based policies need to be relied upon for generalizable task execution. In this section,
we take a preliminary step towards conducting this investigation, focusing in particular on the MuJoCo
soccer domain introduced in Liu et al. (2019) (refer to https://github.com/deepmind/
dm_control/tree/master/dm_control/locomotion/soccer for the corresponding
domain code).
In particular, we conduct two sets of initial experiments. The first set of experiments compares the
performance of PSRO(α-Rank, RL) and PSRO(Uniform, RL) in games of 3 vs. 3 MuJoCo soccer,
and the second set compares PSRO(α-Rank, RL) against a population-based training pipeline in
2 vs. 2 games.
F.1 Training Procedure
For each of the PSRO variants considered, we compose a hierarchical training procedure composed
of two levels. At the low-level, which focuses on simulations of the underlying MuJoCo soccer
game itself, we consider a collection of 32 reinforcement learners (which we call agents) that are all
trained at the same time, as in Liu et al. (2019). We compose teams corresponding to multiple clones
of agent per team (yielding homogeneous teams, in contrast to (Liu et al., 2019), which evaluates
teams of heterogeneous agents) and evaluate all pairwise team match-ups. Note that this yields a
2-“player” meta-game (where each “player” is actually a team, i.e., a team-vs.-team setting), with
payoffs corresponding to the average win-rates of each team when pitted against each other.
The payoff matrix is estimated by simulating matches between different teams. The number of
simulations per entry is adaptive based on the empirical uncertainty observed on the pair-wise match
outcomes. In practice, we observed an average of 10 to 100 simulations per entry, with fewer
simulations used for meta-payoffs with higher certainty. For the final evaluation matrix reported
in Appendix F (Fig. F.10), which was computed after the conclusion of PSRO-based training, 100
simulations were used per entry. Additionally, instead of adding one policy per PSRO iteration per
player we add three (which corresponds to the 10% best RL agents).
Several additional modifications were made to standard PSRO to help with the inherently more
difficult nature of Deep Reinforcement Learning training:
•	Agent performance, used to choose which agents out of the 32 to add to the pool, is measured
by the α-Rank-average for PSRO(α-Rank, RL) and Nash-average for PSRO(Uniform, RL)
of agents in the (Agents, Pool) vs (Agents, Pool) game.
•	Each oracle step in PSRO is composed of 1 billion learning steps of the agents. After each
step, the top 10% of agents (the 3 best agents) are added to the pool, and training of the 32
agents continues;
•	We use a 50% probability of training using self-play (the other 50% training against the
distribution of the pool of agents).
F.2 Results
In the first set of experiments, we train the PSRO(α-Rank, RL) and PSRO(Uniform, RL) agents
independently (i.e., the two populations never interact with one another). Following training, we
compare the effective performance of these two PSRO variants by pitting their 8 best trained agents
against one another, and recording the average win rates. These results are reported in Fig. F.13 for
games involving teams of 3 vs. 3. It is evident from these results that PSRO(α-Rank, RL) significantly
outperforms PSRO(Uniform, RL). This is clear from the colorbar on the far right of Fig. F.13, which
visualizes the post-training alpharank distribution over the payoff matrix of the metagame composed
of both training pipelines.
In the second set of experiments, we compare α-PSRO-based training to self-play-based training (i.e.,
sampling opponents uniformly at random from the training agent population). This provides a means
33
Published as a conference paper at ICLR 2020
Figure F.13: α-PSRO versus PSRO(Uniform, BR) in the MuJoCo Soccer domain. Left is the matrix
representing the probability of winning for α-PSRO and PSRO(Uniform, BR)’s best 8 agents. Right
is the α-Rank distribution over the meta-game induced by these agents. Yellow are high probabilities,
dark-blue are low probabilities.The diagonal is taken to be 0.
of gauging the performance improvement solely due to PSRO; these results are reported in Fig. F.14
for games involving teams of 2 vs. 2.
We conclude by remarking that these results, although interesting, primarily are intended to lay the
foundation for use of α-Rank as a meta-solver in complex many agent domains where RL agents
serve as useful oracles; additionally, more extensive research and analysis is necessary to make these
results conclusive in domains such as MuJoCo soccer. We plan to carry out several experiments along
these lines, including extensive ablation studies, in future work.
34
Published as a conference paper at ICLR 2020
Self-play training
a∣pha-PSRO training
Figure F.14: α-PSRO training pipeline vs. training pipeline without PSRO.
35