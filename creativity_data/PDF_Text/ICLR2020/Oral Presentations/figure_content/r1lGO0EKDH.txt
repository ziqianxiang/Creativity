Figure 1: Overview of the GraPhZoom framework.
Figure 2: Comparisons of GraphZoom and MILE on Friendster dataset.
Figure 3: Comparisons of different kernel combinations in GraphZoom and MILE in classificationaccuracy on Cora, Citeseer, and Pubmed datasets — We choose DeepWalk (DW) as the embed-ding kernel. GZoom_F, GZoomC GZoom_R denote the fusion, coarsening, and refinement kernelsproposed in GraPhZoom, respectively; MILE-C and MILE_R denote the coarsening and refinementkernels in MILE, respectively; The blue curve is basically GraphZoom and the yellow one is MILE.
Figure 4: CPU time of GraphZoom kernelsAs shown in Figure 4 (note that the y axis is in logarithmic scale), the GraphZoom embedding kerneldominates the total CPU time, which can be more effectively reduced with a greater coarsening levelL. All other kernels in GraphZoom are very efficient, which enable the GraphZoom framework todrastically reduce the total graph embedding time.
Figure 5: Distribution of graph laplaCian eigenvalues with different self-loops on Cora(f) Filters for squeezed laplaCian eigenvaluesoff between embedding quality and runtime effiCienCy: to aChieve the highest graph embeddingquality, the graph fusion kernel should be inCluded.
Figure 6:	Comparisons of different combinations of kernels in GraphZoom and MILE in terms ofCPU time speedup on Cora, Citeseer, and Pubmed datasets — We choose DeepWalk (DW) as basicembedding method. GZoom_F, GZoomC GZoom_R, MILE_C and MILE_R represent GraPhZoomfusion kernel, GraphZoom coarsening kernel, GraphZoom refinement kernel, MILE coarsening ker-nel and MILE refinement kernel, respectively.
Figure 7:	Comparisons of GraphZoom and GraphSAGE on PPIZoom embedding results can still beat the GraphSAGE baseline obtained with the original graphcontaining 14, 755 nodes.
Figure 8: Comparisons of classification accuracy using various β values in the graph fusion kernelfor the Cora, Citeseer, and Pubmed datasets. l represents the l-th coarsening level.
