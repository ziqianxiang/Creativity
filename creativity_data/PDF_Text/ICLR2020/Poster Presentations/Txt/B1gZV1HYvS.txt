Published as a conference paper at ICLR 2020
Multi-Agent Interactions Modeling with Cor-
related Policies
Minghuan Liu1, Ming Zhou1, Weinan Zhang 1, Yuzheng Zhuang2, Jun Wang2, Wulong Liu2, Yong Yu1
1 Shanghai Jiaotong University, 2 Huawei Noah’s Ark Lab
{minghuanliu, mingak, wnzhang, yyu}@sjtu.edu.cn, {zhuangyuzheng, w.j, liuwulong}@huawei.com
Ab stract
In multi-agent systems, complex interacting behaviors arise due to the high cor-
relations among agents. However, previous work on modeling multi-agent inter-
actions from demonstrations is primarily constrained by assuming the indepen-
dence among policies and their reward structures. In this paper, we cast the multi-
agent interactions modeling problem into a multi-agent imitation learning frame-
work with explicit modeling of correlated policies by approximating opponents’
policies, which can recover agents’ policies that can regenerate similar interac-
tions. Consequently, we develop a Decentralized Adversarial Imitation Learn-
ing algorithm with Correlated policies (CoDAIL), which allows for decentralized
training and execution. Various experiments demonstrate that CoDAIL can bet-
ter regenerate complex interactions close to the demonstrators and outperforms
state-of-the-art multi-agent imitation learning methods. Our code is available at
https://github.com/apexrl/CoDAIL.
1	Introduction
Modeling complex interactions among intelligent agents from the real world is essential for under-
standing and creating intelligent multi-agent behaviors, which is typically formulated as a multi-
agent learning (MAL) problem in multi-agent systems. When the system dynamics are agnostic and
non-stationary due to the adaptive agents with implicit goals, multi-agent reinforcement learning
(MARL) is the most commonly used technique for MAL. MARL has recently drawn much atten-
tion and achieved impressive progress on various non-trivial tasks, such as multi-player strategy
games (OpenAI, 2018; Jaderberg et al., 2018), traffic light control (Chu et al., 2019), taxi-order
dispatching (Li et al., 2019) etc.
A central challenge in MARL is to specify a good learning goal, as the agents’ rewards are cor-
related and thus cannot be maximized independently (Bu et al., 2008). Without explicit access to
the reward signals, imitation learning could be the most intuitive solution for learning good policies
directly from demonstrations. Conventional solutions such as behavior cloning (BC) (Pomerleau,
1991) learn the policy in a supervised manner by requiring numerous data while suffering from com-
pounding error (Ross & Bagnell, 2010; Ross et al., 2011). Inverse reinforcement learning (IRL) (Ng
et al., 2000; Russell, 1998) alleviates these shortcomings by recovering a reward function but is
always expensive to obtain the optimal policy due to the forward reinforcement learning procedure
in an inner loop. Generative adversarial imitation learning (GAIL) (Ho & Ermon, 2016) leaves a
better candidate for its model-free structure without compounding error, which is highly effective
and scalable. However, real-world multi-agent interactions could be much challenging to imitate be-
cause of the strong correlations among adaptive agents’ policies and rewards. Consider if a football
coach wants to win the league, he must make targeted tactics against various opponents, in addition
to the situation of his team. Moreover, the multi-agent environment tends to give rise to more severe
compounding errors with more expensive running costs.
Motivated by these challenges, we investigate the problem of modeling complicated multi-agent
interactions from a pile of off-line demonstrations and recover their on-line policies, which can re-
generate analogous multi-agent behaviors. Prior studies for multi-agent imitation learning typically
limit the complexity in demonstrated interactions by assuming isolated reward structures (Barrett
et al., 2017; Le et al., 2017; Lin et al., 2014; Waugh et al., 2013) and independence in per-agent
1
Published as a conference paper at ICLR 2020
policies that overlook the high correlations among agents (Song et al., 2018; Yu et al., 2019). In this
paper, we cast the multi-agent interactions modeling problem into a multi-agent imitation learning
framework with correlated policies by approximating opponents’ policies, in order to reach inacces-
sible opponents’ actions due to concurrently execution of actions among agents when making deci-
sions. Consequently, with approximated opponents model, we develop a Decentralized Adversarial
Imitation Learning algorithm with Correlated policies (CoDAIL) suitable for learning correlated
policies under our proposed framework, which allows for decentralized training and execution. We
prove that our framework treats the demonstrator interactions as one of -Nash Equilibrium (-NE)
solutions under the recovered reward.
In experiments, we conduct multi-dimensional comparisons for both the reward gap between learned
agents and demonstrators, along with the distribution divergence between demonstrations and regen-
erated interacted trajectories from learned policies. Furthermore, the results reveal that CoDAIL can
better recover correlated multi-agent policy interactions than other state-of-the-art multi-agent im-
itation learning methods in several multi-agent scenarios. We further illustrate the distributions of
regenerated interactions, which indicates that CoDAIL yields the closest interaction behaviors to the
demonstrators.
2	Preliminaries
2.1	MARKOV GAME AND -NASH EQUILIBRIUM
Markov game (MG), or stochastic game (Littman, 1994), can be regarded as an extension
of Markov Decision Process (MDP). Formally, we define an MG with N agents as a tuple
hN, S, A(1), . . . , A(N), P, r(1), . . . , r(N), ρ0, γi, where S is the set of states, A(i) represents the
action space of agent i, where i ∈ {1, 2,..., N}, P : SX A(I) X A(2) × …× A(N) ×S → R is
the state transition probability distribution, ρ0 : S → R is the distribution of the initial state s0, and
γ ∈ [0, 1] is the discounted factor. Each agent i holds its policy π(i)(a(i) |s) : S X A(i) → [0, 1] to
make decisions and receive rewards defined as r(i) : S X A(I) X A(2) ×∙∙∙× A(N) → R. We use -i
to represent the set of agents except i, and variables without superscript i to denote the concatenation
of all variables for all agents (e.g., π represents the joint policy and a denotes actions of all agents).
For an arbitrary function f :〈s, a)→ R, there is a fact that En [f (s, a)] = Es〜p,a〜∏ [f (s, a)]，
E [P∞=o Ytf (st, at)], where s0 〜ρo, at 〜π, st+ι 〜P(st+ι∣at, st). The objective of agent i is to
maximize its own total expected return R(i) , Eπ [r(i) (s, a)] = E Pt∞=0 γtr(i) (st, at) .
In Markov games, however, the reward function for each agent depends on the joint agent actions.
Such a fact implies that one’s optimal policy must also depend on others’ policies. For the solution
to the Markov games, -Nash equilibrium (-NE) is a commonly used concept that extends Nash
equilibrium (NE) (Nash, 1951).
Definition 1. An E -NE is a strategy profile (∏(i), ∏(-i)) such that ∃e > 0:
v(i)(s,π(i),π(-i)) ≥ v(i)(s,π(i),π(-i)) - €,∀π(i) ∈ Π(i) ,	(I)
where v(i)(s, π(i), π(-i)) = Eπ(i),π(-i),s0 =s r(i) (st, at(i), at(-i))
under state s, and Π(i) is the set of policies available to agent i.
is the value function of agent i
€-NE is weaker than NE, which can be seen as sub-optimal NE. Every NE is equivalent to an €-NE
where € = 0.
2.2	Generative Adversarial Imitation Learning
Imitation learning aims to learn the policy directly from expert demonstrations without any access
to the reward signals. In single-agent settings, such demonstrations come from behavior trajectories
sampled with the expert policy, denoted as τE = {(st, at(i))}t∞=0. However, in multi-agent settings,
demonstrations are often interrelated trajectories, that is, which are sampled from the interactions of
policies among all agents, denoted as Ωe = {(st, a(1),…，a(N))}∞=o. For simplicity, We will use
the term interactions directly as the concept of interrelated trajectories, and we refer to trajectories
for a single agent.
2
Published as a conference paper at ICLR 2020
Typically, behavior cloning (BC) and inverse reinforcement learning (IRL) are two main approaches
for imitation learning. Although IRL theoretically alleviates compounding error and outperforms
to BC, it is less efficient since it requires resolving an RL problem inside the learning loop. Re-
cent proposed work aims to learn the policy without estimating the reward function directly, no-
tably, GAIL (Ho & Ermon, 2016), which takes advantage of Generative Adversarial Networks
(GAN (Goodfellow et al., 2014)), showing that IRL is the dual problem of occupancy measure
matching. GAIL regards the environment as a black-box, which is non-differentiable but can be
leveraged through Monte-Carlo estimation of policy gradients. Formally, its objective can be ex-
pressed as
min max EπE [logD(s,a)] +Eπ [log (1 - D(s, a))] - λH(π) ,	(2)
πD
where D is a discriminator that identifies the expert trajectories with agents’ sampled from policy
π, which tries to maximize its evaluation from D; H is the causal entropy for the policy and λ is the
hyperparameter.
2.3	Correlated Policy
In multi-agent learning tasks, each agent i makes decisions independently while the resulting reward
r(i) (st, at(i) , at(-i)) depends on others’ actions, which makes its cumulative return subjected to the
joint policy π. One common joint policy modeling method is to decouple the π with assuming
conditional independence of actions from different agents (Albrecht & Stone, 2018):
π(a(i), a(-i) |s) ≈ π(i)(a(i) ∣s)π(-i)(a(-i) |s) .	(3)
However, such a non-correlated factorization on the joint policy is a vulnerable simplification which
ignores the influence of opponents (Wen et al., 2019). And the learning process of agent i lacks sta-
bility since the environment dynamics depends on not only the current state but also the joint actions
of all agents (Tian et al., 2019). To solve this, recent work has taken opponents into consideration
by decoupling the joint policy as a correlated policy conditioned on state s and a(-i) as
π(a⑶,a(T)Is)= π⑴(a⑴|s,a(T))n(-i)(a(T)|s) ,	(4)
where π(i) (a(i) |s, a(-i)) is the conditional policy, with which agent i regards all potential ac-
tions from its opponent policies π(-i) (a(-i) |s), and makes decisions through the marginal policy
π(i) (a(i) |s) = Ra(-i) π(i) (a(i) |s, a(-i))π(-i) (a(-i) |s) da(-i) = Ea(-i) π(i) (a(i) |s, a(-i)).
3	Methodology
3.1	Generalize Correlated Policies to Multi-Agent Imitation Learning
In multi-agent settings, for agent i with policy π(i), it seeks to maximize its cumulative reward
against demonstrator opponents who equip with demonstrated policies πE(-i) via reinforcement
learning:
RL(i) (r(i)) = arg max λH(π(i)) +E i	(-i)[r(i)(s, a(i), a(-i))] ,
π(i)	π(i),πE
(5)
where H(π(i)) is the γ-discounted entropy (Bloem & Bambos, 2014; Haarnoja et al., 2017) of policy
π(i) and λ is the hyperparameter. By coupling with Eq. (5), we define an IRL procedure to find a
reward function r(i) such that the demonstrated joint policy outperforms all other policies, with the
regularize] ψ : rs×a⑴ ×∙∙∙×A(N) → R：
IRL(ψi)(πE(i)) = arg max -ψ(r(i)) - max(λH(π(i)) +E (i) (-i) [r(i)(s, a(i), a(-i))])
ψ	r(i)	π(i)	π ,πE	(6)
+ EπE [r(i)(s, a(i), a(-i))] .
3
Published as a conference paper at ICLR 2020
It is worth noting that we cannot obtain the demonstrated policies from the demonstrations directly.
To solve this problem, we first introduce the occupancy measure, namely, the unnormalized distri-
bution of hs, ai pairs correspond to the agent interactions navigated by joint policy π:
∞
ρ∏(s, a) = ∏(a∣s) EYtP(St = s∣∏) .	(7)
t=0
With the definition in Eq. (7), we can further formulate ρπ from agent i’s perspective as
∞
ρ∏(s, a(i), a(-i)) = π(a(i), a(-i) |s) ^X YttP(St = s∣π(i), π(-i))
t=0
= ρπ(i),π(-i) (S, a , a )
,∏(i)(a(i)∣s)π(-i)(a(-i)|s) P∞=° YtP(St = s∣π(i),π(-i))	(8)
、------------V-------------} 一
non-correlated form
=,
π(i)(a(i)|s, a(-i))π(-i)(a(-i)|s) P∞=0γtP(st = s∣∏(i),∏(-i))
、---------------------V----------------} 一
correlated form
where a(i)〜π(i) and a(-i) 〜π(-i). Furthermore, with the support ofEq. (8), We have
En(i),n(-i)H = Es 〜P,a(i) CJnli) [Ea(-i) 〜n(-i) H]
= X	ρ∏(i),n(-i) (s,a(i),a(-i))[ ∙ ] .	(9)
s,a(i),a(-i)
In analogy to the definition of occupancy measure of that in a single-agent environment, we follow
the derivation from Ho & Ermon (2016) and state the conclusion directly1 .
Proposition 1. The IRL regarding demonstrator opponents is a dual form of a occupancy measure
matching problem with regularizer ψ, and the induced optimal policy is the primal optimum, specif-
ically, the policy learned by RL on the reward recovered by IRL can be characterize by the following
equation:
RL⑴◦ IRL(i) = argm in -λH (π(i))+ψ*(ρn(i),∏r - ρπE).
(10)
With setting the regularizer ψ = ψGA similar to Ho & Ermon (2016), we can obtain a GAIL-like
imitation algorithm to learn πE(i) from πE given demonstrator counterparts πE(-i) by introducing the
adversarial training procedures of GANs which lead to a saddle point (π(i), D(i)):
min max-λH(π(i)) +EπE
π(i) D(i)
log D(i)(S, a(i), a(-i)) + Eπ(i),π(-i) log (1 - D(i)(S, a(i), a(-i)))
(11)
where D(i) denotes the discriminator for agent i, which plays a role of surrogate cost function and
guides the policy learning.
However, such an algorithm is not practical, since we are unable to access the policies of demonstra-
tor opponents πE(-i) because the demonstrated policies are always given through sets of interactions
data. To alleviate this deficiency, it is necessary to deal with accessible counterparts. Thereby we
propose Proposition 2.
Proposition 2. Let μ be an arbitrary function such that μ holds a similar form as π(-i), then
IP	Γ -I h	h p∏(i) ,∏(-i) (S,a(i),a( i))	i
E∏(i),∏(-i) [•]= En(i),μ[ ρπ(i) ,μ(s,a(i),a(-i))	∙ J-
Proof. Substituting π(-i) with μ in Eq. (9) by importance sampling.	□
1 Note that Ho & Ermon (2016) proved the conclusion under the goal to minimize the cost instead of maxi-
mizing the reward of an agent.
4
Published as a conference paper at ICLR 2020
Proposition 2 raises an important point that a term of importance weight can quantify the demon-
strator opponents. By replacing πE(-i) with π(-i), Eq. (11) is equivalent with
min max -λH(π(i)) + EπE
π(i) D(i)	E
hlog D(i)(s, a(i), a(-i))i + Eπ(i),π(-i) hα log (1 - D(i)(s, a(i), a(-i)))i
(12)
ρπ(i) π(-i) (s,a(i),a(-i))
where α = ；E )(§ ɑ(名)ɑ(_q)is the importance sampling weight. In practice, it is challenging to
estimate the densities and the learning methods might suffer from large variance. Thus, we fix α = 1
in our implementation, and as the experimental results have shown, it has no significant influences
on performance. Besides, a similar approach can be found in Kostrikov et al. (2018).
So far, we’ve built a multi-agent imitation learning framework, which can be easily generalized to
correlated or non-correlated policy settings. No prior has to be considered in advance since the
discriminator is able to learn the implicit goal for each agent.
3.2	Learn with the Opponents Model
With the objective shown in Eq. (11), demonstrated interactions can be imitated by updating dis-
criminators to offer surrogate rewards and learning their policies alternately. Formally, the update
of discriminator for each agent i can be expressed as:
Vω JD (ω) =Es~p,a(-i)
~π(-i)
a(-i))Vωlog(1-Dω(i)(s,a(i),a(-i)))da(i)
+ E(s,a(i) ,aɪ) )~Ωe [Vω log D^) (s,a(i) ,。㈠))],
(13)
and the update of policy is:
vθ Jn⑹=Es……Jθ(i) Ljaa⑶ B a(-i))A(i)(s, a(i), a(-i))da(I- λvθ(i)H(πθi)),
(14)
where discriminator D (i) is parametrized by ω, and the policy π(i) is parametrized by θ. It is worth
noting that the agent i considers opponents’ action a(-i) while updating its policy and discriminator,
with integrating all its possible decisions to find the optimal response. However, it is unrealistic to
have the access to opponent joint policy π(a(-i) |s) for agent i. Thus, it is possible to estimate
opponents’ actions via approximating π(-i) (a(-i) |s) using opponent modeling. To that end, we
construct a function σ(i)(α(-i)∣s) : S X A⑴ × …× A(i-1) X A(i+1) ×∙∙∙× A(N) → [0,1]N-1,
as the approximation of opponents for each agent i. Then we rewrite Eq. (13) and Eq. (14) as:
vω JD (ω) ≈ Es~P,^(-i)~σ(i),a(i)~πθi) [J，) lθg(1 - Di) (s,α(i) ,&(-i) ))]
+ E(s,a(i),a(-i))~ΩE [Vω log D2\s, a⑺，。(一力]
(15)
and
VθJ∏(θ) ≈ Es~pa(-i)~σ(i) a(i)~∏(i) [Vθ(i) logπ(i)(a(i)∣s,^(-i))A(i)(s,a(i),^(-i))i - >λVgH(π(i))
(16)
respectively. Therefore, each agent i must infer the opponents model σ(i) to approximate the un-
observable policies π(-i), which can be achieved via supervised learning. Specifically, we learn in
discrete action space by minimizing a cross-entropy (CE) loss, and a mean-square-error (MSE) loss
in continuous action space:
L = (2 Es-p [∣∣σ(i) (a(-i)∣s) — π(-i)(a(-i)∣s)∣∣2],
(Es~p [π(-i)(a(-i)∣s)logσ(i)(a(-i)∣s)],
continuous action space
discrete action space.
(17)
With opponents modeling, agents are able to be trained in a fully decentralized manner. We name
our algorithm as Decentralized Adversarial Imitation Learning with Correlated policies (Correlated
DAIL, a.k.a. CoDAIL) and present the training procedure in Appendix Algo. 1, which can be easily
scaled to a distributed algorithm. As a comparison, we also present a non-correlated DAIL algorithm
with non-correlated policy assumption in Appendix Algo. 2.
5
Published as a conference paper at ICLR 2020
3.3	Theoretical Analysis
In this section, we prove that the reinforcement learning objective against demonstrator counterparts
shown in the last section is essentially equivalent to reaching an -NE.
Since we fix the policies of agents -i as πE(-i), the RL procedure mentioned in Eq. (5) can be
regarded as a single-agent RL problem. Similarly, with a fixed πE(-i), the IRL process of Eq. (6) is
cast to a single-agent IRL problem, which recovers an optimal reward function rf) which achieves
the best performance following the joint action πE . Thus we have
RL(i)(r[i)) = argmaxλH(π(i)) + E ⑸ —)[r(i)(s, a(i), a(-i))]
π(i)	π ,πE	(18)
= πE(i) .
We can also rewrite Eq. (18) as
λH(πE(i)) + Eπ(i),π(-i)[r(i)(s, a(i), a(-i))] ≥ λH(π(i)) + Eπ(i),π(-i)[r(i)(s, a(i), a(-i))]	(19)
for all π(i) ∈ Π(i), which is equivalent to
∞
Ea(iγ,a(-i)〜∏E-i),so=s X Y tr(i)(st,a(i),a(-i)) ≥	QO)
t=0
∞
Ea(i)〜∏(i),a(-i)〜πj),s0=s X Y君/-1 + λ(H(∏⑴)-H(∏E))), ∀∏⑺ ∈ Π⑴.
E	t=0
Given the value function defined in Eq. (1) for each agent i, for H (π(i))-H (πE(i)) < 0, ∀π(i) ∈ Π(i),
we have
v(i)(s, πE(i), πE(-i)) ≥ v(i)(s, π(i), πE(-i)) - λ(H(πE(i)) - H(π(i))).	(21)
For H(π(i)) - H (πE(i)) ≥ 0, ∀π(i) ∈ Π(i) we have
v(i)(s, πE(i), πE(-i)) ≥ v(i)(s, π(i), πE(-i)) + λ(H(π(i)) - H(πE(i)))	(22)
≥ v(i)(s, π(i), πE(-i)) - λ(H(π(i)) - H(πE(i))) .
Let = λmax nH (π (i)) - H (πE(i)), ∀π(i) ∈ Π(i) o, then we finally obtain
v(i) (s, πE(i), πE(-i)) ≥ v(i) (s, π(i), πE(-i)) - , ∀π(i) ∈ Π(i) ,	(23)
which is exactly the -NE defined in Definition 1. We can always prove that is bounded in small
values such that the -NE solution concept is meaningful. Generally, random policies that keep vast
entropy are not always considered as sub-optimal solutions or demonstrated policies πE(i) in most
reinforcement learning environments. As we do not require those random policies, we can remove
them from the candidate policy set Π(i), which indicates that H(π(i)) is bounded in small values,
so as . Empirically, we adopt a small λ, and attain the demonstrator policy πE with an efficient
learning algorithm to become a close-to-optimal solution.
Thus, we conclude that the objective of our CoDAIL assumes that demonstrated policies institute
an -NE solution concept (but not necessarily unique) that can be controlled the hyperparameter λ
under some specific reward function, from which the agent learns a policy. It is worth noting that Yu
et al. (2019) claimed that NE is incompatible with maximum entropy inverse reinforcement learning
(MaxEnt IRL) because NE assumes that the agent never takes sub-optimal actions. Nevertheless,
we prove that given demonstrator opponents, the multi-agent MaxEnt IRL defined in Eq. (6) is
equivalent to finding an -NE.
6
Published as a conference paper at ICLR 2020
4	Related Work
Albeit non-correlated policy learning guided by a centralized critic has shown excellent properties
in couple of methods, including MADDPG (Lowe et al., 2017), COMA (Foerster et al., 2018), MA
Soft-Q (Wei et al., 2018), it lacks in modeling complex interactions because its decisions making
relies on the independent policy assumption which only considers private observations while ignores
the impact of opponent behaviors. To behave more rational, agents must take other agents into con-
sideration, which leads to the studies of opponent modeling (Albrecht & Stone, 2018) where an agent
models how its opponents behave based on the interaction history when making decisions (Claus &
Boutilier, 1998; Greenwald et al., 2003; Wen et al., 2019; Tian et al., 2019).
For multi-agent imitation learning, however, prior works fail to learn from complicated demon-
strations, and many of them are bounded with particular reward assumptions. For instance, Bhat-
tacharyya et al. (2018) proposed Parameter Sharing Generative Adversarial Imitation Learning (PS-
GAIL) that adopts parameter sharing trick to extend GAIL to handle multi-agent problems directly,
but it does not utilize the properties of Markov games with strong constraints on the action space and
the reward function. Besides, there are many works built-in Markov games that are restricted un-
der tabular representation and known dynamics but with specific prior of reward structures, as fully
cooperative games (Barrett et al., 2017; Le et al., 2017; SoSic et al., 2016; Bogert & Doshi, 2014),
two-player zero-sum games (Lin et al., 2014), two-player general-sum games (Lin et al., 2018), and
linear combinations of specific features (Reddy et al., 2012; Waugh et al., 2013).
Recently, some researchers take advantage of GAIL to solve Markov games. Inspired by a spe-
cific choice of Lagrange multipliers for a constraint optimization problem (Yu et al., 2019), Song
et al. (2018) derived a performance gap for multi-agent from NE. It proposed multi-agent GAIL
(MA-GAIL), where they formulated the reward function for each agent using private actions and
observations. As an improvement, Yu et al. (2019) presented a multi-agent adversarial inverse rein-
forcement learning (MA-AIRL) based on logistic stochastic best response equilibrium and MaxEnt
IRL. However, both of them are inadequate to model agent interactions with correlated policies with
independent discriminators. By contrast, our approach can generalize correlated policies to model
the interactions from demonstrations and employ a fully decentralized training procedure without to
get access to know the specific opponent policies.
Except for the way of modeling multi-agent interactions as recovering agents’ policies from demon-
strations, which can regenerate similar interacted data, some other works consider different effects
of interactions. Grover et al. (2018) proposed to learn a policy representation function of the agents
based on their interactions and sets of generalization tasks using the learned policy embeddings.
They regarded interactions as the episodes that contain only k (in the paper they used 2 agents),
which constructs an agent-interaction graph. Different from us, they focused on the potential re-
lationships among agents to help characterize agent behaviors. Besides, Kuhnt et al. (2016) and
Gindele et al. (2015) proposed to use the Dynamic Bayesian Model that describes physical rela-
tionships among vehicles and driving behaviors to model interaction-dependent behaviors in au-
tonomous driving scenario.
Correlated policy structures that can help agents consider the influence of other agents usually need
opponents modeling (Albrecht & Stone, 2018) to infer others’ actions. Opponent modeling has a
rich history in MAL (Billings et al., 1998; Ganzfried & Sandholm, 2011), and lots of researches have
recently worked out various useful approaches for different settings in deep MARL, e.g., DRON (He
et al., 2016) and ROMMEO (Tian et al., 2019). In this paper, we focus on imitation learning with
correlated policies, and we choose a natural and straightforward idea of opponent modeling that
learning opponents’ policies in the way of supervised learning with historical trajectories. Opponent
models are used both in the training and the execution stages.
5	Experiments
5.1	Experimental Settings
Environment Description We test our method on the Particle World Environments (Lowe et al.,
2017), which is a popular benchmark for evaluating multi-agent algorithms, including several co-
operative and competitive tasks. Specifically, we consider two cooperative scenarios and two com-
7
Published as a conference paper at ICLR 2020
Table 1: Average reward gaps between demonstrators and learned agents in 2 cooperative tasks. Means and
standard deviations are taken across different random seeds.
Algorithm	Coop.-Comm.	Coop.-Navi.
Demonstrators	0 ± 0	0 ± 0
MA-AIRL	0.780 ± 0.917	6.696 ± 3.646
MA-GAIL	0.638 ± 0.624	7.596 ± 3.088
NC-DAIL	0.692 ± 0.597	6.912 ± 3.971
CoDAIL	0.632 ± 0.685	6.249 ± 2.779
Random	186.001 ± 16.710	322.1124 ± 15.358
Table 2: Average reward gaps between demonstrators and learned agents in 2 competitive tasks, where ‘agent+’
and ‘agent-’ represent 2 teams of agents and ‘total’ is their sum. Means and standard deviations are taken across
different random seeds.
Algorithm	Keep-away			Pred.-Prey		
	Total	Agent+	Agent-	Total	Agent+	Agent-
Demonstrators	0 ± 0	0±0	0 ± 0	0 ± 0	0±0	0±0
MA-AIRL	12.273 ± 1.817	4.149 ± 1.912	8.998 ± 4.345	279.535 ± 77.903	35.100 ± 1.891	174.235 ± 73.168
MA-GAIL	1.963 ± 1.689	1.104 ± 1.212	1.303 ± 0.798	15.788 ± 10.887	4.800 ± 2.718	8.826 ± 3.810
NC-DAIL	1.805 ± 1.695	1.193 ± 0.883	1.539 ± 1.188	27.611 ± 14.645	8.260 ± 7.087	6.975 ± 5.130
CoDAIL	0.269 ± 0.078	0.064 ± 0.041	0.219 ± 0.084	10.456 ± 6.762	4.500 ± 3.273	4.359 ± 2.734
Random	28.272 ± 2.968	25.183 ± 2.150	53.455 ± 2.409	100.736 ± 6.870	37.980 ± 2.396	13.204 ± 8.444
petitive ones as follows: 1) Cooperative-communication, with 2 agents and 3 landmarks, where an
unmovable speaker knowing the goal, cooperates with a listener to reach a particular landmarks
who achieves the goal only through the message from the speaker; 2) Cooperative-navigation, with
3 agents and 3 landmarks, where agents must cooperate via physical actions and it requires each
agent to reach one landmark while avoiding collisions; 3) Keep-away, with 1 agent, 1 adversary and
1 landmark, where the agent has to get close to the landmark, while the adversary is rewarded by
pushing away the agent from the landmark without knowing the target; 4) Predator-prey, with 1 prey
agent with 3 adversary predators, where the slower predactor agents must cooperate to chase the
prey agent that moves faster and try to run away from the adversaries.
Experimental Details We aim to compare the quality of interactions modeling in different aspects.
To obtain the interacted demonstrations sampled from correlated policies, we train the demonstra-
tor agent via a MARL learning algorithm with opponents modeling to regard others’ policies into
one’s decision making, since the ground-truth reward in those simulated environments is accessi-
ble. Specifically, we modify the multi-agent version ACKTR (Wu et al., 2017; Song et al., 2018),
an efficient model-free policy gradient algorithm, by keeping an auxiliary opponents model and a
conditioned policy for each agent, which can transform the original centralized on-policy learning
algorithm to be decentralized. Note that we do not necessarily need experts that can do well in our
designated environments. Instead, any demonstrator will be treated as it is from an -NE strategy
concept under some unknown reward functions, which will be recovered by the discriminator. In
our training procedure, we first obtain demonstrator policies induced by the ground-truth rewards
and then generate demonstrations, i.e., the interactions data for imitation training. Then we train
the agents through the surrogate rewards from discriminators. We compare CoDAIL with MA-
AIRL, MA-GAIL, non-correlated DAIL (NC-DAIL) (the only difference between MA-GAIL and
NC-DAIL is whether the reward function depends on joint actions or individual action) and a random
agent. We do not apply any prior to the reward structure for all tasks to let the discriminator learn
the implicit goals. All training procedures are pre-trained via behavior cloning to reduce the sample
complexity, and we use 200 episodes of demonstrations, each with a maximum of 50 timesteps.
5.2	Reward Gap
Tab. 1 and Tab. 2 show the averaged absolute differences of reward for learned agents compared to
the demonstrators in cooperative and competitive tasks, respectively. The learned interactions are
considered superior if there are smaller reward gaps. Since cooperative tasks are reward-sharing,
we show only a group reward for each task in Tab. 1. Compared to the baselines, CoDAIL achieves
smaller gaps in both cooperative and competitive tasks, which suggests that our algorithm has a
8
Published as a conference paper at ICLR 2020
Table 3: KL divergence of learned agents position distribution and demonstrators position distribution from an
individual perspective in different scenarios. ‘Total’ is the KL divergence for state-action pairs of all agents,
and ‘Per’ is the averaged KL divergence of each agent. Experiments are conducted under the same random
seed. Note that unmovable agents are not recorded since they never move from the start point, and there is only
one movable agent in Cooperative-communication.
Algorithm	Coop.-Comm.	Coop.-Navi.		Keep-away		Pred.-Prey	
	Total/Per	Total	Per	Total	Per	Total	Per
Demonstrators	0	0	0	0	0	0	0
MA-AIRL	35.525	18.071	47.241	69.146	98.248	71.568	118.511
MA-GAIL	34.681	15.034	45.550	51.721	69.820	9.998	27.116
NC-DAIL	38.002	16.202	46.040	46.563	61.780	16.698	33.307
CoDAIL	6.427	9.033	23.100	3.113	5.735	8.621	22.600
Random	217.456	174.892	221.209	191.344	234.829	37.555	82.361
robust imitation learning capability of modeling the demonstrated interactions. It is also worth
noting that CoDAIL achieves higher performance gaps in competitive tasks than cooperative ones,
for which we think that conflict goals motivate more complicated interactions than a shared goal.
Besides, MA-GAIL and NC-DAIL are about the same, indicating that less important is the surrogate
reward structure on these multi-agent scenarios. To our surprise, MA-AIRL does not perform well in
some environments, and even fails in Predator-prey. We list the raw obtained rewards in Appendix C,
and we provide more hyperparameter sensitivity results in Appendix D.
5.3	Divergence over Interactions
Since we aim to recover the interactions of agents generated by the learned policies, it is proper
to evaluate the relevance between distributions of regenerated interactions and demonstration data.
Specifically, we collect positions of agents over hundreds of state-action tuples, which can be re-
garded as the low-dimension projection of the state-action interactions. We start each episode from
a different initial state but the same for each algorithm in one episode. We run all the experiments
under the same random seed, and collect positions of each agent in the total 100 episodes, each with
a maximum of 50 timesteps.
We first estimate the distribution of position (x, y) via Kernel Density Estimation (KDE) (Rosen-
blatt, 1956) with Gaussian kernel to compute the Kullback-Leibler (KL) divergence between the
generated interactions with the demonstrated ones, shown in Tab. 3. It is evident that in terms of
the KL divergence between regenerated interactions with demonstrator interactions, CoDAIL gen-
erates the interaction data that obtains the minimum gap with the demonstration interaction, and
highly outperforms other baseline methods. Besides, MA-GAIL and NC-DAIL reflect about-the-
same performance to model complex interactions, while MA-AIRL behaves the worst, even worse
than random agents on Predator-prey.
5.4	Visualizations of Interactions
To further understand the interactions generated by learned policies compared with the demonstra-
tors, we visualize the interactions for demonstrator policies and all learned ones. We plot the density
distribution of positions, (x, y) and marginal distributions of x-position and y-position. We illus-
trate the results conducted on Keep-away in Fig. 1, other scenarios can be found in the Appendix E.
Higher frequency positions in collected data are colored darker in the plane, and higher the value
with respect to its marginal distributions.
As shown in Fig. 1, the interaction densities of demonstrators and CoDAIL agents are highly similar
(and with the smallest KL divergence), which tend to walk in the right-down side. In contrast, other
learned agents fail to recover the demonstrator interactions. It is worth noting that even different
policies can interact to earn similar rewards, but still keep vast differences among their generated
interactions. Furthermore, such a result reminds us that the real reward is not the best metric to
evaluate the quality of modeling the demonstrated interactions or imitation learning (Li et al., 2017).
9
Published as a conference paper at ICLR 2020
(a) Demonstrators (KL = 0)
(b) MA-GAIL(KL = 51.721)	(C) MA-AIRL(KL = 69.146)
Figure 1: The density and marginal distribution of agent positions, in 100 repeated episodes with different
initialized states, generated from different learned poliCies upon Keep-away. The top row of eaCh sub-figure is
drawn from state-aCtion pairs of all agents. Meanwhile, the bottom row explains for eaCh individual (KL means
the KL divergenCe between generated interaCtions shown in the top row and the demonstrators).
6	Conclusion
⑴ Random(KL= 191.344)
In this paper, we foCus on modeling Complex multi-agent interaCtions via imitation learning on
demonstration data. We develop a deCentralized adversarial imitation learning algorithm with Corre-
lated poliCies (CoDAIL) with approximated opponents modeling. CoDAIL allows for deCentralized
training and exeCution and is more Capable of modeling Correlated interaCtions from demonstra-
tions shown by multi-dimensional Comparisons against other state-of-the-art multi-agent imitation
learning methods on several experiment sCenarios. In the future, we will Consider Covering more im-
itation learning tasks and modeling the latent variables of poliCies for diverse multi-agent imitation
learning.
Acknowledgement
We sinCerely thank Yaodong Yang for helpful disCussion. The Corresponding author Weinan Zhang
is supported by NSFC (61702327, 61772333, 61632017). The author Minghuan Liu is supported by
Wu Wen Jun Honorary DoCtoral SCholarship, AI Institute, Shanghai Jiao Tong University.
10
Published as a conference paper at ICLR 2020
References
Stefano V Albrecht and Peter Stone. Autonomous agents modelling other agents: A comprehensive
survey and open problems. Artificial Intelligence, 258:66-95, 2018.
Samuel Barrett, Avi Rosenfeld, Sarit Kraus, and Peter Stone. Making friends on the fly: Cooperating
with new teammates. Artificial Intelligence, 242:132-171, 2017.
Raunak P Bhattacharyya, Derek J Phillips, Blake Wulfe, Jeremy Morton, Alex Kuefler, and Mykel J
Kochenderfer. Multi-Agent imitation learning for driving simulation. In 2018 IEEE/RSJ Interna-
tional Conference on Intelligent Robots and Systems (IROS), pp. 1534-1539. IEEE, 2018.
Darse Billings, Denis Papp, Jonathan Schaeffer, and Duane Szafron. Opponent modeling in poker.
Aaai/iaai, 493:499, 1998.
Michael Bloem and Nicholas Bambos. Infinite time horizon maximum causal entropy inverse rein-
forcement learning. In 53rd IEEE Conference on Decision and Control, pp. 4911-4916. IEEE,
2014.
Kenneth Bogert and Prashant Doshi. Multi-robot inverse reinforcement learning under occlusion
with interactions. In Proceedings of the 2014 international conference on Autonomous agents
and Multi-Agent Systems, pp. 173-180. International Foundation for Autonomous Agents and
Multiagent Systems, 2014.
Lucian Bu, Robert Babu, Bart De Schutter, et al. A comprehensive survey of multiagent reinforce-
ment learning. IEEE Transactions on Systems, Man, and Cybernetics, Part C (Applications and
Reviews), 38(2):156-172, 2008.
TianshU Chu, Jie Wang, Lara Codeca, and Zhaojian Li. Multi-Agent deep reinforcement learning
for large-scale traffic signal control. IEEE Transactions on Intelligent Transportation Systems,
2019.
Caroline Claus and Craig Boutilier. The dynamics of reinforcement learning in cooperative multia-
gent systems. AAAI/IAAI, 1998(746-752):2, 1998.
Jakob N Foerster, Gregory Farquhar, Triantafyllos Afouras, Nantas Nardelli, and Shimon White-
son. Counterfactual multi-Agent policy gradients. In Proceedings of the 32th Conference on
Association for the Advancement of Artificial Intelligence, 2018.
Sam Ganzfried and Tuomas Sandholm. Game theory-based opponent modeling in large imperfect-
information games. In The 10th International Conference on Autonomous Agents and Multiagent
Systems-Volume 2, pp. 533-540. International Foundation for Autonomous Agents and Multia-
gent Systems, 2011.
Tobias Gindele, Sebastian Brechtel, and Rudiger Dillmann. Learning driver behavior models from
traffic observations for decision making and planning. IEEE Intelligent Transportation Systems
Magazine, 7(1):69-79, 2015.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,
Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Proceedings of the 28th
Conference on Advances in Neural Information Processing Systems, pp. 2672-2680, 2014.
Amy Greenwald, Keith Hall, and Roberto Serrano. Correlated q-Learning. In ICML, volume 3, pp.
242-249, 2003.
Aditya Grover, Maruan Al-Shedivat, Jayesh Gupta, Yuri Burda, and Harrison Edwards. Learning
policy representations in multiagent systems. In International Conference on Machine Learning,
pp. 1797-1806, 2018.
Tuomas Haarnoja, Haoran Tang, Pieter Abbeel, and Sergey Levine. Reinforcement learning with
deep energy-based policies. In Proceedings of the 34th International Conference on Machine
Learning, volume 70, pp. 1352-1361. JMLR. org, 2017.
11
Published as a conference paper at ICLR 2020
He He, Jordan Boyd-Graber, Kevin Kwok, and Hal DaUme III. Opponent modeling in deep rein-
forcement learning. In International Conference on Machine Learning, pp. 1804-1813, 2016.
Jonathan Ho and Stefano Ermon. Generative adversarial imitation learning. In Proceedings of the
30th Conference on Advances in Neural Information Processing Systems, pp. 4565-4573, 2016.
Max Jaderberg, Wojciech M Czarnecki, Iain DUnning, LUke Marris, GUy Lever, Antonio Garcia
Castaneda, Charles Beattie, Neil C Rabinowitz, Ari S Morcos, Avraham RUderman, et al. HUman-
level performance in first-person mUltiplayer games with popUlation-based deep reinforcement
learning. arXiv preprint arXiv:1807.01281, 2018.
Ilya Kostrikov, KUmar Krishna Agrawal, Debidatta Dwibedi, Sergey Levine, and Jonathan Tomp-
son. Discriminator-Actor-Critic: Addressing sample inefficiency and reward bias in adversarial
imitation learning. 2018.
Florian Kuhnt, Jens Schulz, Thomas Schamm, and J Marius Zollner. Understanding interactions
between traffic participants based on learned behaviors. In 2016 IEEE Intelligent Vehicles Sym-
posium (IV), pp. 1271-1278. IEEE, 2016.
Hoang M Le, Yisong Yue, Peter Carr, and Patrick Lucey. Coordinated multi-Agent imitation learn-
ing. In Proceedings of the 34th International Conference on Machine Learning-Volume 70, pp.
1995-2003. JMLR. org, 2017.
Minne Li, Zhiwei Qin, Yan Jiao, Yaodong Yang, Jun Wang, Chenxi Wang, Guobin Wu, and Jieping
Ye. Efficient ridesharing order dispatching with mean field multi-Agent reinforcement learning.
In Proceedings of the 30th conference on International World Wide Web Conferences, pp. 983-
994. ACM, 2019.
Yunzhu Li, Jiaming Song, and Stefano Ermon. Infogail: Interpretable imitation learning from vi-
sual demonstrations. In Proceedings of the 31st Conference on Advances in Neural Information
Processing Systems, pp. 3812-3822, 2017.
Xiaomin Lin, Peter A Beling, and Randy Cogill. Multi-Agent inverse reinforcement learning for
zero-Sum games. arXiv preprint arXiv:1403.6508, 2014.
Xiaomin Lin, Stephen C Adams, and Peter A Beling. Multi-Agent inverse reinforcement learning
for general-sum stochastic games. arXiv preprint arXiv:1806.09795, 2018.
Michael L Littman. Markov games as a framework for multi-Agent reinforcement learning. In
Proceedings ofthe 11st Machine Learning International Conference, pp. 157-163. Elsevier, 1994.
Ryan Lowe, Yi Wu, Aviv Tamar, Jean Harb, OpenAI Pieter Abbeel, and Igor Mordatch. Multi-
Agent actor-Critic for mixed cooperative-Competitive environments. In Proceedings of the 31st
Conference on Advances in Neural Information Processing Systems, pp. 6379-6390, 2017.
James Martens and Roger Grosse. Optimizing neural networks with kronecker-factored approxi-
mate curvature. In Proceedings of the 32nd conference on International Conference on Machine
Learning, pp. 2408-2417, 2015.
John Nash. Non-Cooperative games. Annals of Mathematics, pp. 286-295, 1951.
Andrew Y Ng, Stuart J Russell, et al. Algorithms for inverse reinforcement learning. In Proceedings
of the 17th International Conference on Machine Learning, volume 1, pp. 2, 2000.
OpenAI. Openai five. http://blog.openai.com/openai-five/, 2018.
Dean A Pomerleau. Efficient training of artificial neural networks for autonomous navigation. Neu-
ral Computation, 3(1):88-97, 1991.
Tummalapalli Sudhamsh Reddy, Vamsikrishna Gopikrishna, Gergely Zaruba, and Manfred Huber.
Inverse reinforcement learning for decentralized non-Cooperative multiagent systems. In 2012
IEEE International Conference on Systems, Man, and Cybernetics (SMC), pp. 1930-1935. IEEE,
2012.
12
Published as a conference paper at ICLR 2020
Murray Rosenblatt. Remarks on some nonparametric estimates of a density function. The Annals of
Mathematical Statistics,pp. 832-837,1956.
StePhane Ross and Drew Bagnell. Efficient reductions for imitation learning. In Proceedings ofthe
13th International Conference on Artificial Intelligence and Statistics, pp. 661-668, 2010.
Stephane Ross, Geoffrey Gordon, and Drew Bagnell. A reduction of imitation learning and struc-
tured prediction to no-Regret online learning. In Proceedings of the 14th International Conference
on Artificial Intelligence and Statistics, pp. 627-635, 2011.
Stuart J Russell. Learning agents for uncertain environments. In Proceedings of the 11st Annual
Conference on Computational Learning Theory, volume 98, pp. 101-103, 1998.
Jiaming Song, Hongyu Ren, Dorsa Sadigh, and Stefano Ermon. Multi-Agent generative adversarial
imitation learning. In Proceedings of the 32ed Conference on Advances in Neural Information
Processing Systems, pp. 7461-7472, 2018.
Adrian Sosic, Wasiur R KhudaBukhsh, Abdelhak M Zoubir, and Heinz Koeppl. Inverse reinforce-
ment learning in swarm systems. stat, 1050:17, 2016.
Zheng Tian, Ying Wen, Zhichen Gong, Faiz Punakkath, Shihao Zou, and Jun Wang. A regularized
opponent model with maximum entropy objective. arXiv preprint arXiv:1905.08087, 2019.
Kevin Waugh, Brian D Ziebart, and J Andrew Bagnell. Computational rationalization: The inverse
equilibrium problem. arXiv preprint arXiv:1308.3506, 2013.
Ermo Wei, Drew Wicke, David Freelan, and Sean Luke. Multiagent soft q-Learning. In 2018 AAAI
Spring Symposium Series, 2018.
Ying Wen, Yaodong Yang, Rui Luo, Jun Wang, and Wei Pan. Probabilistic recursive reasoning for
multi-Agent reinforcement learning. arXiv preprint arXiv:1901.09207, 2019.
Yuhuai Wu, Elman Mansimov, Roger B Grosse, Shun Liao, and Jimmy Ba. Scalable trust-Region
method for deep reinforcement learning using kronecker-Factored approximation. In Proceedings
of the 31st Advances in Neural Information Processing Systems, pp. 5279-5288, 2017.
Lantao Yu, Jiaming Song, and Stefano Ermon. Multi-Agent adversarial inverse reinforcement learn-
ing. arXiv preprint arXiv:1907.13220, 2019.
13
Published as a conference paper at ICLR 2020
Appendices
A Algorithm Outlines
A.1 CoDAIL Algorithm
Algo. 1 demonstrates the outline for our CoDAIL algorithm with non-correlated policy structure
defined in Eq. (4), where we approximate the opponents model σ(i) (a(-i) |s), improve the discrimi-
nator D(i) and the policy π(i) iteratively.
Algorithm 1 CoDAIL Algorithm
1: Input: Expert interactive demonstrations Ωe 〜 ∏e, N policy parameters θ(1 2 3 4),…，θ(N), N
value parameters φ(1), ..., φ(N), N opponents models parameters ψ(1), ..., ψ(N) and N discrim-
inator parameters ω(1), ..., ω(N) ;
2: for k = 0, 1, 2, . . . do
3: Sample interactions among N agents Ωk 〜∏, where ∏ is in correlated policy structure and
each agent i utilizes its opponents model σ(i) to help making decisions.
4:	for agent i = 1, 2, . . . , N do
5:	Use state-action pairs (s, a(-i)) ∈ Ωk to update ψ(i) to minimize the objective as shown in
Eq. (17).
6:	For every state-action pair (s, a(i)) ∈ Ωk, sample estimated opponent policies from oppo-
nents model: ^(-i) 〜σ(i)(a(i)∣s), and update ω(i) with the gradient as ShoWninEq.(15).
7:	Compute advantage estimation A(i) for each tuple (s, a(i),, ^(-i)) with surrogate reward
function r(i)(s, a(i),^(-i)) = log(D^^()i)(s, a(i),^(-i))) — log(1 — D(ii) (s, a(i),^(-i)))
T-1
A(iKst,ati, a(-i)) = X (Ytr ⑴ (s 6 7 8 9 10 11t+k ,a(+k ,a(-k))) + Y T V鼠 (s,aT-iι)	(24)
k=0
— Vφt(ii))(s,att--i1))	(25)
8:	Update φti) to minimize the objective:
T 2
L(φ(i)) = X Y tr(i)(s,ati),at-i)) - V ⑴(st,a 匚h	(26)
t=0
9:	Update θti) following the gradient shown in Eq. (16):
Es 〜P,a(-i)〜,Ga® 〜n(i)[J® log ∏θi)(a(i)∣s, af^^GaQ&t-i))i "θ(iH (∏(i))
(27)
10:	end for
11: end for
14
Published as a conference paper at ICLR 2020
A.1.1 NC-DAIL Algorithm
We outline the step by step NC-DAIL algorithm with non-correlated decomposition of joint policy
defined in Eq. (3) in Algo. 2.
Algorithm 2 NC-DAIL Algorithm
1:	Input: Expert interactive demonstrations Ωe 〜 ∏e, N policy parameters θ(1),…，θ(N), N
value parameters φ(1), ..., φ(N) and N discriminator parameters ω(1), ..., ω(N);
2:	for k = 0, 1, 2, . . . do
3:	Sample interactions between N agents Ωk 〜∏, where ∏ is in non-correlated policy structure.
4:	for agent i = 1, 2, . . . , N do
5:	Use (s, a⑻,a(-i)) ∈ Ωkto update ω(i)with the gradient:
EΩk [Vω log(D(X (s, a(i),a(-i)))i + EΩe 凡⑸ log(D^ζ (s, a⑺,a(-i)))] .	(28)
6:	Compute advantage estimation A(i) for (s, a(i),a(-i)) ∈ Ωk with surrogate reward func-
tion r(i)(s, a(i), a(-i)) = log(Dω(i()i)(s,a(i), a(-i))) - log(1 - Dω(i()i) (s, a(i), a(-i)))
T-1
A(i)(st,at(i),at(-i))= X(γtr(i)(st+k, at(i+)k, at(+-ki))) + γT Vφ((ii))(s, a(T--i)1)	(29)
k=0
- Vφ((ii))(s,at(--i1))	(30)
7:	Update φ(i) to minimize the objective:
T	2
L(Φ(i)) = X Y tr⑴(s,a(i),at-i))-V ⑻(SD)	(31)
t=0
8:	Update θ(i) by taking a gradient step with:
EΩk [Vθ(i) log π⑴(a⑴,S)A⑴(s, a)i - XV©® H(∏θi)) .	(32)
9:	end for
10:	end for * &
B Model Architectures
During our experiments, we use two layer MLPs with 128 cells in each layer, for policy networks,
value networks, discriminator networks and opponents model networks on all scenarios. Specifically
for opponents models, we utilize a multi-head-structure network, where each head predicts each
opponent’s action separately, and we get the overall opponents joint action a(-i) by concatenating
all actions. The batch size is set to 1000. The policy is trained using K-FAC optimizer (Martens
& Grosse, 2015) with learning rate of 0.1 and with a small λ of 0.05. All other parameters for K-
FAC optimizer are the same in (Wu et al., 2017). We train each algorithm for 55000 epochs with 5
random seeds to gain its average performance on all environments.
15
Published as a conference paper at ICLR 2020
C	Raw Results
We list the raw obtained rewards of all algorithms in each scenarios.
Table 4: Raw average total rewards in 2 comparative tasks. Means and standard deviations are taken across
different random seeds.
Algorithm	Coop.-Comm.	Coop.-Navi.
Demonstrators	-24.560 ± 1.213	-178.597 ± 6.383
MA-AIRL	-25.366 ± 1.492	-172.733 ± 5.595
MA-GAIL	-25.081 ± 1.421	-172.169 ± 4.105
NC-DAIL	-25.177 ± 1.371	-171.685 ± 4.591
CoDAIL	-25.107 ± 1.486	-183.846 ± 5.728
Random	-247.606 ± 17.842	-1139.569 ± 19.192
Table 5: Raw average rewards of each agent in 2 competitive tasks, where agent+ and agent- represent 2 teams
of agents and total is their sum. Means and standard deviations are taken across different random seeds.
Algorithm		Keep-away		
		Total	Agent+	Agent-
Demonstrators		-18.815 ± 0.909	-12.092 ± 0.617	-6.723 ± 0.430
-MA-AIRL- MA-GAIL NC-DAIL CoDAIL		-31.088 ± 2.371 -20.778 ± 0.994 -20.619 ± 0.957 -19.084 ± 0.882	-15.367 ± 3.732 -12.818 ± 1.105 -12.357 ± 1.424 -12.142 ± 0.578	-15.721 ± 4.448 -7.959 ± 0.796 -8.262 ± 1.310 -6.942 ± 0.433
Random		-47.086 ± 2.485	13.091 ± 2.03T-	-60.177 ± 2.225
Algorithm	Pred.-Prey			
		Total	Agent+	Agent-
Demonstrators	65.202 ± 18.661		44.820 ± 4.663	-69.258 ± 5.361
-MA-AIRL- MA-GAIL NC-DAIL CoDAIL	-210.546 ± 80.333 65.202 ± 18.661 59.553 ± 30.684 79.445 ± 5.913		8.040 ± 3.626 44.820 ± 4.663 42.320 ± 10.323 47.480 ± 4.067	-234.666 ± 71.165 -69.258 ± 5.361 -67.407 ± 3.700 -61.909 ± 6.367
Random		-31.747 ± 7.865	5.160 ± 1.170~~	-47.227 ± 7.830
16
Published as a conference paper at ICLR 2020
D Hyperparameter Sensitivity
Table 6: Results of different training frequency (1:4, 1:2, 1:1, 2:1, 4:1) of D and G on Communication-
navigation. Means and standard deviations are taken across different random seeds.
Training Frequency	Total Reward Difference
1:4	-2541.144 ± 487.711-
1:2	12.004 ± 5.496
1:1	6.249 ± 2.779
2:1	1136.255 ± 1502.604
4:1	2948.878 ± 1114.528
8uβjqy-α PJBMeH -SOH
14
12
10
8
3
4
2
0.0	02	0.4	0.6	0.8	10
Entropy CoeffiCient λ
Figure 2: Results of different entropy coefficient λ.
We evaluate how the stability of our algorithm when the hyperparameters change during our ex-
periments on Communication-navigation. Tab. 6 shows the total reward difference between learned
agents and demonstrators when we modify the training frequency of D and G (i.e., the policy),
which indicates that the frequencies of D and G are more stable when D is trained slower than G,
and the result reaches a relative better performance when the frequency is 1:2 or 1:1. Fig. 2 illus-
trates that the choice of λ has little effect on the total performance. The reason may be derived from
the discrete action space in this environment, where the policy entropy changes gently.
17
Published as a conference paper at ICLR 2020
E	Interaction Visualizations upon Other Scenarios
We show the density of interactions for different methods along with demonstrator policies con-
ducted upon Cooperative-communication in Fig. 3.
(b) MA-GAIL (KL = 34.681)
(c) MA-AIRL (KL = 35.525)
(a) Demonstrators (KL = 0)
(d) CoDAIL (KL = 6.427)
(f) Random (KL = 217.456)
(e) NC-DAIL (KL = 38.002)
Figure 3: The density and marginal distribution of agents’ positions, (x, y), in 100 repeated episodes with differ-
ent initialized states, generated from different learned policies upon Cooperative-communication. Experiments
are done under the same random seed, and we only consider one movable agent. KL is the KL divergence
between generated interactions (top figure) with the demonstrators.
18
Published as a conference paper at ICLR 2020
We show the density of interactions for different methods along with demonstrator policies con-
ducted upon Cooperative-navigation in Fig. 4.
(b) MA-GAIL (KL = 15.034)
(a) Demonstrators (KL = 0)
(C) MA-AIRL (KL = 18.071)
(d) CoDAIL (KL = 9.033)
(e)	NC-DAIL (KL = 16.202)
(f)	Random (KL = 174.892)
Figure 4: The density and marginal distribution of agents’ positions, (x, y), in 100 repeated episodes with
different initialized states, generated from different learned poliCies upon Cooperative-navigation. Experiments
are done under the same random seed. The top of eaCh sub-figure is drawn from state-aCtion pairs of all agents
while the below explain for eaCh one. KL is the KL divergenCe between generated interaCtions (top figure) with
the demonstrators.
19
Published as a conference paper at ICLR 2020
We show the density of interactions for different methods along with demonstrator policies con-
ducted upon Predator-prey in Fig. 5.
(b) MA-GAIL (KL = 9.998)
(c) MA-AIRL (KL = 71.568)
(a) Demonstrators (KL = 0)
(d) CoDAIL (KL = 8.621)
(e) NC-DAIL (KL = 16.698)
Figure 5: The density and marginal distributions of agents’ positions, (x, y), in 100 repeated episodes with
different initialized states, generated from different learned policies upon Predator-prey. Experiments are con-
ducted under the same random seed. The top of each sub-figure is drawn from state-action pairs of all agents
while the below explains for each one. The KL term means the KL divergence between generated interactions
(top figure) with the demonstrators.
(f) Random (KL = 37.555)
20