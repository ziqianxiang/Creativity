Published as a conference paper at ICLR 2020
Provab le Benefit of Orthogonal Initializa-
tion in Optimizing Deep Linear Networks
Wei Hu
Princeton University
huwei@cs.princeton.edu
Lechao Xiao
Google Brain
xlc@google.com
Jeffrey Pennington
Google Brain
jpennin@google.com
Ab stract
The selection of initial parameter values for gradient-based optimization of deep
neural networks is one of the most impactful hyperparameter choices in deep
learning systems, affecting both convergence times and model performance. Yet
despite significant empirical and theoretical analysis, relatively little has been
proved about the concrete effects of different initialization schemes. In this work,
we analyze the effect of initialization in deep linear networks, and provide for the
first time a rigorous proof that drawing the initial weights from the orthogonal
group speeds up convergence relative to the standard Gaussian initialization with
iid weights. We show that for deep networks, the width needed for efficient con-
vergence to a global minimum with orthogonal initializations is independent of the
depth, whereas the width needed for efficient convergence with Gaussian initial-
izations scales linearly in the depth. Our results demonstrate how the benefits of a
good initialization can persist throughout learning, suggesting an explanation for
the recent empirical successes found by initializing very deep non-linear networks
according to the principle of dynamical isometry.
1 Introduction
Through their myriad successful applications across a wide range of disciplines, it is now well es-
tablished that deep neural networks possess an unprecedented ability to model complex real-world
datasets, and in many cases they can do so with minimal overfitting. Indeed, the list of practi-
cal achievements of deep learning has grown at an astonishing rate, and includes models capable
of human-level performance in tasks such as image recognition (Krizhevsky et al., 2012), speech
recognition (Hinton et al., 2012), and machine translation (Wu et al., 2016).
Yet to each of these deep learning triumphs corresponds a large engineering effort to produce such
a high-performing model. Part of the practical difficulty in designing good models stems from a
proliferation of hyperparameters and a poor understanding of the general guidelines for their selec-
tion. Given a candidate network architecture, some of the most impactful hyperparameters are those
governing the choice of the model’s initial weights. Although considerable study has been devoted
to the selection of initial weights, relatively little has been proved about how these choices affect
important quantities such as rate of convergence of gradient descent.
In this work, we examine the effect of initialization on the rate of convergence of gradient descent in
deep linear networks. We provide for the first time a rigorous proof that drawing the initial weights
from the orthogonal group speeds up convergence relative to the standard Gaussian initialization
with iid weights. In particular, we show that for deep networks, the width needed for efficient
convergence for orthogonal initializations is independent of the depth, whereas the width needed for
efficient convergence of Gaussian networks scales linearly in the depth.
Orthogonal weight initializations have been the subject of a significant amount of prior theoretical
and empirical investigation. For example, in a line of work focusing on dynamical isometry, it
was found that orthogonal weights can speed up convergence for deep linear networks (Saxe et al.,
2014; Advani & Saxe, 2017) and for deep non-linear networks (Pennington et al., 2018; Xiao et al.,
2018; Gilboa et al., 2019; Chen et al., 2018; Pennington et al., 2017; Tarnowski et al., 2019; Ling
& Qiu, 2019) when they operate in the linear regime. In the context of recurrent neural networks,
orthogonality can help improve the system’s stability. A main limitation of prior work is that it
1
Published as a conference paper at ICLR 2020
has focused almost exclusively on model’s properties at initialization. In contrast, our analysis
focuses on the benefit of orthogonal initialization on the entire training process, thereby establishing
a provable benefit for optimization.
The paper is organized as follows. After reviewing related work in Section 2 and establishing some
preliminaries in Section 3, we present our main positive result on efficient convergence from orthog-
onal initialization in Section 4. In Section 5, we show that Gaussian initialization leads to exponen-
tially long convergence time if the width is too small compared with the depth. In Section 6, we
perform experiments to support our theoretical results.
2 Related Work
Deep linear networks. Despite the simplicity of their input-output maps, deep linear networks de-
fine high-dimensional non-convex optimization landscapes whose properties closely reflect those of
their non-linear counterparts. For this reason, deep linear networks have been the subject of exten-
sive theoretical analysis. A line of work (Kawaguchi, 2016; Hardt & Ma, 2016; Lu & Kawaguchi,
2017; Yun et al., 2017; Zhou & Liang, 2018; Laurent & von Brecht, 2018) studied the landscape
properties of deep linear networks. Although it was established that all local minima are global
under certain assumptions, these properties alone are still not sufficient to guarantee global conver-
gence or to provide a concrete rate of convergence for gradient-based optimization algorithms.
Another line of work directly analyzed the trajectory taken by gradient descent and established
conditions that guarantee convergence to global minimum (Bartlett et al., 2018; Arora et al., 2018;
Du & Hu, 2019). Most relevant to our work is the result of Du & Hu (2019), which shows that
if the width of hidden layers is larger than the depth, gradient descent with Gaussian initialization
can efficiently converge to a global minimum. Our result establishes that for Gaussian initialization,
this linear dependence between width and depth is necessary, while for orthogonal initialization, the
width can be independent of depth. Our negative result for Gaussian initialization also significantly
generalizes the result of Shamir (2018), who proved a similar negative result for 1-dimensional linear
networks.
Orthogonal weight initializations. Orthogonal weight initializations have also found significant
success in non-linear networks. In the context of feedforward models, the spectral properties of
a network’s input-output Jacobian have been empirically linked to convergence speed (Saxe et al.,
2014; Pennington et al., 2017; 2018; Xiao et al., 2018). It was found that when this spectrum
concentrates around 1 at initialization, a property dubbed dynamical isometry, convergence times
improved by orders of magnitude. The conditions for attaining dynamical isometry in the infinite-
width limit were established by Pennington et al. (2017; 2018) and basically require that input-output
map to be approximately linear and for the weight matrices to be orthogonal. Therefore the training
time benefits of dynamical isometry are likely rooted in the benefits of orthogonality for deep linear
networks, which we establish in this work.
Orthogonal matrices are also frequently used in the context of recurrent neural networks, for which
the stability of the state-to-state transition operator is determined by the spectrum of its Jaco-
bian (Haber & Ruthotto, 2017; Laurent & von Brecht, 2016). Orthogonal matrices can improve
the conditioning, leading to an ability to learn over long time horizons (Le et al., 2015; Henaff et al.,
2016; Chen et al., 2018; Gilboa et al., 2019). While the benefits of orthogonality can be quite large at
initialization, little is known about whether or in what contexts these benefits persist during training,
a scenario that has lead to the development of efficient methods of constraining the optimization to
the orthogonal group (Wisdom et al., 2016; Vorontsov et al., 2017; Mhammedi et al., 2017). Al-
though we do not study the recurrent setting in this work, an extension of our analysis might help
determine when orthogonality is beneficial in that setting.
2
Published as a conference paper at ICLR 2020
3 Preliminaries
3.1	Notation
Let [n] = {1, 2, . . . , n}. Denote by Id the d × d identity matrix, and by I an identity matrix when
its dimension is clear from context. Denote by N(μ, σ2) the Gaussian distribution with mean μ and
variance σ2 , and by χ2k the chi-squared distribution with k degrees of freedom.
Denote by ∣∣∙∣∣ the '2 norm of a vector or the spectral norm of a matrix. Denote by ∣∣∙k f the Frobe-
nius norm of a matrix. For a symmetric matrix A, let λmax(A) and λmin(A) be its maximum and
minimum eigenvalues, and let λi(A) be its i-th largest eigenvalue. For a matrix B ∈ Rm×n, let
σi(B) be its i-th largest singular value (i = 1, 2, . . . , min{m, n}), and let σmax(B) = σ1 (B),
σmin(B) = σmin{m,n}(B). Denote by vec (A) be the vectorization of a matrix A in column-first
order. The Kronecker product between two matrices A ∈ Rm1 ×n1 and B ∈ Rm2 ×n2 is defined as
a1,1B
A 0 B =	.
.
am1,1B
a1,n1 B
.
.
.
am1 ,n1 B
∈ Rm1 m2 ×n1 n2
where ai,j is the element in the (i, j)-th entry of A.
We use the standard O(∙), Ω(∙) and Θ(∙) notation to hide universal constant factors. We also use C
to represent a sufficiently large universal constant whose specific value can differ from line to line.
3.2	Problem Setup
Suppose that there are n training examples {(xk, yk)}kn=1 ⊂ Rdx × Rdy . Denote by X =
(x1, . . . , xn) ∈ Rdx ×n the input data matrix and by Y = (y1, . . . , yn) ∈ Rdy×n the target ma-
trix. Consider an L-layer linear neural network with weight matrices W1 , . . . , WL, which given an
input x ∈ Rdx computes
f(x; Wι,..., WL) = αWLWL-i …Wιx,
(1)
where Wi ∈ Rdi×di-1 (i = -, . . . , L), d0 = dx, dL = dy, and α is a normalization constant which
will be specified later according to the initialization scheme. We study the problem of training the
deep linear network by minimizing the `2 loss over training data:
1n	1
'(Wi,...,Wl) = - E kf (xk; Wi,...,Wl) - yk『=2 ∣∣0Wl …WiX - YkF .	(2)
k=1
The algorithm we consider to minimize the objective (2) is gradient descent with random initializa-
tion, which first randomly samples the initial weight matrices {Wi(0)}iL=1 from a certain distribu-
tion, and then updates the weights using gradient descent: for time t = 0, -, 2, . . .,
,	___,,	∂'	,.	___ ,..	一
Wi(t +1) = Wi(t) - η∂W (Wl(t),...,wL(t)),	i ∈ [L],	⑶
where η > 0 is the learning rate.
For convenience, We denote Wji = Wj Wj-I …Wi (1 ≤ i ≤ j ≤ L) and Wi-i：i = I (i ∈ [L]).
The time index t is used on any variable that depends on W1 , . . . , WL to represent its value at time
t, e.g., Wji(t) = Wj(t)…Wi(t), '(t) = '(Wι(t),..., WL(t)), etc.
4 Efficient Convergence using Orthogonal Initialization
In this section we present our main positive result for orthogonal initialization. We show that orthog-
onal initialization enables efficient convergence of gradient descent to a global minimum provided
that the hidden width is not too small.
In order to properly define orthogonal weights, we let the widths of all hidden layers be equal:
di = d2 =…=dL-ι = m, and let m ≥ max{dχ, dy}. Note that all intermediate matrices
3
Published as a conference paper at ICLR 2020
W2, . . . , WL-1 are m × m square matrices, and W1 ∈ Rm×dx , WL ∈ Rdy ×m. We sample each ini-
tial weight matrix Wi(0) independently from a uniform distribution over scaled orthogonal matrices
satisfying
W1>(0)W1(0) =mIdx,
Wi>(0)Wi(0) =Wi(0)Wi>(0) = mIm,	2 ≤i ≤L-1,	(4)
WL(0)WL>(0) = mIdy .
In accordance with such initialization, the scaling factor a in (1) is set as α = / 1	, which
mL-1dy
ensures E kf (x; WL(0), . . . , W1(0))k1 2 = kxk2 for any x ∈ Rdx.1 The same scaling factor was
adopted in Du & Hu (2019), which preserves the expectation of the squared `2 norm of any input.
Let W * ∈ argmi□w ∈Rdy ×dχ ∣∣WX - Y ∣∣f and '* = 1 ∣∣ W * X - Y ∣∣F. Then '* is the minimum
'veil'IIQ fcr flip	Ch：0「痴\70 T^QnrYf^α	λ —	λmax(X ^V、λ — λmax(X ^X)	C)TlrI r —、U F 2	/ɔɪi-p TTJQin
value for Ihe	ObjeCtive (2). Denote	r —	rank(^X ),	K — 1(X>X) ,	and r — “X"? .	^^uɪ uιain
theorem in this section is the following:
Theorem 4.1. Suppose
m ≥ C ∙ rκ2 (dy (1 + ∣∣ W* ∣2) + log(r∕δ)) and m ≥ dχ,	(5)
for some δ ∈ (0, 1) and a sufficiently large universal constant C > 0. Set the learning rate η ≤
dy U 2. Then with probability at least 1 一 δ over the random initialization, we have
2LkX k
'(0)- '* ≤ O (1 + logdr∕δ) + ∣W*『)∣XkF ,
'(t)-'*≤ (1- 1 4(X >x )/dy "(0)-'*), t = 0,1, 2,...,
where `(t) is the objective value at iteration t.
Notably, in Theorem 4.1, the width m need not depend on the depth L. This is in sharp contrast
with the result of Du & HU (2019) for Gaussian initialization, which requires m ≥ ΩΩ(Lrκ3dy). It
turns out that a near-linear dependence between m and L is necessary for Gaussian initialization to
have efficient convergence, as we will show in Section 5. Therefore the requirement in Du & Hu
(2019) is nearly tight in terms of the dependence on L. These results together rigorously establish
the benefit of orthogonal initialization in optimizing very deep linear networks.
If We set the learning rate optimally according to Theorem 4.1 to η — Θ( LkX“2), We obtain that
`(t) - `* decreases by a ratio of 1 - Θ(κ-1) after every iteration. This matches the convergence
rate of gradient descent on the (1-layer) linear regression problem min 2 ∣∣WX - Y ∣∣F.
W ∈Rdy ×dx 2	F
4.1	Proof of Theorem 4.1
The proof uses the high-level framework from Du & Hu (2019), which tracks the evolution of the
network’s output during optimization. This evolution is closely related to a time-varying positive
semidefinite (PSD) matrix (defined in (7)), and the proof relies on carefully upper and lower bound-
ing the eigenvalues of this matrix throughout training, which in turn implies the desired convergence
result.
First, we can make the following simplifying assumption without loss of generality. See Appendix
B in Du & Hu (2019) for justification.
Assumption 4.1. (Without loss of generality) X ∈ Rdx×r, rank(X) — r, Y — W*X, and `* — 0.
1Wehave E [∣∣f (x; Wl(0),..., Wι(0))∣∣2] = α2E [x>W>(0)…W>(0)Wl(0)…Wι(0)x]. Notethat
by our choice (4) we have E WL> (0)WL (0) = dyIm and Wi> (0)Wi (0) = mI (1 ≤ i ≤ L - 1), so we have
Ekf(x;WL(0),...,W1(0))k2 = α2mL-1dy kxk2 = kxk2.
2r is known as the stable rank of X, which is always no more than the rank.
4
Published as a conference paper at ICLR 2020
Now we briefly review Du & Hu (2019)’s framework. The key idea is to look at the network’s
output, defined as
U = aWL:iX ∈ Rdy×n.
We also write U(t) = aWL：i(t)X as the output at time t. Note that '(t)
According to the gradient descent update rule, we write
WL：1(t + I) = Y (Wi ⑴ - η∂W (t)) = WL：1⑴-X nWL：i+1(t) ∂W ⑴ Wi-1:1⑴ + E⑴,
where E(t) contains all the high-order terms (i.e., those with η2 or higher). With this definition, the
evolution of U(t) can be written as the following equation:
Vec (U(t + 1) 一 U(t)) = -ηP(t) ∙ Vec (U(t) 一 Y) + α ∙ Vec (E(t)X),	(6)
where
L
P (t) = α2 X[ ((Wi-i：i(t)X )> (Wi-i：i(t)X))乳(WLi+ι(t)W∑+ι(t)) ].	⑺
i=1
Notice that P(t) is always PSD since it is the sum ofL PSD matrices. Therefore, in order to establish
conVergence, we only need to (i) show that the higher-order term E(t) is small and (ii) proVe upper
and lower bounds on P (t)’s eigenValues. For the second task, it suffices to control the singular
Values of Wi-1:1(t) and WL:i+1(t) (i ∈ [L]).3 * Under orthogonal initialization, these matrices are
perfectly isometric at initialization, and we will show that they stay close to isometry during training,
thus enabling efficient conVergence.
The following lemma summarizes some properties at initialization.
Lemma 4.2. At initialization, we have
j-i+1
σmaχ(Wj∕(0)) = σmin(W"(0)) = m —, ∀1 ≤ i ≤ j ≤ L, (i,j) = (1, L).	(8)
Furthermore, with probability at least 1 一 δ, the loss at initialization satisfies
'(0) ≤ O(1 + log(r∕δ) + ∣∣W*『)
kXk2F .
(9)
Proof sketch. The spectral property (8) follows directly from (4).
To proVe (9), we essentially need to upper bound the magnitude of the network’s initial output. This
turns out to be equiValent to studying the magnitude of the projection of a Vector onto a random low-
dimensional subspace, which we can bound using standard concentration inequalities. The details
are given in Appendix A.1.	□
Now We proceed to prove Theorem 4.1. We define B = O(1+ logdr® + ∣∣ W*『)IlXkF which
is the upper bound on '(0) from (9). Conditioned on (9) being satisfied, we will use induction on t
to proVe the following three properties A(t), B(t) and C(t) for all t = 0, 1, . . .:
•	A(t): '(t) ≤ (1 一 2ηLσ2nin(X)/dy)t '(0) ≤ (1 一 1 ηLσ2nin(X)/dy)t B.
j-i+1	j-i+1
•	B(t): σmaχ(W∙"(t)) ≤ 1.1m-^2~ ,σmin(W*(t)) ≥ 0.9m-^2~,	∀1 ≤ i ≤ j ≤
l,	(i,j) = (1,L).
• C(t): ∣Wi(t) — Wi(0)∣F ≤ 8√⅛?, ∀1 ≤ i ≤ L.
min
A(0) and B(0) are true according to Lemma 4.2, and C(0) is triVially true. In order to proVe A(t),
B(t) and C(t) for all t, we will proVe the following claims for all t ≥ 0:
3Note that for symmetric matrices A and B, the set of eigenvalues of A Z B is the set of products of an
eigenValue of A and an eigenValue of B.
5
Published as a conference paper at ICLR 2020
Claim 4.3. A(0),...,A(t),B(0),...,B(t) =⇒C(t+ 1).
Claim 4.4. C(t) =⇒ B(t).
Claim 4.5. A(t), B(t) =⇒ A(t + 1).
The proofs of these claims are given in Appendix A. Notice that we finish the proof of Theorem 4.1
once we prove A(t) for all t ≥ 0.
5 Exponential Curse of Gaussian Initialization
In this section, we show that gradient descent with Gaussian random initialization necessarily suf-
fers from a running time that scales exponentially with the depth of the network, unless the width
becomes nearly linear in the depth. Since we mostly focus on the dependence of width and running
time on depth, we will assume the depth L to be sufficiently large.
Recall that We want to minimize the objective '(Wι,..., WL) = 2 IlaWL：iX - YIlF by gradient
descent. We assume Y = W *X for some W * ∈ Rdy ×dx, so that the optimal objective value is 0.
For convenience, we assume IXIF = Θ(1) and IYIF = Θ(1).
Suppose that at layer i ∈ [L], every entry of Wi(0) is sampled from N (0, σi2), and all weights in the
network are independent. We set the scaling factor α such that the initial output of the network does
not blow up exponentially (in expectation):
E [kf (x; Wι(0),..., WL(0))k2] ≤ LO⑴∙ kxk2, ∀x ∈ Rdx.	(10)
Note that E hIf (x; W1(0), . . . , WL(0))I2i = α2 QiL=1(diσi2) IxI2. Thus (10) means
L
α2 Y(diσi2) ≤ LO(1).
i=1
We also assume that the magnitude of initialization at each layer cannot vanish with depth:
d冠 ≥ LO1,	∀i ∈ [L].	(11)
Note that the assumptions (10) and (11) are just sanity checks to rule out the obvious pathological
cases - they are easily satisfied by all the commonly used initialization schemes in practice.
Now we formally state our main theorem in this section.
Theorem 5.1. Suppose max{d0, d1, . . . , dL} ≤ O(L1-γ) for some universal constant 0 < γ ≤ 1.
Then there exists a universal constant c > 0 such that, if gradient descent is run with learning
rate η ≤ ©心,then with probability at least 0.9 over the random initialization, for the first <sω(LY)
iterations, the objective value is stuck between 0.4 IY I2F and 0.6 IYI2F.
Theorem 5.1 establishes that efficient convergence from Gaussian initialization is impossible for
large depth unless the width becomes nearly linear in depth. This nearly linear dependence is the
best we can hope for, since Du & Hu (2019) proved a positive result when the width is larger than
linear in depth. Therefore, a phase transition from untrainable to trainable happens at the point when
the width and depth has a nearly linear relation. Furthermore, Theorem 5.1 generalizes the result of
Shamir (2018), which only treats the special case of do =…=dL = 1.
5.1	Proof of Theorem 5.1
For convenience, we define a scaled version of Wi: let Ai = Wi/ (√diσi) and β = α QL=1 (√dLiσi).
Then we know β ≤ LO(I) and αWl：i = βA□ι, where Aj” = Aj •…Ai.
We first give a simple upper bound on IAj:i(0)I for all 1 ≤ i ≤ j ≤ L.
Lemma 5.2. With probability at least 1 一 δ, we have ||Aj：i(0) ∣∣ ≤ O ( L^) for all 1 ≤ i ≤ j ≤ L.
6
Published as a conference paper at ICLR 2020
The proof of Lemma 5.2 is given in Appendix B.1. It simply uses Markov inequality and union
bound.
Furthermore, a key property at initialization is that if j - i is large enough, kAj:i (0)k will become
exponentially small.
Lemma 5.3. With probability at least 1 一 e-。(LY) ,for all 1 ≤ i ≤ j ≤ L Such that j 一 i ≥ 10, we
have ||Aj：i(0)k ≤ e-Q(Lγ).
Proof. We first consider a fixed pair (i,j) such that j 一 i ≥ ∙L. In order to bound ||Aj：i(0)∣,we
first take an arbitrary unit vector v ∈ Rdi-1 and bound |Aj:i(0)v|. We can write |Aj:i(0)v|2 =
Qk=i Zk, where Zk = 口£；(OOvvk2. Note that for any nonzero v0 ∈ RdkT independent of Ak (0),
the distribution of	dk	∙	kAk")v	k	is χd	. Therefore,	Zi,..., Zj are independent, and dkZk	〜	Xd
kv k	k	k
(k = i, i + 1, . . . , j). Recall the expression for the moments of chi-squared random variables:
E [Zλ] = 2λrΓ⅛∕2+λ) (∀λ > O). Taking λ = 1 and using the bound rΓa+2) ≤ √a 一 0.1 (Va ≥ 2)
(Qi & Luo, 2012), we get E [√Zk] ≤ J2(dk£-0.1) = / 一 量 ≤ 1 一 d1. Therefore we have
E jrjɪ# ≤ Yk=i(1 一 W )≤(1 一 o⅛⅛ 厂1 ≤(1 一。①-1))10=e").
Choose a sufficiently small constant c0	>	0. By Markov inequality we have
Pr qQk=i Zk > e-c0Lγ ≤ ec0LγE J"、7Zk ≤ ec0Lγe-Q(Lγ) = e-Q(Lγ). Therefore we
have shown that for any fixed unit vector V ∈ Rdi-1, with probability at least 1 一 e-Q(Lγ) We have
|Aj：i(O)Vk ≤ e").
Next, we use this to bound |Aj:i(0)| via an -net argument. We partition the index set [di-1]
into [di-ι] = Si ∪ S2 ∪ ∙∙∙ ∪ Sq such that ∣Sι | ≤ Lγ/ (∀l ∈ [q]) and q = O(LY-2). For each
l ∈ [q], let Nl be a 1 -net for all the unit vectors in RdiT with support in Si. Note that we can
choose Nl such that |Nl | = eO(|Sl|) = eO(LY/2). Taking a union bound over ∪lq=1Nl, we know
that ||Aj：i(O)vk ≤ e-Q(Lγ) ||v| simultaneously for all V ∈ ∪q=ιNl with probability at least 1 一
(Pq=1 |Nl|) e-Q(LY) ≥ 1 - q ∙ eO(LY/2)e-Q(LY) = 1 - e-Q(Lγ).
Now, for any u ∈ Rdi-1, we write it as u = Plq=1 alul where al is a scalar and ul is a unit
vector supported on Sl. By the definition of 2-net, for each l ∈ [q] there exists Vl ∈ Nl such that
IIVl- UlIl ≤ 1. WeknOWthatkAj”(O)vl∣∣ ≤ e->(LY) ∣∣vlk for all l ∈ [q]. Let V = P/= alvl. We
have
kAj：i (O)Vk ≤ χq=1 ∣alH4i(0)Vlk ≤ χq=1 ∣al∣∙∣Vlk ≤ …Y { ∙ X∕=1。2 忖『
=√⅞-ω(LY) H = e-∙(LY) ∣Vk .
Note that l∣u -Vk = kPq=1 al(Ul-Vl)k = VZPq=I a2 kul -仞『≤，4 Pq=I a2 = 2 lluk,
which implies ||vk ≤ 2 ||u1. Therefore we have
∣4i(0)uk ≤ kAj"(O)Vk + kAj"(0)(u - V)k≤ e-Q(LY) IWk + kAj：i(O)k」u -Vk
≤ e-Q(LY) ∙ 2 kuk + l4i(O)k∙ 2 kuk = e-Q(LY) kuk + kAj"(O)k∙ | k"k ∙
The above inequality is valid for any U ∈ Rdi-1 . Thus we can take the unit vector U that maximizes
|Aj：i(O)u∣. This gives us ||Aj：i(O)k ≤ e-。(LY) + 2 ||Aj：i(O)k,whichimplies ||Aj：i(O)k ≤ e-。(LY).
Finally, we take a union bound over all possible (i,j). The failure probaility is at most L2e-。(LY) =
e-。(LY).	□
7
Published as a conference paper at ICLR 2020
The following lemma shows that the properties in Lemmas 5.2 and 5.3 are still to some extent
preserved after applying small perturbations on all the weight matrices.
Lemma 5.4. Suppose that the initial weights satisfy kAj:i (0)k ≤ O(L3) for all 1 ≤ i ≤ j ≤ L,
and ||Aj：i(0)k ≤ e-c1Lγ if j 一 i ≥ 10, where ci > 0 is a universal constant. Thenfor another set
of matrices A1, . . . , AL satisfying kAi - Ai(0)k ≤ e-0.6c1Lγ for all i ∈ [L], we must have
|Aj:i| ≤ O(L3), ∀1 ≤i ≤j ≤L,
|Aj：i k ≤ O (e-c1Lγ) ,	∀1 ≤ i ≤ j ≤ L,j-i ≥ 4.
(12)
Proof. It suffices to show that the difference Aj:i 一 Aj:i(0) is tiny. Let ∆i = Ai 一 Ai(0).
We have A” = (Aj(0) + ∆j)…(Ai+1(0) + ∆i+1)(Ai(0) + ∆i). Expanding this product,
except for the one term corresponding to Aj”(0), every other term has the form Aj：(ks+i)(0) ∙
δEs ∙ A(ks-1):(ks-i + 1)⑼∙ δEs-i …∆k「A(ki-1):i⑼，where i ≤ k1 < …< ks ≤ j∙
By assumption, each ∆k has spectral norm e-0.6c1 Lγ, and each Aj0:i0(0) has spectral norm
O(L3), so we have IIAj:(ks + 1)(0) ∙ δEs ∙ A(ks-1):(ks-i + 1)(0) ∙ δEs-i …X」A(k1 -1):i(0)|| ≤
(e-0.6cιLγ)s (o(L3))s+1. Therefore we have
|Aj:i 一 Aj:i(0)| ≤
j-i+1
X (j-S+1)L0.6cιLγ)
s=1
(O(L3)L
j-i+1	s	∞	s	∞
≤ X Ls k-0∙6c1L) (O(L3))s+1 ≤ O(L3) X (θ(L4)e-0.6c1LYy ≤ O(L3) χ(1∕2)s = O(L3),
which implies |Aj:i| ≤ O(L3) for all 1 ≤ i ≤ j ≤ L.
The proof of the second part of the lemma is postponed to Appendix B.2.
□
As a consequence of Lemma 5.4, we can control the objective value and the gradient at any point
sufficiently close to the random initialization.
Lemma 5.5. For a Setofweight matrices Wi,..., Wl with Ai = Wi∕(Vdiσi) that satisfy (12), the
objective and the gradient satisfy
0.4 |YkF <'(Wi,...,Wl) < 0.6 |YkF ,
∣∣Vwi'(Wi,...,Wl)∣ ≤ (HS, ∀i ∈ [L].
The proof of Lemma 5.5 is given in Appendix B.3.
Finally, we can finish the proof of Theorem 5.1 using the above lemmas.
Proof of Theorem 5.1. From Lemmas 5.2 and 5.3, we know that with probability at least 0.9, we
have (i) |Aj:i(0)| ≤ O(L3) for all 1 ≤ i ≤ j ≤ L, and (ii) |Aj:i(0)| ≤ e-c1Lγ if (i, j) further
satisfies j 一 i ≥ L. Here ci > 0 is a universal constant. From now on We are conditioned on these
properties being satisfied. We suppose that the learning rate η is at most e0.2c1Lγ .
We say that a set of weight matrices Wi , . . . , WL are in the “initial neighborhood” if
|Ai 一 Ai(0)| ≤ e-0.6c1Lγ for all i ∈ [L]. From Lemmas 5.4 and 5.5 we know that in the “ini-
tial neighborhood” the objective value is always between 0.4 |Y |2F and 0.6 |Y |2F . Therefore we
have to escape the “initial neighborhood” in order to get the objective value out of this interval.
Now we calculate how many iterations are necessary to escape the “initial neighborhood.”
According to Lemma 5.5, inside the “initial neighborhood” each Wi can move at most
η(√diσi)-ie-0∙9cιLγ in one iteration by definition of the gradient descent algorithm. In order to
leave the “initial neighborhood,” some Wi must satisfy ∣∣Wi 一 Wi(0)k = √dσii IlAi 一 Ai(0)k >
√diσie-0∙6cιLγ. In order to move this amount, the number of iterations has to be at least
√diσie-0.6cιLγ	_ diσ2e0.3cιLγ	1	e0∙3c1Lγ	。包7)
η(√diσi)-1e-0.9cιLY = η ≥ LOW ∙ e0∙2cιLγ ≥ e .
This finishes the proof.	□
8
Published as a conference paper at ICLR 2020
2.5
2.0
1.5
1.0
0.5
0.0
1.0	1.5	2.0	2.5	3.0
1.0	1.5	2.0	2.5	3.0
IoglO(Width)
IoglO(Width)
(a) Gaussian, steps=1258
(b) Gaussian, steps=10000
2.5
2.0
1.5
1.0
0.5
0.0
1.0	1.5	2.0	2.5	3.0
1.0	1.5	2.0	2.5	3.0
0
-6
-12
-18
-24
-30
IoglO(Width)
IoglO(Width)
(c) Orthogonal, steps=1258
(d) Orthogonal, steps=10000
Figure 1: log '(0) at t = 1258 and t = 10000, for different depth-width configurations and different
initialization schemes. Darker color means smaller loss.
6	Experiments
In this section, we provide empirical evidence to support the results in Sections 4 and 5. To study
how depth and width affect convergence speed of gradient descent under orthogonal and Gaussian
initialization schemes, we train a family of linear networks with their widths ranging from 10 to
1000 and depths from 1 to 700, on a fixed synthetic dataset (X, Y ).4 * Each network is trained using
gradient descent staring from both Gaussian and orthogonal initializations. In Figure 1, We lay out
the logarithm of the relative training loss 儡,using heap-maps, at steps t = 1258 and t = 10000.
In each heat-map, each point represents the relative training loss of one experiment; the darker the
color, the smaller the loss. Figure 1 clearly demonstrates a sharp transition from untrainable to
trainable (i.e., from red to black) when we increase the width of the network:
•	for Gaussian initialization, this transition occurs across a contour characterized by a linear
relation between width and depth;
•	for orthogonal initialization, the transition occurs at a width that is approximately indepen-
dent of the depth.
These observations excellently verify our theory developed in Sections 4 and 5.
To have a closer look into the training dynamics, we also plot “relative loss v.s. training time” for a
variety of depth-width configurations. See Figure 2. There again we can clearly see that orthogonal
initialization enables fast training at small width (independent of depth), and that the required width
for Gaussian initialization depends on depth.
4We choose X ∈ R1024×16 and W * ∈ R10×1024, and set Y = W *X, Entries in X and W * are drawn
i.i.d. from N (0, 1).
9
Published as a conference paper at ICLR 2020
sso-Ia>Hn-9>j
ιβ∙	ɪo1	ια,	ιβ,	w4
Steps
(a) Depth=50
sso-Ia>Hn-9>j
10。	ɪo1	ιa,	ιβ,	w4
Steps
(b) Depth=200
sso-Ia>Hn-9>j
ιβ∙	ɪo1	ιa,	ιβ,	w4
Steps
(c) Depth=400
Figure 2: Relative loss v.s. training time. For each plot, we vary width from 50 (yellow) to 1200
(purple). Solid and dashed lines represent Gaussian (GS) and orthogonal (OT) initializations.
7	Conclusion
In this work, we studied the effect of the initialization parameter values of deep linear neural net-
works on the convergence time of gradient descent. We found that when the initial weights are iid
Gaussian, the convergence time grows exponentially in the depth unless the width is at least as large
as the depth. In contrast, when the initial weight matrices are drawn from the orthogonal group,
the width needed to guarantee efficient convergence is in fact independent of the depth. These re-
sults establish for the first time a concrete proof that orthogonal initialization is superior to Gaussian
initialization in terms of convergence time.
References
Madhu S Advani and Andrew M Saxe. High-dimensional dynamics of generalization error in neural
networks. arXiv preprint arXiv:1710.03667, 2017.
Sanjeev Arora, Nadav Cohen, Noah Golowich, and Wei Hu. A convergence analysis of gradient
descent for deep linear neural networks. arXiv preprint arXiv:1810.02281, 2018.
Peter Bartlett, Dave Helmbold, and Phil Long. Gradient descent with identity initialization effi-
ciently learns positive definite linear transformations. In International Conference on Machine
Learning,pp. 520-529, 2018.
Minmin Chen, Jeffrey Pennington, and Samuel S Schoenholz. Dynamical isometry and a mean field
theory of rnns: Gating enables signal propagation in recurrent neural networks. arXiv preprint
arXiv:1806.05394, 2018.
Simon Du and Wei Hu. Width provably matters in optimization for deep linear neural networks. In
International Conference on Machine Learning, pp. 1655-1664, 2019.
Dar Gilboa, Bo Chang, Minmin Chen, Greg Yang, Samuel S Schoenholz, Ed H Chi, and Jeffrey
Pennington. Dynamical isometry and a mean field theory of lstms and grus. arXiv preprint
arXiv:1901.08987, 2019.
Eldad Haber and Lars Ruthotto. Stable architectures for deep neural networks. Inverse Problems,
34(1):014004, 2017.
Moritz Hardt and Tengyu Ma. Identity matters in deep learning. International Conference on
Learning Representations, 2016.
Mikael Henaff, Arthur Szlam, and Yann LeCun. Recurrent orthogonal networks and long-memory
tasks. arXiv preprint arXiv:1602.06662, 2016.
Geoffrey Hinton, Li Deng, Dong Yu, George E. Dahl, Abdel-rahman Mohamed, Navdeep Jaitly,
Andrew Senior, Vincent Vanhoucke, Patrick Nguyen, Tara N Sainath, et al. Deep neural networks
for acoustic modeling in speech recognition: The shared views of four research groups. IEEE
Signal Processing Magazine, 29(6):82-97, 2012.
10
Published as a conference paper at ICLR 2020
Kenji Kawaguchi. Deep learning without poor local minima. In Advances in Neural Information
Processing Systems, pp. 586-594, 2016.
Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classification with deep convo-
lutional neural networks. In Advances in neural information processing systems, pp. 1097-1105,
2012.
Thomas Laurent and James von Brecht. A recurrent neural network without chaos. arXiv preprint
arXiv:1612.06212, 2016.
Thomas Laurent and James von Brecht. Deep linear networks with arbitrary loss: All local minima
are global. In International Conference on Machine Learning, pp. 2908-2913, 2018.
Quoc V Le, Navdeep Jaitly, and Geoffrey E Hinton. A simple way to initialize recurrent networks
of rectified linear units. arXiv preprint arXiv:1504.00941, 2015.
Zenan Ling and Robert C Qiu. Spectrum concentration in deep residual learning: a free probability
approach. IEEE Access, 7:105212-105223, 2019.
Haihao Lu and Kenji Kawaguchi. Depth creates no bad local minima. arXiv preprint
arXiv:1702.08580, 2017.
Zakaria Mhammedi, Andrew Hellicar, Ashfaqur Rahman, and James Bailey. Efficient orthogonal
parametrisation of recurrent neural networks using householder reflections. In Proceedings of
the 34th International Conference on Machine Learning-Volume 70, pp. 2401-2409. JMLR. org,
2017.
Jeffrey Pennington, Samuel Schoenholz, and Surya Ganguli. Resurrecting the sigmoid in deep
learning through dynamical isometry: theory and practice. In Advances in neural information
processing systems, pp. 4785-4795, 2017.
Jeffrey Pennington, Samuel S Schoenholz, and Surya Ganguli. The emergence of spectral univer-
sality in deep networks. arXiv preprint arXiv:1802.09979, 2018.
Feng Qi and Qiu-Ming Luo. Bounds for the ratio of two gamma functions—from wendel’s and
related inequalities to logarithmically completely monotonic functions. Banach Journal of Math-
ematical Analysis, 6(2):132-158, 2012.
Andrew M Saxe, James L McClelland, and Surya Ganguli. Exact solutions to the nonlinear dynam-
ics of learning in deep linear neural networks. International Conference on Learning Represen-
tations, 2014.
Ohad Shamir. Exponential convergence time of gradient descent for one-dimensional deep linear
neural networks. arXiv preprint arXiv:1809.08587, 2018.
Wojciech Tarnowski, Piotr WarchoL StanisIaW Jastrzbski, Jacek Tabor, and Maciej Nowak. Dynam-
ical isometry is achieved in residual networks in a universal way for any activation function. In
The 22nd International Conference on Artificial Intelligence and Statistics, pp. 2221-2230, 2019.
Eugene Vorontsov, Chiheb Trabelsi, Samuel Kadoury, and Chris Pal. On orthogonality and learn-
ing recurrent networks with long term dependencies. In Proceedings of the 34th International
Conference on Machine Learning-Volume 70, pp. 3570-3578. JMLR. org, 2017.
Scott Wisdom, Thomas Powers, John Hershey, Jonathan Le Roux, and Les Atlas. Full-capacity
unitary recurrent neural networks. In Advances in Neural Information Processing Systems, pp.
4880-4888, 2016.
Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V. Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google’s neural machine trans-
lation system: Bridging the gap between human and machine translation. arXiv preprint
arXiv:1609.08144, 2016.
11
Published as a conference paper at ICLR 2020
Lechao Xiao, Yasaman Bahri, Jascha Sohl-Dickstein, Samuel Schoenholz, and Jeffrey Pennington.
Dynamical isometry and a mean field theory of cnns: How to train 10,000-layer vanilla con-
VolUtional neural networks. In International Conference on Machine Learning, pp. 5389-5398,
2018.
Chulhee Yun, Suvrit Sra, and Ali Jadbabaie. Global optimality conditions for deep neural networks.
arXiv preprint arXiv:1707.02444, 2017.
Yi Zhou and Yingbin Liang. Critical points of linear neural networks: Analytical forms and land-
scape properties. 2018.
12
Published as a conference paper at ICLR 2020
A Proofs for Section 4
A.1 Proof of Lemma 4.2
Proof of Lemma 4.2. We only need to prove (9). We first upper bound the magnitude of the net-
work's initial output on any given input X ∈ Rdx. Let Z = √%L Wl-li(0) ∙ X ∈ Rm. Then We
have ∣∣zk = ∣∣χ∣∣, and f(χ; Wi(0), ...,Wl(0)) = √1d= Wl(0) ∙ z = qm ∙ √1mWl(0) ∙ z. Note
that √m Wl(0) ∙ z is the (signed) projection of Z onto a random subspace in Rm of dimension dy.
Therefore ∣∣ √1mWl(0) ∙ z∣∣ / ∣∣z∣2 has the same distribution as gj；…；：7 , where gι,...,gm are
i.i.d. samples from N(0, 1). By the standard tail bounds for chi-squared distributions we have
Pr g2 + …+ gdy ≤ dy + 2 J dy Iog(I那。) + 2 log(1∕δO) ≥ 1 - δ0 ,
Pr [g2 +----+ gm ≥ m — 2，m log(1∕δ0)] ≥ 1 - δ0.
Let δ0 = 2r. Note that m > C ∙ log(r∕δ). We know that with probability at least 1 一 r we have
1 W	2∕ιιι∣2< dy + 2Pdylog(2"δ) + 2log(2"δ) _ O(dy + log("δ))
TmWL(O) ∙ Z	/ kzk ≤	m - 2pmlog(2r∕δ)	= ~Ωm -,
which implies
∣f (x; W1(O),..., Wl(0))∣2 = m √r Wl(0) ∙ z 2 = m ∙ O ( dy +log(r∕δ)) ∣zk2
dy ∣ m	∣ dy	m	(13)
=O (1 + T) kx∣2.
Finally, taking a union bound, we know that with probability at least 1 - δ, the inequality (13) holds
for every X ∈ {X1, . . . , Xr}, which implies
rr
'(0) = 2 X kf (Xk； W1(O),..., Wl(0)) — yk k2 ≤ X (kf (Xk； W1(O),..., Wl(0))∣2 + kyk『)
≤ O (1 + lo⅞zδ2) X kXkk2 + X kykk2 = O (1 +	) kXkF + kYkF
y	k=1	k=1	y
≤ O (1 + lοgdr^ + kw*k2) kxkF.
□
A.2 Proof of Claim 4.3
ProofofClaim 4.3. Let Y = ɪLσ21in(X)∕dy. From A(O),..., A(t) we have '(s) ≤ (1-ηγ)sB for
all O ≤ S ≤ t. The gradient of the objective function (2) is ∂W = αW>i;ι(U — Y)(Wi-i：iX)>.
Thus we can bound the gradient norm as follows for all 0 ≤ s ≤ t and all i ∈ [L]:
∂'
犷(s)	≤ α kWL：i+i(s)k kU (s) — Y If kWi-i：i(s)kkX k
∣ ∂Wi	∣F
Q--------- (14)
≤ / L-1，∙ 1.1mɪ ∙ p2'W ∙ 1.1mi-1 kxk ≤ 2'(1 -dπ)sB kXk,
m	dy	dy
where we have used B(s). Then for all i ∈ [L] we have:
tt
kWi(t + 1) - Wi(0)kF ≤XkWi(s+1)-Wi(s)kF= X
s=0	s=0
∂'
η∂wi(S)
F
13
Published as a conference paper at ICLR 2020
t
≤ηX
s=0
2,(1 - ηγ)sB
kXk ≤ 2P√B kXk X(I- ηγ∕2)s ≤ 2η√B kXk ∙ 2-
dy	s=0	dy	ηγ
_8 √Biy kχ k
=Lσ2UX).
This proves C (t + 1).
□
A.3 Proof of Claim 4.4
Proof of Claim 4.4. Let R =
k∆ikF ≤R(∀i∈ [L]).
For 1 ≤ i ≤ j ≤ L, we have
8√bbdyJXk and ∆i = Wi(t) - Wi(O) (i ∈ [L]). Then C(t) means
Lσ (X )
min
Wji(t) = (Wj(0)+∆j)…(Wi(0) + ∆i).
Expanding this product, each term except Wj:i (0) has the form:
W7-：(ks + 1)(0) ∙ δEs ∙ W(ks-1):(ks-i + 1)⑼∙ δEs-i …δM ∙ W(ki-1):i(O),
(15)
where i ≤ kι < •一 < k§ ≤ j are locations where terms like ∆刖 are taken out. Note that every
j0-i0 + 1
factor in(15) of the form W∙040(O) satisfies IlWj040(O)k = m-2- according to (8). Thus, we can
bound the sum of all terms of the form (15) as
j-i+1
kWj：i(t) - Wji(0)k ≤ X j - S + JRsmj-+^ = (√m + R)j-i+1 - (√m)j-i+1
=(√m)j-i+1 ((1 + R∕√m)j-i+1 - 1)≤ (√m)j-i+1 ((1 + R∕√m)L - 1)≤ 0.1(√m)j-i+1.
Here the last step uses m > C(LR)2 which is implied by (5). Combined with (8), this proves
B(t).	□
A.4 Proof of Claim 4.5
Proof of Claim 4.5. Recall that we have the dynamics (6) for U (t). In order to establish convergence
from (6) we need to prove upper and lower bounds on the eigenvalues of P (t), as well as show that
the high-order term E(t) is small. We will prove these using B(t).
Using the definition (7) and property B(t), we have
L
λmaχ(P(t)) ≤ α2 X λmaχ ((Wi-∏(t)X)> (Wi-1：1 (t)X)) ∙ λmaχ (WL^+l(t)W>,i+l(t))
i=1
≤ mL-ιdy X(1.1mi-1 σmaχ(X))2(1.1m中)2 ≤ 2Lσ2mχ(X)∕dy,
L
λmin(P(t)) ≥ α2 X λmin ((Wi-∏(t)X)> (Wi-1：l(t)X)) ∙ λmm (Wl-1 (t)W>i+1 (t))
i=1
≥ mLLd £ (0∙9mi-1 σmin (X)) (0∙9m IL- ) ≥ 5Lσ21in (X)/dy .
m	dy i=1	5
In the lower bound above, we make use of the following relation on dimensions: m ≥ dx ≥
r, which enables the inequality λmin ((Wi-1:1(t)X)> (Wi-1:1(t)X)) = σm2 in (Wi-1:1(t)X) ≥
σiLn (Wi-1：1(t))《in (X).
Next, we will prove the following bound on the high-order term E(t):
-Γ=f=EΓ kE(t)XkF ≤ 1 ηλmin(Pt) kU(t) - YkF .
mL-1dy	6
14
Published as a conference paper at ICLR 2020
Recall that E(t) is the sum of all high-order terms in the product
WL-Λ(t + 1) = Y(Wi(t)- η焉(t
Same as (14), we have
≤ 2√(t1kXk (∀i ∈ [L]). Then We have
F	dy
1
，mLTdl
1
kE(t)XkF
≤
VzmLTdy
∑
s=2
2P'W kxk∖s
mL-S kXk
≤ n kxkX LC」!s
m-2
L
kxkX
s=2
2ηLP'W kxk∖s
mdy
y
L
Mn
FrOm η ≤ 2L⅛,we have 2ηL√m∣m ≤ ^m⅛Xf. Note that m>C ∙ ⅛⅜ ≥ C ∙ ⅛r. ThUS
we have
√m⅛ kE(t)x kF ≤ 戚kx k
2ηLv⅜y kX k
mdy
2 L-2
X 0.5s-2
s=2
≤ 2√m kXk
2ηL√'W kx k
mdy
2
≤ 2rm kχ k ∙
2ηL√'(t) kxk √⅞R
mdy
√m kx k
4ηL kxk∙'(t)
VZmdy
It suffices to show that the above bound is at most 11 ηλmin(Pt) ∣∣U (t) - Y ∣∣f = 6 ηλmin(Pt),2'(t).
Since λmin(Pt) ≥ 3Lσ21a(X)/dy, it suffices to have
4ηL kXk∙'(t)J	3Lσ2ιm(X)√2'W
≤ 6 T
which is true since m > C ∙
VZmdy
dy BkXk2
σ41in(X)
≥ C dy e(t)kXk2
≥ C . σ4∙ (X).
min
5dy
Finally, from (6) and η ≤ ”*2 ≤ ʒ一ɪpʌ We have
2LkX k	λmax (Pt )
kU(t+1)-YkF= kvec(U(t+1)-Y)k
=(I - ηp(t)) ∙vec (U(t) - Y) + / L 1〃 vec (E(t)X)
mL-1dy
≤ (1 - ηλmin(P(t))) kvec (U (t) - Y )k + / L，IIE(t)X kF
mL-1dy
≤ (1 - ηλmin(P(t))) kU(t) - YkF + 1 ηλmin(Pt) kU(t) - YkF
=(l- 5 ηλmm(P(t))) kU (t) - Y kF
≤ (1 - 2 ηLσ2in(X )/dy) kU (t) - Y k F .
Therefore '(t + 1) ≤(1 - ɪ?刀二宗山(X)/dy)2 '(t) ≤(1 - ɪηLσ2m(Χ)/dy) '(t). Combined with
A(t), this proves A(t + 1).
15
Published as a conference paper at ICLR 2020
B Proofs for Section 5
B.1 Proof of Lemma 5.2
Proof of Lemma 5.2. Notice that for any 1 ≤ i ≤ j ≤ L we have E
kAj:i (0)k2F
di-1. Then
by Markov inequality we have Pr
kAj :i (0)k2F ≥
≤ δ∕L2. Taking a union bound, We know
that with probability at least 1 - δ, for all 1 ≤ i ≤ j ≤ L simultaneously we have kAj:i (0)k ≤
kAj：i(0)kF ≤ diL2 ≤ O(L3∕δ) (note that d— ≤ O(LjY) = O(L)).	□
B.2 Proof of Lemma 5.4
ProofofLemma 5.4 (continued). For the second part of the lemma (j - i ≥ L), We need to bound
the terms of the form Aj：k+i(0) ∙ ∆k ∙ Ak-i：i(0) more carefully. In fact, if j - i ≥ L, then
max{j - k - 1,k - 1 - i} ≥ L, which by assumption means either Aj：k+i(0) or Ak—i：i(O) has
spectral norm bounded by e-c1Lγ. This implies ||Aj：k+i(O) ∙ ∆k ∙ Ak-±i(0)∣∣ ≤ e-c1Lγ e-0.6ci Lγ ∙
O(L3) = e-1.6cιLγ ∙ O(L3). Therefore we have
|Aj:i - Aj:i(0)| ≤ (j - i + 1)e-1.6c1Lγ
∞
≤ e-cιLγ + X Ls (e-0∙6cιLγ)s (θ(L3))s
s=2
j-i+1
• O(L3)+ X -
s=2
∞
j-i+1
e-0.6cιLγ)s (θ(L3))s+1
+1 ≤e-c1Lγ+Xe-0.5c1Lγs=Oe-c1Lγ
s=2
s
This implies IlAj≤ O (e-c1 LY).
□
B.3 Proof of Lemma 5.5
Proof of Lemma 5.5. We can bound the network’s output as
|aWL：i(0)XkF = kβALu(0)XkF ≤ LO(I) • e-。(LY) |凶|尸=e-。(LY).
Thus the objective value '(Wι,..., WL) = 2 ||aWL：i (0)X - Y kF must be extremely close to
2 |Y kF for large L, so 0.4 |Y kF < '(Wι,...,WL) < 0.6 |Y kF.
As for the gradient, for any i ∈ [L] we have
kVWi'(Wι,…，WL)k = ∣∣ɑW>i+ι (aWL：iX - Y) X>W3∕∣
Il	∣∣	LO(1)
=||e/(Vdiσi) ∙ A>：i+1 (aWL：IX - Y) XTALi：i|| ≤ √dσ kALi+ι∣∣∙ O(I) • IIAi-LiII .
Using (12), and noting that either L - i - 1 or i - 1 is greater than L, we have
kVWi'(Wι,..., WL)k ≤ σ-1LO(I) • O 卜-c1Lγ) • O(L3) ≤ "冉厂―姐二.	□
16