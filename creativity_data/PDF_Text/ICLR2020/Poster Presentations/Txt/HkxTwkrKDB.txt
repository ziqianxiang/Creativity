Published as a conference paper at ICLR 2020
On Universal Equivariant Set Networks
Nimrod Segol & Yaron Lipman
Department of Computer Science and Applied Mathematics
Weizmann Institute of Science
Rehovot, Israel
{nimrod.segol,yaron.lipman}@weizmann.ac.il
Ab stract
Using deep neural networks that are either invariant or equivariant to permutations
in order to learn functions on unordered sets has become prevalent. The most pop-
ular, basic models are DeepSets (Zaheer et al., 2017) and PointNet (Qi et al., 2017).
While known to be universal for approximating invariant functions, DeepSets and
PointNet are not known to be universal when approximating equivariant set func-
tions. On the other hand, several recent equivariant set architectures have been
proven equivariant universal (Sannai et al., 2019; Keriven & Peyre, 2019), however
these models either use layers that are not permutation equivariant (in the standard
sense) and/or use higher order tensor variables which are less practical. There is,
therefore, a gap in understanding the universality of popular equivariant set models
versus theoretical ones.
In this paper we close this gap by proving that: (i) PointNet is not equivariant
universal; and (ii) adding a single linear transmission layer makes PointNet univer-
sal. We call this architecture PointNetST and argue it is the simplest permutation
equivariant universal model known to date. Another consequence is that DeepSets
is universal, and also PointNetSeg, a popular point cloud segmentation network
(used e.g., in (Qi et al., 2017)) is universal.
The key theoretical tool used to prove the above results is an explicit characteriza-
tion of all permutation equivariant polynomial layers. Lastly, we provide numerical
experiments validating the theoretical results and comparing different permutation
equivariant models.
1 Introduction
Many interesting tasks in machine learning can be described by functions F that take as in-
put a set, X = (x1 , . . . , xn), and output some per-element features or values, F (X) =
(F (X)1, . . . , F (X)n). Permutation equivariance is the property required of F so it is well-
defined. Namely, it assures that reshuffling the elements in X and applying F results in the
same output, reshuffled in the same manner. For example, if X = (x2, xι, x3,..., Xn) then
,~. , , , ,
F (X) = (F (X )2, F (X )1, F (X )3,..., F (X )n).
Building neural networks that are permutation equivariant by construction proved extremely useful in
practice. Arguably the most popular models are DeepSets Zaheer et al. (2017) and PointNet Qi et al.
(2017). These models enjoy small number of parameters, low memory footprint and computational
efficiency along with high empirical expressiveness. Although both DeepSets and PointNet are
known to be invariant universal (i.e., can approximate arbitrary invariant continuous functions) they
are not known to be equivariant universal (i.e., can approximate arbitrary equivariant continuous
functions).
On the other hand, several researchers have suggested theoretical permutation equivariant models and
proved they are equivariant universal. Sannai et al. (2019) builds a universal equivariant network by
taking n copies of (n - 1)-invariant networks and combines them with a layer that is not permutation
invariant in the standard (above mentioned) sense. Keriven & Peyre (2019) solves a more general
problem of building networks that are equivariant universal over arbitrary high order input tensors
Rnd (including graphs); their construction, however, uses higher order tensors as hidden variables
1
Published as a conference paper at ICLR 2020
which is of less practical value. Yarotsky (2018) proves that neural networks constructed using a
finite set of invariant and equivariant polynomial layers are also equivariant universal, however his
network is not explicit (i.e., the polynomials are not characterized for the equivariant case) and also
of less practical interest due to the high degree polynomial layers.
In this paper we close the gap between the practical and theoretical permutation equivariant construc-
tions and prove:
Theorem 1.
(i)	PointNet is not equivariant universal.
(ii)	Adding a single linear transmission layer (i.e., X 7→ 11TX) to PointNet makes it equivariant
universal.
(iii)	Using ReLU activation the minimal width required for universal permutation equivariant
network satisfies ω ≤ kout + kin + n+k kin .
This theorem suggests that, arguably, PointNet with an addition of a single linear layer is the simplest
universal equivariant network, able to learn arbitrary continuous equivariant functions of sets. An
immediate corollary of this theorem is
Corollary 1. DeepSets and PointNetSeg are universal.
PointNetSeg is a network used often for point cloud segmentation (e.g., in Qi et al. (2017)). One of the
benefit of our result is that it provides a simple characterization of universal equivariant architectures
that can be used in the network design process to guarantee universality.
The theoretical tool used for the proof of Theorem 1 is an explicit characterization of the permutation
equivariant polynomials over sets of vectors in Rk using power-sum multi-symmetric polynomials.
We prove:
Theorem 2.	Let P : Rn×k → Rn×l be a permutation equivariant polynomial map. Then,
P (X) = X bαqαT,	(1)
∣ɑ∣≤n
where bα = (x1α, . . . , xnα)T, qα = (qα,1, . . . , qα,l)T, where qα,j = qα,j(s1, . . . , st), t = n+kk , are
polynomials; sj (X) = in=1 xiαj are the power-sum multi-symmetric polynomials. On the other
hand every polynomial map P satisfying Equation 1 is equivariant.
This theorem, which extends Proposition 2.27 in Golubitsky & Stewart (2002) to sets of vectors using
multivariate polynomials, lends itself to expressing arbitrary equivariant polynomials as a composition
of entry-wise continuous functions and a single linear transmission, which in turn facilitates the proof
of Theorem 1.
We conclude the paper by numerical experiments validating the theoretical results and testing several
permutation equivariant networks for the tasks of set classification and regression.
2	Preliminaries
Equivariant maps. Vectors x ∈ Rk are by default column vectors; 0, 1 are the all zero and all one
vectors/tensors; ei is the i-th standard basis vector; I is the identity matrix; all dimensions are inferred
from context or mentioned explicitly. We represent a set ofn vectors in Rk as a matrix X ∈ Rn×k and
denote X = (x1, x2, . . . , xn)T, where xi ∈ Rk, i ∈ [n], are the columns ofX. We denote by Sn the
permutation group of [n]; its action on X is defined by σ ∙ X = (xσ-i(i), Xσ-i(2),.∙∙, Xσ-i(n))T,
σ ∈ Sn. That is, σ is reshuffling the rows of X. The natural class of maps assigning a value or
feature vector to every element in an input set is permutation equivariant maps:
Definition 1. A map F : Rn×k → Rn×l satisfying F(σ ∙ X) = σ ∙ F(X) for all σ ∈ Sn and
X ∈ Rn×d is called permutation equivariant.
Power-sum multi-symmetric polynomials. Given a vector z = (z1, . . . , zn) ∈ Rn the power-
sum symmetric polynomials sj(z) = Pin=1 zij, with j ∈ [n], uniquely characterize z up to permuting
2
Published as a conference paper at ICLR 2020
its entries. In other words, for z, y ∈ Rn We have y = σ ∙ Z for some σ ∈ Sn if and only if Sj (y)=
sj(z) for allj ∈ [n]. An equivalent property is that every Sn invariant polynomial p can be expressed
as a polynomial in the power-sum symmetric polynomials, i.e., p(z) = q(s1 (z), . . . , sn(z)), see
Rydh (2007) Corollary 8.4, Briand (2004) Theorem 3. This fact was previously used in Zaheer et al.
(2017) to prove that DeepSets is universal for invariant functions. We extend this result to equivariant
functions and the multi-feature (sets of vectors) case.
For a vector X ∈ Rk and a multi-index vector α = (αι,..., αQ ∈ Nk we define Xa = x；1 ∙∙∙ xfk,
and |a| = Pi∈[k] αi. A generalization of the power-sum symmetric polynomials to matrices
exists and is called power-sum multi-symmetric polynomials, defined with a bit of notation abuse:
sα (X) = in=1 Xiα, where α ∈ Nk is a multi-index satisfying ∣α∣ ≤ n. Note that the number of
power-sum multi-symmetric polynomials acting on X ∈ Rn×k is t = n+k k . For notation simplicity
let ɑι,...,at be a list of all α ∈ Nk with |a| ≤ n. Then we index the collection of power-sum
multi-symmetric polynomials as s1, . . . , st.
Similarly to the vector case the numbers sj (X), j ∈ [t] characterize X up to permutation of its
rows. That is Y = σ ∙ X for some σ ∈ Sn iff Sj (Y) = Sj (Y) for all j ∈ [t]. Furthermore,
every Sn invariant polynomial p : Rn×k → R can be expressed as a polynomial in the power-sum
multi-symmetric polynomials (see (Rydh, 2007) corollary 8.4), i.e.,
p(X) = q(S1(X),..., St(X)),	(2)
These polynomials were recently used to encode multi-sets in Maron et al. (2019).
3	Equivariant multi-symmetric polynomial layers
In this section we develop the main theoretical tool of this paper, namely, a characterization of
all permutation equivariant polynomial layers. As far as we know, these layers were not fully
characterized before.
Theorem 2 provides an explicit representation of arbitrary permutation equivariant polynomial maps
P : Rn×k → Rn×l using the basis of power-sum multi-symmetric polynomials, Si(X). The
particular use of power-sum polynomials Si (X) has the advantage it can be encoded efficiently
using a neural network: as we will show Si(X) can be approximated using a PointNet with a single
linear transmission layer. This allows approximating an arbitrary equivariant polynomial map using
PointNet with a single linear transmission layer.
A version of this theorem for vectors instead of matrices (i.e., the case ofk = 1) appears as Proposition
2.27 in Golubitsky & Stewart (2002); we extend their proof to matrices, which is the relevant scenario
for ML applications as it allows working with sets of vectors. For k = 1 Theorem 2 reduces to the
following form: p(x)i = Pa≤n pa(S1 (X), . . . , Sn(X))xia with Sj (X) = Pi xij. For matrices the
monomial xik is replaced by Xiα for a multi-index α and the power-sum symmetric polynomials are
replaced by the power-sum multi-symmetric polynomials.
First, note that it is enough to prove Theorem 1 for l = 1 and apply it to every column of P . Hence,
we deal with a vector of polynomials p : Rn×k → Rn and need to prove it can be expressed as
P = p∣ɑ∣≤n baqa, for Sn invariant polynomial qa.
Given a polynomial p(X) and the cyclic permutation σ-1 = (123 …n) the following operation,
taking a polynomial to a vector of polynomials, is useful in characterizing equivariant polynomial
maps:
/	p(x)	∖
p(σ ∙ X)
dp](X )=	p(σ2 ∙ X)	⑶
.
.
.
∖p(σn-1 ∙ X)/
Theorem 2 will be proved using the following two lemmas:
Lemma 1. Let p : Rn×k → Rn be an equivariant polynomial map. Then, there exists a polynomial
p : Rn×k → R, invariant to Sn-1 (permuting the last n - 1 rows of X) so that p = dpe.
3
Published as a conference paper at ICLR 2020
Proof. Equivariance of P means that for all σ ∈ Sn it holds that σ ∙ P(X) = p(σ ∙ X)
σ ∙ p(X)= p(σ ∙ X).	(4)
Choosing an arbitrary permutation σ ∈ stab(1) < Sn, namely a permutation satisfying σ(1) = 1, and
observing the first row in Equation 4 We getpι(X) = pι(σ ∙ X) = p1(x1, Xσ-1(2),..., Xσ-i(n)).
Since this is true for all σ ∈ stab(1) p1 is Sn-1 invariant. Next, applying σ = (1i) to Equation 4
and observing the first row again we getpi(X) = p1(xi, . . . , x1, . . .). Using the invariance ofp1 to
Sn-1 we get P = dp1	□
Lemma 2. Letp : Rn×k → R be a polynomial invariant to Sn-1 (permuting the last n - 1 rows of
X) then
p(X) = X x1αqα (X),	(5)
∣α∣≤n
where qα are Sn invariant.
Proof. Expanding p with respect to x1 we get
p(X) =	x1αpα(x2, . . . , xn),	(6)
| α∣≤m
for some m ∈ N. We first claim pα are Sn-1 invariant. Indeed, note that if p(X) =
p(x1, x2, . . . , xn) is Sn-1 invariant, i.e., invariant to permutations of x2, . . . , xn, then also its deriva-
tives ∂Xβlp(X) are Sn-ι permutation invariant, for all β ∈ Nk. Taking the derivative ∂lβl∕∂x； on
both sides of Equation 6 we get that pβ is Sn-1 equivariant.
For brevity denote p = pα. Since p is Sn-1 invariant it can be expressed as a polynomial in the power-
sum multi-symmetric polynomials, i.e., p(x2, . . . , xn) = r(s1(x2, . . . , xn), . . . , st(x2, . . . , xn)).
Note that si (x2 , . . . , xn) = si (X) - x1αi and therefore
p(x2, . . . , xn) = r(s1 (X) - x1α1, . . . , st(X) - x1αt).
Since r is a polynomial, expanding its monomials in si(X) and x1α shows p can be expressed as
P = P∣α∣≤mθ x?Pa, Where m0 ∈ N, and pα are Sn invariant (as multiplication of invariant Sn
polynomials si (X)). Plugging this in Equation 6 we get Equation 5, possibly with the sum over
some n’ > n. It remains to show n0 can be taken to be at-most n. This is proved in Corollary 5 in
Briand (2004)	□
Proof. (Theorem 2) Given an equivariant P as above, use Lemma 1 to write P = dpe where p(X) is
invariant to permuting the last n - 1 rows of X. Use Lemma 2 to write p(X) = p∣ɑ∣≤n Xaqa(X),
where qα are Sn invariant. We get,
P = dpe =	ba qa .
| a∣≤n
The converse direction is immediate after noting that ba are equivariant and qa are invariant. □
4 Universality of set equivariant neural networks
We consider equivariant deep neural networks f : Rn×kin → Rn×kout ,
F(X) = Lm ◦ V ◦•••◦ V ◦ L1(X),	(7)
where Li : Rn×ki → Rn×ki+1 are affine equivariant transformations, and ν is an entry-wise non-
linearity (e.g., ReLU). We define the width of the network to be ω = maxi ki; note that this definition
is different from the one used for standard MLP where the width would be nω, see e.g., Hanin &
Sellke (2017). Zaheer et al. (2017) proved that affine equivariant Li are of the form
Li(X) = XA + -11T XB + IcT,	(8)
n
4
Published as a conference paper at ICLR 2020
where A, B ∈ Rki×ki+1, and c ∈ Rki+1 are the layer’s trainable parameters; we call the linear
transformation X → n 11tXB a linear transmission layer.
We now define the equivariant models considered in this paper: The DeepSets (Zaheer et al.,
2017) architecture is Equation 7 with the choice of layers as in Equation 8. Taking B = 0 in
all layers is the PointNet architecture (Qi et al., 2017). PointNetST is an equivariant model of
the form Equation 7 with layers as in Equation 8 where only a single layer Li has a non-zero
B. The PointNetSeg (Qi et al., 2017) architecture is PointNet composed with an invariant max
layer, namely max(F (X))j = maxi∈[n] F (X)i,j and then concatenating it with the input X, i.e.,
[X, 1 max(F (X))], and feeding is as input to another PointNet G, that is G([X, 1 max(F (X))]).
We will prove PointNetST is permutation equivariant universal and therefore arguably the simplest
permutation equivariant universal model known to date.
Universality of equivariant deep networks is defined next.
Definition 2. Permutation equivariant universality1 of a model F : Rn×kin → Rn×kout means that
for every permutation equivariant continuous function H : Rn×kin → Rn×kout defined over the
cube K = [0, 1]n×kin ⊂ Rn×kin, and > 0 there exists a choice of m (i.e., network depth), ki (i.e.,
network width) and the trainable parameters of F so that kH(X) - F(X)k∞ < for all X ∈ K.
Proof. (Theorem 1) Fact (i), namely that PointNet is not equivariant universal is a consequence of the
following simple lemma:
Lemma 3. Let h = (h1, . . . , hn )T : Rn → Rn be the equivariant linear function defined by
h(x) = 11tx. There is no f : R → R so that ∣hi(x) 一 f (xi)| < 1 forall i ∈ [n] and X ∈ [0,1]n.
Proof. Assume such f exists. Let e1 = (1, 0, . . . , 0)T ∈ Rn . Then,
1 = ∣h2(e1) — h2(0)| ≤ ∣h2(e1) — f(0)| + |f(0) — h2(0)∣ < 1
reaching a contradiction.	□
To prove (ii) we first reduce the problem from the class of all continuous equivariant functions to the
class of equivariant polynomials. This is justified by the following lemma.
Lemma 4. Equivariant polynomials P : Rn×kin → Rn×kout are dense in the space of continuous
equivariant functions F : Rn×kin → Rn×kout over the cube K.
Proof. Take an arbitrary > 0. Consider the function fij : Rn×kin → R, which denotes the (i, j)-th
output entry of F . By the Stone-Weierstrass Theorem there exists a polynomial pij : Rn×kin → R
such that kfij (X) 一 pij(X)k∞ ≤ for all X ∈ K. Consider the polynomial map P : Rn×kin →
Rn×kout defined by (P)ij = pij. P is in general not equivariant. To finish the proof we will
symmetrize P :
F (X) - n! X σ ∙ P(σ-1∙χ)	= 1 X σ ∙ F (σ-1 ∙ χ) - n1! X σ ∙ P (σ-1 ∙ χ)
σ∈Sn	∞	σ∈Sn	σ∈Sn
ɪ X σ ∙ (F(σ-1 ∙ X) - P(σ-1 ∙ X))
σ∈Sn
∞
≤
W X e = e,
n!
σ∈Sn
where in the first equality we used the fact that F is equivariant. This concludes the proof since
Ρσ∈sιτ σ ∙ P(σ-1 ∙ X) is an equivariant polynomial map.	□
Now, according to Theorem 2 an arbitrary equivariant polynomial P : Rn×kin → Rn×kout
can be written as P = Ρ∣α∣≤n bα(X)qα(X)t, Where bα(X) =」x?] ∈ Rn and qa =
1Or just equivariant universal in short.
5
Published as a conference paper at ICLR 2020
(qα,1, . . . , qα,kout) ∈ Rkout are invariant polynomials. Remember that every Sn invariant polynomial
can be expressed as a polynomial in the t = n+kin power-sum multi-symmetric polynomials
kin
Sj (X) = 1 pn=1 χαj, j ∈ [t] (We use the 1/n normalized version for a bit more simplicity later
on). We can therefore write P as composition of three maps:
P = Q ◦ L ◦ B,
(9)
Where B : Rn×kin → Rn×t is defined by
B(X) = (b(x1),...,b(xn))T,
b(x) = (xα1, . . . , xαt); L is defined as in Equation 8 With B = [0, I] and A = [e1, . . . , ekin, 0],
Where I ∈ Rt×t the identity matrix and ei ∈ Rt represents the standard basis (as-usual). We assume
αj = ej ∈ Rkin, forj ∈ [kin]. Note that the output of L is of the form
L(B(X)) = (X,1S1(X),1S2(X),...,1St(X)).
Finally, Q : Rn×(kin+t) → Rn×kout is defined by
Q(X, 1S1, . . . , 1St) = (q(x1, S1, . . . , St), . . . , q(xn, S1, . . . , St))T,
and q(x, si,..., St) = p∣α∣<n Xaqa(S1,..., St)T.
The decomposition in Equation 9 of P suggests
that replacing Q, B With Multi-Layer Perceptrons
(MLPs) Would lead to a universal permutation equiv-
ariant netWork consisting of PointNet With a single
linear transmission layer, namely PointNetST.
The F approximating P Will be defined as
F = Ψ ◦ L ◦ Φ,	(10)
Where Φ : Rn×kin → Rn×t and Ψ : Rn×(t+kin) → Figure 1: The construction of the universal
Rn×kout are both of PointNet architecture, namely netWork (PointNetST).
there exist MLPs φ : Rkin → Rt and ψ : Rt+kin →
Rkout so that Φ(X) = (φ(x1), . . . , φ(xn))T and Ψ(X) = (ψ(x1), . . . , ψ(xn))T. See Figure 1
for an illustration of F .
To build the MLPs φ ,ψ We Will first construct ψ to approximate q, that is, We use the universality of
MLPS (see (Hornik, 1991; Sonoda & Murata, 2017; Hanin & Sellke, 2017)) to construct ψ so that
∣∣ψ(x, si,..., St) - q(x, si,..., st)k∞ < j for all (x, si,..., St) ∈ [0,1]kin+t. Furthermore, as
ψ over [0, 1]kin+t is uniformly continuous, let δ be such that if z, z0 ∈ [0, 1]kin+t, ∣z - z0∣∞ < δ
then ∣∣ψ(z) - ψ(z0) ∣∣∞ < j. Now, we use universality again to construct φ approximating b, that is
We take φ so that ∣φ(x) - b(x)∣∞ < δ for all x ∈ [0, 1]kin.
∣F(X) - P(X)∣∞ ≤ ∣Ψ(L(Φ(X))) - Ψ(L(B(X)))∣∞ + ∣Ψ(L(B(X))) - Q(L(B(X)))∣∞
= erri + err2
First, ∣L(Φ(X)) - L(B(X))∣∞ < δ for all X ∈ K and therefore er门 < j. Second, note that if
X ∈ K then B(X) ∈ [0, 1]n×t and L(B(X)) ∈ [0, 1]n×(kin+t). Therefore by construction of ψ
we have err 2 < j.
To prove (iii) we use the result in Hanin & Sellke (2017) (see Theorem 1) bounding the width of
an MLP approximating a function f : [0, 1]din → Rdout by din + dout. Therefore, the width of the
MLP φ is bounded by kin + t, where the width of the MLP ψ is bounded by t + kin + kout, proving
the bound.	□
We can now prove Cororllary 1.
Proof. (Corollary 1)
The fact that the DeepSets model is equivariant universal is immediate. Indeed, The PointNetST
model can be obtained from the DeepSets model by setting B = 0 in all but one layer, with B as in
Equation 8.
6
Published as a conference paper at ICLR 2020
For the PointNetSeg model note that by Theorem 1 in Qi et al. (2017) every invariant function
f : Rn×kin → Rt can be approximated by a network of the form Ψ(max(F (X))), where (F (X)
is a PointNet model and Ψ is an MLP. In particular, for every ε > 0 there exists such F , Φ
for which kΨ(max(F (X))) - (s1(X), . . . , st(X))k∞ < ε for every X ∈ [0, 1]n×kin where
s1 (X), . . . , st (X) are the power-sum multi-symmetric polynomials. It follows that we can use
PointNetSeg to approximate 1(s1(X), . . . , st(X)). The rest of the proof closely resembles the proof
of Theorem 1.
□
Graph neural networks with constructed adjacency. One approach sometimes applied to learn-
ing from sets of vectors is to define an adjacency matrix (e.g., by thresholding distances of node
feature vectors) and apply a graph neural network to the resulting graph (e.g., Wang et al. (2019), Li
et al. (2019)). Using the common message passing paradigm (Gilmer et al., 2017) in this case boils
to layers of the form: L(X)i = ψ(xi, Pj∈Ni φ(xi, xj)) = ψ(xi, Pj∈[n] N(xi, xj)φ(xi, xj)),
where φ, ψ are MLPs, Ni is the index set of neighbors of node i, and N (xi , xj ) is the indicator
function for the edge (i, j). If N can be approximated by a continuous function, which is the case
at least in the L2 sense for a finite set of vectors, then since L is also equivariant it follows from
Theorem 1 that such a network can be approximated (again, at least in L2 norm) arbitrarily well by
any universal equivariant network such as PointNetST or DeepSets.
We tested the ability of a DeepSets model with varying depth and width to approximate a single graph
convolution layer. We found that a DeepSets model with a small number of layers can approximate a
graph convolution layer reasonably well. For details see Appendix A.
5	Experiments
We conducted experiments in order to validate our theoretical observations. We compared the results
of several equivariant models, as well as baseline (full) MLP, on three equivariant learning tasks: a
classification task (knapsack) and two regression tasks (squared norm and Fiedler eigen vector). For
all tasks we compare results of 7 different models: DeepSets, PointNet, PointNetSeg, PointNetST,
PointNetQT and GraphNet. PointNetQT is PointNet with a single quadratic equivariant transmission
layer as defined in Appendix B. GraphNet is similar to the graph convolution network in Kipf &
Welling (2016) and is defined explicitly in Appendix B. We generated the adjacency matrices for
GraphNet by taking 10 nearest neighbors of each set element. In all experiments we used a network
of the form Equation 7 with m = 6 depth and varying width, fixed across all layers. 2
Equivariant classification. For classification, we chose to learn the multidimensional knapsack
problem, which is known to be NP-hard. We are given a set of 4-vectors, represented by X ∈ Rn×4 ,
and our goal is to learn the equivariant classification function f : Rn×4 → {0, 1}n defined by the
following optimization problem:
n
f(X) = arg max	xi1zi
z
i=1
n
s.t.	xij zi ≤ wj ,	j = 2, 3, 4
i=1
zi ∈ {0, 1} ,	i ∈ [n]
Intuitively, given a set of vectors X ∈ Rn×4, (X)ij = xij, where each row represents an element in
a set, our goal is to find a subset maximizing the value while satisfying budget constraints. The first
column of X defines the value of each element, and the three other columns the costs.
To evaluate the success of a trained model we record the percentage of sets for which the predicted
subset is such that all the budget constrains are satisfied and the value is within 10% of the optimal
value. In Appendix C we detail how we generated this dataset.
Equivariant regression. The first equivariant function we considered for regression is the function
f (X) = 1 Pn=ι Pj=I(Xij - 1 )2. Hanin & Sellke (2017) showed this function cannot be approXi-
2The code can be found at https://github.com/NimrodSegol/On-Universal-Equivariant-Set-Networks
7
Published as a conference paper at ICLR 2020
Knapsack test
Fiedler test
βM05
0Λ004∙
βM03
ootxa-
OOOOl-
OOOOO ~~I-----1-----1-----1----1-----1-----1-----1-----r
O	IOQ	200	300	4(M	500	β(M	7ββ	800
width
Fiedler train
Pχ∈x(X - 2)2 test
Knapsack train
OOOOS
OOOOA-
——PelntNet
DeepSets
——PolntWetSeg
——PeIntNetST
——MU∙
——WiIntNettjr
GraphNet
00003
oaxa
OOOOl
ooooa
width
px∈x(X - 2)2 train
Figure 2: Classification and regression tasks with permutation equivariant models. All the universal
permutation equivariant models perform similarly, while the equivariant non-universal PointNet
demonstrates reduced performace consistently; MLP baseline (with the same number of parameters
as the equivariant models) performs poorly.
mated by MLPs of small width. We drew 10k training examples and 1k test examples i.i.d. from a
N(2, 1) distribution (per entry of X).
The second equivariant function we considered is defined on point clouds X ∈ Rn×3. For each point
cloud we computed a graph by connecting every point to its 10 nearest neighbors. We then computed
the absolute value of the first non trivial eigenvector of the graph Laplacian. We used the ModelNet
dataset (WU et al., 2015) which contains 〜9k training meshes and 〜2k test meshes. The point
clouds are generated by randomly sampling 512 points from each mesh.
Result summary. Figure 2 summarizes train and test accuracy of the 6 models after training
(training details in Appendix C) as a function of the network width ω. We have tested 15 ω values
equidistant in [5, nk2in].
As can be seen in the graphs, in all three datasets the equivariant universal models (PointNetST,
PointNetQT , DeepSets, PointNetSeg) achieved comparable accuracy. PointNet, which is not
equivariant universal, consistently achieved inferior performance compared to the universal models,
as expected by the theory developed in this paper. The non-equivariant MLP, although universal,
used the same width (i.e., same number of parameters) as the equivariant models and was able to
over-fit only on one train set (the quadratic function); its performance on the test sets was inferior by
a large margin to the equivariant models. We also note that in general the GraphNet model achieved
comparable results to the equivariant universal models but was still outperformed by the DeepSets
model.
An interesting point is that although the width used in the experiments in much smaller than the
bound kout + kin + n+k kin established by Theorem 1, the universal models are still able to learn
well the functions we tested on. This raises the question of the tightness of this bound, which we
leave to future work.
6 Conclusions
In this paper we analyze several set equivariant neural networks and compare their approximation
power. We show that while vanilla PointNet (Qi et al., 2017) is not equivariant universal, adding
a single linear transmission layer makes it equivariant universal. Our proof strategy is based on a
characterization of polynomial equivariant functions. As a corollary we show that the DeepSets model
8
Published as a conference paper at ICLR 2020
(Zaheer et al., 2017) and PointNetSeg (Qi et al., 2017) are equivariant universal. Experimentally, we
tested the different models on several classification and regression tasks finding that adding a single
linear transmitting layer to PointNet makes a significant positive impact on performance.
7 Acknowledgements
This research was supported in part by the European Research Council (ERC Consolidator Grant,
LiftMatch 771136) and the Israel Science Foundation (Grant No. 1830/17).
References
Emmanuel Briand. When is the algebra of multisymmetric polynomials generated by the elementary
multisymmetric polynomials. Beitrge zur Algebra und Geometrie, 45, 01 2004.
Justin Gilmer, Samuel S. Schoenholz, Patrick F. Riley, Oriol Vinyals, and George E. Dahl. Neural
message passing for quantum chemistry. CoRR, 2017.
Martin Golubitsky and Ian Stewart. The symmetry perspective. 2002.
Boris Hanin and Mark Sellke. Approximating continuous functions by relu nets of minimal width.
CoRR, abs/1710.11278, 2017. URL http://arxiv.org/abs/1710.11278.
Kurt Hornik. Approximation capabilities of multilayer feedforward networks. Neural networks, 4(2):
251-257,1991.
Nicolas Keriven and Gabriel Peyre. Universal invariant and equivariant graph neural networks. arXiv
preprint arXiv:1905.04943, 2019.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980, 2014.
Thomas N Kipf and Max Welling. Semi-supervised classification with graph convolutional networks.
arXiv preprint arXiv:1609.02907, 2016.
Guohao Li, Matthias Mller, Ali Thabet, and Bernard Ghanem. Deepgcns: Can gcns go as deep as
cnns? In The IEEE International Conference on Computer Vision (ICCV), 2019.
Haggai Maron, Heli Ben-Hamu, Hadar Serviansky, and Yaron Lipman. Provably powerful graph
networks. CoRR, abs/1905.11136, 2019. URL http://arxiv.org/abs/1905.11136.
Silvano Martello and Paolo Toth. Knapsack Problems: Algorithms and Computer Implementations.
John Wiley & Sons, Inc., New York, NY, USA, 1990. ISBN 0-471-92420-2.
Adam Paszke, Sam Gross, Soumith Chintala, Gregory Chanan, Edward Yang, Zachary DeVito,
Zeming Lin, Alban Desmaison, Luca Antiga, and Adam Lerer. Automatic differentiation in
PyTorch. In NIPS Autodiff Workshop, 2017.
Charles R Qi, Hao Su, Kaichun Mo, and Leonidas J Guibas. Pointnet: Deep learning on point sets for
3d classification and segmentation. In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pp. 652-660, 2017.
David Rydh. A minimal set of generators for the ring of multisymmetric functions. In Annales de
l’institut Fourier, volume 57, pp. 1741-1769, 2007.
Akiyoshi Sannai, Yuuki Takai, and Matthieu Cordonnier. Universal approximations of permutation
invariant/equivariant functions by deep neural networks. arXiv preprint arXiv:1903.01939, 2019.
Sho Sonoda and Noboru Murata. Neural network with unbounded activation functions is universal
approximator. Applied and Computational Harmonic Analysis, 43(2):233-268, 2017.
Yue Wang, Yongbin Sun, Ziwei Liu, Sanjay E. Sarma, Michael M. Bronstein, and Justin M. Solomon.
Dynamic graph cnn for learning on point clouds. ACM Transactions on Graphics (TOG), 2019.
9
Published as a conference paper at ICLR 2020
Zhirong Wu, Shuran Song, Aditya Khosla, Fisher Yu, Linguang Zhang, Xiaoou Tang, and Jianxiong
Xiao. 3d shapenets: A deep representation for volumetric shapes. In The IEEE Conference on
Computer Vision and Pattern Recognition (CVPR), June 2015.
Dmitry Yarotsky. Universal approximations of invariant maps by neural networks. arXiv preprint
arXiv:1804.10306, 2018.
Manzil Zaheer, Satwik Kottur, Siamak Ravanbakhsh, Barnabas Poczos, Ruslan R Salakhutdinov,
and Alexander J Smola. Deep sets. In Advances in neural information processing systems, pp.
3391-3401,2017.
A	Approximating graph convolution layer with DeepSets
To test the ability of an equivariant universal model to approximate a graph convolution layer, we
conducted an experiment where we applied a single graph convolution layer (see Appendix B for
a full description of the graph convolution layers used in this paper) with 3 in features and 10 out
features. We constructed a knn graph by taking 10 neighbors. We sampled 1000 examples in R100×3
i.i.d from a N(1, 1) distribution (Per entry of X). The results are summarized in Figure 3. We
regressed to the output of a graph convolution layer using the smooth L1 loss.
Figure 3: Using DeePSets to regress to a single graPh convolution layer. In the left image we varied
the dePth and took a constant width of 200. In the right we varied the width and took a fixed dePth
of 6 layers. The y axes are in log scale. Note that even a 2 layer DeePSets can aPProximate a graPh
convolution layer up to an error of 〜0.01.
0	25	50	75	100	125	150	175	200
epochs
B Description of layers
B.1	Quadratic layer
One potential application of Theorem 2 is augmenting an equivariant neural network (Equation 7)
with equivariant polynomial layers P : Rn×k → Rn×l of some maximal degree d. This can be done
in the following way: look for all solutions to α, β1,β2,... ∈ Nk so that ∣a∣ + P. ∣βi∣ ≤ d. Any
solution to this equation will give a basis element of the form p(X) = dx1αe Qj Pin=1 xiβj .
In the paper we tested PointNetQT, an architecture that adds to PointNet a single quadratic equivariant
layer. We opted to use only the quadratic transmission operators: For a matrix X ∈ Rn×k we define
L(X) ∈ Rn×k as follows:
L(X) = XW1+ 11TXW2 + (11TX)	(11T X)W3 + (XX)W4+ (11TX)	XW5,
where	is a point-wise multiplication and Wi ∈ Rn×k, i ∈ [5] are the learnable parameters.
10
Published as a conference paper at ICLR 2020
B.2	Graph convolution layer
We implement a graph convolution layers as follows
L(X) = BXW2 +XW1 + 1cT
with W1, W2, c learnable parameters. The matrix B is defined as in Kipf & Welling (2016) from
the knn graph of the set. B = D- 1 AD-2 where D is the degree matrix of the graph and A is the
adjacency matrix of the graph with added self-connections.
C Implementation details
Knapsack data generation. We constructed a dataset of 10k training examples and 1k test exam-
ples consisting of 50 × 4 matrices. We took w1 = 100, w2 = 80, w3 = 50. To generate X ∈ R50×4,
we draw an integer uniformly at random between 1 and 100 and randomly choose 50 integers between
1 as the first column of X . We also randomly chose an integer between 1 and 25 and then randomly
chose 150 integers in that range as the three last columns of X. The labels for each input X were
computed by a standard dynamic programming approach, see Martello & Toth (1990).
Optimization. We implemented the experiments in Pytorch Paszke et al. (2017) with the Adam
Kingma & Ba (2014) optimizer for learning. For the classification we used the cross entropy loss
and trained for 150 epochs with learning rate 0.001, learning rate decay of 0.5 every 100 epochs and
batch size 32. For the quadratic function regression we trained for 150 epochs with leaning rate of
0.001, learning rate decay 0.1 every 50 epochs and batch size 64; for the regression to the leading
eigen vector we trained for 50 epochs with leaning rate of 0.001 and batch size 32. To regress to the
output of a single graph convolution layer we trained for 200 epochs with leaning rate of 0.001 and
batch size 32.
11