Published as a conference paper at ICLR 2020
Stochastic AUC Maximization with
Deep Neural Networks
Mingrui Liu
Department of Computer Science
The University of Iowa
Iowa City, IA, 52242, USA
mingrui-liu@uiowa.edu
Yiming Ying
Department of Mathematics and Statistics
SUNY at Albany
Albany, NY, 12222, USA
yying@albany.edu
Zhuoning Yuan
Department of Computer Science
The University of Iowa
Iowa City, IA, 52242, USA
zhuoning-yuan@uiowa.edu
Tianbao Yang
Department of Computer Science
The University of Iowa
Iowa City, IA, 52242, USA
tianbao-yang@uiowa.edu
Ab stract
Stochastic AUC maximization has garnered an increasing interest due to better fit
to imbalanced data classification. However, existing works are limited to stochastic
AUC maximization with a linear predictive model, which restricts its predictive
power when dealing with extremely complex data. In this paper, we consider
stochastic AUC maximization problem with a deep neural network as the predictive
model. Building on the saddle point reformulation of a surrogated loss of AUC,
the problem can be cast into a non-convex concave min-max problem. The main
contribution made in this paper is to make stochastic AUC maximization more
practical for deep neural networks and big data with theoretical insights as well. In
particular, We propose to explore PolyakEojasieWicz (PL) condition that has been
proved and observed in deep learning, which enables us to develop new stochastic
algorithms With even faster convergence rate and more practical step size scheme.
An AdaGrad-style algorithm is also analyzed under the PL condition With adaptive
convergence rate. Our experimental results demonstrate the effectiveness of the
proposed algorithms.
1 Introduction
Deep learning has been Witnessed With tremendous success for various tasks, including computer
vision (Krizhevsky et al., 2012; Simonyan & Zisserman, 2014; He et al., 2016; Ren et al., 2015),
speech recognition (Hinton et al., 2012; Mohamed et al., 2012; Graves, 2013), natural language pro-
cessing (Bahdanau et al., 2014; Sutskever et al., 2014; Devlin et al., 2018), etc. From an optimization
perspective, all of them are solving an empirical risk minimization problem in Which the objective
function is a surrogate loss of the prediction error made by a deep neural netWork in comparison
With the ground-truth label. For example, for image classification task, the objective function is often
chosen as the cross entropy betWeen the probability distribution calculated by forWard propagation
of a convolutional neural netWork and the vector encoding true label information (Krizhevsky et al.,
2012; Simonyan & Zisserman, 2014; He et al., 2016), Where the cross entropy is a surrogate loss of the
misclassification rate. HoWever, When the data is imbalanced, this formulation is not reasonable since
the data coming from minor class have little effect in this case and the model is almost determined by
the data from the majority class.
To address this issue, AUC maximization has been proposed as a neW learning paradigm (Zhao et al.,
2011). Statistically, AUC (short for Area Under the ROC curve) is defined as the probability that the
prediction score of a positive example is higher than that of a negative example (Hanley & McNeil,
1982; 1983) . Compared With misclassification rate and its corresponding surrogate loss, AUC is
more suitable for imbalanced data setting (Elkan, 2001). Several online or stochastic algorithms for
1
Published as a conference paper at ICLR 2020
AUC maximization have been developed based on a convex surrogate loss (Zhao et al., 2011; Gao
et al., 2013; Ying et al., 2016; Liu et al., 2018; Natole et al., 2018). However, all of these works only
consider learning a linear predictive model. This naturally motivates the following question:
How to design stochastic algorithms with provable guarantees to solve the AUC maximization
problem with a deep neural network as the predictive model?
In this paper, we make some efforts to answer this question. We design two algorithms with state-
of-the-art complexities for this problem. Based on a surrogated loss of AUC and inspired by the
min-max reformulation in (Ying et al., 2016), we cast the problem into a non-convex concave min-
max stochastic optimization problem, where it is nonconvex in the primal variable and concave
in the dual variable. This allows us to leverage the inexact proximal point algorithmic framework
proposed in (Rafique et al., 2018) to solve stochastic AUC maximization with a deep neural network.
However, their algorithms are limited for stochastic AUC maximization with a deep neural network
due to three reasons. First, their algorithms are general and do not utilize the underlying favorable
property of the the objective function induced by an overparameterized deep neural network, which
prevents them from designing better algorithms with faster convergence. Second, these algorithms
use a polynomially decaying step size scheme instead of the widely used geometrically decaying step
size scheme in deep neural network training. Third, the algorithm in (Rafique et al., 2018) with the
best attainable complexity only applies to the finite-sum setting, which needs to go through all data at
the end of each stage and are not applicable to the pure stochastic setting.
To address these limitations, We propose to leverage the Polyak-Lojasiewicz (PL) condition of the
objective function for AUC maximization with a deep neural network. The PL condition (or its
equivalent condition) has been proved for a class of linear and non-linear neural networks (Hardt &
Ma, 2016; Charles & Papailiopoulos, 2017; Zhou & Liang, 2017). It is the key to recent developments
that prove that (stochastic) gradient descent can find a global minimum for an overparameterized deep
neural network (Allen-Zhu et al., 2018; Du et al., 2018b). It is also observed in practice for learning
deep neural networks (Li & Yuan, 2017; Kleinberg et al., 2018). From an optimization perspective,
the PL condition has been considered extensively for designing faster optimization algorithms in the
literature (Karimi et al., 2016; Reddi et al., 2016; Lei et al., 2017). However, there still remains a big
gap between existing algorithms that focus on solving a minimization problem and the considered
min-max problem of AUC maximization. It is a non-trivial task to leverage the PL condition of a
non-convex minimization objective for developing faster primal-dual stochastic algorithms to solve
its equivalent non-convex concave min-max problem. The main theoretical contributions in this paper
are to solve this issue. Our contributions are:
•	We propose a stochastic algorithm named Proximal Primal-Dual Stochastic Gradient (PPD-SG)
for solving a min-max formulation of AUC maximization under the PL condition of the surrogated
AUC objective with a deep neural network. We establish a convergence rate in the order of O(1/),
which is faster than that achieved by simply applying the result in (Rafique et al., 2018) to the
considered problem under the PL condition, i.e., O(1/2 3) and O(n/) with n being the size of
training set.
•	In addition, we propose an AdaGrad-style primal-dual algorithm named Proximal Primal-Dual
Adagrad (PPD-Adagrad), and show that it enjoys better adaptive complexity when the growth of
cumulative stochastic gradient is slow. This is the first time an adaptive convergence of a stochastic
AdaGrad-style algorithm is established for solving non-convex concave min-max problems.
•	We evaluate the proposed algorithms on several large-scale benchmark datasets. The experimental
results show that our algorithms have superior performance than other baselines.
To the best of our knowledge, this is the first work incorporating PL condition into stochastic AUC
maximization with a deep neural network as the predictive model, and more generally into solving a
non-convex concave min-max problem. Our results achieve the state-of-the-art iteration complexity
for non-convex concave min-max problems.
2 Related Work
Stochastic AUC Maximization. Stochastic AUC maximization in the classical online setting is
challenging due to its pairwise nature. There are several studies trying to update the model each
2
Published as a conference paper at ICLR 2020
time based on a new sampled/received training data. Instead of storing all examples in the memory,
Zhao et al. (2011) employ reservoir sampling technique to maintain representative samples in a
buffer, based on which their algorithms update the model. To get optimal regret bound, their buffer
size needs to be O(√n), where n is the number of received training examples. Gao et al. (2013)
design a new algorithm which is not buffer-based. Instead, their algorithm needs to maintain the
first-order and second-order statistics of the received data to compute the stochastic gradient, which is
prohibitive for high dimensional data. Based on a novel saddle-point reformulation of a surrogate loss
of AUC proposed by (Ying et al., 2016), there are several studies (Ying et al., 2016; Liu et al., 2018;
Natole et al., 2018) trying to design stochastic primal-dual algorithms. Ying et al. (2016) employ the
classical primal-dual stochastic gradient (Nemirovski et al., 2009) and obtain O(1/√t) convergence
rate. Natole et al. (2018) add a strongly convex regularizer, invoke composite mirror descent (Duchi
et al., 2010) and achieve O(1/t) convergence rate. Liu et al. (2018) leverage the structure of the
formulation, design a multi-stage algorithm and achieve O(1/t) convergence rate without strong
convexity assumptions. However, all of them only consider learning a linear model, which results in
a convex objective function.
Non-Convex Min-max Optimization. Stochastic optimization of non-convex min-max problems
have received increasing interests recently (Rafique et al., 2018; Lin et al., 2018; Sanjabi et al., 2018;
Lu et al., 2019; Jin et al., 2019). When the objective function is weakly convex in the primal variable
and is concave in the dual variable, Rafique et al. (2018) design a proximal guided algorithm in
spirit of the inexact proximal point method (Rockafellar, 1976), which solves a sequence of convex-
concave subproblems constructed by adding a quadratic proximal term in the primal variable with
a periodically updated reference point. Due to the potential non-smoothness of objective function,
they show the convergence to a nearly-stationary point for the equivalent minimization problem. In
the same vein as (Rafique et al., 2018), Lu et al. (2019) design an algorithm by adopting the block
alternating minimization/maximization strategy and show the convergence in terms of the proximal
gradient. When the objective is weakly convex and weakly concave, Lin et al. (2018) propose
a proximal algorithm which solves a strongly monotone variational inequality in each epoch and
establish its convergence to stationary point. Sanjabi et al. (2018) consider non-convex non-concave
min-max games where the inner maximization problem satisfies a PL condition, based on which they
design a multi-step deterministic gradient descent ascent with convergence to a stationary point. It is
notable that our work is different in that (i) we explore the PL condition for the outer minimization
problem instead of the inner maximization problem; (ii) we focus on designing stochastic algorithms
instead of deterministic algorithms.
Leveraging PL Condition for Minimization. PL condition is first introduced by Polyak (Polyak,
1963), which shows that gradient descent is able to enjoy linear convergence to a global minimum
under this condition. Karimi et al. (2016) show that stochastic gradient descent, randomized coordinate
descent, greedy coordinate descent are able to converge to a global minimum with faster rates under
the PL condition. If the objective function has a finite-sum structure and satisfies PL condition, there
are several non-convex SVRG-style algorithms (Reddi et al., 2016; Lei et al., 2017; Nguyen et al.,
2017; Zhou et al., 2018; Li & Li, 2018; Wang et al., 2018), which are guaranteed to converge to a
global minimum with a linear convergence rate. However, the stochastic algorithms in these works
are developed for a minimization problem, and hence is not applicable to the min-max formulation
for stochastic AUC maximization. To the best of our knowledge, Liu et al. (2018) is the only work
that leverages an equivalent condition to the PL condition (namely quadratic growth condition) to
develop a stochastic primal-dual algorithm for AUC maximization with a fast rate. However, as
mentioned before their algorithm and analysis rely on the convexity of the objective function, which
does not hold for AUC maximization with a deep neural network.
Finally, we notice that PL condition is the key to many recent works in deep learning for showing there
is no spurious local minima or for showing global convergence of gradient descent and stochastic
gradient descent methods (Hardt & Ma, 2016; Li & Yuan, 2017; Arora et al., 2018; Allen-Zhu et al.,
2018; Du et al., 2018b;a; Li & Liang, 2018; Allen-Zhu et al., 2018; Zou et al., 2018; Zou & Gu,
2019). Using the square loss, it has also been proved that the PL condition holds globally or locally
for deep linear residual network (Hardt & Ma, 2016), deep linear network, one hidden layer neural
network with Leaky ReLU activation (Charles & Papailiopoulos, 2017; Zhou & Liang, 2017). Several
studies (Li & Yuan, 2017; Arora et al., 2018; Allen-Zhu et al., 2018; Du et al., 2018b; Li & Liang,
2018) consider the trajectory of (stochastic) gradient descent on learning neural networks, and their
analysis imply the PL condition in a certain form. For example, Du et al. (2018b) show that when
3
Published as a conference paper at ICLR 2020
the width of a two layer neural network is sufficiently large, a global optimum would lie in the ball
centered at the initial solution, in which PL condition holds. Allen-Zhu et al. (2018) extends this
insight further to overparameterized deep neural networks with ReLU activation, and show that the
PL condition holds for a global minimum around a random initial solution.
3 Preliminaries and Notations
Let k ∙ k denote the Euclidean norm. A function f (x) is P-Weakly convex if f (x) + 2 ∣∣xk2 is convex,
where ρ is the so-called weak-convexity parameter. A function f(x) satisfies PL condition with
parameter μ > 0 if f (x) — f (x*) ≤ ɪ∣∣Vf (x)∣∣2, where x* stands for the optimal solution of
f. Let Z = (x,y)〜P denote a random data following an unknown distribution P, where X ∈ X
represents the feature vector and y ∈ Y = {-1, +1} represents the label. Denote by Z = X × Y
and by P = Pr(y = 1) = Ey [I[y=i]], where I(∙) is the indicator function.
The area under the curve (AUC) on a population level for a scoring function h : X → R is defined as
AUC(h) = Pr (h(x) ≥ h(x0)|y = 1,y0 = -1) ,
where z = (x, y) and z0 = (x0, y0) are drawn independently from P. By employing the squared loss
as the surrogate for the indicator function that is a common choice used by previous studies (Ying
et al., 2016; Gao et al., 2013), the AUC maximization problem can be formulated as
min Ez,z0 (1 - h(x) + h(x0))2y = 1,y0 = -1 ,
h∈H
where H denotes a hypothesis class. All previous works of AUC maximization assume h(x) = w>x
for simplicity. Instead, we consider learning a general nonlinear model parameterized by w, i.e.
h(w; x), which is not necessarily linear or convex in terms ofw (e.g., h(w; x) can be a score function
defined by a neural network with weights denoted by w). Hence, the corresponding optimization
problem becomes
wm∈iRnd P (w) := Ez,z0 (1-h(w;x)+h(w;x0))2y=1,y0
(1)
The following proposition converts the original optimization problem (1) into a saddle-point problem,
which is similar to Theorem 1 in (Ying et al., 2016). For completeness, the proof is included in the
supplement.
Proposition 1. The optimization problem (1) is equivalent to
min	max f (w, a, b, α) := Ez [F (w, a, b, α; z)] ,	(2)
w∈Rd,(a,b)∈R2 α∈R
where Z = (x, y)〜P, and
F (w, a, b, α, z) = (1 - p) (h(w; x) - a)2 I[y=1] + p(h(w; x) - b)2I[y=-1]
+ 2(1 + α) (ph(w; x)I[y=-i] — (1 — p)h(w; x)I[y=i]) — p(1 — p)α2
Remark: It is notable that the min-max formulation (2) is more favorable than the original formu-
lation (1) for developing a stochastic algorithm that updates the model parameters based on one
example or a mini-batch of samples. For stochastic optimization of (1), one has to carefully sample
both positive and negative examples, which is not allowed in an online setting. It is notable that in the
classical batch-learning setting, p becomes the ratio of positive training examples and the expectation
in (2) becomes average over n individual functions. However, our algorithms are applicable to both
batch-learning setting and online learning setting.
Define v = (w>, a, b)>, φ(v) = maxα f(v, α). It is clear that minw P(w) = minv φ(v) and
P(w) ≤ φ(v) for any v = (w>, a, b)>. The following assumption is made throughout the paper.
Assumption 1. (1) μ(φ(v) 一 φ(v*)) ≤ 2 ∣∣Vφ(v)∣2, where μ > 0 and v* is the optimal solution
of φ. (2) h(w; x) is L-Lipschitz continuous in terms of w for all x. (3) φ(v) is L-smooth. (4)
Var [h(w; x)|y = 一1] ≤ σ2, Var [h(w; x)|y = 1] ≤ σ2. (5) 0 ≤ h(w; x) ≤ 1. (6) Given a initial
solution Vo, there exists ∆0 > 0 such that φ(Vo) 一 φ(v*) ≤ ∆o, where v* is the global minimum of
φ.
Remark: The first condition is inspired by a PL condition on the objective function P(w) for learning
a deep neural network. and the following Lemma 1 establishes the connection. h(w; x) ∈ [0, 1]
holds when h is defined as the sigmoid function composited with the forward propagation function of
a neural network.
4
Published as a conference paper at ICLR 2020
Algorithm 1 Proximally Guided Algorithm (PGA)(RafiqUe et al., 2018)
1:	Initialize Vo = 0 ∈ Rd+2, αo = 0, the global index j = 0
2:	for k = 1, . . . , K do
3:	v0 = vk-1, α0 = αk-1, ηk = η0∕k, Tk = T0 ∙ k
4:	for t = 1, . . . , Tk do
5:	Receive Zj = (Xj,yj) from P, gv = VvF(Vk-1, αk7; Zj), gα = VaF(Vk-i，ak-i； Zj)
6:	Vk =∏Ωι Vk-I- ηk (gv + 1 (Vk-I- Vk))], whereΩι = {v : ∣∣v∣∣ ≤ Rι}
7:	α = ∏Ω2 [α3 + ηkga], where Ω2 = {α : |a| ≤ R2}
8:	end for
9:	Vk = T Pt=k 1 Yvk ak = T Pt= 1 αt
10:	end for
11:	Sample τ uniformly randomly from {1, . . . , K}
12:	return VT, a「
Lemma 1. Suppose kVw h(w; X)k ≤ L for all w and X. If P(w) satisfies PL condition, i.e. there
exists μ > 0, such that μ0(P(W) — minw P(W)) ≤ 1 ∣∣VwP(w)k2 , then we have μ(φ(V) 一
φ(V*)) ≤ 2kvφ(v)k2, where μ = —/	1	, 1	2L2	F.
max ∖ 2 min(P, 1-P)十 μ0 min(p2 ,(1—p)2) , μ0 )
Remark: The PL condition ofP(W) could be proved for learning a neural network similar to existing
studies, which is not the main focus of this paper. Nevertheless, In Appendix A.7, we provide an
example for AUC maximization with one-hidden layer neural network.
Warmup. We first discuss the algorithms and their convergence results of (Rafique et al., 2018)
applied to the considered min-max problem. They have algorithms for problems in batch-learning set-
ting and online learning setting. Since the algorithms for the batch-learning setting have complexities
scaling with n, we will concentrate on the algorithm for the online learning setting. The algorithm
is presented in Algorithm 1, which is a direct application of Algorithm 2 of (Rafique et al., 2018)
to an online setting. Since their analysis requires the domain of the primal and the dual variable to
be bounded, hence we add a ball constraint on the primal variable and the dual variable as well. As
long as R1 and R2 is sufficiently large, they should not affect the solution. The convergence result of
Algorithm 1 is stated below.
Theorem 1. (Rafique et al., 2018) Suppose f (V, α) is ρ-weakly convex in V and concave in α.
Let Y = 1∕2ρ, and define VT = argminv Φ(v) + 2γ∣∣v — Vτ∣2. Algorithm 1 with Tk = ck2
and K =O(E-2) ensures that E [dist2(0,∂φ(Vτ))] ≤ γ2EkVT — VT∣∣2 ≤ e2. The total iteration
6
complexity is O(E-6).
Remark: Under the condition φ(V) is smooth and the returned solution is within the added bounded
ball constraint, the above result implies E[∣Vφ(Vτ)∣∣2 ≤ e] with a complexity of O(1∕e3). It further
implies that with a complexity of O(1∕(μ3e3)) we have E[φ(Vτ) — minv φ(v)] ≤ e under the
assumed PL condition.
We can see that this complexity result under the PL condition of φ(V) is worse than the typical
complexity result of stochastic gradient descent method under the PL condition (i.e., O(1∕e)) (Karimi
et al., 2016). It remains an open problem how to design a stochastic primal-dual algorithm for solving
minv maxα F(V, α) in order to achieve a complexity of O(1∕e) in terms of minimizing φ(V). A
naive idea is to solve the inner maximization problem of α first and the use SGD on the primal
variable V. However, this is not viable since exact maximization over α is a non-trivial task.
4	Algorithms and Theoretical Analysis
In this section, we present two primal-dual algorithms for solving the min-max optimization problem
(2) with corresponding theoretical convergence results. For simplicity, we first assume the positive
ratio p is known in advance, which is true in the batch-learning setting. Handling the unknown p in
an online learning setting is a simple extension, which will be discussed in Section 4.3. The proposed
algorithms follow the same proximal point framework proposed in (Rafique et al., 2018), i.e., we
5
Published as a conference paper at ICLR 2020
Algorithm 2 Proximal Primal-Dual Stochastic Gradient (PPD-SG)
1:
2:
3:
4:
5:
Initialize Vo = 0 ∈ Rd+2, αo = 0, the global index j = 0
for k = 1, . . . , K do
Vk = Vk-1, αk =(y.k-1, n = no exp (-(k - 1) L
for t = 1, . . . , Tk - 1 do
Receive Zj = (Xj,yj) from P, gv = VVF(Vk-1, αk7;Zj), gα = VaF(Vk-i，ak-i；Zj)
6
7
8
9
10
11
=αk-ι + nk^a
j+1
end for
vk = T PTk-IVk
Draw a minibatch {zj, . . . , zj+mk-1} of size mk
12:
αk
Pj+mk-1 h(Wk Ki)Iyi = -1	pj+mk-1 h(Wk Ki)Iyi = 1
.. . — .. .
13:
=Pj+mk-1 Iyi = -I
j+mk
Pj+mk-1 Iyi = 1
14:	end for
15:	return VK, ακ
j
—
solve the following convex-concave problems approximately and iteratively:
minm∈χ{f (V，a)+2Y kV-V0k2}
(3)
where γ < 1/L to ensure that the new objective function becomes convex and concave, and V0 is
periodically updated.
4.1	Proximal Primal-Dual Stochastic Gradient
Our first algorithm named Proximal Primal-Dual Stochastic Gradient (PPD-SG) is presented in
Algorithm 2. Similar to Algorithm 1, it has a nested loop, where the inner loop is to approximately
solve a regularized min-max optimization problem (3) using stochastic primal-dual gradient method,
and the outer loop updates the reference point and learning rate. One key difference is that PPD-SG
uses a geometrically decaying step size scheme, while Algorithm 1 uses a polynomially decaying
step size scheme. Another key difference is that at the end of k-th outer loop, we update the dual
variable αk in Step 12, which is motivated by its closed-form solution given Vk. In particular, the
given Vk, the dual solution that optimizes the inner maximization problem is given by:
E[h(wk； X)Iy=-l]	E[h(wk； X)Iy=l]
α =-----------------------------------
1-p
Eχ[h(wk;x)|y = -1] - Eχ[h(wk;x)|y = 1]∙
In the algorithm, we only use a small number of samples in Step 11 to compute an estimation of the
optimal α given Vk. These differences are important for us to achieve lower iteration complexity of
PPD-SG. Next, we present our convergence results of PPD-SG.
Lemma 2 (One Epoch Analysis of Algorithm 2). Suppose Assumption 1 and there exists G > 0 such
that kgk∣2 ≤ G, whereg = (VVF (Vk,αk; z)> + 1 (Vk - Vk )>,-V.F (Vk ,ak;z)>) . De-
fine φk(V = Φ(v) + 2γ ∣∣v-Vk-1k2, Sk = argminv∈Rd+2 φk(v). Choosing m1 ≥ “嚣彘四
with C = 	2ι —
n( max(p, 1 —p)
)max(p, 1 — P) ln(1/maχ(p,1-p)), then we have
Ek-1 φkk(Vk) - min φk(v)] ≤
∣∣Vk-ι - Skk2 + 16L2Ek-ιkVk
2ηkTk
T-Vk k2 +4ηk G2.
where Ek-1 stands for the conditional expectation conditioning on all the stochastic events until
Vk-1 is generated.
Theorem 2. Suppose the same conditions in Lemma 2 hold. Set ηk = no exp (一(k — 1) 5^^/l)
and Tk
max(2,16L2)
Lno
C - ________2_____
C = ln( A~~T
max(p,1—p)
exP((k - I) 5+⅛7l), mk
_______________1_____
-)max(p, 1 — P) ln(1/maχ(p,1-p)), Y
2(σ2 + C)L
P(I-P)G2no max(2,16L2)
eχp (k 5+⅛tl) with
21L in Algorithm 2. To return VK such that
E [φ(Vκ) - φ(v*)] ≤ G it suffices to choose K ≥ (5L + 1)max (log 2∆∆0, log K + log 48G2no
p
1
6
Published as a conference paper at ICLR 2020
Algorithm 3 Inner Loop of Proximal Primal-Dual AdaGrad (PPD-AdaGrad)
1:	for t = 1,..., Tk 一 1 do
2:	Receive Zj = (xj,yj) from P, gv = VvF(Vk,αk; Zj), gα = VaF(vk,αk; Zj)
3:	gk = [gv + 1(Vk - Vk); -ga] ∈ Rd+3, gk:t = [gk:t-i, gk], sk,i = ∣∣gnt,i∣∣2,
4:	Hk = δI + diag(sk), Ψk(u) = 2hu 一 u0,H(U — uk)i, where Uk = [vk; α0] ∈ Rd+3
5：	uf+1 = argmun {ηkh 1 PT=ι gT, Ui + 1 ψ(u)}
6: end for
The number of iterations is at most O (jLG), and the required number of samples is at most
O (Lμ3⅞2), where O(∙) hides logarithmic factors of L, μ, e, δ. where O(∙) hides Iogarithmicfactorof
L, μ, e, G, σ.
Remark: The above complexity result is similar to that of (Karimi et al., 2016) for solving non-
convex minimization problem under the PL condition up to a logarithmic factor. Compared with the
complexity result of Algorithm 1 discussed earlier, i.e., O(1∕(μ3c3)), the above complexity in the
order of O(1∕(μ2e)) IS much better - It not only improves the dependence on E but also improves the
dependence on μ.
4.2	Proximal Primal-Dual Adagrad
Our second algorithm named Proximal Primal-Dual Adagrad (PPD-Adagrad) is a AdaGrad-style
algorithm. Since it only differs from PPD-SG in the updates of the inner loop, we only present
the inner loop in Algorithm 3. The updates in the inner loop are similar to the adaptive updates
of traditional AdaGrad (Duchi et al., 2011). We aim to achieve an adaptive convergence by using
PPD-AdaGrad. The analysis of PPD-AdaGrad is inspired by the analysis of AdaGrad for non-convex
minimization problems (Chen et al., 2019). The key difference is that we have to carefully deal with
the primal-dual updates for the non-convex min-max problem. We summarize the convergence results
of PPD-AdaGrad below.
Lemma 3 (One Epoch Analysis of Algorithm 3). Suppose Assumption 1 and ∣∣gjk ∣∣∞ ≤ δ hold. Define
φk(v) = φ(v) + 2γ∣∣v - Vk-Ik2, Sk = argminv∈Rd+2 φk(v). Choosing m- ≥ P(I-(P2++3屣
with C = 	2ι —)max(p, 1 — P)ln(1/maχ(p,1-p)), and
n( max(p,1-p) )
Tk =inf {τ : T ≥ Mk max [ (δ + maxi kgl：T，Ck2)maX(1,8L ) , 2C(X kgk：T,ik2 + (d + 3)(δ + max kgk：T,ik2)))
with Mk > 0, c > 0, then we have
πr L l、	…∙// ∖]∕c(kvk-ι	— sk∣2 + Ek-IkVk-ι —	vkk2)	ι ηk
EkT [φk (Vk)	一 min φk (V)] ≤-----------------ηkMk--------------------+	西.
where Ek-1 stands for the conditional expectation conditioning on all the stochastic events until
Vk-ι is generated.
Theorem 3. Suppose the same conditions as in Lemma 3 hold. Set ηk
η0 exp
(k-1) μ∕L、
F- 5+μ∕L J ,
Mk	=除 exp (⅛n5⅛), mk
P(i-P)η+C+3) exp (k5+^/^) with C
—
in(	2ι	——)max(p, 1 — P)ln(1/maχ(p,1-p)), Y =	2L	and Tk	as in Lemma 3 where C =	2-3.	Sup-
(max(p,1-p) )	+ +
pose IlgkT i∣∣2 ≤ δ ∙ Ta for ∀k, where 0 ≤ α ≤ 1. To return VK such that E [φ(Vκ) — φ(v*)] ≤ G
it suffices to choose K ≥
(5L + 1)max (log 2δ0, log K + log 嚼).
The number of iterations is
at most O ((Lμδ2d) 2(1 Ca ), and the required number ofsamples is at most O (L3^), where O(∙)
hides logarithmic factors of L, μ, E, δ.
Remark: When the cumulative growth of stochastic gradient is slow, i.e., α < 1/2, the number of
iterations is less than that in Theorem 2, which exhibits adaptive iteration complexity.
4.3	Extensions
7
Published as a conference paper at ICLR 2020
Algorithm 4 Update T+ ,T-,p,p(1 - p),y given data {zj,..., zj+m-1}
1: UPdate T- = T- + Pj'+jm-1 5=-」,T+ = T+ + Pj'+jm-1 虹=」
2： b=t+∕(t++t-), y=(j+2)y+pmm-1 j], p\)=(j+1)∖)+jPmm-y)2
Setting ηk,Tk,mk. It is notable that the setting of ηk,Tk, mk depends on unknown parameters μ, L,
etc., which are typically unknown. One heuristic to address this issue is that we can decrease ηk by
a constant factor larger than 1 (e.g., 2 or 5 or 10), and similarly increase Tk and mk by a constant
factor. Another heuristic is to decrease the step size by a constant factor when the performance on a
validation data saturates (Krizhevsky et al., 2012).
Variants when p is unknown. In the online learning setting when p is unknown, the stochastic
gradients of f in both v and α are not directly available. To address this issue, we can keep unbiased
estimators for both p and p(1 - p) which are independent of the new arrived data, and update these
estimators during the optimization procedure. All values depending onp and p(1 -p) (i.e., F, gv, gα)
are estimated by substituting P and p(1 - p) by P and p(1 - p) (i.e., F, gv, ga) respectively. The
approach for keeping unbiased estimator P and p(1 - p) during the optimization is described in
Algorithm 4, where j is the global index, and m is the number of examples received.
Extensions to multi-class problems. In the previous analysis, we only consider the binary classifica-
tion problem. We can extend it to the multi-class setting. To this end, we first introduce the definition
of AUC in this setting according to (Hand & Till, 2001). Suppose there are c classes, we have c
scoring functions for each class, namely h(w1; x), . . . , h(wc; x). We assume that these scores are
normalized such that Pck=1 h(wc; x) = 1. Note that if these functions are implemented by a deep
neural network, they can share the lower layers and have individual last layer of connections. The
AUC is defined as
1c
AUC(h) =	ΣΣPr (h(wi ,x) ≥ h(wi ;x0)|y = i,y0 =j) ,
c(c - 1) i=1 j6=i
Similar to Proposition 1, we can cast the problem into
1c
min max 7⅛n∑∑Ez [Fij (wi , aij , bij , αij ; z)] ,
w,a,b α c(c - 1)
i=1 j6=i
(4)
(5)
where W = [wι,..., Wc], a, b,α ∈ Rc×c, i,j = 1,...,c, Z = (x,y)〜P, Pi = Pr(y = i), and
Fij (wi , aij, bij, αij,z) = pj (h(wi ;x) - aij)2I[y=i] +pi (h(wi ; x) - bij)2I[y=j]
+ 2 (1 + αij) pi h(wi ; x)I[y=j] -pjh(wi ; x)I[y=i] -pi pj αi2j.
Then we can modify our algorithms to accommodate the multiple class pairs. We can also add another
level of sampling of class pairs into computing the stochastic gradients.
5	Experimental Results
In this section, we present some empirical results to verify the effectiveness of the proposed algorithms.
We compare our algorithms (PPD-SG and PPD-AdaGrad) with three baseline methods including
PGA (Algorithm 1), Online AUC method (Ying et al., 2016) (OAUC) that directly employs the
standard primal-dual stochastic gradient method with a decreasing step size for solving the min-max
formulation, and the standard stochastic gradient descent (SGD) for minimizing cross-entropy loss.
Comparing with PGA and OAUC allows us to verify the effectiveness of the proposed algorithms
for solving the same formulation, and comparing with SGD allows us to verify the effectiveness of
maximizing AUC for imbalanced data. We use a residual network with 20 layers (ResNet-20) to
implement the deep neural network for all algorithms.
We use the stagewise step size strategy as in (He et al., 2016) for SGD, i.e. the step size is decreased
by 10 times at 40K, 60K. For PPD-SG and PPD-AdaGrad, we set Ts = T03k,ηs = η0∕3k. T0,η0 are
tuned on a validation data. The value of γ is tuned for PGA and the same value is used for PPD-SG
and PPD-AdaGrad. The initial step size is tuned in [0.1, 0.05, 0.01, 0.008, 0.005] and T0 is tuned
in [200 〜2000] for each algorithm separately. The batch size is set to 128. For STL10, we use a
smaller batch size 32 due to the limited training data.
8
Published as a conference paper at ICLR 2020
Poetlve Ratio: 91%(C2)
0.65
0.β0
0.55
0.50
——SGD
OAUC
PGA
---PP3G
---PPaAdaGrad
0.45
0.40
20	«	60 BO
SofItBratIone (,000)
O 20	40 βθ 60
SofItBratIore (,000)
U
?
Figure 1: Comparison of testing AUC on Cat&Dog, CIFAR10, CIFAR100 and STL10.
We conduct the comparisons on four benchmark datasets, i.e., Cat&Dog (C2), CIFAR10 (C10),
CIFAR100 (C100), STL10. STL10 is an extension of CIFAR10 and the images are acquired
from ImageNet. Cat&Dog is from Kaggle containing 25,000 images of dogs and cats and we
choose an 80:20 split to construct training and testing set. We use 19k/1k, 45k/5k, 45k/5k, 4k/1k
training/validation split on C2, C10, C100, and STL10 respectively. For each dataset, we construct
multiple binary classification tasks with varying imbalanced ratio of number negative examples to
number of positive examples. For details of construction of binary classification tasks, please refer to
the Appendix A.8.
We report the convergence of AUC on testing data in Figure 1, where the title shows the ratio of the
majority class to the minority class. The results about the convergence of AUC versus the time in
seconds are also presented in Figure 3. From the results we can see that for the balanced settings
with ratio equal to 50%, SGD performs consistently better than other methods on C2 and CIFAR10
data. However, it is worse than AUC optimization based methods on CIFAR100 and STL10. For
imbalanced settings, AUC maximization based methods are more advantageous than SGD in most
cases. In addition, PPD-SG and PPD-AdaGrad are mostly better than other baseline algorithms. In
certain cases, PPD-AdaGrad can be faster than PPD-SG. Finally, we observe even better performance
(in Appendix) by a mixed strategy that pre-trains the model with SGD and then switchs to PPD-SG.
6	Conclusion
In this paper, we consider stochastic AUC maximization problem when the predictive model is a deep
neural network. By building on the saddle point reformulation and exploring Polyak-LojasieWicz
condition in deep learning, we have proposed two algorithms with state-of-the-art complexities for
stochastic AUC maximization problem. We have also demonstrated the efficiency of our proposed
algorithms on several benchmark datasets, and the experimental results indicate that our algorithms
converge faster than other baselines. One may consider to extend the analysis techniques to other
problems with the min-max formulation.
Acknowledgments
The authors thank the anonymous reviewers for their helpful comments. M. Liu, Z. Yuan and T. Yang
are partially supported by National Science Foundation CAREER Award 1844403.
9
Published as a conference paper at ICLR 2020
References
Zeyuan Allen-Zhu, Yuanzhi Li, and Zhao Song. A convergence theory for deep learning via over-
parameterization. arXiv preprint arXiv:1811.03962, 2018.
Sanjeev Arora, Nadav Cohen, Noah Golowich, and Wei Hu. A convergence analysis of gradient
descent for deep linear neural networks. arXiv preprint arXiv:1810.02281, 2018.
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly
learning to align and translate. arXiv preprint arXiv:1409.0473, 2014.
Zachary Charles and Dimitris Papailiopoulos. Stability and generalization of learning algorithms that
converge to global optima. arXiv preprint arXiv:1710.08402, 2017.
Zaiyi Chen, Zhuoning Yuan, Jinfeng Yi, Bowen Zhou, Enhong Chen, and Tianbao Yang. Universal
stagewise learning for non-convex problems with convergence on averaged solutions. In Interna-
tional Conference on Learning Representations, 2019. URL https://openreview.net/
forum?id=Syx5V2CcFm.
Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep
bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805, 2018.
Simon S Du, Jason D Lee, Haochuan Li, Liwei Wang, and Xiyu Zhai. Gradient descent finds global
minima of deep neural networks. arXiv preprint arXiv:1811.03804, 2018a.
Simon S Du, Xiyu Zhai, Barnabas Poczos, and Aarti Singh. Gradient descent provably optimizes
over-parameterized neural networks. arXiv preprint arXiv:1810.02054, 2018b.
John Duchi, Elad Hazan, and Yoram Singer. Adaptive subgradient methods for online learning and
stochastic optimization. Journal ofMachine Learning Research, 12(Jul):2121-2159, 2011.
John C Duchi, Shai Shalev-Shwartz, Yoram Singer, and Ambuj Tewari. Composite objective mirror
descent. In COLT, pp.14-26, 2010.
Charles Elkan. The foundations of cost-sensitive learning. In International joint conference on
artificial intelligence, volume 17, pp. 973-978. Lawrence Erlbaum Associates Ltd, 2001.
Wei Gao, Rong Jin, Shenghuo Zhu, and Zhi-Hua Zhou. One-pass auc optimization. In ICML (3), pp.
906-914, 2013.
Alex Graves. Generating sequences with recurrent neural networks. arXiv preprint arXiv:1308.0850,
2013.
David J Hand and Robert J Till. A simple generalisation of the area under the roc curve for multiple
class classification problems. Machine learning, 45(2):171-186, 2001.
James A Hanley and Barbara J McNeil. The meaning and use of the area under a receiver operating
characteristic (roc) curve. Radiology, 143(1):29-36, 1982.
James A Hanley and Barbara J McNeil. A method of comparing the areas under receiver operating
characteristic curves derived from the same cases. Radiology, 148(3):839-843, 1983.
Moritz Hardt and Tengyu Ma. Identity matters in deep learning. arXiv preprint arXiv:1611.04231,
2016.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image
recognition. In Proceedings of the IEEE conference on computer vision and pattern recognition,
pp. 770-778, 2016.
Geoffrey Hinton, Li Deng, Dong Yu, George Dahl, Abdel-rahman Mohamed, Navdeep Jaitly, Andrew
Senior, Vincent Vanhoucke, Patrick Nguyen, Brian Kingsbury, et al. Deep neural networks for
acoustic modeling in speech recognition. IEEE Signal processing magazine, 29, 2012.
Chi Jin, Praneeth Netrapalli, and Michael I Jordan. Minmax optimization: Stable limit points of
gradient descent ascent are locally optimal. arXiv preprint arXiv:1902.00618, 2019.
10
Published as a conference paper at ICLR 2020
Hamed Karimi, Julie Nutini, and Mark Schmidt. Linear convergence of gradient and proximal-
gradient methods under the Polyak-IojasieWicz condition. In Joint European Conference on
Machine Learning and Knowledge Discovery in Databases, pp. 795-811. Springer, 2016.
Robert Kleinberg, Yuanzhi Li, and Yang Yuan. An alternative vieW: When does sgd escaPe local
minima? arXiv preprint arXiv:1802.06175, 2018.
Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classification With deep convolu-
tional neural netWorks. In Advances in neural information processing systems, pp. 1097-1105,
2012.
Lihua Lei, Cheng Ju, Jianbo Chen, and Michael I Jordan. Non-convex finite-sum optimization via
scsg methods. In Advances in Neural Information Processing Systems, pp. 2348-2358, 2017.
Yuanzhi Li and Yingyu Liang. Learning overparameterized neural netWorks via stochastic gradient
descent on structured data. In Advances in Neural Information Processing Systems, pp. 8157-8166,
2018.
Yuanzhi Li and Yang Yuan. Convergence analysis of tWo-layer neural netWorks With relu activation.
In Advances in Neural Information Processing Systems, pp. 597-607, 2017.
Zhize Li and Jian Li. A simple proximal stochastic gradient method for nonsmooth nonconvex
optimization. In Advances in Neural Information Processing Systems, pp. 5564-5574, 2018.
Qihang Lin, Mingrui Liu, Hassan Rafique, and Tianbao Yang. Solving Weakly-convex-Weakly-
concave saddle-point problems as Weakly-monotone variational inequality. arXiv preprint
arXiv:1810.10207, 2018.
Mingrui Liu, Xiaoxuan Zhang, Zaiyi Chen, Xiaoyu Wang, and Tianbao Yang. Fast stochastic auc
maximization With o (1/n)-convergence rate. In International Conference on Machine Learning,
pp. 3195-3203, 2018.
Songtao Lu, Ioannis Tsaknakis, Mingyi Hong, and Yongxin Chen. Hybrid block successive approxi-
mation for one-sided non-convex min-max problems: Algorithms and applications. arXiv preprint
arXiv:1902.08294, 2019.
Abdel-rahman Mohamed, George E Dahl, and Geoffrey Hinton. Acoustic modeling using deep belief
netWorks. IEEE Transactions on Audio, Speech, and Language Processing, 20(1):14-22, 2012.
Michael Natole, Yiming Ying, and SiWei Lyu. Stochastic proximal algorithms for auc maximization.
In International Conference on Machine Learning, pp. 3707-3716, 2018.
Arkadi Nemirovski, Anatoli Juditsky, Guanghui Lan, and Alexander Shapiro. Robust stochastic
approximation approach to stochastic programming. SIAM Journal on optimization, 19(4):1574-
1609, 2009.
Yurii Nesterov. Introductory lectures on convex optimization: A basic course, volume 87. Springer
Science & Business Media, 2013.
Lam M Nguyen, Jie Liu, Katya Scheinberg, and Martin Takac. Stochastic recursive gradient algorithm
for nonconvex optimization. arXiv preprint arXiv:1705.07261, 2017.
Boris Teodorovich Polyak. Gradient methods for minimizing functionals. Zhurnal Vychislitel’noi
Matematiki i Matematicheskoi Fiziki, 3(4):643-653, 1963.
Hassan Rafique, Mingrui Liu, Qihang Lin, and Tianbao Yang. Non-convex min-max optimization:
Provable algorithms and applications in machine learning. arXiv preprint arXiv:1810.02060, 2018.
Sashank J Reddi, Ahmed Hefny, Suvrit Sra, Barnabas Poczos, and Alex Smola. Stochastic variance
reduction for nonconvex optimization. In International conference on machine learning, pp.
314-323, 2016.
Shaoqing Ren, Kaiming He, Ross Girshick, and Jian Sun. Faster r-cnn: ToWards real-time object
detection With region proposal netWorks. In Advances in neural information processing systems,
pp. 91-99, 2015.
11
Published as a conference paper at ICLR 2020
R Tyrrell Rockafellar. Monotone operators and the proximal point algorithm. SIAM journal on
control and optimization,14(5):877-898,1976.
Maziar Sanjabi, Meisam Razaviyayn, and Jason D Lee. Solving non-convex non-concave min-max
games under polyak-l ojasiewicz condition. arXiv preprint arXiv:1812.02878, 2018.
Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image
recognition. arXiv preprint arXiv:1409.1556, 2014.
Ilya Sutskever, Oriol Vinyals, and Quoc V Le. Sequence to sequence learning with neural networks.
In Advances in neural information processing systems, pp. 3104-3112, 2014.
Zhe Wang, Kaiyi Ji, Yi Zhou, Yingbin Liang, and Vahid Tarokh. Spiderboost: A class of faster
variance-reduced algorithms for nonconvex optimization. arXiv preprint arXiv:1810.10690, 2018.
Yiming Ying, Longyin Wen, and Siwei Lyu. Stochastic online auc maximization. In Advances in
Neural Information Processing Systems, pp. 451-459, 2016.
Peilin Zhao, Rong Jin, Tianbao Yang, and Steven C Hoi. Online auc maximization. In Proceedings
of the 28th international conference on machine learning (ICML-11), pp. 233-240, 2011.
Dongruo Zhou, Pan Xu, and Quanquan Gu. Stochastic nested variance reduced gradient descent for
nonconvex optimization. In Advances in Neural Information Processing Systems, pp. 3921-3932,
2018.
Yi Zhou and Yingbin Liang. Characterization of gradient dominance and regularity conditions for
neural networks. arXiv preprint arXiv:1710.06910, 2017.
Difan Zou and Quanquan Gu. An improved analysis of training over-parameterized deep neural
networks. arXiv preprint arXiv:1906.04688, 2019.
Difan Zou, Yuan Cao, Dongruo Zhou, and Quanquan Gu. Stochastic gradient descent optimizes
over-parameterized deep relu networks. arXiv preprint arXiv:1811.08888, 2018.
A Appendix
A. 1 Proof of Proposition 1
Proof. It suffices to prove that
EZ,Z0 (1 - h(w; x) + h(w; x0))2y = 1,y0 = -1 = 1+
min(a,b)∈R2 maXα∈R EZ [F(w, a, b, a; z)]
p(1 - p)
(6)
Note that
LHS = 1 + E h2 (w; x)y = 1 + E h2(w; x0)y0 = -1 - 2E [h(w; x)|y = 1] + 2E [h(w; x0)|y0 =
-	2 (E [h(w; x)|y = 1]) (E [h(w; x0)|y0 = -1])
= 1 + E h2 (w; x)y = 1 - (E [h(w; x)|y = 1])2 + E h2 (w; x0)y0 = -1 - (E [h(w; x0)|y0
-1]
-1])2
2
-	2E [h(w; x)|y = 1] + 2E [h(w; x0)|y0 = -1] + (E[h(w; x)|y = 1] - E[h(w; x0)|y0 = -1])
1 + min E (h(w; x) - a)2 y = 1 + E (h(w; x0) - b)2 y0 = -1 - 2E [h(w; x)|y = 1]
(a,b)∈R2
+ 2E [h(w; x0)|y0 = -1] + max 2α (E [h(w; x0)|y0 = -1] - E [h(w; x)|y = 1]) - α2
α∈R
1 + (am% maxEZ {p (h(w；x) - a)2 I[y=i] + 1—p(h(w； x) - b)2I[y=-1]
+2(1 + α) (ɪ--ph(w； x)I[y=-i] - |h(w； x)I[y=ι) - α2}
1+
min(a,b)∈R2 maXα∈R EZ [F(w, a, b, a; z)]
p(1 - p)
RHS.
(7)
12
Published as a conference paper at ICLR 2020
Note that the optimal values of a,b,α are chosen as a* = E [h(w; x)|y = 1], b =
E [h(w; x0)∣y0 = —1], α* = E [h(w; x0)∣y0 = —1] — E [h(w; x)|y = 1].	□
A.2 PROOF OF LEMMA 2
Proof. Define α*,k = argmaXa f(Vk,a), U = (v>,α)> ∈ Rd+3, u*,k = (v>, α*,k)>, Uk
((Vk)>,αk)>, gk = (VVf(Vk,αk)T + 1 (Vk — Vk)> , —Vaf (Vk,αk)T).
φk (Vk) — min φk (v)
v
(a)
= max
a
f (Vk ,a) + ɪ ∣∣Vk — Vk-Ik2
.	2Y
一min max
V a
f (v,α) + 2Ykv — vk-1∣2
(b)
≤
f (Vk, α*,k) + 丁|| Vk — Vk-1∣∣2
.	2Y
f (sk, ak ) + 泊 ∣∣sk — Vk-1 Il2
—
(C)
≤
where
mi∏v ma:
(a) comes
IlVk-I - Sk∣∣2 +
2ηkTk
from the
∣∣ak-1 — α*,k ∣∣2
2ηk Tk
definition
+ ηk G2 +
of	φk,
P=-I(Uk — u*,k )τ(gk —g)
Tk
(b) holds because
IXa [/(v,a) + 2γI∣v — Vk-1H2] ≥ f(sk,ɑk) + 2γll≡k — Vk-1∣R (c) comes from
the standard analysis of primal-dual stochastic gradient method.
Denote Ek-1 by taking the conditional expectation conditioning on all the stochastic events until
Vk-1 is generated. Taking Ek-1 on both sides and noting that gk is an unbiased estimator of gk for
∀t, k, We have
π7 L 、	.	1 (	-∖	—	llvk-1 —	sk ∣∣2	,	Ek-IIlak-1	—	α*,k∣2 , 厘 ∣ τ
Ek-1 φk (Vk ) — min φk (V) ≤ ---ɔ~~+-------1-------ɔ~~+---------+ ηkG + 1,
L	V 」	2ηk Tk	2ηk Tk
Where
I = Efc I "PTk0 1 (αk - α*,k) (-Vaf (Vk, α ) 一 (-VaF(Vk, α ； ξk )))
Define α0 = αk and
ek+1 = arg nun (—Vaf (v0, αk) — (—VaF(v0, αk; ξk))) α + +(。一ek)∙
By first-order optimality condition, We have
(8)
(ek — α*,k) (—Vaf(v0,αk) — (—VaF(v0, o0; ξf)))
≤ (ek— α*'k )2—(那+1— α*,k )2 + ηk ( — Vaf (v0 , αt ) — (—VaF (v0 , αt ； ξ )))2
where the first inequality holds due to (8). Hence we have
π7 L	llvk-1 — sk Il . Ek-IIIak-1 — α*,k∣∣	, 2 W
Ek-1 φk (Vk ) - min φk (v) ≤ ---;ς~~+-----1-----------+----------+ 2ηkG ∙
L	V 」	2ηkTk	ηk Tk
Define	Xj： j+mfc —1 -1	=	(Xj ,	∙ ∙ ∙ ,	xj+mk —ι -1 ),	yj:j+mk-1 -1	=	(yj ,	∙ ∙ ∙	, yj+m⅛-ι -1 ),	and
Pj+mk-1 —1	,、，)1
f(xj：j+mk—ι-1,"j+mk-1-1) = "pj+mk—(IU-I ) yLy — Ex[h(wk-1； x)∣y]. NOtethat 0 ≤
i=j=j	Iyi = y
13
Published as a conference paper at ICLR 2020
h ≤ 1. Then We know that
EXj：j+mfc_1-i (f (xj j+mk-1-1, yjj+mk-i-1)lyjj+mk-i-1)
≤ P"T 小∙1(Pi+mkτT Iy『＞0)+1∙1(PSmkTT Iy『河.
Hence
Ek-I [f2 (Xj)..., xj+mk-ι-1, yj)..., yj+mk-i-1)]
Eyj：j + mk-1-1
≤ Eyj：j十mk-1-1
[EXjj+mk-ι-ι (f (Xjj+mk-1-1, yj：j+mk-1-1)lyj：j+mk-1-1]
k2
Σj+7-1-1 Iyi = y rPsmkTT Iy『＞0)+1 ∙1(pj+mk-1-1 Iy
σ2
≤ mk-iPr(yi = y)
+ (1 - Pr (yi = y))mk-1.
Hence we have
Ek-1 Ilak-I - α*,k-i∣∣2
Pj±mk-1-1 h(w k-i； Xi 凡--1
「1-	- EXih(W k-1； X)Iy=T
+Eχ[h(wk-1；X)∣y = 1]- WUI
i-j=j	Iyi=I
2
2σ2	一	2σ2	一
≤ mk-1Pr(yj = -1) + 2(I-Pr (L-3+ mk-1Pr(yj = 1) + 2(1 -	(统=小…
2σ2
-------------+ 2pmk-1 + 2(1 - p)mk-
mk-1P(1 - P)
2
≤ 2 Uk-1p(1 - p)
+ 2(max(p, 1 — p))mk-1
(≤) 2( σ2	+ ɪ ʌ ≤	2(σ2 + C)
一	Imk-Ip(1 - p)	mk-1) ~ mk-1p(1 - p).
where C =	-----21----Y max(p, 1 — p)ln(1/max(p,1-p)), and (a) holds since the function x max(p, 1 一
ln( max(p, 1 — P) )
p)x achieves its maximum at point X = 1/ ln(1/ max(p, 1 — p)).
By the update of ak-1, 2L-Lipschitz continuity of E [h(w; x) ∣y = -1] - E [h(w; x) ∣y = 1], and
noting that α*,k = E [h(Wk； x)∣y = -1] - E [h(Wk； x)∣y = 1], we have
Ek-IIlak-1 - α*,k∣∣2 = Ek-I Ilak-I - α*,k-1 + α*,k-1 - α*,k『
≤ Ek-1 (2kαk-1 - α*,k-1∣∣2 + 2∣∣α*,k-1 - α*,k∣∣2) ≤ ---+-ʒ + 8L2Ek-IIlvk-1 - Vk ∣∣2∙
mk-1 p(1 - p)
Taking mk-1 ≥ P(I，蓝％k, then we have
Ek-1 鼠(Vk) - minφk(v)i ≤ kvk-1 - Sk『+ 々Lfk-1 kvk-1 - vk仃 +4%G2.
L	V 」	2ηkTk
□
A.3 PROOF OF THEOREM 2
Proof. Define φk (v) = φ(v) + 广 ∣∣v-Vk-1∣2. We can see that φk (v) is convex and smooth function
since Y ≤ 1/L. The smoothness parameter of φk IS L = L+γ 1. Define Sk = argmιnv∈Rd十2 φk(v).
According to Theorem 2.1.5 of (Nesterov, 2013), we have
∣∣Vφk(vk)∣2 ≤ 2L(φk(Vk) - Φk(sk)).
(9)
14
Published as a conference paper at ICLR 2020
Combining (9) with Lemma 2 yields
Ek-IkVφk(Vk )∣∣2 ≤ 2L ( MT-Sk k2 + ?	M-L vkk2 +4ηk G2
∖	2ηkTk
Note that φk (v) is (YT - L)-strongly convex, and Y =芸,We have
Φk(Vk-1) ≥ φk(Sk) + 2∣∣Vk-i - SkI∣2.
(10)
(11)
Plugging in Sk into Lemma 2 and combining (11) yield
Ek-ι[Φ(Vk) + LkVk - Vk-IIl2]
≤ φk(Vk-I)- L M-I-Skk2 + kVk-1-Skk2 +1：：2EkTkVkT- Vk k2 +4ηkG2.
By using ηkTkL ≥ max(2,16L2), rearranging the terms, and noting that φk(Vk-ι) = Φ(Vk-ι), we
have
∣∣Vk-1 - Skk + 16L Ek-IkVk-1 - Vkk	、 雨 u∕- ʌi . z1 「2 O
-------------ɑ≤------------------ ≤ Φ(Vk-i) - Ek-1 [φ(Vk)] + 4ηkG .	(12)
2ηk Tk
Combining (12) and (10) yields
Ek-IkVφk(Vk)k2 ≤ 6L (φ(Vk-i) - Ek-i [φ(Vk)] + 8ηkG2) .	(13)
Taking expectation on both sides over all randomness until Vk-ι is generated and by the tower
property, we have
E∣∣Vφk(Vk)k2 ≤ 6L (E [φ(Vk-i) - Φ(v*)] - E[φ(Vk) - Φ(v*)] + 8ηkG2).
Note that Φ(v) is L-smooth and hence is L-weakly convex, so we have
Φ(Vk-i) ≥ φ(Vk) + hVφ(Vk), Vk-1 - Vk〉- L ∣∣Vk-i - Vkk2
_____ 、_	、	、3 …	„o
=φ(vk ) +〈V0(vk ) + 2L(Vk - Vk-1), vk-i - Vki + $ LkVk-I - Vkk
=Φ(Vk) + hVφk(Vk), Vk-1 - Vki + 3LkVk-I - Vkk2
=Φ(Vk) - ɪ hVφk(Vk), Vφk(Vk) - Vφ(Vk)i + ɪkVφk(Vk) - Vφ(Vk)k2
2L	8L
11	3
=φ(vk)-#llV0k(vk)k - -rγ "φk(vk), Vφ(vk)〉+ #∣Nφ(Vk)k ,
8L	4L	8L
where (a) and (b) hold by the definition of φk.
(14)
(15)
Rearranging the terms in (15) yields
11	3
φ(vk) - φ(vk-1) ≤ # llV0k(Vk)k + Ty "φk(vk), Vφ(vk))-7 kV0(Vk)k
8L	4L	8L
(a)	11	3
≤ 淳kVφk(Vk)k2 + 行(kVφk(Vk)k2 + kVφ(Vk)k2)-淳kVφ(Vk)k2
8L	8L	8L
=吃kVφk(Vk)k2 - ɪkVφ(Vk)k2
4L	4L
(b)	1	μ
≤ "INOk (Vk)If -彳(φ(vk) - φ(v*)),
4L	2L
(16)
where (a) holds by using(a, b〉≤ ɪ(∣∣a∣∣2 + ∣∣bk2), and (b) holds by the PL property of φ.
Define ∆k = φ(Vk) - φ(v*). Combining (14) and (16), we can see that
Elʌk - ∆k-1] ≤ ɔ (E["-1 - ∆k] + 8ηkG2) -	EAk],
2	2L
which implies that
(2 + 2L ) E[∆k] ≤ 2 E[∆k-1] + 12ηk G2.
15
Published as a conference paper at ICLR 2020
As a result, We have
E[∆k] ≤ -57yE[∆fc-1] + ∣4ηkG2 = (1 - -/^—) (E[∆ι] + FηkG2)
5 + μ∕L	5 + μ∕L ∖	5 + μ∕L J ∖	5 J
≤ (1 - d¾)kE[∆0] + 24GXη
+	+ μ/ 5	j=1
By setting ηk = η0 exp (一(k - 1)盖洗),We have
1-
〃/L )k+1-j
5 + μ∕L J
E[∆k] ≤ (1 - ^Ly )k e[∆0] + 24G2η0 XX exp (-k-^/Ly)
5 + μ∕L	5	5 + μ∕L
≤ exp (,-kτ~T~Tr ) ∆o + 24 G2ηo k exp (-k _^/L,).
∖	5 + μ∕L)	5	∖	5 + μ∕L J
To achieve E[∆k] ≤ G it suffices to let K satisfy exp (-K小 ≤ min (^^, 48K¾2小),i.e.
K ≥ (5L + 1) max (log 2δ0, log K + log 48G2n0).
Since ηkTkL ≥ max(2,16L2), by the setting of ηk, we set Tk =陋"霁6”)exp ((k - 1) 5"；L.
Then the total iteration complexity is
K
X Tk ≤
k=1
max(2,16L2)
Lηo
exp (k4) - 1
exp
The required number of samples is
(μL ) - 1
∖5+Μ∕L)
KG2
μe
K
Emk
k=1
2(σ2 + C )L
p(1 — p)G2ηo max(2,16L2)
exp
(K ⅛⅛)
exp
-1
L3σ2
(μL ) - 1
15+μ∕L)
μ2e
O
O

O
(等).
□
A.4 PROOF OF LEMMA 3
Proof. Define α*,k
((Vk )>,αk)>.
arg max f (Vk, a), U = (v>,α)> ∈ Rd+3, U*,k = (v>,α*,k)>, Uk
φk (Vk) - min φk (v) =) max
V	a
f (Vk,a) + ɪ∣∣Vk - Vk-1k2
.	2Y
- min max
v a
f (V，a) + 2YkV - Vk-1k2
(b)
≤
f (Vk, α*,k) + 丁|| Vk - Vk-1 Il2
.	2Y
- f (Sk, ɑk) + 2γ Ilsk - Vk-1∣∣2
(c) 1 P
≤ T X
f(Vk, α*,k) WkVk -VkTk2 - (f(Sk,2 + 2γksk - Vk-112)
=Tk X	(f (vk, α*,k) + *llVk - Vk-III2) - (f (vk, αk) + 2γIIVk - Vk-IIl2)
+ (f (vt，ɑt ) + 2γ llvt - Vk-Ill2) - (f (Sk, αt) + * Ilsk - Vk-Ill2)
≤ Tk X(Vv (f (vk, αk) + — IlVk - VOII2) , Vk-Sk) + ^-Vα (f (vk, αk) + — I∣vk - VOII2) , αk - α*,k)
=PT= 1 M - u*,k,g" + PT=1 M - u*,k, gk - g∖
=	T	+	T
I + II
(17)
16
Published as a conference paper at ICLR 2020
where (a) comes from the definition of φk ,	(b) holds because
mvinmax f(v,α) + 21γ∣∣v - Vιk2] ≥ f (Sk, a®) + 21γ∣∣Sk - Vk-1k2, (c) holds by Jensen's
inequality.
Now we bound I and II separately. Define ∣U∣H =√uτHu, ψ0(U) = 0, ψTk,. to be the conjugate
of ηkΨTk, which is ψTk* (g) = SUpu 卜g, Ui-表ψTk (U)} . Note that
Tk	Tk	1	1
Tk ∙ I = X〈gk , Uk〉- X〈gk , U.,k〉ψTk (U.,k ) +	ψTk (U.,k )
t=1	t=1	ηk	ηk
≤.ψTk(U*,k)+X〈gk,Uk〉+sup{--Xgk,Ul-.ψTk(U*,k)}	(18)
Tk	Tk
=-1 ψTk(U*,k)+X ⑶,Uk〉+ΨTk* - Xgk ,
ηk	t=1	t=1
where the last equality holds by the definition of ψTk,..
In addition, note that
ψTk* (-Xgk! (=) *-Xgk,UTk+J - ~ψTk(UTk+ι) ≤ *-Xgk,UTk+1+ - +ψTfc-ι(UTk+ι)
t=1	t=1	ηk	t=1	ηk
≤ sup
u
(c) ,k .
≤ ΨTk-1
-X gk, U)-W ψTk-1(U)}=ψTk-1 卜 X gk)
Tk -1	Tk -1
-X gk)+Z, WrI (-X gk))+n2k ∣gτk ∣ψτ,*-ι,
t=1	t=1	(19)
where (a) holds due to the update of the Algorithm 3, (b) holds since ψtk+1 (u) ≥ ψtk(u), (c) holds by
the nk-smoothness of ψk,* with respect to ∣∣ ∙ ∣ψk,* = ∣∣ ∙ ||(Hk)—i.
By (19) and noting that VψTj-1 (- PTk-I gk) = UTk, we have
Tk	Tk	Tk-1	Tk -1
X〈gk, Uk〉+ψt; - Xgk ≤ X〈gk, Uk〉+ψTkL - X gk + nkgTk∣ψk,*
t=1	t=1	t=1	t=1	2	Tk -1
(20)
Using (20) recursively and noting that ψ0k(U) = 0, we know that
Tk	Tk	Tk
X〈gk, Uk〉+ψt; - Xgk ≤ n2k X ∣gkIk	(2d
t=1	t=1	t=1	-
Combining (18) and (21), we have
1	η	Tk
I ≤ 诉 ψTk(U*，k)+聆 X kgkkψk-*ι
(22)
17
Published as a conference paper at ICLR 2020
By Lemma 4 of (Duchi et al., 2011) and setting δ ≥ maxt Ilgkk∞, We know that PT= 1 ∣∣gk∣∣2k,* ≤
ψt-1
2 Pd+3 kgk:Tkk 2,andhence
1	η d+3
I ≤ ηkτkψTk(U*，k)+詈 X kgk:Tkk2
δ∣uk - u*,k∣
2ηkTk
2
2+
Uk - u*,k,diag(sTk)(Uk - u*,k))
≤ δ + maxi kgk：Tk,ik
2ηkTk
2ηkTk
d+3
-kul - u*,kl2 + T X llgl:Tk k2
Tk i=1
d
+ T X kgk:Tkk2
(23)
Denote Ek-1 by taking the conditional expectation conditioning on filtration Fk-1 , where Fk-1 is
the σ-algebra generated by all random variables until Vk-ι is generated. Taking Ek-I on both sides
of (17), and employing (23) yields
Ek-1 φk( (Vk) — mvn Φk (v)]
≤ Ek-I	2： TLTk"2 (∣∣vk-1 - sk k2 + ∣∣αk-1 - α*,k ∣∣2) + T X kgk：Tk k2 + Ek-I(II)
2ηk Tk	Tk i=1
=(mt-skk2)Ek-1(δ+ma； it+/2 !+Ek-1(δ+maxi IT+/21依一—“ ∣”
+ Ek-1
where the equality holds since Vk-1 - Sk is measurable with respect to Fk-1.
(24)
Note that
Ek-1
δ δ + maxi kgkTkME.
(—2ηkr-j- kak-1
-α*,kk2
Ek-1
δ + maχi ||gk：Tk,ik2
2ηk Tk
∣∣αk-1 - α*,k-1 + α*,k-1 - α*,k ∣∣2
≤ Ek-1 (δ + maxi fk:Tk,ik2 (2∣αk-1 - α*,k-1k2 + 2∣∣α*,k-1 - α*,kk2)
2ηkTk
(=a)
(+ mgJTK) Ek-1 (2kɑk-1-α*,k-1k2) + Ek
δ + maxi kgk%,ik2
2ηk Tk
• 2∣∣α*,k-1- α*,k ∣∣2
(C)	δ δ + maxi kgk”,ik2
≤ EkT	—2ηkτ—
4(σ2 + C)
mk-1P(1 - P)
+ Ek-1
δ + maxi kgk：Tk,i∣2
2ηkTk
• 2llα*,k-1 - α*,kll2
(≤) E	δδ + maχi kgk%,ik2∖	4(σ2 + C) + E
—k-1 ∖	2ηk Tk	J	mk-1p(1 - P)	k-1
δ + maxi kgk：Tk,i∣2
2ηk Tk
8L2∣Vk-1 - Vkk
2
where (a) holds because(y.k-1 - ɑ*,k-1 and
δ + maχi kj⅛Tk,ik2
2nkTk
are independent conditioning on Fk-1 ,
(b) holds because of the update of ak-1 and α*,k = E [h(w k； x)|y = -1] - E [h(w k ； x)|y = 1], (c)
holds due to the 2L-Lipschitz continuity of E [h(w; x)|y = -1] - E [h(w; x)|y = 1].
18
Published as a conference paper at ICLR 2020
Taking mk-1 ≥ p(i—；)(++3)n2, then We have
Ek-1 [φk (vk) - mvn φk (v)]
≤ Ek-1 (δ + maη1Τk:Tk,ik2) M-I-Skk2 + Ek-1 (T X kgk:Tk,ik2) + Ek-ι(II)
+ Ek-1 (δ + maxT⅛,ik2) ∙ 2ηk(d + 3) + Ek-1 (δ + maηITk：Tk,ik
8L2kVk-1 - Vkk2
Ek-1
δ + maχi kg、Tk,ik2
2ηkTk
IIVk-I - skk2 + Ek-I
T (X kgk：Tk,ik2 + (d + 3) (δ + max kg^
+ Ek-1 (II) + Ek-1
δ + maχi kgk：Tk,ik2
2ηkTk
• 8L2kVk-1 - Vkk2
Define αe0k = α0k and
ηt	1
ek+1 = argmɑn n E(-V°f(vk,αk) - (-VaF(vk,αk; ξk))) α +-ψk(α),
τ=1
Where ψtk(α) = ψtk(u) in Which u = [0, . . . , 0, α] and u0k = [0, . . . , 0, α0k]. By setting
Tk =inf (T : T ≥ Mk max ((' + mxi 阖二⑸侬乳1, 8L2), 2c (£ Ι倒：”/2 + (d +3) G + max kgk：T,ik2)!!),
then Tk is a stopping time Which is bounded almost surely. By stopping time argument, We have
Ek-1
PT= I(Vk - * v*)> (VVf(Vk, ɑk) - VVF(Vk,ak; ξk)))
T
0
PT=1(αk - α )> (-Vαf (vk ,α ) - (-VaF (Vk ,α ； ξk )))
Tk
Hence We knoW that
v rm *	JP3(ek -α*,k)(-Vaf(Vk,α)-(-VaF(Vk,α；ξ)))-
Ek-1 (II) = Ek-1 ------------------------------------------------------ .
Tk
Note that the variance of stochastic gradient is smaller than its second moment, We can folloW the
similar analysis of bounding I to shoW that
Ek-1 (II) ≤ Ek-1
δ + maχi kgk：Tk,ik2
2ηkTk
d+3
kuk - u*,k k2 + T X kgk:Tkk
Tk
i=1
FolloWing the same analysis of bounding the RHS of (23), We knoW that
2
Ek-Jφk (Vk)-
mVin φk (V) ≤
c (kvk-1 - skk2 + Ek-1kvk-1 - vkk2)	ηk
	+ --
ηkMk---------------------------------CMk
□
A.5 Proof of Theorem 3
Proof. Define φk (v) = φ(v) + 2γ kv-Vk-1k2. We can see that φk (v) is convex and smooth function
since γ ≤ 1/L. The smoothness parameter ofφk is L = L+γ-1. Define Sk = arg minV∈Rd+2 φk(v).
According to Theorem 2.1.5 of (Nesterov, 2013), We have
kVφk(Vk)k2 ≤ 2L(φk(Vk) - φk(Sk)).	(25)
19
Published as a conference paper at ICLR 2020
Combining (25) with Lemma 3 yields
EiVφk (Vk 肝 ≤ 2L (*I-Sk k2 ；M：MTi k2) + 治
Note that φk (v) is (YT - L)-strongly convex, and Y =芸,We have
(26)
Φk(Vk-1) ≥ φk(Sk) + L∣∣Vk-i - SkI∣2.	(27)
Plugging in Sk into Lemma 3 and combining (27) yield
Ir Ur 2 . 2 Il- - I∣2]/入 L ʌ L∣∣-	∣∣2 , c(∣vk-1 - sk∣∣2 + Ek-IIlVk-1 - VkIl2)
Ek-1 [φ(vk ) + LIlVk - Vk-Ill ] ≤ φk(Vk-I) - χ∣∣Vk-I - sk ∣∣ H---------------7^7--------------
2	_	_ ηkMk
By taking ηkMkL ≥ 4c, rearranging the terms, and noting that φk(Vk-I) = φ(Vk-ι), we have
ηk
+ ~~~~
+ cMk
C(MT-Skk2 + EkTkVkT- Vkk2)≤ φ(Vk-ι) - Ek-ι [φ(Vk)] + *.(28)
ηk Mk	cMk
Combining (28) and (26) yields
Ek-IllVφk (Vk )∣∣2 ≤ 6L (φ(Vk-I)- Ek-I [0(Vk)] + 2	) .	(29)
cMk
Taking expectation on both sides over all randomness until Vk-ι is generated and by the tower
property, we have
E∣Vφk(Vk )∣2 ≤ 6L(E [φ(Vk-ι) - φ(V*)] - E [φ(Vk) - φ(V*)] +
Note that Φ(v) is L-smooth and hence is L-weakly convex, so we have
Φ(Vk-i) ≥ Φ(Vk) + hVφ(Vk), Vk-1 - Vk〉- L ∣∣Vk-i - Vkk2
3
=φ(vk) + hVφ(vk) + 2L(vk - Vk-1), Vk-1 - Vki + 2LkVk-I - Vk∣∣2
=Φ(Vk) + hVφk(Vk), Vk-1 - Vki + 2L∣Vk-1 - Vkk2
=Φ(Vk) - ɪ hVφk(Vk), Vφk(Vk) - Vφ(Vk)i + ɪ∣Vφk(Vk) - Vφ(Vk)k2
2L	8L
1	C	1..................3..............C
=φ(vk )-才 ||V0k (vk )k - -τγ "φk (vk ), Vφ(vk ))+ # ||V0(Vk )k ,
8L	4L	8L
where (a) and (b) hold by the definition of φk.
(30)
(31)
Rearranging the terms in (31) yields
11	3
φ(vk) - φ(vk-1) ≤ 湛 ||V0k(Vk)k + ~τγ "φk(vk), Vφ(vk))-湛 ||V0(Vk)Il
8L	4L	8L
(a)	1	1	,	C	3	C
≤ #IVφk(Vk)∣∣2 + #(IVφk(Vk)∣∣2 + l∣Vφ(Vk)∣∣2)-谟∣∣Vφ(Vk)∣∣2
8L	8L	8L
ɪIVφk(Vk)I2 - ɪIVφ(Vk)I2
4L	4L
(b)	1	μ
≤ "INOk (Vk)Il2 -才(φ(vk) - φ(v*)),
4L	2L
(32)
where (a) holds by using (a, b〉≤ ɪ(|同|2 + ∣∣b∣∣2), and (b) holds by the PL property of φ.
Define ∆k = φ(Vk) - φ(v*). Combining (30) and (32), we can see that
E[∆k - ∆k-1] ≤ 3 (E”-1 - δ-] +
which implies that
E[∆k ],
∣+完)Eam ≤ l Eek-11+CM-.
20
Published as a conference paper at ICLR 2020
As a result, we have
E δ ] /	5 E δ 1 , 6Sk∕cMk) — (1	μ∕L
EAk] ≤ 5+μLEak-1]+ 5 + μ∕L =C- 5+μL
≤ (1- 5+/LL
kk
Ea0] + 5C X M (
j=1 j
By setting ηk = η0 exp
(kT) μ/L ) M1 = _4^ eχn
2	5+μ∕L ) , Mk = Lno exp
1— μ∕L '
5 + μ∕L
((k-1) μ/L
12	5+μ∕L
EM + *
k+1-j
at k-th stage, we have
E[∆k] ≤ (1 — K£/LZ) k E[∆0] + * X exp (-kτ^-L7l
5	5 + μ∕L∕	10c2 M ∖	5 + μ∕L
≤ exp (—k μ∕L ) ∆0 + 吗k exp (—k 〃/L ).
≤ Pk 5 + μ∕L) 0+10c2	Pk 5 + μ∕L)
To achieve E[∆κ] ≤ e, it suffices to let K satisfy exp (—K5*/工) ≤ min (
K ≥ (5L + 1) max (log 智,log K + log ⅛⅛).
⅛L) , i.e.
Take c = √+. If kgkτ,ik2 ≤ δ ∙ Ta for ∀k, where 0 ≤ α ≤ ɪ, and note that when T ≥ 1,
((δ + maxi ∣∣gk∙τi∣∣2)max(1, 8L2)
max -------------------------------------
2c
,(X 1%ik2 + (d + 3) (δ + max |国：中
≤ [(4 + 8L2)√d + 3] δ ∙ Ta
so We have Tk ≤ 侏 exp
⅛1)κ+μ⅛) ∙ [(4 + 8L2)√d +3] δTα, and hence
Tk ≤
exp((k—1)5+%) ∙ h(4+8L 2)√d+≡.
1
1-a
—
Noting that C = √+, We can see that the total iteration complexity is
K
X Tk ≤
k=1
4δ(4 + 8L 2)
Lη0
1
1-a
exp
exp
The required number of samples is
X mk = _2(b2 + C)_
k=1	P(I — p)η0(d + 3)
I____μ/L______
(5+*/L)(2—2a)
μ∕L ʌ
(5+μ∕L)(2-2a))
exp
exp
C μ∕L
5+μ∕L
μ∕L、
5+μ∕L J
-1
-1
-1
e ((Lδ2dʌ 2(τ-α)
(ʌ μ2"
O(字
∖ μ%
1
□
A.6 Proof of Lemma 1
Proof. For any fixed w, define (aW, bW) = arg min φ(w, a, b) (φ(w, a, b) is strongly convex in
a,b
terms of (a, b), so the argmin is Well-defined and unique). Note that
φ(v) 一 φ(v*) = φ(w, a, b) — min φ(w, a, b) = φ(w, a, b) — φ(w, aW, bw) + φ(w, aW, bw) — min φ(w, a, b)
w,a,b	w,a,b
We bound φ(w, a, b) — φ(w, aW, bW) and φ(w, aW, bW) — minw,a,b φ(w, a, b) respectively:
• Note that φ(w, a, b) is strong convex in (a, b) With modulus 2 min(p, 1 - p), so the PL
condition holds, Which means that
Φ(w,a, b) — Φ(w, aW,bW) ≤
4 min(p, 1 - p)
l∣V(a,b)φ(w,a, b)k2
1
21
Published as a conference paper at ICLR 2020
2
φ(w, &w*, bw*) — min φ(w, a, b) = min φ(w, a, b) — min φ(w, a,b) ≤	Rw min φ(w, a, b)
w,α,b	a,b	w,a,b	2μ	a,b
=1- l∣VwΦ(w, a, b) + RwΦ(w, aw, bw) - Vwφ(w, a,b)∣∣2
2μ
≤ 7μ(2 ∣∣Vwφ(w,a, b) -Vwφ(w,aw,bw)∣∣2 + 2 ∣∣Vwφ(w,a,b)∣∣2)
≤ 2μ 卜 L2 i(a, b) - (aw, bw)∣2 +2 ι∣vwφ(w, a, b)∣2)
≤ 2μ (4min(p2L(1 - p)2) Hv(α,b)φ(w,a, b)||2 + 2 kVw φ(w,a,b)k2),
where the last inequality holds since φ(w, a, b) is strongly convex in (a, b) with modulus
2 min(p, 1 - p).
Combining these two cases, We know that φ(v) 一 φ(v*)
1
max(	,1	、+____ 2G2	C ET.
X\2 min(p,1-p)十 μ min(p2 , (1 - p)2) , μ )
≤ 2μol∣Vφ(v)k2, where μ0 =
□
A.7 An example that satisfies PL condition
One Hidden Layer Neural Network One hidden neural network satisfies h(w; x) = σ(w>x),
where σ is the activation function. We have the following theorem:
Theorem 4. Let σ be the Leaky ReLU activation function such that σ(z) = c1z for z > 0 and
σ(z) = c2z ifz ≤ 0. If E[x|y = 1] = E[x|y = -1] = 0, E xx0>y = 1,y = -1 = 0d×d, then
f(w) := Ez,z0 (1 - σ(w>x) + σ(w>x0))2y = 1,y0 = -1
satisfies PL Condition with μ = 2min(c1 ,C2) [λ m^ (E [xx> ∣y = 1]) + λ Μ通(E [xx> ∣y = —1])],
where λmin stands for the minimum eigenvalue.
Remark: Consider the case that x is a zero mean Gaussian distribution with non-degenerate con-
variance matrix. Then μ > 0 since the minimum eigenvalue appeared in the expression of μ is
positive.
Proof. Define g1 (x) = (1-x)2, g2 (w) = σ(w>x)-σ(w>x0), F(w) = (1-σ(w>x)+σ(w>x0))2.
We know that f(w) = Ez,z0 [F (w)|y = 1,y0 = -1], F(w) = g1(g2(w)). For fixed x, x0,
we can write σ(w>x) and σ(w>x0) as aw>x and bw>x0 respectively, and it is obvious that
a2 ≥ min(c21, c22) and b2 ≥ min(c12, c22). Note that g1 is 2-strongly convex. Since the conditional
expectation perserves the strong convexity, as a result, for ∀w, let wp be the closest optimal point of
22
Published as a conference paper at ICLR 2020
W such that f = f (wp),we have
f(wp) - f(w) = E[g1(g2(wp))|y = 1,y0 = -1] - E [g1(g2(w))|y = 1,y0 = -1]
≥ EKVg1(g2(w)),g2(wp) -g2(w)i∣y = 1,y = -1] + E [(g2(w) - g2(wp))2∣y = 1,y0 = -1]
= E [h2(g2(w) - 1), (g2(wp) - g2(w))i|y = 1,y = -1] +E (g2 (w) - g2(wp))2y = 1,y0 = -1
= E [-2(1 - aw>x + bw>x0), (ax> - bx0>)(wp - w)∣∣y = 1, y0 = -1]
+ E [((ax> — bx0>)(wp - w))2∣y =1,y0 = -l]
= E [2(1 - aw>x + bw>x0)(bx0 - ax), wp - w∣∣y = 1, y0 = -1]
+ E [((ax> — bx0>)(wp - w))2∣y =1,y0 = -l]
= hVf (w), wp - wi + E [(wp - w)> (ax - bx0)(ax> - bx0>)(wp - w)∣∣y = 1, y0 = -1]
= hVf (w), wp - wi + (wp - w)>E [(a2xx> + b2x0x0>)∣∣y = 1,y0 = -1] (wp - w)
≥ hVf(w), Wp - Wi + (Wp - w)>λmin (E [(a2xx> + b2x0x0>)∣y = 1,y0 = -1]) (Wp - w)
(W ∕v7r∕ ∖	2 ι 2λmin (E [a2xx>∣y =1]) + 2λm⅛ (E [b2xx>∣y = -1])∣∣	2
≥ hVf(w), Wp - Wi +-------3---------!----弋-----------------!------- Ilwp - wk2
2minfc 2	\ , 2min(C20 [λmin (E[xx>∣y=1]) + λmin (E[xx>∣y = -1])]∣∣	心
≥ hVf (w), Wp - Wi +------------t------------!2---------------t---!-----— ∣∣Wp - W∣2
≥ min "hVf(w), wo - wi + 2min(c1，以[λmin (E [xx>∣y =1]) + λmin (e [xx> ∣y = -1])]]皿，- 卬『
w0	2
=4min(c1, c2)[λmin (E [xx>∣y = 1]) + λmin (E [xx>∣y = -1])] kVf(W)k，
where (*) holds since λmin(A + B) ≥ λmin(A) + λmin(B), and the last inequality holds since
a2 ≥ min(c2,c2) and b2 ≥ min(eɪ, c2).	□
A.8 Dataset Preparation
We construct the datasets in the following ways: For CIFAR10/STL10, we label the first 5 classes as
negative ("-") class and the last 5 classes as positive ("+") class, which leads to a 50/50 class ratio. For
CIFAR100, we label the first 50 classes as negative ("-") class and the last 50 classes as positve ("+")
class. For the imbalanced cases, we randomly remove 90%, 80%, 60% data from negative samples
on all training data, which lead to 91/9, 83/17, 71/29 ratio respectively. For testing data, we keep
them unchanged.
A.9 More Experiments
Model pretraining is effective in many deep learning tasks, and thus we further evaluate the perfor-
mance of the proposed methods on pretrained models. We first train the model using SGD up to 2000
iterations with an initial step size of 0.1, and then continue training using PPD-SG. We denote this
method as PPD-SG+pretrain and the results are shown in Figure 2. The parameters are tuned in the
same range as in Section 5. It is observed that pretraining model helps the convergence of model and
it can achieve the better performance in terms of AUC in most cases.
A.10 Additional Experiments with Different Labeling Order
To investigate the effects of labeling order, we also attempt to randomly partition the classes as
positive or negative equally. For CIFAR10 and STL10 dataset, we randomly partition the 10 classes
into two labels (i.e., randomly select 5 classes as positive label and other 5 classes as negative label).
For CIFAR100 dataset, we randomly partition the 100 classes into two labels (i.e., randomly select
50 classes as positive label and other 50 classes as negative label). After that we randomly remove
95%, 90%, from negative samples on all training data, which lead to 20:1, 10:1 ratios respectively.
For testing data, we keep them unchanged. We also add AdaGrad for minimizing cross-entropy loss
as a new baseline. The corresponding experimental results are included in Figure 3. We can see that
PPD-Adagrad and PPD-SG converge faster than other baselines.
23
Published as a conference paper at ICLR 2020
0∙β5
0.80
0.75
0.70
Poetlve Ratio: 91%(C2)
---SGD
0.55
0.50
0.45
0.40
20
^4fl^
OAUC
PGA
PPD-SG
PPD-AdaGrad
PPD~SG∙⅜re⅛⅛ι
80
^Sr
# of iterations (t8∞)
Poeflve Ratio: 91% (CIO)
0.85
0.80
0.75
Postlve Ratio: 83%(C2)
O 0.70
4 0.65
'——'SGD
CAUC
PGA
PPOSG
PPD-AdaGrad
PP[⅛SG+pretra⅛ι
0.60
0.55
0.50
20
^40^
^βδ^
# Ofiteratens(tSOO)
80
POetlv∙ Ratio: 83% (ClO)
PoStlVe Ratto: 71% (Cl 0)
0.85
0.85
0.75
0.80
0.80
0.75
0.70
0.75
Q 0.70
——SGD
0∙β5
0∙β5
OAUC
PGA
0.60
0.60
0.55
0.55
0.55
0.50
050O
^4fl^
^Sr
20
80
^2δ^
^4δ^
^βδ^
^βδ^
# of iterations (t8∞)
# Ofiteratens(tSOO)
Post⅛∙ Ratio： 91% (ClOO)
Postlve Ratio: 83% (CIOO)
PPD-SG
PPD-AdaGrad
PPD~SG∙⅜re⅛⅛ι
冢65
0.60
50.70
20
80
# of iterations (t8∞)
D.β5
o.fia
D.641
⅞0.55
——SGD
'——'SG□
---SG□
0.55
0.50
0.50
0.50
CAUC
PGA
PPOSG
PPD-AdaGrad
PP[⅛SG+pretra⅛ι
OAUC
PGA
PPD-SG
PPD-AdaGrad
PPD~SG<∙pre⅛iιι
O 0.60
■CC	I
PPD∙SG
——PPD-AdaGrad
I——PPD~SG∙φretra⅛ι∣
——SGD
CAUC
—PGA
PP[ySG
——PPD-AdaGrad
——PPt>SG+pretra⅛ι
^40^
^60^
PosUve Ratio: 71% (ClOO)
20
^40^
^60^
#	of iterations (t8∞)
80
20
^40^
^60^
# Ofiteratens(tSOO)
80
20
^40^
^60^
#	of iterations (t8∞)
80
Poeflve Ratio: 50%(C10)
0.90
0.85
0.80
A75
0.65
0.60
A55
0.50
3 0.70
«3
^20^
^4fl^
^60^
^ββ^
0^
# of iterations (t8∞)
POStlv∙ Ratio: 50% (CIOO)
0.70
0.65
——SGD
OAUC
PGA
A55
0.50
20
^4fl^
PPD-SG
PPD-AdaGrad
PPD~SG+pre⅛⅛ι
^60^
#	of iterations (t8∞)
80
Poeflve Ratio: 91% (STMO)
0.75
0.70
0∙β5
0.50
0.45
升60
0.55
4fl^
^ββ^
^ββ^
O
# of iterations (t8∞)
0.80
POetlv∙ Ratio: 83% (STMO)
0.75
0.70
0.65
oβo
0.55
0.50
0.4S
^20^
^4fl^
^60^
^ββ^
0^
#of iterations (t8∞)
'——'SGD
OAUC
---PGA
PPD-SG
---PPD-AdaGrad
---PPD∙SG+pre⅛in
PoStlVe Ratio: 71% (STLIO)
0.80
0.75
0.70
0∙β5
0.60
0.55
0.50
0.55
0.50
^40^
^ββ^
O
20
80
# of iterations (t800)
Postlve Ratio: 50%传TLlo)
0.80
0.75
0.70
0.60
ɑ 0.65
V，
0.45
20
——'SGD
OAUC
PeAM
PPD∙SG
——PPD-AdaGrad
I——PPD~SG∙φretra⅛ι∣
^4fl^
^ββ^
#	of iterations (t8∞)
80






O


O



Figure 2: Comparison of testing AUC on Cat&Dog, CIFAR10, CIFAR100 and STL10.
Pc» Ithre Ratio: 95% (CIO-Ranciom)
# Of iterations (48∞)
POSItMe Ratio: 95% (CIOO-Random)
#0f iterations (4800)
Pc» Ithre Ratio: 95% (CIO-Random)
Time (*10 sec)
Pc∙∣t⅛e Ratio: 91% (CIO-Ranciom)
# Of iterations (t8∞)
Pc∙∣t⅛e Ratio: 91% (STLIO-Random)
Figure 3: Comparison oftesting AUC on Cat&Dog, CIFAR10, CIFAR100 and STL10, For CIFAR10
and STL10 dataset, We randomly partition the 10 classes into two labels (i.e., randomly select 5
classes as positive label and other 5 classes as negative label). For CIFAR100 dataset, we randomly
partition the 100 classes into two labels (i.e., randomly select 50 classes as positive label and other 50
classes as negative label).
24