Published as a conference paper at ICLR 2020
Reinforcement Learning Based
Graph-to-Sequence Model for
Natural Question Generation
Yu Chen
Department of Computer Science
Rensselaer Polytechnic Institute
cheny39@rpi.edu
Lingfei Wu*
IBM Research
lwu@email.wm.edu
Mohammed J. Zaki
Department of Computer Science
Rensselaer Polytechnic Institute
zaki@cs.rpi.edu
Ab stract
Natural question generation (QG) aims to generate questions from a passage and
an answer. Previous works on QG either (i) ignore the rich structure informa-
tion hidden in text, (ii) solely rely on cross-entropy loss that leads to issues like
exposure bias and inconsistency between train/test measurement, or (iii) fail to
fully exploit the answer information. To address these limitations, in this paper,
we propose a reinforcement learning (RL) based graph-to-sequence (Graph2Seq)
model for QG. Our model consists of a Graph2Seq generator with a novel Bidi-
rectional Gated Graph Neural Network based encoder to embed the passage, and
a hybrid evaluator with a mixed objective combining both cross-entropy and RL
losses to ensure the generation of syntactically and semantically valid text. We
also introduce an effective Deep Alignment Network for incorporating the answer
information into the passage at both the word and contextual levels. Our model
is end-to-end trainable and achieves new state-of-the-art scores, outperforming
existing methods by a significant margin on the standard SQuAD benchmark.
1	Introduction
Natural question generation (QG) has many useful applications such as improving the question an-
swering task (Chen et al., 2017; 2019a) by providing more training data (Tang et al., 2017; Yuan
et al., 2017), generating practice exercises and assessments for educational purposes (Heilman &
Smith, 2010; Danon & Last, 2017), and helping dialog systems to kick-start and continue a conver-
sation with human users (Mostafazadeh et al., 2016). While many existing works focus on QG from
images (Fan et al., 2018; Li et al., 2018) or knowledge bases (Serban et al., 2016; Elsahar et al.,
2018), in this work, we focus on QG from text.
Conventional methods (Mostow & Chen, 2009; Heilman & Smith, 2010; Heilman, 2011) for QG rely
on heuristic rules or hand-crafted templates, leading to the issues of low generalizability and scal-
ability. Recent attempts have been focused on exploiting Neural Network (NN) based approaches
that do not require manually-designed rules and are end-to-end trainable. Encouraged by the huge
success of neural machine translation, these approaches formulate the QG task as a sequence-to-
sequence (Seq2Seq) learning problem. Specifically, attention-based Seq2Seq models (Bahdanau
et al., 2014; Luong et al., 2015) and their enhanced versions with copy (Vinyals et al., 2015; Gu
et al., 2016) and coverage (Tu et al., 2016) mechanisms have been widely applied and show promis-
ing results on this task (Du et al., 2017; Zhou et al., 2017; Song et al., 2018a; Kumar et al., 2018a).
However, these methods typically ignore the hidden structural information associated with a word
φ Corresponding author.
1
Published as a conference paper at ICLR 2020
sequence such as the syntactic parsing tree. Failing to utilize the rich text structure information
beyond the simple word sequence may limit the effectiveness of these models for QG.
It has been observed that in general, cross-entropy based sequence training has several limitations
like exposure bias and inconsistency between train/test measurement (Ranzato et al., 2015; Wu
et al., 2016). As a result, they do not always produce the best results on discrete evaluation metrics
on sequence generation tasks such as text summarization (Paulus et al., 2017) or question gener-
ation (Song et al., 2017). To cope with these issues, some recent QG approaches (Song et al.,
2017; Kumar et al., 2018b) directly optimize evaluation metrics using Reinforcement Learning
(RL) (Williams, 1992). However, existing approaches usually only employ evaluation metrics like
BLEU and ROUGE-L as rewards for RL training. More importantly, they fail to exploit other im-
portant metrics such as syntactic and semantic constraints for guiding high-quality text generation.
Early works on neural QG did not take into account the answer information when generating a
question. Recent works have started to explore various means of utilizing the answer information.
When question generation is guided by the semantics of an answer, the resulting questions become
more relevant and readable. Conceptually, there are three different ways to incorporate the answer
information by simply marking the answer location in the passage (Zhou et al., 2017; Zhao et al.,
2018; Liu et al., 2019), or using complex passage-answer matching strategies (Song et al., 2017),
or separating answers from passages when applying a Seq2Seq model (Kim et al., 2018; Sun et al.,
2018). However, they neglect potential semantic relations between passage words and answer words,
and thus fail to explicitly model the global interactions among them in the embedding space.
To address these aforementioned issues, in this paper, we present a novel reinforcement learning
based generator-evaluator architecture that aims to: i) make full use of rich hidden structure infor-
mation beyond the simple word sequence; ii) generate syntactically and semantically valid text while
maintaining the consistency of train/test measurement; iii) model explicitly the global interactions
of semantic relationships between passage and answer at both word-level and contextual-level.
In particular, to achieve the first goal, we explore two different means to either construct a syntax-
based static graph or a semantics-aware dynamic graph from the text sequence, as well as its rich
hidden structure information. Then, we design a graph-to-sequence (Graph2Seq) model based gen-
erator that encodes the graph representation of a text passage and decodes a question sequence using
a Recurrent Neural Network (RNN). Our Graph2Seq model is based on a novel bidirectional gated
graph neural network, which extends the gated graph neural network (Li et al., 2015) by considering
both incoming and outgoing edges, and fusing them during the graph embedding learning.
To achieve the second goal, we design a hybrid evaluator which is trained by optimizing a mixed
objective function that combines both cross-entropy and RL loss. We use not only discrete evaluation
metrics like BLEU, but also semantic metrics like word mover’s distance (Kusner et al., 2015) to
encourage both syntactically and semantically valid text generation. To achieve the third goal, we
propose a novel Deep Alignment Network (DAN) for effectively incorporating answer information
into the passage at multiple granularity levels.
Our main contributions are as follows:
•	We propose a novel RL-based Graph2Seq model for natural question generation. To the
best of our knowledge, we are the first to introduce the Graph2Seq architecture for QG.
•	We explore both static and dynamic ways of constructing graph from text and are the first
to systematically investigate their performance impacts on a GNN encoder.
•	The proposed model is end-to-end trainable, achieves new state-of-the-art scores, and out-
performs existing methods by a significant margin on the standard SQuAD benchmark for
QG. Our human evaluation study also corroborates that the questions generated by our
model are more natural (semantically and syntactically) compared to other baselines.
2	An RL-based Generator-Evaluator Architecture
In this section, we define the question generation task, and then present our RL-based Graph2Seq
model for question generation. We first motivate the design, and then present the details of each
component as shown in Fig. 1.
2
Published as a conference paper at ICLR 2020
Figure 1: Overall architecture of the proposed model. Best viewed in color.
2.1	Problem Formulation
The goal of question generation is to generate natural language questions based on a given form of
data, such as knowledge base triples or tables (Bao et al., 2018), sentences (Du et al., 2017; Song
et al., 2018a), or images (Li et al., 2018), where the generated questions need to be answerable from
the input data. In this paper, we focus on QG from a given text passage, along with a target answer.
We assume that a text passage is a collection of word tokens Xp “ tx1p, x2p, ..., xpN u, and a target
answer is also a collection of word tokens Xa “ tx1a, x2a, ..., xaL u. The task of natural question
generation is to generate the best natural language question consisting of a sequence of word tokens
Y “ ty1, y2, ..., yT u which maximizes the conditional likelihood Y “ arg maxY P pY |Xp, Xaq.
Here N, L, and T are the lengths of the passage, answer and question, respectively. We focus on the
problem setting where we have a set of passage (and answers) and target questions pairs, to learn
the mapping; existing QG approaches (Du et al., 2017; Song et al., 2018a; Zhao et al., 2018; Kim
et al., 2018) make a similar assumption.
2.2	Deep Alignment Network
Answer information is crucial for generating relevant and high quality questions from a passage. Un-
like previous methods that neglect potential semantic relations between passage and answer words,
we explicitly model the global interactions among them in the embedding space. To this end, we
propose a novel Deep Alignment Network (DAN) component for effectively incorporating answer
information into the passage with multiple granularity levels. Specifically, we perform attention-
based soft-alignment at the word-level, as well as at the contextual-level, so that multiple levels of
alignments can help learn hierarchical representations.
XP □□□□□
Figure 2: The attention-based soft-alignment mechanism.
文P □□□□□
3
Published as a conference paper at ICLR 2020
Let Xp P RF XN and XP P RFpXN denote two embeddings associated with passage text. Similarly,
let Xa P RF XL and Xa P RFaXL denote two embeddings associated with answer text. ConceP-
tually, as shown in Fig. 2, the soft-alignment mechanism consists of three steps: i) compute the
attention score βi,j for each pair of passage word xip and answer word xja : ii) multiply the atten-
tion matrix β with the answer
embeddings Xa to
obtain the aligned answer embeddings Hp for the
passage; iii) concatenate the resulting aligned answer embeddings Hp with the passage embeddings
Xp to get the final passage embeddings HHp P R(Fp'Fa)xN.
Formally, we define our soft-alignment function as following:
〜一	,	〜.	.〜一	一一.	.〜-	〜-E .
HP “ Align(Xp, Xa, Xp, Xa) “ CAT(Xp; Hp) “ CAT(Xp; XaβT)	(1)
where the matrix Hp is the final passage embedding, the function CAT is a simple concatenation
operation, and β is a N X L attention score matrix, computed by
β 9 exp ReLU(WXp)TReLU(WXa)	(2)
where W P RdXF is a trainable weight matrix, with d being the hidden state size and ReLU is the
rectified linear unit (Nair & Hinton, 2010). After introducing the general soft-alignment mechanism,
we next introduce how we do soft-alignment at both word-level and contextual-level.
2.2	. 1 Word-level Alignment
In the word-level alignment stage, we first perform a soft-alignment between the passage and the
answer based only on their pretrained GloVe embeddings and compute the final passage embed-
dings by Hr p “ Align(Gp, Ga , rGp; Bp; Lps, Ga), where Gp, Bp, and Lp are the corresponding
GloVe embedding (Pennington et al., 2014), BERT embedding (Devlin et al., 2018), and linguistic
feature (i.e., case, NER and POS) embedding of the passage text, respectively. Then a bidirectional
LSTM (Hochreiter & Schmidhuber, 1997) is applied to the final passage embeddings Hrp “ thripuiN“1
to obtain contextualized passage embeddings Hp P RF XN.
On the other hand, for the answer text Xa, we simply concatenate its GloVe embedding Ga and
its BERT embedding Ba to obtain its word embedding matrix Ha P RdIXL. Another BiLSTM is
then applied to the concatenated answer embedding sequence to obtain the contextualized answer
embeddings Ha P RF*l.
2.2.2 Contextual-level Alignment
In the contextual-level alignment stage, we perform another soft-alignment based on the contextu-
alized passage and answer embeddings. Similarly, we compute the aligned answer embedding, and
concatenate it with the contextualized passage embedding to obtain the final passage embedding ma-
trix Align(rGp; Bp; Hsps, rGa; Ba; Hs as, Hs p, Hs a). Finally, we apply another BiLSTM to the above
concatenated embedding to get a Fs X N passage embedding matrix X.
2.3	Bidiectional Graph-to-Sequence Generator
While RNNs are good at capturing local dependencies among consecutive words in text, GNNs
have been shown to better utilize the rich hidden text structure information such as syntactic parsing
(Xu et al., 2018b) or semantic parsing (Song et al., 2018b), and can model the global interactions
(relations) among sequence words to further improve the representations. Therefore, unlike most of
the existing methods that rely on RNNs to encode the input passage, we first construct a passage
graph G from text where each passage word is treated as a graph node, and then employ a novel
Graph2Seq model to encode the passage graph (and answer), and to decode the question sequence.
2.3.1	Pas sage Graph Construction
Existing GNNs assume a graph structured input and directly consume it for computing the corre-
sponding node embeddings. However, we need to construct a graph from the text. Although there
4
Published as a conference paper at ICLR 2020
are early attempts on constructing a graph from a sentence (Xu et al., 2018b), there is no clear an-
swer as to the best way of representing text as a graph. We explore both static and dynamic graph
construction approaches, and systematically investigate the performance differences between these
two methods in the experimental section.
Syntax-based static graph construction: We construct a directed and unweighted passage graph
based on dependency parsing. For each sentence in a passage, we first get its dependency parse
tree. We then connect neighboring dependency parse trees by connecting those nodes that are at a
sentence boundary and next to each other in text.
Semantics-aware dynamic graph construction: We dynamically build a directed and weighted graph
to model semantic relationships among passage words. We make the process of building such a
graph depend on not only the passage, but also on the answer. The graph construction procedure
consists of three steps: i) we compute a dense adjacency matrix A for the passage graph by applying
self-attention to the word-level passage embeddings Hp, ii) a kNN-style graph sparsification strat-
egy (Chen et al., 2019c) is adopted to obtain a sparse adjacency matrix A, where We only keep the
K nearest neighbors (including itself) as well as the associated attention scores (i.e., the remaining
attentions scores are masked off) for each node; and iii) inspired by BiLSTM over LSTM, we also
compute two normalized adjacency matrices A% and A$ according to their incoming and outgo-
ing directions, by applying Softmax operation on the resulting sparse adjacency matrix A and its
transpose, respectively.
A “ ReLU(UiHP)t ReLU(UlHp), A = kNN(A), A%, A$ = SOftmax({A, AT})	⑶
where U is a d X (Fp ` Fa) trainable weight matrix. Note that the supervision signal is able to
back-propagate through the graph sparsification operation as the K nearest attention scores are kept.
2.3.2	Bidirectional Gated Graph Neural Networks
To effectively learn the graph embeddings from the constructed text graph, we propose a novel Bidi-
rectional Gated Graph Neural Network (BiGGNN) which extends Gated Graph Sequence Neural
Networks (Li et al., 2015) by learning node embeddings from both incoming and outgoing edges
in an interleaved fashion when processing the directed passage graph. Similar idea has also been
exploited in (Xu et al., 2018a), which extended another popular variant of GNNs - GraphSAGE
(Hamilton et al., 2017). However, one of key difference between our BiGGNN and their bidi-
rectional GraphSAGE is that we fuse the intermediate node embeddings from both incoming and
outgoing directions in every iteration, whereas their model simply learns the node embeddings of
each direction independently and concatenates them in the final step.
In BiGGNN, node embeddings are initialized to the passage embeddings X returned by DAN. The
same set of network parameters are shared at every hop of computation. At each computation hop,
for every node in the graph, we apply an aggregation function which takes as input a set of incoming
(or outgoing) neighboring node vectors and outputs a backward (or forward) aggregation vector. For
the syntax-based static graph, we use a mean aggregator for simplicity although other operators such
as max or attention (Velickovic et al., 2017) could also be employed,
hN%Pvq “ MEAN({hVT} Y thu´1, @u P N%(v)})
hN$(vq “ MEAN({hkT} Y thu´1, @u P N$(v)υ)
(4)
For the semantics-aware dynamic graph we compute a weighted average for aggregation where the
weights come from the normalized adjacency matrices A% and A$ , defined as,
hN%(v) “	£	a%,UhU 1,	hN$pvq =	£	a$,Uhu 1
@uPN%pvq	@uPN$pvq
(5)
While (Xu et al., 2018a) learn separate node embeddings for both directions independently, we opt
to fuse information aggregated in two directions at each hop, which we find works better in general.
hkNpvq “ Fuse(hkN%pvq, hkN$pvq q	(6)
We design the fusion function as a gated sum of two information sources,
Fuse(a, bq “ z d a ` (1 ´ zq d b, z “ σ(Wzra; b; a d b; a ´ bs ` bzq	(7)
5
Published as a conference paper at ICLR 2020
where d is the component-wise multiplication, σ is a sigmoid function, and z is a gating vector.
Finally, a Gated Recurrent Unit (GRU) (Cho et al., 2014) is used to update the node embeddings by
incorporating the aggregation information.
hk “ GRU(hk? hN(vq)	⑻
After n hops of GNN computation, where n is a hyperparameter, we obtain the final state embedding
hvn for node v. To compute the graph-level embedding, we first apply a linear projection to the node
embeddings, and then apply max-pooling over all node embeddings to get a d-dim vector hG .
2.3.3	RNN DECODER
On the decoder side, we adopt the same model architecture as other state-of-the-art Seq2Seq mod-
els where an attention-based (Bahdanau et al., 2014; Luong et al., 2015) LSTM decoder with
copy (Vinyals et al., 2015; Gu et al., 2016) and coverage mechanisms (Tu et al., 2016) is employed.
The decoder takes the graph-level embedding hG followed by two separate fully-connected layers
as initial hidden states (i.e., c0 and s0) and the node embeddings thvn, @v P Gu as the attention
memory, and generates the output sequence one word at a time. The particular decoder used in this
work closely follows (See et al., 2017). We refer the readers to Appendix A for more details.
2.4	Hybrid Evaluator
It has been observed that optimizing such cross-entropy based training objectives for sequence learn-
ing does not always produce the best results on discrete evaluation metrics (Ranzato et al., 2015;
Wu et al., 2016; Paulus et al., 2017). Major limitations of this strategy include exposure bias and
evaluation discrepancy between training and testing. To tackle these issues, some recent QG ap-
proaches (Song et al., 2017; Kumar et al., 2018b) directly optimize evaluation metrics using REIN-
FORCE. We further use a mixed objective function with both syntactic and semantic constraints for
guiding text generation. In particular, we present a hybrid evaluator with a mixed objective function
that combines both cross-entropy loss and RL loss in order to ensure the generation of syntactically
and semantically valid text.
For the RL part, we employ the self-critical sequence training (SCST) algorithm (Rennie et al.,
2017) to directly optimize the evaluation metrics. SCST is an efficient REINFORCE algorithm that
utilizes the output of its own test-time inference algorithm to normalize the rewards it experiences.
In SCST, at each training iteration, the model generates two output sequences: the sampled output
Y s , produced by multinomial sampling, that is, each word yts is sampled according to the likelihood
P(yt |X, y<t) predicted by the generator, and the baseline output Y, obtained by greedy search, that
is, by maximizing the output probability distribution at each decoding step. We define r(Y q as the
reward of an output sequence Y , computed by comparing it to corresponding ground-truth sequence
Y * with some reward metrics. The loss function is defined as:
Lrl = (r(Yq ´ r(Ys)) ∑ log P(yt∖X, yStq	(9)
t
As we can see, if the sampled output has a higher reward than the baseline one, we maximize its
likelihood, and vice versa.
One of the key factors for RL is to pick the proper reward function. To take syntactic and semantic
constraints into account, we consider the following metrics as our reward functions:
Evaluation metric as reward function: We use one of our evaluation metrics, BLEU-4, as our reward
function feval, which lets us directly optimize the model towards the evaluation metrics.
Semantic metric as reward function: One drawback of some evaluation metrics like BLEU is that
they do not measure meaning, but only reward systems that have exact n-gram matches in the ref-
erence system. To make our reward function more effective and robust, we additionally use word
movers distance (WMD) as a semantic reward function fsem. WMD is the state-of-the-art approach
to measure the dissimilarity between two sentences based on word embeddings (Kusner et al., 2015).
Following Gong et al. (2019), we take the negative of the WMD distance between a generated se-
quence and the ground-truth sequence and divide it by the sequence length as its semantic score.
We define the final reward function as r(Y) “ feval(Y, Y*) ` αfsem(Y, Y*) where α is a scalar.
6
Published as a conference paper at ICLR 2020
2.5	Training and Testing
We train our model in two stages. In the first state, we train the model using regular cross-entropy
loss, defined as,
Llm “ £ — log PPy*∣X, y<G + λ Covlosst	(10)
t
where yf is the Word at the t-th position of the ground-truth output sequence and Covlosst is the
coverage loss defined as Xi min(a；, ctt'q, with a； being the i-th element of the attention vector over
the input sequence at time step t. Scheduled teacher forcing (Bengio et al., 2015) is adopted to
alleviate the exposure bias problem. In the second stage, we fine-tune the model by optimizing a
mixed objective function combining both cross-entropy loss and RL loss, defined as,
L = YLrl + pi ´ Y)Llm	(11)
where γ is a scaling factor controling the trade-off between cross-entropy loss and RL loss. During
the testing phase, we use beam search to generate final predictions.
3	Experiments
We evaluate our proposed model against state-of-the-art methods on the SQuAD dataset (Rajpurkar
et al., 2016). Our full models have two variants G2Ssta+BERT+RL and G2Sdyn+BERT+RL which
adopts static graph construction or dynamic graph construction, respectively. For model settings and
sensitivity analysis, please refer to Appendix B and C. The implementation of our model is publicly
available at https://github.com/hugochan/RL-based-Graph2Seq- for-NQG.
3.1	Baseline Methods
We compare against the following baselines in our experiments: i) Transformer (Vaswani et al.,
2017), ii) SeqCopyNet (Zhou et al., 2018), iii) NQG++ (Zhou et al., 2017), iv) MPQG+R (Song
et al., 2017), v) AFPQA (Sun et al., 2018), vi) s2sa-at-mp-gsa (Zhao et al., 2018), vii) ASs2s (Kim
et al., 2018), and viii) CGC-QG (Liu et al., 2019). Detailed descriptions of the baselines are provided
in Appendix D. Experiments on baselines followed by * are conducted using released code. Results
of other baselines are taken from the corresponding papers, with unreported metrics marked as -.
3.2	Data and Metrics
SQuAD contains more than 100K questions posed by crowd workers on 536 Wikipedia arti-
cles. Since the test set of the original SQuAD is not publicly available, the accessible parts
(«90%) are used as the entire dataset in our experiments. For fair comparison with previ-
ous methods, we evaluated our model on both data split-1 (Song et al., 2018a)1 that contains
75,500/17,934/11,805 (train/development/test) examples and data split-2 (Zhou et al., 2017) 2 that
contains 86,635/8,965/8,964 examples.
Following previous works, we use BLEU-4 (Papineni et al., 2002), METEOR (Banerjee & Lavie,
2005), ROUGE-L (Lin, 2004) and Q-BLEU1 (Nema & Khapra, 2018) as our evaluation metrics.
Initially, BLEU-4 and METEOR were designed for evaluating machine translation systems and
ROUGE-L was designed for evaluating text summarization systems. Recently, Q-BLEU1 was de-
signed for better evaluating question generation systems, which was shown to correlate significantly
better with human judgments compared to existing metrics.
Besides automatic evaluation, we also conduct a human evaluation study on split-2. We ask hu-
man evaluators to rate generated questions from a set of anonymized competing systems based on
whether they are syntactically correct, semantically correct and relevant to the passage. The rating
scale is from 1 to 5, on each of the three categories. Evaluation scores from all evaluators are col-
lected and averaged as final scores. Further details on human evaluation can be found in Appendix E.
7
Published as a conference paper at ICLR 2020
Table 1: Automatic evaluation results on the SQuAD test set.
Methods	Split-1			Q-BLEU1	BLEU-4	Split-2 METEOR	ROUGE-L	Q-BLEU1
	BLEU-4 METEOR		ROUGE-L					
Transformer	2.56	8.98	26.01	16:70	3.09^^	9.68	28.86	20.10
SeqCopyNet	—	—	—	一	13.02	—	44.00	—
NQG++	—	—	—	一	13.29	—	一	—
MPQG+R*	14.39	18.99	42.46	52.00	14.71	18.93	42.60	50.30
AFPQA	—	—	—	一	15.64	—	一	—
s2sa-at-mp-gsa	15.32	19.29	43.91	一	15.82	19.67	44.24	—
ASs2s	16.20	19.92	43.96	一	16.17	—	一	—
CGC-QG	—	—	—	一	17.55	21.24	44.53	—
G2Sdyn+BERT+RL	17.55	21.42	45.59	3540	18.06	21.53	45.91	55.00
G2Ssta+BERT+RL	17.94	21.76	46.02	55.60	18.30	21.70	45.98	55.20
Table 2: Human evaluation results (± standard deviation) on the SQUAD split-2 test set. The rating
scale is from 1 to5 (higher scores indicate better results).
Methods	Syntactically correct	Semantically correct	Relevant
MPQG+R*	4.34 (0.15)	4.01 (0.23)	3.21 (0.31)
G2Ssta+BERT+RL	4.41 (0.09)	4.31 (0.12)	3.79 (0.45)
Ground-truth	4.74 (0.14)	4.74 (0.19)	4.25 (0.38)
3.3	Experimental Results and Human Evaluation
Table 1 shows the automatic evaluation results comparing our proposed models against other state-
of-the-art baseline methods. First of all, we can see that both of our full models G2Ssta+BERT+RL
and G2Sdyn+BERT+RL achieve the new state-of-the-art scores on both data splits and consistently
outperform previous methods by a significant margin. This highlights that our RL-based Graph2Seq
model, together with the deep alignment network, successfully addresses the three issues we high-
lighted in Sec. 1. Between these two variants, G2Ssta+BERT+RL outperforms G2Sdyn+BERT+RL
on all the metrics. Also, unlike the baseline methods, our model does not rely on any hand-crafted
rules or ad-hoc strategies, and is fully end-to-end trainable.
As shown in Table 2, we conducted a human evaluation study to assess the quality of the questions
generated by our model, the baseline method MPQG+R, and the ground-truth data in terms of syn-
tax, semantics and relevance metrics. We can see that our best performing model achieves good
results even compared to the ground-truth, and outperforms the strong baseline method MPQG+R.
Our error analysis shows that main syntactic error occurs in repeated/unknown words in generated
questions. Further, the slightly lower quality on semantics also impacts the relevance.
3.4	Ablation S tudy
Table 3: Ablation study on the SQuAD split-2 test set.
Methods	BLEU-4	Methods	BLEU-4
G2Sdyn+BERT+RL	18.06	G2Sdyn	-1681
G2Ssta+BERT+RL	18.30	G2Ssta	16.96
G2S Sta+BERT-fixed+RL	18.20	G2Sdyn w/o DAN	12.58
G2Sdyn+BERT	17.56	G2Ssta w/o DAN	12.62
G2Ssta+BERT	18.02	G2Ssta w/o BiGGNN, w/ Seq2Seq	16.14
G2Ssta+BERT-fixed	17.86	G2Ssta w/o BiGGNN, w/ GCN	14.47
G2Sdyn+RL	17.18	G2Ssta w/ GGNN-forward	16.53
G2Ssta+RL		17.49	G2Ssta w/ GGNN-backward		16.75
Ihttps://www.cs.rochester.edu/~lsong10/downloads/nqg_data.tgz
2https://res.qyzhou.me/redistribute.zip
8
Published as a conference paper at ICLR 2020
As shown in Table 3, we perform an ablation study to systematically assess the impact of differ-
ent model components (e.g., BERT, RL, DAN, and BiGGNN) for two proposed full model variants
(static vs dynamic) on the SQuAD split-2 test set. It confirms our finding that syntax-based static
graph construction (G2Ssta+BERT+RL) performs better than semantics-aware dynamic graph con-
struction (G2Sdyn +BERT+RL) in almost every setting. However, it may be too early to conclude
which one is the method of choice for QG. On the one hand, an advantage of static graph construc-
tion is that useful domain knowledge can be hard-coded into the graph, which can greatly benefit the
downstream task. However, it might suffer if there is a lack of prior knowledge for a specific domain
knowledge. On the other hand, dynamic graph construction does not need any prior knowledge
about the hidden structure of text, and only relies on the attention matrix to capture these structured
information, which provides an easy way to achieve a decent performance. One interesting direction
is to explore effective ways of combining both static and dynamic graphs.
By turning off the Deep Alignment Network (DAN), the BLEU-4 score of G2Ssta (similarly for
G2Sdyn) dramatically drops from 16.96% to 12.62%, which indicates the importance of answer in-
formation for QG and shows the effectiveness of DAN. This can also be verified by comparing the
performance between the DAN-enhanced Seq2Seq model (16.14 BLEU-4 score) and other carefully
designed answer-aware Seq2Seq baselines such as NQG++ (13.29 BLEU-4 score), MPQG+R (14.71
BLEU-4 score) and AFPQA (15.82 BLEU-4 score). Further experiments demonstrate that both
word-level (G2Ssta w/ DAN-word only) and contextual-level (G2Ssta w/ DAN-contextual only) an-
swer alignments in DAN are helpful.
We can see the advantages of Graph2Seq learning over Seq2Seq learning on this task by comparing
the performance between G2Ssta and Seq2Seq. Compared to Seq2Seq based QG methods that com-
pletely ignore hidden structure information in the passage, our Graph2Seq based method is aware of
more hidden structure information such as semantic similarity between any pair of words that are not
directly connected or syntactic relationships between two words captured in a dependency parsing
tree. In our experiments, we also observe that doing both forward and backward message passing
in the GNN encoder is beneficial. Surprisingly, using GCN (Kipf & Welling, 2016) as the graph en-
coder (and converting the input graph to an undirected graph) does not provide good performance.
In addition, fine-tuning the model using REINFORCE can further improve the model performance
in all settings (i.e., w/ and w/o BERT), which shows the benefits of directly optimizing the evalu-
ation metrics. Besides, we find that the pretrained BERT embedding has a considerable impact on
the performance and fine-tuning BERT embedding even further improves the performance, which
demonstrates the power of large-scale pretrained language models.
3.5	Case Study
Tab	le 4: Generated questions on SQUAD split-2 test set. Target answers are underlined.
Passage: for the successful execution of a project, effective planning is essential.
Gold: what is essential for the successful execution of a project ?
G2Ssta w/o BiGGNN (Seq2Seq): what type of planning is essential for the project ?
G2Ssta w/o DAN.: what type of planning is essential for the successful execution of a project ?
G2Ssta: what is essential for the successful execution ofa project ?
G2Ssta+BERT: what is essential for the successful execution ofa project ?
G2Ssta+BERT+RL: what is essential for the successful execution of a project ?
G2Sdyn+BERT+RL: what is essential for the successful execution of a project ?
Passage: the church operates three hundred sixty schools and institutions overseas.
Gold: how many schools and institutions does the church operate overseas ?
G2Ssta w/o BiGGNN (Seq2Seq): how many schools does the church have ?
G2Ssta w/o DAN.: how many schools does the church have ?
G2Ssta : how many schools and institutions does the church have ?
G2Ssta +BERT: how many schools and institutions does the church have ?
G2Ssta +BERT+RL: how many schools and institutions does the church operate ?
G2Sdyn+BERT+RL: how many schools does the church operate ?
In Table 4, we further show a few examples that illustrate the quality of generated text given a pas-
sage under different ablated systems. As we can see, incorporating answer information helps the
9
Published as a conference paper at ICLR 2020
model identify the answer type of the question to be generated, and thus makes the generated ques-
tions more relevant and specific. Also, we find our Graph2Seq model can generate more complete
and valid questions compared to the Seq2Seq baseline. We think it is because a Graph2Seq model
is able to exploit the rich text structure information better than a Seq2Seq model. Lastly, it shows
that fine-tuning the model using REINFORCE can improve the quality of the generated questions.
4	Related Work
4.1	Natural Question Generation
Early works (Mostow & Chen, 2009; Heilman & Smith, 2010) for QG focused on rule-based ap-
proaches that rely on heuristic rules or hand-crafted templates, with low generalizability and scala-
bility. Recent attempts have focused on NN-based approaches that do not require manually-designed
rules and are end-to-end trainable. Existing NN-based approaches (Du et al., 2017; Yao et al.; Zhou
et al., 2018) rely on the Seq2Seq model with attention, copy or coverage mechanisms. In addition,
various ways (Zhou et al., 2017; Song et al., 2017; Zhao et al., 2018) have been proposed to utilize
the target answer for guiding the question generation. Some recent approaches (Song et al., 2017;
Kumar et al., 2018b) aim at directly optimizing evaluation metrics using REINFORCE. Concur-
rent works have explored tackling the QG task with various semantics-enhanced rewards (Zhang &
Bansal, 2019) or large-scale pretrained language models (Dong et al., 2019).
However, the existing approaches for QG suffer from several limitations; they (i) ignore the rich
structure information hidden in text, (ii) solely rely on cross-entropy loss that leads to issues like
exposure bias and inconsistency between train/test measurement, and (iii) fail to fully exploit the
answer information. To address these limitations, we propose a RL based Graph2Seq model aug-
mented with a deep alignment network to effectively tackle the QG task. To the best of our knowl-
edge, we are the first to introduce the Graph2Seq architecture to solve the question generation task.
4.2	Graph Neural Networks
Over the past few years, graph neural networks (GNNs) (Kipf & Welling, 2016; Gilmer et al.,
2017; Hamilton et al., 2017) have attracted increasing attention. Due to more recent advances in
graph representation learning, a number of works have extended the widely used Seq2Seq archi-
tectures (Sutskever et al., 2014; Cho et al., 2014) to Graph2Seq architectures for machine transla-
tion, semantic parsing, AMR(SQL)-to-text, and online forums health stage prediction tasks (Bast-
ings et al., 2017; Beck et al., 2018; Xu et al., 2018a;b;c; Song et al., 2018b; Gao et al., 2019).
While the high-quality graph structure is crucial for the performance of GNN-based approaches,
most existing works use syntax-based static graph structures when applied to textual data. Very
recently, researchers have started exploring methods to automatically construct a graph of visual ob-
jects (Norcliffe-Brown et al., 2018) or words (Liu et al., 2018; Chen et al., 2019c;b) when applying
GNNs to non-graph structured data. To the best of our knowledge, we are the first to investigate
systematically the performance difference between syntactic-aware static graph construction and
semantics-aware dynamic graph construction in the context of question generation.
5	Conclusion
We proposed a novel RL based Graph2Seq model for QG, where the answer information is utilized
by an effective Deep Alignment Network and a novel bidirectional GNN is proposed to process the
directed passage graph. On the SQuAD dataset, our method outperforms existing methods by a sig-
nificant margin and achieves the new state-of-the-art results. Future directions include investigating
more effective ways of automatically learning graph structures from text and exploiting Graph2Seq
models for question generation from structured data like knowledge graphs or tables.
Acknowledgments
This work is supported by IBM Research AI through the IBM AI Horizons Network. We thank
the human evaluators who evaluated our system. We also thank the anonymous reviewers for their
constructive feedback.
10
Published as a conference paper at ICLR 2020
References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly
learning to align and translate. arXiv preprint arXiv:1409.0473, 2014.
Satanjeev Banerjee and Alon Lavie. Meteor: An automatic metric for mt evaluation with improved
correlation with human judgments. In Proceedings of the acl workshop on intrinsic and extrinsic
evaluation measuresfor machine translation and/or summarization, pp. 65-72, 2005.
Junwei Bao, Duyu Tang, Nan Duan, Zhao Yan, Yuanhua Lv, Ming Zhou, and Tiejun Zhao. Table-
to-text: Describing table region with natural language. In Thirty-Second AAAI Conference on
Artificial Intelligence, 2018.
Joost Bastings, Ivan Titov, Wilker Aziz, Diego Marcheggiani, and Khalil Sima’an. Graph convolu-
tional encoders for syntax-aware neural machine translation. arXiv preprint arXiv:1704.04675,
2017.
Daniel Beck, Gholamreza Haffari, and Trevor Cohn. Graph-to-sequence learning using gated graph
neural networks. arXiv preprint arXiv:1806.09835, 2018.
Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and Noam Shazeer. Scheduled sampling for sequence
prediction with recurrent neural networks. In Advances in Neural Information Processing Sys-
tems, pp. 1171-1179, 2015.
Danqi Chen, Adam Fisch, Jason Weston, and Antoine Bordes. Reading wikipedia to answer open-
domain questions. arXiv preprint arXiv:1704.00051, 2017.
Yu Chen, Lingfei Wu, and Mohammed J Zaki. Bidirectional attentive memory networks for question
answering over knowledge bases. arXiv preprint arXiv:1903.02188, 2019a.
Yu Chen, Lingfei Wu, and Mohammed J Zaki. Deep iterative and adaptive learning for graph neural
networks. arXiv preprint arXiv:1912.07832, 2019b.
Yu Chen, Lingfei Wu, and Mohammed J Zaki. Graphflow: Exploiting conversation flow with graph
neural networks for conversational machine comprehension. arXiv preprint arXiv:1908.00059,
2019c.
Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi Bougares, Hol-
ger Schwenk, and Yoshua Bengio. Learning phrase representations using rnn encoder-decoder
for statistical machine translation. In EMNLP, pp. 1724-1734, 2014.
Guy Danon and Mark Last. A syntactic approach to domain-specific automatic question generation.
arXiv preprint arXiv:1712.09827, 2017.
Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep
bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805, 2018.
Li Dong, Nan Yang, Wenhui Wang, Furu Wei, Xiaodong Liu, Yu Wang, Jianfeng Gao, Ming Zhou,
and Hsiao-Wuen Hon. Unified language model pre-training for natural language understanding
and generation. In Advances in Neural Information Processing Systems, pp. 13042-13054, 2019.
Xinya Du, Junru Shao, and Claire Cardie. Learning to ask: Neural question generation for reading
comprehension. arXiv preprint arXiv:1705.00106, 2017.
Hady Elsahar, Christophe Gravier, and Frederique Laforest. Zero-shot question generation from
knowledge graphs for unseen predicates and entity types. arXiv preprint arXiv:1802.06842, 2018.
Zhihao Fan, Zhongyu Wei, Siyuan Wang, Yang Liu, and Xuanjing Huang. A reinforcement learning
framework for natural question generation using bi-discriminators. In Proceedings of the 27th
International Conference on Computational Linguistics, pp. 1763-1774, 2018.
Yuyang Gao, Lingfei Wu, Houman Homayoun, and Liang Zhao. Dyngraph2seq: Dynamic-graph-to-
sequence interpretable learning for health stage prediction in online health forums. arXiv preprint
arXiv:1908.08497, 2019.
11
Published as a conference paper at ICLR 2020
Justin Gilmer, Samuel S Schoenholz, Patrick F Riley, Oriol Vinyals, and George E Dahl. Neural
message passing for quantum chemistry. In Proceedings of the 34th International Conference on
Machine Learning-Volume 70, pp. 1263-1272. JMLR. org, 2017.
Hongyu Gong, Suma Bhat, Lingfei Wu, Jinjun Xiong, and Wen-mei Hwu. Reinforcement learning
based text style transfer without parallel training corpus. arXiv preprint arXiv:1903.10671, 2019.
Jiatao Gu, Zhengdong Lu, Hang Li, and Victor OK Li. Incorporating copying mechanism in
sequence-to-sequence learning. arXiv preprint arXiv:1603.06393, 2016.
Will Hamilton, Zhitao Ying, and Jure Leskovec. Inductive representation learning on large graphs.
In Advances in Neural Information Processing Systems, pp. 1024-1034, 2017.
Michael Heilman. Automatic factual question generation from text. 2011.
Michael Heilman and Noah A Smith. Good question! statistical ranking for question generation.
In Human Language Technologies: The 2010 Annual Conference of the North American Chapter
of the Association for Computational Linguistics, pp. 609-617. Association for Computational
Linguistics, 2010.
SePP Hochreiter and Jurgen Schmidhuber. Long short-term memory. Neural computation, 9(8):
1735-1780, 1997.
Yanghoon Kim, Hwanhee Lee, Joongbo Shin, and Kyomin Jung. ImProving neural question gener-
ation using answer seParation. arXiv preprint arXiv:1809.02393, 2018.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic oPtimization. arXiv preprint
arXiv:1412.6980, 2014.
Durk P Kingma, Tim Salimans, and Max Welling. Variational droPout and the local reParameteri-
zation trick. In Advances in Neural Information Processing Systems, PP. 2575-2583, 2015.
Thomas N KiPf and Max Welling. Semi-suPervised classification with graPh convolutional net-
works. arXiv preprint arXiv:1609.02907, 2016.
Guillaume Klein, Yoon Kim, Yuntian Deng, Jean Senellart, and Alexander Rush. OPenNMT: OPen-
source toolkit for neural machine translation. In Proceedings of ACL 2017, System Demonstra-
tions, PP. 67-72, Vancouver, Canada, July 2017. Association for ComPutational Linguistics. URL
https://www.aclweb.org/anthology/P17-4012.
Vishwajeet Kumar, Kireeti Boorla, Yogesh Meena, Ganesh Ramakrishnan, and Yuan-Fang Li. Au-
tomating reading comPrehension by generating question and answer Pairs. In Pacific-Asia Con-
ference on Knowledge Discovery and Data Mining, PP. 335-348. SPringer, 2018a.
Vishwajeet Kumar, Ganesh Ramakrishnan, and Yuan-Fang Li. A framework for automatic question
generation from text using deeP reinforcement learning. arXiv preprint arXiv:1808.04961, 2018b.
Matt Kusner, Yu Sun, Nicholas Kolkin, and Kilian Weinberger. From word embeddings to document
distances. In International Conference on Machine Learning, PP. 957-966, 2015.
Yikang Li, Nan Duan, Bolei Zhou, Xiao Chu, Wanli Ouyang, Xiaogang Wang, and Ming Zhou.
Visual question generation as dual task of visual question answering. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition, PP. 6116-6124, 2018.
Yujia Li, Daniel Tarlow, Marc Brockschmidt, and Richard Zemel. Gated graPh sequence neural
networks. arXiv preprint arXiv:1511.05493, 2015.
Chin-Yew Lin. Rouge: A Package for automatic evaluation of summaries. Text Summarization
Branches Out, 2004.
Bang Liu, Mingjun Zhao, Di Niu, Kunfeng Lai, Yancheng He, Haojie Wei, and Yu Xu. Learning to
generate questions by learning what not to generate. arXiv preprint arXiv:1902.10418, 2019.
Pengfei Liu, Shuaichen Chang, Xuanjing Huang, Jian Tang, and Jackie Chi Kit Cheung. Contextu-
alized non-local neural networks for sequence learning. arXiv preprint arXiv:1811.08600, 2018.
12
Published as a conference paper at ICLR 2020
Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attention-
based neural machine translation. arXiv preprint arXiv:1508.04025, 2015.
Nasrin Mostafazadeh, Ishan Misra, Jacob Devlin, Margaret Mitchell, Xiaodong He, and Lucy Van-
derwende. Generating natural questions about an image. arXiv preprint arXiv:1603.06059, 2016.
Jack Mostow and Wei Chen. Generating instruction automatically for the reading strategy of self-
questioning. 2009.
Vinod Nair and Geoffrey E Hinton. Rectified linear units improve restricted boltzmann machines. In
Proceedings of the 27th international conference on machine learning (ICML-10), pp. 807-814,
2010.
Preksha Nema and Mitesh M Khapra. Towards a better metric for evaluating question generation
systems. arXiv preprint arXiv:1808.10192, 2018.
Will Norcliffe-Brown, Stathis Vafeias, and Sarah Parisot. Learning conditioned graph structures for
interpretable visual question answering. In Advances in Neural Information Processing Systems,
pp. 8344-8353, 2018.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-Jing Zhu. Bleu: a method for automatic
evaluation of machine translation. In Proceedings of the 40th annual meeting on association for
computational linguistics, pp. 311-318. Association for Computational Linguistics, 2002.
Romain Paulus, Caiming Xiong, and Richard Socher. A deep reinforced model for abstractive
summarization. arXiv preprint arXiv:1705.04304, 2017.
Jeffrey Pennington, Richard Socher, and Christopher Manning. Glove: Global vectors for word
representation. In Proceedings of the 2014 conference on empirical methods in natural language
processing (EMNLP), pp. 1532-1543, 2014.
Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. Squad: 100,000+ questions
for machine comprehension of text. arXiv preprint arXiv:1606.05250, 2016.
Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli, and Wojciech Zaremba. Sequence level train-
ing with recurrent neural networks. arXiv preprint arXiv:1511.06732, 2015.
Steven J Rennie, Etienne Marcheret, Youssef Mroueh, Jerret Ross, and Vaibhava Goel. Self-critical
sequence training for image captioning. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pp. 7008-7024, 2017.
Abigail See, Peter J Liu, and Christopher D Manning. Get to the point: Summarization with pointer-
generator networks. arXiv preprint arXiv:1704.04368, 2017.
Iulian Vlad Serban, Alberto Garcla-Duran, Caglar Gulcehre, SUngjin Ahn, Sarath Chandar, Aaron
Courville, and Yoshua Bengio. Generating factoid questions with recurrent neural networks: The
30m factoid question-answer corpus. arXiv preprint arXiv:1603.06807, 2016.
Linfeng Song, Zhiguo Wang, and Wael Hamza. A unified query-based generative model for question
generation and question answering. arXiv preprint arXiv:1709.01058, 2017.
Linfeng Song, Zhiguo Wang, Wael Hamza, Yue Zhang, and Daniel Gildea. Leveraging context in-
formation for natural question generation. In Proceedings of the 2018 Conference of the North
American Chapter of the Association for Computational Linguistics: Human Language Technolo-
gies, Volume 2 (Short Papers), pp. 569-574, 2018a.
Linfeng Song, Yue Zhang, Zhiguo Wang, and Daniel Gildea. A graph-to-sequence model for amr-
to-text generation. arXiv preprint arXiv:1805.02473, 2018b.
Xingwu Sun, Jing Liu, Yajuan Lyu, Wei He, Yanjun Ma, and Shi Wang. Answer-focused and
position-aware neural question generation. In Proceedings of the 2018 Conference on Empirical
Methods in Natural Language Processing, pp. 3930-3939, 2018.
Ilya Sutskever, Oriol Vinyals, and Quoc V Le. Sequence to sequence learning with neural networks.
In Advances in neural information processing systems, pp. 3104-3112, 2014.
13
Published as a conference paper at ICLR 2020
Duyu Tang, Nan Duan, Tao Qin, Zhao Yan, and Ming Zhou. Question answering and question
generation as dual tasks. arXiv preprint arXiv:1706.02027, 2017.
Zhaopeng Tu, Zhengdong Lu, Yang Liu, Xiaohua Liu, and Hang Li. Modeling coverage for neural
machine translation. arXiv preprint arXiv:1601.04811, 2016.
Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,
Eukasz Kaiser, and Illia Polosukhin. Attention is all you need. In Advances in neural information
processing Systems,pp. 5998-6008, 2017.
Petar Velickovic, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro Lio, and Yoshua
Bengio. Graph attention networks. arXiv preprint arXiv:1710.10903, 2017.
Oriol Vinyals, Meire Fortunato, and Navdeep Jaitly. Pointer networks. In Advances in Neural
Information Processing Systems, pp. 2692-2700, 2015.
Ronald J Williams. Simple statistical gradient-following algorithms for connectionist reinforcement
learning. Machine learning, 8(3-4):229-256, 1992.
Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google’s neural machine trans-
lation system: Bridging the gap between human and machine translation. arXiv preprint
arXiv:1609.08144, 2016.
Kun Xu, Lingfei Wu, Zhiguo Wang, and Vadim Sheinin. Graph2seq: Graph to sequence learning
with attention-based neural networks. arXiv preprint arXiv:1804.00823, 2018a.
Kun Xu, Lingfei Wu, Zhiguo Wang, Mo Yu, Liwei Chen, and Vadim Sheinin. Exploiting
rich syntactic information for semantic parsing with graph-to-sequence model. arXiv preprint
arXiv:1808.07624, 2018b.
Kun Xu, Lingfei Wu, Zhiguo Wang, Mo Yu, Liwei Chen, and Vadim Sheinin. Sql-to-text generation
with graph-to-sequence model. arXiv preprint arXiv:1809.05255, 2018c.
Kaichun Yao, Libo Zhang, Tiejian Luo, Lili Tao, and Yanjun Wu. Teaching machines to ask ques-
tions.
Xingdi Yuan, Tong Wang, Caglar Gulcehre, Alessandro Sordoni, Philip Bachman, Sandeep Sub-
ramanian, Saizheng Zhang, and Adam Trischler. Machine comprehension by text-to-text neural
question generation. arXiv preprint arXiv:1705.02012, 2017.
Shiyue Zhang and Mohit Bansal. Addressing semantic drift in question generation for semi-
supervised question answering. arXiv preprint arXiv:1909.06356, 2019.
Yao Zhao, Xiaochuan Ni, Yuanyuan Ding, and Qifa Ke. Paragraph-level neural question generation
with maxout pointer and gated self-attention networks. In Proceedings of the 2018 Conference
on Empirical Methods in Natural Language Processing, pp. 3901-3910, 2018.
Qingyu Zhou, Nan Yang, Furu Wei, Chuanqi Tan, Hangbo Bao, and Ming Zhou. Neural question
generation from text: A preliminary study. In National CCF Conference on Natural Language
Processing and Chinese Computing, pp. 662-671. Springer, 2017.
Qingyu Zhou, Nan Yang, Furu Wei, and Ming Zhou. Sequential copying networks. In Thirty-Second
AAAI Conference on Artificial Intelligence, 2018.
14
Published as a conference paper at ICLR 2020
A Details on the RNN Decoder
At each decoding step t, an attention mechanism learns to attend to the most relevant words in the
input sequence, and computes a context vector h* based on the current decoding state st, the current
coverage vector ct and the attention memory. In addition, the generation probability pgen P r0, 1s is
calculated from the context vector h*, the decoder state st and the decoder input yt_1. Next, pgen is
used as a soft switch to choose between generating a word from the vocabulary, or copying a word
from the input sequence. We dynamically maintain an extended vocabulary which is the union of the
usual vocabulary and all words appearing in a batch of source examples (i.e., passages and answers).
Finally, in order to encourage the decoder to utilize the diverse components of the input sequence, a
coverage mechanism is applied. At each step, we maintain a coverage vector ct , which is the sum
of attention distributions over all previous decoder time steps. A coverage loss is also computed to
penalize repeatedly attending to the same locations of the input sequence.
B Model Settings
We keep and fix the 300-dim GloVe vectors for the most frequent 70,000 words in the training set.
We compute the 1024-dim BERT embeddings on the fly for each word in text using a (trainable)
weighted sum of all BERT layer outputs. The embedding sizes of case, POS and NER tags are set
to 3, 12 and 8, respectively. We set the hidden state size of BiLSTM to 150 so that the concatenated
state size for both directions is 300. The size of all other hidden layers is set to 300. We apply
a variational dropout (Kingma et al., 2015) rate of 0.4 after word embedding layers and 0.3 after
RNN layers. We set the neighborhood size to 10 for dynamic graph construction. The number of
GNN hops is set to 3. During training, in each epoch, we set the initial teacher forcing probability
to 0.75 and exponentially increase it to 0.75 * 0.9999i where i is the training step. We set α in the
reward function to 0.1, γ in the mixed loss function to 0.99, and the coverage loss ratio λ to 0.4.
We use Adam (Kingma & Ba, 2014) as the optimizer, and the learning rate is set to 0.001 in the
pretraining stage and 0.00001 in the fine-tuning stage. We reduce the learning rate by a factor of
0.5 if the validation BLEU-4 score stops improving for three epochs. We stop the training when no
improvement is seen for 10 epochs. We clip the gradient at length 10. The batch size is set to 60 and
50 on data split-1 and split-2, respectively. The beam search width is set to 5. All hyperparameters
are tuned on the development set.
C Sensitivity Analysis of Hyperparameters
Figure 3: Effect of the number of GNN hops.
To study the effect of the number of GNN hops, we conduct experiments on the G2Ssta model on
the SQuAD split-2 data. Fig. 3 shows that our model is not very sensitive to the number of GNN
hops and can achieve reasonably good results with various number of hops.
15
Published as a conference paper at ICLR 2020
Table 5: Ablation study on the SQUAD split-2 test set.
Methods	BLEU-4	MethodS		BLEU-4
G2Sdyn+BERT+RL	18.06	G2S dyn w/o feat	-16.51
G2Ssta+BERT+RL	18.30	G2Ssta w/o feat	16.65
G2S Sta+BERT-fixed+RL	18.20	G2Sdyn w/o DAN	12.58
G2Sdyn+BERT	17.56	G2Ssta w/o DAN	12.62
G2Ssta+BERT	18.02	G2Ssta w/ DAN-Word only	15.92
G2Ssta+BERT-fixed	17.86	G2Ssta w/ DAN-contextual only	16.07
G2Sdyn+RL	17.18	G2Ssta w/ GGNN-forward	16.53
G2Ssta+RL	17.49	G2Ssta w/ GGNN-backward	16.75
G2Sdyn	16.81	G2Ssta w/o BiGGNN, w/ Seq2Seq	16.14
G2Ssta		16.96	G2Ssta w/o BiGGNN, w/ GCN	14.47
D Details on Baseline Methods
Transformer (Vaswani et al., 2017) We included a Transformer-based Seq2Seq model augmented
with attention and copy mechanisms. We used the open source implementation3 provided by the
OpenNMT (Klein et al., 2017) library and trained the model from scratch. Surprisingly, this baseline
performed very poorly on the benchmarks even though we conducted moderate hyperparameter
search and trained the model for a large amount of epochs. We suspect this might be partially
because this method is very sensitive to hyperparameters as reported by Klein et al. (2017) and
probably data-hungry on this task. We conjecture that better performance might be expected by
extensively searching the hyperparameters and using a pretrained transformer model.
SeqCopyNet (Zhou et al., 2018) proposed an extension to the copy mechanism which learns to copy
not only single words but also sequences from the input sentence.
NQG++ (Zhou et al., 2017) proposed an attention-based Seq2Seq model equipped with a copy
mechanism and a feature-rich encoder to encode answer position, POS and NER tag information.
MPQG+R (Song et al., 2017) proposed an RL-based Seq2Seq model with a multi-perspective
matching encoder to incorporate answer information. Copy and coverage mechanisms are applied.
AFPQA (Sun et al., 2018) consists of an answer-focused component which generates an interroga-
tive word matching the answer type, and a position-aware component which is aware of the position
of the context words when generating a question by modeling the relative distance between the
context words and the answer.
s2sa-at-mp-gsa (Zhao et al., 2018) proposed a model which contains a gated attention encoder and
a maxout pointer decoder to tackle the challenges of processing long input sequences. For fair
comparison, we report the results of the sentence-level version of their model to match with our
settings.
ASs2s (Kim et al., 2018) proposed an answer-separated Seq2Seq model which treats the passage
and the answer separately.
CGC-QG (Liu et al., 2019) proposed a multi-task learning framework to guide the model to learn
the accurate boundaries between copying and generation.
E	Details on human evaluation
We conducted a small-scale (i.e., 50 random examples per system) human evaluation on the split-2
data. We asked 5 human evaluators to give feedback on the quality of questions generated by a set
of anonymized competing systems. In each example, given a triple containing a source passage, a
target answer and an anonymised system output, they were asked to rate the quality of the output
by answering the following three questions: i) is this generated question syntactically correct? ii)
is this generated question semantically correct? and iii) is this generated question relevant to the
passage? For each evaluation question, the rating scale is from 1 to 5 where a higher score means
3 https://opennmt.net/OpenNMT-py/FAQ.html
16
Published as a conference paper at ICLR 2020
better quality (i.e., 1: Poor, 2: Marginal, 3: Acceptable, 4: Good, 5: Excellent). Responses from all
evaluators were collected and averaged.
F More results on Ablation S tudy
We perform the comprehensive ablation study to systematically assess the impact of different model
components (e.g., BERT, RL, DAN, BiGGNN, FEAT, DAN-word, and DAN-contextual) for two
proposed full model variants (static vs dynamic) on the SQuAD split-2 test set. Our experimental
results confirmed that every component in our proposed model makes the contribution to the overall
performance.
17