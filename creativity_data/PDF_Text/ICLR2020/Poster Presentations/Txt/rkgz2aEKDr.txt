Published as a conference paper at ICLR 2020
On the Variance
of the Adaptive Learning
Rate and Beyond
LiyuanLiu *
University of Illinois, Urbana-Champaign
ll2@illinois
Haoming Jiang t
Georgia Tech
jianghm@gatech.edu
Pengcheng He, Weizhu Chen
Microsoft Dynamics 365 AI
{penhe,wzchen}@microsoft.com
Xiaodong Liu, Jianfeng Gao
Microsoft Research
{xiaodl,jfgao}@microsoft.com
Jiawei Han
University of Illinois, Urbana-Champaign
hanj@illinois
Ab stract
The learning rate warmup heuristic achieves remarkable success in stabilizing
training, accelerating convergence and improving generalization for adaptive
stochastic optimization algorithms like RMSprop and Adam. Pursuing the theory
behind warmup, We identify a problem of the adaptive learning rate - its vari-
ance is problematically large in the early stage, and presume warmup works as a
variance reduction technique. We provide both empirical and theoretical evidence
to verify our hypothesis. We further propose Rectified Adam (RAdam), a novel
variant of Adam, by introducing a term to rectify the variance Of the adaptive
learning rate. Experimental results on image classification, language modeling,
and neural machine translation verify our intuition and demonstrate the efficacy
and robustness of RAdam.* 1
1 Introduction
Fast and stable optimization algorithms are what generations
of researchers have been pursuing (Gauss, 1823; Cauchy,
1847). Remarkably, stochastic gradient-based optimization,
such as stochastic gradient descent (SGD), has witnessed
tremendous success in many fields of science and engineering
despite its simplicity. Recently, many efforts have been made
to accelerate optimization by applying adaptive learning rate.
In particular, Adagrad (Duchi et al., 2010) and its variants, e.g.,
RMSprop (Hinton et al., 2012), Adam (Kingma & Ba, 2014),
Adadelta (Zeiler, 2012) and Nadam (Dozat, 2016), stand out
due to their fast convergence, and have been considered as the
optimizer of choice in many applications.
Figure 1: Training loss v.s. # of
iterations of Transformers on the
De-En IWSLT’14 dataset.
However, it has been observed that these optimization methods may converge to bad/suspicious
local optima, and have to resort to a warmup heuristic - using a small learning rate in the first
few epochs of training to mitigate such problem (Vaswani et al., 2017; Popel & Bojar, 2018). For
example, when training typical Transformers based neural machine translation models on the De-En
IWSLT’14 dataset, removing the warmup stage increases the training loss from 3 to around 10, as
shown in Figure 1. Similar phenomena are observed in other scenarios like BERT (a bidirectional
transformer language model) pre-training (Devlin et al., 2019).
Duo to the lack of the theoretical underpinnings, there is neither guarantee that warmup would bring
consistent improvements for various machine learning settings nor guidance on how we should
* Work was done during an internship at Microsoft.
t Work was done during an internship at Microsoft.
1All implementations are available at: https://github.com/LiyuanLucasLiu/RAdam.
1
Published as a conference paper at ICLR 2020
conduct warmup. Thus, researchers typically use different settings in different applications and
have to take a trial-and-error approach, which can be tedious and time-consuming.
In this paper, we conduct both empirical and theoretical analysis of the convergence issue to identify
its origin. We show that its root cause is: the adaptive learning rate has undesirably large variance in
the early stage of model training, due to the limited amount of training samples being used. Thus,
to reduce such variance, it is better to use smaller learning rates in the first few epochs of training,
which justifies the warmup heuristic.
Inspired by our analysis results, we propose a new variant of Adam, called Rectified Adam (RAdam),
which explicitly rectifies the variance of the adaptive learning rate based on derivations. We conduct
extensive experiments on language modeling, image classification, and neural machine translation.
RAdam brings consistent improvement over the vanilla Adam, which verifies the variance issue
generally exists on various tasks across different network architectures.
In summary, our main contributions are two-fold:
•	We identify the variance issue of the adaptive learning rate and present a theoretical justification
for the warmup heuristic. We show that the convergence issue is due to the undesirably large
variance of the adaptive learning rate in the early stage of model training.
•	We propose a new variant of Adam (i.e., RAdam), which not only explicitly rectifies the variance
and is theoretically sound, but also compares favorably with the heuristic warmup.
2 Preliminaries and Motivations
Generic adaptive methods. Algorithm 1 is a generic framework (all operations are element-wise).
It describes various popular stochastic gradient descent algorithms (Reddi et al., 2018). Specifically,
different optimization algorithms can be specified by different choices of φ(.) and ψ(.), where φ(.)
specifies how the momentum at time step t is calculated, and ψ(.) how the adaptive learning rate at
t is calculated. For example, in the Adam algorithm, We have:
京	」(1-βι) Pt=1 βt-igt	, lt	1- 1	『	小
φ(g1, ∙∙∙ ,gt)=	1-β	and ψ(gi∙∙ ,gt) = V(1 - β2) Pi=1 βt-ig2 .()
τ-1	1 . 1 ∙1 ∙ .	,1 C J	ʃ / ∖ ∙ -Γ-,	J < ♦	11	1 1.1	j7^' /	∖
For numerical stability, the function ψ(.) in Equation 1 is usually calculated as ψ(gι, ∙∙∙ ,gt)=
---/	J1-：2	, where E is a relatively small / negligible value (e.g., 1 X 10-8).
+	(1-β2) it=1 β2t-igi2
Algorithm 1: Generic adaptive optimization method setup. All operations are element-wise.
Input: {αt}tT=1: step size, {φt, ψt}tT=1: function to calculate momentum and adaptive rate,
θ0: initial parameter, f (θ): stochastic objective function.
Output: θT : resulting parameters
1	while t = 1 to T do
2	gt J ∆θft(θt-ι) (Calculate gradients w.r.t. stochastic objective at timestep t)
3	mt J φt(gι, ∙∙∙ ,gt) (Calculate momentum)
4	lt J ψt(gι,…，gt) (Calculate adaptive learning rate)
5	θt J θt-ι 一 αtmtlt (Update parameters)
6	return θT
Learning rate warmup. Instead of setting the learning rate αt as a constant or in a decreasing
order, a learning rate warmup strategy sets αt as smaller values in the first few steps, thus not
satisfying ∀t αt+1 ≤ αt. For example, linear warmup sets αt = t α0 when t < Tw. Warmup has
been demonstrated to be beneficial in many deep learning applications. For example, in the NMT
experiments in Figure 1, the training loss convergences around 10 when warmup is not applied
(Adam-vanilla), and it surprisingly decreases to below 3 after applying warmup (Adam-warmup).
To further analyze this phenomenon, we visualize the histogram of the absolute value of gradients
on a log scale in Figure 2. We observe that, without applying warmup, the gradient distribution
is distorted to have a mass center in relatively small values within 10 updates. Such gradient dis-
tortion means that the vanilla Adam is trapped in bad/suspicious local optima after the first few
2
Published as a conference paper at ICLR 2020
9.38×1
The distribute
;i0
I 25
♦°
100
70k
1
40K
n is distorted within 10 updates.
4.08×10'
< -./0	-.1'	-.1/	-.2
Adam with warmup
Adam without warmup
Figure 2:	The absolute gradient histogram of the Transformers on the De-En IWSLT’ 14 dataset
during the training (stacked along the y-axis). X-axis is absolute value in the log scale and the
height is the frequency. Without warmup, the gradient distribution is distorted in the first 10 steps.
< e—20	e—16	e—12	e-Q
Adam-2k
< e-2°	e-16	e-12	e—8
RAdam
匚40K
e-8
< e—2。	e—i6	e-2
Adam-eps
Figure 3:	The histogram of the absolute value of gradients (on a log scale) during the training of
Transformers on the De-En IWSLT’ 14 dataset. using Adam-2k, RAdam and Adam-eps.
updates. Warmup essentially reduces the impact of these problematic updates to avoid the conver-
gence problem. In the following sections, We focus our analysis on learning rate warmup for the
Adam algorithm, while it can be applied to other algorithms that use similar adaptive learning rate
(ψ(.)) designs, e.g., RMSprop (Hinton et al., 2012) and Nadam (Dozat, 2016).
3	VARIANCE OF THE ADAPTIVE LEARNING RATE
In this section, we first introduce empirical evidence, then analyze the variance of the adaptive
learning rate to support our hypothesis - Due to the lack of samples in the early stage, the adaptive
learning rate has an undesirably large variance, which leads to suspicious/bad local optima.
To convey our intuition, we begin with a special case. When t = 1, we have ψ (g1) = y/l/gl.
We view {g1,…,gt} as i.i.d. Gaussian random variables following N(0, σ2)2. Therefore, 1/g2
is subject to the scaled inverse chi-squared distribution, Scale-inv-X2(1,1∕σ2), and Var[^∕1∕g2]
is divergent. It means that the adaptive ratio can be undesirably large in the first stage of learning.
Meanwhile, setting a small learning rate at the early stage can reduce the variance (Var[αx] =
α2 Var[x]), thus alleviating this problem. Therefore, we suggest it is the unbounded variance of the
adaptive learning rate in the early stage that causes the problematic updates.
3.1	Warmup as Variance Reduction
In this section, we design a set of controlled experiments to verify our hypothesis. Particularly, we
design two variants of Adam that reducing the variance of the adaptive learning rate: Adam-2k and
Adam-eps. We compare them to vanilla Adam with and without warmup on the IWSLT’14 German
to English translation dataset (Cettolo et al., 2014).
In order to reduce the variance of the adaptive learning rate (ψ(.)), Adam-2k only updates ψ(.) in the
first two thousand iterations, while the momentum (φ(.)) and parameters (θ) are fixed3; other than
this, it follows the original Adam algorithm. To make comparison with other methods, its iterations
are indexed from -1999 instead of 1. In Figure 1, we observe that, after getting these additional
two thousand samples for estimating the adaptive learning rate, Adam-2k avoids the convergence
problem of the vanilla-Adam. Also, comparing Figure 2 and Figure 3, getting large enough samples
prevents the gradient distribution from being distorted. These observations verify our hypothesis
that the lack of sufficient data samples in the early stage is the root cause of the convergence issue.
2The mean zero normal assumption is valid at the beginning of the training, since weights are sampled from
normal distributions with mean zero (Balduzzi et al., 2017), further analysis is conducted in Section 5.3.
3Different from Gotmare et al. (2019), all parameters and first moments are frozen in the first 2000 iterations.
3
Published as a conference paper at ICLR 2020
Another straightforward way to reduce the variance is to increase the value of E in ψ(gι, ∙∙∙ , gt)=
	/，1-：2	. . Actually, if We assume ψ(.) is subject to the uniform distribution, its vari-
+------------------(1-β2) it=1 β2t-igi2
ance equals to ɪ^. Therefore, we design Adam-eps, which uses a non-negligibly large E = 10-4,
while E = 10-8 for vanilla Adam. Its performance is summarized in Figure 1. We observe that it
does not suffer from the serious convergence problem of vanilla-Adam. This further demonstrates
that the convergence problem can be alleviated by reducing the variance of the adaptive learning
rate, and also explains why tuning E is important in practice (Liu et al., 2019). Besides, similar to
Adam-2k, it prevents the gradient distribution from being distorted (as shown in Figure 3). However,
as in Figure 1, it produces a much worse performance comparing to Adam-2k and Adam-warmup.
We conjecture that this is because large E induces a large bias into the adaptive learning rate and
slows down the optimization process. Thus, we need a more principled and rigorous way to con-
trol the variance of the adaptive learning rate. In the next subsection, we will present a theoretical
analysis of the variance of the adaptive learning rate.
3.2	Analysis of Adaptive Learning Rate Variance
As mentioned before, Adam uses the exponential moving average to calculate the adaptive learning
rate. For gradients {gι,…，gt}, their exponential moving average has a larger variance than their
simple average. Also, in the early stage (t is small), the difference of the exponential weights of
{gι,…，gt} is relatively small (UP to 1 - β2-1). Therefore, for ease of analysis, we approximate
the distribution of the exponential moving average as the distribution of the simple average (Nau,
2014), i.e., p(ψ(.)) = p(^-^Pee-^) ≈ P(JPt二请).Since gi 〜N(0,σ2), we have
^rt-2 〜Scale-inv-X2(t,与).Therefore, we assume 7--R	2 also subjects to a scaled
i=1 gi	σ	(1-β2) i=1 β2 gi
inverse chi-square distribution with ρ degrees of freedom (further analysis on this approximation is
conducted in Section 5.3). Based on this assumption, we can calculate Var[ψ2(.)] and the PDF of
ψ2(.). Now, we proceed to the analysis of its square root variance, i.e., Var[ψ(.)], and show how the
variance changes with ρ (which corresponds to number of used training samples).
Theorem 1. If ψ2(.)〜Scale-inv-X2(ρ, σ12), Var[ψ(.)] monotonically decreases as P increases.
Proof. For ∀ρ > 4, we have:
Var[ψ(.)] = E[ψ2(.)] - E[ψ(.)]2 = τ2(ɪ - p2^-B(ρ-1, ρ-1 )2),	⑵
ρ-2 π 2	2
where B(.) is the beta function. By analyzing the derivative ofVar[ψ(.)], we know it monotonically
decreases as P increases. The detailed derivation is elaborated in the Appendix A.	□
Theorem 1 gives a qualitative analysis of the variance of the adaptive learning rate. It shows that,
due to the lack of used training samples in the early stage, Var[ψ(.)] is larger than the late stage
(Figure 8). To rigorously constraint the variance, we perform a quantified analysis on Var[ψ(.)] by
estimating the degree of freedoms P.
4	Rectified Adaptive Learning Rate
In the previous section, Equation 2 gives the analytic form of Var[ψ(.)], where P is the degree of
freedoms. Here, we first give an estimation of P based on t to conduct a quantified analysis for
Var[ψ(gι,…，gt)], then we describe the design of the learning rate rectification, and compare it to
the heuristic warmup strategies.
4.1	ESTIMATION OF P
The exponential moving average (EMA) can be interpreted as an approximation to the simple mov-
ing average (SMA) in real application (Nau, 2014), i.e.,
J(i-β2) Pi=I βt-ig2 ʌ ≈ JPf=tι,β2) g2+ι-i
p∖	ι-β2	≈ p∖	f(t,β2)
(3)
4
Published as a conference paper at ICLR 2020
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
Algorithm 2: Rectified Adam. All operations are element-wise.
Input: {αt}tT=1: step size, {β1, β2}: decay rate to calculate moving average and moving 2nd
moment, θ0: initial parameter, ft(θ): stochastic objective function.
Output: θt : resulting parameters
mo,vo J 0,0 (Initialize moving 1st and 2nd moment)
ρ∞ J 2/(1 - 02)一 1 (Compute the maximum length of the approximated SMA)
while t = {1,…，T} do
gt J ∆θft(θt-1) (Calculate gradients w.r.t. stochastic objective at timestep t)
Vt J I∕β2vt-1 + (1 — 02 )g2 (Update exponential moving 2nd moment)
mt J β1mt-1 + (1 一 β1)gt (Update exponential moving 1st moment)
mct J mt/(1 一 01t) (Compute bias-corrected moving average)
ρt J ρ∞ 一 2t02t /(1 一 02t)(Compute the length of the approximated SMA)
if the variance is tractable, i.e., ρt > 4 then
lt J ∙∖∕(1 - 02)∕vt (Compute adaptive learning rate)
rt J(P (Pt-4))(Pt-¾P (Compute the variance rectification term)
θt J θt-1 - αtrtmctlt (Update parameters with adaptive momentum)
else
L θt J θt-ι 一 atC (Update parameters with un-adapted momentum)
return θT
where f(t, 02) is the length of the SMA which allows the SMA to have the same “center of mass”
with the EMA. In other words, f(t, 02) satisfies:
(1-β2)Pt=ιβ2-i∙ % _ Pftιβ2)(t + 1-i)
1 - β2	-	f (t,β2)
By solving Equation 4, We have: f(t,β2) = τ⅛- - 1 - 12t⅜.
1-β2	1-β2
(4)
In the previous section,
we assume: --Q、乙色 2 〜 Scale-inv-X2(ρ, W). Here, since gi 〜 N(0,σ2), we have
(1-β2 ) i=1 β2 gi2	σ
Pf (t,β2)	2
屋* i=11 a R t+1-i 〜 Scale-inv-X2(f (t,β2),与).Thus, Equation 3 views Scale-inv-X2(f (t, β2),与)
f (t,β2 )	σ	σ
as an approximation to Scale-inv-X2(ρ, σ2). Therefore, we treat f (t, β2) as an estimation of ρ. For
ease of notation, we mark f (t, 02) as ρt. Also, we refer ɪ-^ - 1 as ρ∞ (maximum length of the
approximated SMA), due to the inequality f (t, 02) ≤ limt→∞ f (t, 02) = ɪ-^ - 1.
4.2 Variance Estimation and Rectification
Based on previous estimations, we have Var[ψ(.)] = T2(ρp-2 - P *∏ 5 B(ρt-1, P-I)2). The
value of this function in the early stage is significantly larger than the late stage (as analyzed later, it
decays roughly at the speed of O(*)). For example, the variance at Pt = 5 is over 100 times larger
than the variance at ρt = 500. Additionally, based on Theorem 1, we know minρt Var[ψ(.)] =
Var[ψ(.)] ∣ρt=ρ∞ and mark this minimal value as Cvar. In order to ensure that the adaptive learning
rate (ψ(.)) has consistent variance, we rectify the variance at the t-th timestamp as below,
Var[rt Ψ(gι,…，gt)] = CVar where Tt = VZCVar/Var[ψ(gι,…，gt)].
Although we have the analytic form of Var[ψ(.)] (i.e., Equation 2), it is not numerically stable.
Therefore, we use the first-order approximation to calculate the rectification term. Specifically, by
approximating ,ψ2(.) to the first order (Wolter, 2007),
pψ2∏ ≈ pEψ^+2p⅛^(Ψ2(.) - E[ψ2(.)]) and Var[ψ(.)] ≈ VEI^∙
Since ψ2(.)〜Scale-inv-X2(ρt, £), we have:
Var[ψ(.)] ≈ ρt∕[2(ρt - 2)(ρt - 4)σ2].	(5)
In Section 5.3, we conduct simulation experiments to examine Equation 5 and find that it is a reliable
approximation. Based on Equation 5, we know that Var[,ψ(.)] decreases approximately at the
5
Published as a conference paper at ICLR 2020
RAdam
Adam
Figure 4: Language modeling (LSTMs) on the One Billion Word.
Table 1
: Image Classification
Method Acc.
SGD
Adam
RAdam
91.51
90.54
91.38
SGD
Adam
RAdam
69.86
66.54
67.62
Figure 5: Training of ResNet-18 on the ImageNet and ResNet-20 on the CIFAR10 dataset.
OlXVH I。JonOBEUII
speed of O(*). With this approximation, We can calculate the rectification term as:
r = / IPt - 4)(Pt - i2)p∞
( V (Pg - 4)(P∞ - 2)Pt
Applying our rectification term to Adam, We come up With a neW variant of Adam, Rectified Adam
(RAdam), as summarized in Algorithm 2. Specifically, When the length of the approximated SMA is
less or equal than 4, the variance of the adaptive learning rate is intractable and the adaptive learning
rate is inactivated. OtherWise, We calculate the variance rectification term and update parameters
With the adaptive learning rate. It is Worth mentioning that, if β2 ≤ 0.6, We have P∞≤ 4 and
RAdam is degenerated to SGD With momentum.
4.3 In Comparison with Warmup and Other Stabilization Techniques
Different from the analysis in this paper, Warmup is originally proposed to handle training With very
large batches for SGD (Goyal et al., 2017; Gotmare et al., 2019; Bernstein et al., 2018; Xiao et al.,
2017). We notice that rt has a similar form to the heuristic linear Warmup, Which can be vieWed as
setting the rectification term as mi*Tw). It verifies our intuition that warmup works as a variance
reduction technique. RAdam deactivates the adaptive learning rate When its variance is divergent,
thus avoiding undesired instability in the first few updates. Besides, our method does not require an
additional hyperparameter (i.e., Tw) and can automatically adapt to different moving average rules.
Here, we identify and address an underlying issue of adaptive optimization methods independent
of (neural) model architectures. Thus, the proposed rectification term is orthogonal to other train-
ing stabilization techniques such as gradient clipping (Bengio et al., 2013), smoothing the adaptive
learning rate (i.e., increasing , applying geometric mean filter (Chen & Gu, 2018), or adding range
constraints (Luo et al., 2019)), initialization (Balduzzi et al., 2017; Zhang et al., 2019) and normal-
ization (Ba et al., 2016; Ioffe & Szegedy, 2015). Indeed, these techniques can be combined with the
proposed variance rectification method.
5 Experiments
We evaluate RAdam on several benchmarks: One Billion Word for language modeling; Cifar10
and ImageNet for image classification; IWSLT’14 De-En/EN-DE and WMT’16 EN-De for neural
machine translation. Following Loshchilov & Hutter (2018), we decouple weight decays in the
vanilla Adam, Adam with warmup and RAdam in our experiments. Details are in Appendix B.
5.1 Comparing to Vanilla Adam
As analyzed before, the adaptive learning rate has undesirably large variance in the early stage
of training and leads to suspicious/bad local optima on NMT. One question we are interested in
6
Published as a conference paper at ICLR 2020
A0e-!n8e Js'D1
SSO- 6≡u一BJl
X-axis is the
epoch #.
Figure 6: Performance of RAdam, Adam and SGD with different learning rates on CIFAR10.
Comparing to RAdam, heuristic linear warmup needs to tune the warmup length to get the similar performance.
o——	o——	— o——	o——	— O——
0 20 40 60 80 100 120 140 160	0 20 40 60 80 100 120 140 160 0 20 40 60 80 100 1 20 1 40 1 60 0 20 40 60 80 100 120 140 160 0 2 0 40 60 80 100 120 140 160
---------- Ir = 0.1	---lr = 0.03	---- lr = 0.01	---- lr = 0.003	X-axis is the epoch #
Figure 7: Performance of RAdam, Adam with warmup on CIFAR10 with different learning rates.
is: whether such an issue widely exits in other similar tasks and applications. Thus, we conduct
a set of experiments with two classical tasks of NLP and CV, i.e., language modeling and image
classification. RAdam not only results in consistent improvements over the vanilla Adam, but also
demonstrates its robustness to the change of learning rates. It verifies that the variance issue exists
in various machine learning applications, and has a big impact on the model behavior.
Performance Comparison. The performances on language modeling (i.e., One Billion
Word (Chelba et al., 2013)) and image classification (i.e., CIFAR10 (Krizhevsky et al., 2009) and
ImageNet (Deng et al., 2009)) are presented in Figure 4, 5. The results show that RAdam out-
performs Adam in all three datasets. As shown in Figure 4, although the rectification term makes
RAdam slower than the vanilla Adam in the first few epochs, it allows RAdam to converge faster
after that. In other words, by reducing the variance of the adaptive learning rate in the early stage, it
gets both faster convergence and better performance, which verifies the impact of the variance issue.
We also observe that RAdam obtains consistent improvements over Adam on image classification.
It is worth noting that, on both ImageNet and CIFAR10, although RAdam fails to outperform SGD
in terms of test accuracy, it results in a better training performance (e.g., the training accuracy of
SGD, Adam, and RAdam on ImageNet are 69.57, 69.12 and 70.30 respectively).
Robustness to Learning Rate Change. Besides performance improvements, RAdam also improves
the robustness of model training. We use different initial learning rates, conduct experiments with
ResNet-20 on the CIFAR10 datasets, and summarize their performance in Figure 6. For learning
rates within a broad range (i.e., {0.1, 0.03, 0.01, 0.003}), RAdam achieves consistent model perfor-
mances (their test accuracy curves highly overlap with each other), while Adam and SGD are shown
to be more sensitive to the learning rate. The observation can be interpreted that by rectifying the
variance of the adaptive learning rate, RAdam improves the robustness of model training and can
adapt to different learning rates of a broader range.
5.2 Comparing to Heuristic Warmup
To examine the effectiveness of RAdam, we first conduct comparisons on neural machine transla-
tion, on which the state-of-the-art employs Adam with the linear warmup. Specifically, we conduct
experiments on three datasets, i.e., IWSLT’14 De-En, IWSLT’14 En-De, and WMT’16 En-De. Due
7
Published as a conference paper at ICLR 2020
Table 2: BLEU score on Neural Machine Translation.
Method
Adam with warmup
RAdam
IWSLT’14 DE-EN
34.66 ± 0.014
34.76 ± 0.003
IWSLT’14 EN-DE
28.56 ± 0.067
28.48 ± 0.054
WMT’16 EN-DE
27.03
27.27
to the limited size of the IWSLT’14 dataset, we conduct experiments using 5 different random seeds
and report their mean and standard derivation. As discussed before, the vanilla Adam algorithm
leads to suspicious/bad local optima (i.e., converges to a training perplexity around 500), and needs
a learning rate warmup stage to stabilize the training.
We summarize the performance obtained with the heuristic warmup and our proposed rectification
term in Table 2 and visualize the training curve of IWSLT De-En in Figure 1. With a consistent
adaptive learning rate variance, our proposed method achieves similar performance to that of previ-
ous state-of-the-art warmup heuristics. It verifies our intuition that the problematic updates of Adam
are indeed caused by the undesirably large variance in the early stage.
Moreover, we applied Adam with warmup on the CIFAR10 dataset. Its best accuracy on the test
set is 91.29, which is similar to RAdam (91.38). However, we found that RAdam requires less hy-
perparameter tuning. Specifically, we visualize their learning curves in Figure 7. For some warmup
steps, Adam with warmup is relatively more sensitive to the choice of the learning rate. RAdam,
at the same time, is not only more robust, but also can automatically control the warmup behav-
ior (i.e., without requiring the length of warmup). For example, when setting the learning rate as
0.1, Adam with 100 steps of warmup fails to get satisfying performance and only results in an ac-
curacy of 90.13; RAdam successfully gets an accuracy of 91.06, with the original setting of the
moving average calculation (i.e., β1 = 0.9, β2 = 0.999). We conjecture the reason is due to the fact
that RAdam, which is based on a rigorous variance analysis, explicitly avoids the extreme situation
where the variance is divergent, and rectifies the variance to be consistent in other situations.
5.3 Simulated Verification
In Sections 3 and 4, we approximate Var[ t/ Pit=1 gi2] to the first order, and assume ψ2(.) =
--Q ∖1-tβ2 Qi 2 subjects to a scaled inverse chi-square distribution (this assumption covers the
(1-β2 ) i=1 β2 gi
approximation from EMA to SMA). Here, we examine these two approximations using simulations.
First Order Approximation of Var[ t/ Pit=1 gi2]. To compare Equations 5 and 2, we assume
T = 1 and plot their values and difference for V = {5,…,500} in Figure 8. The curve of the
analytic form and the first-order approximation highly overlap, and their difference is much smaller
than their value. This result verifies that our first-order approximation is very accurate.
Scaled Inverse Chi-Square Distribution Assumption. In this paper, we assume gi accords to a
Normal distribution with a zero mean. We also assume ψ2(.) accords to the scaled inverse chi-square
distribution to derive the variance of Var[ψ(.)], based on the similarity between the exponential
moving average and simple moving average. Here, we empirically verify this assumption.
Specifically, since gi in the optimization problem may not be zero-mean, we assume its expectation
is μ and sample gi from N(μ, 1). Then, based on these samples, We calculate the variance of the
original adaptive learning rate and the proposed rectified adaptive learning rate, i.e., Var[ vb- ] and
Var[Vt] respectively. We set β2 to 0.999, the number of sampled trajectories to 5000, the number
of iterations to 6000, and summarize the simulation results in Figure 9. Across all six settings With
different μ, the adaptive learning rate has a larger variance in the first stage and the rectified adaptive
learning rate has relative consistent variance. This verifies the reliability of our assumption. 6
6 Conclusion
In this paper, We explore the underlying principle of the effectiveness of the Warmup heuristic used
for adaptive optimization algorithms. Specifically, We identify that, due to the limited amount of
samples in the early stage of model training, the adaptive learning rate has an undesirably large
variance and can cause the model to converge to suspicious/bad local optima. We provide both
empirical and theoretical evidence to support our hypothesis, and further propose a neW variant
8
Published as a conference paper at ICLR 2020
Figure 8: The value of Equation 2,
Equation 5 and their difference (abso-
lute difference). The x-axis is ρ and
the y-axis is the variance (log scale).
μ = 10
Figure 9: The simulation of Var[*] and Var[Vt]. The x-axis
is iteration # (from 5), the y-axis is the variance (log scale).
of Adam, whose adaptive learning rate is rectified so as to have a consistent variance. Empirical
results demonstrate the effectiveness of our proposed method. In future work, we plan to replace the
rectification strategy by sharing the second moment estimation across similar parameters.
Acknowledge
We thank Aeyuan Allen-Zhu for valuable discussions and comments, Microsoft Research Technol-
ogy Engineering team for setting up GPU machines. Research was sponsored in part by DARPA
No. W911NF-17-C-0099 and FA8750-19-2-1004, National Science Foundation IIS 16-18481, IIS
17-04532, and IIS-17-41317, and DTRA HDTRA11810026.
References
Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint
arXiv:1607.06450, 2016.
David Balduzzi, Marcus Frean, Lennox Leary, JP Lewis, Kurt Wan-Duo Ma, and Brian McWilliams.
The shattered gradients problem: If resnets are the answer, then what is the question? In ICML,
2017.
Yoshua Bengio, Nicolas Boulanger-Lewandowski, and Razvan Pascanu. Advances in optimizing
recurrent networks. In 2013 IEEE International Conference on Acoustics, Speech and Signal
Processing,pp. 8624-8628. IEEE, 2013.
Jeremy Bernstein, Yu-Xiang Wang, Kamyar Azizzadenesheli, and Anima Anandkumar. signsgd:
Compressed optimisation for non-convex problems. In ICML, 2018.
AUgUstin Cauchy. Methode generale pour la resolution des Systemes dequations simultanees. Comp.
Rend. Sci. Paris, 25(1847):536-538, 1847.
Mauro Cettolo, Jan Niehues, Sebastian Stuker, Luisa Bentivogli, and Marcello Federico. Report on
the 11th iwslt evaluation campaign, iwslt 2014. In Proceedings of the International Workshop on
Spoken Language Translation,, 2014.
Ciprian Chelba, Tomas Mikolov, Michael Schuster, Qi Ge, Thorsten Brants, Phillipp Koehn, and
Tony Robinson. One billion word benchmark for measuring progress in statistical language mod-
eling. In INTERSPEECH, 2013.
Jinghui Chen and Quanquan Gu. Closing the generalization gap of adaptive gradient methods in
training deep neural networks. arXiv preprint arXiv:1806.06763, 2018.
Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale
hierarchical image database. In ICML, 2009.
Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep
bidirectional transformers for language understanding. In NAACL-HLT, 2019.
9
Published as a conference paper at ICLR 2020
Timothy Dozat. Incorporating nesterov momentum into adam. 2016.
John Duchi, Elad Hazan, and Yoram Singer. Adaptive subgradient methods for online learning and
stochastic optimization. In COLT, 2010.
Carl-Friedrich Gauss. Theoria combinationis observationum erroribus minimis obnoxiae. Commen-
tationes Societatis Regiae Scientiarum Gottingensis Recentiores, 1823.
Akhilesh Gotmare, Nitish Shirish Keskar, Caiming Xiong, and Richard Socher. A closer look at
deep learning heuristics: Learning rate restarts, warmup and distillation. In ICLR, 2019.
Priya Goyal, Piotr Dollar, Ross Girshick, Pieter Noordhuis, LUkasz Wesolowski, AaPo Kyrola, An-
drew Tulloch, Yangqing Jia, and Kaiming He. Accurate, large minibatch sgd: Training imagenet
in 1 hour. arXiv preprint arXiv:1706.02677, 2017.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. DeeP residual learning for image recog-
nition. In CVPR, 2016.
Geoffrey Hinton, Nitish Srivastava, and Kevin Swersky. Neural networks for machine learning
lecture 6a overview of mini-batch gradient descent. Cited on, 2012.
Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deeP network training by
reducing internal covariate shift. In ICML, 2015.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic oPtimization. In ICLR, 2014.
Alex Krizhevsky, Geoffrey Hinton, et al. Learning multiPle layers of features from tiny images.
Technical rePort, Citeseer, 2009.
Liyuan Liu, Xiang Ren, Jingbo Shang, Jian Peng, and Jiawei Han. Efficient contextualized rePre-
sentation: Language model Pruning for sequence labeling. EMNLP, 2018.
Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike
Lewis, Luke Zettlemoyer, and Veselin Stoyanov. Roberta: A robustly oPtimized bert Pretraining
aPProach. arXiv preprint arXiv:1907.11692, 2019.
Ilya Loshchilov and Frank Hutter. Fixing weight decay regularization in adam. In ICLR, 2018.
Liangchen Luo, Yuanhao Xiong, Yan Liu, and Xu Sun. AdaPtive gradient methods with dynamic
bound of learning rate. In ICLR, 2019.
Robert Nau. Forecasting with moving averages. 2014.
Myle Ott, Sergey Edunov, Alexei Baevski, Angela Fan, Sam Gross, Nathan Ng, David Grangier,
and Michael Auli. fairseq: A fast, extensible toolkit for sequence modeling. In NAACL, 2019.
Martin Popel and Ondrej Bojar. Training tips for the transformer model. The Prague Bulletin of
Mathematical Linguistics,110(1):43-70, 2018.
Sashank J Reddi, Satyen Kale, and Sanjiv Kumar. On the convergence of adam and beyond. In
ICLR, 2018.
Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jon Shlens, and Zbigniew Wojna. Rethinking
the inception architecture for computer vision. In CVPR, 2016.
Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,
Eukasz Kaiser, and Illia Polosukhin. Attention is all you need. In NIPS, 2017.
Kirk M Wolter. Taylor series methods. In Introduction to variance estimation. 2007.
Lin Xiao, Adams Wei Yu, Qihang Lin, and Weizhu Chen. Dscovr: Randomized primal-dual block
coordinate algorithms for asynchronous distributed optimization. J. Mach. Learn. Res., 2017.
Matthew D Zeiler. Adadelta: an adaptive learning rate method. arXiv preprint arXiv:1212.5701,
2012.
Hongyi Zhang, Yann N Dauphin, and Tengyu Ma. Fixup initialization: Residual learning without
normalization. In ICLR, 2019.
10
Published as a conference paper at ICLR 2020
A Proof of Theorem 1
For ease of notation, We refer ψ2(.) as X and 表 as T 2. Thus, X 〜 Scale-inv-X 2 (ρ, τ2) and:
2
HX) = (T P/丫P exp[] d E[x] = P	(∀ > 2)	⑹
P(X)= Γ(ρ∕2)	χi+ρ∕2	E[x]=(ρ- 2)σ2 (∀ P> 2)	(6)
Where Γ(.) is the gamma function. Therefore, We have:
E[√χ] = Z √xp(X) dχ = T木飞(。∕1"2) (∀P > 4).	G)
0	2 Γ(P∕2)
Based on Equation 6 and 7, for ∀ P > 4, We have:
Var[ψ(.)] = Var[√X] = E[x] - E[√X]2 = τ2(ɪ - ρ2±5B(p∕1, p∕1 )2),	(8)
P ∕2 π 2	2
Where B(.) is the beta function. To prove the monotonic property of Var[ψ(.)], We need to shoW:
Lemma 1. for t ≥ 4, ∂ (t-2 — t2∏— B(t-1,t-1 )2) < 0
Proof. The target inequality can be re-Wrote as
∂( t	t 22t-5 b( t/1 t/1 )2)
∂t( t - 2 π ( 2 , 2 ) )
_	-2	_ 22t-5 B t-1 t-1 2_ 122t-5ln4 B t-1 t-1 2
=(t - 2)2 π ( 2 , 2 )	π ( 2 , 2 )
2t 22t-5	t -1 t -1 2 t -1	Γ0(X)
---B(丁，丁)2(ψ(亍)- ψ(t-1)),	«(X)=Ty)
<0
This inequality is equivalent to:
64π
(t - 2)24tB(t-1,t-1 )2
+ 1 + t ln4 + 2tΨ(t-1)
> 2tΨ(t - 1) =) t[Ψ(t--1) + Ψ(t) + ln4],
Where (i) is derived from Legendre duplication formula. Simplify the above inequality, We get:
64π	t - 1 t
(t - 2)24tB(t-1, t-1 )2 +1 + tψ(M)- tψ(2) >0,
We only need to shoW
64π	t - 1 t
(t - 2)24tB(t-1, t-1 )2 +1 + tψ(丁) - tψ(2)
64π
≥ (t 2)24tB( t- t- )2 +2 + t(ln(t/2) - 1/(t/2 - 0.5)) - t ln(t/2)
64π	2
/	/
(t - 2)24tB(t-1,t-1 )2	t - 1
64π	2
> --------：----∙ - ∙ ■,--------≥ 0.
(t - 2)24tB(t-1,t-1 )2	t - 2 一,
Where the first inequality is from ln(X) - 1/(2X) > Ψ(X) > ln(X + 0.5) - 1/X.
Therefore, We only need to shoW
32∏ ≥ (t - 2)4tB(t-1 ,t-1)2,
Which is equivalent to
(t - 2)4tB( J t-1 )2 = (t - 2)4t T(t-1 )4
(t 2)4 B( 2 ,	2 ) =(t 2)4Γ(t-1)2
=)(t - 2)4t Tw 42-tπ = 16π(t - 2)WP ≤ 32π,
11
Published as a conference paper at ICLR 2020
where (i) is from Legendre duplication formula.
So we only need to show
Γ( t-1 )2
(t-2)rW ≤2
(9)
Using GaUtschi's inequality (,：；：) < (X + 1)1-s), We have
(t -2)
Γ( t-1 )2
Γ(t∕2)2
≤ (t- 2)(t-1 )T = 2t-F < 2
2	t-1
(10)
□
B	Implementation Details
B.1	Language Modeling
Our implementation is based on the previous Work (Liu et al., 2018). Specifically, We use tWo-layer
LSTMs With 2048 hidden states With adaptive softmax to conduct experiments on the one billion
Words dataset. Word embedding (random initialized) of 300 dimensions is used as the input and the
adaptive softmax is incorporated With a default setting (cut-offs are set to [4000, 40000, 200000]).
Additionally, as pre-processing, We replace all tokens occurring equal or less than 3 times With as
UNK, Which shrinks the dictionary from 7.9M to 6.4M. Dropout is applied to each layer With a ratio
of 0.1, gradients are clipped at 5.0. We use the default hyper-parameters to update moving averages,
i.e.β1 = 0.9 and β2 = 0.999. The learning rate is set to start from 0.001, and decayed at the start of
10th epochs. LSTMs are unrolled for 20 steps Without resetting the LSTM states and the batch size
is set to 128. All models are trained on one NVIDIA Tesla V100 GPU.
B.2	Imageine Classification
We use the default ResNet architectures (He et al., 2016) in a public pytorch re-implementation4.
Specifically, We use 20-layer ResNet (9 Basic Blocks) for CIFAR-10 and 18-layer ResNet (8 Basic
Blocks) for ImageNet. Batch size is 128 for CIFAR-10 and 256 for ImageNet. The model is trained
for 186 epoches and the learning rate decays at the 81-th and the 122-th epoches by 0.1 on CIFAR-
10, While the model is trained for 90 epoches and the learning rate decays at the 31-th and the 61-th
epoch by 0.1 on ImageNet. For Adam and RAdam, We set β1 = 0.9, β2 = 0.999. For SGD, We
set the momentum factor as 0.9. The Weight decay rate is 10-4. Random cropping and random
horizontal flipping are applied to training data.
B.3	Neural Machine Translation
Our experiments are based on the default Transformers (VasWani et al., 2017) implementation from
the fairseq package (Ott et al., 2019). Specifically, We use Word embedding With 512 dimensions and
6-layer encoder / decoder With 4 head and 1024 hidden dimensions on the IWSLT14’ dataset; use
Word embedding With 512 dimension and 6-layer encoder / decoder With 8 heads and 2048 hidden
dimensions. Label smoothed cross entropy is used as the objective function With an uncertainty =
0.1 (Szegedy et al., 2016). We use linear learning rate decay starting from 3e-4, and the checkpoints
of the last 20 epoches are averaged before evaluation. As to the Wamrup strategy, We use a linear
Warmup for Adam in the first 4000 updates, and set β2 to satisfy ν = 4000 (β2 = 0.9995). In the
IWSLT’14 dataset, We conduct training on one NVIDIA Tesla V100 GPU, set maximum batch size
as 4000, apply dropout With a ratio 0.3, using Weight decay of 0.0001 and clip the gradient norm
at 25. In the WMT’16 dataset, We conduct training on four NVIDIA Quadro R8000 GPUs and set
maximum batch size as 8196.
C Downgrading to SGDM
As a byproduct determined by math derivations, We degenerated RAdam to SGD With momentum
in the first several updates. Although this stage only contains several gradient updates, these up-
4https://github.com/bearpaw/pytorch-classification
12
Published as a conference paper at ICLR 2020
dates could be quite damaging (e.g., in our Figure 2, the gradient distribution is distorted within 10
gradient updates). Intuitively, updates with divergent adaptive learning rate variance could be more
damaging than the ones with converged variance, as divergent variance implies more instability. As
a case study, we performed experiments on the CIFAR10 dataset. Five-run average results are sum-
marized in Table 3. The optimizer fails to get an equally reliably model when changing the first
4 updates to Adam, yet the influence of switching is less deleterious when we change 5-8 updates
instead. This result verifies our intuition and is in agreement with our theory the first few updates
could be more damaging than later updates. By saying that, we still want to emphasize that this part
(downgrading to SGDM) is only a minor part of our algorithm design whereas our main focus is on
the mechanism of warmup and the derivation of the rectification term.
Table 3: Performance on CIFAR10 (lr = 0.1).
1-4 steps	5-8 steps	8+ steps	test acc	train loss	train error
RAdam	RAdam	RAdam	91.08	0.021	0.74
Adam (w. divergent var.)	RAdam	RAdam	89.98	0.060	2.12
SGD	Adam (w. convergent var.)	RAdam	90.29	0.038	1.23
13