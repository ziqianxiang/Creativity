Published as a conference paper at ICLR 2020
GRADIENT `1 REGULARIZATION FOR
Quantization Robustness
Milad Alizadeh* 2,1, Arash Behboodi1, Mart van Baalen1, Christos Louizos1, Tijmen
Blankevoort1, and Max Welling1
1 Qualcomm AI Researcht
Qualcomm Technologies Netherlands B.V.
{behboodi,mart,clouizos,tijmen,mwelling}@qti.qualcomm.com
2University of Oxford
milad.alizadeh@cs.ox.ac.uk
Ab stract
We analyze the effect of quantizing weights and activations of neural networks
on their loss and derive a simple regularization scheme that improves robust-
ness against post-training quantization. By training quantization-ready networks,
our approach enables storing a single set of weights that can be quantized on-
demand to different bit-widths as energy and memory requirements of the ap-
plication change. Unlike quantization-aware training using the straight-through
estimator that only targets a specific bit-width and requires access to training data
and pipeline, our regularization-based method paves the way for “on the fly” post-
training quantization to various bit-widths. We show that by modeling quantiza-
tion as a '∞-bounded perturbation, the first-order term in the loss expansion can
be regularized using the `1 -norm of gradients. We experimentally validate the ef-
fectiveness of our regularization scheme on different architectures on CIFAR-10
and ImageNet datasets.
1	Introduction
Deep neural networks excel across a variety of tasks, but their size and computational requirements
often hinder their real-world deployment. The problem is more challenging for mobile phones,
embedded systems, and IoT devices, where there are stringent requirements in terms of memory,
compute, latency, and energy consumption. Quantization of parameters and activations is often used
to reduce the energy and computational requirements of neural networks. Quantized neural networks
allow for more speed and energy efficiency compared to floating-point models by using fixed-point
arithmetic.
However, naive quantization of pre-trained models often results in severe accuracy degradation,
especially when targeting bit-widths below eight (Krishnamoorthi, 2018). Performant quantized
models can be obtained via quantization-aware training or fine-tuning, i.e., learning full-precision
shadow weights for each weight matrix with backpropagation using the straight-through estimator
(STE) (Bengio et al., 2013), or using other approximations (Louizos et al., 2018). Alternatively,
there have been successful attempts to recover the lost model accuracy without requiring a training
pipeline (Banner et al., 2018; Meller et al., 2019; Choukroun et al., 2019; Zhao et al., 2019) or
representative data (Nagel et al., 2019).
But these methods are not without drawbacks. The shadow weights learned through quantization-
aware fine-tuning often do not show robustness when quantized to bit-widths other than the one
they were trained for (see Table 1). In practice, the training procedure has to be repeated for each
quantization target. Furthermore, post-training recovery methods require intimate knowledge of the
relevant architectures. While this may not be an issue for the developers training the model in the first
*Work done during internship at Qualcomm AI Research
tQualcom AI Research is an initiative of QUalComm Technologies, Inc.
1
Published as a conference paper at ICLR 2020
place, it is a difficult step for middle parties that are interested in picking up models and deploying
them to users down the line, e.g., as part of a mobile app. In such cases, one might be interested
in automatically constraining the computational complexity of the network such that it conforms
to specific battery consumption requirements, e.g. employ a 4-bit variant of the model when the
battery is less than 20% but the full precision one when the battery is over 80%. Therefore, a model
that can be quantized to a specific bit-width “on the fly” without worrying about quantization aware
fine-tuning is highly desirable.
In this paper, we explore a novel route, substantially different from the methods described above. We
start by investigating the theoretical properties of noise introduced by quantization and analyze it as
a '∞-bounded perturbation. Using this analysis, We derive a straightforward regularization scheme
to control the maximum first-order induced loss and learn networks that are inherently more robust
against post-training quantization. We show that applying this regularization at the final stages of
training, or as a fine-tuning step after training, improves post-training quantization across different
bit-widths at the same time for commonly used neural network architectures.
2	First-Order Quantization-Robust Models
In this section, we propose a regularization technique for robustness to quantization noise. We first
propose an appropriate model for quantization noise. Then, we show how we can effectively control
the first-order, i.e., the linear part of the output perturbation caused by quantization. When the linear
approximation is adequate, our approach guarantees the robustness towards various quantization
bit-widths simultaneously.
We use the following notation throughout the paper. The `p-norm ofa vector x in Rn is denoted by
∣∣xkp and defined as ∣∣xkp := (Pn=I |xi|p)1/p for P ∈ [1, ∞). At its limit we obtain the '∞-norm
defined by kxk∞ := maxi |xi|. The inner product of two vectors x and y is denoted by hx, yi.
2.1	ROBUSTNESS ANALYSIS UNDER 'p-BOUNDED ADDITIVE NOISE
The error introduced by rounding in the quantization operation can be modeled as a generic additive
perturbation. Regardless of which bit-width is used, the quantization perturbation that is added
to each value has bounded support, which is determined by the width of the quantization bins.
In other words, the quantization noise vector of weights and activations in neural networks has
entries that are bounded. Denote the quantization noise vector by ∆. If δ is the width of the
quantization bin, the vector ∆ satisfies ∣∣∆∣∣∞ ≤ δ∕2. Therefore we model the quantization noise
as a perturbation bounded in the '∞-norm. A model robust to '∞-type perturbations would also be
robust to quantization noise.
To characterize the effect of perturbations on the output of a function, we look at its tractable ap-
proximations. To start, consider the first-order Taylor-expansion of a real valued-function f(w+∆)
around w:
f(w + ∆)= f (w) + h∆, Vf (w)i + R2,	⑴
where R2 refers to the higher-order residual error of the expansion. We set R2 aside for the moment
and consider the output perturbation appearing in the first-order term h∆, Vf(w)i. The maximum
of the first-order term among all '∞-bounded perturbations ∆ is given by:
max h∆, Vf(w)i = δ ∣Vf (w)∣1.	(2)
k∆k∞≤δ
To prove this, consider the inner product of ∆ and an arbitrary vector x given by Pin=1 nixi. Since
|ni| is assumed to be bounded by δ, each niXi is bounded by δ∣x∕, which yields the result. The
maximum in Equation 2 is obtained indeed by choosing ∆ = δ sign(Vf (w)).
Equation 2 comes with a clear hint. We can guarantee that the first-order perturbation term is small
if the `1 -norm of the gradient is small. In this way, the first-order perturbation can be controlled
efficiently for various values of δ, i.e. for various quantization bit-widths. In other words, an ef-
fective way for controlling the quantization robustness, up to first-order perturbations, is to control
the `1 -norm of the gradient. As we will shortly argue, this approach yields models with the best
robustness.
2
Published as a conference paper at ICLR 2020
s4u 8-pe-6M-o SEJOUIV
500
0	5	10	15	20	25
∕2-norms of gradients
Figure 1: 'ι- and '2-norms of the gradients for
CIFAR-10 test-set mini-batches. Note the differ-
ence between the scales on the horizontal and ver-
tical axis. We observe that our regularization term
decreases the 'ι-norm significantly, compared to its
unregularized counterpart.
PBZMraɔbəɑ:"l>
10 12 3
O O - - -
Ilooo
111
10-4
10-4 ιo-3 ιo-2 101	100	101
KL Baseline
Figure 2: KL-divergence of the floating point
predictive distribution to the predictive distribu-
tion of the quantized model for CIFAR-10 test-
set mini-batches. We observe that the regulariza-
tion leads to a smaller gap, especially for smaller bit-
widths.
This conclusion is based on worst-case analysis since it minimizes the upper bound of the first-order
term, which is realized by the worst-case perturbation. Its advantage, however, lies in simultaneous
control of the output perturbation for all δs and all input perturbations. In the context of quantization,
this implies that the first-order robustness obtained in this way would hold regardless of the adopted
quantization bit-width or quantization scheme.
The robustness obtained in this way would persist even if the perturbation is bounded in other `p-
norms. This is because the set of '∞-bounded perturbations includes all other bounded perturba-
tions, as for all p ∈ [1, ∞), kxkp ≤ δ implies kxk∞ ≤ δ (see Figure 8) . The robustness to
'∞-norm perturbations is, therefore, the most stringent one among other 'p-norms, because a model
should be robust to a broader set of perturbations. Controlling the '1 -norm of the gradient guarantees
robustness to '∞-perturbations and thereby to all other 'p-bounded perturbations.
In what follows, We propose regularizing the 'ι-norm of the gradient to promote robustness to
bounded norm perturbations and in particular bounded '∞-norm perturbations. These perturbations
arise from quantization of weights and activations of neural networks.
2.2	ROBUSTNESS THROUGH REGULARIZATION OF THE '1-NORM OF THE GRADIENT
We focused on weight quantization in our discussions so far, but we can equally apply the same
arguments for activation quantization. Although the activations are not directly learnable, their
quantization acts as an additive '∞-bounded perturbation on their outputs. The gradient of these
outputs is available. It therefore suffices to accumulate all gradients along the way to form a large
vector for regularization.
Suppose that the loss function fora deep neural network is given by LCE (W, Y; x) where W denotes
the set of all weights, Y denotes the set of outputs of each activation and x the input. We control the
'1 -norm of the gradient by adding the regularization term
X kVwιLce(W, Y； x)kι + X |%/谑(W, Y; x)kι
Wl ∈W	yl ∈Y
to the loss, yielding an optimization target
L(W； X) = LCE(W, Y； x)+ λw X kVwιLce(W, Y； x)kι + λy X kVy/cE(W, Y; x)k「
Wl ,∈W	yl ∈Y	(3)
where λw and λy are weighing hyper-parameters.
3
Published as a conference paper at ICLR 2020
1	5	10	15	20
Batch Number
Figure 3: Predicting induced loss using first-order terms. We added '∞-bounded noise With δ CorresPond-
ing to 4-bit quantization to all weights of ResNet-18 and compared the induced loss on the CIFAR-10 test-set
With the PrediCtions using gradients. While not PerfeCt, the first-order term is not insignifiCant.
2.3	ALTERNATIVES TO THE `1 -REGULARIZATION
The equivalenCe of norms in finite-dimensional normed sPaCes imPlies that all norms are Within a
Constant faCtor of one another. Therefore, one might suggest regularizing any norm to Control other
norms. Indeed some Works attemPted to Promote robustness to quantization noise by Controlling
the '2-norm of the gradient (HOffman et al., 2019). However, an argument related to the curse of
dimensionality Can shoW Why this aPProaCh Will not Work. The equivalenCe of norms for `1 and `2
in n-dimensional sPace is stated by the inequality:
kxk2 ≤ kxk1 ≤ √n kxk2 .
Although the '2-norm bounds the 'ι-norm from above, it is vacuous if it does not scale with 1∕√n.
ImPosing such a scaling is demanding when n, which is the number of trainable Parameters, is
large. Figure 1 shows that there is a large discrePancy between these norms in a conventionally
trained network, and therefore small '2-norm does not adequately control the '1-norm. A very
similar argument can be Provided from a theoretical PersPective (see the suPPlementary materials).
To guarantee robustness, the '2 -norm of the gradient, therefore, should be pushed as small as
Θ(1∕√n). We experimentally show in Section 4 that this is a difficult task. We therefore directly
control the '1-norm in this paper. Note that small '1-norm is guaranteed to control the first order-
perturbation for all types of quantization noise with bounded support. This includes symmetric and
asymmetric quantization schemes.
Another concern is related to the consistency of the first-order analysis. We neglected the residual
term R2 in the expansion. Figure 3 compares the induced loss after perturbation with its first-order
approximation. The approximation shows a strong correlation with the induced loss. We will see in
the experiments that the quantization robustness can be boosted by merely controlling the first-order
term. Nonetheless, a higher-order perturbation analysis can probably provide better approximations.
Consider the second-order perturbation analysis:
f(w + ∆) = f (w) + h∆, Vf (w)i + 21 ∆τV2f (w)∆ + R3.
Computing the worst-case second-order term for '∞-bounded perturbations is hard. Even for convex
functions where V2f (w) is positive semi-definite, the problem of computing worst-case second-
order perturbation is related to the mixed matrix-norm computation, which is known to be NP-
hard. There is no polynomial-time algorithm that approximates this norm to some fixed relative
precision (Hendrickx & Olshevsky, 2010). For more discussions, see the supplementary materials.
It is unclear how this norm should be controlled via regularization.
3	Related Work
A closely related line of work to ours is the analysis of the robustness of the predictions made by
neural networks subject to an adversarial perturbation in their input. Quantization can be seen as a
similar scenario where non-adversarial perturbations are applied to weights and activations instead.
Cisse et al. (2017) proposed a method for reducing the network’s sensitivity to small perturbations
4
Published as a conference paper at ICLR 2020
by carefully controlling its global Lipschitz. The Lipschitz constant of a linear layer is equal to the
spectral norm of its weight matrix, i.e., its largest singular value. The authors proposed regularizing
weight matrices in each layer to be close to orthogonal: PW ∈W WlT Wl - I2. All singular
values of orthogonal matrices are one; therefore, the operator does not amplify perturbation (and
input) in any direction. Lin et al. (2019) studied the effect of this regularization in the context
of quantized networks. The authors demonstrate the extra vulnerability of quantized models to
adversarial attacks and show how this regularization, dubbed “Defensive Quantization”, improves
the robustness of quantized networks. While the focus of Lin et al. (2019) is on improving the
adversarial robustness, the authors report limited results showing accuracy improvements of post-
training quantization.
The idea of regularizing the norm of the gradients has been proposed before (Gulrajani et al., 2017)
in the context of GANs, as another way to enforce Lipschitz continuity. A differentiable function is
I-LiPschitz if and only if it has gradients with '2-norm of at most 1 everywhere, hence the authors
penalize the '2-norm of the gradient of the critic with respect to its input. This approach has a major
advantage over the methods mentioned above. Using weight regularization is only well-defined for
2D weight matrices such as in fully-connected layers. The penalty term is often approximated for
convolutional layers by reshaping the weight kernels into 2D matrices. Sedghi et al. (2018) showed
that the singular values found in this weight could be very different from the actual operator norm
of the convolution. Some operators, such as nonlinearities, are also ignored. Regularizing Lipschitz
constant through gradients does not suffer from these shortcomings, and the operator-norm is reg-
ularized directly. Guo et al. (2018) demonstrated that there exists an intrinsic relationship between
sparsity in DNNs and their robustness against '∞ and '2 attacks. For a binary linear classifier, the
authors showed that they could control the '∞ robustness, and its relationship with sparsity, by reg-
ularizing the '1 norm of the weight tensors. In the case of a linear classifier, this objective is, in fact,
equivalent to our proposed regularization penalty.
Finally, another line of work related to ours revolves around quantization-aware training. This can,
in general, be realized in two ways: 1) regularization and 2) mimicking the quantization procedure
during the forward pass of the model. In the first case, we have methods (Yin et al., 2018; Achter-
hold et al., 2018) where there are auxiliary terms introduced in the objective function such that the
optimized weights are encouraged to be near, under some metric, to the quantization grid points,
thus alleviating quantization noise. In the second case, we have methods that rely on either the
STE (Courbariaux et al., 2015; Rastegari et al., 2016; Jacob et al., 2018), stochastic rounding (Gupta
et al., 2015; Gysel, 2016), or surrogate objectives and gradients (Louizos et al., 2018; Shayer et al.,
2017). While all of the methods above have been effective, they still suffer from a major limitation;
they target one-specific bit-width. In this way, they are not appropriate for use-cases where we want
to be able to choose the bit-width “on the fly”.
4	Experiments
In this section we experimentally validate the effectiveness of our regularization method on im-
proving post-training quantization. We use the well-known classification tasks of CIFAR-10 with
ResNet-18 (He et al., 2016) and VGG-like (Simonyan & Zisserman, 2014) and of ImageNet with
ResNet-18. We compare our results for various bit-widths against (1) unregularized baseline
networks (2) Lipschitz regularization methods (Lin et al., 2019; Gulrajani et al., 2017) and (3)
quantization-aware fine-tuned models. Note that Gulrajani et al. (2017) control the Lipschitz con-
stant under an '2 metric by explicitly regularizing the '2-norm of the gradient, while Lin et al. (2019)
essentially control an upper bound on the '2-norm of the gradient. Comparing against these base-
lines thus gives insight into how our method of regularizing the '1-norm of the gradient compares
against regularization of the '2-norm of the gradient.
4.1	Experimental Setup
Implementation and complexity Adding the regularization penalty from Equation 3 to the train-
ing objective requires higher-order gradients. This feature is available in the latest versions of frame-
works such as Tensorflow and PyTorch (of which we have used the latter for all our experiments).
Computing VwkVwLk 1 using automatic differentiation requires O(2 X C X E) extra computations,
where E is the number of elementary operations in the original forward computation graph, and C
5
Published as a conference paper at ICLR 2020
0.3
0.2
Q.9,8,7,6.5,4
Ioooooo
ADeJnDUV
(7,FP)
(6,FP)	(5,FP)
Quantization Config
Aɔejnɔɔ4
01(8.FP)
(4,FP)
(a)
0.3
0.2
0.1
(8,4)	(7,4)	(6,4)	(5,4)
Quantization Config
(b)
(4,4)
Figure 4: Accuracy of regularized VGG-like after post-training quantization. We trained 5 models with
different initializations and show the mean accuracy for each quantization configuration. The error bars indicate
min/max observed accuracies. (a) Weight-only quantization (b) Activation quantization fixed to 4-bits
is a fixed constant (Baydin et al., 2018). This can be seen from the fact that kVwLkι is a function
R|w| → R, where |w| denotes the number of weights and the computation of the gradient w.r.t. the
loss contains E elementary operations, as many as the forward pass. In practice, enabling regular-
ization increased time-per-epoch time on CIFAR10 from 14 seconds to 1:19 minutes for VGG, and
from 24 seconds to 3:29 minutes for ResNet-18. On ImageNet epoch-time increased from 33:20
minutes to 4:45 hours for ResNet-18. The training was performed on a single NVIDIA RTX 2080
Ti GPU.
However, in our experiments we observed that it is not necessary to enable regularization from the
beginning, as the `1 -norm of the gradients decreases naturally up to a certain point as the training
progresses (See Appendix D for more details). We therefore only enable regularization in the last 15
epochs of training or as an additional fine-tuning phase. We experimented with tuning λw and λy in
Equation 3 separately but found no benefit. We therefore set λw = λy = λ for the remainder of this
section.
We use a grid-search to find the best setting for λ. Our search criteria is ensuring that the perfor-
mance of the unquantized model is not degraded. In order to choose a sensible range of values we
first track the regularization and cross-entropy loss terms and then choose a range of λ that ensures
their ratios are in the same order of magnitude. We do not perform any quantization for validation
purposes during the training.
Quantization details We use uniform symmetric quantization (Jacob et al., 2018; Krishnamoorthi,
2018) in all our experiments unless explicitly specified otherwise. For the CIFAR 10 experiments
we fix the activation bit-widths to 4 bits and then vary the weight bits from 8 to 4. For the Imagenet
experiments we use the same bit-width for both weights and activations. For the quantization-aware
fine-tuning experiments we employ the STE on a fixed (symmetric) quantization grid. In all these
experiments we perform a hyperparameter search over learning rates for each of the quantization
bit-widths and use a fixed weight decay of 1e - 4. For our experiments with defensive quantization
(Lin et al., 2019) we perform a hyperparameter search over the scaling parameters of the regularizer
and the learning rate. We limit the search over the scaling parameters to those mentioned in (Lin
et al., 2019) and do not use weight decay. When applying post-training quantization we set the
activation ranges using the batch normalization parameters as described in (Nagel et al., 2019).
When a model is fine-tuned to a target bit-width and evaluated on a higher bit-width, we can trivially
represent the original quantized weights and activations by ignoring the higher-order bits, or quantize
using the higher bit-width. As using the higher bit-width to quantize shadow weights and activations
introduces noise to the model and might yield lower results, we try both approaches and only report
a result if quantization using the higher bit-width gives better results.
6
Published as a conference paper at ICLR 2020
Figure 5: Random cross sections of decision boundaries in the input space. To generate these cross-
sections, we draw a random example from the CIFAR-10 test set (represented by the black dot in the center)
and pass a random two-dimensional hyper-plane ⊂ R1024 through it. We then evaluate the network’s output for
each point on the hyper-plane. Various colors indicate different classes. Softmax’s maximum values determine
the contours. The top row illustrates the difference between the baseline and the regularized VGG-like networks
(and their quantized variants) when they all classify an example correctly. The bottom row depicts a case where
the quantized baseline misclassifies an example while the regularized network predicts the correct class. We
can see that our regularization pushes the decision boundaries outwards and enlarges the decision cells.
4.2	Effects of regularization
In order to get a better understanding of our proposed regularizer, we first adopt the visualization
method from Hoffman et al. (2019) and illustrate the effects that the quantization in general, and our
method in particular, have on the trained classifier’s decision boundaries. The result can be seen in
Figure 5, where we empirically observe that the regularized networks “expands” its decision cells.
Secondly, We investigate in Figure 1 the 'ι- and '2-norms of the gradients for all CIFAR-10 test
batches on the VGG-like model. We can observe that while the '2-norms of the gradient are small
in the unregularized model, the '1-norms are orders of magnitude larger. Consequently, when fine-
tuning the same model with our method, we see a strong decrease of the '1-norm.
Finally, we investigate how the predictive distribution of the floating point model, p(y|x), changes
when we quantize either an unregularized baseline or a model regularized with our method, thus
obtaining q(y|x). We measure this discrepancy using the KL-divergence of the original predictive
when using the predictive distribution of the quantized model, i.e. DKL(p(y|x)||q(y|x)), averaged
over each test batch. Since our method improves robustness of the loss gradient against small per-
turbations, we would expect the per-class probabilities to be more robust to perturbations as well,
and thus more stable under quantization noise. The result can be seen in Figure 2, where we indeed
observe that the gap is smaller when quantizing our regularized model.
4.3	CIFAR- 1 0 & Imagenet Results
The classification results from our CIFAR-10 experiments for the VGG-like and ResNet18 networks
are presented in Table 1, whereas the result from our Imagenet experiments for the ResNet18 net-
work can be found in Table 2. Both tables include all results relevant to the experiment, including
results on our method, Defensive Quantization regularization, L2 gradient regularization and fine-
tuning using the STE.
Comparison to “Defensive Quantization” As explained in Section 3, Defensive Quantization
(Lin et al., 2019) aims to regularize each layer’s Lipschitz constant to be close to 1. Since the
7
Published as a conference paper at ICLR 2020
	VGG-like				ResNet-18			
	FP	(8,4)	(6,4)	(4,4)	FP	(8,4)	(6,4)	(4,4)
No Regularization	92.49	79.10	78.84	11.47	93.54	85.51	85.35	83.98
DQ Regularization	91.51	86.30	84.29	30.86	92.46	83.31	83.34	82.47
L2 Regularization	91.88	86.64	86.14	63.93	93.31	84.50	84.99	83.82
L1 Regularization (Ours)	92.63	89.74	89.78	85.99	93.36	88.70	88.45	87.62
STE @ (8,4)	一	91.28	89.99	32.83	—	89.10	87.79	86.21
STE @ (6,4)	一	—	90.25	39.56	—	—	90.77	88.17
STE @ (4,4)	一	—	—	89.79	—	—	一	89.98
Table 1: Test accuracy (%) for the VGG-like and ResNet-18 models on CIFAR-10. STE @
(X,X) indicates the weight-activation quantization configuration used with STE for fine-tuning. DQ
denotes Defensive Quantization (Lin et al., 2019). For the No Regularization row of results we only
report the mean of 5 runs. The full range of the runs is shown in Figure 4.
		Configuration			
		FP	(8,8)	(6,6)	(4,4)
No Regularization		69.70	69.20	63.80	0.30
DQ Regularization		68.28	67.76	62.31	0.24
L2 Regularization		68.34	68.02	64.52	0.19
L1 Regularization (Ours)		70.07	69.92	66.39	0.22
L1 Regularization (Ours) (λ =	0.05)	64.02	63.76	61.19	55.32
STE @ (8,8)		一	70.06	60.18	0.13
STE @ (6,6)		一	一	69.63	11.34
STE @ (4,4)		一	一	—	57.50
Table 2: Test accuracy for the ResNet-18 architecture on ImageNet. STE @ (X,X) indicates the
weight-activation quantization configuration used with STE for fine-tuning. In addition to the λ we
found through the grid-search which maintains FP accuracy, we also experimented with a stronger
λ = 0.05 to show that (4,4) accuracy can be recovered at the price of overall lower performance.
regularization approach taken by the authors is similar to our method, and the authors suggest that
their method can be applied as a regularization for quantization robustness, we compare their method
to ours. As the experiments from the original paper differ methodologically from ours in that we
quantize both weights and activations, all results on defensive quantization reported in this paper are
produced by us. We were able to show improved quantization results using defensive quantization
for CIFAR-10 on VGG-like, but not on any of the experiments on ResNet18. We attribute this
behavior to too stringent regularization in their approach: the authors regularize all singular values
of their (reshaped) convolutional weight tensors to be close to one, using a regularization term
that is essentially a fourth power regularization of the singular values of the weight tensors (see
Appendix C). This regularization likely inhibits optimization.
Comparison to explicit '2-norm gradient regularization We consider the '2 regularization of
the gradient, as proposed by Gulrajani et al. (2017), as a generalization of the DQ regularization.
Such regularization has two key benefits over DQ: 1) we can regularize the singular values without
reshaping the convolutional kernels and 2) we impose a less stringent constraint as we avoid enforc-
ing all singular values to be close to one. By observing the results at Table 1 and 2, we see that the
'2 regularization indeed improves upon DQ. Nevertheless, it provides worse results compared to our
'1 regularization, an effect we can explain by the analysis of Section 2.
Comparison to quantization-aware fine-tuning While in general we cannot expect our method
to outperform models to which quantization-aware fine-tuning is applied on their target bit-widths,
as in this case the model can adapt to that specific quantization noise, we do see that our model
performs on par or better when comparing to bit-widths lower than the target bit-width. This is in
line with our expectations: the quantization-aware fine-tuned models are only trained to be robust to
a specific noise distribution. However, our method ensures first-order robustness regardless of bit-
8
Published as a conference paper at ICLR 2020
width or quantization scheme, as explained in Section 2. The only exception is the 4 bit results on
ImageNet. We hypothesize that this is caused by the fact that we tune the regularization strength λ to
the highest value that does not hurt full-precision results. While stronger regularization would harm
full-precision performance, it would also most likely boost 4 bit results, due to imposing robustness
to a larger magnitude, i.e. δ, of quantization noise. Table 1 includes results for a higher value of δ
that is in line with this analysis.
5	Conclusion
In this work, we analyzed the effects of the quantization noise on the loss function of neural net-
works. By modelling quantization as an '∞-bounded perturbation, We showed how We can Con-
trol the first-order term of the Taylor expansion of the loss by a straightforward regularizer that
encourages the `1 -norm of the gradients to be small. We empirically confirmed its effectiveness,
demonstrating that standard post-training quantization to such regularized networks can maintain
good performance under a variety of settings for the bit-width of the weights and activations. As a
result, our method paves the way towards quantizing floating-point models “on the fly” according to
bit-widths that are appropriate for the resources currently available.
Acknowledgments
We would like to thank Markus Nagel, Rana Ali Amjad, Matthias Reisser, and Jakub Tomczak for
their helpful discussions and valuable feedback.
References
Jan Achterhold, Jan Mathias Koehler, Anke Schmeink, and Tim Genewein. Variational network
quantization. International Conference on Learning Representations, 2018.
R Banner, Y Nahshan, E Hoffer, and D Soudry. Post training 4-bit quantization of convolution
networks for rapid-deployment. CoRR, abs/1810.05723, 1:2, 2018.
Atilim Gunes Baydin, Barak A Pearlmutter, Alexey Andreyevich Radul, and Jeffrey Mark Siskind.
Automatic differentiation in machine learning: a survey. Journal of machine learning research,
18(153), 2018.
Yoshua Bengio, Nicholas Leonard, and Aaron Courville. Estimating or propagating gradients
through stochastic neurons for conditional computation. arXiv preprint arXiv:1308.3432, 2013.
Vijay Bhattiprolu, Mrinalkanti Ghosh, Venkatesan Guruswami, Euiwoong Lee, and Madhur Tul-
siani. Inapproximability of matrix p → q norms. arXiv preprint arXiv:1802.07425, 2018.
Yoni Choukroun, Eli Kravchik, and Pavel Kisilev. Low-bit quantization of neural networks for
efficient inference. arXiv preprint arXiv:1902.06822, 2019.
Moustapha Cisse, Piotr Bojanowski, Edouard Grave, Yann Dauphin, and Nicolas Usunier. Parseval
networks: Improving robustness to adversarial examples. In Proceedings of the 34th International
Conference on Machine Learning-Volume 70, pp. 854-863. JMLR. org, 2017.
Matthieu Courbariaux, Yoshua Bengio, and Jean-Pierre David. Binaryconnect: Training deep neural
networks with binary weights during propagations. In Advances in neural information processing
systems, pp. 3123-3131, 2015.
Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron C Courville. Im-
proved training of wasserstein gans. In Advances in neural information processing systems, pp.
5767-5777, 2017.
Yiwen Guo, Chao Zhang, Changshui Zhang, and Yurong Chen. Sparse dnns with improved adver-
sarial robustness. In Advances in neural information processing systems, pp. 242-251, 2018.
9
Published as a conference paper at ICLR 2020
Suyog Gupta, Ankur Agrawal, Kailash Gopalakrishnan, and Pritish Narayanan. Deep learning with
limited numerical precision. In International Conference on Machine Learning, pp. 1737-1746,
2015.
Philipp Gysel. Ristretto: Hardware-oriented approximation of convolutional neural networks. arXiv
preprint arXiv:1605.06402, 2016.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-
nition. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp.
770-778, 2016.
Julien M. Hendrickx and Alex Olshevsky. Matrix p-Norms Are NP-Hard to Approximate If p 6=
1, 2, ∞. SIAM Journal on Matrix Analysis and Applications, 31(5):2802-2812, 2010.
Wassily Hoeffding. Probability Inequalities for Sums of Bounded Random Variables. Journal of the
American Statistical Association, 58(301):13-30, March 1963.
Judy Hoffman, Daniel A. Roberts, and Sho Yaida. Robust Learning with Jacobian Regularization.
arXiv:1908.02729 [cs, stat], August 2019. arXiv: 1908.02729.
Benoit Jacob, Skirmantas Kligys, Bo Chen, Menglong Zhu, Matthew Tang, Andrew Howard,
Hartwig Adam, and Dmitry Kalenichenko. Quantization and training of neural networks for effi-
cient integer-arithmetic-only inference. In The IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), June 2018.
Raghuraman Krishnamoorthi. Quantizing deep convolutional networks for efficient inference: A
whitepaper. arXiv preprint arXiv:1806.08342, 2018.
Ji Lin, Chuang Gan, and Song Han. Defensive quantization: When efficiency meets robustness.
arXiv preprint arXiv:1904.08444, 2019.
Christos Louizos, Matthias Reisser, Tijmen Blankevoort, Efstratios Gavves, and Max Welling. Re-
laxed quantization for discretized neural networks. arXiv preprint arXiv:1810.01875, 2018.
Eldad Meller, Alexander Finkelstein, Uri Almog, and Mark Grobman. Same, same but different
- recovering neural network quantization error through weight factorization. In International
Conference on Machine Learning, 2019.
Markus Nagel, Mart van Baalen, Tijmen Blankevoort, and Max Welling. Data-free quantization
through weight equalization and bias correction. arXiv preprint arXiv:1906.04721, 2019.
Mohammad Rastegari, Vicente Ordonez, Joseph Redmon, and Ali Farhadi. Xnor-net: Imagenet
classification using binary convolutional neural networks. In European Conference on Computer
Vision, pp. 525-542. Springer, 2016.
Hanie Sedghi, Vineet Gupta, and Philip M Long. The singular values of convolutional layers. arXiv
preprint arXiv:1805.10408, 2018.
Oran Shayer, Dan Levi, and Ethan Fetaya. Learning discrete weights using the local reparameteri-
zation trick. arXiv preprint arXiv:1710.07739, 2017.
Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image
recognition. arXiv preprint arXiv:1409.1556, 2014.
Penghang Yin, Shuai Zhang, Jiancheng Lyu, Stanley Osher, Yingyong Qi, and Jack Xin. Bina-
ryrelax: A relaxation approach for training deep neural networks with quantized weights. SIAM
Journal on Imaging Sciences, 11(4):2205-2223, 2018.
Ritchie Zhao, Yuwei Hu, Jordan Dotzel, Chris De Sa, and Zhiru Zhang. Improving neural network
quantization without retraining using outlier channel splitting. In International Conference on
Machine Learning, pp. 7543-7552, 2019.
10
Published as a conference paper at ICLR 2020
Empirical quantization perturbation distribution
1.0
0.8
0.6
0.4
0.2
0.0
Figure 6: Quantization noise is uniformly distributed. In this plot we show the quantization noise on each
individual weight in an ImageNet trained ResNet18 model. The noise is scaled by the width of the quantization
bin for each weight quantizer. This plot shows that quantization noise is uniformly distributed between —δ∕2
and δ∕2.
A Robustness analysis for quantization perturbations
In this section, we address two questions in more details, first regarding regularization of the `2 -norm
of gradient and second regarding non-uniform quantization schemes.
We argued above that regularizing the '2-norm of gradient cannot achieve the same level of ro-
bustness as regularization of the 'ι-norm of gradient. We provide here another, more theoretical,
argument. The following inequality shows how the '2-norm of gradient controls the first-order per-
turbation:
h∆, Vf(w)i ≤ ∣∣∆∣∣2 ∣∣Vf(w)k2.
This is a simple Cauchy-Shwartz inequality. Therefore, if the '2-norm of the gradient is inversely
proportional to the power of the perturbation, the first-order term is adequately controlled. However,
using a theoretical argument, we show that the power of the '∞-bounded perturbation can blow up
with the dimension as a vector ∆ in Rn with k∆k∞ = δ can reach an '2-norm of approximately
√nδ. In other words, the length of the quantization noise behaves with high probability as Θ(√n),
which implies that the the '2-norm of the gradient should be as small as θ(l∕√n).
We show that this can indeed occur with high probability for any random quantization noise with
the bounded support. Note that for symmetric uniform quantization schemes, quantization noise
can be approximated well by a uniform distribution over [-δ∕2,δ∕2] where δ is the width of the
quantization bin. See Figures 6 for the empirical distribution of quantization noise on the weights of
a trained network. Our argument, however, works for any distribution supported over [-δ∕2, δ∕2],
and, therefore, it includes asymmetric quantization schemes over a uniform quantization bin.
Consider a vector x = (x1, . . . , xn)T ∈ Rn with entries xi randomly and independently drawn
from a distribution supported on [-δ∕2,δ∕2]. We would like to show that |罔[is well concentrated
around its expected values. To do that we are going to write down the above norm as the sum of
independent zero-mean random variables. See that:
Besides, note that χ2 ∈ [0, δ2∕4]. Therefore χ2 一 δ2∕12 is a zero-mean random variable that lies
in the interval [-δ2∕l2, δ2∕6]. We can now use Hoeffding,s inequality. To be self-contained, we
include the theorem below.
Theorem A.1 (Hoeffding’s inequality, (Hoeffding, 1963)). Let X1, . . . , Xn be a sequence of in-
dependent zero-mean random variables such that Xi is almost surely supported on [ai , bi] for
11
Published as a conference paper at ICLR 2020
i ∈ {1, . . . , n}. Then, for all t > 0, it holds that
X=n1Xi≥t
≤ exp
2t2
P=ι(bi - ai)
P	Xi=n1Xi
≥t
≤ 2 exp
t2
∑n=ι(bi — ai)2
(4)
(5)
P
Applying Theorem A.1 to our setting, we obtain:
PQkxk2 - nδ2∕12∣ ≥ t) ≤ 2eχp (-n(t2t∕4)2
So with probability 1 - , we have:
nδ4	1/2
∣kxk2 -nδ2∕12∣ ≤ (~32lo虱2∕e)).
Therefore, if the quantization noise ∆ has entries randomly drawn from a distribution over
-δ∕2, δ∕2], then with probability 1 - G the squared '2-norm of ∆, i.e., k∆∣∣2, lies in the interval
嗜 -nδnδ4 log(2∕e),嗜 + ʌ/nδ4 log(2∕e) . In other words, the length of the vector behaves
with high probability as Θ(√n). This result holds for any quantization noise with bounded support.
If the quantization bins are non-uniformly chosen, and if the weights can take arbitrarily large val-
ues, the quantization noise is no-longer bounded in general. As long as the quantization noise has
a Gaussian tail, i.e., it is a subgaussian random variable, one can use Hoeffding’s inequality for
subgaussian random variables to show a similar concentration result as above. The power of the
perturbation will, therefore, behave with Θ(√n), and the '2-norm of the gradient cannot effectively
control the gradient. Note that nonuniform quantization schemes are not commonly used for hard-
ware implementations, hence, our focus on uniform cases. Besides, the validity of this assumption
about nonuniform quantization noise requires further investigation, which is relegated to our future
works.
B Second-Order Perturbation Analysis
We start by writing the approximation of f (∙) up to the second-order term:
f(w + ∆) = f (w) + h∆, Nf(W) + 1 ∆τV2f (w)∆ + R3.
The worst-case second-order term under '∞-bounded perturbations is given by
maχ ∆T V2f (w)∆.
knk∞≤δ
The above value is difficult to quantify for general case. We demonstrate this difficulty by consider-
ing some special cases.
Let’s start with convex functions, for which the Hessian V2f(w)is positive semi-definite. In this
case, the Hessian matrix admits a square root, and the second-order term can be written as:
∆τV2f(w)∆ = ∆τ(V2f(w))1/2(V2f(W)A/2a = ∣kv2f(w)^2∆∣∣2.
Therefore the worst-case analysis of the second-term amounts to
maχ ∆TV2f(W)∆ = maχ ||(V2f(w))1/2A『.
knk∞≤δ	knk∞≤δ	2
The last term is the mixed ∞ → 2-norm of (V2f (W))1/2. As a reminder, thep → q-matrix norm is
defined as
kAkp→q := kmaχι kAkq = ∣maXι hy, Axi =: UAIq*→a
P—	∣∣ykq*≤ι
12
Published as a conference paper at ICLR 2020
wherep*,q* denote the dual norms of P and q, i.e. satisfying 1/p + 1/p* = 1/q + 1/q* = 1.
The worst case second-order perturbation is given by:
knm∞x≤δ N v2f(W)A=δlkv2f(W))1TI∞→2.
Unfortunately the ∞ → 2-norm is known to be NP-hard ((Hendrickx & Olshevsky, 2010); see
BhattiProlU et al. (2018) for a more recent study). As a matter of fact, if f (∙) is positive semi-
definite, and hence the function is convex, the problem above corresponds to maximization of convex
functions, which is difficult as well.
For a general Hessian, the problem is still difficult to solve. First note that:
max ∆TV2f (w)∆ = max Tr (V2f(w)∆∆T).
knk∞≤δ	knk∞≤δ
We can therefore replace ∆∆T with a positive semi-defintite matrix of rank 1 denoted by N. The
worst case second-order perturbation can be obtained by solving the following problem:
max Tr (V2f (w)N)	(6)
N ∈Rn×n
subject to N 0
Nii ≤ δ2 for i ∈ {1, . . . , n}
rank(N) = 1.
The last constraint, namely the rank constraint, is a discrete constraint. The optimization problem
above is therefore NP-hard to solve. To sum up, the worst case second-order perturbation cannot be
efficiently computed, which poses difficulty for controlling the second-order robustness.
There are, however, approximations available in the literature. A common approximation, which is
widely known for the Max-Cut and community detection problems, consists of dropping the rank-
constraint from the above optimization problem to get the following semi-definite program:
max Tr (V2f (w)N)	(7)
N ∈Rn×n
subject to N 0
Nii ≤ δ2 for i ∈ {1, . . . , n}
Unfortunately this approximation, apart from being costly to solve for large n, does not provide a
regularization parameter that can be included in the training of the model.
It is not clear how we can control the second-order term through a tractable term.
C Defensive Quantization imposes a 4th power constraint on
SINGULAR VALUES
From basic linear algebra we have that
kWk22=Tr(WTW)=Xσi2(W),
i
i.e., the Frobenius norm is equal to sum of the squared singular values of W. From this we can
conclude that the regularization term kW T W - I k22 introduced by Lin et al. (2019) thus equals
kWTW -Ik22=Xσi2(WTW -I)=Xσi2(W)-12,
ii
and therefore imposes a 4th power regularization term on the singular values of W . A softer regu-
larization can be introduced by regularizing Tr(WTW - I) instead.
13
Published as a conference paper at ICLR 2020
D Gradient-penalty progression in non-regularized networks
Optimizing our regularization penalty requires computing gradients of the gradients. While this
is easily done by double-backpropagation in modern software frameworks it introduces overhead
(as discussed in Section 4.1) and makes training slower. However, as the training progresses, the
gradients in unregularized networks tend to become smaller as well, which is inline with our reg-
ularization objective. It is therefore not necessary to apply the regularization from the beginning
of training. In Figure 7 we show examples of how the regularization objective naturally decreases
during training. We also show how turning the regularization on in the final epochs where the regu-
larization objective is oscillating can push the loss further down towards zero.
(a) VGG-like
Regularization not applied
1200
Regularization applied from step 30K
1200
0 5K 10K	15K	20K	25K	30K	35K
Training Step
XneUed m U.&PB1CD
0 5K 10K	15K	20K	25K	30K	35K
Training Step
Xlleuf 三UgPeJS
(b) ResNet-18
Figure 7:	The gradients in unregularized networks tend to become smaller as training progresses. This means
for large parts of the training there is no need to apply the regularization. The plots on the left show the
regularization penalty in unregularized networks. The plots on the right show how turning on the regularization
in the last 15 epochs of the training can push the regularization loss even further down.
E	'∞-BOUNDED PERTURBATIONS INCLUDE OTHER BOUNDED-NORM
PERTURBATIONS
Figure 8	show that the '∞-bounded perturbations include all other bounded-norm perturbations.
14
Published as a conference paper at ICLR 2020
Figure 8: '∞-bounded vectors include other bounded- norm vectors. In this plot We show that the pertur-
bations With bounded 'p-norm are a subset of '∞-bounded perturbations. For P = 1, 2, ∞, we plot the vectors
with kxkp = 1.
15