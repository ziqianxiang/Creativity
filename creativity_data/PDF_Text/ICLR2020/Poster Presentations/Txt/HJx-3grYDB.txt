Published as a conference paper at ICLR 2020
Learning Nearly Decomposable Value Func-
tions Via Communication Minimization
Tonghan Wang1； Jianhao Wang1 *, Chongyi Zheng2 & Chongjie Zhang1
1 Institute for Interdisciplinary Information Sciences, Tsinghua University, Beijing, China
2Turing AI Institute of Nanjing, Nanjing, China
wangth18@mails.tsinghua.edu.cn, wjh720.eric@gmail.com
chongyeezheng@gmail.com, chongjie@tsinghua.edu.cn
Ab stract
Reinforcement learning encounters major challenges in multi-agent settings, such
as scalability and non-stationarity. Recently, value function factorization learning
emerges as a promising way to address these challenges in collaborative multi-
agent systems. However, existing methods have been focusing on learning fully
decentralized value functions, which are not efficient for tasks requiring com-
munication. To address this limitation, this paper presents a novel framework
for learning nearly decomposable Q-functions (NDQ) via communication mini-
mization, with which agents act on their own most of the time but occasionally
send messages to other agents in order for effective coordination. This framework
hybridizes value function factorization learning and communication learning by
introducing two information-theoretic regularizers. These regularizers are maxi-
mizing mutual information between agents’ action selection and communication
messages while minimizing the entropy of messages between agents. We show
how to optimize these regularizers in a way that is easily integrated with existing
value function factorization methods such as QMIX. Finally, we demonstrate that,
on the StarCraft unit micromanagement benchmark, our framework significantly
outperforms baseline methods and allows us to cut off more than 80% of commu-
nication without sacrificing the performance. The videos of our experiments are
available at https://sites.google.com/view/ndq.
1	Introduction
Cooperative multi-agent reinforcement learning (MARL) are finding applications in many real-
world domains, such as autonomous vehicle teams (Cao et al., 2012), intelligent warehouse sys-
tems (NoWe et al., 2012), and sensor networks (Zhang & Lesser, 2011). To help address these
problems, recent years have made a great progress in MARL methods (Lowe et al., 2017; Foer-
ster et al., 2018; Rashid et al., 2018; Jaques et al., 2019). Among these successes, the paradigm of
centralized training with decentralized execution has attracted much attention for its scalability and
ability to deal with non-stationarity.
Value function decomposition methods provide a promising way to exploit such paradigm. They
learn a decentralized Q function for each agent and use a mixing network to combine these local Q
values into a global action value. In previous works, VDN (Sunehag et al., 2018), QMIX (Rashid
et al., 2018), and QTRAN (Son et al., 2019) have progressively enlarged the family of functions
that can be represented by the mixing network. Despite their increasing ability in terms of value
factorization representation, existing methods have been focusing on learning full decomposition,
where each agent acts upon its local observations. However, many multi-agent tasks in the real world
are not fully decomposable - agents sometimes require information from other agents in order to
effectively coordinate their behaviors. This is because partial observability and stochasticity in a
multi-agent environment can exacerbate an agent’s uncertainty of other agents’ states and actions
during decentralized execution, which may result in catastrophic miscoordination.
* Equal Contribution.
1
Published as a conference paper at ICLR 2020
To address this limitation, this paper presents a scalable multi-agent learning framework for learning
nearly decomposable Q-functions (NDQ) via communication minimization, with which agents act
on their own most of the time but occasionally send messages to other agents in order for effective
coordination. This framework hybridizes value function factorization learning and communication
learning by introducing an information-theoretic regularizer for maximizing mutual information
between agents’ action selection and communication messages. Messages are parameterized in a
stochastic embedding space. To optimize communication, we introduce an additional information-
theoretic regularizer to minimize the entropy of messages between agents. With these two regular-
izers, our framework implicitly learn when, what, and with whom to communicate and also ensure
communication to be both expressive (i.e., effectively reducing the uncertainty of agents’ action-
value functions) and succinct (i.e., only sending useful and necessary information). To optimize
these regularizers, we derive a variational lower bound objective, which is easily integrated with
existing value function factorization methods such as QMIX.
We demonstrate the effectiveness of our learning framework on StarCraft II1 unit micromanage-
ment benchmark used in Foerster et al. (2017; 2018); Rashid et al. (2018); Samvelyan et al. (2019).
Empirical results show that NDQ significantly outperforms baseline methods and allows to cut off
more than 80% communication without sacrificing the performance. We also observe that agents
can effectively learn to coordinate their actions at the cost of sending one or two bits of messages
even in complex StarCraft II tasks.
2	Background
In our work, we consider a fully cooperative multi-agent task that can be modelled by a Dec-
POMDP (Oliehoek et al., 2016) G =(I, S, A, P, R, Ω, O, n, γ∖, where I ≡ {1,2,..., n} is the
finite set of agents. s ∈ S is the true state of the environment from which each agent i draws an
individual partial observation o% ∈ Ω according to the observation function O(s,i). Each agent has
an action-observation history Ti ∈ T ≡ (Ω X A)*. At each timestep, each agent i selects an action
ai ∈ A, forming a joint action a ∈ An, resulting in a shared reward r = R(s, a) for each agent and
the next state s0 according to the transition function P(s0|s, a). The joint policy π induces a joint
action-value function: Qnot(T, a) = Es0g,a0,∞ [P∞=ο γtrt∣sο=s, aο=a, ∏], where T is the joint
action-observation history and γ ∈ [0, 1) is the discount factor.
Learning the optimal action-value function encounters challenges in multi-agent settings. On the
one hand, to properly coordinate actions of agents, learning a centralized action-value function Qtot
seems a good choice. However, such a function is difficult to learn when the number of agents is
large. On the other hand, directly learning decentralized action-value function Qi for each agent
alleviates the scalability problem (Tan, 1993; Tampuu et al., 2017). Nevertheless, such independent
learning method largely neglects interactions among agents, which often results in miscoordination
and inferior performance.
In between, value function factorization method provides a promising way to attenuate such dilemma
by representing Qtot as a mixing of decentralized Qi conditioned on local information. Such method
has shown their effectiveness on complex task (Samvelyan et al., 2019).
However, current value function factorization methods have been mainly focusing on full decompo-
sition. Such decomposition reduces the complexity of learning Qtot by first learning independent Qi
and putting the burden of coordinating actions on the mixing networks whose input is all Qi ’s and
output is Qtot. For many tasks with partial observability and stochastic dynamics, mixing networks
are not sufficient to learn coordinated actions, regardless of how powerful its representation ability
is. The reason is that full decomposition cuts off all dependencies among decentralized action-value
functions and agents will be uncertain about states and actions of other agents. Such uncertainty will
increase as time goes by and can result in severe miscoordination and arbitrarily worse performance
during decentralized execution.
1StarCraft and StarCraft II are trademarks of Blizzard EntertainmentTM.
2
Published as a conference paper at ICLR 2020
Qtot
Figure 1: Schematics of our approach. The message encoder generates an embedding distribution
that is sampled and concatenated with the current local history to serve as an input to the local
action-value function. Local action values are fed into a mixing network to to get an estimation of
the global action value.
3	Methodology
In this section, we propose to learn nearly decomposable Q-functions (NDQ) via communication
minimization, anew framework to overcome the miscoordination issue of full factorization methods.
In our learning framework (Fig. 1), individual action-value functions condition on local action-
observation history and, at certain timesteps, messages received from a few other agents. Messages
from agent i to agent j are drawn from a multivariate Gaussian distribution whose parameters are
given by an encoder fm (τi , j ; θc), where τi is the local observation-action history of agent i, and
θc are parameters of the encoder fm. Formally, message mj 〜 N(fm(τi,j; θc), I), where I is
an identity matrix. Here we use an identity covariance matrix and the reasons will be discussed
in the next section. m(-i)j is used to denote the messages sent to j from agents other than i. We
learn a nearly decomposable structure via learning minimized communication. We thus expect the
communication to have the following properties:
i)	Expressiveness: The message passed to one agent should effectively reduce the uncertainty in its
action-value function.
ii)	Succinctness: Agents are expected to send messages as short as possible to the agents who need
it and only when necessary.
To learn such a communicating strategy, we draw inspiration from variational inference for its proven
ability in learning structure from data and endow a stochastic latent message space, which we also
refer to as ”message embedding”. We impose constraints, which will be discussed in detail in the
next section, on the latent message embedding to enable an agent to decide locally which bits in a
message should be sent according to their utility in terms of helping other agents make decisions.
Agent j will receive an input message mijn that has been selectively cut, on which it conditions the
local action-value function Qj (τj , aj , mijn). All the individual Q values are then fed into a mixing
network such as that used by QMIX (Rashid et al., 2018).
Apart from the constraints on the message embedding, all the components (the individual action-
value functions, the message encoder, and the mixing network) are trained in an end-to-end manner
by minimizing the TD loss. Thus, our overall objective is to minimize
L(θ) = LTD(θ) + λLc(θc),	(1)
where LTD(θ) = [r + γ maxa0 Qtot(τ0, a0; θ-) - Qtot (τ, a; θ)]2 (θ- are the parameters of a
periodically updated target network as in DQN) is the TD loss, θ are all parameters in the model,
3
Published as a conference paper at ICLR 2020
and λ is a weighting term. We will discuss how to define and optimize Lc(θc) to regularize the
message embedding in the next section.
3.1 Minimized Communication Objective and Variational Bound
Introducing latent variables facilitates the representation of the message, but it does not mean that
the messages can reduce uncertainty in the action-value functions of other agents. To make mes-
sage expressive, we maximize the mutual information between message and agent’s action selection.
Formally, we maximize Iθc (Aj; Mij |Tj, M(-i)j) where Aj is agent j’s action selection, Tj is the
random variable of the local action-observation history of agent j, Mij and M(-i)j are random vari-
ables of mij and m(-i)j. However, if this is the only objective, the encoder can easily learn to cheat
by giving messages under different histories representations in different regions in the latent space,
rendering cutting off useless messages difficult. A natural constraint to avoid such representations
is to minimize the entropy of the messages. Therefore, our objective for optimizing communication
of agent i is to maximize:
n
Jc(θc) = X [Iθc(Aj； Mij∖Tj,M(-i)j) - βHθc(Mij)],
j=1
(2)
where β is a scaling factor trading expressiveness and succinctness.
This objective is appealing because it agrees exactly with the desiderata that we impose on the
message embedding. However, optimizing this objective needs extra efforts because computation
involving mutual information is intractable. By introducing a variational approximator, a popular
technique from variational toolkit (Alemi et al., 2017), we can derive a lower bound for the mutual
information term in Eq. 2 (a detailed derivation can be found in Appendix A):
Iθc (Aj ； Mij |Tj ,M(-i)j)
≥ ET〜D,Min〜fm(Tjθc) [-CE [p(Aj∣T)kqξ(Aj∣Tj,Mjn)]],
(3)
where T = hT1, T2, . . . , Tni is the joint local history sampled from the replay buffer D,
qξ(Aj∣Tj, Mjn) is the variational posterior estimator with parameters ξ, and CE is the cross en-
tropy operator. We share ξ among agents to accelerate learning.
Next we discuss how to minimize the term Hθc (Mij). Directly minimizing this can cause the
variances of the Gaussian distributions to collapse to 0. To deal with this numeric issue, we use the
unit covariance matrix and try to minimize H(Mij) - H(Mij|Ti) instead. This is equivalent to
minimizing H(Mij) because H(Mij|Ti) is the entropy of a multivariate Gaussian random variable
and thus is a constant log(det(2πeΣ))∕2, where Σ is a unit matrix in our formulation). Then we
have:
H(Mij) - H(Mij |Ti) = /p(mj∣τi)p(τi)log Ppmijl? dmjdτi.
(4)
We use a similar technique as for the mutual information term by introducing an distribution r(mij )
to get a upper bound of Eq. 4:
H(Mij) - H(MijITi) ≤ /p(mj∣τi)p(τi)logprmj1 Ti)dmjdτi
(5)
=ETi〜D [DκL(p(Mij|Ti)kr(Mij))].
This bound holds for any distribution r(Mij). To facilitate cutting off messages, we use unit Gaus-
sian distribution N(0, I). Combining Eq. 3 and 5, we get a tractable variational lower bound of our
objective in Eq. 2:
Jc(θc) ≥	Eτ",Min 〜fm(Tjθc) [-CE [p(Aj ∣T)kqξ (Aj |Tj ,Mjn')] - βDκL(p(Mij ∣Ti)kr(Mij))].
(6)
We optimize this bound to generate an expressive and succinct message embedding. Specifically,
we minimize:
Lc(θc)= Eτ",Min〜fm(T,j；%) [CE [p(Aj∣T)kqξ(Aj|Tj,M；n)] + βDκL(p(Mij ∣Ti)kr(Mij))].
(7)
4
Published as a conference paper at ICLR 2020
Intuitively, the first term, which we call the expressiveness loss, ensures that communication aims
to reduce the uncertainty in action-value functions of other agents. The second term, called the
succinctness loss, forces messages to get close to the unit Gaussian distribution. Since we set the
covariances of the latent message variables to the unit matrix, this term actually pushes the means
of the message distributions to the origin of the latent space. Using these two losses leads to an
embedding space where useless messages distribute near the origin, while messages that contain
important information for the decision-making processes of other agents occupy other spaces.
Note that the loss shown in Eq. 7 is used to update the parameters in the message encoder. In
the meantime, all components (the individual action-value functions, the message encoder, and the
mixing network) are trained in an end-to-end manner. Thus, the message encoder is updated by two
gradients: the gradient induced by Lc(θc) and the gradient associated with the TD loss LTD (θ).
3.2 Cutting Off Messages
Our objective pushes messages which can not reduce the uncertainties in action-value functions of
other agents close to the origin of the latent message space. This naturally gives us a hint on how to
drop meaningless messages - We can order the message distributions according to their means and
drop accordingly. Note that since we use a unit covariance matrix for the latent message distribution,
bits in a message are independent. Thus, We can make decisions in a bit-by-bit fashion and send
messages With various lengths. In this Way, our method learns not only When and Who (agent i does
not communicate With agent j When all bits of mij are dropped) to communicate, but also What to
communicate (hoW many bits are sent and their values). More details are discussed in Appendix B.
Our frameWork adopts the centralized training With decentralized execution paradigm. During cen-
tralized training, We assume the learning algorithm has access to all agents’ individual observation-
action histories and the global state s. During execution, agents communicate and act in a decentral-
ized fashion based on the learned message encoder and action-value functions.
4 Related Works
Deep multi-agent reinforcement learning has Witnessed vigorous progress in recent years.
COMA (Foerster et al., 2018), MADDPG (LoWe et al., 2017), and PR2 (Wen et al., 2019) explores
multi-agent policy gradients and respectively address the problem of credit assignment, learning
in mixed environments and recursive reasoning. Another line of research focuses on value-based
multi-agent RL, among Which value-function factorization is the most popular method. Three rep-
resentative examples: VDN (Sunehag et al., 2018), QMIX (Rashid et al., 2018), and QTRAN (Son
et al., 2019) gradually increase the representation ability of the mixing netWork. In particular,
QMIX (Rashid et al., 2018) stands out as a scalable and robust algorithm and achieves state-of-
the-art results on StarCraft unit micromanagement benchmark (Samvelyan et al., 2019).
Communication is a hot topic in multi-agent reinforcement learning. End-to-end learning With dif-
ferentiable communication channel is a popular approach noW. Sukhbaatar et al. (2016); Hoshen
(2017); Jiang & Lu (2018); Singh et al. (2019); Das et al. (2019) focus on learning decentralized
communication protocol and address the problem of When and Who to communicate. Foerster et al.
(2016); Das et al. (2017); Lazaridou et al. (2017); Mordatch & Abbeel (2018) study the emergence
of natural language in the context of multi-agent learning. IC3Net (Singh et al., 2019) learns gate
to control the agents to only communicate With their teammates in mixed multi-agent environment.
Zhang & Lesser (2013); Kim et al. (2019) study action coordination under limited communication
channel and thus are related to our Works. The difference lies in that they do not explicitly minimize
communication. Social influence (Jaques et al., 2019) and InfoBot (Goyal et al., 2019) penalize
message that has no influence on policies of other agents.
Work that is most related to this paper is TarMAC (Das et al., 2019), Where attention mechanism is
used to differentiate the importance of incoming messages. In comparison, We use variation infer-
ence to decide the content of messages and Whether a message should be sent under the guidance of
global reWard signals. We compare our method With TarMAC and a baseline combining TarMAC
and QMIX in our experiments. Related Works on the task of StarCraft II unit micromanagement are
discussed in Appendix C.2.
5
Published as a conference paper at ICLR 2020
Sensor 1	Sensor2	SenSor3
(a) Task sensor
(b) Performance comparison
Message Cut Rate %
(c) Performance vs message drop
rate
Figure 2:	(a) Task sensor; (b) Performance comparison on sensor; (c) Performance comparison
when different percentages of messages are dropped. We measure the drop rate of our method in
two ways: count by the number of messages (NDQ) or count by the number of bits (NDQ (bits)).
QMIX (5M) is the performance of QMIX after training for 5 million time steps.
(a) Target 2 present, β=1
Probab 三 ty
(b) Target 2 present, β=10-3
(c) Target 2 present, β=10-5
PrObab 三 ty
(d) Target 2 absent, β=1
PrObab 三 ty
(e) Target 2 absent, β=10-3
PrObabi=ty
(f) Target 2 absent, β=10-5
Figure 3:	Message distributions learned by our method on sensor under different values of β. (Mes-
sages are cut by bit, if μ < 2.0). A mean of 0 means that the corresponding bit is below the cutting
threshold and is not sent. When β = 10-3, NDQ learns the minimized communication strategy that
is effective.
5	Experimental Results
In this section, we show our experiments to answer the following questions: (i) Is the miscoordina-
tion problem of full value function factorization methods widespread? (ii) Can our method learn the
minimized communication protocol required by a task? (iii) Can the learned message distributions
reduce uncertainties in value functions of other agents? (iv) How does our method differ from com-
munication with attention mechanism? (v) How does β influence the communication protocol? We
will first show three simple examples to clarify our idea from different perspectives and then provide
performance analysis on StarCraftII unit micromanagement benchmark. For evaluation, all exper-
iments are carried out with 5 random seeds and results are shown with a 95% confidence interval.
Details of the NDQ network architecture are given in Appendix B.2. Videos of our experiments on
StarCraft II are available online2.
2https://sites.google.com/view/ndq
6
Published as a conference paper at ICLR 2020
(a) Task hallway
IOO
80
50
40
20
140
120
0.0	2：5	5：0	7：5 10.0 12.5 15.0 17.5 20.0
Steps (M)
(b) Performance comparison
0	20	40	50 SO
Message Cut Rate %
(C) Performance VS message drop rate
Figure 4: Results on hallway. (a, b) Task hallway and performance comparison. (c) Similar to
Fig. 2(c), we show performance comparison when different percentages of messages are dropped.
(a) t=1
(b) t=2
Figure 5: Message embedding representations learned by our method on hallway. A mean of 0
means that the corresponding bit is below the cutting threshold (μ=3) and is not sent.
We compare NDQ with the following baselines: (i) QMIX (Rashid et al., 2018); (ii) TarMAC (Das
et al., 2019). QMIX and TarMAC are state-of-the-art full value function factorization and attentional
communication methods, respectively. (iii) QMIX+TarMAC. We introduce the attentional commu-
nication mechanism into the value function factorization paradigm by integrating the communication
component of TarMAC into QMIX.
5.1	Didactic Examples
We first demonstrate our idea on three didactic examples: sensor, hallway, and independent search.
Sensor network is a frequently used testbed in multi-agent learning field (Kumar et al., 2011; Zhang
& Lesser, 2011). We use a 3-chain sensor configuration in the task sensor (Fig. 2(a)). Each sensor
is controlled by one agent, and they are rewarded for successfully locating targets, which requires
two sensors to scan the same area simultaneously when the target appears. At each timestep, target 1
appears in area 1 with possibility 1, and locating it induces a team reward of 20; target 2 appears with
probability 0.5 in area 2, and agents are rewarded 30 for locating it. Agents can observe whether a
target is present in nearby areas and need to choose one of the five actions: scanning north, east,
south, west, and noop. Every scan induces a cost of -5.
In the optimal policy, when target 2 appears, sensor 1 should turn itself off while sensors 2 and 3
are expected to scan area 2 to get the reward. And when target 2 is absent, sensors 1 and 2 need to
cooperatively scan area 1 while sensor 3 takes noop.
Sensor is representative ofa class of tasks where the uncertainties about the true states cause policies
learned by full value function factorization method to be sub-optimal - sensor 1 has to know whether
the target is present in area 2 to make a decision. However, the mixing network of QMIX cannot
provide such information. As a result, QMIX converges to a sub-optimal policy, which gets a team
reward of 12.5 a step on average (see Fig. 2(b)).
7
Published as a conference paper at ICLR 2020
(a) 3b_vs_1h1m	(b) 3s_vs_5z	(C) 1o2r_vs_4r
(d) 5z_vs_1ul
(e) 1o10b_vs_1r
(f) MMM
Figure 6: Snapshots of the StarCraft II sCenarios that we Consider.
We are partiCularly interested in whether our method Can learn the minimized CommuniCation strat-
egy. Fig. 3 shows the latent message spaCe learned by NDQ. When β = 10-3, agent 3 learns to
send a bit to tell agent 1 whether target 2 appears. In the meantime, the latent message distribution
between any other pair of agents is Close to the standard Gaussian distribution and thus is dropped.
This result indiCates that NDQ has disCovered the minimized Conditional graph and Can explain why
our method Can still perform optimally when 80% of the messages are Cut off (Fig. 2(C)). When
β beComes too large (1.0), all the message bits are pushed below the Cutting threshold (Fig. 3(a)
and 3(d)). When β is too small (10-5), NDQ pays more attention on reduCing unCertainties in
Q-funCtions rather than Compressing messages. Correspondingly, both agent 3 and agent 2 send a
message to agent 1 (Fig. 3(C) and 3(f)), whiCh is a redundant CommuniCation strategy.
The seCond example, hallway (Fig. 4(a)), is a DeC-POMDP with two agents randomly starting at
states a1 to am and b1 to bn , respeCtively. Agents Can observe their position and Choose to move
left, move right, or keep still at eaCh timestep. Agents will win and get a reward of 10 if they arrive
at state g simultaneously. Otherwise, if any agent arrives at g earlier than the other, the team will
not be rewarded, and the next episode will begin. The horizon is set to max(m, n) + 10 to avoid an
infinite loop.
Hallway aims to show that the misCoordination problem of full faCtorization methods Can be severe
in multi-step sCenarios. We set m and n to 4 and show Comparison of performanCe in Fig. 4(b). The
misCoordination problem Causes QMIX to lose about half of the games. We are again partiCularly
interested in the message embedding representations learned by NDQ. We show an episode in Fig. 5.
Two agents begin at a4 and b3 , respeCtively. They first move left silently (t = 1 and t = 2) until
agent B arrives at b1 . On arriving b1 , it sends a bit whose value is 5.24 to A. After sending this
bit, B stays at b1 and sends this message repeatedly until it reCeives a bit from A indiCating that
A has arrived at a1 . They then move left together and win. This is the minimized CommuniCation
strategy. Taking advantage of this strategy, NDQ Can still win in 100% of episodes when 80% of the
CommuniCating bits are dropped (Fig. 4(C)).
The third task, independent search, aims to demonstrate that NDQ Can learn not to CommuniCate
in sCenarios where agents are independent. Task desCription and results analysis are deferred to
Appendix C.1.
5.2	Maximum Value Function Factorization in S tarCraft II
To demonstrate that the misCoordination problem of full deComposition methods is widespread in
multi-agent learning, we apply our method and baselines to the StarCraft II miCromanagement
benChmark introduCed by Samvelyan et al. (2019), whiCh is desCribed in detail in Appendix C.2.
We further inCrease the diffiCulty of aCtion Coordination by i) reduCing the sight range of agents
from 9 to 2; ii) introduCing Challenging maps with Complex terrain or highly random spawning po-
8
Published as a conference paper at ICLR 2020

NDQ (Ours)
QMIX
TarMAC
QMIX+TarMAC
60
40
3b vs Ihlm without message cut
20
%⅛ΦF
0	5	10	15	20
Steps (M)
5z vs Iul without message cut
100
%,υaκ⅛ΦF
80
60
40
20
----NDQ (Ours)
----QMIX
TarMAC
OMIX+TarMAC
3s vs 5z without message cut
0	5	10	15	20
Steps (M)
lo2r vs 4r without message cut
求 U-M ⅛ΦF
100
0	5	10	15	20
Steps (M)
NDQ (Ours)
QMIX
TarMAC
QMIX+TarMAC
4020
0	5	10	15	20
Steps (M)
Figure 7: Learning curves of
QMIX+TarMAC.
3b vs Ihlm with 80% message cut
lol0b_vs_lr without message cut
100
O Q 。 。
8 6 4 2
%⅛ΦF
MMM without message cut
O Q 。 。
8 6 4 2
求U-M ⅛ΦF
0	5	10	15	20	0	5	10	15	20
Steps (M)	Steps (M)
our method and baselines when no message is cut for NDQ and
NDQ (Ours)
---QMIX
QMIX+TarMAC
-0^0
“ 6 4 2
%EMJ.
0
0	5	10	15
Steps (M)
IOO
80
60
40
20
3s vs 5z with 80% message cut
%,υaκEM^,υ1-
求 U-M^,υ1-
lo2r vs 4r with 80% message cut
O Q 。 。
8 6 4 2
0	5	10	15	20
Steps (M)
5z vs Iul with 80% message cut
% EM^,υ1-
QMIX+TarMAC
MMM with 80% message cut
0	5	10	15	20
Steps (M)
IolOb vs Ir with 80% message cut
Figure 8: Performance of our method and QMIX+TarMAC when 80% of messages are cut off. We
also plot the learning curves of QMIX for comparison.
n□q (Ours)
0	5	10	15	20	0	5	10	15	20	0	5	10	15	20
Steps (M)	Steps (M)	Steps (M)
sitions for units. We test our method on the six maps shown in Fig. 6. Detailed descriptions of these
scenarios are provided in Appendix C.2.
We use the same hyper-parameter setting for NDQ on all maps: β is set to 10-5, λ is set to 0.1, and
the length of message mij is set to 3. For evaluation, we pause training every 100k environment
steps and run 48 testing episodes. Other hyper-parameters for NDQ are described in Appendix B.2.
5.2.1	Performance Comparison
We show the performance of our method and baselines when no message is cut in Fig. 7. The
superior performance of NDQ against QMIX demonstrates that the miscoordination problem of
full factorization methods is widespread, especially in scenarios with high stochasticity, such as
1o2r_vs_4r, 3b_vs_1h1m, and 1o10b_vs_1r. Notably, our method also outperforms the attentional
9
Published as a conference paper at ICLR 2020
%,υaκ⅛ΦF % ⅛ΦF
3s vs 5z with 100% message cut	lo2r vs 4r with 100% message cut
3b vs Ihlm with 100% message cut
100
80
60
40
20
0
%,υaκ⅛ΦF
80
60
40
20
IOO
Steps (M)
5z vs Iul with 100% message cut
%,υaκ⅛ΦF
NDQ (Ours)
QMIX
OMIX+TarMAC
O
0	5	10	15	20
Steps (M)
MMM with 100% message cut
Steps (M)
%,υaκ⅛ΦF % ⅛ΦF
Figure 9: Performance of our method and QMIX+TarMAC when 100% messages are cut off. We
also plot the learning curves of QMIX for comparison.
communication mechanism (QMIX+TarMAC) by a large margin. Since agents communicate in both
of these two methods and the same TD error is used, these results highlight the role of the constraints
that we impose on our message embedding. TarMAC struggles in all the scenarios. We believe that
this is because it does not deal with the issue of reward assignment.
5.2.2	Message Cut Off
To demonstrate that our method can learn nearly decomposable Q-functions in complex tasks, we
cut off 80% of messages according to the means of distributions when testing and show the results in
Fig. 8. The results indicate that we can omit more than 80% of communication without significantly
affecting performance. For comparison, we cut off messages in QMIX+TarMAC whose weights are
80% smallest and find that its performance drops significantly (Fig. 8). These results indicate that our
method is more robust in terms of message cutting off compared to the attentional communication
methods.
We further drop all the messages and show the developments of testing performance in Fig. 9. As
expected, the win rates of NDQ decrease dramatically, proving that the superiority of our method
when 80% of messages are dropped comes from expressive and succinct communication protocols.
6	Closing Remarks
In this paper, we presented a novel multi-agent learning framework within the paradigm of cen-
tralized training with decentralized execution. This framework fuses value function factorization
learning and communication learning and efficiently learns nearly decomposable value functions
for agents to act most of the time independently and communicate when it is necessary for coordi-
nation. We introduce two information-theoretical regularizers to minimize overall communication
while maximizing the message information for coordination. Empirical results in challenging Star-
Craft II tasks show that our method significantly outperforms baseline methods and allows us to
reduce communication by more than 80% without sacrificing the performance. We also observe that
nearly minimal messages (e.g., with one or two bits) are learned to communicate between agents in
order to ensure effective coordination.
10
Published as a conference paper at ICLR 2020
References
Alexander A Alemi, Ian Fischer, Joshua V Dillon, and Kevin Murphy. Deep variational information
bottleneck. In Proceedings of the International Conference on Learning Representations (ICLR),
2017.
Yongcan Cao, Wenwu Yu, Wei Ren, and Guanrong Chen. An overview of recent progress in the
study of distributed multi-agent coordination. IEEE Transactions on Industrial informatics, 9(1):
427-438, 2012.
Abhishek Das, SatWik Kottur, Jose MF Moura, Stefan Lee, and DhrUv Batra. Learning cooperative
visual dialog agents with deep reinforcement learning. In Proceedings of the IEEE International
Conference on Computer Vision, pp. 2951-2960, 2017.
Abhishek Das, TheoPhile Gervet, Joshua Romoff, Dhruv Batra, Devi Parikh, Mike Rabbat, and
Joelle Pineau. Tarmac: Targeted multi-agent communication. In International Conference on
Machine Learning, pp. 1538-1546, 2019.
Jakob Foerster, Ioannis Alexandros Assael, Nando de Freitas, and Shimon Whiteson. Learning to
communicate With deep multi-agent reinforcement learning. In Advances in Neural Information
Processing Systems, pp. 2137-2145, 2016.
Jakob Foerster, Nantas Nardelli, Gregory Farquhar, Triantafyllos Afouras, Philip HS Torr, Pushmeet
Kohli, and Shimon Whiteson. Stabilising experience replay for deep multi-agent reinforcement
learning. In Proceedings of the 34th International Conference on Machine Learning-Volume 70,
pp. 1146-1155. JMLR. org, 2017.
Jakob N Foerster, Gregory Farquhar, Triantafyllos Afouras, Nantas Nardelli, and Shimon Whiteson.
Counterfactual multi-agent policy gradients. In Thirty-Second AAAI Conference on Artificial
Intelligence, 2018.
Anirudh Goyal, Riashat Islam, Daniel Strouse, Zafarali Ahmed, MattheW Botvinick, Hugo
Larochelle, Sergey Levine, and Yoshua Bengio. Infobot: Transfer and exploration via the infor-
mation bottleneck. In Proceedings of the International Conference on Learning Representations
(ICLR), 2019.
Yedid Hoshen. Vain: Attentional multi-agent predictive modeling. In Advances in Neural Informa-
tion Processing Systems, pp. 2701-2711, 2017.
Natasha Jaques, Angeliki Lazaridou, EdWard Hughes, Caglar Gulcehre, Pedro Ortega, Dj Strouse,
Joel Z Leibo, and Nando De Freitas. Social influence as intrinsic motivation for multi-agent deep
reinforcement learning. In International Conference on Machine Learning, pp. 3040-3049, 2019.
Jiechuan Jiang and Zongqing Lu. Learning attentional communication for multi-agent cooperation.
In Advances in Neural Information Processing Systems, pp. 7254-7264, 2018.
DaeWoo Kim, SangWoo Moon, David Hostallero, Wan Ju Kang, Taeyoung Lee, KyunghWan Son,
and Yung Yi. Learning to schedule communication in multi-agent reinforcement learning. In
Proceedings of the International Conference on Learning Representations (ICLR), 2019.
Akshat Kumar, Shlomo Zilberstein, and Marc Toussaint. Scalable multiagent planning using prob-
abilistic inference. In Twenty-Second International Joint Conference on Artificial Intelligence,
2011.
Angeliki Lazaridou, Alexander Peysakhovich, and Marco Baroni. Multi-agent cooperation and the
emergence of (natural) language. In Proceedings of the International Conference on Learning
Representations (ICLR), 2017.
Ryan LoWe, Yi Wu, Aviv Tamar, Jean Harb, OpenAI Pieter Abbeel, and Igor Mordatch. Multi-agent
actor-critic for mixed cooperative-competitive environments. In Advances in Neural Information
Processing Systems, pp. 6379-6390, 2017.
Igor Mordatch and Pieter Abbeel. Emergence of grounded compositional language in multi-agent
populations. In Thirty-Second AAAI Conference on Artificial Intelligence, 2018.
11
Published as a conference paper at ICLR 2020
Ann Nowe, Peter Vrancx, and Yann-Michael De Hauwere. Game theory and multi-agent reinforce-
ment learning. In Reinforcement Learning, pp. 441-470. Springer, 2012.
Frans A Oliehoek, Christopher Amato, et al. A concise introduction to decentralized POMDPs,
volume 1. Springer, 2016.
Peng Peng, Ying Wen, Yaodong Yang, Quan Yuan, Zhenkun Tang, Haitao Long, and Jun Wang.
Multiagent bidirectionally-coordinated nets: Emergence of human-level coordination in learning
to play starcraft combat games. arXiv preprint arXiv:1703.10069, 2017.
Tabish Rashid, Mikayel Samvelyan, Christian Schroeder Witt, Gregory Farquhar, Jakob Foerster,
and Shimon Whiteson. Qmix: Monotonic value function factorisation for deep multi-agent rein-
forcement learning. In International Conference on Machine Learning, pp. 4292-4301, 2018.
Mikayel Samvelyan, Tabish Rashid, Christian Schroeder de Witt, Gregory Farquhar, Nantas
Nardelli, Tim GJ Rudner, Chia-Man Hung, Philip HS Torr, Jakob Foerster, and Shimon Whiteson.
The starcraft multi-agent challenge. arXiv preprint arXiv:1902.04043, 2019.
Amanpreet Singh, Tushar Jain, and Sainbayar Sukhbaatar. Learning when to communicate at scale
in multiagent cooperative and competitive tasks. In Proceedings of the International Conference
on Learning Representations (ICLR), 2019.
Kyunghwan Son, Daewoo Kim, Wan Ju Kang, David Earl Hostallero, and Yung Yi. Qtran: Learning
to factorize with transformation for cooperative multi-agent reinforcement learning. In Interna-
tional Conference on Machine Learning, pp. 5887-5896, 2019.
Sainbayar Sukhbaatar, Rob Fergus, et al. Learning multiagent communication with backpropaga-
tion. In Advances in Neural Information Processing Systems, pp. 2244-2252, 2016.
Peter Sunehag, Guy Lever, Audrunas Gruslys, Wojciech Marian Czarnecki, Vinicius Zambaldi, Max
Jaderberg, Marc Lanctot, Nicolas Sonnerat, Joel Z Leibo, Karl Tuyls, et al. Value-decomposition
networks for cooperative multi-agent learning based on team reward. In Proceedings of the 17th
International Conference on Autonomous Agents and MultiAgent Systems, pp. 2085-2087. Inter-
national Foundation for Autonomous Agents and Multiagent Systems, 2018.
Ardi Tampuu, Tambet Matiisen, Dorian Kodelja, Ilya Kuzovkin, Kristjan Korjus, Juhan Aru, Jaan
Aru, and Raul Vicente. Multiagent cooperation and competition with deep reinforcement learning.
PloS one, 12(4):e0172395, 2017.
Ming Tan. Multi-agent reinforcement learning: Independent vs. cooperative agents. In Proceedings
of the tenth international conference on machine learning, pp. 330-337, 1993.
Nicolas Usunier, Gabriel Synnaeve, Zeming Lin, and Soumith Chintala. Episodic exploration for
deep deterministic policies: An application to starcraft micromanagement tasks. In Proceedings
of the International Conference on Learning Representations (ICLR), 2017.
Ying Wen, Yaodong Yang, Rui Luo, Jun Wang, and Wei Pan. Probabilistic recursive reasoning for
multi-agent reinforcement learning. In Proceedings of the International Conference on Learning
Representations (ICLR), 2019.
Chongjie Zhang and Victor Lesser. Coordinated multi-agent reinforcement learning in networked
distributed pomdps. In Twenty-Fifth AAAI Conference on Artificial Intelligence, 2011.
Chongjie Zhang and Victor Lesser. Coordinating multi-agent reinforcement learning with limited
communication. In Proceedings of the 2013 international conference on Autonomous agents
and multi-agent systems, pp. 1101-1108. International Foundation for Autonomous Agents and
Multiagent Systems, 2013.
12
Published as a conference paper at ICLR 2020
Appendix
A	Variational B ound on Mutual Information
In order to enable messages to effectively reduce the uncertainties in action-value functions of other
agents, we propose to maximize the mutual information between Aj and Mij . We borrow ideas from
the variational inference literature and derive a lower bound of this mutual information regularizer.
Theorem 1. A lower bound of mutual information Iθc (Aj; Mij |Tj, M(-i)j) is
ET 〜D,Min 〜fm(Tjθc) [-CE [p(Aj∣T)kqg(Aj∣Tj,Mjn)]],	⑻
where Tj is the local action-observation history of agent j, and T = hT1, T2, . . . , Tni is the
joint local history sampled from the replay buffer D, qξ (Aj |Tj, Mjin) is the variational posterior
estimator with parameters ξ.
Proof.
Iθc (Aj ； Mij ∣Tj,M(-i)j) i i	in、、	P(aj,mi八τj,m(-i)j)	/ JJin =	p(aj ,τj ,mj ) log ——i				`daj dτj dmj J	J	p(a八τj,m(-i)j )p(mij∖τj ,m(-i)j)	J =Z Ppaa G ,mjn)ιog PpaajTTj mi)da. dτj dmjn, where p(aj∙ ∣τj, mjn) is determined by the message encoder fm and Markov Chain: P(aj |Tj, mijn) =	P(T-j,aj|Tj,mijn)dT-j =Jp(τ-j ∣Tj, mjn)p(aj ∣τ)dτ-j	(According to [aj∙ ⊥ mjn∣τ]) ∕p(τ )p(min∣τ )p(aj ∣τ) =		六——z-	dτ-j. P	P(Tj ,mjn) We introduce qξ(aj- ∣τj-, mjn) as a variational approximation to p(aj ∣τj-, mjn). Since DKL (P(aj |Tj, mijn)kqξ (aj |Tj, mijn) ≥ 0, we have P(aj |Tj, mijn) log P(aj |Tj, mijn)daj ≥ /P(aj∣τj∙, mjn) log qξ(aj |tj,mjn)daj. Thus, for the mutual information term:	(9) (10) (11) (12) (13) (14) (15) (16) (17) (18)
Iθc (Aj； Mij ∣Tj,M(-i)j) ≥/p(aj ,τj,mjn)ιog pξXjmm[) daj dτj dmjn = P(aj, Tj, mijn) log qξ (aj |Tj, mijn)daj dTj dmijn - ZP(aj,Tj,mijn)logP(aj|Tj,m(-i)j)dajdTjdmijn =/P(T)p(mjn∣τ)p(aj ∣τ, mjn)log qξ(aj∙ |tj, mjn)dajdτdmjn	(19) (20) (21) (22) (23)
13
Published as a conference paper at ICLR 2020
/p(τ)p(mjn∣τ)p(aj∣τ) log qξ(aj ∣τj,mjDdajdτdmjn
(24)
(According to [aj ⊥ mjn∣τ]) (25)
+ Hθc (Aj ∣Tj ,M(-i)j)	(26)
=ET 〜D,M∖fm(τjθc) ∕p(aj∣T)log qξ(aj |Tj Min )daj	(27)
+ Hθc (Aj∣Tj ,M(-i)j)	(28)
=ET〜D,M∖fm(τjθc) [-CE [p(Aj∣T)kqξ(Aj∣Tj,Mjn)]]	(29)
+ Hθc (Aj∣Tj ,M(-i)j).	(30)
Because Hθc (Aj |Tj, M(-i)j) ≥ 0, we get the lower bound in Theorem 1.
□
B	Implementation Details
B.1	Details of Message Dropping
In our methods, not only the number of messages but also the length of messages are minimized. In
other words, we send messages with varying lengths. However, messages are feed into an action-
value function approximator at the recipient side, which requires inputs to have the same length. To
solve this problem, we send masks indicating which bits are dropped along with the messages. To
save channel bandwidth, masks are regarded as binary numbers, so each of them only consumes a
negligible log-scale space compared to the length of messages. For the unsent bits, we fill in 0s
before feeding the messages into the local utility functions.
B.2	Network Architecture, Hyperparameters, and Infrastructure
We base our implementation on the PyMARL framework (Samvelyan et al., 2019) and use its default
network structure and hyper-parameter setting for QMIX. For the message encoder, we use a fully
connected network with one 64-dimensional hidden layer and ReLU activation. For the posterior
estimator qξ, we adopt a fully connected network with two 20-dimensional hidden layers with ReLU
activation. We train our models on NVIDIA RTX 2080Ti GPUs using experience sampled from 16
parallel environments. To benchmark NDQ, we train all algorithms for 20 million time steps on each
StarCraft II unit micromanagement task and use the default hyper-parameter settings for baselines.
C Experimental Results
C.1 Didactic example: independent search
In independent search, two agents are finding landmarks in two independent 5 × 5 rooms for 100
time steps (see Fig. 10). An agent is rewarded 1 when it is on the landmark in its room.
Independent search is an example where agents are totally independent. This task aims to demon-
strate that our method can learn not to communicate in independent scenarios. We show team per-
formance in Table 1. NDQ can achieve the optimal performance when agents do not communicate
with each other.
Table 1: The average team reward gained in an episode on the task independent-search.
	Ours	QMIX	TarMAC	TarMAC + QMIX
No message is cut	96.0	96.0	96.0	96.0
100% messages are cut	96.0	—	—	96.0
14
Published as a conference paper at ICLR 2020
Room 2
■
Agent 2
■
Target 2
Figure 10: Task Independent-search. Two agents are both reward- and transition-independent.
C.2 STARCRAFT II
StarCraft unit micromanagement has attracted lots of research interests for its high degree of control
complexity and environmental stochasticity. Usunier et al. (2017) and Peng et al. (2017) study this
problem from a centralized perspective. In order to facilitate decentralized control, we use the setup
introduced by Samvelyan et al. (2019).
We first describe the scenarios that we consider in detail. We consider combat scenarios where the
enemy units are controlled by StarCraft II built-in AI (difficulty level is set to medium), and each of
the ally units is controlled by a learning agent. The units of the two groups can be asymmetric, and
the initial placement is random. At each time step, each agent chooses one action from the discrete
action space consisting of the following actions: noop, move [direction], attack [enemy _id], and
stop. Under the control of these actions, agents move and attack in a continuous map. A global
reward that is equal to the total damage dealt on the enemy units is given at each timestep. Killing
each enemy unit and winning a combat induce extra bonuses of 10 and 200, respectively.
3b_vs_1h1m: 3 Banelings try to kill a HydraIiSk assisted by a Medivac. 3 Banelings together can
just blow up the Hydralisk. Therefore, they should not give the Hydralisk rest time during which
the Medivac can restore its health. Banelings have to attack at the same time to get the winning
reward. This scenario is designed to test whether our method can learn a communication protocol to
coordinate actions.
3s_vs_5z: 3 Stalkers encounter 5 Zealots on a map. Zealots can cause high damage but are much
slower so that Stalkers have to take advantage of a technique called kiting - Stalkers should alterna-
tively attack the Zealots and flee for a distance.
1o2r_vs_4r: An Overseer has found 4 Reapers. Its ally units, 2 Roaches, need to get there and kill
the Reapers to win. At the beginning of an episode, the Overseer and Reapers spawn at a random
point on the map while the Roaches are initialized at another random point. Given that only the
Overseer knows the position of the enemy, a learning algorithm has to learn to deliver this message
to the Roaches to effectively win the combat.
5z_vs_1ul: 5 Zealots try to kill a powerful Ultralisk. A sophisticated micro-trick demanding right
positioning and attack timing has to be learned to win.
MMM: Symmetric teams consisting of7 Marines, 2 Marauders, and 1 Medivac spawn at two fixed
points, and the enemy team is tasked to attack the ally team. To win the battle, agents have to learn
to communicate their health to the Medivac.
1o10b_vs_1r: In a map full of cliffs, an Overseer detects a Roach. The teammates of the Overseer, 10
Banelings, need to kill this Roach to get the winning reward. The Overseer and the Roach spawn at
a random point while the Banelings spawn randomly on the map. In the minimized communication
strategy, the Banelings can keep silent, and the Overseer needs to encode its position and send it to
the Banelings. We use this task to test the performance of our method in complex scenarios.
15