Published as a conference paper at ICLR 2020
Towards Better Understanding of Adaptive
Gradient Algorithms in Generative Adver-
sarial Nets
Mingrui Liu1 ∖Y0ussefMroueh2, Jerret Ross2, Wei Zhang2, Xiaodong Cui2, Payel Das2, Tianbao Yang1
1 Department of Computer Science, The University of Iowa, Iowa City, IA, 52242, USA
2 IBM T. J. Watson Research Center, Yorktown Heights, NY, 10598, USA
Ab stract
Adaptive gradient algorithms perform gradient-based updates using the history of
gradients and are ubiquitous in training deep neural networks. While adaptive
gradient methods theory is well understood for minimization problems, the under-
lying factors driving their empirical success in min-max problems such as GANs
remain unclear. In this paper, we aim at bridging this gap from both theoretical
and empirical perspectives. First, we analyze a variant of Optimistic Stochastic
Gradient (OSG) proposed in (Daskalakis et al., 2017) for solving a class of non-
convex non-concave min-max problem and establish O(-4) complexity for find-
ing -first-order stationary point, in which the algorithm only requires invoking
one stochastic first-order oracle while enjoying state-of-the-art iteration complex-
ity achieved by stochastic extragradient method by (Iusem et al., 2017). Then we
propose an adaptive variant of OSG named Optimistic Adagrad (OAdagrad) and
reveal an improved adaptive complexity O (e- 1-2α), where α characterizes the
growth rate of the cumulative stochastic gradient and 0 ≤ α ≤ 1/2. To the best of
our knowledge, this is the first work for establishing adaptive complexity in non-
convex non-concave min-max optimization. Empirically, our experiments show
that indeed adaptive gradient algorithms outperform their non-adaptive counter-
parts in GAN training. Moreover, this observation can be explained by the slow
growth rate of the cumulative stochastic gradient, as observed empirically.
1 Introduction
Adaptive gradient algorithms (Duchi et al., 2011; Tieleman & Hinton, 2012; Kingma & Ba, 2014;
Reddi et al., 2019) are very popular in training deep neural networks due to their computational
efficiency and minimal need for hyper-parameter tuning (Kingma & Ba, 2014). For example, Ada-
grad (Duchi et al., 2011) automatically adjusts the learning rate for each dimension of the model
parameter according to the information of history gradients, while its computational cost is almost
the same as Stochastic Gradient Descent (SGD). However, in supervised deep learning (for ex-
ample, image classification tasks using a deep convolutional neural network), there is not enough
evidence showing that adaptive gradient methods converge faster than its non-adaptive counterpart
(i.e., SGD) on benchmark datasets. For example, it is argued in (Wilson et al., 2017) that adaptive
gradient methods often find a solution with worse performance than SGD. Specifically, Wilson et al.
(2017) observed that Adagrad has slower convergence than SGD in terms of both training and testing
error, while using VGG (Simonyan & Zisserman, 2014) on CIFAR10 data.
GANs (Goodfellow et al., 2014) are a popular class of generative models. In a nutshell, they consist
of a generator and a discriminator, both of which are defined by deep neural networks. The gen-
erator and the discriminator are trained under an adversarial cost, corresponding to a non-convex
non-concave min-max problem. GANs are known to be notoriously difficult to train. In practice,
Adam (Kingma & Ba, 2014) is the defacto optimizer used for GAN training. The common op-
timization strategy is to alternatively update the discriminator and the generator (Arjovsky et al.,
* Correspondence to mingrui-liu@uiowa.edu
1
Published as a conference paper at ICLR 2020
2017; Gulrajani et al., 2017). Using Adam is important in GAN training, since replacing it with
non-adaptive methods (e.g. SGD) would significantly deteriorate the performance. This paper stud-
ies and attempts to answer the following question:
Why do adaptive gradient methods outperform their non-adaptive counterparts in GAN train-
ing?
We analyze a variant of Optimistic Stochastic Gradient (OSG) in (Daskalakis & Panageas, 2018)
and propose an adaptive variant named Optimistic Adagrad (OAdagrad) for solving a class of non-
convex non-concave min-max problems. Both of them are shown to enjoy state-of-the-art complex-
ities. We further prove that the convergence rate of OAdagrad to an -first-order stationary point
depends on the growth rate of the cumulative stochastic gradient. In our experiments, we observed
an interesting phenomenon while using adaptive gradient methods for training GANs: the cumula-
tive stochastic gradient grows at a slow rate. This observation is in line with the prediction of our
theory suggesting improved convergence rate for OAdagrad in GAN training, when the growth rate
of the cumulative stochastic gradient is slow.
Since GAN is a min-max optimization problem in nature, our problem of interest is to solve the
following stochastic optimization problem:
min maχ F(u, V)= Eξ〜D [f(u, v; ξ)],	(1)
u∈U v∈V
where U, V are closed and convex sets, F(u, v) is possibly non-convex in u and non-concave in v.
ξ is a random variable following an unknown distribution D. In GAN training, u, v represent the
parameters of generator and discriminator respectively.
The ideal goal for solving (1) is to find a saddle point (u*, v*) ∈ U × V such that F(u*, v) ≤
F(u*, v*) ≤ F(u, v*) for ∀u ∈ U,∀v ∈ V.
To achieve this goal, the typical assumption usually made is that the objective function is convex-
concave. When F(u, v) is convex in u and concave in v, non-asymptotic guarantee in terms of
the duality gap is well established by a series of work (Nemirovski & Yudin, 1978; Nemirovski,
2004; Nesterov, 2007; Nemirovski et al., 2009; Juditsky et al., 2011). However, when F(u, v) is
non-convex in u and non-concave in v, finding the saddle point is NP-hard in general. Instead, we
focus on finding the first-order stationary point provided that the objective function is smooth. I.e.
We aim to find (u, v) ∈ U × V such that VuF(u, v) = 0, RvF(u, v) = 0. Note that this is a
necessary condition for finding the (local) saddle point.
Related Work. Several Works designed iterative first-order deterministic (Dang & Lan, 2015)
and stochastic (Iusem et al., 2017; Lin et al., 2018) algorithms for achieving the -first-order sta-
tionary point With non-asymptotic guarantee. The goal is to find x such that kT (x)k ≤ or
E [kT (x)k] ≤ , Where the first-order oracle is defined as T(x) = [Vu F (u, v), -Vv F (u, v)]>
With x = (u, v) and the first-order stochastic oracle is the noisy observation of T, i.e. T (x; ξ) =
[VuF(u, v; ξ), -Vv F (u, v; ξ)]>. For instance, Dang & Lan (2015) focuses on the deterministic
setting. On the other hand, (Iusem et al., 2017) develops a stochastic extra-gradient algorithm that
enjoys O(-4) iteration complexity. The extra-gradient method requires tWo stochastic first-order
oracles in one iteration, Which can be computationally expensive in deep learning applications such
as GANs. The inexact proximal point method developed in (Lin et al., 2018) has iteration complex-
ity O(-6) for finding an -first-order stationary point 1.
To avoid the cost of an additional oracle call in extragradient step, several studies (Chiang et al.,
2012; Rakhlin & Sridharan, 2013; Daskalakis et al., 2017; Gidel et al., 2018; Xu et al., 2019) pro-
posed single-call variants of the extragradient algorithm. Some of them focus on the convex setting
(e.g. (Chiang et al., 2012; Rakhlin & Sridharan, 2013)), While others focus on the non-convex set-
ting (Xu et al., 2019). The closest to our Work is the Work by (Daskalakis et al., 2017; Gidel et al.,
2018), Where the min-max setting and GAN training are considered. HoWever, the convergence of
those algorithms is only shoWn for a class of bilinear problems in (Daskalakis et al., 2017) and for
monotone variational inequalities in (Gidel et al., 2018). Hence a big gap remains betWeen the spe-
cific settings studied in (Daskalakis et al., 2017; Gidel et al., 2018) and more general non-convex
1The result in (Lin et al., 2018) assumes the first-order oracle T is a Weakly-monotone operator, Which is
milder than the Lipschitz-continuity assumption as assumed in Iusem et al. (2017). HoWever, simply applying
the Lipschitz-continuity condition in their proof does not change their iteration complexity.
2
Published as a conference paper at ICLR 2020
	Assumption	Setting	IC	PC	Guarantee
Extragradient (Iusem et al., 2017)	pseudo-monotonicity 3	stochastic	O(e-4)	2Tg	e-SP
OMD (Daskalakis et al., 2017)	bilinear	deterministic	N/A	Tg	asymptotic
AvgPastExtraSGD (Gidel et al.,2018)	monotonicity	stochastic	O(e-2)	Tg	e-DG
OMD (Mertikopoulos et al., 2018)	coherence	stochastic	N/A	2Tg	asymptotic
IPP (Lin et al.,2018)	MVI has solution	stochastic	O(e-6)	Tg	e-SP
Alternating Gradient (Gidel et al., 2019)	bilinear form 4	deterministic	O(IOg(I/e)	Tg	e-optim
SVRE (Chavdarova et al., 2019)	strong-monotonicity finite sum	stochastic finite sum	O(IOg(I/e)	(n+μ )Tg5	e-optim
Extragradient (Azizian et al., 2019)	strong-monotonicity	deterministic	O(IOg(I/e)	2Tg	e-optim
OSG (this work)	MVI has solution	stochastic	O(e-4)	Tg	e-SP
OAdagrad (this work)	MVI has solution	stochastic	O(e- 1-2α)	Tg	e-SP
Table 1: Summary of different algorithms with IC (Iteration Complexity), PC (Per-iteration Com-
Plexity) to find e-SP (e-first-order Stationary Point), e-DG (e-Duality Gap, i.e. a point (U, V) such
that maxv F (U, V) - minu F (u, V) ≤ e), or e-optim (e-close to the set of optimal solution). Tg
stands for the time complexity for invoking one stochastic first-order oracle.
non-concave min-max problems. Table 1 provides a complete overview of our results and existing
results. It is hard to give justice to the large body of work on min-max optimization, so we refer the
interested reader to Appendix B that gives a comprehensive survey of related previous methods that
are not covered in this Table.
Our main goal is to design stochastic first-order algorithms with low iteration complexity, low per-
iteration cost and suitable for a general class of non-convex non-concave min-max problems.
The main tool we use in our analysis is variational inequality.
Let T : Rd 7→ Rd be an operator and X ⊂ Rd is a closed convex set. The Stampacchia Variational
Inequality (SVI) problem (Hartman & Stampacchia, 1966) is defined by the operator T and X
and denoted by SVI(T, X). It consists of finding x* ∈ X such that hT(x*), X - x*〉≥ 0 for
∀x ∈ X. A similar one is Minty Variational Inequality (MVI) problem (Minty et al., 1962) denoted
by MVI(T, X), which consists of finding x* such that hT (x), x - x*i ≥ 0 for ∀x ∈ X. Min-max
optimization is closely related to variational inequalities. The corresponding SVI and MVI for the
min-max problem are defined through T(x) = [VuF(u, v), -NvF(u, v)]> with X = (u, v).
Our main contributions are summarized as follows:
•	Following (Daskalakis et al., 2017), we extend optimistic stochastic gradient (OSG) anal-
ysis beyond the bilinear and unconstrained case, by assuming the Lipschitz continuity of
the operator T and the existence of a solution for the variational inequality MVI(T, X).
These conditions were considered in the analysis of the stochastic extragradient algorithm
in (Iusem et al., 2017). We analyze a variant of Optimistic Stochastic Gradient (OSG) un-
der these conditions, inspired by the analysis of (Iusem et al., 2017). We show that OSG
achieves state-of-the-art iteration complexity O(1/e4) for finding an e-first-order stationary
point. Note that our OSG variant only requires invoking one stochastic first-order oracle
3 Note that the pseudo-monotonicity assumption used by (Iusem et al., 2017) can also be replaced by our
MVI assumption in their proof. The main difference between our OSG and the stochastic extragradient method
in (Iusem et al., 2017) is the number of stochastic gradient calculations in each iteration.
4Here the bilinear game is defined as minu∈Rp maxv∈Rq u>Av+u>a+bv>, where the smallest singular
value of A ∈ Rp×q is positive, a ∈ Rp×1 , b ∈ R1×q .
5Here n, L, μ denote the number of components in the finite sum structure, Lipschitz constant and strong-
monotonicity parameter of the operator of variational inequality respectively.
3
Published as a conference paper at ICLR 2020
while enjoying the state-of-the-art iteration complexity achieved by stochastic extragradi-
ent method (Iusem et al., 2017).
•	Under the same conditions, we design an adaptive gradient algorithm named Optimistic
Adagrad (OAdagrad), and show that it enjoys better adaptive complexity O (e- 1-2α),
where α characterizes the growth rate of cumulative stochastic gradient and 0 ≤ α ≤ 1/2.
Similar to Adagrad (Duchi et al., 2011), our main innovation is in considering variable met-
rics according to the geometry of the data in order to achieve potentially faster convergence
rate for a class of nonconvex-nonconcave min-max games. Note that this adaptive com-
plexity improves upon the non-adaptive one (i.e., O(1/e4)) achieved by OSG. To the best
of our knowledge, we establish the first known adaptive complexity for adaptive gradient
algorithms in a class of non-convex non-concave min-max problems.
•	We demonstrate the effectiveness of our algorithms in GAN training on CIFAR10 data.
Empirical results identify an important reason behind why adaptive gradient methods be-
have well in GANs, which is due to the fact that the cumulative stochastic gradient grows in
a slow rate. We also show that OAdagrad outperforms Simultaneous Adam in sample qual-
ity in ImageNet generation using self-attention GANs (Zhang et al., 2018). This confirms
the superiority of OAdagrad in min-max optimization.
2 Preliminaries and Notations
In this section, we fix some notations and give formal definitions of variational inequalities, and
their relationship to the min-max problem (1).
Notations. Let X ⊂ Rd bea closed convex set, and ∣∣∙k the euclidean norm. We note Πχ the projec-
tion operator, i.e. Πχ(y) = argminχ∈χ ∣∣y 一 x∣2. Define T(x) = [VuF(u, v), -VvF(u, v)]>
with x = (u, v) in problem (1). At every point x ∈ X, we don’t have access to T(x) and have
only access to a noisy observations of T (x). That is, T(x; ξ), where ξ is a random variable with
distribution D. For the ease of presentation, we use the terms stochastic gradient and stochastic
first-order oracle interchangeably to stand for T(x; ξ) in the min-max setting.
Definition 1 (Monotonicity). An operator T is monotone if hT (x)-T (y), x-yi ≥ 0 for ∀x, y ∈ X.
An operator T is pseudo-monotone if hT (x), y - xi ≥ 0 ⇒ hT (y), y - xi ≥ 0 for ∀x, y ∈ X. An
operator T is Y-Strongly-monotone if(T(x) — T(y), X — y)≥ 2∣∣x — y∣2 for∀x, y ∈ X.
We give here formal definitions of monotonic operators T and the e-first-order stationary point.
Definition 2 (e-First-Order Stationary Point). A point X ∈ X is called e-first-order stationary point
if ∣T (X)∣ ≤ e.
Remark: We make the following observations:
(a)	. From the definition, it is evident that strong-monotonicity ⇒ monotonicity ⇒pseudo-
monotonicity. Assuming SVI has a solution and pseudo-monotonicity of the operator T
imply that MVI(T, X) has a solution. To see that, assume that SVI has a nonempty solu-
tion set, i.e. there exists x* such that (T(x*), y — x*) ≥ 0 for any y. Noting that pseudo-
monotonicity means that for every y, X, hT (X), y — Xi ≥ 0 implies hT (y), y — Xi ≥ 0,
we have hT (y), y — x*i ≥ 0 for any y, which means that x* is the solution of Minty
variational inequality. Note that the reverse may not be true and an example is provided in
Appendix G.
(b)	. For the min-max problem (1), when F(u, v) is convex in u and concave in v, T is mono-
tone. And, therefore solving SVI(T, X) is equivalent to solving (1). When T is not mono-
tone, by assuming T is Lipschitz continuous, it can be shown that the solution set of (1) is
a subset of the solution set of SVI(T, X). However, even solving SVI(T, X) is NP-hard in
general and hence we resort to finding an e-first-order stationary point.
Throughout the paper, we make the following assumption:
Assumption 1.	(i). T is L-Lipschitz continuous, i.e. ∣T(x1) — T(x2)∣2 ≤ L∣x1 — x2 ∣2 for
∀x1 , x2 ∈ X.
4
Published as a conference paper at ICLR 2020
(ii)	. MVI(T, X) has a solution, i.e. there exists x* such that(T(x), X — x*〉≥ 0 for ∀x ∈ X.
(iii)	. For ∀x ∈ X: E [T(x; ξ)] = T(x), EkT(x; ξ) — T(x)『≤ σ2.
Remark: Assumptions (i) and (iii) are commonly used assumptions in the literature of variational
inequalities and non-convex optimization (Juditsky et al., 2011; Ghadimi & Lan, 2013; Iusem et al.,
2017). Assumption (ii) is used frequently in previous work focusing on analyzing algorithms that
solve non-monotone variational inequalities (Iusem et al., 2017; Lin et al., 2018; Mertikopoulos
et al., 2018). Assumption (ii) is weaker than other assumptions usually considered, such as pseudo-
monotonicity, monotonicity, or coherence as assumed in (Mertikopoulos et al., 2018). For non-
convex minimization problem, it has been shown that this assumption holds while using SGD to
learn neural networks (Li & Yuan, 2017; Kleinberg et al., 2018; Zhou et al., 2019).
3 Optimistic Stochastic Gradient
This section serves as a warm-up and motivation of our main theoretical contribution presented in
the next section. Inspired by (Iusem et al., 2017), we present an algorithm called Optimistic Stochas-
tic Gradient (OSG) that saves the cost of the additional oracle call as required in (Iusem et al., 2017)
and maintains the same iteration complexity. The main algorithm is described in Algorithm 1, where
mt denotes the minibatch size for estimating the first-order oracle. It is worth mentioning that Algo-
rithm 1 becomes stochastic extragradient method if one changes T(zk-1; ξk* i-1) to T(xk-1; ξki-1) in
line 3. Stochastic extragradient method requires to compute stochastic gradient over both sequences
{xk} and {zk}. In contrast, {xk} is an ancillary sequence in OSG and the stochastic gradient is
only computed over the sequence of {zk }. Thus, stochastic extragradient method is twice as ex-
pensive as OSG in each iteration. In some tasks (e.g. training GANs) where the stochastic gradient
computation is expensive, OSG is numerically more appealing.
Algorithm 1 Optimistic Stochastic Gradient (OSG)
1:	Input: z0 = x0 = 0
2:	for k = 1, . . . , N do
3:	Zk= πX xk-1 - η ∙ mk1-1 PmkIT T(Zk-I; ξk-I)]
4:	xk = nX xk-1 -η∙ mkPmkIT(Zk;ξk)i
5:	end for
Remark: When X = Rd, the update in Algorithm 1 becomes the algorithm in (Daskalakis et al.,
2017), i.e.
1	mk	1	mk-1
zk+ι = Zk — 2η∙ m^ɪ Xt(zk；ξk)+η ∙ m^ɪ X t(zk-i；ξk-i)	⑵
k-1 i=1	k-1 i=1
The detailed derivation of (2) can be found in Appendix F.
Theorem 1. Suppose that Assumption 1 holds. Let rα(Zk) = kZk — ΠX (Zk — αT(Zk))k. Let
η ≤ 1/9L and run Algorithm 1for N iterations. Then we have
k=1
8∣∣xo — x*k2
N
100η2
+ -ɪ
Corollary 1. Consider the unconstrained case where X = Rd. Let η ≤ 1/9L, and we have
1N
N EEkT(zk)k2 ≤
k=1
8kx0 — x*k2
η2N
100 X σ2
+ N	mk
k=0 k
(3)
Remark: There are two implications of Corollary 1.
5
Published as a conference paper at ICLR 2020
•	(Increasing Minibatch Size) Let η =	9L, mk = k +1. To guarantee
N PN=I EkT(Zk)k2 ≤ e2, the total number of iterations is N = O(e-2), and the total
complexity is PN=I mk = O(e-4), where O(∙) hides a logarithmic factor of e.
•	(Constant Minibatch Size) Let η = 9L, mk = 1/e2. To guarantee N PN=I EkT(Zk)k2 ≤
e2, the total number of iterations is N = O(e-2), and the total complexity is PkN=0 mk =
O(e-4).
4 Optimistic Adagrad
4.1	Adagrad for minimization Problems
Before introducing Optimistic Adagrad, we present here a quick overview of Adagrad (Duchi et al.,
2011). The main objective in Adagrad is to solve the following minimization problem:
M F (W) = EsP f (W; Z)
(4)
where W is the model parameter, and ζ is an random variable following distribution P . The update
rule of Adagrad is
Wt+1 = Wt - ηH-1gt,	(5)
where η > 0, gt = Vf (wt； Zt), Ht = diag ( (Pi=I gi ◦ gi) 2 J with ◦ denoting the Hadamard
product. Adagrad when taking Ht = I reduces to SGD. Different from SGD, Adagrad dynamically
incorporates knowledge of history gradients to perform more informative gradient-based learning.
When solving a convex minimization problem and the gradient is sparse, Adagrad converges faster
than SGD. There are several variants of Adagrad, including Adam (Kingma & Ba, 2014), RM-
SProp (Tieleman & Hinton, 2012), and AmsGrad (Reddi et al., 2019). All of them share the spirit,
as they take advantage of the information provided by the history of gradients. Wilson et al. (2017)
provide a complete overview of different adaptive gradient methods in a unified framework. It is
worth mentioning that Adagrad can not be directly applied to solve non-convex non-concave min-
max problems with provable guarantee.
4.2	Optimistic Adagrad for min-max optimization
Our second algorithm named Optimistic Adagrad (OAdagrad) is an adaptive variant of OSG, which
also updates minimization variable and maximization variable simultaneously. The key difference
between OSG and OAdagrad is that OAdagrad inherits ideas from Adagrad to construct variable
metric based on history gradients information, while OSG only utilizes a fixed metric. This dif-
ference helps us establish faster adaptive convergence under some mild assumptions. Note that in
OAdagrad we only consider the unconstrained case, i.e. X = Rd.
Assumption 2.	(i). There exists G > 0 and δ > 0 such that kT (Z; ξ)k2 ≤ G, kT (Z; ξ)k∞ ≤ δ
for all Z almost surely.
(ii)	. There exists a universal constant D > 0 such that kxk k2 ≤ D/2 for k = 1, . . . , N, and
I∣x*k2 ≤ D/2.
Remark: Assumption 2 (i) is a standard one often made in literature (Duchi et al., 2011). Assump-
tion 2 (ii) holds when we use normalization layers in the discriminator and generator such as spectral
normalization of weights (Miyato et al., 2018; Zhang et al., 2018), that will keep the norms of the
weights bounded. Regularization techniques such as weight decay also ensure that the weights of
the networks remain bounded throughout the training.
Define gk = m1 Pm=I T(Zk; ξk), |因山 = VZ〈x, HXi. Denote go：k by the concatenation of
gb0, . . . ,gbk, and denote gb0:k,i by the i-th row of gb0:k.
6
Published as a conference paper at ICLR 2020
Algorithm 2 Optimistic AdaGrad (OAdagrad)
1:	Input: z0 = x0 = 0, H0 = δI
2:	for k = 1, . . . , N do
3:	zk = xk-1 - ηHk-1gbk-1
4:	xk = xk-1 - ηHk--11 gbk
5:	Update gb0:k = [gb0:k-1 gbk], sk,i = kgb0:k,ik, i = 1, . . . ,dand set Hk = δI + diag(sk-1)
6:	end for
Theorem 2. Suppose Assumption 1 and 2 hold. Suppose kgb1:k,ik2 ≤ δkα with 0 ≤ α ≤ 1/2
for every i = 1,..., d and ^very k = 1,..., N. When η ≤ 9L, after running Algorithm 2 for N
iterations, we have
1 XX	2	< 8D2δ2(1 + d(N - 1)α)∣ 100 (σ2/m + d (2δ2Nɑ + G2))
N TEkT (zk)kH--ι ≤-------------η2N----------+----------------N--------------
k=1
To make sure -N PN=IEllT(Zk)∣∣27-ι ≤ e2, the number ofiterations is N = O (e- 1—α ).
N	Hk-1
(6)
Remark:
• Note that the convergence measure used in Theorem 2 is different from that in Corol-
lary 1. However we show that under the measure used in Theorem 2, OSG (Algorithm 1)
still has complexity O(1/e4). By the construction of Hk in Algorithm 2, we know that
∣∣T (Z)IIH-1 ≤ ∣∣τ (Z)IlH-1 for any k ≥ 0 and any z,andhence N PN=IEllT (Zk )∣2H-1 ≤
k	0	Hk-1
N PN=I EllT(Zk)∣∣H-1 = 1 ∙ N PN=I EllT(Zk)∣∣2. By Corollary 1, we know that OSG
still requires O(1∕e4) complexity to guarantee that NN PN=I EllT(Zk)∣2H-ι ≤ e2.
•	We denote gb1:k by the cumulative stochastic gradient, where lgb1:k,il2 ≤ δkα characterizes
the growth rate of the gradient in terms of i-th coordinate. In our proof, a key quantity is
Pid=1 lgb1:k,il2 that crucially affects the computational complexity of Algorithm 2. Since
Pi=ι ∣∣b±k,i∣∣2 ≤ δdkα, in the worst case, α = 2. But in practice, the stochastic gradient
is usually sparse, and hence α can be strictly smaller than 1.
•	As shown in Theorem 2, the minibatch size used in Algorithm 2 for estimating the first-
order oracle can be any positive constant and independent of e. This is more practical
than the results established in Theorem 1, since the minibatch size in Theorem 1 does
either increase in terms of number of iterations or is dependent on e. When α = 1, the
complexity of Algorithm 2 is O(1/e4), which matches the complexity stated in Theorem 1.
When α < 1, the complexity of OAdagrad given in Algorithm 2is O (e- 1-α ), i.e., strictly
better than that of OSG given in Algorithm 1.
Comparison with Alternating Adam and Optimistic Adam Alternating Adam is very popular
in GAN training (Goodfellow et al., 2014; Arjovsky et al., 2017; Gulrajani et al., 2017; Brock et al.,
2018). In Alternating Adam, one alternates between multiple steps of Adam on the discriminator
and a single step of Adam on the generator. The key difference between OAdagrad and Alternating
Adam is that OAdagrad updates the discriminator and generator simultaneously. It is worth men-
tioning that OAdagrad naturally fits into the framework of Optimistic Adam proposed in (Daskalakis
et al., 2017). Taking β1 = 0, β2 → 1 in their Algorithm 1 reduces to OAdagrad with annealing
learning rate. To the best of our knowledge, there is no convergence proof for Alternating Adam
for non-convex non-concave problems. Our convergence proof for OAdagrad provides a theoretical
justification of a special case of Optimistic Adam.
5	Experiments
WGAN-GP on CIFAR10 In the first experiment, we verify the effectiveness of the proposed al-
gorithms in GAN training using the PyTorch framework (Paszke et al., 2017). We use Wasserstein
7
Published as a conference paper at ICLR 2020
WGAN-GP on CIFAR10 with OAdagrad
k______________________________
O 0.5	1	1.5	2
Number of Iterations	×ιo5
WGAN-GP on CIFAR10 with OSG
O 0.5	1	1.5	2
Number of Iterations	×ιo5
Figure 1: OAdagrad, OSG and Alternating Adam for WGAN-GP on CIFAR10 data
WGAN-GP on CIFAR10 With Alternating Adam
"O 0.5	1	1.5	2
Number of Iterations	×ιo5
x106 WGAN-GP (CIFAR10)
一uθ-pe∙l°pθs-nujujno
0	0.5	1	1.5	2
Number of Iterations	×ιo5
x106	wgan (BeDroom)
x106 WGAN-GP (CIFAR10)
(sθu) -u-pe∙l°pθs-nujujno
x106 WGAN-GP (CIFAR10)
⑨əu) -u-pe∙l°pθs-nujujno
"0	0.5	1	1.5	2
Number of Iterations ×ιo5
x106	wgan (BeDroom)
Number of Iterations ×ιo5
"0	0.5	1	1.5	2
Number of Iterations ×ιo5
- x106	wgan (BeDroom)
Number of Iterations
Number of Iterations

Figure 2: Cumulative Stochastic Gradient as a function of number of iterations, where netD and
netG stand for the discriminator and generator respectively. The blue curve and red curve stand for
the growth rate of the cummulative stochastic gradient for OAdagrad and its corresponding tightest
polynomial growth upper bound, respectively.
GAN with gradient penalty (WGAN-GP) (Gulrajani et al., 2017) and CIFAR10 data in our experi-
ments. The architectures of discriminator and generator, and the penalty parameter in WGAN-GP
are set to be same as in the original paper. We compare Alternating Adam, OSG and OAdagrad,
where the Alternating Adam is to run 5 steps of Adam on the discriminator before performing 1 step
of Adam on the generator. We try different batch sizes (64, 128, 256) for each algorithm. For each
algorithm, we tune the learning rate in the range of {1×10-3, 2×10-4, 1×10-4, 2×10-5, 1×10-5}
when using batch size 64, and use the same learning rate for batch size 128 and 256. We report In-
ception Score (IS) (Salimans et al., 2016) as a function of number of iterations. Figure 1 suggests
that OAdagrad performs better than OSG and Alternating Adam, and OAdagrad results in higher
IS. We compare the generated CIFAR10 images associated with these three methods, which is in-
cluded in Appendix A. We also provide experimental results to compare the performance of different
algorithms using different minibatch sizes, which are included in Appendix E.
Growth Rate of Cumulative Stochastic Gradient In the second experiment, we employ OAd-
agrad to train GANs and study the growth rate of the cumulative stochastic gradient (i.e.,
Pid=1 kgb1:N,ik2). We tune the learning rate from {1 × 10-3, 2 × 10-4, 1 × 10-4, 2 × 10-5, 1 × 10-5}
and choose batch size to be 64. In Figure 2, the blue curve and red curve stand for the growth rate
for OAdagrad and its corresponding tightest polynomial growth upper bound respectively. N is
the number of iterations, and c is a multiplicative constant such that the red curve and blue curve
overlaps at the starting point of the training. The degree of the polynomial is determined using bi-
nary search. We can see that the growth rate of cumulative stochastic gradient grows very slowly
in GANs (the worst-case polynomial degree is 0.5, but it is 0.2 for WGAN-GP on CIFAR10 and
0.07 for WGAN on LSUN Bedroom dataset). As predicted by our theory, this behavior explains
the faster convergence of OAdagrad versus OSG, consistent with what is observed empirically in
Figure 1.
8
Published as a conference paper at ICLR 2020
Number of Iterations ×104
Number of Iterations	×ιo4
(a) Inception Score	(b) FID
Figure 3: Self-Attention GAN on ImageNet, with evaluation using Official TensorFlow Inception
Score and Official TensorFlow FID. We see that OAdagard indeed outperforms Simultaneous Adam
in terms of the (TensorFloW) Inception score (higher is better), and in terms of (TensorFloW) Frechet
Inception Distance (lower is better). We don’t report here Alternating Adam since in our run it has
collapsed.
Self-Attention GAN on ImageNet In the third experiment, We consider GAN training on large-
scale dataset. We use the model from Self-Attention GAN (Zhang et al., 2018) (SA-GAN) and
ImageNet as our dataset. Note that in this setting the boundedness of both generator (G) and dis-
criminator (D) is ensured by spectral normalization of both G and D. Three separate experiments are
performed, including Alternating Adam (baseline), Simultaneous Adam (Mescheder et al., 2017),
and OAdagrad. It should be mentioned that the update rule of Simultaneous Adam involves per-
forming Adam-type update for discriminator and generator simultaneously. Training is performed
With batch size 128 for all experiments.
For the baseline experiment (Alternating Adam) We use the default settings and hyper parameters
reported in SA-GAN (Zhang et al., 2018) (note that We are not using the same batch size of 256 as in
(Zhang et al., 2018) due to limited computational resources). In our experience, Alternating Adam
training for a batch size of 128 With same learning rate as in SA-GAN (0.0001 for generator and
0.0004 for discriminator) collapsed. This does not mean that Alternating Adam fails, it just needs
more tuning to find the correct range of learning rates for the particular batch size We have. With
the hyperparameters ranges We tried Alternating Adam collapsed, With extra tuning efforts and an
expensive computational budget Alternating Adam Would eventually succeed. This is inline With
the large scale study in (Lucic et al., 2018) that states that given a large computational budget for
tuning hyper-parameters most GANs training succeed equally.
For both OAdagrad and Simultaneous Adam, We use different learning rate for generator and dis-
criminator, as suggested in (Heusel et al., 2017). Specifically, the learning rates used are 10-3 for
the generator and 4 X 10-5 for the discriminator. We report both Inception Score (IS) and Frechet
Inception Distance (Heusel et al., 2017) (FID) as a function of number of iterations.
We compare the generated ImageNet images associated With the three optimization methods in Ap-
pendix A. Since Alternating Adam collapsed We don’t report its Inception Score or FID. As it can be
seen in Figure 3 and Appendix A, OAdagrad outperforms simultaneous Adam in quantitative met-
rics (IS and FID) and in sample quality generation. Future Work Will include investigating Whether
OAdagrad Would benefit from training With larger batch size, in order to achieve state-of-the-art
results.
6	Conclusion
In this paper, We explain the effectiveness of adaptive gradient methods in training GANs from both
theoretical and empirical perspectives. Theoretically, We provide tWo efficient stochastic algorithms
for solving a class of min-max non-convex non-concave problems With state-of-the-art computa-
tional complexities. We also establish adaptive complexity results for an Adagrad-style algorithm
by using coordinate-Wise stepsize according to the geometry of the history data. The algorithm is
proven to enjoy faster adaptive convergence than its non-adaptive counterpart When the gradient is
9
Published as a conference paper at ICLR 2020
sparse, which is similar to Adagrad applied to convex minimization problem. We have conducted
extensive empirical studies to verify our theoretical findings. In addition, our experimental results
suggest that the reason why adaptive gradient methods deliver good practical performance for GAN
training is due to the slow growth rate of the cumulative stochastic gradient.
Acknowledgments
The authors thank the anonymous reviewers for their helpful comments. M. Liu and T. Yang are
partially supported by National Science Foundation CAREER Award 1844403. M. Liu would like
to thank Xiufan Yu from Pennsylvania State University and Zehao Dou from Yale University for
helpful discussions.
References
Martin Arjovsky, SoUmith Chintala, and Leon Bottou. Wasserstein gan. arXiv preprint
arXiv:1701.07875, 2017.
Walss Azizian, Ioannis Mitliagkas, Simon Lacoste-JUlien, and Gauthier GideL A tight and uni-
fied analysis of extragradient for a whole spectrum of differentiable games. arXiv preprint
arXiv:1906.05945, 2019.
Francis Bach and Kfir Y Levy. A universal algorithm for variational inequalities adaptive to smooth-
ness and noise. arXiv preprint arXiv:1902.01637, 2019.
Andrew Brock, Jeff Donahue, and Karen Simonyan. Large scale gan training for high fidelity natural
image synthesis. arXiv preprint arXiv:1809.11096, 2018.
Tatjana Chavdarova, Gauthier Gidel, Francois Fleuret, and Simon Lacoste-Julien. Reducing noise
in gan training with variance reduced extragradient. arXiv preprint arXiv:1904.08598, 2019.
Chao-Kai Chiang, Tianbao Yang, Chia-Jung Lee, Mehrdad Mahdavi, Chi-Jen Lu, Rong Jin, and
Shenghuo Zhu. Online optimization with gradual variations. In Conference on Learning Theory,
pp. 6-1, 2012.
Cong D Dang and Guanghui Lan. On the convergence properties of non-euclidean extragradient
methods for variational inequalities with generalized monotone operators. Computational Opti-
mization and applications, 60(2):277-310, 2015.
Constantinos Daskalakis and Ioannis Panageas. The limit points of (optimistic) gradient descent in
min-max optimization. In Advances in Neural Information Processing Systems, pp. 9236-9246,
2018.
Constantinos Daskalakis, Andrew Ilyas, Vasilis Syrgkanis, and Haoyang Zeng. Training gans with
optimism. arXiv preprint arXiv:1711.00141, 2017.
John Duchi, Elad Hazan, and Yoram Singer. Adaptive subgradient methods for online learning and
stochastic optimization. Journal of Machine Learning Research, 12(Jul):2121-2159, 2011.
Saeed Ghadimi and Guanghui Lan. Stochastic first-and zeroth-order methods for nonconvex stochas-
tic programming. SIAM Journal on Optimization, 23(4):2341-2368, 2013.
Gauthier Gidel, Hugo Berard, Gaetan Vignoud, Pascal Vincent, and Simon Lacoste-Julien.
A variational inequality perspective on generative adversarial networks.	arXiv preprint
arXiv:1802.10551, 2018.
Gauthier Gidel, Reyhane Askari Hemmat, Mohammad Pezeshki, Remi Le Priol, Gabriel Huang,
Simon Lacoste-Julien, and Ioannis Mitliagkas. Negative momentum for improved game dynam-
ics. In Kamalika Chaudhuri and Masashi Sugiyama (eds.), Proceedings of Machine Learning
Research, volume 89 of Proceedings of Machine Learning Research, pp. 1802-1811. PMLR,
16-18 Apr 2019. URL http://proceedings.mlr.press/v89/gidel19a.html.
10
Published as a conference paper at ICLR 2020
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,
Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Advances in neural infor-
mation processing Systems,pp. 2672-2680, 2014.
Paulina Grnarova, Kfir Y Levy, Aurelien Lucchi, Thomas Hofmann, and Andreas Krause. An online
learning approach to generative adversarial networks. arXiv preprint arXiv:1706.03269, 2017.
Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron C Courville. Im-
proved training of wasserstein gans. In Advances in neural information processing systems, pp.
5767-5777, 2017.
Philip Hartman and Guido Stampacchia. On some non-linear elliptic differential-functional equa-
tions. Acta mathematica, 115(1):271-310, 1966.
Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochreiter.
Gans trained by a two time-scale update rule converge to a local nash equilibrium. In Advances
in Neural Information Processing Systems, pp. 6626-6637, 2017.
AN Iusem, Alejandro Jofre, Roberto I Oliveira, and Philip Thompson. Extragradient method with
variance reduction for stochastic variational inequalities. SIAM Journal on Optimization, 27(2):
686-724, 2017.
Anatoli Juditsky, Arkadi Nemirovski, Claire Tauvel, et al. Solving variational inequalities with
stochastic mirror-prox algorithm. Stochastic Systems, 1(1):17-58, 2011.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980, 2014.
Robert Kleinberg, Yuanzhi Li, and Yang Yuan. An alternative view: When does sgd escape local
minima? arXiv preprint arXiv:1802.06175, 2018.
GM Korpelevich. The extragradient method for finding saddle points and other problems. Matecon,
12:747-756, 1976.
Yuanzhi Li and Yang Yuan. Convergence analysis of two-layer neural networks with relu activation.
In Advances in Neural Information Processing Systems, pp. 597-607, 2017.
Qihang Lin, Mingrui Liu, Hassan Rafique, and Tianbao Yang. Solving weakly-convex-weakly-
concave saddle-point problems as weakly-monotone variational inequality. arXiv preprint
arXiv:1810.10207, 2018.
Tianyi Lin, Chi Jin, and Michael I Jordan. On gradient descent ascent for nonconvex-concave
minimax problems. arXiv preprint arXiv:1906.00331, 2019.
Mingrui Liu, Zhuoning Yuan, Yiming Ying, and Tianbao Yang. Stochastic auc maximization with
deep neural networks. In International Conference on Learning Representations, 2020. URL
https://openreview.net/forum?id=HJepXaVYDr.
Songtao Lu, Ioannis Tsaknakis, and Mingyi Hong. Block alternating optimization for non-convex
min-max problems: algorithms and applications in signal processing and communications. In
ICASSP 2019-2019 IEEE International Conference on Acoustics, Speech and Signal Processing
(ICASSP), pp. 4754-4758. IEEE, 2019.
Mario Lucic, Karol Kurach, Marcin Michalski, Sylvain Gelly, and Olivier Bousquet. Are gans
created equal? a large-scale study. In Advances in neural information processing systems, pp.
700-709, 2018.
Eric V Mazumdar, Michael I Jordan, and S Shankar Sastry. On finding local nash equilibria (and
only local nash equilibria) in zero-sum games. arXiv preprint arXiv:1901.00838, 2019.
Panayotis Mertikopoulos, Houssam Zenati, Bruno Lecouat, Chuan-Sheng Foo, Vijay Chan-
drasekhar, and Georgios Piliouras. Mirror descent in saddle-point problems: Going the extra
(gradient) mile. arXiv preprint arXiv:1807.02629, 2018.
11
Published as a conference paper at ICLR 2020
Lars Mescheder, Sebastian Nowozin, and Andreas Geiger. The numerics of gans. In Advances in
Neural Information Processing Systems,pp. 1825-1835, 2017.
George J Minty et al. Monotone (nonlinear) operators in hilbert space. Duke Mathematical Journal,
29(3):341-346, 1962.
Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normalization
for generative adversarial networks. arXiv preprint arXiv:1802.05957, 2018.
Vaishnavh Nagarajan and J Zico Kolter. Gradient descent gan optimization is locally stable. In
Advances in Neural Information Processing Systems, pp. 5585-5595, 2017.
Arkadi Nemirovski. Prox-method with rate of convergence o (1/t) for variational inequalities with
lipschitz continuous monotone operators and smooth convex-concave saddle point problems.
SIAM Journal on Optimization, 15(1):229-251, 2004.
Arkadi Nemirovski and D Yudin. On cezari?s convergence of the steepest descent method for ap-
proximating saddle point of convex-concave functions. In Soviet Math. Dokl, volume 19, pp.
258-269, 1978.
Arkadi Nemirovski, Anatoli Juditsky, Guanghui Lan, and Alexander Shapiro. Robust stochastic
approximation approach to stochastic programming. SIAM Journal on optimization, 19(4):1574-
1609, 2009.
Arkadii Semenovich Nemirovsky and David Borisovich Yudin. Problem complexity and method
efficiency in optimization. 1983.
Yurii Nesterov. Dual extrapolation and its applications to solving variational inequalities and related
problems. Mathematical Programming, 109(2-3):319-344, 2007.
Adam Paszke, Sam Gross, Soumith Chintala, and Gregory Chanan. Pytorch: Tensors and dynamic
neural networks in python with strong gpu acceleration. Team, Pytorch Core, 6, 2017.
Boris Teodorovich Polyak. Minimization of unsmooth functionals. USSR Computational Mathe-
matics and Mathematical Physics, 9(3):14-29, 1969.
Hassan Rafique, Mingrui Liu, Qihang Lin, and Tianbao Yang. Non-convex min-max optimization:
Provable algorithms and applications in machine learning. arXiv preprint arXiv:1810.02060,
2018.
Sasha Rakhlin and Karthik Sridharan. Optimization, learning, and games with predictable se-
quences. In Advances in Neural Information Processing Systems, pp. 3066-3074, 2013.
Sashank J Reddi, Satyen Kale, and Sanjiv Kumar. On the convergence of adam and beyond. arXiv
preprint arXiv:1904.09237, 2019.
Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. In Advances in neural information processing systems,
pp. 2234-2242, 2016.
Maziar Sanjabi, Meisam Razaviyayn, and Jason D Lee. Solving non-convex non-concave min-max
games under polyak-{\L} ojasiewicz condition. arXiv preprint arXiv:1812.02878, 2018.
Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image
recognition. arXiv preprint arXiv:1409.1556, 2014.
Tijmen Tieleman and Geoffrey Hinton. Lecture 6.5-rmsprop, coursera: Neural networks for machine
learning. University of Toronto, Technical Report, 2012.
Ashia C Wilson, Rebecca Roelofs, Mitchell Stern, Nati Srebro, and Benjamin Recht. The marginal
value of adaptive gradient methods in machine learning. In Advances in Neural Information
Processing Systems, pp. 4148-4158, 2017.
12
Published as a conference paper at ICLR 2020
Yi Xu, Zhuoning Yuan, Sen Yang, Rong Jin, and Tianbao Yang. On the convergence of
(stochastic) gradient descent with extrapolation for non-convex optimization. arXiv preprint
arXiv:1901.10682, 2019.
Abhay Yadav, Sohil Shah, Zheng Xu, David Jacobs, and Tom Goldstein. Stabilizing adversarial nets
with prediction methods. arXiv preprint arXiv:1705.07364, 2017.
Han Zhang, Ian Goodfellow, Dimitris Metaxas, and Augustus Odena. Self-attention generative
adversarial networks. arXiv preprint arXiv:1805.08318, 2018.
Renbo Zhao. Optimal stochastic algorithms for convex-concave saddle-point problems. arXiv
preprint arXiv:1903.01687, 2019.
Yi Zhou, Junjie Yang, Huishuai Zhang, Yingbin Liang, and Vahid Tarokh. Sgd converges to global
minimum in deep learning via star-convex path. arXiv preprint arXiv:1901.00451, 2019.
13
Published as a conference paper at ICLR 2020
A More Experimental Results
Comparison of Generated CIFAR10 Images by Different Optimization Methods In this section,
we report the generated CIFAR10 images during the training of WGAN-GP by three optimization
methods (OSG, OAdagrad, Alternating Adam). Every method uses batch size 64, and 1 iteration
represents calculating the stochastic gradient with minibatch size 64 once. Figure 4 consists of
images by three optimization methods at iteration 8000. Visually we can see that OAdagrad is better
than Alternating Adam, and both of them are significantly better than OSG. It is consistent with the
inception score results reported in Figure 1, and it also illustrates the tremendous benefits delivered
by adaptive gradient methods when training GANs.
(c) Alternating Adam
(b) OAdagrad
(a) OSG
Figure 4:	WGAN-GP: Generated CIFAR10 images using different optimization methods at iteration
8000.
Comparison of Generated ImageNet Images by Different Optimization Methods In this section,
we report the generated ImageNet images during the training of Self-Attention GAN by three opti-
mization methods (OAdagrad, Simultaneous Adam, Alternating Adam). Every method uses batch
size 128 and 1 iteration represents calculating the stochastic gradient with minibatch 128 once. Fig-
ure 5 consists of images by three optimization methods at iteration 135000. Visually it is apparent
that OAdagrad is better than Simultaneous Adam, and both of them are significantly than Alternating
Adam.
(c) Alternating Adam
Figure 5:	Self-Attention GAN (SA-GAN): Generated ImageNet images using different optimization
methods at iteration 135000. OAdagrad produces better quality images than simultaneous Adam.
For both Oadagrad and simultaneous Adam we use the same learning rates: 0.001 for generator
and 0.00004 for the discriminator. Alternating Adam in our experience with same learning rate as
in SA-GAN 0.0001 for generator and 0.0004 for discriminator collapsed. Note that our setting is
different from SA-GAN since our batchsize is 128 while it is 256 in SA-GAN. It was also noted in
SA-GAN that alternating Adam is hard to train.
14
Published as a conference paper at ICLR 2020
Unofficial PyTorch Inception Score and FID results for SA-GAN on ImageNet
2
SA-GAN on ImageNet
O
0 8 6 4 2
OIOOS uo-寻。U-
5	10	15
Number of Iterations	xιo4
Oooooo
0 5 0 5 0 5
3 2 2 1 1
aous-α Uo--dou- wo,l
5	10	15
Number of Iterations	×ιo4
(a) Inception Score	(b) FID
Figure 6:	Self-Attention GAN on ImageNet, with evaluation using Unoffical PyTorch Inception
Score and Unoffical Pytorch FID. We see that OAdagard indeed outperforms Simultaneous Adam in
terms of the (PyTorch) Inception score (higher is better), and in terms of (PyTorch) Frechet Inception
Distance (lower is better). We don’t report here Alternating Adam since in our run it has collapsed.
B	Related Work
Min-max Optimization and GAN Training For convex-concave min-max optimization, the ex-
tragradient method was first proposed by (Korpelevich, 1976). Later on, under gradient Lipschitz
condition, Nemirovski (2004) extended the idea of extragradient to mirror-prox and obtained the
O(1/N) convergence rate in terms of the duality gap (see also (Nesterov, 2007)), where N is the
number of iterations. When only the stochastic first-order oracle is available, the stochastic mirror-
prox was analyzed by (Juditsky et al., 2011). The convergence rates for both deterministic and
stochastic mirror-prox are optimal (Nemirovsky & Yudin, 1983). Recently, Zhao (2019) developed
a nearly-optimal stochastic first-order algorithm when the primal variable is strongly convex in the
primal variable. Bach & Levy (2019) proposed a universal algorithm that is adaptive to smoothness
and noise, and simultaneously achieves optimal convergence rate.
There is a plethora of work analyzing one-sided nonconvex min-max problem, where the objective
function is nonconvex in the minimization variable but concave in maximization variable. When
the function is weakly-convex in terms of the minimization variable, Rafique et al. (2018) propose a
stage-wise stochastic algorithm that approximately solves a convex-concave subproblem by adding
a quadratic regularizer and show the first-order convergence of the equivalent minimization problem.
Under the same setting, Lu et al. (2019) utilize block-based optimization strategy and show the con-
vergence of the stationarity gap. By further assuming that the function is smooth in the minimization
variable, Lin et al. (2019) show that (stochastic) gradient descent ascent is able to converge to the
first-order stationary point of the equivalent minimization problem. Liu et al. (2020) cast the prob-
lem of stochastic AUC maximization with deep neural networks into a nonconvex-concave min-max
problem, show the PL (Polyak-LojaSieWicz) condition holds for the objective of the outer minimiza-
tion problem, and propose an algorithm and establish its fast convergence rate.
A more challenging problem is the non-convex non-concave min-max problem. Dang & Lan (2015)
demonstrate that the deterministic extragradient method is able to converge to -first-order station-
ary point with non-asymptotic guarantee. Under the condition that the objective function is weakly-
convex and weakly-concave, Lin et al. (2018) designs a stage-wise algorithm, where in each stage a
strongly-convex strongly-concave subproblem is constructed by adding quadratic terms and appro-
priate stochastic algorithms can be employed to approximately solve it. They also show the conver-
gence to the stationary point. Sanjabi et al. (2018) design an alternating deterministic optimization
algorithm, in which multiple steps of gradient ascent for dual variable are conducted before one
step of gradient descent for primal variable is performed. They show the convergence to stationary
point based on the assumption that the inner maximization problem satisfies PL condition (Polyak,
1969). Our work is different from these previous methods in many aspects. In comparison to (Lin
et al., 2018), our result does not need the bounded domain assumption. Furthermore, our iteration
complexity is O(1/4) to achieve -first-order stationary point while the corresponding complexity
15
Published as a conference paper at ICLR 2020
in (Lin et al., 2018) is O(1/6). When comparing to (Sanjabi et al., 2018), we do not assume that the
PL (Polyak-LojasieWicz) condition holds. Additionally, our algorithm is stochastic and not restricted
to the deterministic case. Apparently the most related work to the present one is (Iusem et al., 2017).
The stochastic extragradient method analyzed in (Iusem et al., 2017) requires calculation of tWo
stochastic gradients per iteration, While the present algorithm only needs one since it memorizes the
stochastic gradient in the previous iteration to guide the update in the current iteration. Nevertheless,
We achieve the same iteration complexity as in (Iusem et al., 2017).
There are a body of Work analyzing the convergence behavior of min-max optimization algorithms
and its application in training GANs (Heusel et al., 2017; Daskalakis & Panageas, 2018; Nagarajan
& Kolter, 2017; Grnarova et al., 2017; Yadav et al., 2017; Gidel et al., 2018; Mertikopoulos et al.,
2018; Mazumdar et al., 2019). A feW of them (Heusel et al., 2017; Daskalakis & Panageas, 2018;
Mazumdar et al., 2019) only have asymptotic convergence. Others (Nagarajan & Kolter, 2017;
Grnarova et al., 2017; Daskalakis et al., 2017; Yadav et al., 2017; Gidel et al., 2018; Mertikopoulos
et al., 2018) focus on more restricted settings. For example, Nagarajan & Kolter (2017); Grnarova
et al. (2017) require the concavity of the objective function in terms of dual variable. Yadav et al.
(2017); Gidel et al. (2018) assume the objective to be convex-concave. Mertikopoulos et al. (2018)
imposes the so-called coherence condition Which is stronger than our assumption. Daskalakis et al.
(2017) analyze the last-iteration convergence for bilinear problem. Recently, Gidel et al. (2019) ana-
lyze the benefits of using negative momentum in alternating gradient descent to improve the training
of a bilinear game. Chavdarova et al. (2019) develop a variance-reduced extragradient method and
shoWs its linear convergence under strong monotonicity and finite-sum structure assumptions. Az-
izian et al. (2019) provide a unified analysis of extragradient for bilinear game, strongly monotone
case, and their intermediate cases. HoWever, none of them give non-asymptotic convergence results
for the class of non-convex non-concave min-max problem considered in our paper.
C Proof of Theorem 1
C.1 Facts
Suppose X ⊂ Rd is closed and convex set, then We have
Fact 1. For all x ∈ Rd and y ∈ X, kΠX (x) - yk2 + kΠX (x) - xk2 ≤ kx - yk2.
Fact 2. For all x ∈ Rd and y ∈ X, hx - ΠX (x), y - ΠX (x)i ≤ 0.
C.2 Lemmas
Lemma 1. For η ≤ əɪ, we have
1N	1N	N	N
2 X ∣∣χk-ι-zkk2+2 X ∣∣χk-zkk2 ≤ kχ0-χ*k2-∣∣χN-χ*k2+i2η2 X k∙k2+χ Ak ⑺
Proof. Let x* ∈ X*, where X* is the set of optimal solutions of MVI(T, X), i.e.(T(x), X — x*)≥
0 holds for ∀x ∈ X. Define ek = ^^ Pm=IT(zk,ξk) - T(Zk), and T(Ek,Z) = T(Zk) + ∈k. For
16
Published as a conference paper at ICLR 2020
any X ∈ X, we have
∣∣Xk - x∣∣2 = IlnX (Xk-I- ηT(Ck, Zk)) - X∣∣2
V ∣∣Xk-i - ηT(Ck, Zk) - x∣∣
=∣∣Xk-i - ηT(Ck, Zk) - x∣∣
—
—
∣∣Xk-i - ηT 1, Zk) - Πχ (xk-1 -ητ (Ck ,Zk ))∣∣
Xk-1 - ηT(ek,Zk) - Xk∣∣
llXk-i- xII2
-IlXk-I - Xk『+ 2
X - Xk,
llXk-i- xII2
-IlXk-I - Xk『+ 2
D
X - Zk,
ηT(ek, Zk))
ηT (Ck, zk)) + 2 (zk - xk, ηT (Ck, zk ))
llXk-i- xII2
l∣xk-ι - xII2
-IlXk-I
-IlXk-I
-Zk + Zk - Xk Il2 +2(X - Zk ,ηT(ck, Zk ))+2(Zk - Xk,ηT (ck, Zk)
-Zk||2 - IIZk - Xk||2 - 2 hXk-1 - Zk , Zk - Xk i +
2(x - Zk,
ηT(Ck, Zk)) + 2 (Zk - Xk, ηT(Ck, Zk))
∣∣Xk-i - x∣2 - ∣∣Xk-i - Zk Il2 - ∣∣Zk - Xkl2 +2(x - Zk ,ηT(Ck, Zk ))+2(Xk - Zk, Xk-1 - ηT(Ck,Zk) - z，
(8)
where (a) holds by using Fact 1. Note that
2(x* - Zk,ηT(ck, Zk))= 2(x* - Zk,η (T(Zk) + Ck)〉≤ 2〈x* - Zk, ηck),
(9)
where the last inequality holds by the fact that (x* - Zk, T(Zk)〉≤ 0 since x* is a solution of
MVI(T, X). Note that
2(Xk - Zk, Xk-i - ηT(Ck, Zk) - Z,
=2 (xk - zk, xk-1 - ηT(ek-1, Zk-I) - Zk)+ 2 (xk - zk, η (T(Ck-1, Zk-I) - T(Ck, zk)))
≤ 2η ∣∣Xk - Zk∣∙ ∣∣T(Ck-i, Zk-i) - T(Ck, Zk)∣∣ 10 11 * * * * *
≤ 2η ∣∣Πχ (xk-i - η∙T(Ck ,Z)) - ∏χ (Xk-I- η∙T(Ck-i, Zk-I)) ∣∣ ∙ ∣∣T(Ck-1, Zk-i) - T(Ck ,Z) ∣ ∣
≤ 2η2 ∣∣T(Ck-i, Zk-i)-T(Ck, Zk) ∣ ∣ 2 =2η2∣T(zk-1) + Ck-1 - (T(zk) + Ck)『
(d)
≤ 2η2 (IIT(Zk-i) - T(Zk)Il + ∣∣Ck-i∣∣ + IlCkk)2 ≤ 2η2 (LkZk-I-Zk∣ + ∣∣Ck-i∣∣ + IICk∣)2
(e)
≤ 6η2 (L2∣∣Zk-i-ZkI2 + ∣∣Ck-i∣∣2 + 归『)
(10)
where (a) holds by(Xk - Zk, Xk-1 - ηT(Ck-ι, Zk-ι) - z, ≤ 0 and Cauchy-Schwartz inequality,
where the former inequality comes from Fact 2 and the update rules of the algorithm, (b) holds by
the update rule of Zk and Xk , (c) holds by the nonexpansion property of the projection operator, (d)
holds since T is L-Lipschitz continuous, (e) holds since (a + b + c)2 ≤ 3a2 + 3b2 + 3c2.
Define Λk = 2(x* - Zk, ηCk). Taking X = x* in (8) and combining (9) and (10), We have
IXk - X* I2
≤ ∣∣xk-i - x*∣∣2 -IlXk-I - zk∣∣2 -IIZk - xk∣∣2 + 6η2L21zk-i - zk∣∣2 + 6η2lek-il2 + 6η2∣∣ek∣∣2 + Ak
(11)
Noting that
∣∣Zk-ι - Zk Il2 = ∣∣Zk-ι - Xk-1 + Xk-1 - Zk Il2 ≤ 3∣∣Zk-ι - Xk-Ik2 +3∣∣Xk-ι - Zk ∣∣2 +3∣∣Xk - Zk ∣∣2,
we rearrange terms in (11), which yields
∣∣Xk-ι - Zkll2 + ∣∣Zk - Xkll2 - 6η2L2 (3∣∣Zk-ι - Xk-1∣∣2 +3∣∣Xk-ι - Zk∣∣2 +3∣∣Zk - Xk∣∣2)
≤ ∣∣Xk-i - x*∣∣2 TlXk - x*∣∣2 + 6η2∣Ck-iIl2 + 6η2∣Ck∣∣2 +Λk
(12)
17
Published as a conference paper at ICLR 2020
Take summation over k = 1, . . . , N in (12) and note that x0 = z0, which yields
NN
(1 - 18η2L2) X ∣∣xk-ι - Zk∣∣2 + (1 - 36η2L2) X IlXk- zkl2
k=1	k=1
NN
≤ Ilxo - χ*∣∣2 -IlXN - χ*ll2 + 12η2 X ∣∣6kk2 + Xλe
k=0	k=1
By taking η ≤ Q, we have 1 - 36η2L2 ≥ 2, and We have the result.
(13)
□
C.3 Main Proof of Theorem 1
Proof. Define rη(zk) = Izk - ΠX (zk - ηT (zk))I. Our goal is to get a bound on rη(zk). We
have:
rη2 (zk) = Izk - ΠX (zk - ηT (zk))I2 = Izk - Xk + Xk - ΠX (zk - ηT (zk))I2
(a)
≤ 2Izk -XkI +2IXk -ΠX (zk -ηT(zk))I
= 2 Izk - XkI2 + 2 ΠX Xk-1 - ηTb(k,zk) - ΠX (zk - ηT(zk))	(14)
≤ 2 Izk - XkI2 + 4 IXk-1 - zkI2 + 4η2 T (zk) - Tb(k,zk)
≤ 4Izk -XkI2 +4IXk-1 - zkI + 4η2IkI2
where (a) holds since (a + b)2 ≤ 2a2 + 2b2, (b) holds by the non-expansion property of the
projection operator and (a + b)2 ≤ 2a2 + 2b2.
Let x* ∈ X*, where X* is the set of optimal solutions of MVI(T, X), i.e.(T(x), X - x*〉≥ 0
holds for ∀x ∈ X. Define e《=^^ PmkIT(Zk,ξk) - T(Zk), and T(., Zk) = T(Zk) + e《.Define
Λk = 2hx* - zk , ηki.
By summing over k in Equation (14) and using Equation (7) in Lemma 1, we have
NN	N	N
Xrη2(Zk) ≤ 4X IZk -xkI2 +4X Ixk-1 - ZkI2 +4η2 X IekI2
NN	N
1 X ∣Zk - Xkk2 + 2 X kxk-1 - Zkk2l +4η2 X kekk2	(15)
NN	N
Ix0-x*I2+12η2XIekI2+XΛk +4η2XIekI2
Taking expectation and divided by N on both sides, we have
By (7)
≤8
1N
N X E 屑(Zk)] ≤
k=1
≤
8	N	N	42N
N kxo - x*k2 + 12η2∑ Ekekk2 +∑ E(Λk) + * EEkek ∣2
k=0	k=1	k=1
ɪ fkxo - x*k2 + 12η2	+4n2 X 二
N	N mk
k=0 k
8∣xo - x*k2 . 100η2
N + N
k=0
(16)
□
18
Published as a conference paper at ICLR 2020
D Proof of Theorem 2
In this section, We define gk = T(Zk), ek = gfc - gk.
D.1 Lemmas
Lemma 2. For any positive definite diagonal matrix H satisfying H 占 δI with δ > 0, if ∣∣T(x1)一
T(x2)∣∣2 ≤ L∣∣X1 - X2∣∣2 for X1, X2 ∈ X, then
IIT (Xl)- T (X2)∣H-1 ≤ L ∣X1-X2∣H.
δ
Proof. Note that H 占 δI, we have 0 < H-1 W 11. Noting that ∣XkH = λ∕xtHx, we have
IIt (XI) - T (X2) IlH-1 ≤ √δ IT (XI) - T (x2)∣2 ≤ √δ ∣∣xι - x2∣2 ≤ J llx1 - x2 ∣∣H.
□
Lemma 3. When η ≤ /, we have
ι Λ..	C ι Λ.. C
2 X l∣xk-ι - ZkkHk-I + 2 X l∣xk- Zkl∣Hfc-ι
N	N	N	N N
≤ X (kxk-ι -x*llHk-ι - 1xk -x*llHk-ι) +12η2 (lMlH-ι + X l∣ek!HUj + XΛk
k=1	k=1	k=l(17)
Proof. Define Ek = bk - gk. For any X ∈ X, we have
kxk- XkHk-I = I I xk-ι- ηH--Igk- χ∣∣ Hk-1 = I I xk-ι- ηH--Igk- χ∣∣ IHk-I -1 I xk-ι- ηH--Igk- Xk ∣∣ IHk-I
=Ilxk-1	-	XkHk-I	-	Ilxk-1	-	xk llHk-1	+2 hx - xk ,ηgk i
=l∣Xk-i	-	XkHk-I	-	l∣Xk-i	-	Xk kHk-1	+2(X - Zk ,ηgk〉+2 Ek - Xk,ηgk)
=∣∣Xk-i	-	XkHk-I	-	l∣Xk-i	-	Zk + Zk - Xk kHk-1 +2 (x	- Zk ,ηgki +2 (Zk — Xk, ηgk)
=∣∣xk-1	-	XkHk-I	-	llxk-1	-	Zk ∣∣Hk-1	- llZk - xk ∣∣Hk-1	- 2 (Hk-I(Xk-1 -	Zk ),Zk	- xk i +
2 (x - Zk, ηgk〉+2 (Zk - Xk, ηgk)
=llxk-1 - XkHk-I - kxk-1 - Zk ∣∣Hk-1 - |Zk - xk ∣∣Hk-1 + 2 (x - Zk, ηgki
+ 2 (Xk - Zk,Hk-i(xk-i - Zk) - ηgki
(18)
Note that
2 (x* - Zk,ηgki = 2 (x* - Zk,η (gk + ∈k)i ≤ 2 (x* - Zk,ηek),	(19)
where the last inequality holds by the fact that (x* - Zk, gk〉≤ 0 since x* is a solution of
MVI(T, X). Note that
2 (xk - Zk,Hk-i(xk-i - Zk) - ηgki
=2(Xk - Zk,Hk-i(xk-i - Zk - ηH--ιgk-i) + 2 (Xk - Zk, η (gk-i - gk))
(a)
≤ 2((Xk-i - ηH--igk) - (xk-i - ηHk-tibk-i) ,η (gk-i - gk))
=2η2 kgk-i - gkkH-1 = 2η2 ∣∣gk-i - gk + ek-i + EkkH-1
k-1	k-1
(b)	/	、 2
≤ 2η2 (kgk -i - gk∣∣H--1 + kEk-IkH--1 + kEk kH--J
(c)	/l	、
≤ 2η2 ("δ^ kZk-i - Zk kHk-1 + kEk-IkH--1 + kEk kH--1
≤ 6η2 (Q∣∣Zk-i- Zkι∣Hk-1+ kEk-IkHT + kEk∣∣H-1
δ2	k-1	Hk-1	Hk-1
(20)
2
19
Published as a conference paper at ICLR 2020
where (a) holds by the update rule of Zk and Xk in Algorithm 2, (b) holds by the triangle inequality,
(c) holds by utilizing the Lipschitz continuity of T, Lemma 2 and the fact that Hk_1 占 δI for any
k, (d) holds since (a + b + c)2 ≤ 3a2 + 3b2 + 3c2.
Define Λk = 2(x* - Zk, ηek). Taking X = x* in (18) and combining (19) and (20), we have
llχk- XJHk-ι ≤ llχk-ι- XJHk-I - llχk-ι- zkIlHk-ι - l∣zk- XkllHk-I +	-∣∣zk-ι- ZkkHk-ι
+ 6η2kek-i∣∣H-ι +6η2∣∣ek IIH-I +Ak
j k — 1	j k- 1
(21)
Noting that
l∣zk-ι - zk∣∣Hk-ι = l∣zk-ι - Xk-i ÷ Xk-i - zk∣∣Hk-ι
≤ 3l∣zk-1 - Xk-IllHk-I ÷ 3lXk-i - zkllHk-ι ÷ 31zk - Xkι∣Hk-ι,
we rearrange terms in (21), which yields
6η2L2 /
IlXk-I -	zk ∣∣Hk-ι	÷ llzk	- Xk ∣∣Hk-ι	-	J2-	13∣∣zk-1 - Xk-IIIHk-1 ÷	31Xk-1 - zk ∣∣Hk-ι ÷3Hzk	- Xk ∣∣Hk-ιJ
≤ llXk-1 - χ*∣∣Hk-ι - llXk - χ*llHk-ι ÷ 6η2l∣ek-1∣∣H-1 ÷ 6η2l∣ek∣∣H-1 ÷ Ak
k-1	k-1
(22)
Taking summation over k = 1,..., N in (22), and noting that X0 = z0, ∣X∣2--1 ≥ IlXllM-1 for all
Ht-1	Ht
X and t ≥ 1, we have
(1- P)X ∣Xk-1-zk∣Hk-1 ÷ (1- 36F)± ∣Xk-zk∣Hk-1
∖	) k=1	∖	)k = 1
N	N	N
≤ E ^lXk-1 - X*!Hk-1 - 1Xk - X*!Hk-1) ÷ 12η2 H∣e01H-1÷E l∣ek!H-」J ÷ EAk
k=1	2 2	k=1	k=1 (23)
By taking η ≤ 金,we have 1 - 36}L ≥ 1, and we have the result.	□
Lemma 4. When ||b1：N,i||2 ≤ δNα with 0 ≤ Q ≤ 1/2 for every i, we have
N
E (IlXk-I- χ*llHk-1 - IXk - χ*lHk-1) ≤ D2δ ÷ D2 ∙dδ(N - 1)α	(24)
k=1
Proof.
N
E (∣∣χk-1 -χ*∣Hk-1 - lχk -χ*lHk-1)
k = 1
=llχ0 - χ*llH0 - llχ1 -χ*llH0 ÷ llχ1 - χ*lH1 - llχ2 -χ*lH1 ÷ …÷ I∣xn-1 -x*∣Hn-1 - I∣xn - x*∣Hn-1
≤ lχ0-χ*lHo ÷ (-lχ1-χ*lHo ÷ llχ1-χ*lH1) ÷...÷( -IχN-1-x*∣Hn-2 ÷ llχN-1-x*∣Hn-1)
≤ I∣x0	-	x*	∣∣H0	÷ D2 (tr(HI - H0) ÷ tr(H2 - HI) ÷ . . . ÷ tr(HN-1 - HN-2))
=I∣x0	-	x*	∣∣H0	÷ D2 (tr(HN-1 - H0)) ≤ I∣x0 - x* ∣∣H0 ÷ D2tr(HN-1) ≤ D2δ ÷	D2 ∙ dδ(N	- 1)0
(25)
□
Lemma 5. When ||b1：N,i||2 ≤ δNα with 0 ≤ Q ≤ 1/2 for every i, we have
N
E 96η2∣∣e°∣∣H-1 ÷ 100η2 E IIek∣∣H-∖
_	°	k=1	- 1
≤ 9⅛2 ÷100η2 (2δdN。÷ 学
mδ	δ
(26)
20
Published as a conference paper at ICLR 2020
Proof. Note that
N
E X kk k2Hk--11
k=1
N
E Xkgbk-gkk2H-1
Hk-1
k=1
NN
XEkgbk-gkk2H-1 =X Ekgbkk2H-1 - kgkk2H-1
k=1	-1 k=1	-1	-1
N	NN
≤XEkgbkk2H-1 =XEkgbkk2H-1+X Ekbgkk2H-1 -Ekgbkk2H-1
k=1	k-1	k=1	k	k=1	k-1	k
NN	NN
=XEkgbkk2H-1+XEbgk,(Hk--11-Hk-1)gbk≤XEkgbkk2H-1+XEtr(Hk--11-Hk-1)G2
kk
k=1	k=1	k=1	k=1
(a)	d	(b)	G2d
≤ E 2£ kbi：N,ik2 + tr(H-1 )G2 ≤ 2δdNα + 工
i=1
(27)
where (a) holds since we have PkN=1 kgbkk2H-1 ≤ 2 Pid=1 kgb1:N,ik2 by the setting of Hk and utiliz-
i×∙
ing Lemma 4 of (Duchi et al., 2011), (b) holds because of kgb1:N,ik2 ≤ δNα.
22
In addition, We have E ∣∣e0∣∣H-1 ≤ m^，and hence
N
E 96η2ke0k2H-1 + 100η2 X kekk2H-1
k=1	-1
≤ S + 100∕(2δdNα + Gd
mδ	δ
(28)
□
D.2 Main Proof of Theorem 2
Proof. Our goal is to bound N PN=I EIlT(Zk)∣∣2∙ Note that
kηT(Zk)kH-j[ = IIHk-I	(Zk-(Zk	-ηH-1IT(ZkD)Il	= IIHI-I	(Zk-Xk + Xk-(Zk-ηH-1ιT(Zk)))∣∣
≤) (IIH- (Zk-Xk)II + IIH1-1 [Xk - (Zk -ηHfc2ιT(Zk))] II)2
≤) 2 IIH1/21 (Zk-Xk) II2 + 2 IIH1/21 [Xk - (Zk - ηHfc2ιT⑥))]『
= 2 kZk - XkkHk-1 + 2 IIH-I [Xk-1 - ηH-⅛ - (Zk - ηH-1ιT(Zk))]『
(d)
≤ 2 IZk - Xk IHk-1	+ 4 IXk-1	-	Zk IHk-1	+ 4η	Igbk	- T (Zk)IHk--11
= 2 IZk - Xk I2Hk-1 + 4 IXk-1 - Zk I2Hk-1 + 4η2 Iek I2Hk--11
(29)
Where (a) holds by the triangle inequality, (b) is due to (a+ b)2 ≤ 2a2 + 2b2, (c) holds by the update
rule of Xk of Algorithm 2, (d) comes from the triangle inequality and (a + b)2 ≤ 2a2 + 2b2 .
21
Published as a conference paper at ICLR 2020
Taking summation over k = 1, . . . , N over (29) and invoking Lemma 3, we have
NN
X kηT (zk)k2Hk--11 ≤ X 2 kzk - xkk2Hk-1 +4 kxk-1 -zkk2Hk-1 +4η2 kkk2Hk--11
k=1	k=1
1N	1N	N
≤ 8 ( 2 X Ilzk - xk kHk-1 + 2 X kxk-1 - zk llHk-i ] + 4η X llek kH-11
k=1	k=1	k=1
≤	8 (X (kxk-1 - X*kHk-1 - kxk - X* kHk-1) + 12η ( lle0kH-ι + X llek kH -」1 ) + X Ak
k=1	k=1	k-1	k=1
N
+ 4η2 X kk k2Hk--11
k=1
N	NN
= 8X kxk-1 - x*k2Hk-1 - kxk - x*k2Hk-1 + 96η2k0k2H-1 + 100η2 X kkk2H-1 + 8XΛk
k=1	k=1	-1 k=1
(30)
Taking expectation on both sides, and invoking Lemma 4 and Lemma 5, and noting that
E PkN=1 Λk = 0, we have
X E kηT(Zk) kH-11 ≤ 8 (D2δ + D2 ∙ dδ(N - 1)α) + 96η2σ2 + I00η2 0δdNα +
k=1	k-1	m
G2d
(31)
δ
Dividing η2N on both sides, we have
1 X	2	∕8D2δ2(1 + d(N - 1)α) , 100 (σ2/m + d (2δ2Nɑ + G2))
N 上E kT(Zk)kH--ι ≤ -----------η2N----------+----------------N------------
k=1
(32)
□
E More Experimental Results on CIFAR10
In Figure 7, we compare the performance of OSG, Alternating Adam (AlterAdam) and OAdagrad
under the same minibatch size setting on CIFAR10 dataset, where one epoch means one pass of
the dataset. We can see that OAdagrad and Alternating Adam behave consistently better than OSG.
When the minibatch size is small (e.g., 64), OAdagrad and Alternating Adam have comparable
performance, but when the minibatch size is large (e.g., 128, 256), OAdagrad converges faster than
Alternating Adam. This phenomenon shows the benefits of OAdagrad when large minibatch size is
used.
Figure 7: OAdagrad, OSG and Alternating Adam for WGAN-GP on CIFAR10 data with different
batch sizes
22
Published as a conference paper at ICLR 2020
F The equivalence between OSG in unconstrained case and the
algorithm in Daskalakis et al. (2017)
Define gk = m^ PmI T(Zk; ξk), then the update rule of Algorithm 1 becomes
Zk = Xk-I - ngk-1	(33)
and
Xk = Xk-1 - η^k.	(34)
These two equalities together imply that
Zk+ι = Xk - η^k = χk-ι - 2ηgk = Zk + ηgk-ι - 2ηgk,	(35)
where the first equality comes from (33) by replacing k to k + 1, the second equality holds by (34),
and the third equality holds by using (33) again. (35) is the algorithm in (Daskalakis et al. 2017).
G The existence of MVI solution may not imply
pseudo-monotonicity
Consider the function f : R → R, where
f(x)= c1os(x)
if0 ≤ x ≤ 2π
if x ≤ 0 or x ≥ 2π
Define T(x) = Vf (x). Then T(x) = — Sin(X) if 0 ≤ X ≤ 2π and T(x) = 0 if X ≤ 0 or X ≥ 2π.
Then we know that π is the solution of both SVI (i.e. hT (π), x - πi ≥ 0 for any x ∈ X) and MVI
(i.e. hT (X), X - πi ≥ 0 for any X ∈ X). However T is not pseudo-monotone. To see this, take
x = 0 and y = ∏ and We havehT(x), y - Xi = 0 and(T(y), y - Xi < 0, which means that T is not
pseudo-monotone.
23