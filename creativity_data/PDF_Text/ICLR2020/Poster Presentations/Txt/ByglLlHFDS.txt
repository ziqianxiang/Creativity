Published as a conference paper at ICLR 2020
Expected Information Maximization
Using the I-Projection for Mixture Density
Estimation
Philipp Becker
Autonomous Learning Robots, KIT
Bosch Center for Artificial Intelligence
Correspondence to: philipp.becker@kit.edu
Oleg Arenz
Intelligent Autonomous Systems, TU Darmstadt
Gerhard Neumann
Autonomous Learning Robots, KIT
Bosch Center for Artificial Intelligence
University of Tubingen
Ab stract
Modelling highly multi-modal data is a challenging problem in machine learning.
Most algorithms are based on maximizing the likelihood, which corresponds to
the M(oment)-projection of the data distribution to the model distribution. The
M-projection forces the model to average over modes it cannot represent. In con-
trast, the I(nformation)-projection ignores such modes in the data and concentrates
on the modes the model can represent. Such behavior is appealing whenever we
deal with highly multi-modal data where modelling single modes correctly is more
important than covering all the modes. Despite this advantage, the I-projection is
rarely used in practice due to the lack of algorithms that can efficiently optimize it
based on data. In this work, we present a new algorithm called Expected Informa-
tion Maximization (EIM) for computing the I-projection solely based on samples
for general latent variable models, where we focus on Gaussian mixtures models
and Gaussian mixtures of experts. Our approach applies a variational upper bound
to the I-projection objective which decomposes the original objective into single
objectives for each mixture component as well as for the coefficients, allowing
an efficient optimization. Similar to GANs, our approach employs discriminators
but uses a more stable optimization procedure, using a tight upper bound. We
show that our algorithm is much more effective in computing the I-projection than
recent GAN approaches and we illustrate the effectiveness of our approach for
modelling multi-modal behavior on two pedestrian and traffic prediction datasets.
1	Introduction
Learning the density of highly multi-modal distributions is a challenging machine learning problem
relevant to many fields such as modelling human behavior (Pentland & Liu, 1999). Most common
methods rely on maximizing the likelihood of the data. It is well known that the maximum likelihood
solution corresponds to computing the M(oment)-projection of the data distribution to the parametric
model distribution (Bishop, 2006). Yet, the M-projection averages over multiple modes in case the
model distribution is not rich enough to fully represent the data (Bishop, 2006). This averaging
effect can result in poor models, that put most of the probability mass in areas that are not covered
by the data. The counterpart of the M-projection is the I(nformation)-projection. The I-projection
concentrates on the modes the model is able to represent and ignores the remaining ones. Hence, it
does not suffer from the averaging effect (Bishop, 2006).
In this paper, we explore the I-projection for mixture models which are typically trained by maximiz-
ing the likelihood via expectation maximization (EM) (Dempster et al., 1977). Despite the richness
of mixture models, the averaging problem remains as we typically do not know the correct number
1
Published as a conference paper at ICLR 2020
(a) Expert Data
(b) M-projection
(c) I-projection
Figure 1: Illustration of the I-ProjeCtion vs. the M-ProjeCtion for modelling behavior. (a): A robot
reaches a target point while avoiding an obstacle. There are two different types of solutions, above
and below the obstaCle. A single Gaussian is fitted to the exPert data in joint sPaCe. (b): The M-
projection fails to reach the target and collides with the obstacle. (c): The I-projection ignores the
second mode and reaches the target while avoiding the obstacle.
of modes and it is hard to identify all modes of the data correctly. By the use of the I-projection,
our mixture models do not suffer from this averaging effect and can generate more realistic samples
that are less distinguishable from the data. In this paper we concentrate on learning Gaussian mix-
ture models and conditional Gaussian mixtures of experts (Jacobs et al., 1991) where the mean and
covariance matrix are generated by deep neural networks.
We propose Expected Information Maximization (EIM) 1, a novel approach capable of computing
the I-projection between the model and the data. By exploiting the structure of the I-projection,
we can derive a variational upper bound objective, which was previously used in the context of
variational inference (Maal0e et al., 2016; Ranganath et al., 2016; Arenz et al., 2018). In order
to work with this upper bound objective based on samples, we use a discriminator to approximate
the required density ratio, relating our approach to GANs (Goodfellow et al., 2014; Nowozin et al.,
2016; Uehara et al., 2016). The discriminator also allows us to use additional discriminative features
to improve model quality. In our experiments, we demonstrate that EIM is much more effective in
computing the I-projection than recent GAN approaches. We apply EIM to a synthetic obstacle
avoidance task, an inverse kinematic task of a redundant robot arm as well as a pedestrian and car
prediction task using the Stanford Drone Dataset (Robicquet et al., 2016) and a traffic dataset from
the Next Generation Simulation program.
2	Preliminaries
Our approach heavily builds on minimizing Kullback-Leibler divergences as well as the estimation
of density ratios. We will therefore briefly review both concepts.
Density Ratio Estimation. Our approach relies on estimating density ratios r(x) = q(x)/p(x)
based on samples of q(x) and p(x). Sugiyama et al. (2012) introduced a framework to estimate such
density ratios based on the minimization of Bregman divergences (Bregman, 1967). For our work
we employ one approach from this framework, namely density ratio estimation by binary logistic
regression. Assume a logistic regressor C(x) = σ(φ(x)) with logits φ(x) and sigmoid activation
function σ. Further, we train C(x) on predicting the probability that a given sample x was sampled
from q(x). It can be shown that such a logistic regressor using a cross-entropy loss is optimal for
C(x) = q(x)/ q(x) + p(x) . Using this relation, we can compute the log density ratio estimator by
1 q(χ)	1 q(x)/(q(x) + P(X))	1 C(χ)	-i∕λv、
log 而二lθg P(x)∕(q(X)+ P(x)) =lθg1-C(X) ” (C(X)) = φ(X).
The logistic regressor is trained by minimizing the binary cross-entropy
argminφ(x)BCE(φ(X),p(X),q(X)) = -Eq(x) [log (σ(φ(X)))] - Ep(x) [log (1 - σ(φ(X)))] ,
where different regularization techniques such as `2 regularization or dropout (Srivastava et al.,
2014) can be used to avoid overfitting.
1Code available at https://github.com/pbecker93/ExpectedInformationMaximization
2
Published as a conference paper at ICLR 2020
Moment and Information Projection. The Kullback-Leibler divergence (Kullback & Leibler,
1951) is a standard similarity measure for distributions. It is defined as KL (p(x)||q(x)) =
p(x) logp(x)/q(x)dx. Due to its asymmetry, the Kullback-Leibler Divergence provides two dif-
ferent optimization problems (Bishop, 2006) to fit a model distribution q(x) to a target distribution
p(x), namely
argminq(x) KL (p(x)||q(x))
'----------------{z----------------}
Moment-projection
and argminq(x)KL (q(x)||p(x)) .
'------------------{------------------}
Information-projection
Here, we will assume that p(x) is the data distribution, i.e., p(x) is unknown but we have access to
samples from p(x). It can easily be seen that computing the M-projection to the data distribution
is equivalent to maximizing the likelihood (ML) of the model (Bishop, 2006). ML solutions match
the moments of the model with the moments of the target distribution, which results in averaging
over modes that can not be represented by the model. In contrast, the I-projection forces the learned
generator q(x) to have low probability whenever p(x) has low probability, which is also called zero
forcing.
3	Related Work
We will now discuss competing methods for computing the I-projection that are based on GANs.
Those are, to the best of our knowledge, the only other approaches capable of computing the I-
projection solely based on samples of the target distribution. Furthermore, we will distinguish our
approach from approaches based on variational inference that also use the I-projection.
Variational Inference. The I-projection is a common objective in Variational Inference (Opper &
Saad, 2001; Bishop, 2006; Kingma & Welling, 2013). Those methods aim to fit tractable approx-
imations to intractable distributions of which the unnormalized density is available. EIM, on the
other hand, does not assume access to the unnormalized density of the target distributions but only
to samples. Hence, it is not a variational inference approach, but a density estimation approach.
However, our approach uses an upper bound that has been previously applied to variational infer-
ence (Maal0e et al., 2016; Ranganath et al., 2016; Arenz et al., 2018). EIM is especially related
to the VIPS algorithm (Arenz et al., 2018), which we extend from the variational inference case to
the density estimation case. Additionally, we introduce conditional latent variable models into the
approach.
Generative Adversarial Networks. While the original GAN approach minimizes the Jensen-
Shannon Divergence (Goodfellow et al., 2014), GANs have since been adapted to a variety of other
distance measures between distributions, such as the Wasserstein distance (Arjovsky et al., 2017),
symmetric KL (Chen et al., 2018) and arbitrary f -divergences (Ali & Silvey, 1966; Nowozin et al.,
2016; Uehara et al., 2016; Poole et al., 2016). Since the I-projection is a special case of an f-
divergence, those approaches are of particular relevance to our work. Nowozin et al. (2016) use
a variational bound for f -divergences (Nguyen et al., 2010) to derive their approach, the f -GAN.
Uehara et al. (2016) use a bound that directly follows from the density ratio estimation under Breg-
man divergences framework introduced by Sugiyama et al. (2012) to obtain their b-GAN. While the
b-GAN’s discriminator directly estimates the density ratio, the f -GAN’s discriminator estimates an
invertible mapping of the density ratio. Yet, in the case of the I-projection, both the f -GAN and the
b-GAN yield the same objective, as we show in Appendix C.2. For both the f -GAN and b-GAN
the desired f -divergence determines the discriminator objective. Uehara et al. (2016) note that the
discriminator objective, implied by the I-projection, is unstable. As both approaches are formulated
in a general way to minimize any f -divergence, they do not exploit the special structure of the I-
projection. Exploiting this structure permits us to apply a tight upper bound of the I-projection for
latent variable models, which results in a higher quality of the estimated models.
Li et al. (2019) introduce an adversarial approach to compute the I-projection based on density
ratios, estimated by logistic regression. Yet, their approach assumes access to the unnormalized
target density, i.e., they are working in a variational inference setting. The most important difference
to GANs is that we do not base EIM on an adversarial formulation and no adversarial game has to
be solved. This removes a major source of instability in the training process, which we discuss in
more detail in Section 4.3.
3
Published as a conference paper at ICLR 2020
4	Expected Information Maximization
Expected Information Maximization (EIM) is a general algorithm for minimizing the I-projection
for any latent variable model. We first derive EIM for general marginal latent variable models, i.e.,
q(x) = q(x|z)q(z)dz and subsequently extend our derivations to conditional latent variable mod-
els, i.e., q(x|y) = q(x|z, y)q(z|y)dz. EIM uses an upper bound for the objective of the marginal
distribution. Similar to Expectation-Maximization (EM), our algorithm iterates between an M-step
and an E-step. In the corresponding M-step, we minimize the upper bound and in the E-step we
tighten it using a variational distribution.
4.1	EIM for Latent Variable Models
The I-projection can be simplified using a (tight) variational upper bound (Arenz et al., 2018) which
can be obtained by introducing an auxiliary distribution q(z|x) and using Bayes rule
KL(q(X)IIp(X))= Uq,p(q) -Eq(x)[KL(q(ZIx)IIq(ZIx))],
、 {z }	、--------------{------------}
upper bound	≥0
where
uq,p(q) = ZZ q(XIz)q(Z) (log "xpZx：(Z)
一log q(zIx) dzdx.
(1)
The derivation of the bound is given in Appendix B. It is easy to see that Uq,p(q) is an upper bound
as the expected KL term is always non-negative. In the corresponding E-step, the model from the
previous iteration, which We denote as qt(x), is used to tighten the bound by setting q(zIx) =
qt(xIZ)qt(Z)/qt(x). In the M-step, we update the model distribution by minimizing the upper bound
Uq,p(q). Yet, opposed to Arenz et al. (2018), we cannot work directly with the upper bound since it
still depends on log p(x), which we cannot evaluate. However, we can reformulate the upper bound
by setting the given relation for q(zIx) of the E-step into Eq. 1,
Uqt,p(q)
q(Z)
q(xIz)log qt(x)dx + KL (q(xIz)IIqt(xIz))
p(x)
dZ + KL (q(Z)IIqt(Z)) . (2)
The upper bound now contains a density ratio between the old model distribution and the data. This
density ratio can be estimated using samples of qt and p, for example, by using logistic regression
as shown in Section 2. We can use the logits φ(x) of such a logistic regressor to estimate the log
density ratio log(qt(x)/p(x)) in Equation 2. This yields an upper bound Uqt,φ(q) that depends on
φ(x) instead of p(x). Optimizing this bound corresponds to the M-step of our approach. In the
E-step, we set qt to the newly obtained q and retrain the density ratio estimator φ(x). Both steps
formally result in the following bilevel optimization problem
qt+ι ∈ argminq(χ)Uqt,φ∙- (q) s.t. φ*(x) ∈ argmin°(x)BCE(0(x),p(x), qt(x)).
Using a discriminator also comes with the advantage that we can use additional discriminative fea-
tures g(x) as input to our discriminator that are not directly available for the generator. For example,
if x models trajectories of pedestrians, g(x) could indicate whether the trajectory reaches any po-
sitions that are not plausible such as rooftops or trees. These features simplify the discrimination
task and can therefore improve our model accuracy which is not possible with M-projection based
algorithms such as EM.
4.2	EIM for Conditional Latent Variable Models
For conditional distributions, we aim at finding the conditional I-projection
argminq(x|y)Ep(y) [KL (q(xIy)IIp(xIy))] .
The derivations for the conditional upper bound follow the same steps as the derivations in the
marginal case, where all distributions are extended by the context variable y. We refer to the supple-
ment for details. The log density ratio estimator φ(x, y) now discriminates between samples of the
joint distribution of x and y. For training φ(x, y) we generate a new sample x for each context y,
using the distribution qold(xIy). Hence, as the context distribution is the same for the true data and
the generated data, the log density ratio of the conditional distributions is equal to the log density
ratio of the joint distributions.
4
Published as a conference paper at ICLR 2020
(a) Log Density Ratio
(b) Adversarial Formulation
(c) EIM
Figure 2: An illustrative example of the benefits of EIM versus an adversarial formulation. (a): The
true log density ratio of the model and the target distribution (both are Gaussians). The location of
the optimum is unbounded. (b): In the adversarial formulation, the generator minimizes the expected
log density ratio. If we neglect that the adversarial discriminator changes with every update step of
the generator, the generator updates yield an unbounded solution. Hence, too aggressive updates of
the generator yield unstable behavior. (c): The upper bound of EIM introduces an additional KL-
term as objective. Optimizing this objective directly yields the optimal solution without the need to
recompute the density ratio estimate.
4.3	Relation to GANs and EM
There is a close relation of EIM to GANs due to the use of a logistic discriminator for the density
ratio estimation. It is therefore informative to investigate the differences in the case without latent
variables. In an adversarial formulation, the density ratio estimator would directly replace the density
ratio in the original I-projection equation, i.e.,
argmi□q(x) / q(x)φ*(x)dx s.t. φ*(x) ∈ argmin@(x)BCE(0(x),p(x),q*(x)).
However, such adversarial games are often hard to optimize. In contrast, EIM offers a bilevel opti-
mization problem where the discriminator is explicitly learned on the old data distribution qt(x),
argminq(x) / q(x)φ*(x)dx + KL (q(x)∣∣qt(x)) s.t. φ*(x) ∈ argmin@(x)BCE(0(x),p(x),qt(x)).
Thus, there is no circular dependency between the optimal generator and the optimal discriminator.
Figure 2 illustrates that the proposed non-adversarial formulation does not suffer from too large
model updates. Choosing the number and step-size of the updates is thus far less critical.
EIM can also be seen as the counter-part of Expectation-Maximization (EM). While EM optimizes
the M-projection with latent variable models, EIM uses the I-projection. However, both approaches
decompose the corresponding projections into an upper bound (or lower bound for EM) and a KL-
term that depends on the conditional distribution q(z|x) to tighten this bound. The exact relationship
is discussed in Appendix C.1.
4.4	EIM for Gaussian Mixtures Models
We consider Gaussian mixture models with d components, i.e., multivariate Gaussian distributions
q(x∣zi) = N(μi, ∑i) and a categorical distribution q(z) = Cat(π) for the coefficients. As the latent
distribution q(z) is discrete, the upper bound in EIM (Equation 2) simplifies, as the integral over z
can be written as a sum. Similar to the EM-algorithm, this objective can be updated individually
for the coefficients and the components. For both updates, we will use similar update rules as
defined in the VIPS algorithm (Arenz et al., 2018). VIPS uses a trust region optimization for the
components and the coefficients, where both updates can be solved in closed form as the components
are Gaussian. The trust regions prevent the new model from going too far away from qt where the
density ratio estimator is inaccurate, and hence, further stabilize the learning process. We will now
sketch both updates, where we refer to Appendix B.2 for the full details.
For updating the coefficients, we assume that the components have not yet been updated, and there-
fore KL (q(x|zi)||qt(x|zi)) = 0 for all zi. The objective for the coefficients thus simplifies to
d
argminq(z)	q(zi)φ(zi) + KL (q(z)||qt(z)) with φ(zi) = Eq(x|zi) [φ(x)] ,	(3)
i=1
5
Published as a conference paper at ICLR 2020
where φ(zi) can be approximated using samples from the corresponding component. This objective
can easily be optimized in closed form, as shown in the VIPS algorithm (Arenz et al., 2018). We also
use a KL trust-region to specify the step size of the update. For updating the individual components,
the objective simplifies to
argminq(x|zi)Eq(x|zi) [φ(x)] + KL (q(x|zi)||qt(x|zi)) .	(4)
As in VIPS, this optimization problem can be solved in closed form using the MORE algorithm
(Abdolmaleki et al., 2015). The MORE algorithm uses a quadratic surrogate function that locally
approximates φ(x). The resulting solution optimizes Equation 4 under a KL trust-region. The
pseudo-code of EIM for GMMs can be found in Appendix A.
4.5	EIM for Gaussian Mixtures of Experts
In the conditional case, we consider mixtures of experts consisting of d multivariate Gaus-
sians, whose parameters depend on an input y in a nonlinear fashion, i.e., q(x|zi, y) =
N (ψμ,i(y), ψ∑,i(y)) and the gating is given by a neural network with Softmax output. We again
decompose the resulting upper bound into individual update steps for the components and the gating.
Yet, closed-form solutions are no longer available and we need to resort to gradient-based updates.
The objective for updating the gating is given by
d
argminq(z∣y) E (Ep(y)q(χ∣Zi,y) [q(zily)φ(χ, y)]) + Ep(y) [KL (q(Hy)IIqt(Hy))].	⑸
i=1
We minimize this equation w.r.t. the parameters of the gating by gradient descent using the Adam
(Kingma & Ba, 2014) algorithm. The objective for updating a single component i is given by
argminq(χ∣Zi,y)Ep(y∣Zi) [Eq(χ∣Zi,y) [φ(x, y)] + KL (q(χM y)||qt(XIzi, y川,	⑹
where p(y∣zi) = p(y)q(zi∣y)∕q(zi). Note that We normalized the objective by q(zi) =
p(y)q(ziIy)dy to ensure that also components with a low prior q(zi) get large enough gradi-
ents for the updates. As we have access to the derivatives of the density ratio estimator w.r.t. χ, we
can optimize Equation 6 with gradient descent using the reparametrization trick (Kingma & Welling,
2013) and Adam.
5	Evaluation
We compare our approach to GANs and perform an ablation study on a toy task, with data sampled
from known mixture models. We further apply our approach to two synthetic datasets, learning
the joint configurations of a planar robot as well as a non-linear obstacle avoidance task, and two
real datasets, namely the Stanford Drone Dataset (Robicquet et al., 2016) and a traffic dataset from
the Next Generation Simulation program. A full overview of all hyperparameters and network
architectures can be found in Appendix E.
5.1	Comparison to Generative Adversarial Approaches and Ablation Study
We compare to the f -GAN which is the only other method capable of minimizing the I-projection
solely based on samples. We use data sampled from randomly generated GMMs with different
numbers of components and dimensionalities. To study the influence of the previously mentioned
differences of EIM to generative adversarial approaches, we also perform an ablation study. We
compare to a version of EIM where we neglect the additional KL-term (EIM, no KL), a version
were we trained all components and the coefficients jointly using gradient descent (Joint EIM), and
a version where we do both (Joint EIM, no KL). The average I-projection achieved by the various
approaches can be found in Figure 3.
5.2	Line Reaching with Planar Robot
We extended the introductory example of the planar reaching task and collected expert data from
a 10-link planar robot tasked with reaching a point on a line. We fitted GMMs with an increasing
6
Published as a conference paper at ICLR 2020
(a) Single Gaussian
5	10	15	20
Dimensionality
(b) 5 Components
01
10 -10
noitcejorP-I
1012
10 10 -10 -10
noitcejorP-I
Dimensionality
Figure 3: Average I-projection achieved for EIM, the f -GAN, and the modified EIM versions. The
task is to fit a model to samples from a randomly generated GMM of different dimensions. Both
the model and the target GMM have the same number of components. EIM clearly outperforms the
generative adversarial approaches, especially for larger dimensions. The ablation study shows that
the separated, closed-form updates clearly yield better results. Neglecting the KL has a big influence
for lower dimensions, but is out-weighted by the error of the discriminator at higher dimensions.
--
-
10
ESMR-goL
(b) Samples for varying numbers of components. Upper row: EIM. Lower row: EM
Figure 4: Average distance to line and samples for robot line reaching. While EIM for small numbers
of components ignores modes, not considering the whole line, it learns models that achieve the
underlying task, i.e., reach the line. Providing additional information to the density ratio estimator
further decreases the average distance to the line. EM, on the other hand, averages over the modes,
and thus, fails to reach the line even for large numbers of components.
number of components using EIM, EIM with additional features, where the end-effector coordinates
for a given joint configuration were provided, and EM. Even for a large number of components, we
see effects similar to the introductory example, i.e., the M-projection solution provided by EM fails
to reach the line while EIM manages to do so. For small numbers, EIM ignores parts of the line,
while more and more parts of it get covered as we increase the number of components. With the
additional features, the imitation of the line reaching was even more accurate. See Figure 4, for the
average distance between the end-effector and the line as well as samples from both EM and EIM.
5.3	Pedestrian and Traffic Prediction
We evaluated our approach on data from the Stanford Drone Dataset (SDD) (Robicquet et al., 2016)
and a traffic dataset from the Next Generation Simulation (NGS) program2. The SDD data consists
of trajectories of pedestrians, bikes, and cars and we only used the data corresponding to a single
video of a single scene (Video 1, deathCircle). The NGS data consists of trajectories of cars where
we considered the data recorded on Lankershim Boulevard. In both cases we extracted trajectories
of length 5, yielding highly multimodal data due to pedestrians, bikes, and cars moving at different
speeds and in different directions. We evaluated on the achieved log-likelihood of EIM and EM, see
Figure 5. EM achieves the highest likelihood as it directly optimizes this measure. However, we can
already see that EM massively overfits when we increase the number of components as the test-set
likelihood degrades. EIM, on the other hand, produced better models with an increasing number of
components. Additionally, we generated a mask indicating whether a given point is on the road or
2
https://data.transportation.gov/Automobiles/Next-Generation-Simulation-NGSIM-Vehicle-Trajector/8ect-6jqj
7
Published as a conference paper at ICLR 2020
(a) Log-Likelihood SDD
(b) Evaluation with Mask SDD
(c) Log-Likelihood NGS
(d) Evaluation with Mask NGS
Figure 5: Results on the traffic prediction tasks. Naturally, EM achieves the highest training log-
likelihood. Yet, for large numbers of components, a severe amount of overfitting is observed. EIM,
on the other hand, has no problems working with high numbers of components and achieves a
higher test log-likelihood, despite optimizing a different objective. We also provided a ’road mask’
as additional features for the discriminator. We used this road mask to evaluate how realistic the
generated samples are. While EIM without features produced more realistic samples on the Lanker-
shim dataset, we needed the feature input to outperform EM on this evaluation on the SDD dataset.
(a) Success Probability
(b) Samples EIM
(c) Samples EM
Figure 6: Results on the obstacle avoidance task. (a): Even for a small number of components, EIM
has a rather high probability of success, i.e., placing a trajectory that does not hit any obstacle. Even
with a sufficient number of components, i.e., eight, EM fails to achieve good results. (b) and (c):
Samples of a mixture with 4 components, learned by EIM and EM respectively. EM clearly averages
over multiple modes in the data distribution.
not and evaluated how realistic the learned models are by measuring the amount of samples violating
the mask, i.e., predicting road users outside of the road. We also evaluate a version of EIM where we
provide additional features indicating if the mask is violated. EIM achieves a much better value on
this mask for the NGS dataset, while we needed the additional mask features for the discriminator on
the SDD dataset to outperform EM. Both experiments show that EIM can learn highly multi-modal
density estimates that produce more realistic samples than EM. They further show that the models
learned by EIM can be refined by additional prior knowledge provided as feature vectors.
5.4	Obstacle Avoidance
We evaluate the conditional version of EIM on an artificial obstacle avoidance task. The context
contains the location of three obstacles within an image. The gating, as well as the components,
are given by deep neural networks. Details about the network architectures can be found in the
Appendix. The data consists of trajectories going from the left to the right of the image. The trajec-
tories are defined by setting 3 via-points such that no obstacle is hit. To generate the data we sample
via-points over and under the obstacles with a probability proportional to the distance between the
obstacle and the image border. Hence, for three obstacles, there are 23 = 8 different modes in the
data. Note that, like in most real-world scenarios, the expert data is not perfect, and about 13% of the
trajectories in the dataset hit an obstacle. We fit models with various numbers of components to this
data using EIM and EM and compare their performance on generating trajectories that achieve the
goal. Results are shown in Figure 6 together with a visualization of the task and samples produced
by EIM and EM. EIM was able to identify most modes for the different given inputs and did not
suffer from any averaging effect. In contrast, EM does not find all modes. As a consequence, some
8
Published as a conference paper at ICLR 2020
components of the mixture model had to average over multiple modes, resulting in poor quality
trajectories.
6	Conclusion
We introduced Expected Information Maximization (EIM), a novel approach for computing the I-
projection between general latent variable models and a target distribution, solely based on samples
of the latter. General upper bound objectives for marginal and conditional distributions were derived,
resulting in an algorithm similar to EM, but tailored for the I-projection instead of the M-projection.
We introduced efficient methods to optimize these upper bound objectives for mixture models. In our
experiments, we demonstrated the benefits of the I-projection for different behavior modelling tasks.
The introduced approach opens various pathways for future research. While we focused on mixture
models, the derived upper bounds are not exclusive to those and can be used for arbitrary latent
variable models. Another possibility is an online adaptation of the number of used components.
Arenz et al. (2018) propose heuristics for such an adaptation in their VIPS approach. Those could
easily be adapted to our approach.
References
Abbas Abdolmaleki, Rudolf Lioutikov, Jan R Peters, Nuno Lau, Luis Pualo Reis, and Gerhard
Neumann. Model-based relative entropy stochastic search. In Advances in Neural Information
Processing Systems, pp. 3537-3545, 2015.
Syed Mumtaz Ali and Samuel D Silvey. A general class of coefficients of divergence of one dis-
tribution from another. Journal of the Royal Statistical Society. Series B (Methodological), pp.
131-142, 1966.
O. Arenz, M. Zhong, and G. Neumann. Efficient gradient-free variational inference using policy
search. In Proceedings of the 35th International Conference on Machine Learning, pp. 234-243.
pmlr, 2018.
Martin Arjovsky, SoUmith Chintala, and Leon Bottou. Wasserstein gan. arXiv preprint
arXiv:1701.07875, 2017.
Christopher M. Bishop. Pattern Recognition and Machine Learning (Information Science and Statis-
tics). Springer-Verlag, Berlin, Heidelberg, 2006. ISBN 0387310738.
Lev M Bregman. The relaxation method of finding the common point of convex sets and its applica-
tion to the solution of problems in convex programming. USSR computational mathematics and
mathematical physics, 7(3):200-217, 1967.
Liqun Chen, Shuyang Dai, Yunchen Pu, Erjin Zhou, Chunyuan Li, Qinliang Su, Changyou Chen,
and Lawrence Carin. Symmetric variational autoencoder and connections to adversarial learning.
In International Conference on Artificial Intelligence and Statistics, pp. 661-669, 2018.
Arthur P Dempster, Nan M Laird, and Donald B Rubin. Maximum likelihood from incomplete data
via the em algorithm. Journal of the royal statistical society. Series B (methodological), pp. 1-38,
1977.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,
Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Advances in neural infor-
mation processing systems, pp. 2672-2680, 2014.
Jean-Baptiste Hiriart-Urruty and Claude Lemarechal. Fundamentals of convex analysis. Springer
Science & Business Media, 2012.
Robert A Jacobs, Michael I Jordan, Steven J Nowlan, and Geoffrey E Hinton. Adaptive mixtures of
local experts. Neural computation, 3(1):79-87, 1991.
Sham M Kakade. A natural policy gradient. In Advances in neural information processing systems,
pp. 1531-1538, 2002.
9
Published as a conference paper at ICLR 2020
Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. International
Conference on Learning Representations, 12 2014.
Diederik P Kingma and Max Welling. Auto-encoding variational bayes. arXiv preprint
arXiv:1312.6114, 2013.
Solomon Kullback and Richard A Leibler. On information and sufficiency. The annals of mathe-
matical statistics, 22(1):79-86,1951.
Chunyuan Li, Ke Bai, Jianqiao Li, Guoyin Wang, Changyou Chen, and Lawrence Carin. Adver-
sarial learning of a sampler based on an unnormalized distribution. In The 22nd International
Conference on Artificial Intelligence and Statistics, pp. 3302-3311, 2019.
Lars Maal0e, Casper Kaae S0nderby, S0ren Kaae S0nderby, and Ole Winther. Auxiliary deep gen-
erative models. In International Conference on Machine Learning, pp. 1445-1453, 2016.
XuanLong Nguyen, Martin J Wainwright, and Michael I Jordan. Estimating divergence functionals
and the likelihood ratio by convex risk minimization. IEEE Transactions on Information Theory,
56(11):5847-5861, 2010.
Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural sam-
plers using variational divergence minimization. In Advances in Neural Information Processing
Systems, pp. 271-279, 2016.
Manfred Opper and David Saad. Advanced mean field methods: Theory and practice. MIT press,
2001.
Alex Pentland and Andrew Liu. Modeling and prediction of human behavior. Neural Comput.,
11(1):229-242, January 1999. ISSN 0899-7667. doi: 10.1162/089976699300016890. URL
http://dx.doi.org/10.1162/089976699300016890.
Ben Poole, Alexander A Alemi, Jascha Sohl-Dickstein, and Anelia Angelova. Improved generator
objectives for gans. arXiv preprint arXiv:1612.02780, 2016.
Rajesh Ranganath, Dustin Tran, and David Blei. Hierarchical variational models. In International
Conference on Machine Learning, pp. 324-333, 2016.
Alexandre Robicquet, Amir Sadeghian, Alexandre Alahi, and Silvio Savarese. Learning social eti-
quette: Human trajectory understanding in crowded scenes. volume 9912, pp. 549-565, 10 2016.
ISBN 978-3-319-46483-1. doi:10.1007/978-3-319-46484-8_33.
Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov.
Dropout: a simple way to prevent neural networks from overfitting. The Journal of Machine
Learning Research, 15(1):1929-1958, 2014.
Masashi Sugiyama, Taiji Suzuki, and Takafumi Kanamori. Density-ratio matching under the breg-
man divergence: a unified framework of density-ratio estimation. Annals of the Institute of Sta-
tistical Mathematics, 64(5):1009-1044, 2012.
Masatoshi Uehara, Issei Sato, Masahiro Suzuki, Kotaro Nakayama, and Yutaka Matsuo. Generative
adversarial nets from a density ratio estimation perspective. arXiv preprint arXiv:1610.02920,
2016.
10
Published as a conference paper at ICLR 2020
A Pseudo Code
EIM-for-GMMs({Xpj)}j=ι …N, q(x));
Input： Data {xpj) }j=ι…N, Initial Model q(x) = Pd=I q(x∣zi)q(zi) = Pd=I ∏iN(x∣μi, ∑i)
for i in number of iterations do
E-Step:
qt(z) = q(z), qt(X|zi ) = q(X|zi ) for all components i
Update Density Ratio Estimator:
sample data from model {xqj)}j=ι∙∙∙N 〜qt(x)
retrain density ratio estimator φ(x) on {xPj)}j=ι ∙N and {xqj)}j=ι ∙N
M-Step Coefficients:
for i in number of components do
I compute loss Li = N PN=I φ (Xqj)) With samples {xqj)}j=ι…N 〜qt(x∣zi)
end
update q(z) using losses li and MORE equations
M-Step Components:
for i in number of components do
fit φ(x) surrogate to pairs (Xqj), φ (Xqj))) with samples {xqj)}j=ι…N 〜qt(x∖zi)
ʌ
update q(X|zi) using surrogate φ(X) and MORE equations
end
end
Algorithm 1: Expected Information Maximization for Gaussian Mixture Models.
Pseudo-code for EIM for GMMs can be found in algorithm 1
B Derivations
Derivations of the upper bound stated in Equation 1. We assume latent variable models q(x) =
q(x∖z)q(z)dz and use the identities q(x∖z)q(z) = q(z∖x)q(x) and log q(x) = log q(x∖z)q(z) -
log q(z∖x).
KL (q(x)∖∖p(x))	-/"(x)log q(x) dx — [[ a(x∖z)a(z)log q(x) dzdx I q ∖x ιog	Sx	q q q∖xz q z Log	SZ Sx p(x)	p(x)
=	q(x∖Z)q(Z) =	q(x∖Z)q(Z) =	q(x∖Z)q(Z) =	q(x∖Z)q(Z)	log 心⑶,(Z) - log q(z∖x)) dzdx p(x) log q(x|：)q(z)— log q(z∖x) + log q(z∖x) — log q(z∖x)) dzdx q(x∖Z)q(Z) log	-	log q(z∖x) J dzdx — Jq q(x∖z)q(z) (log q(z∖x) — log q(z∖x)) dzdx log q(xPq(Z) — log q(z∖x)) dzdx — Z q(x) Z q(z∖x)log q(⅛)dzdx ,	P(x)	)	JJ	虱 z∖x)
=U(q, q,p) - Eq(X) [KL(q(ZIx)∖∖q(ZIx))].
11
Published as a conference paper at ICLR 2020
After plugging the E-Step, i.e., q(z∣x) = qt(x∣z)qt(z)∕qt(x), into the objective it simplifies to
U (q,q, P)
ZZ q(χ∣z)q(z"g「- log	dzdx
q(x|z)q(z) (log q(x|z) + log q(z) - log p(x) - logqt(x|z) - logqt(z) + logqt(x)) dzdx
ZZ q(χ∣z)q(z) (log qt7x) + log q(xlZ)) + log -q(z)) dzdx
p(x)	qt(x|z)	qt(z)
Z q(z) ( Z q(χ∣z) (log qt7x) + log q(xlz) ) dx + log -q(z)) dz
p(x)	qt(x|z)	qt(z)
∕q(z) / q(x∣z) log 'j”[ dxdz + / q(z) / q(x∣z) log 9,R dxdz + / q(z)log W dz
p(x)	qt(x|z)	qt(z)
jj q(XIz)q(Z) log (PXdzdx + Eq(Z) [KL (q(XIz)IIqt(XIz))] + KL (q(Z)IIqt(Z)),
which concludes the derivation of upper bound of latent variable models.
B.1	Derivations Conditional Upper Bound
By introducing an auxiliary distribution q(z1x, y) the upper bound to the expected KL for conditional
latent variable models q(XIy) = q(XIz, y)q(z Iy)dz can be derived by
Ep(y) [KL (q(XIy)IIp(XIy))]
q(XIy)
JJ p(y)q(XIy)IOg p(xy)dxdy
/P(y) JZq(χIz,y)q(zIy) (log q(x⅞xy⅛)
- log q(zIX, y) dzdXdy
p(y)
q(XIz, y)q(zIy)
( g^Ey^(ZIy)
[og	p(χIy)
-log q(zIx, y) + log ((zIx, y) - log 虱zIx, y) dZdxdy
/ P(y) ZZ q(χEy)q(ZIy)(log q(⅞xf^
—log ((zIx, y) dZdxdy
-	p(y)
q(x1Z, y)q(Z, y) (log ((zIx, y) - log 贸zIx, y)) dZdxdy
/ P(y) ZZ q(xIzy)q(ZIy)(log 加：^；((ZIy)
—log ((zIx, y) dZdxdy
-	p(y)q(xIy)	q(ZIx, y) log
q(ZIx,y)
q(Hx,y)
dZdxdy
=U(q,q,P)- Ep(y),q(x|y)[KL (q(Wx,y)IIq(ZIx,y))] ∙
12
Published as a conference paper at ICLR 2020
During the E-SteP the bound is tightened by setting q(z∣χ, y) = qt(χ∣z, y)qt(z∣y)∕qt(χ∣y).
U (q, 肩 P)
Z p(y) ZZ
Z p(y) ZZ
q(x|z, y)q(z|y)
q(x|z, y)q(z|y)
p(x|y)
- log
qt(x|z, y)qt(z|y)
qt(x|y)
dzdxdy
q(x|z, y)q(z|y)
• (logq(χ∣z,y) + logq(z∣y) - logp(χ∣y) - logqt(χ∣z,y) - logqt(z∣y) + logqt(χ∣y)) dzdxdy
=Zp(y) ZZ q(χ∣z, y)q(z∣y) (log qt(x∣y? + log q,lz,y)) + log q(zly) ) dzdxdy
p(x|y)	qt(x|z,y)	qt(z|y)
=ZP⑹ Zq(z|y) (Zq(x|z，y) (log * + log ⅛ι⅛)dx + log ⅛z∣y))dzdy
=pP(I) /q(zIy) /q(x|Zy)Iogqt(x∣y?dxdzdy
P(xιy)
+ Z p(y) Z q(z|y) Z q(x|z,y)log ；(* y)) dxdzdy + Z p(y) Z q(z|y)log q(z∣) dzdy
=ZZZ p(y)q(z∣y)q(χ∣z,y)log qt((XIIy)) dχdzdy
Py
+ Ep(y),q(z|y) [KL (q(xIz, y)IIqt(xIz, y))] + Ep(y) [KL (q(zIy)IIqt(zIy))] ,
which concludes the derivation of the uPPer bound for conditional latent variable models.
B.2	Using MORE for closed form updates for GMMs
The MORE algorithm, as introduced by Abdolmaleki et al. (2015), can be used to solve oPtimization
Problems of the following form
argmaxq(x)Eq(x)[f (x)] s.t. KL (q(x)IIqold(x)) ≤
for an exPonential family distribution q(x), some function f (x), and an uPPer bound on the allowed
change, . Abdolmaleki et al. (2015) show that the oPtimal solution is given by
q(x) H qoid(x)exp
η η log qoid(χ) + f(χ)
p k η
where η denotes the Lagrangian multiPlier corresPonding to the KL constraint. In order to obtain
this Lagrangian multiPlier, the following, convex, dual function has to be minimized
g(η) = ηe + η log f exp (η log qold,+ f (X)) dx.	⑺
For discrete distributions, such as the categorical distribution used to rePresent the coefficients of
a GMM, we can directly work with those equations. For continuous distributions, Abdolmaleki
et al. (2015) ProPose aPProximating f(x) with a local surrogate. The features to fit this surrogate
are chosen such that they are comPatible (Kakade, 2002), i.e., of the same form as the distributions
sufficient statistics. For multivariate Gaussians, the sufficient statistics are squared features and thus
the surrogate comPatible to such a Gaussian distribution is given by
f(χ) = - 2 XT F X + fτ X + fo ∙
The Parameters of this surrogate can now be used to uPdate the natural Parameters of the Gaussian,
i.e, the precision matrix Q = Σ-1 and q = Σ-1μ by
Q = Qt + 1F and q = qt + 1f ∙
ηη
In order to apply the MORE algorithm to solve the optimization problems stated in Equation 3
and Equation 4 we make two trivial modifications. First, we invert the signs in Equation 3 and
Equation 4, as we are now maximizing. Second, to account for the additional KL term in our
objectives, we add 1 toη, everywhere except the first term of the sum in Equation 7.
13
Published as a conference paper at ICLR 2020
C Elab oration on Related Work
C.1 Relation between EIM and EM
Recall that the Expectation-Maximization (EM) algorithm (Dempster et al., 1977) maximizes the
log-likelihood of the data by iteratively maximizing and tightening the following lower bound
Ep(x) [log q(x)] = Ep(x)
/ 贸z∣x)log
q(x,z) d
ΦR Z
+ Ep(x)
/ 贸z∣x)log
q(ZIx) dz
q(ZR .
Lmq) + Ep(X) [KL伍(ZIx)IIq(ZIx))].
'{βe*}	、------------{-----------}
lower bound	≥0
It is instructive to compare our upper bound (Equation 1) to this lower bound. As mentioned, maxi-
mizing the likelihood is equivalent to minimizing the M-projection, i.e., argminq(x)KL (p(x)IIq(x)),
where, in relation to our objective, the model and true distribution have switched places in the non-
symmetric KL objective. Like our approach, EM introduces an auxiliary distribution q(zIx) and
bounds the objective from below by subtracting the KL between auxiliary distribution and model,
i.e., KL (q(zIx)IIq(zIx)). In contrast, We obtain our upper bound by adding KL (q(zIx)II⅞(zIx)) to
the objective. Again, the distributions have exchanged places within the KL.
C.2 Equality of f-GAN and b-GAN
As pointed out in section 3 both the f -GAN (NoWozin et al., 2016) and the b-GAN (Uehara et al.,
2016) yield the same objective for the I-projection.
We start With the f -GAN. NoWozin et al. (2016) propose the folloWing adversarial objective, based
on a variatonal bound for f -divergences (Nguyen et al., 2010)
argminq(χ)argmaxV(X)F(q(x), V(X)) = Ep(X) [g(V(x))] - Eq(X) [f *(g(V(x)))].
Here V(x) denotes a neural network with linear output, g(v) the output activation and f *(t) the
FenChel conjugate (Hiriart-Urruty & LemareChaL 2012) of f (u), i.e., the generator function of the
f-divergence. For the I-projection f (u) = - logU and f *(t) = -1 - log(t). In theory, the only
restriction posed on the choice of g(v) is that it outputs only values within the domain of f *(t)
Nowozin et al. (2016) suggest g’s for various f - divergences and chose exclusively monotony
increasing functions which output large values for samples that are believed to be from the data
distribution. For the I-projection they suggest g(v) = -exp(-v). Thus the f -GAN objective for
the I-projection is given by
argminq(X)argmaxV (X)F (q(x), V (x)) = -Ep(X) [exp(-V (x)] + Eq(X) [1 - V (x)] .
The b-GAN objective follows from the density ratio estimation framework given by Sugiyama et al.
(2012) and is given by
argminq(X)argmaxr(X)Ep(X) [f0(r(x))] - Eq(X) [f0(r(x))r(x) - f (r(x))]
Here f0(u) denotes the derivative of f(u) and r(x) denotes an density ratio estimator. We need to
enforce r(x) > 0 for all x to obtain a valid density ratio estimate. In practice this is usually done by
learning rl(x) = log r(x) instead. Plugging rl(x), f(u) and f0(u) = 1/u into the general b-GAN
objective yields
argminq(X)argmaxrl(X)F (q(x), rl(x)) = -Ep(X) [exp(-rl(x))] + Eq(X) [1 - rl(x)] .
Which is the same objective as the f -GAN uses. Yet, f -GAN and b-GAN objectives are not identical
for arbitrary f -divergences.
D Visualization of Samples
D. 1 Pedestrian and Traffic Prediction
Samples from the Stanford Drone Dataset can be found in Figure 7
14
Published as a conference paper at ICLR 2020
(a) Data
(b) EIM
(c) EIM + Features
(d) EM
Figure 7: Samples from the Dataset, EIM, EIM with features and EM, plotted over the reference
image from the Stanford Drone Dataset and the generated mask. In the mask green corresponds to
valid regions and red to invalid regions. EIM with the additional feature input generates samples
that stay within the ’road mask’ and are therefore considered to be more realistic.
E	Hyperparameters
In all experiments, we realize the density ratio estimator as fully connected neural networks which
we train using Adam (Kingma & Ba, 2014) and early stopping using a validation set.
Comparison to Generative Adversarial Approaches and Ablation Study
•	Data: 10, 000 Train Samples, 5, 000 Test Samples, 5, 000 Validation samples (for early
stopping the density ratio estimator)
•	Density Ratio Estimator (EIM) / Variational function V (x) (f -GAN): 3 fully connected
layers, 50 neurons each, trained with L2 regularization with factor 0.001, early stopping
and batch size 1, 000
•	Updates EIM: MORE-like updates with = 0.05 for components and coefficients, 1, 000
samples per component and update
•	Updates FGAN: Iterate single update steps for generator and discriminator using learning
rates of 1e - 3 and batch size of 1, 000.
Line Reaching with Planar Robot
•	Data: 10, 000 train samples, 5, 000 test samples, 5, 000 validation samples (for early stop-
ping the density ratio estimator)
•	Density Ratio Estimation: 2 fully connected layers of width 100, early stopping and batch
size 1, 000
•	Updates: MORE-like updates with = 0.005 for components and coefficients, 1, 000
samples per component and update
Pedestrian and Traffic Prediction
•	Data SDD: 7, 500 train samples, 3, 801 test samples, 3, 801 validation samples (for early
stopping the density ratio estimator)
•	Data NGS: 10, 000 train samples, 5, 000 test samples, 5, 000 validation samples (for early
stopping the density ratio estimator)
•	Density Ratio Estimation: 3 fully connected layers of width 256, trained with L2 regular-
ization with factor 0.0005 early stopping and batch size 1, 000.
•	Updates: MORE-like updates with = 0.01 for components and coefficients, 1, 000 sam-
ples per component and update
15
Published as a conference paper at ICLR 2020
Obstacle Avoidance
•	Data: 1, 000 train contexts with 10 samples each, 500 test contexts with 10 samples each,
500 validation contexts with 10 samples each (for early stopping the density ratio estima-
tor).
•	Density Ratio Estimation: 3 fully connected layers of width 256, trained with L2 regular-
ization with factor 0.0005 early stopping and batch size 1, 000.
•	Component and Gating networks: 2 fully connected layer of width 64 for each component
and the gating. Trained with Adam (α = 1e - 3, β0 = 0.5) for 10 epochs in each iteration.
16