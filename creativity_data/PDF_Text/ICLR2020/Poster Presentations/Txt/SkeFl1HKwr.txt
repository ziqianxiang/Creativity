Published as a conference paper at ICLR 2020
Empirical Studies on the Properties of Linear
Regions in Deep Neural Networks
Xiao Zhang & Dongrui Wu*
Ministry of Education Key Laboratory of Image Processing and Intelligent Control,
School of Artificial Intelligence and Automation,
Huazhong University of Science and Technology, Wuhan, China
{xiao-zhang,drwu}@hust.edu.cn
Ab stract
A deep neural network (DNN) with piecewise linear activations can partition the
input space into numerous small linear regions, where different linear functions
are fitted. It is believed that the number of these regions represents the expressivi-
ty of the DNN. This paper provides a novel and meticulous perspective to look into
DNNs: Instead of just counting the number of the linear regions, we study their
local properties, such as the inspheres, the directions of the corresponding hyper-
planes, the decision boundaries, and the relevance of the surrounding regions. We
empirically observed that different optimization techniques lead to completely d-
ifferent linear regions, even though they result in similar classification accuracies.
We hope our study can inspire the design of novel optimization techniques, and
help discover and analyze the behaviors of DNNs.
1	Introduction
In the past few decades, deep neural networks (DNNs) have achieved remarkable success in various
difficult tasks of machine learning (Krizhevsky et al., 2012; Graves et al., 2013; Goodfellow et al.,
2014; He et al., 2016; Silver et al., 2017; Devlin et al., 2019). Albeit the great progress DNNs have
made, there are still many problems which have not been thoroughly studied, such as the expressivity
and optimization of DNNs.
High expressivity is believed to be one of the most important reasons for the success of DNNs. It is
well known that a standard deep feedforward network with piecewise linear activations can partition
the input space into many linear regions, where different linear functions are fitted (Pascanu et al.,
2014; Montufar et al., 2014). More specifically, the activation states are in one-to-one correspon-
dence with the linear regions, i.e., all points in the same linear region activate the same nodes of
the DNN, and hence the hidden layers serve as a series of affine transformations of these points.
As approximating a complex curvature usually requires many linear regions (Poole et al., 2016), the
expressivity of a DNN is highly relevant to the number of the linear regions.
Studies have shown that the number of the linear regions increases more quickly with the depth of the
DNN than with the width (Montufar et al., 2014; Poole et al., 2016; Arora et al., 2018). Serra et al.
(2018) detailed the trade-off between the depth and the width, which depends on the number of
neurons and the size of the input. However, a deep network usually leads to difficulties in opti-
mization, such as the vanishing/exploding gradient problem (Bengio et al., 1994; Hochreiter, 1998)
and the shattered gradients problem (Balduzzi et al., 2017). Batch normalization (BN) can alleviate
these by repeatedly normalizing the outputs to zero-mean and unit standard deviation, so that the
scale of the weights can no longer affect the gradients through the layers (Ioffe & Szegedy, 2015).
Another difficulty is that the high complexity caused by the depth can easily result in overfitting.
Srivastava et al. (2014) proposed dropout to reduce overfitting, which allows a DNN to randomly
drop some nodes during training and work like an ensemble of several thin networks during testing.
Despite the empirical benefits of these techniques, their effects on the trained model and the reasons
behind their success are still unclear. Previous studies focused on explaining why these techniques
* Dongrui Wu is the corresponding author.
1
Published as a conference paper at ICLR 2020
can help the optimization during training (Wager et al., 2013; Santurkar et al., 2018; Bjorck et al.,
2018). Different from theirs, our study is trying to answer the following question:
What properties do these techniques introduce to the linear regions after training?
We present an intuitive view of different techniques’ effects on the linear regions in Figure 1. We
may observe that:
1.	BN and dropout help the DNN partition the input space into many more linear regions than
the vanilla DNN.
2.	The linear regions resulted from the BN model are more uniform in size than those from
the dropout DNN.
3.	Many transition boundaries of the dropout DNN share similar norm directions, and con-
centrate around the decision boundaries.
Figure 1 illustrates that different optimization techniques can lead to completely different linear re-
gions even using the same DNN architecture, which may influence the behaviors of the DNN, such
as its adversarial robustness (Biggio et al., 2013; Szegedy et al., 2014) or some other undiscovered
ones (Appendix A shows another example on a two-dimensional toy dataset). Therefore, it is impor-
tant to probe the properties of the linear regions introduced by these frequently-used optimization
techniques, instead of just looking at the learning curves.
SUoK ①工 Suoma
Je① Un co-⅛u≡ωωro-o
Figure 1: Linear regions and classification regions of models trained with different optimization
techniques. The gray curves in the top row are transition boundaries separating different linear
regions, and the color represents the activation rate of the corresponding linear region. In the bottom
row, different colors represent different classification regions, separated by the decision boundaries.
The models were trained on the vectorized MNIST dataset, and this figure shows a two-dimensional
slice of the input space. The vanilla model was a fully-connected ReLU network with three hidden
layers. To make the figure more readable, each hidden layer only included 20 nodes. The BN model
was the vanilla model with BN added after pre-activations of every hidden layer, and the dropout
model added dropout layers after the hidden layers, with drop rate 0.2.
This paper introduces mathematical tools of polyhedral computation into linear region analysis,
and systematically compares various properties of the linear regions after DNNs being trained with
different optimization techniques (BN, dropout). Though the models have similar classification
accuracies, we do observe significant differences among their linear regions:
1.	BN can help DNNs partition the input space into smaller linear regions, whereas dropout
helps around the decision boundaries.
2.	BN can make the norm directions of the hyperplanes orthogonal, whereas dropout the
opposite.
2
Published as a conference paper at ICLR 2020
3.	Dropout makes regions in which data points lie less likely to contain the decision bound-
aries.
4.	The gradient information of a linear region has high relevance to its surrounding regions;
however, BN slightly reduces the relevance.
It should be noted that our approach can also be applied to analyzing the preferences introduced by
other optimization techniques, such as different initialization approaches (Glorot & Bengio, 2010;
He et al., 2015), different optimizers (Duchi et al., 2011; Kingma & Ba, 2014), some widely-used
operators like skip-connection (He et al., 2016), and even different hyperparameters. Since training
deep learning models is related to the complex interaction among the training dynamics, data man-
ifold and model architectures, we believe it is better to decouple it into two subtasks: 1) figure out
what kinds of linear regions can best approximate the data manifold; and, 2) design optimization
techniques to achieve such linear regions. Our work provides tools to analyze the linear regions,
which helps study both subtasks.
The remainder of the paper is organized as follows: Section 2 presents the details of the linear
regions of DNNs with ReLU activation. Section 3 shows how BN and dropout influence the linear
regions. Section 4 draws conclusions.
2	Linear Regions
This section describes the detailed approach1 for searching for the linear regions of a given input,
and introduces some basic concepts of convex polytopes.
2.1	Search for the Linear Regions
A linear region is the intersection of a finite number of halfspaces. Therefore, to search for the linear
region in which a given input point lies, we only need to search for its corresponding halfspaces,
which are determined by the activation state of the DNN.
Let’s consider a vanilla fully-connected DNN with L hidden layers and ReLU activation. Mathe-
matically, let x ∈ Rd denote the d-dimensional vectorized input, hl (x) the pre-activation outputs of
the l-th hidden layer with nl nodes (l = 1, 2, ..., L), z(x) the logits of the output layer, and M the
number of classes. Given an input example X*, because of the one-to-one correspondence relation-
ship between a linear region and an activation state, its corresponding linear region is a set of inputs
which lead to the same activation state of the DNN.
Let Sl denote a set of the inputs whose activation states of the first l hidden layers are the same as
those of X*. Obviously, Sl+1 ⊆ Sl. Consider the first layer. Since h1 : Rd → Rn1 is simply an
affine transform of X, according to the activation state, S1 can be written as:
S1 = {x I WTX + bi ≥ 0,	∀i ∈ {1,…,n 1} } ,	(1)
where
w i = sgn(h 1(x *)) R X h 1(x *),	⑵
bi = sgn(h 1(x*)) [h 1(x*) - (RXh 1(x*))TX*].	⑶
Next, we select the points from S1 to construct S2 , which activate the same nodes of the second
layer as x* does. Recall that the points in S1 lead to the same activation state of the first layer, hence
h2 : S1 → Rn2 is also an affine transform of x. Therefore, S2 can be constructed by adding linear
inequality constraints to S1, in the same way as (1). Due to the linearity of hl : Sl-1 → Rnl (where
S0 = Rd) for all l, this procedure can be repeated till the last hidden layer. The detailed deduction
is presented in Appendix B, and the depth-wise exclusion process to search for a linear region of x*
is illustrated in Figure 2.
1We developed the approach for finding the linear regions independently, but later found that the same
approach has been proposed in (Lee et al., 2019). However, the two papers use the linear regions for different
purposes.
3
Published as a conference paper at ICLR 2020
PL
Let C^ = {(Wi, bi)}i=1=1 l be the set of parameters of all the linear inequality constraints. Then
SL, which is the linear region that X* lies in, can be represented as the intersection of PL=I nι
halfspaces:
SL = {x I w T x + bi ≥ 0,	∀ (W i,bi) ∈ C * },	⑷
where the DNN is a locally linear model, as z : SL → RM is an affine transform of X.
Figure 2: Depth-wise exclusion process to search for the linear region of x*. Each node in each
layer provides a hyperplane to cut the polytope defined by the preceding layers.
Though we mainly discuss the standard fully-connected DNNs, the form to describe a linear region
can be extended to other situations with little modification. For instance, BN is just a reparameteriza-
tion of the weights, a convolutional neural network (CNN) can be viewed as a sparse fully-connected
DNN, and max-pooling is simply adding more linear inequalities to identify the maximum.
2.2	Convex Polytopes
A linear region can be represented as the set of solutions to a finite set of linear inequalities in (4),
which is exactly the H-representation of a convex polyhedron. With the natural bounds of the input
value, these linear regions are convex polytopes2. We omit the word convex in the rest of the paper
to avoid repetition.
A polytope can also be represented as a convex hull of a finite set of points, which is known as
the V-representation. Different representations may lead to different complexities when dealing
with the same problem; nevertheless, it is challenging to convert one representation into the oth-
er (Toth et al., 2017). As the dimensionality increases, it is even harder to calculate the number
of vertices/facets with a single H-/V- representation (Linial, 1986), or to verify the equivalence be-
tween an H-representation and a V-representation (Freund & Orlin, 1985). More information about
polyhedral computation can be found here3.
It should be noted that convex optimization is capable of probing the properties of the linear regions,
because H-representation is a natural description of a convex feasible region, and a DNN’s behavior
is completely linear in this feasible region.
3	Properties of the Linear Regions
This section presents various properties of the linear regions of DNNs, which were trained using
different optimization settings.
3.1	Models
We used a fully-connected DNN as our vanilla model, which consisted of three hidden layers with
1,024 rectified linear nodes in each. The BN model was the vanilla model with BN added after the
2Here we use the term polytope to denote a bounded polyhedron.
3https://inf.ethz.ch/personal/fukudak/polyfaq/polyfaq.html
4
Published as a conference paper at ICLR 2020
pre-activations of each hidden layer, and the dropout model added dropout after the activations. We
trained our models on the vectorized MNIST dataset, which were rescaled to [-1, 1].
All models were trained using Adam optimizer (Kingma & Ba, 2014) with the default setting (β1 =
0.9, β2 = 0.999) but different learning rates (1e-3 and 1e-4), and the batch size was 256. We used the
Xavier uniform initializer for weight initialization, with biases set to zero (Glorot & Bengio, 2010).
Early stopping was used to reduce overfitting. The classification accuracies are shown in Table 1.
Since it is unlikely to explore the influence of all optimization settings, this paper emphasizes two
optimization techniques, i.e., BN and dropout, and compares the influence of different learning rates.
Table 1: Test accuracies (%) of different DNN models.
Learning Rate ∣ Vanilla		BN	Dropout
1e-3	97.8	97.9	97.5
1e-4	98.0	98.3	98.2
As shown in Section 2, the number of constraints in (4) equals the number of hidden nodes; hence,
it is hard to handle the constraints as the scale of DNN increases, such as removing the redundant
inequalities. In our experiments, the number of constraints was 1, 024 × 3 = 3, 072. In addition to
the natural bounds for the 28 × 28 = 784 pixel values (MINx ≤ x ≤ MAXx), each linear region is
defined by 3, 072 + 784 × 2 = 4, 640 linear inequalities.
Our analysis of CNNs trained on the CIFAR-10 dataset is presented in Appendix E.
3.2	The Inspheres
We first probed the inspheres of the linear regions, which are highly related to the expressivity of
a DNN. Though we cannot make a definite statement that a small insphere always leads to a small
linear region, it does indicate a region’s narrowness.
The insphere of a polytope can be found by solving the following convex optimization problem:
max r	(5)
X ,r
s. t. WTX — r∣∣wik + bi ≥ 0, ∀(Wi,bi) ∈ C^,
MIN X + r ≤ X ≤ MAX X — r,
where X is the center of the insphere, r the inradius, and C * the set of parameters of SL defined in
(4). The main idea of the optimization is to find a point in a polytope, whose distance to the nearest
facet is the largest.
As shown in Figure 1, linear regions vary according to their closeness to the decision boundaries,
hence we studied the inspheres of three different categories of regions4, which are defined as follows:
Manifold region: The region in which the test points lie.
Decision region: The region which contains the normal decision boundaries. We define a normal
decision boundary as the classification boundary between one test point and the mean point
of another class. When we test our models, the mean point of a class is classified into the
same class for the MNIST dataset.
Adversarial region: The region which contains the adversarial decision boundaries. We define
the adversarial decision boundary as the classification boundary between a test point and
its adversarial example. The adversarial examples were generated by the projected gradient
descent (PGD) method (Madry et al., 2018).
Linear interpolation was used to search for regions which contain the decision boundaries. Let
Xtest denote the test point, and Xtarget the adversarial point or the mean point of another class. We
searched for the maximum α ∈ [0, l] which causes Xo = ɑ ∙ Xtarget + (1 — α) ∙ Xtest to be classified
into the same class as Xtest, and the region in which Xα lies contains the decision boundaries.
4These regions should not be confused with a classification region, which is partitioned according to the
classes of the points in the input space.
5
Published as a conference paper at ICLR 2020
As shown in Figure 3, different optimization settings introduce significantly different inradius dis-
tributions. Compared with the vanilla models, BN leads to the smallest inradiuses of the linear
regions, whereas dropout, as shown in the second column of Figure 3, makes the decision regions
narrower. It also shows that the inradius distributions of the adversarial regions are more similar to
those of the manifold regions, which demonstrates the fundamental differences between the adver-
sarial and the normal decision boundaries. Comparing the two rows in Figure 3, we can observe
that a larger learning rate increases the variance of the distributions. However, BN seems to make
the inradius distribution less sensitive to the learning rate, which is consistent with the observations
in Bjorck et al. (2018) that BN enables training with larger learning rates. Comparing the first two
columns of Figure 3, we can also find that the decision regions are usually narrower than the man-
ifold regions, which was also observed by Novak et al. (2018) that on-manifold regions are larger
than off-manifold regions. It is reasonable because decision boundary curves need more sophisticat-
ed approximation.
Manifold	Decision	Adversarial
A∙4->ωu ①。
50-
I I Vanilla
⊂n BN
I I Dropout
A∙4->ωuα)cl
I I Vanilla
∏∏ BN
I I Dropout
50
40
A∙4->ωua)cl
I I Vanilla
⊂n BN
I I Dropout
30
0.0	0.1	0.2	0.3
Inradius
0.0	0.1	0.2	0.3
Inradius
0.0	0.1	0.2	0.3
Inradius


Figure 3: Inradius distributions for different learning rates and optimization techniques. The models
in the top row were trained with a larger learning rate (1e-3), and the bottom row a smaller learning
rate (1e-4). The three columns show the inradius distributions of the manifold regions, the decision
regions, and the adversarial regions, respectively.
3.3	Directions of the Hyperplanes
Another observation is that BN makes the directions of the hyperplanes of a linear region orthogonal,
whereas dropout the opposite. Since it is time-consuming to eliminate the redundant hyperplanes,
as explained in Appendix C, we calculated the angles using all hyperplanes.
The direction w of a hyperplane is pointing to the interior of the linear region, because all constraints
are in the form ofwTx+b ≥ 0. Figure 4 shows the angles between directions of every two different
hyperplanes of a manifold region. The directions of the hyperplanes become more consistent as
the layer goes deeper. Dropout and large learning rates amplify this trend, whereas BN makes the
directions more orthogonal. Though we only present one example here, the patterns can be observed
for almost all manifold regions.
As shown in (2), the direction w is actually the gradient of the corresponding hidden node with
respect to the input, hence the angle between the directions can be viewed as the correlation between
the gradients. However, it should be noted that the shattered gradients problem (Balduzzi et al.,
2017) cannot explain the decorrelation characteristics of BN, though they look similar. The shattered
gradients problem studies the correlation between the gradients with respect to different inputs,
whereas our observation is about the gradients of different hidden nodes with respect to a fixed
input.
6
Published as a conference paper at ICLR 2020
Figure 4: Angles between the directions of different hyperplanes of a particular manifold region.
The indices on both axes indicate different hyperplanes: 0-1,023 represent the hyperplanes of the
first hidden layer, 1,024-2,047 the second layer, and 2,048-3,071 the third layer. The value of a pixel
T
is arccos HW.]WF, i.e., the angle between Wi and Wj. The models in the top row were trained with
a larger learning rate (1e-3), and the bottom row a smaller learning rate (1e-4).
We also observed an interesting phenomenon: the orthogonality of the weights vanished during
training. We tried to explicitly decorrelate the directions at initialization by introducing an orthogo-
nal initializer (Saxe et al., 2014), but the orthogonality was still broken after training. Itis interesting
to see if the properties of initialization can be preserved in training, which is one of our future re-
search directions.
3.4	Decision B oundaries in a Manifold Region
Adversarial examples are benign inputs with imperceptible perturbations, which can dramatically
degrade the performance of a machine learning model (Biggio et al., 2013; Szegedy et al., 2014).
Adversarial attacks aim to push a benign input across the nearest decision boundary (Szegedy et al.,
2014; Goodfellow et al., 2015; Moosavi-Dezfooli et al., 2016; Carlini & Wagner, 2017), hence it is
important to study the decision boundaries in a manifold region.
The most important question we may ask is: Do decision boundaries exist in a manifold region? To
address this question, we seek the point x ∈ SL which has the maximum probability to be classified
as Class t ∈ {1, 2, ..., M}, by solving the following optimization problem:
(M	∖
mxax	zt(x) - log exp(zj (x))	(6)
s. t.	WTX + bi ≥ 0, V(Wi,bi) ∈ Cγ,
MINx ≤ x ≤ MAXx ,
where M is the	number	of	classes,	and zj (X) the j-th entry of the logits	z(X).	When X satisfies the
constraints, i.e.,	X ∈ SL,	z	: SL →	RM is an affine function of X, hence	zj (X)	can be rewritten as:
Zj(x) = (VXZj(x*))T(x - X*) + Zj(x*), VX ∈ SL	(7)
which implies that the optimization objective in (6) is concave. The classification region of Class t
exists in SL if and only if Xt is classified into Class t.
Xt lies on the faces of the polytope in most cases, as shown in Appendix D. Since computing
the volume of a polytope given by only the V-/H- representation is known as a #P-hard prob-
lem (Dyer & Frieze, 1988), the distance between Xt and the original test point X*, called distortion
7
Published as a conference paper at ICLR 2020
in this paper, is used to informally measure the size of a linear region:
distortion = max Il Xt — X *∣∣.	(8)
t∈{1,2,...,M}
We randomly selected 1000 test points to search for the classification regions in their manifold
regions. The average number of classification regions and the average distortions are shown in
Table 2. The results show that a manifold region may contain several classification regions, which
contradicts the conjecture in Hanin & Rolnick (2019) that two points falling into the same linear
region are unlikely to be classified differently. We can also find that training with a large learning
rate, using dropout or BN can make the manifold regions less likely to contain decision boundaries.
However, this is not the case for BN in CNNs (see Appendix E for more information). In addition,
BN can significantly decrease the distortion ofXt, which implies a smaller size of the linear regions.
Figure 5 shows a specific example of Xt generated from models trained with different optimization
techniques, which also demonstrates our observation.
Table 2: Average number of classification regions in a manifold region, and the average distortions.
Measure	Learning Rate ∣ Vanilla		BN	Dropout
Number	1e-3	1.116	1.083	1.012
	1e-4	8.766	2.622	1.048
Distortion	1e-3	26.35	14.90	25.28
	1e-4	23.81	07.61	25.41
Figure 5: Different Xt of the point X*, which is classified into Class 10 (number 9). From left
to right, t varies from 1 to 10 (number 0 to number 9). Images with green borders are correctly
classified into Class 10, and red borders misclassified into Class t. Different rows represent the
models trained with different optimization techniques or learning rates. The models whose names
end with “-L” were trained with a larger learning rate (1e-3), and “-S” a smaller learning rate (1e-4).
Probing decision boundaries from the linear region perspective can bring many potential advantages
for analysis. Due to the linearity of the manifold regions, high-order adversaries are not guaranteed
to be better than first-order ones. Besides, adding random noise may help generate adversarial
examples since more linear regions can be included during searching, which may explain why PGD
with random restarts is a powerful adversarial attack approach (Madry et al., 2018).
3.5 Relevance of the Surrounding Regions
The expressivity of a DNN depends on the number of the linear regions, but it makes optimization
challenging when the gradient information of the surrounding regions has little relevance.
Given an example X* , we try to find an X from a different region, with X — X* parallel to all the
decision boundaries of the region in which X* lies, i.e., orthogonal to the directions of the decision
8
Published as a conference paper at ICLR 2020
boundaries. Then We compare the gradient information between X and X*. As the classification
result of x is equal to arg maxj={1,2,...,M} zj (x), the directions of the decision boundaries can be
written in the following form:
VX (Zj(x) — Zk(x)), j = k.	(9)
Therefore, to satisfy the orthogonality, we can sample an L2 -normalized direction e from the
nullspace of the matrix A = [VxZ1 (x*), VxZ2(x*), ..., VxZM (x*)]:
N(A) = {e ∈ Rd | ATe = 0, kek = 1},	(10)
and then x can be written as:
x = x* + βe, ∀β ∈ [0, ], e ∈ N (A),	(11)
so that
(Vx(Zj(x*) —Zk(x*)))T (x —x*) = 0.	(12)
Our experiments were performed on 1000 randomly selected test points. For each test point x*, we
randomly sampled 100 L2-normalized direction e ∈ N(A). As β varied from 0 to , x may belong
to different regions. We searched for the linear regions along these directions ( = 0.2) and counted
the number of unique linear regions. As shown in Figure 6(a), models using BN or trained with a
smaller learning rate can usually partition the input space into more linear regions.
Surrounding Regions
3 2 10
Oooo
Illl
JqEnN
Vanilla BN Dropout
Model
oa^τoτ
Linearity (LR=le-3)
P
JωqEnN
P
(c)
(a)	(b)

Figure 6: (a): boxplot of the number of unique surrounding regions for 1000 test points. Different
colors represent different learning rates (LRs). (b) and (c): distributions of the cosine similarity ρ of
all unique surrounding regions. Models in (b) were trained with a larger learning rate (1e-3), and (c)
a smaller learning rate (1e-4).
Next, we checked the relevance of these unique surrounding regions. First, we chose an x = x* +βe
from each unique linear region and calculated g(x) as its decision direction:
g(x) = Vx (Zk1 (x) —Zk2(x)),	(13)
where k1 and k2 are the indices of the two largest elements of logits. We calculated the cosine
similarity P = ',圜号:*)∣∣ to measure the relevance of different linear regions. As illustrated in
Figures 6(b) and 6(c), a linear region has high relevance to its surrounding regions, which demon-
strates the linearity of DNNs. It also shows that BN slightly reduces the relevance.
However, it was found that this relevance decreases rapidly with the depth of the DNN, result-
ing in gradients that resemble the white noise, which is known as the shattered gradients prob-
lem (Balduzzi et al., 2017). The low relevance also makes it hard to perform adversarial attacks
because of the limited information of the local gradients (Athalye et al., 2018).
4	Discussions and Conclusions
This paper proposes novel tools to analyze the linear regions of DNNs. We explored the linear
regions of models trained with different optimization settings, and observed significant differences of
9
Published as a conference paper at ICLR 2020
their inspheres, directions of the hyperplanes, decision boundaries, and relevance of the surrounding
regions. Our empirical observations illustrated that different optimization techniques may introduce
different properties of the linear regions, even though they have similar classification accuracies.
This phenomenon indicates that a more meticulous perspective is needed to study the behaviors of
DNNs.
For DNNs with smooth nonlinear activations, it is still an open problem to define their linear regions
with soft transition boundaries. One way to address the problem is to approximate the activation
function by a piecewise linear function, in which case our approaches can directly be utilized to
analyze the linear regions. By choosing a local linearity measure, like the one proposed by Qin et al.
(2019), a soft linear region may also be precisely described by a set of inequalities, which require
that the local linearity of each neuron is larger than a certain threshold. However, our approaches
cannot be applied to these linear regions since their convexity is not guaranteed.
Our future research will reduce the high computational cost of our approach when applied to deeper
and larger DNNs, and formulate a theoretical framework to explain why different optimization tech-
niques can result in different properties of the linear regions. Eventually, we will try to answer the
following questions:
•	What is the relationship between the properties of linear regions and the behaviors of a
DNN?
•	What kinds of linear regions can best approximate the data manifold?
•	How to design novel optimization techniques to achieve such linear regions?
5	Acknowledgments
This research was supported by the National Natural Science Foundation of China under Grant
61873321 and Hubei Technology Innovation Platform under Grant 2019AEA171. The authors
would like to thank Guang-He Lee from MIT for pointing out the connection of our paper to theirs.
References
Raman Arora, Amitabh Basu, Poorya Mianjy, and Anirbit Mukherjee. Understanding deep neural
networks with rectified linear units. In Proc. Int’l Conf. on Learning Representations, Vancouver,
Canada, May 2018.
Anish Athalye, Nicholas Carlini, and David Wagner. Obfuscated gradients give a false sense of
security: Circumventing defenses to adversarial examples. In Proc. 35th Int’l Conf. on Machine
Learning,pp. 274-283, Stockholm, Sweden, July 20l8.
David Balduzzi, Marcus Frean, Lennox Leary, JP Lewis, Kurt Wan-Duo Ma, and Brian McWilliams.
The shattered gradients problem: If resnets are the answer, then what is the question? In Proc.
34th Int’l Conf. on Machine Learning, volume 70, pp. 342-350, Sydney, Australia, August 2017.
Yoshua Bengio, Patrice Simard, Paolo Frasconi, et al. Learning long-term dependencies with gradi-
ent descent is difficult. IEEE Trans. on Neural Networks, 5(2):157-166, 1994.
Battista Biggio, Igino Corona, Davide Maiorca, BIaine Nelson, Nedim Srndic, Pavel Laskov, Gior-
gio Giacinto, and Fabio Roli. Evasion attacks against machine learning at test time. In Proc. Joint
European Conf. on Machine Learning and Knowledge Discovery in Databases, pp. 387-402,
Berlin, Germany, September 2013. Springer.
Nils Bjorck, Carla P Gomes, Bart Selman, and Kilian Q Weinberger. Understanding batch normal-
ization. In Proc. Advances in Neural Information Processing Systems, pp. 7694-7705, Montreal,
Canada, December 2018.
Nicholas Carlini and David Wagner. Towards evaluating the robustness of neural networks. In Proc.
IEEE Symposium on Security and Privacy, pp. 39-57, San Jose, CA, May 2017.
10
Published as a conference paper at ICLR 2020
Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of deep
bidirectional transformers for language understanding. In Proc. of the Conf. of the North Amer-
ican Chapter of the Association for Computational Linguistics: Human Language Technologies,
volume 1,pp. 4l71-4186, Minneapolis, MN, June 2019.
John Duchi, Elad Hazan, and Yoram Singer. Adaptive subgradient methods for online learning and
stochastic optimization. Journal ofMachine Learning Research, 12(Jul):2121-2159, 2011.
Martin E. Dyer and Alan M. Frieze. On the complexity of computing the volume of a polyhedron.
SIAM Journal on Computing, 17(5):967-974, 1988.
Robert M Freund and James B Orlin. On the complexity of four polyhedral set containment prob-
lems. Mathematical programming, 33(2):139-145, 1985.
Xavier Glorot and Yoshua Bengio. Understanding the difficulty of training deep feedforward neural
networks. In Proc. of the 13th Int’l Conf. on Artificial Intelligence and Statistics, pp. 249-256,
Sardinia, Italy, May 2010.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,
Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Proc. Advances in Neural
Information Processing Systems, pp. 2672-2680, Montreal, Canada, December 2014.
Ian J. Goodfellow, Jonathon Shlens, and Christian Szegedy. Explaining and harnessing adversarial
examples. In Proc. Int’l Conf. on Learning Representations, San Diego, CA, May 2015.
Alex Graves, Abdel-rahman Mohamed, and Geoffrey Hinton. Speech recognition with deep recur-
rent neural networks. In Proc. IEEE Int’l Conf. on Acoustics, Speech and Signal Processing, pp.
6645-6649, Vancouver, Canada, May 2013.
Boris Hanin and David Rolnick. Complexity of linear regions in deep networks. In Proc. 36th Int’l
Conf. on Machine Learning, pp. 2596-2604, Long Beach, CA, May 2019.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Delving deep into rectifiers: Surpassing
human-level performance on imagenet classification. In Proc. of the IEEE Int’l Conf. on Computer
Vision, pp. 1026-1034, Santiago, Chile, December 2015.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-
nition. In Proc. IEEE Conf. on Computer Vision and Pattern Recognition, pp. 770-778, Las
Vegas, NV, June 2016.
Sepp Hochreiter. The vanishing gradient problem during learning recurrent neural nets and problem
solutions. Int’l Journal of Uncertainty, Fuzziness and Knowledge-Based Systems, 6(02):107-116,
1998.
Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by
reducing internal covariate shift. In Proc. 32nd Int’l Conf. on Machine Learning, pp. 448-456,
Lile, France, July 2015.
Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In Proc. Int’l
Conf. on Learning Representations, Banff, Canada, April 2014.
Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classification with deep con-
volutional neural networks. In Proc. Advances in Neural Information Processing Systems, pp.
1097-1105, Lake Tahoe, NE, December 2012.
Guang-He Lee, David Alvarez-Melis, and Tommi S Jaakkola. Towards robust, locally linear deep
networks. In Proc. Int’l Conf. on Learning Representations, New Orleans, LA, May 2019.
Nathan Linial. Hard enumeration problems in geometry and combinatorics. SIAM Journal on
Algebraic Discrete Methods, 7(2):331-335, 1986.
Aleksander Madry, Aleksandar Makelov, Ludwig Schmidt, Dimitris Tsipras, and Adrian Vladu.
Towards deep learning models resistant to adversarial attacks. In Proc. Int’l Conf. on Learning
Representations, Vancouver, Canada, May 2018.
11
Published as a conference paper at ICLR 2020
Guido F Montufar, Razvan Pascanu, Kyunghyun Cho, and Yoshua Bengio. On the number of linear
regions of deep neural networks. In Proc. Advances in Neural Information Processing Systems,
pp. 2924-2932, Montreal, Canada, December 2014.
Seyed-Mohsen Moosavi-Dezfooli, Alhussein Fawzi, and Pascal Frossard. Deepfool: A simple and
accurate method to fool deep neural networks. In Proc. IEEE Conf. on Computer Vision and
Pattern Recognition, pp. 2574-2582, Las Vegas, NV, June 2016.
Roman Novak, Yasaman Bahri, Daniel A. Abolafia, Jeffrey Pennington, and Jascha Sohl-Dickstein.
Sensitivity and generalization in neural networks: An empirical study. In Proc. Int’l Conf. on
Learning Representations, Vancouver, Canada, May 2018.
Razvan Pascanu, Guido Montufar, and Yoshua Bengio. On the number of response regions of deep
feed forward networks with piece-wise linear activations. CoRR, abs/1312.6098, 2014. URL
https://arxiv.org/abs/1312.6098.
Ben Poole, Subhaneil Lahiri, Maithra Raghu, Jascha Sohl-Dickstein, and Surya Ganguli. Exponen-
tial expressivity in deep neural networks through transient chaos. In Proc. Advances in Neural
Information Processing Systems, pp. 3360-3368, Barcelona, Spain, December 2016.
Chongli Qin, James Martens, Sven Gowal, Dilip Krishnan, Krishnamurthy Dvijotham, Alhussein
Fawzi, Soham De, Robert Stanforth, and Pushmeet Kohli. Adversarial robustness through local
linearization. In Proc. Advances in Neural Information Processing Systems, pp. 13824-13833,
Vancouver, Canada, December 2019.
Shibani Santurkar, Dimitris Tsipras, Andrew Ilyas, and Aleksander Madry. How does batch nor-
malization help optimization? In Proc. Advances in Neural Information Processing Systems, pp.
2483-2493, Montreal, Canada, December 2018.
Andrew M. Saxe, James L. McClelland, and Surya Ganguli. Exact solutions to the nonlinear dynam-
ics of learning in deep linear neural networks. In Proc. Int’l Conf. on Learning Representations,
Banff, Canada, April 2014.
Thiago Serra, Christian Tjandraatmadja, and Srikumar Ramalingam. Bounding and counting linear
regions of deep neural networks. In Proc. 35th Int’l Conf. on Machine Learning, pp. 4565-4573,
Stockholm, Sweden, July 2018.
David Silver, Julian Schrittwieser, Karen Simonyan, Ioannis Antonoglou, Aja Huang, Arthur Guez,
Thomas Hubert, Lucas Baker, Matthew Lai, and Adrian Bolton. Mastering the game of Go
without human knowledge. Nature, 550(7676):354, 2017.
Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov.
Dropout: A simple way to prevent neural networks from overfitting. Journal of Machine Learning
Research, 15(1):1929-1958, 2014.
Christian Szegedy, Wojciech Zaremba, Ilya Sutskever, Joan Bruna, Dumitru Erhan, Ian J. Goodfel-
low, and Rob Fergus. Intriguing properties of neural networks. In Proc. Int’l Conf. on Learning
Representations, Banff, Canada, April 2014.
Csaba D Toth, Joseph O’Rourke, and Jacob E Goodman. Handbook of discrete and computational
geometry. Chapman and Hall/CRC, third edition, 2017.
Stefan Wager, Sida Wang, and Percy S Liang. Dropout training as adaptive regularization. In Proc.
Advances in Neural Information Processing Systems, pp. 351-359, Lake Tahoe, NE, December
2013.
12
Published as a conference paper at ICLR 2020
A Illustration on a Toy Dataset
Figure 1 shows a two-dimensional slice of a high-dimensional input space, which may not be con-
vincing enough to describe the properties of linear regions through the entire input space. To address
the problem, we trained three models (vanilla, BN, dropout) on a two-dimensional toy dataset to see
if the properties still remain.
Figure 7 visualizes the toy dataset we constructed, which consists of two separate spirals, represent-
ing two different classes. The vanilla model used here was a fully-connected DNN which consisted
of three hidden layers with 10 rectified linear nodes in each. The BN model was the vanilla model
with BN added after the pre-activations of each hidden layer, and the dropout model added dropout
after the activations (the drop rate was 0.2). The models were trained with Adam optimizer (LR=1e-
3, β1=0.9, β2=0.999).

ι.o-
0.5-
0.0-
-0.5-
To- - '.'..'	.
-1.0 -0.5 0.0	0.5	1.0
Figure 7: Visualization of the toy dataset. Different colors represent different classes.
The test accuracies for the three models were all 100%. Figure 8 plots linear regions and classifica-
tion regions in the input space, illustrating the same properties as Figure 1 shows.
SUog3" SUog ①α
,Je①Un UoqBUWSSP-U
Figure 8: Linear regions and classification regions of models trained with different optimization
techniques. The gray curves in the top row are transition boundaries separating different linear
regions, and the color represents the activation rate of the corresponding linear region. In the bottom
row, different colors represent different classification regions, separated by the decision boundary.
13
Published as a conference paper at ICLR 2020
B Calculate Parameters of the Inequalities
As mentioned in Section 2.1, the first l - 1 hidden layers serve as an affine transformation of
x ∈ Sl-1. Besides, the pre-activation outputs of the l-th hidden layer hl(x) are also an affine
transformation of the activation outputs of the (l - 1)-th layer, hence hl(x) is a linear function of
x ∈ Sl-1, which means hln(x) = wTnx + bn, where n denotes a node of the l-th layer. So, we have:
W n = V Xh n (x),	(14)
bn = h n (X)- W nX=h n (x) -(V Xh n (X))T X ∙	(15)
Recall that according to the definition of Si-1, X* shares the same linear function as other X ∈ Si-1,
therefore we have:
Wn = VXhin(X*),	(16)
bn =hin(X*) -(VXhin(X*))TX*∙	(17)
Then we should select X from Si-1 to construct Si, which means X satisfies sgn(hin(X*))hin(X) ≥ 0,
i.e., X has the same activation state of Node n as X*. For convenience, Wn and bn are directly
multiplied by sgn(hin(X*)) to obtain the form in (4).
C Remove Redundant Inequalities
Every constraint in SL represents a halfspace, but some of them are redundant, i.e., they are com-
pletely overrode by others. To eliminate the redundant constraints, we need to successively solve
the following linear programming problem for each untested constraint and sequentially remove the
redundant constraint from C*:
y = min WkTX + bk	(18)
X
s. t. WiTX + bi ≥ 0,	∀i6=k(Wi, bi) ∈ C*,
WkTX + bk + 1 ≥ 0,
MINX ≤ X ≤ MAXX ,
The constraint WkTX + bk ≥ 0 is redundant if and only if y ≥ 0.
Note that each and every constraint needs to be tested sequentially, resulting in very heavy compu-
tational cost when dealing with thousands of constraints.
D xt LIES ON THE FACES OF THE LINEAR REGION IN MOST CASES
Proposition 1 Xt defined in Section 3.4 lies on the faces of its linear region in most cases.
Proof Let M denote the number of classes, X* ∈ Rd a given point lying in the bounded linear
region S, ∂S the faces of S. Recall that the function fitted in a linear region is completely linear,
hence the j-th logit zj (x) can be rewritten as:
zj(X) = WjTX + bj,	∀j ∈ {1, 2, ∙∙∙, M}∙	(19)
Asdefinedin (6),letPt(X) = PexpwWx+x +)§)Jhen Xt = argmaxχ∈s logPt(x). If Xt ∈ S \ ∂S, Xt
must be a maximum, which means:
M
VX log Pt(Xt) = XPi(Xt)(Wt - Wi) = 0∙	(20)
i=1
Therefore,
M
Wt = XPi(Xt)Wi∙	(21)
i=1
Recall that Wi ∈ Rd and d M, hence in most cases {Wi }iM=1 are linear independent, which
means Wt cannot be represented as the linear combination of{Wi6=t}iM=1. Since 0 < Pt(Xt) < 1,
there is no {Pi (Xt)}iM=1 satisfying (21). Therefore, Xt ∈ ∂S.
14
Published as a conference paper at ICLR 2020
E Experiments on the CIFAR- 1 0 Dataset
We also analyzed simple CNN models trained on the CIFAR-10 dataset. The results are presented
in this Appendix.
E.1 Models
The base architecture of the CNN models is shown in Table 3. To simplify the analysis, the convo-
lutional layers were not padded, and large strides were used to replace the max-pooling layers. For
the BN model, BN was added before ReLU activations. For the dropout model, dropout layers were
added after ReLU activations.
Table 3: Architecture of the vanilla CNN model.
Layers	Parameters	Activation
Input	input size=(32, 32) × 3	-
Conv	filters=(3, 3) X 32; Strides=(2, 2)	ReLU
Conv	filters=(3, 3)X 64; Strides=(2, 2)	ReLU
Conv	filters=(3, 3) X128; strides=(2, 2)	ReLU
Flatten		
Dense	nodes=1024	ReLU
Dense	nodes=10	Softmax
The models were trained with Adam optimizer (learning rate 1e-3, β1=0.9, β2=0.999) on the CIFAR-
10 dataset without data augumentation. The pixel values were rescaled to [-1, 1]. The batch size
was 256, and early stopping was used to reduce overfitting. After training, the accuracies on the test
set of the vanilla, BN and dropout models were 68.2%, 70.1% and 69.2%, respectively. Since the
goal of this paper is to show that different optimization techniques can result in models with similar
classification accuracies but significantly different linear regions, we only trained our models with
one learning rate (1e-3), because other learning rates (1e-2, 1e-4) led to models with significantly
different classification accuracies.
E.2 Properties
As we have claimed in Section 2, a CNN model can be regarded as a highly sparse fully-connected
DNN, which means we can analyze the properties of its linear regions in the same way. However,
a convolutional layer may introduce some other properties into the linear regions. For example,
considering the sparsity of the weights, a node of a convolutional layer can only partition a subspace
into linear regions (instead of the whole input space, like a node in fully-connected DNNs does).
Therefore, the partition of the linear regions are relatively independent for the nodes in a CNN, as
most subspaces do not intersect. A direct consequence of their independency is that the properties
of the linear regions in a CNN are more stable than those in a fully-connected DNN, which will be
shown in the following experiments.
We randomly selected 1000 test points to perform the analysis. The inspheres of the linear regions
in the CNNs are shown in Figure 9. Compared with the MNIST dataset, the CIFAR-10 dataset is
more complicated and the mean point of a class is no longer classified into the same class, hence
we randomly sampled a point from another class to replace the mean point described in Section 3
when constructing the decision regions. The experimental results show that both BN and dropout
can narrow the linear regions. For dropout, the effect is more obvious on the decision boundaries
than on the manifold regions.
Figure 10 shows the angles between different hyperplanes of a linear region. According to the
architecture of the models, the first 15 × 15 × 32 + 7 × 7 × 64 + 3 × 3 × 128 = 11, 488 hyperplanes
were provided by the convolutional layers, and the last 1, 024 by the fully-connected hidden layer.
Since a node in a convolutional layer only partitions a certain subspace into regions, most of the
pixel values are 0 in Figure 10 because there is no intersection between two subspaces. However,
we can still observe that BN can orthogonalize the directions of the hyperplanes, whereas dropout
the opposite.
15
Published as a conference paper at ICLR 2020
O O
6 4
α-suα
O
0.00 0.03 0.06 0.09
Inradius
(a)
0.12
------W
Ooooo Oo
0 8 6 4 2
1
Su3α
Inradius
(b)
α-suωα
s.to
80
Inradius
(c)
Figure 9:	Inradius distributions of different optimization techniques for CNN models.(a) Manifold
region; (b) Decision region; (c) Adversarial region.
(a)
(b)
(c)
Figure 10:	Angles between directions of different hyperplanes of a single manifold region. The in-
dices on both axes indicate different hyperplanes: 0-7,199 represent the hyperplanes of the first con-
volutional layer, 7,200-10,335 the second convolutional layer, 10,336-11,487 the third convolutional
T
layer, and 11,488-12,511 the fully-connected hidden layer. The value of a pixel is arccos 口 W.] Wl,
i.e., the angle between wi and wj . (a) Vanilla; (b) BN; (c) Dropout.
16
Published as a conference paper at ICLR 2020
Decision boundaries in the manifold regions of the CNNs seem less likely to be eliminated, com-
pared with the fully-connected DNNs. As shown in Table 4, dropout can eliminate the decision
boundaries in the manifold regions of CNNs, but BN did not work anymore. However, according to
the distortions of the three models, BN still showed its ability to reduce the size of the manifold re-
gions. Figure 11 shows a specific example ofxt, whose original point was classified as automobile.
xt of the BN model had smaller distortion, which was also observed in fully-connected DNNs.
Table 4: Average numbers of the classification regions in a manifold region, and the average distor-
tions.	_______________________________________________
Measure	Vanilla	BN	Dropout
Number	7.811	9.984	2.901
Distortion	27.08	20.85	25.25
with green borders are correctly classified into Class 2, and red borders misclassified into Class t.
Different rows represent models trained with different optimization techniques.
The numbers of unique surrounding regions ofa manifold region are shown in Figure 12(a). Though
BN showed its strength in increasing the number of the linear regions, the effect was less obvious
compared with those in Figure 6(a) for fully-connected DNNs. As we have pointed out before, the
sparsity of the weights in the convolutional layers contributes to the stability of the properties of
the linear regions. The relevance of the surrounding regions shown in Figure 12(b) was similar to
fully-connected DNNs. BN still shattered the decision directions, as well as dropout, which was
slightly different from the results for fully-connected DNNs.
12000-
10000 -
8000-
6000-
4000-
2000-
0-
Vanilla BN Dropout
Model
SUO-6 ①」°JeqEnN
JeqEnN
50000-
40000-
30000-
20000-
10000-
O
O
I I Vanilla
l≡≡l BN
I I Dropout
00
■
1
8
I 9
■
O
a
Figure 12: (a) Boxplot of the number of unique surrounding regions for 1000 test points; (b) Distri-
butions of the cosine similarity ρ of all unique surrounding regions for the 1000 test points.
17