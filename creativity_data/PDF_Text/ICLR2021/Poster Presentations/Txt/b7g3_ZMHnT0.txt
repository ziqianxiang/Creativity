Published as a conference paper at ICLR 2021
Learning to Deceive Knowledge Graph
Augmented Models via Targeted Perturbation
Mrigank Raman1* ,Aaron Chan21, Siddhant Agarwal3**, Peifeng Wang2, Hansen Wang4*,
Sungchul Kim5, Ryan Rossi5, Handong Zhao5, Nedim Lipka5, Xiang Ren2
1Indian Institute of Technology, Delhi, 2University of Southern California,
3 Indian Institute of Technology, Kharagpur, 4Tsinghua University, 5Adobe Research
mt1170736@iitd.ac.in, {chanaaro,peifengw,xiangren}@usc.edu,
agarwalsiddhant10@iitkgp.ac.in, wang-hs17@mails.tsinghua.edu.cn,
{sukim,ryrossi,hazhao,lipka}@adobe.com
Ab stract
Knowledge graphs (KGs) have helped neural models improve performance on
various knowledge-intensive tasks, like question answering and item recommen-
dation. By using attention over the KG, such KG-augmented models can also
“explain” which KG information was most relevant for making a given prediction.
In this paper, we question whether these models are really behaving as we expect.
We show that, through a reinforcement learning policy (or even simple heuristics),
one can produce deceptively perturbed KGs, which maintain the downstream per-
formance of the original KG while significantly deviating from the original KG’s
semantics and structure. Our findings raise doubts about KG-augmented models’
ability to reason about KG information and give sensible explanations.
1	Introduction
Recently, neural reasoning over knowledge graphs (KGs) has emerged as a popular paradigm in
machine learning and natural language processing (NLP). KG-augmented models have improved
performance on a number of knowledge-intensive downstream tasks: for question answering (QA),
the KG provides context about how a given answer choice is related to the question (Lin et al.,
2019; Feng et al., 2020; Lv et al., 2020; Talmor et al., 2018); for item recommendation, the KG
mitigates data sparsity and cold start issues (Wang et al., 2018b; 2019a;b; 2018a). Furthermore, by
using attention over the KG, such models aim to explain which KG information was most relevant
for making a given prediction (Lin et al., 2019; Feng et al., 2020; Wang et al., 2018b; 2019b; Cao
et al., 2019; Gao et al., 2019). Nonetheless, the process in which KG-augmented models reason
about KG information is still not well understood. It is assumed that, like humans, KG-augmented
models base their predictions on meaningful KG paths and that this process is responsible for their
performance gains (Lin et al., 2019; Feng et al., 2020; Gao et al., 2019; Song et al., 2019).
In this paper, we question if existing KG-augmented models actually use KGs in this human-like
manner. We study this question primarily by measuring model performance when the KG’s se-
mantics and structure have been perturbed to hinder human comprehension. To perturb the KG, we
propose four perturbation heuristics and a reinforcement learning (RL) based perturbation algorithm.
Surprisingly, for KG-augmented models on both commonsense QA and item recommendation, we
find that the KG can be extensively perturbed with little to no effect on performance. This raises
doubts about KG-augmented models’ use of KGs and the plausibility of their explanations.
2	Problem Setting
Our goal is to investigate whether KG-augmented models and humans use KGs similarly. Since
KGs are human-labeled, we assume that they are generally accurate and meaningful to humans.
Thus, across different perturbation methods, we measure model performance when every edge in
the KG has been perturbed to make less sense to humans. To quantify the extent to which the KG
has been perturbed, we also measure both semantic and structural similarity between the original
*Work done while MR, SA and HW interned remotely at USC. Code and data are available at https:
//github.com/INK- USC/deceive- KG- models.
,Equal contribution.
1
Published as a conference paper at ICLR 2021
KG and perturbed KG. If original-perturbed KG similarity is low, then a human-like KG-augmented
model should achieve worse performance with the perturbed KG than with the original KG. Further-
more, we evaluate the plausibility of KG-augmented models’ explanations when using original and
perturbed KGs, by asking humans to rate these explanations’ readability and usability.
Notation Let Fθ be an KG-
augmented model, and let
(Xtrain , Xdev , Xtest ) be a dataset
for some downstream task. We
denote a KG as G = (E, R, T),
where E is the set of entities (nodes),
R is the set of relation types, and
T = {(e1, r, e2) | e1, e2 ∈ E, r ∈ R}
is the set of facts (edges) com-
posed from existing entities and
relations (Zheng et al., 2018). Let
G0 = (E,R0,T0) be the KG obtained
after perturbing G, where R0 ⊆ R and
T0 6= T. Let f(G, G0) be a function
that measures similarity between G
and G0. Let g(G) be the downstream
performance when evaluating Fθ
on XteSt and G. Also, let ㊉ denote
Step 1: train model
on original KG,
then freeze model
KG-augmented model
(trained)
Step 2: apply N
perturbations to full KG
*	Step 3: compare
downstream test ɔ downstream performance
performance V..............................
(original KG)
downstream test
A performance
(perturbed KG)
Figure 1: Proposed KG Perturbation Framework. Our pro-
cedure consists of three main steps: (1) train the KG-augmented
model on the original KG, then freeze the model; (2) obtain the
perturbed KG by applying N = |T| perturbations to the full orig-
inal KG; and (3) compare the perturbed KG’s downstream perfor-
mance to that of the original KG.
the concatenation operation, and let
NL(e) denote the set of L-hop neighbors for entity e ∈ E.
High-Level Procedure First, we train Fθ on Xtrain and G, then evaluate Fθ on Xtest and G to get the
original performance g(G). Second, we freeze Fθ, then perturb G to obtain G0 . Third, we evaluate
Fθ on Xtest and G0 to get the perturbed performance g(G0). Finally, we measure g(G) - g(G0) and
f (G, G0) to assess how human-like Fθ's reasoning process is. This procedure is illustrated in Fig. 1.
In this paper, we consider two downstream tasks: commonsense QA and item recommendation.
Commonsense QA Given a question x and a set of k possible answers A = {y1, ..., yk}, the task is
to predict a compatibility score for each (x, y) pair, such that the highest score is predicted for the
correct answer. In commonsense QA, the questions are designed to require commonsense knowl-
edge which is typically unstated in natural language, but more likely to be found in KGs (Talmor
et al., 2018). Let Fφtext be a text encoder (Devlin et al., 2018), Fψgraph be a graph encoder, and Fξcls
be an MLP classifier, where φ, ψ, ξ ⊂ θ. Let G(x,y) denote a subgraph of G consisting of entities
mentioned in text sequence X ㊉ y, plus their corresponding edges. We start by computing a text
embedding htext = Fφext(x ㊉ y) and a graph embedding hgraph = F≡raph(G(x,y)). After that, We compute
the score for (x,y) as S(x,y) = FclS(htext ㊉ hgraph). Finally, We select the highest scoring answer:
ypred = argmaxy∈A S(x,y). KG-augmented commonsense QA models vary primarily in their design
of Fψgraph. In particular, path-based models compute the graph embedding by using attention to selec-
tively aggregate paths in the subgraph. The attention scores can help explain which paths the model
focused on most for a given prediction (Lin et al., 2019; Feng et al., 2020; Santoro et al., 2017).
Item Recommendation We consider a set of users U = {u1, u2, ..., um}, a set of items V =
{v1, v2, ..., vn}, and a user-item interaction matrix Y ∈ Rm×n with entries yuv. If user u has been
observed to engage with item v, then yuv = 1; otherwise, yuv = 0. Additionally, we consider a
KG G , in which R is the set of relation types in G . In G , nodes are items v ∈ V , and edges are
facts of the form (v, r, v0), where r ∈ R is a relation. For the zero entries in Y (i.e., yuv = 0), our
task is to predict a compatibility score for user-item pair (u, v), indicating how likely user u is to
want to engage with item v . We represent each user u, item v , and relation r as embeddings u, v,
and r, respectively. Given a user-item pair (u, v), its compatibility score is computed as hu, vi, the
inner product between u and v. KG-augmented recommender systems differ mainly in how they
use G to compute u and v. Generally, these models do so by using attention to selectively aggregate
items/relations in G. The attention scores can help explain which items/relations the model found
most relevant for a given prediction (Wang et al., 2018b; 2019b).
2
Published as a conference paper at ICLR 2021
3	KG S imilarity Metrics
To measure how much the perturbed KG has deviated from the original KG, we propose several
metrics for capturing semantic (ATS) and structural (SC2D, SD2) similarity between KGs.
Aggregated Triple Score (ATS) ATS measures semantic similarity between two KGs. Let sG be
an edge (triple) scoring function, such that sG(e1, r, e2) measures how likely edge (e1, r, e2) is to
exist in G . Also, assume sG has been pre-trained on G for link prediction. Then, ATS is defined
as fATS (G, G ) = |T10| P(eιr,e )∈T 0 sG (e1 , r, e2) ∈ [0, 1], which denotes the mean sG score across all
edges in G0. Intuitively, if a high percentage of edges in G0 are also likely to exist in G (i.e., high
ATS), then we say that G0 and G have high semantic similarity. sG is task-specific, as KGs from
different tasks may differ greatly in semantics. For commonsense QA, we use the sG from Li et al.
(2016); for item recommendation, we use the sG from Yang et al. (2015). While ATS captures
semantic KG differences, it is not sensitive to KG connectivity structure. Note that fATS (G, G) may
not equal 1, since sG may not perfectly generalize to KGs beyond those it was trained on.
Similarity in Clustering Coefficient Distribution (SC2D) SC2D measures structural similarity
between two KGs and is derived from the local clustering coefficient (Saramaki et al., 2007; Onnela
et al., 2005; Fagiolo, 2007). For a given entity in G (treated here as undirected), the local clustering
coefficient is the fraction of possible triangles through the entity that exist (i.e., how tightly the
entity’s neighbors cluster around it). For entity ei ∈ E, the local clustering coefficient is defined as
ci = 2Tri(ei)/(deg(ei)(deg(ei) - 1)), where Tri(ei) is the number of triangles through ei, and deg(ei)
is the degree of ei . For each relation r ∈ R, let Gr be the subgraph of G consisting of all edges in T
with r . That is, Gr = (E, r, T0), where T0 = {(e, r, e0) | e, e0 ∈ E}. Let cr denote the |E |-dimensional
clustering coefficient vector for Gr, where the ith element of cr is ci . Then, the mean clustering
coefficient vectors for G and G0 are Co = 击 Pr∈R Cr and Cp = 尚 Pr∈R√ Cr, respectively. SC2D
is defined as ∕sc2d(G, Gj = 1 - Ilkco-cPk21 ∈ [0,1], with higher value indicating higher similarity.
kco -cp k2+1
Similarity in Degree Distribution (SD2) SD2 also measures structural similarity between two
KGs, while addressing SC2D’s ineffectiveness when the KGs’ entities have tiny local clustering
coefficients (e.g., the item KG used by recommender systems is roughly bipartite). In such cases,
SC2D is always close to one regardless of perturbation method, thus rendering SC2D useless. Let
dr denote the |E|-dimensional degree vector for Gr, where the ith element ofdr is deg(ei). Then, the
mean degree vectors for G and G0 are do =击 Pr∈R dr and dp =尚 Pr∈R√ dr, respectively. SD2
is defined as fsD2(G, G0) = 1 - 1点;卅+1 ∈ [0,1], with higher value indicating higher similarity.
4	Methods for Targeted KG Perturbation
We aim to study how a KG’s semantics and structure impact KG-augmented models’ downstream
performance. To do so, we measure model performance in response to various forms of targeted
KG perturbation. While a KG’s semantics can be perturbed via its relation types, its structure can
be perturbed via its edge connections. Therefore, we design five methods — four heuristic, one RL
— for perturbing KG relation types, edge connections, or both (Fig. 2).
4.1	Heuristic-Based KG Perturbation
Our four KG perturbation heuristics are as follows: Relation Swapping (RS) randomly chooses two
edges from T and swaps their relations. Relation Replacement (RR) randomly chooses an edge
(e1, r1, e2) ∈ T, then replaces r1 with another relation r2 = argminr∈R sG(e1, r, e2). Edge Rewiring
(ER) randomly chooses an edge (e1, r, e2) ∈ T, then replaces e2 with another entity e3 ∈ E \N1(e1).
Edge Deletion (ED) randomly chooses an edge (e1, r, e2) ∈ T and deletes it. For ED, perturbing all
edges means deleting all but 10 edges.
4.2	RL-Based KG Perturbation
We introduce an RL-based approach for perturbing the KG. Given a KG, G, we train a policy to
output a perturbed KG, G0, such that ATS, fATS(G, G0), is minimized, while downstream performance,
g(G0), is maximized. Specifically, the RL agent is trained to perturb G via relation replacement, so
we call our algorithm RL-RR. Because the agent is limited to applying N = |T| perturbations to G,
our RL problem is framed as a finite horizon Markov decision process. In the rest of this section, we
define the actions, states, and reward in our RL problem, then explain how RL-RR is implemented.
3
Published as a conference paper at ICLR 2021
Relation
Replacement
(RR, RL-RR)
Figure 2: Proposed KG Perturbation Methods. We propose four heuristic-based perturbation methods and
one RL-based perturbation method. In this diagram, we consider example edge (Child, AtLocation,
Classroom) within a subgraph of the original ConceptNet KG (shown in blue). We illustrate how this edge
(and possibly other edges) changes in response to different perturbation methods (shown in red). Unlike the
heuristic-based methods (RS, RR, ER, ED), the RL-based method (RL-RR) is trained to maximize downstream
performance and minimize original-perturbed KG semantic similarity.
Relation
Swapping (RS)
Actions The action space consists of all possible relation replacements in G, i.e., replacing
(e1, r, e2) ∈ T with (e1, r0, e2). Since having such a large action space poses computational is-
sues, we decouple each action into a sequence of three subactions and operate instead in this smaller
subaction space. Hence, a perturbation action at time step t would be at = (at(0) , at(1), at(2)). Namely,
a(t0) is sampling entity e1 ∈ E; a(t1) is selecting edge (e1, r, e2) ∈ T; and at(2) is selecting relation
r0 ∈ R to replace r in (e1, r, e2). To make the policy choose low-ATS perturbations, we further
restrict the at(2) subaction space to be the K subactions resulting in the lowest ATS. Note that each
a(ti) is represented by its corresponding pre-trained TransE (Bordes et al., 2013) entity, relation, or
edge embedding in G . Since these TransE embeddings are not updated by the perturbation policy,
we use a(ti) to refer to both the subaction and subaction embedding. Meanwhile, at does not have
any representation besides its constituent subaction embeddings.
States The state space is the set of all G0 with the same entities and connectivity structure as G .
Here, we make a distinction between state and state embedding. The state at t is the actual KG after
t perturbation steps and is denoted as Gt. The state embedding att is a vector representation ofGt and
is denoted as st. To match at, we also decouple st into substate embeddings: st = (st(0) , s(t1) , s(t2) ).
Reward The reward function pushes the policy to maximize downstream performance. For com-
monsense QA, higher reward corresponds to lower KL divergence between the predicted and true
answer distributions. For item recommendation, we use validation AUC as the reward function.
4.2.1	DQN Architecture and Training
As described above, RL-RR is modeled as an action-subaction hierarchy. At the action (top) level,
for t, the policy selects an action at given state st, then performs at on Gt to obtain Gt+1. At the
subaction (bottom) level, for index i ∈ [0, 1, 2] within time step t, the policy selects a subaction
a(ti+1) given st(i) and, if any, previous subactions.
At t, the policy takes as input the substate embedding st(0). One approach for computing st(0) would
be to directly encode Gt with a graph encoder F graph, such that s(t0) = F graph (Gt) (Dai et al., 2018; Sun
et al., 2020; Ma et al., 2019b). However, since we aim to assess graph encoders’ ability to capture
KG information, it would not make sense to use a graph encoder for KG perturbation. Instead,
we use an LSTM (Hochreiter & Schmidhuber, 1997) to update substate embeddings both within
and across time steps, while jointly encoding substate and subaction embeddings. Observe that
4
Published as a conference paper at ICLR 2021
this means s(ti) only implicitly captures KG state information via a(ti-1), since the choice of each
subaction is constrained precisely by which entities, relations, or edges are available in Gt .
To train RL-RR, we use the DQN algorithm (Mnih et al., 2015). Abstractly, the goal of DQN
is to learn a Q-function Q(st, at), which outputs the expected reward for taking action at in state
st. In our implementation, Q(st , at) is decomposed into a sequential pair of sub-Q-functions:
Q1(at(1)|st(0),a(t0)) = hMLP(at(1)),MLP(h(t0))i and Q2(at(2)|st(1),a(t0),at(1)) = hMLP(a(t2)),MLP(h(t1))i.
MLP denotes the vector representation computed by a multi-layer perceptron, while ht(0) and h(t1)
denote the respective LSTM encodings of (s(0), a，0)) and (sf), [a，0)㊉ a，1)]).
Fig. 3 depicts the perturba-
tion procedure at t. First,
we either initialize s(，0) with a
trained embedding weight vec-
tor if t = 0, or set it to s(，2-)1 oth-
erwise. Second, we uniformly
sample a，(0), which is encoded
as h，(0) = LSTMCell1 (s，(0), a(，0)).
LSTMCell1 also updates s(，0)
to s(，1) .	Third, we com-
pute Q1 (a，(1) |s(，0) , a，(0)), which
takes h(，0) as input and outputs
a(，1) . Fourth, we encode a，(1) as
h(1 = LSTMCell2 (s(1), [a，0)㊉	FigUre3: DQN Architecture for RL-RR
a(，1)]). LSTMCell2 also updates
s，(1) to s(，2). Fifth, we compute Q2(a(，2) |s，(1) , a(，0) , a，(1)), which takes h(，1) as input and outputs a，(2).
Note that a(，1) and a，(2) are selected -greedily during training and greedily during evaluation. Fi-
nally, using a， = (a(，0), a，(1), a，(2)), we perturb G， to get G，+1.
Ideally, for each t, we would evaluate G，+1 on the downstream task to obtain the reward. However,
downstream evaluation is expensive, so we only compute reward every T time steps. Moreover, for
the policy to generalize well, state embeddings (s，-T +1 , ... , s，-1 , s，) should not correlate with the
order of actions (a，-T +1 , ... , a，-1 , a，). Thus, for every T time steps during training, we shuffle the
last T actions after computing reward, then update the LSTM and sub-Q-functions with respect to
the shuffled actions. Doing so encourages state embeddings to be invariant to action order.
5	Experiments
In this section, we test KG-augmented models on their ability to maintain performance and explain-
ability when the KG has been extensively perturbed. As explained in Sec. 2 and Fig. 1, the model
is first trained on a given dataset using the original KG, frozen throughout KG perturbation, then
used to compare downstream performance between original KG and perturbed KG. For all models,
datasets, and perturbation methods, we measure performance and KG similarity when all |T| KG
edges have been perturbed, averaged over three runs. For a subset of model-dataset-perturbation
configurations, we also measure performance as a function of the number of edges perturbed. In
addition, we conduct a user study where humans are asked to rate original and perturbed KGs, with
respect to readability and usability for solving downstream tasks.
5.1	Commonsense QA
For commonsense QA, the KG-augmented models we experiment with are RN (with attentional
path aggregation) (Lin et al., 2019; Santoro et al., 2017) and MHGRN (Feng et al., 2020), which
have been shown to outperform non-KG models (Devlin et al., 2018; Liu et al., 2019) and a num-
ber of KG-augmented models (Lin et al., 2019; Ma et al., 2019a; Wang et al., 2019c; Schlichtkrull
et al., 2018) on this task. For both RN and MHGRN, we use a BERT-Base (Devlin et al., 2018) text
encoder. We evaluate on the CommonsenseQA (CSQA) (Talmor et al., 2018) and OpenBookQA
(OBQA) (Mihaylov et al., 2018) datasets, using ConceptNet (Speer et al., 2016) as the KG. Perfor-
mance is measured using accuracy (Acc), which is the standard metric for commonsense QA (Lin
et al., 2019; Feng et al., 2020).
5
Published as a conference paper at ICLR 2021
Table 1: Comparison of Perturbation Methods on CSQA. We follow the standard protocol of reporting
CSQA test accuracy on the in-house data split from Lin et al. (2019), as official test labels are not available.
Method	CSQA							
	RN				MHGRN			
	Acc (↑)	ATSQ)	SC2D Q)	SD2 Q)	Acc (↑)	ATSQ)	SC2D Q)	SD2 Q)
No KG	53.41	-	-	-	53.41	-	-	-
Original KG	56.87	0.940	1.000	1.000	57.21	0.940	1.000	1.000
Relation Swapping (RS)	53.42	0.831	0.144	6.16E-3	53.42	0.831	0.144	6.16E-3
Relation Replacement (RR)	53.42	0.329	0.091	1.70E-3	52.22	0.329	0.091	1.70E-3
Edge Rewiring (ER)	53.42	0.505	0.116	2.30E-3	52.22	0.505	0.116	2.30E-3
Edge Deletion (ED)	52.21	0.933	0.126	2.00E-3	51.00	0.933	0.126	2.00E-3
RL-RR	55.21	0.322	0.093^^	1.66E-3	55.52	0.314	0.092	1.78E-3
Table 2: Comparison of Perturbation Methods on OBQA
Method	OBQA							
	RN				MHGRN			
	Acc (↑)	ATSQ)	SC2D Q)	SD2 Q)	Acc (↑)	ATSQ)	SC2D Q)	SD2 Q)
No KG	62.00	-	-	-	62.00	-	-	-
Original KG	66.80	0.934	1.000	1.000	68.00	0.934	1.000	1.000
Relation Swapping (RS)	67.00	0.857	0.159^^	7.73E-3	67.30	0.857	0.159	7.73E-3
Relation Replacement (RR)	66.80	0.269	0.095	1.84E-3	67.60	0.269	0.095	1.84E-3
Edge Rewiring (ER)	66.60	0.620	0.146	7.26E-3	67.00	0.620	0.146	7.26E-3
Edge Deletion (ED)	66.80	0.923	0.134	2.19E-3	67.60	0.923	0.134	2.19E-3
RL-RR	67.30	0.255	0.097	1.79E-4	67.70	0.248	0.094	1.75E-4
CSQA Results for CSQA are given in Table 1. For RN and MHGRN, we see that RL-RR achieves
slightly worse accuracy than Original KG, while RS, RR, and ER perform on par with No KG. For
both models, ED performs noticeably worse than No KG.
OBQA Results for OBQA are shown in Table 2. For RN, we see that RL-RR actually obtains better
accuracy than Original KG. For MHGRN, RL-RR yields marginally worse accuracy than Original
KG. Meanwhile, for both RN and MHGRN, all heuristics uniformly achieve similar accuracy as
Original KG, which itself significantly outperforms No KG.
Analysis Tables 1-2 demonstrate that perturbing a KG does not necessarily imply decreased perfor-
mance, nor does it guarantee the creation of invalid or novel facts. As shown by the KG similarity
scores, some perturbation methods cause greater semantic or structural KG changes than others.
Perturbed KGs produced by RS and ED have high ATS (i.e., semantic similarity to original KG),
while RR, ER, and RL-RR achieve relatively low ATS. Meanwhile, SC2D and SD2 are quite low
for all perturbation methods, indicating consistently low structural similarity between original and
perturbed KG. RL-RR and RR collectively have the lowest SC2D and SD2 for CSQA, while RL-
RR has the lowest SC2D and SD2 for OBQA. Notably, across all perturbation methods and models,
RL-RR attains the highest accuracy while also having the lowest KG similarity scores overall. The
results of a T-test (three runs for both models) show that RL-RR achieves a statistically significant
improvement over its heuristic counterpart, RR. Still, even RR has a fairly high accuracy to KG
similarity ratio. This suggests that our KG-augmented models are not using the KG in a human-like
way, since RL-RR and RR can both achieve high performance despite extensively corrupting the
original KG’s semantic and structural information.
5.2	Item Recommendation
The KG-augmented recommender systems we consider are KGCN (Wang et al., 2019b) and Rip-
pleNet (Wang et al., 2018b). We evaluate these models on the Last.FM (Rendle, 2012) and
MovieLens-20M (Harper & Konstan, 2016) datasets, using the item KG from Wang et al. (2019a).
As mentioned in Sec. 1, item KGs have been shown to benefit recommender systems in cold start
scenarios (Wang et al., 2018b). Therefore, following Wang et al. (2018b), we simulate a cold start
scenario by using only 20% and 40% of the train set for Last.FM and Movie Lens-20M, respectively.
Performance is measured using AUC, which is the standard metric for item recommendation (Wang
et al., 2019b; 2018b). Since the item KG is almost bipartite, the local clustering coefficient of each
item in the KG is extremely small, and so SC2D is not meaningful here (Sec. 3). Thus, for item
recommendation, we do not report SC2D.
6
Published as a conference paper at ICLR 2021
Table 3: Comparison of Perturbation Methods on Last.FM
Method	Last.FM					
	KGCN			Ripplenet		
	AUC (↑)	ATSQ)	SD2 Q)	AUC (↑)	ATSQ)	SD2 Q)
No KG	50.75	-	-	50.75	-	-
Original KG	55.99	0.972	1.000	56.23	0.972	1.000
Relation Swapping (RS)	55.98	0.681	2.96E-2	56.23	0.681	2.96E-2
Relation Replacement (RR)	55.98	0.415	0.253	56.22	0.415	0.253
Edge Rewiring (ER)	55.98	0.437	1.85E-2	53.74	0.437	1.85E-2
Edge Deletion (ED)	50.96	0.941	3.37E-3	45.98	0.941	3.37E-3
RL-RR	56.04	0.320	1.30E-3	56.28	0.310	1.20E-3
Table 4: Comparison of Perturbation Methods on MovieLens-20M
Method	MovieLens-20M					
	KGCN			Ripplenet		
	AUC (↑)	ATSQ)	SD2 Q)	AUC (↑)	ATSQ)	SD2 Q)
No KG	91.30	-	-	91.30	-	-
Original KG	96.62	0.960	1.000	97.46	0.960	1.000
Relation Swapping (RS)	96.62	0.678	6.14E-4	97.46	0.678	6.14E-4
Relation Replacement (RR)	96.50	0.413	7.74E-5	97.45	0.413	7.74E-5
Edge Rewiring (ER)	96.24	0.679	4.44E-4	93.42	0.679	4.44E-4
Edge Deletion (ED)	90.36	0.982	1.02E-4	90.22	0.982	1.02E-4
RL-RR	96.53	0.401	2.23E-4	97.25	0.268	2.21E-4
Last.FM Results for Last.FM are shown in Table 3. For KGCN and RippleNet, we see that RS, RR,
and RL-RR achieve about the same AUC as Original KG, with RL-RR slightly outperforming Orig-
inal KG. ER performs similarly to Original KG for KGCN, but considerably worse for RippleNet.
ED’s AUC is on par with No KG’s for KGCN and much lower than No KG’s for RippleNet.
MovieLens-20M Results for MovieLens-20M are displayed in Table 4. For both KGCN and Rip-
pleNet, we find that relation-based perturbation methods tend to perform on par with Original KG.
Here, ER is the better of the two edge-based perturbation methods, performing about the same as
Original KG for KGCN, but noticeably worse for RippleNet. Somehow, for both KGCN and Rip-
pleNet, ED achieves even worse AUC than No KG. On the other hand, we see that ED achieves very
high ATS, while RS, RR, ER, and RL-RR achieve more modest ATS scores.
Analysis Like in commonsense QA, Tables 3-4 show that KG-augmented models can perform well
even when the KG has been drastically perturbed. Using the T-test with three runs, for almost all
perturbation methods, we find a statistically insignificant difference between the perturbed KG’s
AUC and the original KG’s AUC. The perturbed KGs produced by ED have high ATS, while RS,
RR, ER, and RL-RR achieve modest ATS scores. However, all perturbation methods have fairly low
SD2 (except RR on Last.FM). In particular, across both datasets and models, RL-RR has the highest
AUC overall, while also having the lowest KG similarity scores overall. This serves as additional
evidence that the model is not using the KG in a human-like manner, since RL-RR achieves high
performance despite significantly perturbing the original KG’s semantic and structural information.
5.3	Auxiliary Experiments and Analysis
Varying Perturbation Level For a subset of model-dataset-perturbation settings, we measure the
performance and ATS of various perturbation methods as a function of the percentage of KG edges
perturbed. For MHGRN on CSQA, Fig. 4a shows that, across all levels of perturbation, RL-RR
maintains higher accuracy than No KG. Meanwhile, RS’s accuracy reaches No KG’s accuracy at
100% perturbation, and RR’s does so at 60% perturbation. In Fig. 4b, we see that RL-RR’s and
RR’s ATS drop significantly as the perturbation percentage increases, whereas RS’s ATS remains
quite high even at 100% perturbation. For RippleNet on MovieLens-20M, Fig. 4c shows a flat
performance curve for all perturbation methods. Meanwhile, for all perturbation methods in Fig.
4d, ATS decreases steadily as perturbation level increases, with RL-RR’s ATS dropping most.
These findings support the hypothesis that KG perturbation does not imply performance decrease
or KG corruption. Building on the results of previous experiments, in both model-dataset settings,
RL-RR largely maintains the model’s performance despite also heavily perturbing the KG’s seman-
7
Published as a conference paper at ICLR 2021
(a) CSQA Acc	(b) CSQA ATS (c) MovieLens-20M AUC (d) MovieLens-20M ATS
Figure 4: Varying Perturbation Level. Performance and ATS with respect to perturbation level, for MHGRN
on CSQA and RippleNet on MovieLens-20M. Horizontal axis denotes percentage of perturbed KG edges.
Method	CSQA		OBQA	
	RN	MHGRN	RN	MHGRN
No KG	53.41	53.41	62.00	62.00
Orignal KG	56.87	57.21	66.80	68.00
Zero SubgraPh Emb.	53.10	53.99	64.80	66.40
Rand. SubgraPh Emb.	52.60	52.48	64.75	65.90
Rand. Ent./Rel. Emb.	53.02	54.03	64.45	64.85
Table 5: Noisy Baselines for Commonsense QA.
Noisy baseline accuracy on CSQA and OBQA.
Method	Last∙FM		MovieLens-20M	
	KGCN	RiPPleNet	KGCN	RippleNet
No KG	50.75	50.75	91.30	91.30
Original KG	55.99	56.23	96.62	97.46
Rand. Ngbd.	55.91	51.04	96.21	92.11
Table 6: Noisy Baselines for Item Recommen-
dation. Noisy baseline AUC on Last.FM and
MovieLens-20M.
tics. Interestingly, for RippleNet on MovieLens-20M, performance is completely unaffected by KG
perturbation, even though the KG’s semantic information is apparently being corrupted.
Noisy Baselines To see if KGs yielded by our perturbation methods capture more than just random
noise, we compare them to several noisy baselines. Table 5 gives results for three noisy baselines
on commonsense QA: (1) replace subgraph embedding with zero vector, (2) replace subgraph em-
bedding with random vector, and (3) replace entity/relation embeddings with random vectors. For
CSQA, the noisy baselines perform noticeably worse than both Original KG and RL-RR, while be-
ing on par with No KG (Table 1). For OBQA, the noisy baselines’ perform slightly better than No
KG, but considerably worse than Original KG and all of the perturbation methods (Table 2). Table
6 displays results for our noisy baseline in item recommendation, which entails randomizing each
entity’s neighborhood. We find that KGCN performs about the same for this noisy baseline as for
Original KG and our best perturbation methods, whereas RippleNet performs much worse (Tables
3-4). RippleNet may be more sensitive than KGCN to entity neighbor randomization because Rip-
pleNet considers directed edges. This is supported by RippleNet’s performance dropping when we
perturb edge connections (Tables 3-4). In both tasks, the noisy baselines show that our perturbation
methods yield KGs that capture measurably useful information beyond just noise. For KGCN, the
unexpected discovery that noisy baselines perform similarly to Original KG suggest that even noisy
KGs can contain useful information for KG-augmented models.
Human Evaluation of KG Explanations We conduct a
user study to measure the plausibility of KG-augmented
models’ path-based explanations. For both the original KG
and RL-RR perturbed KG, we sample 30 questions from the
CSQA and OBQA test sets which were correctly answered
by MHGRN. For each question, we retrieve the top-scoring
path for each answer choice via MHGRN’s path decoder
attention. We then ask three human subjects to rate each
path for readability and usability, with ratings aggregated
via majority voting. Readability (Read) is whether the path
Method	CSQA		OBQA	
	Read	Use	Read	Use
Orig. KG	0.360	0.081	0.357	0.111
RL-RR	0.353	0.115	0.199	0.100
Table 7: Human Evaluation of KG Ex-
planations. Human ratings for readability
(Read) and usability (Use) of KG explana-
tion paths, on a [0, 1] scale.
makes sense, usability (Use) is whether the path is relevant to the given question-answer pair, and
both are measured on a [0, 1] scale. We obtain a Fleiss’ κ of 0.1891, indicating slight agreement
between raters. To illustrate, we provide examples of explanation paths and their consensus ratings.
Given the question James chose to not to print the cards, because he wanted to be more personal. What
type of cards did he choose, instead?, the Original KG Path is Print —[Antonym]→ Handwritten
(Read=1.0; Use=2.0), and the RL-RR path is PRINT — [NOTDESIRES]→ HANDWRITTEN (Read=0.0;
Use=0.0). Here, the Original KG Path seems Plausible, but the RL-RR Path does not.
in Table 7, we see that Original KG and RL-RR got relatively low ratings for both readability and
usability. Whereas MHGRN successfully utilizes all KG Paths in this user study, humans largely
struggle to read or use them. This suggests that KG-augmented models and humans Process KG
information quite differently, thus challenging the role of KG Paths as Plausible exPlanations. Also,
Original KG beats RL-RR in readability and usability overall, signaling RL-RR’s ability to corruPt
the KG. CSQA’s lower sensitivity to Perturbation can be exPlained by the fact that CSQA is con-
8
Published as a conference paper at ICLR 2021
structed from ConceptNet. Every CSQA question-answer is based on ConceptNet entities/relations,
so a random ConceptNet subgraph is more likely to have semantic overlap with a CSQA question-
answer than with an OBQA question-answer. Hence, a perturbed ConceptNet subgraph may also be
more likely to overlap with a CSQA question-answer, which means perturbing the KG might have
a smaller impact on human judgments of CSQA paths. Note that this result concerns explainability
and does not say anything about the model’s performance on CSQA and OBQA.
Validation of KG Similarity Metrics Using our human evaluation results, we validate our three
proposed KG similarity metrics: ATS, SC2D and SD2. We find that the Pearson correlation coeffi-
cient between the human evaluation scores in Table 7 and the three KG similarity scores in Tables
1-2 are 0.845, 0.932 and 0.932, respectively. This indicates high correlation and that our metrics
aptly capture a perturbed KG’s preservation of semantic/structural information from its original KG.
Why do perturbed KGs sometimes perform better than the original KG? In our experiments,
relation-based perturbations (RS, RR, RL-RR) generally outperform edge-based perturbations (ER,
ED). Also, we find that the original KG can contain noisy relation annotations which are sometimes
“corrected” by relation-based perturbations. In certain cases, this may result in the perturbed KG
achieving slightly higher performance than the original KG (RR and RL-RR for RN-CSQA; RL-RR
for Last.FM). Similarly, in our user study, despite all questions being correctly answered by the
model, there were some RL-RR explanations that received higher readability/usability ratings than
their original KG counterparts. Although the original KG achieved higher human ratings than the
RL-RR KG did overall, both KGs still achieved relatively low ratings with respect to our scales.
While our main argument centers on KG-augmented models’ flaws, this counterintuitive finding
suggests that KGs themselves are flawed too, but in a way that can be systematically corrected.
6	Related Work
KG-Augmented Neural Models Although neural models may already capture some semantic
knowledge (Petroni et al., 2019; Davison et al., 2019), augmenting them with external KGs has
improved performance on various downstream tasks: commonsense QA (Lin et al., 2019; Shen
et al., 2020; Lv et al., 2020; Musa et al., 2019), item recommendation (Wang et al., 2019b; 2020;
Song et al., 2019; Cao et al., 2019), natural language inference (Chen et al., 2017; Wang et al.,
2019c), and others (Chen et al., 2019; Kapanipathi et al.). KG-augmented models have also been
designed to explain the model’s predictions via attention over the KG (Lin et al., 2019; Zhang et al.,
2019; Song et al., 2019; Cao et al., 2019; Gao et al., 2019; Ai et al., 2018).
Adversarial Perturbation of Graphs Inspired by adversarial learning in computer vision (Bham-
bri et al., 2019) and NLP (Zhang et al., 2020), some recent works have addressed adversarial pertur-
bation in graph learning (Chen et al., 2020). Multiple paradigms have been proposed for graph per-
turbation, including gradient-based methods (Chen et al., 2018; Bojchevski & Gunnemann, 2019;
Wu et al., 2019), RL-based methods (Ma et al., 2019b; Dai et al., 2018), and autoencoder-based
methods (Chen et al., 2018). Whereas such works aim to minimally perturb the graph while max-
imally impacting the graph’s performance, our purpose for graph perturbation is to see whether
KG-augmented models’ use KGs in a human-like way and provide plausible explanations.
7	Conclusion
In this paper, we analyze the effects of strategically perturbed KGs on KG-augmented model pre-
dictions. Using four heuristics and a RL policy, we show that KGs can be perturbed in way that
drastically changes their semantics and structure, while preserving the model’s downstream perfor-
mance. Apparently, KG-augmented models can process KG information in a way that does not
align with human priors about KGs, although the nature of this process still requires further investi-
gation. Moreover, we conduct a user study to demonstrate that both perturbed and unperturbed KGs
struggle to facilitate plausible explanations of the model’s predictions. Note that our proposed KG
perturbation methods merely serve as analytical tools and are not intended to directly improve model
performance or explainability. Nonetheless, we believe our findings can guide future work on de-
signing KG-augmented models that are better in these aspects. Additionally, our results suggest that
KG-augmented models can be robust to noisy KG data. Even when the KG contains a fairly small
amount of signal, these models are somehow able to leverage it. This could be useful in situations
where it is impractical to obtain fully clean KG annotations.
9
Published as a conference paper at ICLR 2021
8	Acknowledgments
This research is supported in part by the Office of the Director of National Intelligence (ODNI),
Intelligence Advanced Research Projects Activity (IARPA), via Contract No. 2019-19051600007,
the DARPA MCS program under Contract No. N660011924033 with the United States Office Of
Naval Research, the Defense Advanced Research Projects Agency with award W911NF-19-20271,
and NSF SMA 18-29268. We would like to thank all collaborators at the USC INK Research Lab
for their constructive feedback on the work.
References
Qingyao Ai, Vahid Azizi, Xu Chen, and Yongfeng Zhang. Learning heterogeneous knowledge base
embeddings for explainable recommendation. Algorithms, 11(9):137, 2018.
Siddhant Bhambri, Sumanyu Muku, Avinash Tulasi, and Arun Balaji Buduru. A study of black box
adversarial attacks in computer vision. arXiv preprint arXiv:1912.01667, 2019.
Aleksandar Bojchevski and StePhan Gunnemann. Adversarial attacks on node embeddings via graph
poisoning. In International Conference on Machine Learning, pp. 695-704. PMLR, 2019.
Antoine Bordes, Nicolas Usunier, Alberto Garcia-Duran, Jason Weston, and Oksana Yakhnenko.
Translating embeddings for modeling multi-relational data. In Advances in neural information
processing systems, pp. 2787-2795, 2013.
Yixin Cao, Xiang Wang, Xiangnan He, Zikun Hu, and Tat-Seng Chua. Unifying knowledge graph
learning and recommendation: Towards a better understanding of user preferences. In The world
wide web conference, pp. 151-161, 2019.
Daoyuan Chen, Yaliang Li, Min Yang, Hai-Tao Zheng, and Ying Shen. Knowledge-aware textual
entailment with graph attention network. Proceedings of the 28th ACM International Conference
on Information and Knowledge Management, 2019.
Jinyin Chen, Yangyang Wu, Xuanheng Xu, Yixian Chen, Haibin Zheng, and Qi Xuan. Fast gradient
attack on network embedding. arXiv preprint arXiv:1809.02797, 2018.
Liang Chen, Jintang Li, Jiaying Peng, Tao Xie, Zengxu Cao, Kun Xu, Xiangnan He, and Zibin
Zheng. A survey of adversarial learning on graphs. arXiv preprint arXiv:2003.05730, 2020.
Qian Chen, Xiaodan Zhu, Zhen-Hua Ling, Diana Inkpen, and Si Wei. Neural natural language
inference models enhanced with external knowledge. arXiv preprint arXiv:1711.04289, 2017.
Hanjun Dai, Hui Li, Tian Tian, Xin Huang, Lin Wang, Jun Zhu, and Le Song. Adversarial attack on
graph structured data. arXiv preprint arXiv:1806.02371, 2018.
Joe Davison, Joshua Feldman, and Alexander M Rush. Commonsense knowledge mining from
pretrained models. In Proceedings of the 2019 Conference on Empirical Methods in Natural Lan-
guage Processing and the 9th International Joint Conference on Natural Language Processing
(EMNLP-IJCNLP), pp. 1173-1178, 2019.
Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep
bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805, 2018.
Giorgio Fagiolo. Clustering in complex directed networks. Physical Review E, 76(2):026107, 2007.
Yanlin Feng, Xinyue Chen, Bill Yuchen Lin, Peifeng Wang, Jun Yan, and Xiang Ren. Scal-
able multi-hop relational reasoning for knowledge-aware question answering. arXiv preprint
arXiv:2005.00646, 2020.
Jingyue Gao, Xiting Wang, Yasha Wang, and Xing Xie. Explainable recommendation through
attentive multi-view learning. In Proceedings of the AAAI Conference on Artificial Intelligence,
volume 33, pp. 3622-3629, 2019.
F. Maxwell Harper and Joseph A. Konstan. The movielens datasets: History and context. ACM
Trans. Interact. Intell. Syst., 5(4):19:1-19:19, 2016.
10
Published as a conference paper at ICLR 2021
SePP Hochreiter and Jurgen Schmidhuber. Long short-term memory. Neural computation, 9(8):
1735-1780,1997.
Pavan Kapanipathi, Veronika Thost, Siva Sankalp Patel, Spencer Whitehead, Ibrahim Abdelaziz,
Avinash Balakrishnan, Maria Chang, Kshitij P Fadnis, R Chulaka Gunasekara, Bassem Makni,
et al. Infusing knowledge into the textual entailment task using graPh convolutional networks.
Xiang Li, Aynaz Taheri, Lifu Tu, and Kevin GimPel. Commonsense knowledge base comPletion. In
Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume
1: Long Papers), PP. 1445-1455, Berlin, Germany, August 2016. Association for ComPutational
Linguistics. doi: 10.18653/v1/P16-1137. URL https://www.aclweb.org/anthology/
P16-1137.
Bill Yuchen Lin, Xinyue Chen, Jamin Chen, and Xiang Ren. Kagnet: Knowledge-aware graPh
networks for commonsense reasoning. In Proceedings of the 2019 Conference on Empirical
Methods in Natural Language Processing and the 9th International Joint Conference on Natural
Language Processing (EMNLP-IJCNLP), PP. 2822-2832, 2019.
Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike
Lewis, Luke Zettlemoyer, and Veselin Stoyanov. Roberta: A robustly oPtimized bert Pretraining
aPProach. arXiv preprint arXiv:1907.11692, 2019.
Shangwen Lv, Daya Guo, Jingjing Xu, Duyu Tang, Nan Duan, Ming Gong, Linjun Shou, Daxin
Jiang, Guihong Cao, and Songlin Hu. GraPh-based reasoning over heterogeneous external knowl-
edge for commonsense question answering. In AAAI, 2020.
Kaixin Ma, Jonathan Francis, Quanyang Lu, Eric Nyberg, and Alessandro Oltramari. Towards
generalizable neuro-symbolic systems for commonsense question answering. arXiv preprint
arXiv:1910.14087, 2019a.
Yao Ma, Suhang Wang, Tyler Derr, Lingfei Wu, and Jiliang Tang. Attacking graPh convolutional
networks via rewiring. arXiv preprint arXiv:1906.03750, 2019b.
Todor Mihaylov, Peter Clark, Tushar Khot, and Ashish Sabharwal. Can a suit of armor con-
duct electricity? a new dataset for oPen book question answering. In Proceedings of the
2018 Conference on Empirical Methods in Natural Language Processing, PP. 2381-2391,
Brussels, Belgium, October-November 2018. Association for ComPutational Linguistics. doi:
10.18653/v1/D18-1260. URL https://www.aclweb.org/anthology/D18- 1260.
Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A Rusu, Joel Veness, Marc G Belle-
mare, Alex Graves, Martin Riedmiller, Andreas K Fidjeland, Georg Ostrovski, et al. Human-level
control through deeP reinforcement learning. nature, 518(7540):529-533, 2015.
Ryan Musa, Xiaoyan Wang, Achille Fokoue, Nicholas Mattei, Maria Chang, Pavan KaPaniPathi,
Bassem Makni, Kartik TalamaduPula, and Michael Witbrock. Answering science exam questions
using query reformulation with background knowledge. In Automated Knowledge Base Construc-
tion (AKBC), 2019. URL https://openreview.net/forum?id=HJxYZ-5paX.
Jukka-Pekka Onnela, Jari Saramaki, Janos Kertesz, and Kimmo Kaski. Intensity and coherence of
motifs in weighted comPlex networks. Physical Review E, 71(6):065103, 2005.
Fabio Petroni, Tim RocktaScheL Patrick Lewis, Anton Bakhtin, Yuxiang Wu, Alexander H Miller,
and Sebastian Riedel. Language models as knowledge bases? arXiv preprint arXiv:1909.01066,
2019.
Steffen Rendle. Factorization machines with libfm. ACM Transactions on Intelligent Systems and
Technology, 3(3):57:1-57:22, 2012.
Adam Santoro, David RaPoso, David G Barrett, Mateusz Malinowski, Razvan Pascanu, Peter
Battaglia, and Timothy LillicraP. A simPle neural network module for relational reasoning. In
Advances in neural information processing systems, PP. 4967-4976, 2017.
11
Published as a conference paper at ICLR 2021
Jari Saramaki, Mikko Kivela, Jukka-Pekka Onnela, Kimmo Kaski, and Janos Kertesz. General-
izations of the clustering coefficient to weighted complex networks. Physical Review E, 75(2):
027105, 2007.
Michael Schlichtkrull, Thomas N Kipf, Peter Bloem, Rianne Van Den Berg, Ivan Titov, and Max
Welling. Modeling relational data with graph convolutional networks. In European Semantic Web
Conference,pp. 593-607. Springer, 2018.
Tao Shen, Yi Mao, Pengcheng He, Guodong Long, Adam Trischler, and Weizhu Chen. Exploiting
structured knowledge in text via graph-guided representation learning. ArXiv, abs/2004.14224,
2020.
Weiping Song, Zhijian Duan, Ziqing Yang, Hao Zhu, Ming Zhang, and Jian Tang. Ex-
plainable knowledge graph-based recommendation via deep reinforcement learning. ArXiv,
abs/1906.09506, 2019.
Robyn Speer, Joshua Chin, and Catherine Havasi. Conceptnet 5.5: An open multilingual graph of
general knowledge. arXiv preprint arXiv:1612.03975, 2016.
Yiwei Sun, Suhang Wang, Xianfeng Tang, Tsung-Yu Hsieh, and Vasant Honavar. Adversarial attacks
on graph neural networks via node injections: A hierarchical reinforcement learning approach. In
Proceedings of The Web Conference 2020, pp. 673-683, 2020.
Alon Talmor, Jonathan Herzig, Nicholas Lourie, and Jonathan Berant. Commonsenseqa: A question
answering challenge targeting commonsense knowledge. arXiv preprint arXiv:1811.00937, 2018.
Hongwei Wang, Fuzheng Zhang, Min Hou, Xing Xie, Minyi Guo, and Qi Liu. Shine: Signed
heterogeneous information network embedding for sentiment link prediction. In Proceedings
of the Eleventh ACM International Conference on Web Search and Data Mining, pp. 592-600,
2018a.
Hongwei Wang, Fuzheng Zhang, Jialin Wang, Miao Zhao, Wenjie Li, Xing Xie, and Minyi Guo.
Ripplenet: Propagating user preferences on the knowledge graph for recommender systems. In
Proceedings of the 27th ACM International Conference on Information and Knowledge Manage-
ment, pp. 417-426, 2018b.
Hongwei Wang, Fuzheng Zhang, Mengdi Zhang, Jure Leskovec, Miao Zhao, Wenjie Li, and
Zhongyuan Wang. Knowledge-aware graph neural networks with label smoothness regularization
for recommender systems. In Proceedings of the 25th ACM SIGKDD International Conference
on Knowledge Discovery & Data Mining, pp. 968-977, 2019a.
Hongwei Wang, Miao Zhao, Xing Xie, Wenjie Li, and Minyi Guo. Knowledge graph convolutional
networks for recommender systems. In The world wide web conference, pp. 3307-3313, 2019b.
Xiang Wang, Yao-Kun Xu, Xiangnan He, Yixin Cao, Meng Wang, and Tat-Seng Chua. Reinforced
negative sampling over knowledge graph for recommendation. Proceedings of The Web Confer-
ence 2020, 2020.
Xiaoyan Wang, Pavan Kapanipathi, Ryan Musa, Mo Yu, Kartik Talamadupula, Ibrahim Abdelaziz,
Maria Chang, Achille Fokoue, Bassem Makni, Nicholas Mattei, et al. Improving natural language
inference using external knowledge in the science questions domain. In Proceedings of the AAAI
Conference on Artificial Intelligence, volume 33, pp. 7208-7215, 2019c.
Huijun Wu, Chen Wang, Yuriy Tyshetskiy, Andrew Docherty, Kai Lu, and Liming Zhu. Adversarial
examples on graph data: Deep insights into attack and defense. arXiv preprint arXiv:1903.01610,
2019.
Bishan Yang, Wen tau Yih, Xiaodong He, Jianfeng Gao, and Li Deng. Embedding entities and
relations for learning and inference in knowledge bases, 2015.
Wei Emma Zhang, Quan Z Sheng, Ahoud Alhazmi, and Chenliang Li. Adversarial attacks on
deep-learning models in natural language processing: A survey. ACM Transactions on Intelligent
Systems and Technology (TIST), 11(3):1-41, 2020.
12
Published as a conference paper at ICLR 2021
Wen Zhang, Bibek Paudel, Wei Zhang, Abraham Bernstein, and Huajun Chen. Interaction em-
beddings for prediction and explanation in knowledge graphs. Proceedings of the Twelfth ACM
International Conference on Web Search and Data Mining, 2019.
W. Zheng, J. Yu, L. Zou, and H. Cheng. Question answering over knowledge graphs: Question
understanding via template decomposition. Proc. VLDB Endow., 11:1373-1386, 2018.
13