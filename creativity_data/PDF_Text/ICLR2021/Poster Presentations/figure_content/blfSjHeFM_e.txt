Figure 2: In backward-pass, the adjoint methodreconstructs trajectory as a separate IVP. Naive,ACA and MALI track the forward-time trajectory,hence are accurate. ACA and MALI only back-propagate through the accepted step, while naivemethod backpropagates through the search pro-cess hence has deeper computation graphs.
Figure 1: Illustration of numerical solver inforward-pass. For adaptive solvers, for each stepforward-in-time, the stepsize is recursively ad-justed until the estimated error is below prede-fined tolerance; the search process is representedby green curve, and the accepted step (ignore thesearch process) is represented by blue curve.
Figure 3: With ALF method, given any tuple(zj, vj, tj) and discretized time points {ti}iN=t1,we can reconstruct the entire trajectory accu-rately due to the reversibility of ALF.
Figure 4: Comparison of error in gradient in Eq. 6. (a) error in ddL.
Figure 5: Results on Cifar10. From left to right: (1) box plot of test accuracy (first 4 columns are NeuralODEs, last is ResNet); (2) test accuracy ±std v.s. training epoch for Neural ODE; (3) test accuracy ±std v.s.
Figure 6: Top-1 accuracy on Ima-geNet validation dataset.
Figure 1: Region of A-stability for eigenvalue on the imaginary plane for damped ALF. From leftto right, the region of stability for η = 0.25, η = 0.7,η = 0.8 respectively. As η increases to 1, thearea of stability region decreases.
Figure 2:	Results on ImageNet.
Figure 3:	Results on MNIST dataset.
Figure 4: Results on Cifar10 dataset.
Figure 5: Results on ImageNet64 dataset.
Figure 6: Comparison of error in gradient estimation for the toy example by Eq.6 of the main paper,when t < 1.
