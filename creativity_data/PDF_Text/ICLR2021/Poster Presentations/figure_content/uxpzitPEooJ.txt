Figure 1: An illustration of learnable coarsening framework. Existing coarsening algorithm deter-mines the topology of coarse graph G, while GOREN resets the edge weights of the coarse graph.
Figure 2: A toy example.
Figure 3: After optimizing edge weights, we can construct a smaller graph with eigenvalues muchcloser to eigenvalues of original graph. G.e and Gc.e stand for the eigenvalues of original graph andcoarse graph output by Variation-Edge algorithm. After-Opt stands for the eigenvalues of graphswhere weights are optimized. The error is measured by the maximum absolute difference over alleigenvalues of original graph and the coarse graph (after optimization).
Figure 4: A collection of subgraphs corresponding to edges in coarse graphs (WS and PubMed)generated by variation neighborhood algorithm. Reduction ratio is 0.7 and 0.9 respectively.
Figure 5: The first row illustrates the weight difference for local variation neighborhood (left) andheavy edge (right) with 0.5 as the reduction ratio. Blue (red) edges denote edges whose learnedweights is smaller (larger) than the default ones. The second row shows the first 40 eigenvalues ofthe original graph Laplacian, coarse graph w/o learning, and coarse graph w/ learning.
