Figure 2: Comparison of Algorithm 1’s run-ning time (ours) with the running time ofcvxpy (Diamond & Boyd, 2016; Agrawal et al.,gHHCHKMeansBIRCH0.463 ± 0.0020.508 ± 0.0080.429 ± 0.0130.444 ± 0.0050.440 ± 0.0010.440 ± 0.0022018) with the OSQP solver (Stellato et al.,2020) for tree depth D = 3, varying n.
Figure 3: Glass tree routing distribution, in rounded percent of dataset, for λ left-to-right in {0, 0.001, 0.1}.
Figure 4: Class routing distributions on Glass, with distributions normalized over each depth level. Trees weretrained with optimal hyper-parameters, (depth D = 6), but we plot nodes up to D = 4 for visualization ease.
Figure 5: Comparison of Algorithm 1’s running time (ours) with the running time of Cvxpy with OSQPsolver. n takes values in a range that covers common choices of batch size. Time and n axis are represented inlogarithmic scale.
Figure 6: Average (a,b) Error Rate (c-e) Mean Square Error vs average training time required by each method.
