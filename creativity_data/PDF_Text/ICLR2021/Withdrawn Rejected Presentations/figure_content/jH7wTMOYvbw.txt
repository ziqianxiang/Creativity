Figure 1: Illustration of a Recursive Neighborhood Pooling GNN (RNP-GNN) with recursion pa-rameters (2, 2, 1). To compute the representation of vertex v in the given input graph (depictedin the top left of the figure), we first recurse on G(N2 (v) \ {v}), depicted in the top right ofthe figure). To do so, we find the representation of each vertex u ∈ G(N2 (v) \ {v}). For in-stance, to compute the representation of u1, we apply an RNP-GNN with recursion parameters(2, 1) and aggregate G((N2(v) \ {v}) ∩ (N2(u1) \ {u1})), which is shown in the bottom leftof the figure. To do so, we recursively apply an RNP-GNN with recursion parameter (1) onG((N2(v) \ {v}) ∩ (N2(u1) \ {u1}) ∩ (N1(u11) \ {u11})), in the bottom right of the figure.
Figure 2: MPNNs cannot count substructures with three vertices or more (Chen et al., 2020). Forexample, the graph with black center vertex on the left cannot be counted, since the two graphs onthe left result in the same vertex representations as the graph on the right.
Figure 3: Example of a covering sequence computed for the graph on the left. For thisgraph, (v6, v1 , v4, v5, v3, v2) is a vertex covering sequence with respect to the covering sequence(3, 3, 3, 2, 1). The first two computations to obtain this covering sequence are depicted in the middleand on the right.
Figure 4: For the above graph, (v1, v2, . . . , v6) is a vertex covering sequence. The correspondingcovering sequence (1, 4, 3, 2, 1) is not decreasing.
