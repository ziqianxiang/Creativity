Figure 1: IRRM architecturesentity set E and a relationship set L. A KB triplet hei, l, eai composed of two entities ei, ea ∈ Eand a relationship l ∈ L, where ei is an ingredient (e.i. ei ∈ I) and l is an attribute and ea is theattribute value. For instance, happle, flavorMolecule, (-)-Epicatechini denotes that apple containsthe (-)-Epicatechin flavor molecule.
Figure 2: Geometric comparisons of score func- Figure 3: HoW to generate pairs for mini-tions.	batches.
Figure 4: Comparison of Roc-curve by ingredientfrequency-based pair type, which use the Explicit modelon CulinaryDB, one-to-one pairs. L describes Low fre-quency, H describes High frequency.
Figure 5: Visualizations of atten-tion weights of our Explicit model onCulidnaryDB.
Figure 6: Ingredient Set EncoderA.3 Triplets for Ingredientsingredient	attribute	attribute valueapple	category	fruitapple	flavor molecule	(+)-DeIta-Cadineneapple	flavor molecule	(-)-Epicatechinapple	color	redapricot	flavor molecule	(+)-DeIta-Cadineneapricot	category	fruit		Figure 7: Triplets for Ingredients(+)-Delta-CadineneA.4 Dataset StatisticsTable 4: Dataset StatisticsDatasets	Recipe Num	Ing./Molecule Num	Attribute TypesCulinaryDB	45,772 (train+valid: 41,231, test: 4,541)	658/1,788	cuisine category, food category, flavor molecules, flavor profile(e.g. Bitter)Flavornet	55,001 (train+valid: 49,501, test: 5,500)	381/1,021	cuisine category, food category, flavor moleculesA.5 The implementation details of NeuMF and Wide&DeepWe implemented both the NeuMF model and the Wide&Deep model from scratch in PyTorch2.
Figure 7: Triplets for Ingredients(+)-Delta-CadineneA.4 Dataset StatisticsTable 4: Dataset StatisticsDatasets	Recipe Num	Ing./Molecule Num	Attribute TypesCulinaryDB	45,772 (train+valid: 41,231, test: 4,541)	658/1,788	cuisine category, food category, flavor molecules, flavor profile(e.g. Bitter)Flavornet	55,001 (train+valid: 49,501, test: 5,500)	381/1,021	cuisine category, food category, flavor moleculesA.5 The implementation details of NeuMF and Wide&DeepWe implemented both the NeuMF model and the Wide&Deep model from scratch in PyTorch2.
