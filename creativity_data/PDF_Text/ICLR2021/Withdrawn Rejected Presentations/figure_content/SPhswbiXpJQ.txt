Figure 1: Our proposed approach for compiler analyses driven by graph-based deep learning.
Figure 2: Limitations in state-of-the-art learnable code representations: code2vec (Alon et al.,2018a), CDFG (Brauckmann et al., 2020), and XFG (Ben-Nun et al., 2018).
Figure 3: ProGraML construction from a Fibonacci implementation using LLVM-IR.
Figure 4: Example input-output graphs for each of the five DeepDataFlow tasks. A single ver-tex is randomly selected from the input graph as the starting point for computing analysis results,indicated using the vertex selector (blue node). Each vertex in the output graph is annotated with abinary value after the analysis has completed. As a supervised classification task, the goal is to pre-dict the output vertex labels given an input graph. These small graphs are for illustrative purposes,the average DeepDataFlow graph contains 581 vertices and 1,051 edges.
Figure 5: F1 score on a 10k-graph validation set as a functionof the number of training graphs.
Figure 6: Extending inst2vec (Ben-Nun et al., 2018) to perform per-instruction classification ofLLVM-IR. The _ operator denotes vector concatenation.
