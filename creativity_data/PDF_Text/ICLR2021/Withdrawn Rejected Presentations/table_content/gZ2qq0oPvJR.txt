Table 1: Three challenges defined in the theory of Robinson Arithmetic (RA) and two challenges from the Logical Calculi (LCL) domain of the TPTP library			Name	Theory	Size	DescriptionRA-1	RA	1800	Expressions of the form Ni + N = N3, Ni ∙ N = N3, where 0 ≤ Ni < 30. (Examples: 3+4 = 7 or 5∙ 12 = 60.)RA-2	RA	1000	T = N, where 0 ≤ N, and T is a random expression with 3 operators and operands Ni such that 0 ≤ Ni < 10. (E.g.: ((3+4) ∙ 2)+6=20.)RA-3	RA	1000	Ti = T2, where Ti and T2 are random expressions with 3 operators and operands Ni such that 2 ≤ Ni < 10. E.g. ((3+4) ∙ 2) + 6 = ((1 + 1)∙5)∙2.)	一	LCL-Eq	LCL	890	TPTP domain: Logic Calculi (Equivalential) 一 extended with lem- mata from E prover.
Table 2: Comparing a random model, Vampire, E, leanCoP, rlCoP andFLoP, with respect to success ratio for RA-1, RA-2 and RA-3 problems.
Table 3: Curriculum learning for RA-3 on two harder problems withproofs of 113 and 108 steps. We report success ratios and averageproof lengths, based on 3 runs. Standard deviations are given in paren-thesis.
Table 5: Comparing FLoP and plCoP using two different evaluationmethods: 1) guided MCTS and 2) eager evaluation based on the policymodelDataset	Prover	MCTS	Eager PolicyLCL-Eq	plCoP	^47%^^	5%	FLoP	19%	19%LCL-Imp	plCoP	-61%^-	5%	FLoP	24%	27%RA-1	plCoP	-65%^^	82%	FLoP	61%	100%RA-2	plCoP	-48%^^	49%	FLoP	31%	99%For the LCL problems, plCoP collapses while FLoP is unaffected. This suggests that plCoP dependsheavily on the search procedure it used for training. FLoP cannot make good use of MCTS, which issomewhat expected, since its policy and value networks were not trained for that purpose.
Table 6: Curriculum Learning compared with only exploration basedlearning, on the LCL-Eq and LCL-Imp datasets, using 10M and 30Minference limit, respectively. We report the ratio of proofs found duringtraining. The results are averages of 2 runs.
Table 7: Axioms of Robinson Arithmetic extended with special axioms for handling equality.	Name	Axiomzero successor different successors plus zero plus successor mul zero mul successor	∀X :-(o = S(X)) ∀X,Y : (s(X) = s(Y)) ⇒ (X = Y) ∀X : pluS(X, o) = X ∀X,Y : pluS(X, S(Y)) = S(pluS(X, Y)) ∀X : mul(X, o) = o ∀X, Y : mul(X, S(Y )) = pluS(mul(X, Y ), X)equality reflexivity equality symmetry equality transitivity congruence of s congruence of plus congruence of mul	∀X : X = X ∀X,Y : (X = Y) ⇒ (Y = X) ∀X,Y,Z : (X = Y) ∧ (Y = Z) ⇒ (X = Z) ∀X,Y : (X = Y) ⇒ (S(X) = S(Y)) ∀X1,X2,Y1,Y2 : (X1 =X2)∧(Y1 =Y2) ⇒ pluS(X1, Y1) = pluS(X2, Y2) ∀X1,X2,Y1,Y2 : (X1 = X2) ∧ (Y1 =Y2) ⇒mul(X1,Y1) = mul(X2,Y2)Table 8: Axioms of Robinson Arithmetic using binary encoding of numbers, extended with special axioms for handling equality.	Name	Axiomzero successor one successor different successors predecessor plus zero plus one1 plus one2 plus one3 plus one3 plus more1 plus more2 plus more3 mul zero1 mul zero2 mul one1 mul one2 mul more	∀X,Y : -(n0 = b(X,Y)) ∀X,Y : -(n1 = b(X,Y)) ∀X1,X2,Y1,Y2: (b(X1, Y1) =b(X2,Y2)) ⇒ ((X1 =X2)∧(Y1 =Y2)) ∀X : (X = n0) ∨ (X = n1) ∨ (∃Y,Z : b(Y, Z) = X) ∀X : pluS(X, n0) = n1 pluS(n0, n1) = n1 pluS(n1, n1) = b(n0, n1) ∀X : (pluS(b(n0, X), n1) = b(n1, X)) ∀X : (pluS(b(n1, X), n1) = b(n0, pluS(X, n1))) ∀X,Y : (pluS(n0, b(X, Y)) = b(X, Y)) ∀X,Y : (pluS(n1, b(X, Y)) = pluS(b(X, Y), n1)) ∀X1, Y1, X2, Y2 : (pluS(b(X1, Y1), b(X2, Y2)) = pluS(b(X1, pluS(Y1, Y2)), X2)) ∀X : (mul(X, n0) = n0) ∀X : (mul(n0, X) = n0) ∀X : (mul(X, n1) = X) ∀X : (mul(n1, X) = X) ∀X1, Y1, X2, Y2	:	(mul(b(X1, Y1), b(X2, Y2))	= pluS(pluS(pluS(b(n0, b(n0, mul(Y1 , Y2))), b(n0, mul(Y1 , X2))), b(n0, mul(X1,Y2))), mul(X1,X2)))equality reflexivity equality symmetry equality transitivity congruence of b congruence of plus congruence of mul	∀X : X = X ∀X,Y : (X = Y) ⇒ (Y = X) ∀X, Y, Z : (X = Y) ∧ (Y = Z) ⇒ (X = Z) ∀X1, X2, Y1, Y2	:	(X1 =X2)∧(Y1 =Y2)	⇒ (b(X1,Y2) =	b(X2, Y2)) ∀X1, X2, Y1, Y2	:	(X1 =X2)∧(Y1 =Y2)	⇒ pluS(X1, Y1)	= pluS(X2, Y2) ∀X1,X2,H,K ：(Xi = X2) ∧ (H = K) ⇒ mul(X1,H) = mul(X2,K)	D LCL datasetsThe LCL domain in the TPTP (Sutcliffe, 2017) library consists of statements about various formalinference systems. LCL-Eq and LCL-Imp formalize properties of the Equivalential Calculus and theImplication and Falsum Calculus, respectively. Both are subsystems of the classical propositionalcalculus, restricting the set of allowed connectives to {≡} and { =⇒ , ⊥}. For both subsystems,the appropriate variant of the condensed detachment inference rule constitutes a strongly completeinference system, i.e., whenever a formula semantically follows from a set of premises, it also followsfrom the set syntactically.
Table 8: Axioms of Robinson Arithmetic using binary encoding of numbers, extended with special axioms for handling equality.	Name	Axiomzero successor one successor different successors predecessor plus zero plus one1 plus one2 plus one3 plus one3 plus more1 plus more2 plus more3 mul zero1 mul zero2 mul one1 mul one2 mul more	∀X,Y : -(n0 = b(X,Y)) ∀X,Y : -(n1 = b(X,Y)) ∀X1,X2,Y1,Y2: (b(X1, Y1) =b(X2,Y2)) ⇒ ((X1 =X2)∧(Y1 =Y2)) ∀X : (X = n0) ∨ (X = n1) ∨ (∃Y,Z : b(Y, Z) = X) ∀X : pluS(X, n0) = n1 pluS(n0, n1) = n1 pluS(n1, n1) = b(n0, n1) ∀X : (pluS(b(n0, X), n1) = b(n1, X)) ∀X : (pluS(b(n1, X), n1) = b(n0, pluS(X, n1))) ∀X,Y : (pluS(n0, b(X, Y)) = b(X, Y)) ∀X,Y : (pluS(n1, b(X, Y)) = pluS(b(X, Y), n1)) ∀X1, Y1, X2, Y2 : (pluS(b(X1, Y1), b(X2, Y2)) = pluS(b(X1, pluS(Y1, Y2)), X2)) ∀X : (mul(X, n0) = n0) ∀X : (mul(n0, X) = n0) ∀X : (mul(X, n1) = X) ∀X : (mul(n1, X) = X) ∀X1, Y1, X2, Y2	:	(mul(b(X1, Y1), b(X2, Y2))	= pluS(pluS(pluS(b(n0, b(n0, mul(Y1 , Y2))), b(n0, mul(Y1 , X2))), b(n0, mul(X1,Y2))), mul(X1,X2)))equality reflexivity equality symmetry equality transitivity congruence of b congruence of plus congruence of mul	∀X : X = X ∀X,Y : (X = Y) ⇒ (Y = X) ∀X, Y, Z : (X = Y) ∧ (Y = Z) ⇒ (X = Z) ∀X1, X2, Y1, Y2	:	(X1 =X2)∧(Y1 =Y2)	⇒ (b(X1,Y2) =	b(X2, Y2)) ∀X1, X2, Y1, Y2	:	(X1 =X2)∧(Y1 =Y2)	⇒ pluS(X1, Y1)	= pluS(X2, Y2) ∀X1,X2,H,K ：(Xi = X2) ∧ (H = K) ⇒ mul(X1,H) = mul(X2,K)	D LCL datasetsThe LCL domain in the TPTP (Sutcliffe, 2017) library consists of statements about various formalinference systems. LCL-Eq and LCL-Imp formalize properties of the Equivalential Calculus and theImplication and Falsum Calculus, respectively. Both are subsystems of the classical propositionalcalculus, restricting the set of allowed connectives to {≡} and { =⇒ , ⊥}. For both subsystems,the appropriate variant of the condensed detachment inference rule constitutes a strongly completeinference system, i.e., whenever a formula semantically follows from a set of premises, it also followsfrom the set syntactically.
Table 9: Curriculum Learning vs Supervised Learning trained on proofs with extra steps added for distraction. FLoP is barely affected, whilesupervised learning’s performance degrades. Numbers with ? are averaged from 2 runs.
Table 10: Comparing plCoP using MCTS and two different eager eval-uation methods based on hte policy and value modelsDataset	Prover	MCTS	Eager Policy	Eager ValueLCL-Eq	plCoP	-17%-	5%	1%LCL-Imp	plCoP	""61%-	5%	1%RA-1	plCoP	""65%-	82%	3%RA-2	plCoP	48%	49%	5%16Under review as a conference paper at ICLR 2021I	Failure ModesDespite the apparent simplicity of our arithmetic learning environments, a learning system aiming tosolve them has to overcome some hard challenges. We have decided to describe these challenges indetail as they are present in other domains as well, even if it may be harder to detect.
