Published as a conference paper at ICLR 2021
Scalable Learning and MAP Inference for
Nonsymmetric Determinantal Point Processes
Mike Gartrell
Criteo AI Lab
m.gartrell@criteo.com
Insu Han
KAIST
insu.han@kaist.ac.kr
Elvis Dohmatob
Criteo AI Lab
e.dohmatob@criteo.com
Jennifer Gillenwater
Google Research
jengi@google.com
Victor-Emmanuel Brunel
ENSAE ParisTech
victor.emmanuel.brunel@ensae.fr
Ab stract
Determinantal point processes (DPPs) have attracted significant attention in ma-
chine learning for their ability to model subsets drawn from a large item collection.
Recent work shows that nonsymmetric DPP (NDPP) kernels have significant
advantages over symmetric kernels in terms of modeling power and predictive
performance. However, for an item collection of size M, existing NDPP learning
and inference algorithms require memory quadratic in M and runtime cubic (for
learning) or quadratic (for inference) in M , making them impractical for many
typical subset selection tasks. In this work, we develop a learning algorithm with
space and time requirements linear in M by introducing a new NDPP kernel de-
composition. We also derive a linear-complexity NDPP maximum a posteriori
(MAP) inference algorithm that applies not only to our new kernel but also to
that of prior work. Through evaluation on real-world datasets, we show that our
algorithms scale significantly better, and can match the predictive performance of
prior work.
1	Introduction
Determinantal point processes (DPPs) have proven useful for numerous machine learning tasks.
For example, recent uses include summarization (Sharghi et al., 2018), recommender systems
(Wilhelm et al., 2018), neural network compression (Mariet & Sra, 2016), kernel approximation
(Li et al., 2016), multi-modal output generation (Elfeki et al., 2019), and batch selection, both for
stochastic optimization (Zhang et al., 2017) and for active learning (Bιyιk et al., 2019). For subset
selection problems where the ground set of items to select from has cardinality M, the typical DPP is
parameterized by an M × M kernel matrix. Most prior work has been concerned with symmetric
DPPs, where the kernel must equal its transpose. However, recent work has considered the more
general class of nonsymmetric DPPs (NDPPs) and shown that these have additional useful modeling
power (Brunel, 2018; Gartrell et al., 2019). In particular, unlike symmetric DPPs, which can only
model negative correlations between items, NDPPs allow modeling of positive correlations, where
the presence of item i in the selected set increases the probability that some other item j will also
be selected. There are many intuitive examples of how positive correlations can be of practical
importance. For example, consider a product recommendation task for a retail website, where a
camera is found in a user’s shopping cart, and the goal is to display several other items that might be
purchased. Relative to an empty cart, the presence of the camera probably increases the probability
of buying an accessory like a tripod.
Although NDPPs can theoretically model such behavior, the existing approach for NDPP learning and
inference (Gartrell et al., 2019) is often impractical in terms of both storage and runtime requirements.
These algorithms require memory quadratic in M and time quadratic (for inference) or cubic (for
learning) in M ; for the not-unusual M of 1 million, this requires storing 8TB-size objects in memory,
with runtime millions or billions of times slower than that of a linear-complexity method.
In this work, we make the following contributions:
1
Published as a conference paper at ICLR 2021
Learning: We propose a new decomposition of the NDPP kernel which reduces the storage and run-
time requirements of learning and inference to linear in M . Fortuitously, the modified decomposition
retains all of the previous decomposition’s modeling power, as it covers the same part of the NDPP
kernel space. The algebraic manipulations we apply to get linear complexity for this decomposition
cannot be applied to prior work, meaning that our new decomposition is crucial for scalability.
Inference: After learning, prior NDPP work applies a DPP conditioning algorithm to do subset
expansion (Gartrell et al., 2019), with quadratic runtime in M. However, prior work does not examine
the general problem of MAP inference for NDPPs, i.e., solving the problem of finding the highest-
probability subset under a DPP. For symmetric DPPs, there exists a standard greedy MAP inference
algorithm that is linear in M . In this work, we develop a version of this algorithm that is also linear
for low-rank NDPPs. The low-rank requirement is unique to NDPPs, and highlights the fact that the
transformation of the algorithm from the symmetric to the nonsymmetric space is non-trivial. To the
best of our knowledge, this is the first MAP algorithm proposed for NDPPs.
We combine the above contributions through experiments that involve learning NDPP kernels and
applying MAP inference to these kernels to do subset selection for several real-world datasets.
These experiments demonstrate that our algorithms are much more scalable, and that the new kernel
decomposition matches the predictive performance of the decomposition from prior work.
2	Background
Consider a finite setY = {1, 2, . . . , M} of cardinality M, which we will also denote by [[M]]. A DPP
on [[M]] defines a probability distribution over all of its 2M subsets. It is parameterized by a matrix
L ∈ RM×M, called the kernel, such that the probability of each subset Y ⊆ [[M]] is proportional to
the determinant of its corresponding principal submatrix: Pr(Y) α det(Lγ). The normalization
constant for this distribution can be expressed as a single M × M determinant: PY⊆ [M]] det(LY) =
det(L + I) (Kulesza et al., 2012, Theorem 2.1). Hence, Pr(Y) = det(LY)/ det(L + I). We will
use PL to denote this distribution.
For intuition about the kernel parameters, notice that the probabilities of singletons {i} and {j} are
proportional to Lii and Ljj, respectively. Hence, itis common to think of L’s diagonal as representing
item qualities. The probability of a pair {i, j} is proportional to det(L{i,j} ) = Lii Ljj - LijLji.
Thus, if -Lij Lji < 0, this indicates i and j interact negatively. Similarly, if -Lij Lji > 0, then
i and j interact positively. Therefore, off-diagonal terms determine item interactions. (The vague
term “interactions” can be replaced by the more precise term “correlations” if we consider the DPP’s
marginal kernel instead; see Gartrell et al. (2019, Section 2.1) for an extensive discussion.)
In order to ensure that PL defines a probability distribution, all principal minors of L must be
non-negative: det(LY) ≥ 0. Matrices that satisfy this property are called P0-matrices (Fang, 1989,
Definition 1). There is no known generative method or matrix decomposition that fully covers the
space of all P0 matrices, although there are many that partially cover the space (Tsatsomeros, 2004).
One common partial solution is to use a decomposition that covers the space of symmetric P0 matrices.
By restricting to the space of symmetric matrices, one can exploit the fact that L ∈ P0 if L is positive
semidefinite (PSD)* (Prussing, 1986). Any symmetric PSD matrix can be written as the Gramian
matrix of some set of vectors: L := V V >, where V ∈ RM×K. Hence, the V V > decomposition
provides an easy means of generating the entire space of symmetric P0 matrices. It also has a nice
intuitive interpretation: we can view the i-th row of V as a length-K feature vector describing item i.
Unfortunately, the symmetry requirement limits the types of correlations that a DPP can capture. A
symmetric model is able to capture only nonpositive interactions between items, since Lij Lji =
Li2j ≥ 0, whereas a nonsymmetric L can also capture positive correlations. (Again, see Gartrell et al.
(2019, Section 2.1) for more intuition.) To expand coverage to nonsymmetric matrices in P0, it is
natural to consider nonsymmetric PSD matrices. In what follows, we denote by P0+ the set of all
nonsymmetric (and symmetric) PSD matrices. Any nonsymmetric PSD matrix is in P0 (Gartrell et al.,
2019, Lemma 1), so P0+ ⊆ P0. However, unlike in the symmetric case, the set of nonsymmetric PSD
*Recall that a matrix L ∈ RM ×M is defined to be PSD if and only if x> Lx ≥ 0, for all x ∈ RM .
2
Published as a conference paper at ICLR 2021
matrices does not fully cover the set of nonsymmetric P0 matrices. For example, consider
L =	11/2
with det(L{1}), det(L{2}), det(L{1,2}) ≥ 0, but x>Lx < 0 for x = -11
Still, nonsymmetric PSD matrices cover a large enough portion of the P0 space to be useful in
practice, as evidenced by the experiments of Gartrell et al. (2019). This work covered the P0+
space by using the following decomposition: L := S + A, with S := V V > for V ∈ RM×K,
and A := BC> - CB> for B , C ∈ RM ×K . This decomposition makes use of the fact that any
matrix L can be decomposed uniquely as the sum of a symmetric matrix S = (L + LT )/2 and a
skew-symmetric matrix A = (L - LT)/2. All skew-symmetric matrices A are trivially PSD, since
x>Ax = 0 for all x ∈ RM. Hence, the L here is guaranteed to be PSD simply because its S uses
the standard Gramian decomposition V V > .
In this work we will also only consider P0+, and leave to future work the problem of finding tractable
ways to cover the rest of P0. We propose a new decomposition of L that also covers the P0+ space,
but allows for more scalable learning. As in prior work, our decomposition has inner dimension
K that could be as large as M, but is usually much smaller in practice. Our algorithms work well
for modest values of K. In cases where the natural K is larger (e.g., natural language processing),
random projections can often be used to significantly reduce K (Gillenwater et al., 2012a).
3	New kernel decomposition and scalable learning
Prior work on NDPPs proposed a maximum likelihood estimation (MLE) algorithm (Gartrell et al.,
2019). Due to that work’s particular kernel decomposition, this algorithm had complexity cubic in
the number of items M . Here, we propose a kernel decomposition that reduces this to linear in M .
We begin by showing that our new decomposition covers the space of P0+ matrices. Before diving in,
let us define Σi := -0λ λ0i as shorthand for a 2 × 2 block matrix with zeros on-diagonal and
opposite values off-diagonal. Then, our proposed decomposition is as follows:
L := S+A, with S := VV> andA := BCB>,
(1)
where V, B ∈ RM×K, and C ∈ RK×K is a block-diagonal matrix with some diagonal blocks of
the form Σi , with λi > 0, and zeros elsewhere. The following lemma shows that this decomposition
covers the space of P0+ matrices.
Lemma 1. Let A ∈ RM ×M be a skew-symmetric matrix with rank ` ≤ M. Then, there exist
B ∈ RM ×' and positive numbers λι,...,λb'∕2j, such that A = BCB>, where C ∈ R'×' is the
block-diagonal matrix with ['/2] diagonal blocks OfSize 2 given by ∑i, i = 1,..., ['/2] and zero
elsewhere.
The proof of Lemma 1 and all subsequent results can be found in Appendix F. With this decomposition
in hand, we now proceed to show that it can be used for linear-time MLE learning. To do so, we must
show that corresponding NDPP log-likelihood objective and gradient can be computed in time linear
in M. Given a collection of n observed subsets {Y1, ..., Yn} composed of items from Y = [[M]], the
full formulation of the regularized log-likelihood is:
n
φ(V, B, C) = - X logdet (VYi VY> + BγiCBYi) - logdet (VVT + BCBT + I)- R(V, B),
n i=1
(2)
where VYi ∈ R|Yil×K denotes a matrix composed of the rows of V that correspond to the items in
Yi. The regularization term, R(V, B), is defined as follows:
MM
R(V, B) = α X —kvik2+ β X - kbik2,
i=1 μi	i=1 μi
(3)
where μ% counts the number of occurrences of item i in the training set, Vi and b are rows of V and
B, respectively, and α, β > 0 are tunable hyperparameters. This regularization is similar to that of
prior works (Gartrell et al., 2017; 2019). We omit regularization for C.
3
Published as a conference paper at ICLR 2021
Theorem 1 shows that computing the regularized log-likelihood and its gradient both have time
complexity linear in M. The complexities also depend on K, the rank of the NDPP, and K0, the size
of the largest observed subset in the data. For many real-world datasets we observe that K0 M,
and we set K = K0 . Hence, linearity in M means that we can efficiently perform learning for
datasets with very large ground sets, which is impossible with the cubic-complexity L decomposition
in prior work (Gartrell et al., 2019).
Theorem 1. Given an NDPP with kernel L = V V > + BCB>, parameterized by V of rank K, B
of rank K, and a K × K matrix C, we can compute the regularized log-likelihood (Eq. 2) and its
gradient in O(MK2 + K3 + nK03) time, where K0 is the size of the largest of the n training subsets.
4 MAP inference
After learning an NDPP, one can then use it to infer the most probable item subsets in various
situations. Several inference algorithms have been well-studied for symmetric DPPs, including
sampling (Kulesza & Taskar, 2011; Anari et al., 2016; Li et al., 2016; Launay et al., 2018; Gillenwater
et al., 2019; Poulson, 2019; Derezinski, 2019) and MAP inference (Gillenwater et al., 2012b; Han
et al., 2017; Chen et al., 2018; Han & Gillenwater, 2020). We focus on MAP inference:
argmax det(LY ) such that |Y | = k,
Y⊆Y
(4)
for cardinality budget k ≤ M . MAP inference is a better fit than sampling when the end application
requires the generation of a single output set, which is usually the case in practice (e.g., this is
usually true for recommender systems). MAP inference for DPPs is known to be NP-hard even
in the symmetric case (Ko et al., 1995; Kulesza et al., 2012). For symmetric DPPs, one usually
approximates the MAP via the standard greedy algorithm for submodular maximization (Nemhauser
et al., 1978). First, we describe how to efficiently implement this for NDPPs. Then, in Section 4.1
we prove a lower bound on its approximation quality. To the best of our knowledge, this is the first
investigation of how to apply the greedy algorithm to NDPPs.
Greedy begins with an empty set and repeatedly adds the item that maximizes the marginal gain until
the chosen set is size k. Here, we design an efficient greedy algorithm for the case where the NDPP
kernel is low-rank. For generality, in what follows we write the kernel as L = BCB>, since one can
easily rewrite our matrix decomposition (Eq. 1), as well as that of Gartrell et al. (2019), to take this
form. For example, for our decomposition: L = V V > + BCB> = (V B)
Using Schur’s determinant identity, we first observe that, for Y ⊆ [[M]] and i ∈ [[M]], the marginal
gain of a NDPP can be written as
I0	C0	VB>> .
det(LY ∪{i})
det(LY)
Lii- LiY (LY )-1Lγi = biCb> - bi C (BY(BY CBY)TBY) Cb>,
(5)
where bi ∈ R1×K and BY ∈ RIY| ×K. A naive computation of Eq. 5 is O(K2 + k3), since We must
invert a |Y | × |Y | matrix, where |Y | ≤ k . However, one can compute Eq. 5 more efficiently by
observing that its BY>(BYCBY>)-1BY component can actually be expressed without an inverse, as
a rank-|Y | matrix, that can be computed in O(K2 ) time.
Lemma 2. Given B ∈ RM×K, C ∈ RK×K, and Y = {a1, . . . , ak} ⊆ [[M]], let bi ∈ R1×K be the
i -th row in B and BY ∈ R|Y l×K be a matrix containing rows in B indexed by Y. Then, it holds that
k
BY>(BYCBY>)-1BY =Xpj>qj,
j=1
(6)
where row vectors pj, qj ∈ R1×K forj = 1, . . . , k satisfy p1 = ba1 /(ba1 C ba> ), q1 = ba1, and
baj - baj C> Pij=1 qi>pi
bajC(baj -b°jC> Pj=I q>Pi)T，
j
qj+1 = baj - baj C	Pi>qi.
i=1
(7)
pj+1
4
Published as a conference paper at ICLR 2021
Algorithm 1 Greedy MAP inference/conditioning for low-rank NDPPs
1:	Input: B ∈ RM×K, C ∈ RK×K, the cardinality k . And {aι,..., ak} for conditioning
2:	initialize P — [ ], Q — [ ] and Y - 0
3:	∆i — biCb> for i ∈ [M[ where b ∈ R1×K is the i-th row in B
4:	a - argmaxi ∆i and Y - Y ∪ {a}	. a - a1 for conditioning
5:	while |Y | ≤ k do
6:	P - (ba - ba C >Q>P) /∆a
7:	q - ba - baCP>Q
8:	P - [P;p] andQ - [Q;q]
9:	∆i - ∆i- (biCpτ) (biCτqτ) for i ∈ [MJ, i ∈ Y
10:	a - argmaxi ∆i and Y - Y ∪ {a}	. a - a|Y |+1 for conditioning
11:	end while
12:	return Y	. return {∆i}iM=1 for conditioning
Table 1: Algorithm complexities for several DPP models. Our model and the symmetric DPP model
(Gartrell et al., 2017) can perform both tasks in time linear in the size of ground set M, but ours is a
more general model that can capture positive as well as negative item correlations.
Low-rank DPP Models	MLE Learning Runtime	MAP Inference Runtime	MLE Learning Memory	MAP Inference Memory
Symmetric DPP (Gartrell et al., 2017)	O(MK2 + nK3)	O(MKk + MK2)	O(MK)	O(MK)
Nonsymmetric DPP (Gartrell et al., 2019)	O(M3 + MK2 + nK3)	O(MKk + MK2)	O(M 2)	O(MK)t
Scalable nonsymmetric DPP (this work)	O(MK2 + nK3)	O(MKk + MK2)	O(MK + K2)	O(MK + K2)
Plugging Eq. 6 into Eq. 5, the marginal gain with respect to Y ∪ {a} can be computed by simply
updating from the previous gain with respect to Y. That is,
|Y |+1
(Y∪{a,i}	>	∖、(L Z-f,n>)(	> >)
det(Lγ∪{a}) = biCbi - M ECPj)EC qj)	⑻
=ded⅛ - (biCPlM ,C>q").	⑼
The marginal gains when Y = 0 are equal to diagonals of L and require O(M K2) operations. Then,
computing the update terms in Eq. 9 for all i ∈ [[M]] needs O(MK) operations. Since the total
number of updates is k, the overall complexity becomes O(MK2 + MKk). We provide a full
description of the implied greedy algorithm for low-rank NDPPs in Algorithm 1.
Table 1 summarizes the complexitiy of our methods and those of previous work. Note that the full
M × M L + I matrix is used to compute the DPP normalization constant in Gartrell et al. (2019),
which is why this approach has memory complexity of O(M2) for MLE learning.
4.1	Approximation guarantee for greedy NDPP MAP inference
As mentioned above, Algorithm 1 is an instantiation of the standard greedy algorithm used for
submodular maximization (Nemhauser et al., 1978). This algorithm has a (1 - 1/e)-approximation
guarantee for the problem of maximizing nonnegative, monotone submodular functions. While
the function f(Y) = log det(LY) is submodular for a symmetric PSD L (Kelmans & Kimelfeld,
1983), it is not monotone. Often, as in Han & Gillenwater (2020), it is assumed that the smallest
eigenvalue of L is greater than 1, which guarantees montonicity. There is no particular evidence
that this assumption is true for practical models, but nevertheless the greedy algorithm tends to
tThe exact memory complexity for MAP inference is 3MK, since V, B, and C used in this model are all
M × K matrices.
5
Published as a conference paper at ICLR 2021
perform well in practice for symmetric DPPs. Here, we prove a similar approximation guarantee that
covers NDPPs as well, even though the function f(Y ) = log det(LY ) is non-submodular when L is
nonsymmetric. In Section 5.5, we further observe that, as for symmetric DPPs, the greedy algorithm
seems to work well in practice for NDPPs.
We leverage a recent result of Bian et al. (2017), who proposed an extension of greedy algorithm
guarantees to non-submodular functions. Their result is based on the submodularity ratio and
curvature of the objective function, which measure to what extent it has submodular properties.
Theorem 2 extends this to provide an approximation ratio for greedy MAP inference of NDPPs.
Theorem 2. Consider a nonsymmetric low-rank DPP L = V V > + BCB>, where V , B are of
rank K, and C ∈ RK×K. Given a cardinality budget k, let σmin and σmax denote the smallest and
largest singular values of LY for all Y ⊆ [[M]] and |Y | ≤ 2k. Assume that σmin > 1. Then,
log det(LY G ) ≥
4(1 - e-1/4)
2(log σ
max∕lθg Gm®) - 1
log det(Lγ*)
(10)
where Y G is the output ofAlgorithm 1 and Y * is the optimal solution of MAP inference in Eq. 4.
Thus, when the kernel has a small value of log σmax∕ log σmin , the greedy algorithm finds a near-
optimal solution. In practice, we observe that the greedy algorithm finds a near-optimal solution
even for large values of this ratio (see Section 5.5). As remarked above, there is no evidence that the
condition σmin > 1 is usually true in practice. While this condition can be achieved by multiplying
L by a constant, this leads to a (potentially large) additive term in Eq. 10. We provide Corollary 1 in
Appendix D, which excludes the σmin > 1 assumption, and quantifies this additive term.
4.2	Greedy conditioning for next-item prediction
We briefly describe here a small modification to the greedy algorithm that is necessary if one wants
to use it as a tool for next-item prediction. Given a set Y ⊆ [[M]], Kulesza et al. (2012) showed
that a DPP with L conditioned on the inclusion of the items in Y forms another DPP with kernel
LY := LY-Lγ,γL-1Lγ,γ where Y = [M]\Y. Thesingletonprobability Pr(Y∪{i} | Y) H LY
can be useful for doing next-item prediction. We can use the same machinery from the greedy
algorithm’s marginal gain computations to effectively compute these singletons. More concretely,
suppose that we are doing next-item prediction as a shopper adds items to a digital cart. We predict
the item that maximizes the marginal gain, conditioned on the current cart contents (the set Y).
When the shopper adds the next item to the cart, we update Y to include this item, rather than our
predicted item (line 10 in Algorithm 1). We then iterate until the shopper checks out. The comments
on the righthand side of Algorithm 1 summarize this procedure. The runtime of this prediction is
the same that of the greedy algorithm, O(MK2 + MK|Y|). We note that this cost is comparable
to that of an approach based on the DPP dual kernel from prior work (Mariet et al., 2019), which
has O(MK2 + K3 + |Y|3) complexity. However, since it is non-trivial to define the dual kernel for
NDPPs, the greedy algorithm may be the simpler choice for next-item prediction for NDPPs.
5	Experiments
To further simplify learning and MAP inference, we set B = V , which results in L = V V > +
V CV > = V (I + C)V >. This change also simplifies regularization, so that we only perform
regularization on V , as indicated in the first term of Eq. 3, leaving us with the single regularization
hyperparameter of α. While setting B = V restricts the class of nonsymmetric L kernels that can
be represented, we compensate for this restriction by relaxing the block-diagonal structure imposed
on C, so that we learn a full skew-symmetric K × K matrix C. To ensure that C and thus A is
skew-symmetric, we parameterize C by setting C = D - DT, were D varies over RK×K.
Code for all experiments is available at
https://github.com/cgartrel/scalable-nonsymmetric-DPPs.
5.1	Datasets
We perform experiments on several real-world public datasets composed of subsets:
6
Published as a conference paper at ICLR 2021
1.	Amazon Baby Registries: This dataset consists of registries or "baskets" of baby products, and
has been used in prior work on DPP learning (Gartrell et al., 2016; 2019; Gillenwater et al., 2014;
Mariet & Sra, 2015). The registries contain items from 15 different categories, such as “apparel”,
with a catalog of up to 100 items per category. Our evaluation mirrors that of Gartrell et al. (2019);
we evaluate on the popular apparel category, which contains 14,970 registries, as well as on a dataset
composed of the three most popular categories: apparel, diaper, and feeding, which contains a total
of 31,218 registries.
2.	UK Retail: This dataset (Chen et al., 2012) contains baskets representing transactions from an
online retail company that sells unique all-occasion gifts. We omit baskets with more than 100 items,
leaving us with a dataset containing 19,762 baskets drawn from a catalog of M = 3,941 products.
Baskets containing more than 100 items are in the long tail of the basket-size distribution of the data,
so omitting larger baskets is reasonable, and allows us to use a low-rank factorization of the DPP
with K = 100.
3.	Instacart: This dataset (Instacart, 2017) contains baskets purchased by Instacart users. We omit
baskets with more than 100 items, resulting in 3.2 million baskets and a catalog of 49,677 products.
4. Million Song: This dataset (McFee et al., 2012) contains playlists (“baskets”) of songs played by
Echo Nest users. We trim playlists with more than 150 items, leaving us with 968,674 baskets and a
catalog of 371,410 songs.
5.2	Experimental setup and metrics
We use a small held-out validation set, consisting of 300 randomly-selected baskets, for tracking
convergence during training and for tuning hyperparameters. A random selection of 2000 of the
remaining baskets are used for testing, and the rest are used for training. Convergence is reached
during training when the relative change in validation log-likelihood is below a predetermined
threshold. We use PyTorch with Adam (Kingma & Ba, 2015) for optimization. We initialize C from
the standard Gaussian distribution with mean 0 and variance 1, and B (which we set equal to V ) is
initialized from the uniform(0, 1) distribution.
Subset expansion task. We use greedy conditioning to do next-item prediction, as described in
Section 4.2. We compare methods using a standard recommender system metric: mean percentile
rank (MPR) (Hu et al., 2008; Li et al., 2010). MPR of 50 is equivalent to random selection; MPR of
100 means that the model perfectly predicts the next item. See Appendix A for a complete description
of the MPR metric.
Subset discrimination task. We also test the ability of a model to discriminate observed subsets
from randomly generated ones. For each subset in the test set, we generate a subset of the same
length by drawing items uniformly at random (and we ensure that the same item is not drawn more
than once for a subset). We compute the AUC for the model on these observed and random subsets,
where the score for each subset is the log-likelihood that the model assigns to the subset.
5.3	Predictive performance results for learning
Since the focus of our work is on improving NDPP scalability, we use the low-rank symmetric
DPP (Gartrell et al., 2017) and the low-rank NDPP of prior work (Gartrell et al., 2019) as baselines
for our experiments. Table 2 compares these approaches and our scalable low-rank NDPP. We see
that NDPPs generally outperform symmetric DPPs. Furthermore, we see that our scalable NDPP
matches or exceeds the predictive quality of the baseline NDPP. We believe that our model sometimes
improves upon this baseline NDPP due to the use of a simpler kernel decomposition with fewer
parameters, likely leading to a simplified optimization landscape.
5.4	Time comparison for learning
In Fig. 1, we report the wall-clock training time of the decomposition of Gartrell et al. (2019) (NDPP)
and our scalable NDPP for the Amazon: 3-category (Fig. 1(a)) and UK Retail (Fig. 1(b)) datasets.
As expected, we observe that the scalable NDPP trains far faster than the NDPP for datasets with
large ground sets. For the Amazon: 3-category dataset, both approaches show comparable results,
with the scalable NDPP converging 1.07× faster than NDPP. But for the UK Retail dataset, which
has a much larger ground set, our scalable NDPP achieves convergence about 8.31× faster. Notice
7
Published as a conference paper at ICLR 2021
Table 2: Average MPR, AUC, and test log-likelihood for all datasets, for the low-rank symmetric
DPP (Gartrell et al., 2017), low-rank NDPP (Gartrell et al., 2019), and our scalable NDPP models.
MPR and AUC results show 95% confidence estimates obtained via bootstrapping. Bold values
indicate improvement over the symmetric low-rank DPP outside of the confidence interval. See
Appendix B for the hyperparameter settings used in these experiments. The baseline NDPP model
cannot be feasibly trained on the Instacart and Million Song datasets, as memory and computational
costs are prohibitive due to large ground set sizes.
Amazon: Apparel (M = 100)	Amazon: 3-category (M = 300)
Metric	Sym	Nonsym	Scalable nonsym	Sym	Nonsym	Scalable nonsym
MPR	62.63 ± 1.81	72.20 ± 3.07	69.02 ± 2.57-	61.0 ± 2.73	74.10 ± 2.49	73.04 ± 2.58
AUC	0.68 ± 0.05	0.77 ± 0.03	0.74 ± 0.03	0.76 ± 0.03	0.82 ± 0.02	0.82 ± 0.02
test log-likelihood	-10.02	-9.64	-9.63	-18.11	-16.96	-17.14
	UK Retail (M = 3,941)			Instacart (M =		49,677)
Metric	Sym	Nonsym	Scalable nonsym	Sym	Nonsym	Scalable nonsym
MPR	69.95 ± 1.32	74.17 ± 1.37	-76.79 ± 1.17	93.86 ± 0.55	-	93.13 ± 0.53
AUC	0.58 ± 0.01	0.66 ± 0.01	0.73 ± 0.01	0.83 ± 0.01	-	0.85 ± 0.005
test log-likelihood	-116.23	-104.38	-100.65	-72.81	-	-72.74
Million Song (M = 371,410)
Metric	Sym Nonsym Scalable nonsym
MPR	90.37 ± 0.71	-	90.41 ± 0.75
AUC	0.69 ± 0.01	-	0.77 ± 0.01
test log-likelihood -335.25	-	-317.16
wall clock time (sec)
(a) Amazon: 3-category
wall clock time (sec)
(b) UK Retail
Figure 1: The negative log-likelihood of the training set for Gartrell et al. (2019)’s NDPP (blue,
dashed) and our scalable NDPP (red, solid) versus wall-clock time for the (a) Amazon: 3-category
and (b) UK Retail datasets.
that our scalable NDPP also opens to the door to training on datasets with large M, such as the
Instacart and Million Song dataset, which is infeasible for the baseline NDPP due to high memory
and compute costs. For example, NDPP learning using Gartrell et al. (2019) for the Million Song
dataset would require approximately 1.1 TB of memory, while using our scalable NDPP approach
requires approximately 445.9 MB.
5.5	Performance results for MAP inference
We run various approximatation algorithms for MAP inference, including the greedy algorithm (Algo-
rithm 1), stochastic greedy algorithm (Mirzasoleiman et al., 2015), MCMC-based DPP sampling (Li
et al., 2016), and greedy local search (Kathuria & Deshpande, 2016). The stochastic greedy algorithm
computes marginal gains of a few items chosen uniformly at random and selects the best among them.
The MCMC sampling begins with a random subset Y of size k and picks i ∈ Y and j ∈/ Y uniformly
at random. Then, it swaps them with probability det(Lγ∪{j}∖{i})∕(det(Lγ∪{j}∖{i}) + det(Lγ))
and iterates this process. The greedy local search algorithm (Kathuria & Deshpande, 2016) starts from
the output from the greedy algorithm, Y G, and replaces i ∈ Y G with j ∈/ Y G that gives the maximum
improvement, if such i, j exist. This replacement process iterates until no improvement exists, or at
8
Published as a conference paper at ICLR 2021
Table 3: Average relative error and 95% confidence intervals of MAP inference algorithms on
NDPPs learned from real-world datasets. For all datasets, we evaluate 10 kernels learned with
different initializations, and run 100 random trials for stochastic greedy (Mirzasoleiman et al., 2015)
and MCMC sampling (Li et al., 2016). All errors are relative to greedy local search (Kathuria &
Deshpande, 2016).
Algorithms Amazon: Apparel Amazon: 3-category UK Retail	Instacart Million Song
Greedy (Algorithm 1)~0.0336 ± 0.0066	0.0093	±	0.0015	0.0446	±	0.0035	0.0173	±	0.0028	0.0052	±	0.0017
Stochastic greedy 0.1606 ± 0.0133	0.1838	±	0.0116	0.0960	±	0.0078	0.1229	±	0.0091	0.0823	±	0.0108
MCMC sampling 0.7155 ± 0.0287	0.7094	±	0.0207	0.9365	±	0.0342	1.9291	±	0.047	1.0493	±	0.0607
Table 4: Wall-clock time (in milliseconds) of MAP inference algorithms on NDPPs learned from
real-world datasets.
Algorithms	Amazon: Apparel	Amazon: 3-category	UK Retail	Instacart	Million Song
Greedy local search	5.78 ms	9.67 ms	58.74 ms	1.024 s	7.277 s
Greedy (Algorithm 1)	0.14 ms	0.34 ms	1.60 ms	36.16 ms	338.09 ms
Stochastic greedy	0.25 ms	0.47 ms	1.79 ms	36.94 ms	348.67 ms
MCMC sampling	0.19 ms	0.35 ms	2.85 ms	42.85 ms	303.20 ms
most k2 log(10k) steps have been completed, to guarantee a tight approximation (Kathuria & Desh-
pande, 2016). We use greedy local search as a baseline since it always returns a better solution than
greedy. However, it is the slowest among all algorithms, as its time complexity is O(MKk4 log k).
We choose k = 10, and provide more details of all algorithms in Appendix C.
To evaluate the performance of MAP inference, we report the relative log-determinant ratio defined as
logdet(Lγ*) — logdet(LY)
log det(Lγ*)
where Y is the output of benchmark algorithms and Y * is the greedy local search result. Results are
reported in Table 3. We observe that the greedy (Algorithm 1) achieves performance close to that of
the significantly more expensive greedy local search algorithm, with relative errors of up to 0.045.
Stochastic greedy and MCMC sampling have significantly larger errors.
For completeness, in Appendix E we also present experiments comparing the performance of greedy
and exact MAP on small synthetic NDPPs, for which the exact MAP can be feasibly computed.
5.6	Time comparison for MAP inference
We provide the wall-clock time of the above algorithms for real-world datasets in Table 4. Observe
that the greedy algorithm is the fastest method for all datasets except Million Song. For Million Song,
MCMC sampling is faster than other approaches, but it has much larger relative errors in terms of
log-determinant (see Table 3), which is not suitable for our purposes.
6	Conclusion
We have presented a new decomposition for nonsymmetric DPP kernels that can be learned in time
linear in the size of the ground set, which is a significant improvement over the complexity of prior
work. Empirical results indicate that this decomposition matches the predictive performance of the
prior decomposition. We have also derived the first MAP algorithm for nonsymmetric DPPs and
proved a lower bound on the quality of its approximation. In future work we hope to develop intuition
about the meaning of the parameters in the C matrix and consider kernel decompositions that cover
other parts of the nonsymmetric P0 space.
9
Published as a conference paper at ICLR 2021
References
Nima Anari, Shayan Oveis Gharan, and Alireza Rezaei. Monte Carlo Markov Chain Algorithms for
Sampling Strongly Rayleigh Distributions and Determinantal Point Processes. In Conference on
Learning Theory (COLT), 2016.
Andrew An Bian, Joachim M. Buhmann, Andreas Krause, and Sebastian Tschiatschek. Guarantees
for Greedy Maximization of Non-submodular Functions with Applications. In International
Conference on Machine Learning (ICML), 2017.
Erdem Bιyιk, Kenneth Wang, Nima Anari, and Dorsa Sadigh. Batch Active Learning Using Determi-
nantal Point Processes. arXiv:1906.07975, 2019.
Victor-Emmanuel Brunel. Learning Signed Determinantal Point Processes through the Principal
Minor Assignment Problem. In Neural Information Processing Systems (NeurIPS), 2018.
Daqing Chen, Sai Laing Sain, and Kun Guo. Data mining for the online retail industry: A case study
of RFM model-based customer segmentation using data mining. Journal of Database Marketing
& Customer Strategy Management, 2012.
Laming Chen, Guoxin Zhang, and Eric Zhou. Fast greedy MAP inference for Determinantal
Point Process to improve recommendation diversity. In Neural Information Processing Systems
(NeurIPS), 2018.
MiChal Derezinski. Fast determinantal point processes via distortion-free intermediate sampling. In
Conference on Learning Theory (COLT), 2019.
Mohamed Elfeki, Camille Couprie, Morgane Riviere, and Mohamed Elhoseiny. GDPP: Learning
Diverse Generations using Determinantal Point Processes. In International Conference on Machine
Learning (ICML), 2019.
Li Fang. On the Spectra of P- and P0-Matrices. In Linear Algebra and its Applications, 1989.
Mike Gartrell, Ulrich Paquet, and Noam Koenigstein. Bayesian low-rank determinantal point
processes. In Conference on Recommender Systems (RecSys). ACM, 2016.
Mike Gartrell, Ulrich Paquet, and Noam Koenigstein. Low-Rank Factorization of Determinantal
Point Processes. In Conference on Artificial Intelligence (AAAI), 2017.
Mike Gartrell, Victor-Emmanuel Brunel, Elvis Dohmatob, and Syrine Krichene. Learning Non-
symmetric Determinantal Point Processes. In Neural Information Processing Systems (NeurIPS),
2019.
Jennifer Gillenwater, Alex Kulesza, and Ben Taskar. Discovering Diverse and Salient Threads in
Document Collections. In Empirical Methods in Natural Language Processing (EMNLP), 2012a.
Jennifer Gillenwater, Alex Kulesza, and Ben Taskar. Near-Optimal MAP Inference for Determinantal
Point Processes. In Neural Information Processing Systems (NIPS), 2012b.
Jennifer Gillenwater, Alex Kulesza, Emily Fox, and Ben Taskar. Expectation-Maximization for
learning Determinantal Point Processes. In Neural Information Processing Systems (NIPS), 2014.
Jennifer Gillenwater, Alex Kulesza, Zelda Mariet, and Sergei Vassilvtiskii. A Tree-Based Method
for Fast Repeated Sampling of Determinantal Point Processes. In International Conference on
Machine Learning (ICML), 2019.
Insu Han and Jennifer Gillenwater. MAP Inference for Customized Determinantal Point Processes via
Maximum Inner Product Search. In Conference on Artificial Intelligence and Statistics (AISTATS),
2020.
Insu Han, Prabhanjan Kambadur, Kyoungsoo Park, and Jinwoo Shin. Faster greedy MAP inference
for determinantal point processes. In International Conference on Machine Learning (ICML),
2017.
10
Published as a conference paper at ICLR 2021
Yifan Hu, Yehuda Koren, and Chris Volinsky. Collaborative Filtering for Implicit Feedback Datasets.
In International Conference on Data Mining (ICDM), 2008.
Instacart. The Instacart Online Grocery Shopping Dataset, 2017. URL https://www.
instacart.com/datasets/grocery-shopping-2017. Accessed May 2020.
Tarun Kathuria and Amit Deshpande. On sampling and greedy map inference of constrained
determinantal point processes. arXiv preprint arXiv:1607.01551, 2016.
A.K. Kelmans and B.N. Kimelfeld. Multiplicative submodularity of a matrix’s principal minor as a
function of the set of its rows and some combinatorial applications. Discrete Mathematics, 1983.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In International
Conference on Learning Representations (ICLR), 2015.
Chun-Wa Ko, Jon Lee, and Maurice Queyranne. An Exact Algorithm for Maximum Entropy Sampling.
Operations Research, 1995.
Alex Kulesza and Ben Taskar. Learning determinantal point processes. In Conference on Uncertainty
in Artificial Intelligence (UAI), 2011.
Alex Kulesza, Ben Taskar, et al. Determinantal Point Processes for Machine Learning. Foundations
and Trends® in Machine Learning, 2012.
Claire Launay, Bruno Galerne, and Agnes Desolneux. Exact Sampling of Determinantal Point
Processes without Eigendecomposition. arXiv preprint arXiv:1802.08429, 2018.
Chengtao Li, Stefanie Jegelka, and Suvrit Sra. Fast DPP Sampling for Nystrom with Application to
Kernel Methods. In International Conference on Machine Learning (ICML), 2016.
Yanen Li, Jia Hu, ChengXiang Zhai, and Ye Chen. Improving One-class Collaborative Filtering by
Incorporating Rich User Information. In Conference on Information and Knowledge Management
(CIKM), 2010.
Zelda Mariet and Suvrit Sra. Fixed-point algorithms for learning Determinantal Point Processes. In
International Conference on Machine Learning (ICML), 2015.
Zelda Mariet and Suvrit Sra. Diversity Networks: Neural Network Compression Using Determinantal
Point Processes. In International Conference on Learning Representations (ICLR), 2016.
Zelda Mariet, Mike Gartrell, and Suvrit Sra. Learning Determinantal Point Processes by Sampling
Inferred Negatives. In Conference on Artificial Intelligence and Statistics (AISTATS), 2019.
Brian McFee, Thierry Bertin-Mahieux, Daniel PW Ellis, and Gert RG Lanckriet. The million song
dataset challenge. In Proceedings of the 21st International Conference on World Wide Web, 2012.
Baharan Mirzasoleiman, Ashwinkumar Badanidiyuru, Amin Karbasi, Jan Vondrdk, and Andreas
Krause. Lazier Than Lazy Greedy. In Conference on Artificial Intelligence (AAAI), 2015.
G. Nemhauser, L. Wolsey, and M. Fisher. An Analysis of Approximations for Maximizing Submodu-
lar Set Functions I. Mathematical Programming, 14(1), 1978.
Jack Poulson. High-performance sampling of generic Determinantal Point Processes. arXiv preprint
arXiv:1905.00165, 2019.
John E. Prussing. The Principal Minor Test for Semidefinite Matrices. Journal of Guidance, Control,
and Dynamics, 1986.
Aidean Sharghi, Ali Borji, Chengtao Li, Tianbao Yang, and Boqing Gong. Improving Sequential
Determinantal Point Processes for Supervised Video Summarization. In Proceedings of the
European Conference on Computer Vision (ECCV), 2018.
G Thompson. Normal forms for skew-symmetric matrices and Hamiltonian systems with first
integrals linear in momenta. In Proceedings of the American Mathematical Society, 1988.
11
Published as a conference paper at ICLR 2021
Robert C Thompson. Principal submatrices IX: Interlacing inequalities for singular values of
submatrices. Linear Algebra and its Applications, 1972.
Michael J. Tsatsomeros. Generating and Detecting Matrices with Positive Principal Minors. In Focus
on Computational Neurobiology, 2004.
Mark Wilhelm, Ajith Ramanathan, Alexander Bonomo, Sagar Jain, Ed H. Chi, and Jennifer Gillen-
water. Practical Diversified Recommendations on YouTube with Determinantal Point Processes.
In Conference on Information and Knowledge Management (CIKM), 2018.
Cheng Zhang, HedVig Kjellstrom, and StePhan Mandt. Determinantal Point Processes for Mini-Batch
Diversification. In Conference on Uncertainty in Artificial Intelligence (UAI), 2017.
12
Published as a conference paper at ICLR 2021
A Mean Percentile Rank
We begin our definition of MPR by defining percentile rank (PR). First, given a set J, let pi,J
Pr(J ∪ {i} | J). The percentile rank of an item i given a set J is defined as
PRi,J
Eio∈j 1(Pi,j ≥ Pi0,j)
|Y\J|
× 100%
where Y\J indicates those elements in the ground setY that are not found in J.
For our evaluation, given a test set Y , we select a random element i ∈ Y and compute PRi,Y \{i}. We
then average over the set of all test instances T to compute the mean percentile rank (MPR):
MPR
∣T X PR
Y∈T
i,Y \{i}.
B Hyperparameters for experiments in Table 2
Preventing numerical instabilities: The first term on the right side of Eq. 2 will be singular whenever
∣Yi ∣ > K, where Yi is an observed subset. Therefore, to address this in practice we set K to the
size of the largest subset observed in the data, K0, as in Gartrell et al. (2017). However, this does
not entirely address the issue, as the first term on the right side of Eq. 2 may still be singular even
when ∣Yi ∣ ≤ K. In this case though, we know that we are not at a maximum, since the value of the
objective function is -∞. Numerically, to prevent such singularities, in our implementation we add a
small I correction to each LYi when optimizing Eq. 2 (we set = 10-5 in our experiments).
We perform a grid search using a held-out validation set to select the best performing hyperparameters
for each model and dataset. The hyperparameter settings used for each model and dataset are
described below.
Symmetric low-rank DPP (Gartrell et al., 2016). For this model, we use K for the number of item
feature dimensions for the symmetric component V , and α for the regularization hyperparameter for
V . We use the following hyperparameter settings:
•	Both Amazon datasets: K = 30, α = 0.
•	UK Retail dataset: K = 100, α = 1.
•	Instacart dataset: K = 100, α = 0.001.
•	Million Song dataset: K = 150, α = 0.0001.
Baseline NDPP (Gartrell et al., 2019). For this model, to ensure consistency with the notation used
in Gartrell et al. (2019), we use D to denote the number of item feature dimensions for the symmetric
component V , and D0 to denote the number of item feature dimensions for the nonsymmetric
components, B and C. As described in Gartrell et al. (2019), α is the regularization hyperparameter
for the V , while β and γ are the regularization hyperparameters for B and C, respectively. We use
the following hyperparameter settings:
•	Both Amazon datasets: D = 30, α = 0.
•	Amazon apparel dataset: D0 = 30.
•	Amazon three-category dataset: D0 = 100.
•	UK Retail dataset: D = 100, D0 = 20,α = 1.
•	All datasets: β = γ = 0.
Scalable NDPP. As described in Section 3, we use K to denote the number of item feature dimensions
for the symmetric component V and the dimensionality of the nonsymmetric component C . α is the
regularization hyperparameter. We use the following hyperparameter settings:
•	Amazon apparel dataset: K = 30, α = 0.
•	Amazon three-category dataset: K = 100, α = 1.
•	UK dataset: K = 100, α = 0.01.
13
Published as a conference paper at ICLR 2021
•	Instacart dataset: K = 100, α = 0.001.
•	Million Song dataset: K = 150, α = 0.01.
For all of the above model configurations we use a batch size of 200 during training, except for the
scalable NDPPs trained on the Amazon apparel, Amazon three-category, Instacart, and Million Song
datasets, where a batch size of 800 is used.
C Benchmark algorithms for MAP inference
We test the following approximate algorithms for MAP inference:
Greedy local search. This algorithm starts from the output of greedy, Y G, and replaces i ∈ Y G
with j ∈/ Y G that gives the maximum improvement of the determinant, if such i, j exist. Kathuria
& DeshPande (2016) showed that running the search for such a SWaP O(k2 log(k∕ε)) times with
an accuracy parameter ε gives a tight approximation guarantee for MAP inference for symmetric
DPPs. We set the number of swaPs to bk2 log(10k)c for ε = 0.1 and use greedy local search as a
baseline, since it is strictly an imProvement on the greedy solution. The ProPosed greedy conditioning
can be used for fast greedy local search. SPecifically, for each i ∈ Y G, Algorithm 1 can comPute
marginal imProvements conditioned by Y G \ {i} in time O(MKk), and thus its runtime can be
O(MKk4 log(k∕ε)). However, it is the slowest among all of our benchmark algorithms.
Stochastic greedy. This algorithm comPutes marginal gains of a few items chosen uniformly at
random and selects the best among them. Mirzasoleiman et al. (2015) proved that (M/k) log(1∕ε)
samPles are enough to guarantee an (1 - 1/e - ε)-aPProximation ratio for submodular functions (i.e.,
symmetric DPPs). We choose ε = 0.1 and set the number of samPles to b(M/k) log(10)c. Under
this setting, the time complexity of stochastic greedy is O(MKkl2 log(1∕ε)), which is better than
the naive exact greedy algorithm. However, we note that it is worse than that of our efficient greedy
implement (Algorithm 1). This is because the stochastic greedy uses different random samples for
every iteration and this does not take advantage of the amortized computations in Lemma 2. In our
experiments, we simply modify line 10 in Algorithm 1 for stochastic greedy (argmax is operated
on a random subset of marginal gains), hence it can run in O(MKk + (M/k) log(1∕ε)) time. In
practice, we observe that stochastic greedy is slightly slower than exact greedy due to the additional
costs of the random sampling process.
MCMC sampling. We also compare inference algorithms with sampling from a nonsymmetric
DPP. To the best of our knowledge, exact sampling of a non-Hermitian DPP was studied in Poulson
(2019), which requires the Cholesky decomposition with O(M3) complexity. This is infeasible for a
large M. To resolve this, Markov Chain Monte-Carlo (MCMC) based sampling is preferred (Li et al.,
2016) for symmetric DPPs. In particular, we consider a Gibbs sampling for k-DPP, which begins
with a random subset Y with size k, and picks i ∈ Y and j ∈/ Y uniformly at random. Then, it swaps
them with probability
det(LY ∪{j}∖{i})
det(LY ∪{j}∖{i}) + det(LY)
(11)
and repeat this process for several steps. Li et al. (2016) showed that O(Nklog(k∕ε)) swaps are
enough to approximate the ground-truth distribution under symmetric DPPs. However, for a fair
runtime comparison to Algorithm 1, we set the number of swaps to b3N/Kc.
D Corollary of Theorem 2
Theorem 2 requires the technical condition σmin > 1, but in practice there is no particular evidence
that this condition holds. While this condition can be achieved by multiplying L by a constant, this
leads to a (potentially large) additive term in Eq. 10. Here, we provide Corollary 1 which excludes
the σmin > 1 assumption from Theorem 2, and quantifies this additive term.
Corollary 1. Consider a nonsymmetric low-rank DPP L = V V > + BCB>, where V,Bare of
rank K, and C ∈ RK×K. Given a cardinality budget k, let σmin and σmax denote the smallest and
14
Published as a conference paper at ICLR 2021
I--(1 - l∕e) guarantee]
0------'-----'-----
10	20	30	4
lθgSmax/Omin)
(a)	Symmetric DPP
oιγe.! πo=BunXoJddB
1
0.8
0.6
0.4
.2	J--TheOrem 2∣
0 卜 ----------一 ----
10	20	30	40
Iog((TmaX∕θmin)
(c) Singular values
(b)	Nonsymmetric DPP
Figure 2: Approximation ratios of greedy with respect to different values of log(σmɑχ∕σma) from
Corollary 1 under (a) symmetric DPP and (b) nonsymmetric DPP. (c) The singular values of the
kernels learned for the “Amazon: 3-category” dataset. We construct 10,000 random P0 matrices
L ∈ R5×5, with rank K = 3, whose singular values are from the learned kernels.
largest singular values of LY for all Y ⊆ [M[ and |Y| ≤ 2k. Let K := σmaχ∕σmin. Then,
logdet (LYG ) ≥ 2 log K + 1，logdet (LY* ) - (1-2 log K + 1 ) k (I - log σmin)	(12)
where Y G is the output ofAlgorithm 1 and Y * is the optimal solution of MAP inference in Eq. 4.
The proof of Corollary 1 is provided in Appendix F.5. Note that instead of log(σmax)/ log(σmin),
Corollary 1 has a log(σmaχ∕σmin) term in the denominator.
E Performance guarantee for greedy MAP inference
The matrices learned on real datasets are too large to compute the exact MAP solution, but we can
compute exact MAP for small matrices. In this section, we explore the performance of the greedy
algorithm studied in Theorem 2 for 5 × 5 synthetic kernel matrices. More formally, we first pick
K = 3 singular values s1, s2, s3 from a kernel learned for the “Amazon: 3-category” dataset (a plot
of these singular values can be seen in Fig. 2(c)) and generate L = V1diag([s1 , s2, s3])V2>, where
V1,V2 ∈ R5×3 are random orthonormal matrices. To ensure that L is a P0 matrix, we repeatedly
sample V1, V2 until all principal minors of L are nonnegative. We also evaluate the performance of
the symmetric DPP, where the kernel matrices are generated similarly to the NDPP, except we set
V1 = V2. We set k = 3 and generate 10,000 random kernels for both symmetric DPPs and NDPPs.
The results for symmetric and nonsymmetric DPPs are shown in Fig. 2(a) and Fig. 2(b), respectively.
We plot the approximation ratio of Algorithm 1, i.e., log det(LY G)/ log det(LY * ), with respect
to log(σmaχ∕σmin), from Corollary 1. We observe that the greedy algorithm for both often shows
approximation ratios close to 1. However, the worst-case ratio for NDPPs is worse than that of
symmetric DPPs; log det(LY) for L ∈ P0+ is non-submodular, and the greedy algorithm with a
nonsubmodular function does not have as tight of a worst-case bound as in the symmetric case.
15
Published as a conference paper at ICLR 2021
F Proofs
F.1 Proof of Lemma 1
Lemma 1. Let A ∈ RM ×M be a skew-symmetric matrix with rank ` ≤ M. Then, there exist
B ∈ RM ×' and positive numbers λι,...,λ['∕2j,such that A = BCB>, where C ∈ R'×' is the
block-diagonal matrix with ['/2] diagonal blocks OfSize 2 given by ∑i, i = 1,..., ['/2] and zero
elsewhere.
Proof. First, we note that rank of a nonsingular skew-symmetric matrix is always even, because all
of its eigenvalues are purely imaginary and come in conjugate pairs. There exists some orthogonal
matrix P ∈ RM ×M and
0	λ1
-λ1	0
∖
Σ=
0	λ2
-λ2	0
(13)
0
∖
0
such that A = PΣP> (see, e.g.,(Thompson, 1988, Proposition 2.1)).
Let C be the ' X ' supmatrix of Σ obtained by keeping its first' rows and columns and let Q = (1),
where l` is the ' × ' identity matrix. Then, Σ = QCQ> and one can write A = PQCQ P>.
Setting B = PQ proves the lemma.	□
F.2 Proof of Theorem 1
Theorem 1. Given an NDPP with kernel L = V V > + BCB>, parameterized by V of rank K, B
of rank K, and a K × K matrix C, we can compute the regularized log-likelihood (Eq. 2) and its
gradient in O(MK2 + K3 + nK03) time, where K0 is the size of the largest of the n training subsets.
Proof. We first show that the log-likelihood can be computed in time linear in M . Using the matrix
determinant lemma, one can easily verify that the DPP normalization term can be computed as
det(I+L)=det I+(V BC) VB>>	=det I2K+ VB>> (V
(14)
where I2K is the identity matrix with dimension 2K. As Eq. 14 requires a matrix-multiplication
between (2K) × M matrices and the determinant of (2K) × (2K) matrices, this allows us to transform
a O(M 3) operation into an O(MK2 + K3) one.
Having established that the normalization term in the likelihood can be computed in O(MK2 + K3)
time, we proceed with characterizing the complexity of the other terms in the likelihood. The first
term in Eq. 2 consists of determinants of size |Yi |. Assuming that these never exceed size K0 , each
can be computed in at most O(K03) time. The regularization term is a simple sum of norms that can
be computed in O(MK) time. Therefore, the full regularized log-likelihood can be computed in
O(MK2 + K3 + nK03) time.
16
Published as a conference paper at ICLR 2021
To prove that the gradient of the log-likelihood can be computed in time linear in M, we begin by
showing that the logarithm of DPP normalization term can be factorized as follows:
Z = log det(I + L)	(15)
= log det	I2K + VB>>	(V B) I0K	C0	(16)
= log det I0K C0-1	+ VB> (V	B) + log det	I0K	C0	(17)
= log det	IKB+>VV>V	C-1V+>BB>B	+logdet(C)	(18)
=logdet (IK + V> V) + logdet (CT + B>(I - V(IK + V>V)-1V>)B) + logdet(C)
(19)
where Eq. 17 follows from the determinant commutativity (i.e., det(AB) = det(A) det(B))
and Eq. 18 and Eq. 19 Come from the Schur’s determinant identity'. For simplicity, We write
X = I - V(IK + V>V)-1V> and (C-1)> = C->, and note that X depends only on V.
The gradient of Z has three parts: VZ = (VVZ, VBZ, VCZ) where each can be computed as
VVZ = VV log det(IK + V>V) + VV logdet(CT + B>XB)	(20)
= 2V (IK + V>V)-1
- XB((C-1 + B>XB)-1 + (C-> + B>XB)-1)B>XV	(21)
VBZ = VB log det(C-1 + B>XB)	(22)
=XB ((CT + B>XB)-1 + (C-> + B>XB)-1)	(23)
VCZ= VClogdet(C)+VClogdet(C-1 +B>XB)	(24)
= C-> - C-> (C-1 + B>XB)->C->	(25)
Observe that X combines a M × M identity matrix with M × K matrices, hence multiplying it with
a M × K matrix (e.g., XV or XB) can be computed in O(M K2) time. Since each of the remaining
matrix inverses in Eq. 21, Eq. 23, and Eq. 25 involve a K × K matrix inverse, with a cost of O(K3)
operations, we have a net computational cost of O(MK2 + K3) for computing V log det(I + L).
The gradient of the first term in Eq. 2 involves computing gradients of determinants of size at most
K0, which results in size K0 matrix inverses, since for a matrix A, ∂∂~(Iogdet(A)) = (A-I)>.
Each of these inverses can be computed in O(K03) time. The gradient of the simple sum-of-norms
regularization term can be computed in O(MK) time. Therefore, combining these results with the
results above for the complexity of the gradient of the normalization term, we have the following
overall complexity of the gradient for the full log-likelihood: O(MK2 + K3 + nK03).	□
F.3 Proof of Lemma 2
Lemma 2. Given B ∈ RM×K, C ∈ RK×K, and Y = {a1, . . . , ak} ⊆ [[M]], let bi ∈ R1×K be the
i-th row in B and BY ∈ R|Yl×κ be a matrix containing rows in B indexed by Y. Then, it holds that
k
BY>(BYCBY>)-1BY =Xpj>qj,	(6)
j=1
where row vectors pj, qj ∈ R1×K forj = 1, . . . , k satisfy p1 = ba1 /(ba1 C ba>1), q1 = ba1, and
ba — bajC> Pj=I q>Pi
baj C(bαj - baj C> Pj=I 9>Pi)>
j
qj+1 = baj - baj C	pi>qi.
i=1
(7)
'det CA DB = det(A) det(D - CA-1B).
17
Published as a conference paper at ICLR 2021
Proof. We prove by induction on k. When k = 1, the result is trivial because
B>(ByCBY)TBy = b1 (baιCb> )-1baι = p>qι.	(26)
Now We assume that the statement holds for k - 1. Let Y := {αι,..., ak-ι} and a := ak. From the
inductive hypothesis, it holds
k-1
B>(Bγ CBY)TBY = X Pjqj.	(27)
j=i
Now we write
BY>u{a}	(BY u{a}CBYu{a[	BY u{a}	(28)
=BYU{a} ((^bY) C(BY		ba))	bY u{a}	(29)
=(BY	bY)(BY CBY ba)V baCBY	By Cba )-1 (By ) baCba	ba .	(30)
To handle the inverse matrix we employ the Schur complement, which yields
(X y『=(X-1。) ,	1	(XTyzX-1 -X-1y∖	(31)
Z WJ [。	0 W - zx-Iy	-zX ι 1
for any non-singular square matrix X ∈ Rk×k, column vector y ∈ Rk and row vector Z ∈ R1×k,
unless (W - zX-1y) = 0. Applying this, we have
(BYCBY BYCb>∖-1 = ((BYCBY)T 0λ ,_________________1_____________
k baCBY	b。CbJ)	— V 0	0√	baCb> - baCB>(BYCBY)TBYCb>
((BY CBY)TBY CbabaCBY (BY CBY)-I -(BY CBY)TBY Cb>∖
V	-baCBY (By CBY)-I	1.	J
(32)
Substituting Eq. 32 into Eq. 30, we obtain
BY∪{α} By u{a}CB>u{a}	By ∪{a}
(33)
BY (BYCBY)T By 十
(b> - BY(BYCBY)TBYCb>) (ba - baCB>(BYCBY)TBY)
baC (b> - BY(BYCBY)TBYCbY)
(34)
k-1
X PYqj 十
j=i
(ba - Pn PYqjCbD (ba - baC PM
k-1
EPYqj + Pk qk
j=ι
(35)
(36)
where the third line holds from the inductive hypothesis Eq. 27 and the last line holds from the
definition of Pk, qk ∈ R1 × K.	口
F.4 PROOF OF THEOREM 2
Theorem 2. Consider a nonsymmetric low-rank DPP L = VVY + BCBy, where V, B are of
rank K, and C ∈ RK × K. Given a cardinality budget k, let σmin and σmaχ denote the smallest and
largest singular values of Ly for all Y ⊆ [M[ and |Y| ≤ 2k. Assume that σmin > 1. Then,
log det(LyG) ≥
4(1 - e-1/4)
2(log σ
max∕lθg σmin) - 1
log det(Ly *)
(10)
where Y G is the output ofAlgorithm 1 and Y * is the optimal solution of MAP inference in Eq. 4.
18
Published as a conference paper at ICLR 2021
Proof. The proof of Theorem 2 relies on an approximation guarantee for nonsubmodular greedy
maximization (Bian et al., 2017, Theorem 1). We introduce their result below.
Theorem 3 ((Bian et al., 2017, Theorem 1)). Consider a set function f defined on all subsets
of {1, . . . , M} = [[M]] is monotone nondecreasing and nonnegative, i.e., 0 ≤ f(Y ) ≤ f(X) for
∀Y ⊆ X ⊆ [M1. Given a cardinality budget k ≥ 1, let Y * be the optimal solution of max∣γ ∣=k f(Y)
and Y0 = 0, Yt := {aι,..., at},t = 1,...,k be the successive chosen by the greedy algorithm
with budget k. Denote γ be the largest scalar such that
X (f(Yt ∪ {i}) - f(Yt)) ≥ γ(f(X ∪ Yt) - f(Yt)),	(37)
i∈X∖Yt
for ∀X ⊆ [[M]], |X| = k andt = 0, . . . , k - 1, and α be the smallest scalar such that
f(Yt-1∪{i}∪X)-f(Yt-1∪X) ≥ (1 - α) (f(Yt-1 ∪ {i}) - f(Yt-1)).	(38)
for ∀X ⊆ [[M]], |X | = k and i ∈ Yk-1 \ X. Then, it holds that
f(Yk) ≥ 1 (l-e-αγ) f(Y*).	(39)
α
In order to apply this result for MAP inference of NDPPs, the objective should be monotone
nondecreasing and nonnegative. We first show that σmin > 1 is a sufficient condition for both
monotonicity and nonnegativity.
Lemma 3. Given a P0 matrix L ∈ RM×M and the budget k ≥ 0, a set function f(Y) = log det(LY)
defined on Y ⊆ [[M]] is monotone nondecreasing and nonnegative for |Y| ≤ k when σmin > 1.
The proof of Lemma 3 is provided in Appendix F.6. Next, we aim to find proper bounds on α
and γ. To resolve this, we provide the following upper and lower bounds of the marginal gain for
f(Y) = log det(LY).
Lemma 4. Let f(Y) = log det(LY) and assume that σmin > 1. Then, for Y ⊆ [[M]], |Y| < 2k and
i ∈/ Y, it holds that
f(Y∪ {i}) - f(Y) ≥ logσmin,	(40)
f(Y∪ {i}) - f(Y) ≤ 2 log σmax - log σmin	(41)
where σmin and σmax are the smallest and largest singular values of LY for all Y ⊆ [[M]], |Y | ≤ 2k.
The proof of Lemma 4 is provided in Appendix F.7. To bound γ, we consider X ⊆ [[M]], |X| = k
and denote X \ Yt = {x1, . . . , xr} 6= 0. Then,
r
X (f(Yt∪{i})-f(Y))=Xf(Yt∪{xr})-f(Yt)≥rlogσmin
i∈X∖Yt	j=1
where the last inequality comes from Eq. 40. Similarly, we get
r
f(X∪Yt)-f(Yt)=Xf({x1,...,xj}∪Yt)-f({x1,...,xj-1}∪Yt)
j=1
≤ r(2 log σm
ax - log σmin)
where the last inequality comes from Eq. 41. Combining Eq. 42 to Eq. 44, we obtain that
Σi∈X∖Ytf(Yt ∪{i})-f(Yt)〉
f(X ∪ Yt)- f(Yt)	≥
which allows usto choose Y = (2 ⅛σmax-1) 1.
To bound α, we similarly use Lemma 4 to obtain
f(X ∪ Yt-1 ∪ {i}) - f(X ∪ Yt-1)
-f(Y t-1 ∪{i})- f(Y t-1)-
(42)
(43)
(44)
(45)
(46)
log σmin
2 log σmaχ - log σmin
≥	log Omin
—2 log Omaχ 一 log Omin
19
Published as a conference paper at ICLR 2021
and we can choose α = 1 -
_____log σmin____
2 log σmaχ-lθg σmin
2(log σm
ax-log σmin)
2 log σmaχ-lθg σmin
Now let K = logσmax. Then Y = 2κ1-τ and α =受-?. Putting Y and a into Eq. 39, We have
1(1 - e-αγ) ≥
α
2κ - 1
2(κ - 1)
2(κ-1)
1 - e (2κ-i)2
、2κ - 1
≥ 2(κ - 1)
4 exp(-1/4)
2(κ - 1)
(2κ - 1)2
4 exp(-1/4)
2κ - 1
(47)
(48)
(49)
where the second inequality holds
4 exp(-1/4)x for x ∈ [0, 1/4].
from the fact that maxκ≥1
2(κ-1)
(2κ-1)2
4 and 1 - e-x ≥
□
F.5 Proof of Corollary 1
Corollary 1. Consider a nonsymmetric low-rank DPP L = V V > + BCB>, where V,Bare of
rank K, and C ∈ RK×K. Given a cardinality budget k, let σmin and σmax denote the smallest and
largest singular values of LY for all Y ⊆ [M[ and |Y| ≤ 2k. Let K := σmαχ∕σma. Then,
lθgdet(LY G ) ≥ TO； K :lOgdet(LY * ) - (1 - 42⅛ K + 4) ) k (I- log σmin)	(12)
where Y G is the output ofAlgorithm 1 and Y * is the optimal solution of MAP inference in Eq. 4.
Proof. Now consider L0 = ()L where e is the exponential constant. Then, σLin =
σmin	min
σmin(σm~) = e and σ°nɑ乂 = σmaχ(缶).Using the fact that logdet(Lγ) = logdet(LY)-
| Y | log σmin, we obtain the result.	□
F.6 Proof of Lemma 3
Before stating the proof, we introduce interlacing properties of singular values.
Theorem 4 (Interlacing Inequality for Singular Values, (Thompson, 1972, Theorem 1)). Consider
a real matrix A ∈ RM×N with singular values σι ≥ σ2 ≥ ∙∙∙ ≥ σmin(M,N)and its supmatrix
B ∈ RP×Q with singular values βι ≥ β2 ≥ ∙∙∙ ≥ βmin(p,Q). Then, the singular values have the
following interlacing properties:
σi ≥ βi,	for i = 1, . . . , min(P, Q),	(50)
βi ≥ σi+M-P+N-Q,	for i = 1, . . . , min(P + Q - M, P + Q - N).	(51)
Note that when M = N and P = Q = N - 1, it holds that βi ≥ σi+2 for i = 1, . . . , N - 2.
We are now ready to prove Lemma 3.
Lemma 3. Given a P0 matrix L ∈ RM×M and the budget k ≥ 0, a set function f(Y) = log det(LY)
defined on Y ⊆ [[M]] is monotone nondecreasing and nonnegative for |Y| ≤ k when σmin > 1.
Proof. Since L ∈ P0, all of its principal submatrices are also in P0. By the definition of a P0 matrix,
it holds that
|det(LY)| = det(LY) = Y σi(LY)	(52)
i
where σi(LY) for i ∈ [[|Y |]] are singular values of LY. Then, F(Y) = Pi log(σi(LY)) is
nonnegative for all Y such that |Y| ≤ K due to σi(LY) ≥ σmin > 1. Similarly, we have
F (Y ∪ {a}) - F (Y) = PiY1+1log σi(Ly ∪{a}) - PiYIlog σi(∑Y) ≥ log σm^ > 0 from
Eq. 50.	□
20
Published as a conference paper at ICLR 2021
F.7 Proof of Lemma 4
Lemma 4. Let f(Y ) = log det(LY ) and assume that σmin > 1. Then, for Y ⊆ [[M]], |Y | < 2k and
i ∈/ Y , it holds that
f(Y ∪ {i}) - f(Y ) ≥ log σmin,	(40)
f(Y ∪ {i}) - f(Y) ≤ 2 log σmax - log σmin	(41)
where σmin and σmax are the smallest and largest singular values of LY for all Y ⊆ [[M]], |Y | ≤ 2k.
Proof. For a P0 matrix, we remark that its determinant is equivalent to the product of all singular
values. For Y ⊆ [[M]] and i ∈/ Y , from the interlacing inequality of Eq. 50 we have that
|Y|+1	|Y|
F(Y ∪{i}) - F(Y) = X logσj - X log σj ≥ logσ0γ∣+ι ≥ logσmin	(53)
j=1	j=1
where σj0 and σj are the j-th largest singular value of LY ∪{i} and LY, respectively. Similarly, using
Eq. 51, we get
F (Y ∪{i}) - F (Y) ≤ log(σ1 σ2) - log σ∣γ∣ ≤ 2log σmax - log σmin.	(54)
□
21