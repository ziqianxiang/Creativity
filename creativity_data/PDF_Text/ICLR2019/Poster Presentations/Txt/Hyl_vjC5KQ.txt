Published as a conference paper at ICLR 2019
Hierarchical Reinforcement Learning
via Advantage-Weighted Information
Maximization
Takayuki Osa
University of Tokyo, Tokyo, Japan
RIKEN AIP, Tokyo, Japan
osa@mfg.t.u-tokyo.ac.jp
Voot Tangkaratt
RIKEN AIP, Tokyo, Japan
voot.tangkaratt@riken.jp
Masashi Sugiyama
RIKEN AIP, Tokyo, Japan
University of Tokyo, Tokyo, Japan
sugi@k.u-tokyo.ac.jp
Ab stract
Real-world tasks are often highly structured. Hierarchical reinforcement learn-
ing (HRL) has attracted research interest as an approach for leveraging the hier-
archical structure of a given task in reinforcement learning (RL). However, iden-
tifying the hierarchical policy structure that enhances the performance of RL is
not a trivial task. In this paper, we propose an HRL method that learns a latent
variable of a hierarchical policy using mutual information maximization. Our ap-
proach can be interpreted as a way to learn a discrete and latent representation of
the state-action space. To learn option policies that correspond to modes of the
advantage function, we introduce advantage-weighted importance sampling. In
our HRL method, the gating policy learns to select option policies based on an
option-value function, and these option policies are optimized based on the de-
terministic policy gradient method. This framework is derived by leveraging the
analogy between a monolithic policy in standard RL and a hierarchical policy in
HRL by using a deterministic option policy. Experimental results indicate that
our HRL approach can learn a diversity of options and that it can enhance the
performance of RL in continuous control tasks.
1	Introduction
Reinforcement learning (RL) has been successfully applied to a variety of tasks, including board
games (Silver et al., 2016), robotic manipulation tasks (Levine et al., 2016), and video games (Mnih
et al., 2015). Hierarchical reinforcement learning (HRL) is a type of RL that leverages the hier-
archical structure of a given task by learning a hierarchical policy (Sutton et al., 1999; Dietterich,
2000). Past studies in this field have shown that HRL can solve challenging tasks in the video game
domain (Vezhnevets et al., 2017; Bacon et al., 2017) and robotic manipulation (Daniel et al., 2016;
Osa et al., 2018b). In HRL, lower-level policies, which are often referred to as option policies,
learn different behavior/control patterns, and the upper-level policy, which is often referred to as the
gating policy, learns to select option policies. Recent studies have developed HRL methods using
deep learning (Goodfellow et al., 2016) and have shown that HRL can yield impressive performance
for complex tasks (Bacon et al., 2017; Frans et al., 2018; Vezhnevets et al., 2017; Haarnoja et al.,
2018a). However, identifying the hierarchical policy structure that yields efficient learning is not a
trivial task, since the problem involves learning a sufficient variety of types of behavior to solve a
given task.
In this study, we present an HRL method via the mutual information (MI) maximization with
advantage-weighted importance, which we refer to as adInfoHRL. We formulate the problem of
learning a latent variable in a hierarchical policy as one of learning discrete and interpretable repre-
1
Published as a conference paper at ICLR 2019
sentations of states and actions. Ideally, each option policy should be located at separate modes of
the advantage function. To estimate the latent variable that corresponds to modes of the advantage
function, we introduce advantage-weighted importance weights. Our approach can be considered
to divide the state-action space based on an information maximization criterion, and it learns option
policies corresponding to each region of the state-action space. We derive adInfoHRL as an HRL
method based on deterministic option policies that are trained based on an extension of the deter-
ministic policy gradient (Silver et al., 2014; Fujimoto et al., 2018). The contributions of this paper
are twofold:
1.	We propose the learning of a latent variable of a hierarchical policy as a discrete and hidden
representation of the state-action space. To learn option policies that correspond to the
modes of the advantage function, we introduce advantage-weighted importance.
2.	We propose an HRL method, where the option policies are optimized based on the deter-
ministic policy gradient and the gating policy selects the option that maximizes the expected
return. The experimental results show that our proposed method adInfoHRL can learn a
diversity of options on continuous control tasks. Moreover, our approach can improve the
performance of TD3 on such tasks as the Walker2d and Ant tasks in OpenAI Gym with
MuJoco simulator.
2	Background
In this section, we formulate the problem of HRL in this paper and describe methods related to our
proposal.
2.1	Hierarchical Reinforcement Learning
We consider tasks that can be modeled as a Markov decision process (MDP), consisting of a state
space S, an action space A, a reward function r : S × A 7→ R, an initial state distribution ρ(s0),
and a transition probability p(st+1 |st, at) that defines the probability of transitioning from state
st and action at at time t to next state st+1. The return is defined as Rt = PiT=t γi-tr(si, ai),
where Y is a discount factor, and policy ∏(a∣s) is defined as the density of action a given state
s. Let dπ (s) = PtT=0 γtp(st = s) denote the discounted visitation frequency induced by the
policy π . The goal of reinforcement learning is to learn a policy that maximizes the expected return
J(∏) = Es0,a0,…[Ro] where so 〜ρ(so), a 〜∏ and st+ι 〜p(st+ι∣st, at). By defining the
Q-function as Qπ(s, a) = Es0,a0,... [Rt|st = s, at = a], the objective function of reinforcement
learning can be rewritten as follows:
J(π) =
dπ(s)π(a∣s)Qπ(s, a)dads.
(1)
Herein, We consider hierarchical policy π(a∣s) = E°∈o π(o∣s)π(a∣s, o), where o is the latent vari-
able and O is the set of possible values ofo. Many existing HRL methods employ a policy structure
of this form (Frans et al., 2018; Vezhnevets et al., 2017; Bacon et al., 2017; Florensa et al., 2017;
Daniel et al., 2016). In general, latent variable o can be discrete (Frans et al., 2018; Bacon et al.,
2017; Florensa et al., 2017; Daniel et al., 2016; Osa & Sugiyama, 2018) or continuous (Vezhnevets
et al., 2017). ∏(o∣s) is often referred to as a gating policy (Daniel et al., 2016; Osa & Sugiyama,
2018), policy over options (Bacon et al., 2017), or manager (Vezhnevets et al., 2017). Likewise,
π(a∣s, o) is often referred to as an option policy (OSa & Sugiyama, 2018), sub-policy (Daniel et al.,
2016), or worker (Vezhnevets et al., 2017). In HRL, the objective function is given by
J(π) =
// dπ(s) ^X π(o∣s)π(a∣s, o)Qπ(s, a)dads.
o∈O
(2)
As discussed in the literature on inverse RL (Ziebart, 2010), multiple policies can yield equivalent
expected returns. This indicates that there exist multiple solutions to latent variable o that maximizes
the expected return. To obtain the preferable solution for o, we need to impose additional constraints
in HRL. Although prior work has employed regularizers (Bacon et al., 2017) and constraints (Daniel
et al., 2016) to obtain various option policies, the method of learning a good latent variable o that
improves sample-efficiency of the learning process remains unclear. In this study we propose the
learning of the latent variable by maximizing MI between latent variables and state-action pairs.
2
Published as a conference paper at ICLR 2019
2.2	Deterministic Policy Gradient
The deterministic policy gradient (DPG) algorithm was developed for learning a monolithic de-
terministic policy μθ (S) : S → A by Silver et al. (2014). In off-policy RL, the objective is to
maximize the expectation of the return, averaged over the state distribution induced by a behavior
policy β(a∣s):
J(π) = JJ dβ(s)π(a∣s)Qπ (s, a)dads.	(3)
When a policy is deterministic, the objective becomes J(π) = J dβ(S)Qn (s, μθ(S))ds. Silver
et al. (2014) have shown that the gradient ofa deterministic policy is given by
Vθ Es 〜dβ (s)[Qπ (s, a)]= Es 〜dβ (s) [Vθ μθ (s)Va Qπ(s, a)∣a=μθ (S) ] .	(4)
The DPG algorithm has been extended to the deep deterministic policy gradient (DDPG) for con-
tinuous control problems that require neural network policies (Lillicrap et al., 2016). Twin Delayed
Deep Deterministic policy gradient algorithm (TD3) proposed by Fujimoto et al. (2018) is a variant
of DDPG that outperforms the state-of-the-art on-policy methods such as TRPO (Schulman et al.,
2017a) and PPO (Schulman et al., 2017b) in certain domains. We extend this deterministic policy
gradient to learn a hierarchical policy.
2.3	Representation Learning via Information Maximization
Recent studies such as those by Chen et al. (2016); Hu et al. (2017); Li et al. (2017) have shown that
an interpretable representation can be learned by maximizing MI. Given a dataset X = (x1, ..., xn),
regularized information maximization (RIM) proposed by Gomes et al. (2010) involves learning a
conditional model p(y |x; η) with parameter vector η that predicts a label y. The objective of RIM
is to minimize
'(η) — λIη (x,y),	(5)
where '(η) is the regularization term, In (x, y) is ML and λ is a coefficient. MI can be decomposed
as Iη (x, y) = H(y) - H(y|x) where H(y) is entropy and H(y|x) the conditional entropy. Increas-
ing H(y) conduces the label to be uniformly distributed, and decreasing H(y|x) conduces to clear
cluster assignments. Although RIM was originally developed for unsupervised clustering problems,
the concept is applicable to various problems that require learning a hidden discrete representation.
In this study, we formulate the problem of learning the latent variable o of a hierarchical policy as
one of learning a latent representation of the state-action space.
3	Learning Options via Advantage-Weighted Information
Maximization
In this section, we propose a novel HRL method based on advantage-weighted information maxi-
mization. We first introduce the latent representation learning via advantage-weighted information
maximization, and we then describe the HRL framework based on deterministic option policies.
3.1	Latent Representation Learning via Advantage-Weighted Information
Maximization
Although prior work has often considered H(o|S) or I(S, o), which results in a division of the state
space, we are interested in using I (S, a), o for dividing the state-action space instead. A schematic
sketch of our approach is shown in Figure 1. As shown in the left side of Figure 1, the advantage
function often has multiple modes. Ideally, each option policies should correspond to separate modes
of the advantage function. However, it is non-trivial to find the modes of the advantage function in
practice. For this purpose, we reduce the problem of finding modes of the advantage function to that
of finding the modes of the probability density of state action pairs.
We consider a policy based on the advantage function of the form
f (Aπ(s, a))
∏Ad(a∣s) =---------,	(6)
Z
3
Published as a conference paper at ICLR 2019
State
State
(a) Visualization of the ad- (b) Modes of the density in- (C) Modes of the density
vantage function with multi- duced by arbitrary policies do estimated with advantage-
Ple modes in the state-action not correspond to the modes weighted importance corre-
space.	of the advantage function. spond to the modes of the
advantage function.
Figure 1: Schematic sketch of our HRL approach. By using the advantage-weighted importance, the
problem of finding the modes of the advantage-function can be reduced to that of finding the modes
of the density of state action pairs.
where Aπ (s, a) = Qπ (s, a) - V π (s) is the advantage function, V π(s) is the state value function,
and Z is the partition function. f (∙) is a functional, which is a function of a function. f (∙) is a
monotonically increasing function with respect to the input variable and always satisfies f (∙) > 0.
In our implementation We used the exponential function f (∙) = exp(∙). When following such a
policy, an action with the larger advantage is drawn with a higher probability. Under this assumption,
finding the modes of the advantage function is equivalent to finding modes of the density induced by
πAd. Thus, finding the modes of the advantage function can be reduced to the problem of clustering
samples induced by πAd.
Following the formulation of RIM introduced in Section 2.3, we formulate the problem of clustering
samples induced by πAd as the learning of discrete representations via MI maximization. For this
purpose, we consider a neural network that estimates p(o|s, a; η) parameterized with vector η,
which we refer to as the option network. We formulate the learning of the latent variable o as
minimizing
Loption(η) = '(η) - λi(o, (s, a)； η),	⑺
where I(o, (s, a)) = H(o|s, a; η) - H(o; η), and '(η) is the regularization term. In practice, We
need to approximate the advantage function, and we learn the discrete variable o that corresponds to
the modes of the current estimate of the advantage function. For regularization, we used a simplified
version of virtual adversarial training (VAT) proposed by Miyato et al. (2016). Namely, we set
'(η) = Dkl (p(o∣snoise, anoise; η)∣∣p(o∣s, a; η)) where snoise = S + 金，anoise = a + “，金 and “
denote white noise. This regularization term penalizes dissimilarity between an original state-action
pair and a perturbed one, and Hu et al. (2017) empirically show that this regularization improves the
performance of learning latent discrete representations.
When computing MI, we need to compute p(o) and H (o|s, a) given by
p(o) = /pπAd(s, a)p(o∣s, a； η)dads = E(s,a)〜PnAd(s,a) [p(o∣s, a； η)]	(8)
H(o|s, a) = E(s,a)〜p∏Ad(s,a) [p(o∣s, a； η)logp(o∣s, a; η)].	(9)
Thus, the probability density of (s, a) induced by πAd is necessary for computing MI for our pur-
pose. To estimate the probability density of (s, a) induced by πAd, we introduce the advantage-
weighted importance in the next section.
3.2 Importance Weights for Mutual Information Estimation
Although we show that the problem of finding the modes of the advantage function can be reduced
to MI maximization with respect to the samples induced by πAd, samples induced by πAd are not
available in practice. While those induced during the learning process are available, a discrete repre-
sentation obtained from such samples does not correspond to the modes of the advantage function.
To estimate the density induced by πAd, we employ an importance sampling approach.
4
Published as a conference paper at ICLR 2019
We assume that the change of the state distribution induced by the policy update is sufficiently small,
namely, dπAd (s) ≈ dβ(s). Then, the importance weight can be approximated as
W(	) = PnAd(s, a) = dπAd(s)∏Ad(a∣s)〜∏Ad(a∣s) = f (A(s, a))
S, a	pβ(s, a)	dβ(s)β(a∣s)	β(a∣s)	Zβ(a∣s)
(10)
and the normalized importance weight is given gy
W(s, a)
W(s, a)	_	Zβ(a,s)
P= W(Sj, aj) = Pj= fA⅛⅛
f (A(Sq))
______β(Hs)_______
PN	f (A(Sj ,aj » .
乙 j=1	β(aj |sj)
(11)
As the partition function Z is canceled, we do not need to compute Z when computing the impor-
tance weight in practice. We call this importance weight W the advantage-weighted importance and
employ it to compute the objective function used to estimate the latent variable.
This advantage-weighted importance is used to compute the entropy terms for computing MI in
Equation (7). The empirical estimate of the entropy H(o) is given by
1N
HH(o; η) = - Ep(o; η)logP(o; η), whereP(o; η) = N∑^W(Si, ai)p(o∣Si, ai； η). (12)
where the samples (Si, a# are drawn from pβ (s, a) induced by a behavior policy β(a∣s). Likewise,
the empirical estimate of the conditional entropy H (o|S, a) is given by
1N
HH(o∣s, a；η) = NEW(Si, ai)p(o∣Si, ai；η) logp(o∣Si, ai； η).	(13)
The derivations of Equations (12) and (13) are provided in Appendix A. To train the option network,
we store the samples collected by the M most recent behavior policies, to which we refer as on-
policy buffer Don. Although the algorithm works with entire samples stored in the replay buffer, we
observe that the use of the on-policy buffer for latent representation learning exhibits better perfor-
mance. For this reason, we decided to use the on-policy buffer in our implementation. Therefore,
while the algorithm is off-policy in the sense that the option is learned from samples collected by
behavior policies, our implementation is “semi”on-policy in the sense that we use samples collected
by the most recent behavior policies.
4 HRL Objective with Deterministic Option Policies
Instead of stochastic option policies, we consider deterministic option policies and model them
using separate neural networks. We denote by ∏(a∣S,o) = μθ(s) deterministic option policies
parameterized by vector θ. The objective function of off-policy HRL with deterministic option
policies can then be obtained by replacing π(a∣s) with P°∈o π(o∣s)π(a∣s, o) in Equation (3):
J(w, θ) = d dβ(s) X ∏(o∣s)Qπ (s, μθ(s); w)ds,
o∈O
(14)
where Qπ(s, a； w) is an approximated Q-function parameterized using vector w. This form of the
objective function is analogous to Equation (3). Thus, we can extend standard RL techniques to the
learning of the gating policy π(o∣s) in HRL with deterministic option policies.
In HRL, the goal of the gating policy is to generate a value of o that maximizes the conditional
expectation of the return:
QΩ(s, o) = E [R∣St = s, Ot = o]
J π(a∣s, o)Qπ (s, a)da,
(15)
which is often referred to as the option-value function (Sutton et al., 1999). When option policies are
stochastic, it is often necessary to approximate the option-value function QΩ(s, o) in addition to the
action-value function Qπ(s, a). However, in our case, the option-value function for deterministic
option policies is given by
qΩ(S,o) = Qn(S, μθ(S)),
(16)
5
Published as a conference paper at ICLR 2019
Algorithm 1 HRL via Advantage-Weighted Information Maximization (adInfoHRL)
Input: Number of options O, size of on-policy buffer
Initialize: Replay buffer DR, on-policy buffer Don, network parameters η, θ, w, θtarget, wtarget
repeat
for t = 0 to t = T do
Draw an option for a given S by following Equation 17: o 〜π(o∣s)
Draw an action a 〜 β (a∣s,o) = μθ (S) + e
Record a data sample (s, a, r, s0)
Aggregate the data in DR and Don
if the on-policy buffer is full then
Update the option network by minimizing Equation (7) for samples in Don
Clear the on-policy buffer Don
end if
Sample a batch Dbatch ∈ DR
Update the Q network parameter w
if t mod d then
Estimate p(o|Si, ai) for (Si, ai) ∈ Dbatch using the option network
Assign samples (si, ai) ∈ DbatCh to the option o* = arg maxp(o∣Si, ai)
Update the option policy networks μθ(S) for o = 1,...,O with Equation (19)
Update the target networks: Wtarget J T W + (1 - T )wtarget, θtarget J T θ +(1 - T )θtarget
end if
end for
until the convergence
return θ
which We can estimate using the deterministic option policy μθ (s) and the approximated action-
value function Qπ(S, a; W). In this work we employ the softmax gating policy of the form
π(o∣s)
exp (Qπ(s, μθ(s); W))
Po∈o eχp (Qn (s, μθ(S); w)),
(17)
which encodes the exploration in its form (Daniel et al., 2016). The state value function is given as
Vπ (S) = En(OIS)Qn (S, μθ(S);w),
o∈O
(18)
which can be computed using Equation (17). We use this state-value function when computing
the advantage-weighted importance as A(S, a) = Q(S, a) - V (S). In this study, the Q-function
is trained in a manner proposed by Fujimoto et al. (2018). Two neural networks (Qπw , Qπw ) are
trained to estimate the Q-function, and the target value of the Q-function is computed as yi =
ri + γ min1,2 Q(Si, ai) for sample (Si, ai, a0i, ri) in a batch sampled from a replay buffer, where
ri = r(Si, ai). In this study, the gating policy determines the option once every N time steps, i.e.,
t = 0, N, 2N, . . .
Neural networks that model μθ(a∣S) for o = 1,…,O, which We refer to as option-policy networks,
are trained separately for each option. In the learning phase, p(o|S, a) is estimated by the option net-
work. Then, samples are assigned to option o* = arg maxo p(o|S, a; η) and are used to update the
option-policy network that corresponds to o*. When performing a rollout, o is drawn by following
the gating policy in Equation (17), and an action is generated by the selected option-policy network.
Differentiating the objective function in Equation (14), we obtain the deterministic policy gradient
of our option-policy μθ (s) given by
Vθ J(W, θ) = Es〜dβ (s)n(o∣s/Vθμθ(S)VaQn (S, a)∣α=μθ(s)] .	(19)
The procedure of adInfoHRL is summarized by Algorithm 1. As in TD3 (Fujimoto et al., 2018), we
employed the soft update using a target value network and a target policy network.
6
Published as a conference paper at ICLR 2019
Figure 2: Activation of the four options over time steps on the Walker2d task.
5	Experiments
We evaluated the proposed algorithm adInfoHRL on the OPenAI Gym platform (Brockman et al.,
2016) with the MuJoCo Physics simulator (Todorov et al., 2012). We compared its performance with
that of PPO implemented in OpenAI baselines (Dhariwal et al., 2017) and TD3. Henderson et al.
(2018) have recently claimed that algorithm performance varies across environment, there is thus
no clearly best method for all benchmark environments, and off-policy and on-policy methods have
advantages in different problem domains. To analyze the performance of adInfoHRL, we compared
it with state-of-the-art algorithms for both on-policy and off-policy methods, although we focused
on the comparison with TD3, as our implementation of adInfoHRL is based on it. To determine
the effect of learning the latent variable via information maximization, we used the same network
architectures for the actor and critic in adInfoHRL and TD3. In addition, to evaluate the benefit
of the advantage-weighted importance, we evaluated a variant of adInfoHRL, which does not use
the advantage-weighted importance for computing mutual information.We refer to this variant of
adInfoHRL as infoHRL. The gating policy updated variable o once every three time steps. We
tested the performance of adInfoHRL with two and four options.
The activation of options over time and snapshots of the learned option policies on the Walker2d task
are shown in Figure 2, which visualizes the result from adInfoHRL with four options. One can see
that the option policies are activated in different phases of locomotion. While the option indicated
by yellow in Figure 2 corresponds to the phase for kicking the floor, the option indicated by blue
corresponds to the phase when the agent was on the fly. Visualization of the options learned on the
HalfCheetah and Ant tasks are shown in Appendix D.
The averaged return of five trials is reported in Figure 3(a)-(d). AdIfoHRL yields the best perfor-
mance on Ant1 and Walker2d, whereas the performance of TD3 and adInfoHRL was comparable
on HalfCheetah and Hopper, and PPO outperformed the other methods on Hopper. Henderson et al.
(2018) claimed that on-policy methods show their superiority on tasks with unstable dynamics, and
our experimental results are in line with such previous studies. AdinfoHRL outperformed infoHRL,
which isthe variant of adInfoHRL without the advantage-weighted importance on all the tasks. This
result shows that the adavatage-weighted importance enhanced the performance of learning options.
AdInfoHRL exhibited the sample efficiency on Ant and Walker2d in the sense that it required fewer
samples than TD3 to achieve comparable performance on those tasks. The concept underlying ad-
InfoHRL is to divide the state-action space to deal with the multi-modal advantage function and
learn option policies corresponding to separate modes of the advantage function. Therefore, adIn-
foHRL shows its superiority on tasks with the multi-modal advantage function and not on tasks with
a simple advantage function. Thus, it is natural that the benefit of adInfoHRL is dependent on the
characteristics of the task.
The outputs of the option network and the activation of options on Walker2d are shown in Fig-
ure 3(e)-(f), which visualize the result from adInfoHRL with four options. For visualization, the
dimensionality was reduced using t-SNE (van der Maaten & Hinton, 2008). The state-action space
1We report the result on the Ant task implemented in rllab (Duan et al., 2016) instead of Ant-v1 implemented
in the OpenAI gym, since the Ant task in the rllab is known to be harder than the Ant-v1 in the OpenAI gym.
Results on Ant-v1 in the OpenAI gym is reported in Appendix D.
7
Published as a conference paper at ICLR 2019
Eno」pa6B-l<D>4
Walker2d-v1
0	200	400	6∞	8∞	1000
Time steps (x1000)
Eno」pa6B-l<D>4
Ant_rilab
Method
----adhfoh∙⅞L opion nwn2
MHohRL Oplonnwnrf
----lnfo(*⅞L(no IW) option mm2
O 200	400	600	8∞	1000
Tims steps (x1000)
HaIlChsetah-Vl
∞ ∞ ∞
604020
Eno」pa6B-l<D>4
O 200	400	6∞	800	1000
Tims steps (x1000)
(a) Results on Walker2d.
Hopper-v1
(b) Results on Ant.
0	200	400	6∞	8∞	1000
Time steps (x1000)
(c) Results on HalfCheetah.
-CO -40	-20 O 20	40 CO
(d) Results on Hopper. (e) Output of the option network in (f) Activation of options in the state
the state-action space on Walker2d. space on Walker2d.
Figure 3: Performance of adInfoHRL. (a)-(d) show comparison with baseline methods. (e) and (f)
show the output of the option network and the activation of options on Walker2d, respectively.
is clearly divided into separate domains in Figure 3(e). As shown in Figure 3(f), the options are
activated in different domains of the state space, which indicates that diverse options are learned by
adInfoHRL.
6	Related Work and Discussion
Past studies have proposed several ways to deal with the latent variable in HRL. The recent work
by Smith et al. (2018) proposed inferred option policy gradients (IOPG), which is derived as an
extension of policy gradient to the option framework. Nachum et al. (2018) recently proposed
off-policy target correction for HRL on goal-oriented tasks, where a higher-level policy instructs
a lower-level policy by generating the goal signal instead of an inferred latent variable. A popu-
lar approach for learning the latent variable in HRL is the variational approach. The recent work
by Haarnoja et al. (2018a) is based on soft actor critic (Haarnoja et al., 2018b), and the latent vari-
able is inferred using the variational approach. The work by Hausman et al. (2018) is also closely
related to the variational approach, and they proposed a method for learning a latent variable of a
hierarchical policy via a variational bound. On the contrary, our method learns the latent variable
by maximizing MI with advantage-weighted importance. Recent studies by Gregor et al. (2016);
Florensa et al. (2017); Eysenbach et al. (2018) also considered the MI in their formulation. In these
methods, MI between the state and the latent variable is considered so as to obtain diverse behav-
iors. Our approach is different from the previous studies in the sense that we employ MI between
the latent variable and the state-action pairs, which leads to the division of the state-action space
instead of considering only the state space. We think that dividing the state-action space is an ef-
ficient approach when the advantage function is multi-modal, as depicted in Figure 1. InfoGAIL
proposed by Li et al. (2017) learns the interpretable representation of the state-action space via MI
maximization. InfoGAIL can be interpreted as a method that divides the state-action space based on
the density induced by an expert’s policy by maximizing the regularized MI objective. In this sense,
it is closely related to our method, although their problem setting is imitation learning (Osa et al.,
2018a), which is different from our HRL problem setting.
The use of the importance weight based on the value function has appeared in previous stud-
ies (Dayan & Hinton, 1997; Kober & Peters, 2011; Neumann & Peters, 2009; Osa & Sugiyama,
2018). For example, the method proposed by Neumann & Peters (2009) employs the importance
weight based on the advantage function for learning a monolithic policy, while our method uses a
8
Published as a conference paper at ICLR 2019
similar importance weight for learning a latent variable of a hierarchical policy. Although Osa &
Sugiyama (2018) proposed to learn a latent variable in HRL with importance sampling, their method
is limited to episodic settings where only a single option is used in an episode.
Our method can be interpreted as an approach that divides the state-action space based on the MI
criterion. This concept is related to that of Divide and Conquer (DnC) proposed by Ghosh et al.
(2018), although DnC clusters the initial states and does not consider switching between option
policies during the execution of a single trajectory.
In this study we developed adInfoHRL based on deterministic option policies. However, the concept
of dividing the state-action space via advantage-weighted importance can be applied to stochastic
policy gradients as well. Further investigation in this direction is necessary in future work.
7	Conclusions
We proposed a novel HRL method, hierarchical reinforcement learning via advantage-weighted
information maximization. In our framework, the latent variable of a hierarchical policy is learned
as a discrete latent representation of the state-action space. Our HRL framework is derived by
considering deterministic option policies and by leveraging the analogy between the gating policy
for HRL and a monolithic policy for the standard RL. The results of the experiments indicate that
adInfoHRL can learn diverse options on continuous control tasks. Our results also suggested that
our approach can improve the performance of TD3 in certain problem domains.
Acknowledgments
MS was partially supported by KAKENHI 17H00757.
References
P. L. Bacon, J. Harb, and D. Precup. The option-critic architecture. In Proceedings of the AAAI
Conference on Artificial Intelligence (AAAI), 2017.
G. Brockman, V. Cheung, L. Pettersson, J. Schneider, J. Schulman, J. Tang, and W. Zaremba. Openai
gym. In arXiv, 2016.
X. Chen, Y. Duan, R. Houthooft, J. Schulman, I. Sutskever, and P. Abbeel. InfoGAN: Interpretable
representation learning by information maximizing generative adversarial nets. In Advances in
Neural Information Processing Systems (NIPS), pp. 2172-2180, 2016.
C. Daniel, G. Neumann, O. Kroemer, and J. Peters. Hierarchical relative entropy policy search.
Journal of Machine Learning Research, 17:1-50, 2016.
P. Dayan and G. Hinton. Using expectation-maximization for reinforcement learning. Neural Com-
putation, 9:271-278, 1997.
P. Dhariwal, C. Hesse, O. Klimov, A. Nichol, M. Plappert, A. Radford, J. Schulman, S. Sidor, and
Y. Wu. Openai baselines. https://github.com/openai/baselines, 2017.
T. G Dietterich. Hierarchical reinforcement learning with the MAXQ value function decomposition.
Journal of Artificial Intelligence Research, 13:227-303, 2000.
Y. Duan, X. Chen, R. Houthooft, J. Schulman, and P. Abbeel. Benchmarking deep reinforcement
learning for continuous control. In Proceedings of the International Conference on Machine
Learning (ICML), 2016.
B.	Eysenbach, A. Gupta, J. Ibarz, and Sergey Levine. Diversity is all you need: Learning diverse
skills without a reward function. arXiv, 2018.
C.	Florensa, Y. Duan, and P. Abbeel. Stochastic neural networks for hierarchical reinforcement
learning. In Proceedings of the International Conference on Learning Representations (ICLR),
2017.
9
Published as a conference paper at ICLR 2019
K. Frans, J. Ho, X. Chen, P. Abbeel, and J. Schulman. Meta learning shared hierarchies. In Pro-
ceedings of the International Conference on Learning Representations (ICLR), 2018.
S. Fujimoto, H. van Hoof, and D. Meger. Addressing function approximation error in actor-
critic methods. In Jennifer Dy and Andreas Krause (eds.), Proceedings of the International
Conference on Machine Learning, volume 80 of Proceedings of Machine Learning Research,
pp. 1587-1596, Stockholmsmssan, Stockholm Sweden, 10-15 Jul 2018. PMLR. URL http:
//proceedings.mlr.press/v80/fujimoto18a.html.
D.	Ghosh, A. Singh, A. Rajeswaran, V. Kumar, and S. Levine. Divide-and-conquer reinforcement
learning. In Proceedings of the International Conference on Learning Representations (ICLR),
2018.
R.	Gomes, A. Krause, and P. Perona. Discriminative clustering by regularized information maxi-
mization. In Advances in Neural Information Processing Systems (NIPS), 2010.
I. Goodfellow, Y. Bengio, and A. Courville. Deep Learning. MIT Press, 2016. http://www.
deeplearningbook.org.
K. Gregor, D. Rezende, and D. Wierstra. Variational intrinsic control. arXiv, 2016.
T. Haarnoja, K. Hartikainen, P. Abbeel, and S. Levine. Latent space policies for hierarchical re-
inforcement learning. In Proceedings of the International Conference on Machine Learning
(ICML), 2018a.
T. Haarnoja, A. Zhou, P. Abbeel, and S. Levine. Soft actor-critic: Off-policy maximum entropy deep
reinforcement learning with a stochastic actor. In Proceedings of the International Conference on
Machine Learning (ICML), 2018b.
K. Hausman, J. T. Springenberg, Z. Wang, N. Heess, and M. Riedmiller. Learning an embedding
space for transferable robot skills. In Proceedings of the International Conference on Learning
Representations (ICLR), 2018.
P. Henderson, R. Islam, P. Bachman, J. Pineau, D. Precup, and D. Meger. Deep reinforcement
learning that matters. In Proceedings of the AAAI Conference on Artificial Intelligence (AAAI),
2018.
W. Hu, T. Miyato, S. Tokui, E. Matsumoto, and M. Sugiyama. Learning discrete representations via
information maximizing self augmented training. In Proceedings of the International Conference
on Machine Learning (ICML). 2017.
J. Kober and J. Peters. Policy search for motor primitives in robotics. Machine Learning, 84:
171-203, 2011.
S.	Levine, C. Finn, T. Darrell, and P. Abbeel. End-to-end training of deep visuomotor policies. Jour-
nal of Machine Learning Research, 17(39):1-40, 2016. URL http://jmlr.org/papers/
v17/15-522.html.
Y. Li, J. Song, and S. Ermon. InfoGAIL: Interpretable imitation learning from visual demonstrations.
In Advances in Neural Information Processing Systems (NIPS), pp. 3812-3822, 2017.
T.	P. Lillicrap, J. J. Hunt, A. Pritzel, N. Heess, T. Erez, Y. Tassa, D. Silver, and D. Wierstra. Contin-
uous control with deep reinforcement learning. In Proceedings of the International Conference
on Learning Representations (ICLR), 2016.
T.	Miyato, S. Maeda, M. Koyama, K. Nakae, and S. Ishii. Distributional smoothing with virtual
adversarial training. In Proceedings of the International Conference on Learning Representations
(ICLR), 2016.
V. Mnih, K. Kavukcuoglu1, D. Silver, A. A. Rusu, J. Veness, M. G. Bellemare, A. Graves, M. Ried-
miller, A. K. Fidjeland, G. Ostrovski, S. Petersen, C. Beattie, A. Sadik, I. Antonoglou, H. King,
D. Kumaran, D. Wierstra, S. Legg, and D. Hassabis. Human-level control through deep reinforce-
ment learning. Nature, 518:529-533, 2015.
10
Published as a conference paper at ICLR 2019
O. Nachum, S. Gu, H. Lee, and S. Levine. Data-efficient hierarchical reinforcement learning. arXiv,
2018. URL https://arxiv.org/abs/1805.08296.
G. Neumann and J. Peters. Fitted q-iteration by advantage weighted regression. In Advances in
Neural Information Processing Systems (NIPS), 2009.
T. Osa and M. Sugiyama. Hierarchical policy search via return-weighted density estimation. In
Proceedings of the AAAI Conference on Artificial Intelligence (AAAI), 2018.
T. Osa, J. Pajarinen, G. Neumann, J. A. Bagnell, P. Abbeel, and J. Peters. An algorithmic perspective
on imitation learning. Foundations and Trends in Robotics, 7(1-2):1-179, 2018a.
T. Osa, J. Peters, and G. Neumann. Hierarchical reinforcement learning of multiple grasping strate-
gies with human instructions. Advanced Robotics, 32(18):955-968, 2018b.
J. Schulman, X. Chen, and P. Abbeel. Equivalence between policy gradients and soft q-learning. In
arXiv, 2017a.
J. Schulman, F. Wolski, P. Dhariwal, A. Radford, and O. Klimov. Proximal policy optimization
algorithms. arXiv, 2017b.
D. Silver, G. Lever, N. Heess, T. Degris, D. Wierstra, and M. Riedmiller. Deterministic policy gra-
dient algorithms. In Proceedings of the International Conference on Machine Learning (ICML),
2014.
D.	Silver, A. Huang, C. J Maddison, A. Guez, L. Sifre, G. Van Den Driessche, J. Schrittwieser,
I. Antonoglou, V. Panneershelvam, M. Lanctot, S. Dieleman, D. Grewe, J. Nham, N. Kalchbren-
ner, I. Sutskever, T. Lillicrap, M. Leach, K. Kavukcuoglu, T. Graepel, and D. Hassabis. Mastering
the game of go with deep neural networks and tree search. Nature, 529(7587):484-489, 2016.
M. J. A. Smith, H. Van Hoof, and J. Pineau. An inference-based policy gradient method for learning
options. In Proceedings of the International Conference on Machine Learning (ICML), 2018.
R. Sutton, D. Precup, and S. Singh. Between MDPs and semi-MDPs: A framework for temporal
abstraction in reinforcement learning. Artificial intelligence, 1999.
E.	Todorov, T. Erez, , and Yuval Tassa. Mujoco: A physics engine for model-based control. In
Proceedings of the IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS),
2012.
L. van der Maaten and G. Hinton. Visualizing data using t-sne. Journal of Machine Learning
Research, 2008.
A.	S. Vezhnevets, S. Osindero, T. Schaul, N. Heess, M. Jaderberg, D. Silver, and K. Kavukcuoglu.
FeUdal networks for hierarchical reinforcement learning. In Proceedings of the International
Conference on Machine Learning (ICML), 2017.
B.	Ziebart. Modeling Purposeful Adaptive Behavior with the Principle of Maximum Causal Entropy.
PhD thesis, Carnegie Mellon University, 2010.
11
Published as a conference paper at ICLR 2019
A Mutual Information with Advantage-Weighted Importance
The mutual information (MI) between the latent variable o and the state action pair (s, a) is defined
as
I((s, a),o) = H(o) — H(o|s, a)
(20)
where H(o) = p(o) log p(o)do and H (o|s, a) = p(o|s, a) log p(o|s, a)do. We make the empir-
ical estimate ofMI employed by Gomes et al. (2010); Hu et al. (2017) and modify it to employ the
importance weight. The empirical estimate of MI with respect to the density induced by a policy π
is given by
s, a； o) = £p(o)logP(o) — H(o∣s, a).
o∈O
(21)
We consider the case where We have samples collected by a behavior policy β(s∣a) and need to esti-
mate MI with respect to the density induced by policy π. Given a model p(o|s, a; η) parameterized
by vector η, p(o) can be rewritten as
p(o) = /pβ(s, a)pe(； ,Ip(o∣s, a； η)dads = E [W(s, a)p(o∣s, a； η)],
(22)
where W(s, a) = )(：,：) is the importance weight. Therefore, the empirical estimate of p(o) with
respect to the density induced by a policy π is given by
1N
p(o) = NEW(Si, ai)p(o∣Si, ai； η),
i=1
(23)
where W(s, a) = PNWWja) a .)is the normalized importance weight.
Likewise, the conditional entropy with respect to the density induced by a policy π is given by
H (o|S, a) =	pπ (S, a)p(o|S, a； η) log p(o|S, a； η)dSda
=/pβ(s, a)Ipe(Ss a)p(o∣s, a； η) logp(o∣s, a； η)dsda
= E [W (S, a)p(o|S, a； η) logp(o|S, a； η)] .
(24)
(25)
(26)
Therefore, the empirical estimate of the conditional entropy with respect to the density induced by
a policy π is given by
1N
1
H (o|s, a) = N ‰ W (si, ai)p(o∣Si, ai； η) log p(o∣Si, ai； η).
i=1
(27)
Thus, the empirical estimates ofMI can be computed by Equations (21), (23) and (27).
B Derivation of the s tate - value function
In HRL, the value function is given by
V(s) =	X π(o∣s)π(a∣s, o)Qπ(s, a)da = X π(o∣s) / π(a∣s, o)Qπ(s, a)da
o∈O	o∈O
(28)
Since option policies are deterministic given by μ(s), the state-value function is given by
V(S) = E∏(o∣s)Qπ(s, μθ(s))da.
o∈O
(29)
12
Published as a conference paper at ICLR 2019
Table 1: Hyperparameters of adInfoHRL used in the experiment.
Description	Symbol	Value
Coefficient for updating the target network	T	0.005
Discount factor	γ	0.99
Learning rate for actor		0.001
Learning rate for critic		0.001
Batch size for critic		100
Total batch size for all option policies		200 (option num=2), 400 (option num=4)
Batch size for the option network		50
Size of the on-policy buffer		5000
Number of epochs for training the option network		40
Number of units in hidden layers		(400, 300)
Activation function		Relu, Relu, tanh
optimizer		Adam
noise clip threshold	c	0.5
noise for exploration		0.1
action noise for the critic update		0.2
variance of the noise for MI regularization		0.04
coefficient for the MI term	λ	0.1
Table 2: Hyperparameters of TD3 used in the experiment.
Description	Symbol	Value
Coefficient for updating the target network	τ	0.005
Discount factor	γ	0.99
Learning rate for actor		0.001
Learning rate for critic		0.001
Batch size		100
Number of units in hidden layers		(400, 300)
Activation function		Relu, Relu, tanh
optimizer		Adam
noise clip threshold	c	0.5
noise for exploration		0.1
action noise for the critic update		0.2
C Experimental Details
We performed evaluations using benchmark tasks in the OpenAI Gym platform (Brockman et al.,
2016) with Mujoco physics simulator (Todorov et al., 2012). Hyperparameters of reinforcement
learning methods used in the experiment are shown in Tables 1-3. For exploration, both adInfoHRL
and TD3 used the clipped noise drawn from the normal distribution as E 〜 clip N (0, σ), -c, c ,
where σ = 0.2 and c = 0.5. For hyperparameters of PPO, we used the default values in OpenAI
baselines (Dhariwal et al., 2017). For the Walker2d, HalfCheetah, and Hopper tasks, we used the
Walker2d-v1, HalfCHeetah-v1, and Hopper-v1 in the OpenAI Gym, respectively. For the Ant task,
we used the AntEnv implemented in the rllab (Duan et al., 2016). When training a policy with
AdInfoHRL, infoHRL, and TD3, critics are trained once per time step, and actors are trained once
every after two updates of the critics. The source code is available at https://github.com/
TakaOsa/adInfoHRL.
We performed the experiments five times with different seeds, and reported the averaged test return
where the test return was computed once every 5000 time steps by executing 10 episodes without
exploration. When performing the learned policy without exploration, the option was drawn as
o = max Qn(s, μo(s)),	(30)
o0
instead of following the stochastic gating policy in Equations (17).
13
Published as a conference paper at ICLR 2019
Table 3: Hyperparameters of PPO used in the experiment. We tuned hyperparameters for our tasks,
which are defferent from the default parameters in OpenAI baselines (Dhariwal et al., 2017).
Description	Symbol	Value
Coefficient for updating the target network	τ	0.001
Discount factor	γ	0.99
Batch size		2048
Number of units in hidden layers		(64, 64)
Clipping parameter		0.15
Initial learning rate		0.0005
Learning rate schedule		linear
(a) Output of the option network in the state- (b) Activation of options in the state space
action space on HalfCheetah-v1.	on HalfCheetah-v1.
Figure 4: Distribution of options on the HalfCheetah-v1 task using adInfoHRL with two options.
The dimensionality is reduced by t-SNE for visualization.
D	Additional Information on Experimental Results
On the HalfCheetah task, adInfoHRL delivered the best performance with two options. The distri-
bution of options on HalfCheetah0v1 after one million steps is shown in Figure 4. Although the
state-action space is evenly divided, the options are not evenly activated. This behavior can occur
because the state-action space is divided based on the density induced by the behavior policy while
the activation of options is determined based on the quality of the option policies in a given state.
Moreover, an even division in the action-state space is not necessarily the even division in the state
space.
The activation of the options over time is shown in Figure 5. It is clear that one of the option
corresponds to the stable running phase and the other corresponds to the phase for recovering from
unstable states.
Figure 5: Activation of options over time steps on the HalfCheetah-VI task using adInfoHRL with
two options.
14
Published as a conference paper at ICLR 2019
20	40	60
(a) Output of the option network in the state- (b) Activation of options in the state space
action space on the Ant-rllab task.	on the Ant-rllab task.
Figure 6: Distribution of options on Ant-rllab task using adInfoHRL With four options. The dimen-
sionality is reduced by t-SNE for visualization.
Figure 7: Activation of the options over time steps on Ant-rllab task. Four options are learned.
The distribution of four options on the Ant-rllab task after one million steps is shown in Figure 6.
Four options are activated in the different domains of the state space. The activation of the op-
tions over time on the Ant-rllab task is shown in Figure 7. While four options are actively used in
the beginning of the episode, two (blue and yellow) options are mainly activated during the stable
locomotion.
Since the Ant task implemented in rllab is known to be harder than the Ant-v1 implemented in the
OpenAI gym, we reported the result of the Ant task in rllab in the main manuscript. Here, we report
the result of the Ant-v1 task implemented in the OpenAI gym. On the Ant-v1 task, adInfoHRL
yielded the best performance with two options. The performance of adInfoHRL with two options
is comparable to that of TD3 on Ant-v1. This result indicates that the Ant-v1 task does not require
a hierarchical policy structure, while a hierarchical policy improves the performance of learning on
Ant-rllab. The distribution of options on Ant-v1 task after one million steps is shown in Figure 8.
The activation of the options over time is shown in Figure 9. It is evident that two option policies on
the Ant-v1 task corresponded to different postures of the agent.
A recent study on HRL by Smith et al. (2018) reported the performance of IOPG on Walker2d-v1,
Hopper-v1, and HalfCheetah-v1. The study by Haarnoja et al. (2018a) reported the performance
of SAC-LSP on Walker2d-v1, Hopper-v1, HalfCheetah-v1, and Ant-rllab. A comparison of perfor-
mance between our method, IOPG, and SAC-LSP is summarized in Table 4. We report the perfor-
mance after 1 million steps. It is worth noting that adInfoHRL outperformed IOPG on these tasks
in terms of the achieved return, although we are aware that the qualitative performance is also im-
portant in HRL. AdInfoHRL outperformed SAC-LSP on Walker2d-v1 and Ant-rllab, and SAC-LSP
shows its superiority on HalfCheetah-v1 and Hopper-v1. However, the results of SAC-LSP were
obtained by using reward scaling, which was not used in the evaluation of adInfoHRL. Therefore,
further experiments are necessary for fair comparison under the same condition.
15
Published as a conference paper at ICLR 2019
(a) Averaged return on the Ant-v1 (b) Output of the option network in (c) Activation of options in the state
task in the OpenAI gym.	the state-action space on Ant-v1. space on Ant-v1.
Figure 8: Distribution of options on the Ant-v1 task using adInfoHRL with two options. The dimen-
sionality is reduced by t-SNE for visualization.
Figure 9: Activation of options over time steps on the Ant-VI task using adInfoHRL with two
options.
Table 4: Comparison of performance with existing methods after 1 million steps as reported in the
literature. For adInfoHRL, we show the mean and the standard deviation of the results from the 10
different seeds. The performance of IOPG and SAC-LSP is from the original papers (Smith et al.,
2018) and (Haarnoja et al., 2018a)
task	adInfoHRL (two opt.)	adInfoHRL (four opt.)	IOPG	SAC-LSP
Walker2d-v1	3752.1 ± 442	3404.2± 785.6	≈ 800	≈ 3000
HalfCheetah-v1	6315.1 ± 612.8	4520.6 ± 859.3	≈ 800	≈ 8000
Hopper-v1	1821.7 ± 626.3	1717.5 ± 281.7	≈ 1000	≈ 2500
Ant rllab	1263.2 ± 333.5	683.2 ± 105.68	—	≈ 500
16