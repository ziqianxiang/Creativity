Published as a conference paper at ICLR 2019
Optimal transport maps for distribution
PRESERVING OPERATIONS ON LATENT SPACES OF
Generative Models
Eirikur Agustsson, Alexander Sage, Radu Timofte & Luc Van Gool
Computer Vision Lab
ETH Zurich
Switzerland
{aeirikur,sagea,timofter,vangool}@vision.ee.ethz.ch
Ab stract
Generative models such as Variational Auto Encoders (VAEs) and Generative
Adversarial Networks (GANs) are typically trained for a fixed prior distribution in
the latent space, such as uniform or Gaussian. After a trained model is obtained,
one can sample the Generator in various forms for exploration and understanding,
such as interpolating between two samples, sampling in the vicinity of a sample or
exploring differences between a pair of samples applied to a third sample. How-
ever, the latent space operations commonly used in the literature so far induce a
distribution mismatch between the resulting outputs and the prior distribution the
model was trained on. Previous works have attempted to reduce this mismatch
with heuristic modification to the operations or by changing the latent distribution
and re-training models. In this paper, we propose a framework for modifying
the latent space operations such that the distribution mismatch is fully eliminated.
Our approach is based on optimal transport maps, which adapt the latent space
operations such that they fully match the prior distribution, while minimally mod-
ifying the original operation. Our matched operations are readily obtained for
the commonly used operations and distributions and require no adjustment to the
training procedure.
1	Introduction & Related Work
Generative models such as Variational Autoencoders (VAEs) (Kingma & Welling, 2013) and Genera-
tive Adversarial Networks (GANs) (Goodfellow et al., 2014) have emerged as popular techniques
for unsupervised learning of intractable distributions. In the framework of Generative Adversarial
Networks (GANs) (Goodfellow et al., 2014), the generative model is obtained by jointly training a
generator G and a discriminator D in an adversarial manner. The discriminator is trained to classify
synthetic samples from real ones, whereas the generator is trained to map samples drawn from a
fixed prior distribution to synthetic examples which fool the discriminator. Variational Autoencoders
(VAEs) (Kingma & Welling, 2013) are also trained for a fixed prior distribution, but this is done
through the loss of an Autoencoder that minimizes the variational lower bound of the data likelihood.
For both VAEs and GANs, using some data X we end up with a trained generator G, that is supposed
to map latent samples z from the fixed prior distribution to output samples G(z) which (hopefully)
have the same distribution as the data.
In order to understand and visualize the learned model G(z), it is a common practice in the literature
of generative models to explore how the output G(z) behaves under various arithmetic operations
on the latent samples z . However, the operations typically used so far, such as linear interpola-
tion (Goodfellow et al., 2014), spherical interpolation (White, 2016), vicinity sampling and vector
arithmetic (Radford et al., 2015), cause a distribution mismatch between the latent prior distribution
and the results of the operations. This is problematic, since the generator G was trained on a fixed
prior and expects to see inputs with statistics consistent with that distribution.
To address this, we propose to use distribution matching transport maps, to obtain analogous latent
space operations (e.g. interpolation, vicinity sampling) which preserve the prior distribution of
1
Published as a conference paper at ICLR 2019
(a) Uniform prior: Trajectories of linear interpolation, our
matched interpolation and the spherical interp. (White, 2016).
Figure 1: We show examples of distribution mismatches induced by the previous interpolation
schemes when using a uniform prior in two dimensions. Our matched interpolation avoids this with a
minimal modification to the linear trajectory, traversing through the space such that all points along
the path are distributed identically to the prior.
(b) Uniform prior distribu-
tion.
(d) Matched midpoint dis-
tribution (ours)
(c) Linear midpoint distri-
bution
(e) Spherical midpoint dis-
tribution (White, 2016)
the latent space, while minimally changing the original operation. In Figure 1 we showcase how
our proposed technique gives an interpolation operator which avoids distribution mismatch when
interpolating between samples of a uniform distribution. The points of the (red) matched trajectories
are obtained as minimal deviations (in expectation of l1 distance) from the the points of the (blue)
linear trajectory.
1.1	Distribution Mismatch and Related Approaches
In the literature there are dozens of papers that use sample operations to explore the learned models
(Bengio et al. (2013); Goodfellow et al. (2014); Dosovitskiy et al. (2015); Reed et al. (2016); Brock
et al. (2016); Reed et al. (2016) to name a few), but most of them have ignored the problem of
distribution mismatch. Kingma & Welling (2013) and Makhzani et al. (2015) sidestep the problem
when visualizing their models, by not performing operations on latent samples, but instead restrict
the latent space to 2-d and uniformly sample the percentiles of the distribution on a 2-d grid. This
way, the samples have statistics that are consistent with the prior distribution. However, this approach
does not scale up to higher dimensions - whereas the latent spaces used in the literature can have
hundreds of dimensions.
White (2016) experimentally observe that there is a distribution mismatch between the norm for
points drawn from uniform or Gaussian distribution and points obtained with linear interpolation
(SLERP), and (heuristically) propose to use a so-called spherical linear interpolation to reduce the
mismatch, obtaining higher quality interpolated samples.
While SLERP has been subjectively observed to produce better looking samples than linear inter-
polation and is now commonly, its heuristic nature has limited it from fully replacing the linear
interpolation. Furthermore, while perhaps possible it is not obvious how to generalize it to other
operations, such as vicinity sampling, n-point interpolation and random walk. In Section 2 we
show that for interpolation, in high dimensions SLERP tends to approximately perform distribution
matching the approach taken by our framework which can explain why it works well in practice.
Kilcher et al. (2018) further analyze the (norm) distribution mismatch observed by White (2016) (in
terms of KL-Divergence) for the special case of Gaussian priors, and propose an alternative prior
distribution with dependent components which produces less (but still nonzero) distribution mismatch
for linear interpolation, at the cost of needing to re-train and re-tune the generative models.
In contrast, we propose a framework which allows one to adapt generic operations, such that they
fully preserve the original prior distribution while being faithful to the original operation. Thus the
KL-Divergence between the prior and the distribution of the results from our operations is zero.
The approach works as follows: we are given a ‘desired’ operation, such as linear interpolation
y = tz1 + (1 - t)z2, t ∈ [0, 1]. Since the distribution of y does not match the prior distribution of z,
We search for a warping f : Rd → Rd, SUCh that y = f (y) has the same distribution as Z .In order to
have the modification y as faithful as possible to the original operation y, We use optimal transform
2
Published as a conference paper at ICLR 2019
Operation
2-point interpolation
n-point interpolation
Vicinity sampling
Analogies
Expression
y = tzι + (1 - t)z2 , t ∈ [0,1]
y = Pin=1tizi with Piti = 1
yj = Z1 + Euj for j = 1,…，k
y = z3 + (z2 -z1)
Table 1: Examples of interesting sample operations which need to be adapted (’matched’) if we want
the distribution of the result y to match the prior distribution.
maps (Santambrogio, 2015; Villani, 2003; 2008) to find a minimal modification of y which recovers
the prior distribution z .
This is illustrated in Figure 1a, where each point y of the matched curve is obtained by warping a
corresponding point y of the linear trajectory, while not deviating too far from the line.
2	From distribution mismatch to optimal transport
With implicit models such as GANs (Goodfellow et al., 2014) and VAEs (Kingma & Welling, 2013),
we use the data X, drawn from an unknown random variable x, to learn a generator G : Rd 7→ Rd0
with respect to a fixed prior distribution pz, such that G(z) approximates x. Once the model is
trained, we can sample from it by feeding latent samples z through G.
We now bring our attention to operations on latent samples zι, ∙∙∙ , Zk fromPz, i.e. mappings
K : Rd ×∙∙∙× Rd → Rd.	(1)
We give a few examples of such operations in Table 1.
Since the inputs to the operations are random variables, their output y = κ(zι, ∙∙∙ , Zk) is also a
random variable (commonly referred to as a statistic). While we typically perform these operations
on realized (i.e. observed) samples, our analysis is done through the underlying random variable y.
The same treatment is typically used to analyze other statistics over random variables, such as the
sample mean, sample variance and test statistics.
In Table 1 we show example operations which have been commonly used in the literature. As
discussed in the Introduction, such operations can provide valuable insight into how the trained
generator G changes as one creates related samples y from some source samples. The most common
such operation is the linear interpolation, which we can view as an operation
yt = tZ1 + (1 - t)Z2,	(2)
where Z1, Z2 are latent samples from the prior pz and yt is parameterized by t ∈ [0, 1].
Now, assume Z1 and Z2 are i.i.d, and let Z1, Z2 be their (scalar) first components with distribution
pZ. Then the first component of yt is Yt = tZ1 + (1 - t)Z2, and we can compute:
Var[Yt] = Var[tZ1 + (1 -t)Z2] =t2Var[Z1] +(1 - t)2Var[Z2] = (1+2t(t- 1))Var[Z]. (3)
Since (1 + 2t(t - 1)) 6= 1 for all t ∈ [0, 1] \ {0, 1}, it is in general impossible for yt to have the same
distribution as Z, which means that distribution mismatch is inevitable when using linear interpolation.
A similar analysis reveals the same for all of the operations in Table 1.
This leaves us with a dilemma: we have various intuitive operations (see Table 1) which we would
want to be able to perform on samples, but their resulting distribution pyt is inconsistent with the
distribution pz we trained G for.
Due to the curse of dimensionality, as empirically observed by White (2016), this mismatch can
be significant in high dimensions. We illustrate this in Figure 2, where we plot the distribution of
the squared norm kytk2 for the midpoint t = 1/2 of linear interpolation, compared to the prior
distribution kZk2. With d = 100 (a typical dimensionality for the latent space), the distributions
are dramatically different, having almost no common support. Kilcher et al. (2018) quantify this
mismatch for Gaussian priors in terms of KL-Divergence, and show that it grows linearly with the
dimension d. In Appendix A (see Supplement) we expand this analysis and show that this happens
for all prior distributions with i.i.d. entries (i.e. not only Gaussian), both in terms of geometry and
KL-Divergence.
2.1	Distribution matching with optimal transport
In order to address the distribution mismatch, we propose a simple and intuitive framework for
constructing distribution preserving operators, via optimal transport:
3
Published as a conference paper at ICLR 2019
Figure 2: Distribution of the squared norm kyk2 of midpoints for two prior distributions in 100
dimensions: (a) components uniform on [-1, 1] and (b) components Gaussian N(0, 1), for linear
interpolation, our proposed matched interpolation and the spherical interpolation proposed by White
(2016). Both linear and spherical interpolation introduce a distribution mismatch, whereas our
proposed matched interpolation preserves the prior distribution for both priors.
Strategy 1 (Optimal Transport Matched Operations).
1.	We construct an 'intuitive' operator y = κ(zι, •一,Zk).
2.	We analytically (or numerically) compute the resulting (mismatched) distribution py
3.	We search for a minimal modification y = f (y) (in the sense that Ey [c(y, y)] is minimal
with respect to a cost C), such that distribution is brought back to the prior, i.e. Py = Pz.
The cost function in step 3 could e.g. be the euclidean distance c(x, y) = kx - yk, and is used to
measure how faithful the modified operator, y = f (κ(zι,…,Zk)) is to the original operator k.
Finding the map f which gives a minimal modification can be challenging, but fortunately it is a well
studied problem from optimal transport theory. We refer to the modified operation y as the matched
version of y, with respect to the cost C and prior distribution Pz .
For completeness, we introduce the key concepts of optimal transport theory in a simplified setting, i.e.
assuming probability distributions are in euclidean space and skipping measure theoretical formalism.
We refer to Villani (2003; 2008) and Santambrogio (2015) for a thorough and formal treatment of
optimal transport.
The problem of step (3) above was first posed by Monge (1781) and can more formally be stated as:
Problem 1 (Santambrogio (2015) Problem 1.1). Given probability distributions Px, Py, with domains
X , Y respectively, and a cost function C : X × Y → R+, we want to minimize
inf {Eχ〜Px [c(x,f (x))]∣f ： X → Y,f (x)〜Py O	(MP)
We refer to the minimizer f *X → Y of (MP) (ifit exists), as the optimal transport mapfrom PX to
Py with respect to the cost C.
However, the problem remained unsolved until a relaxed problem was studied by Kantorovich (1942):
Problem 2 (Santambrogio (2015) Problem 1.2). Given probability distributions Px ,Py, with domains
X, Y respectively, and a cost function C : X × Y → R+, we want to minimize
inf {E(x,y)〜Px,y[c(χ,y)]∣(χ,y)〜Px,y,X 〜Px,y 〜Py} ,	(KP)
where (x, y)〜Pχ,y, X 〜Px, y 〜Py denotes that (x, y) have a joint distribution Pχ,y which has
(previously specified) marginals Px andPy.
We refer to the joint Px,y which minimizes (KP) as the optimal transport plan from Px to Py with
respect to the cost C.
The key difference is to relax the deterministic relationship between X and f(X) to a joint probability
distribution Px,y with marginals Px and Py for X and y. In the case of Problem 1, the minimization
4
Published as a conference paper at ICLR 2019
might be over the empty set since it is not guaranteed that there exists a mapping f such that f (x)〜y.
In contrast, for Problem 2, one can always construct a joint density px,y with px and py as marginals,
such as the trivial construction where x and y are independent, i.e. px,y(x, y) := px (x)py (y).
Note that given a joint density px,y(x, y) over X × Y, we can view y conditioned on x = x for a
fixed x as a stochastic function f(x) from X to Y, since given a fixed x do not get a specific function
value f (x) but instead a random variable f (x) that depends on x, with f (x)〜y|x = X with density
Py (y|x = x) := px,y(X)y). In this case we have (x, f (x))〜pχ,y, so we can view the Problem KP
as a relaxation of Problem MP where f is allowed to be a stochastic mapping.
While the relaxed problem of Kantorovich (KP) is much more studied in the optimal transport litera-
ture, for our purposes of constructing operators it is desirable for the mapping f to be deterministic
as in (MP) (see Appendix C for a more detailed discussion on deterministic vs stochastic operations).
To this end, we will choose the cost function c such that the two problems coincide and where we can
find an analytical solution f or at least an efficient numerical solution.
In particular, we note that the operators in Table 1 are all pointwise, such that if the points zi have
i.i.d. components, then the result y will also have i.i.d. components.
If we combine this with the constraint for the cost c to be additive over the components of x, y, we
obtain the following simplification:
Theorem 1. Suppose px and py have i.i.d components and c over X × Y = Rd × Rd decomposes
as
d
c(x, y) = X C(x(i), y(i)).	(4)
i=1
Consequently, the minimization problems (MP) and (KP) turn into d identical scalar problems for
the distributions pX and pY of the components of x and y:
inf {Eχ〜PX [C(X,T(X))]∣T ： R → R,T(X)〜PYO	(MP-I-D)
inf {E(x,y )〜pχ,γ[C(X,Y )]∣(X,Y)〜Px,y ,X 〜PX ,Y 〜Py O ,	(KP-1-D)
such that an optimal transport map T for (MP-1-D) gives an optimal transport map f for (MP) by
pointwise application of T, i.e. f (x)(i) := T(x(i)), and an optimal transport plan PX,Y for (KP-1-D)
gives an optimal transport plan Px,y (x, y) := Qid=1 PX,Y (x(i), y(i)) for (KP).
Proof. See Appendix.	□
Fortunately, under some mild constraints, the scalar problems have a known solution:
Theorem 2 (Theorem 2.9 in Santambrogio (2015)). Let h : R → R+ be convex and suppose the
cost C takes the form C(x, y) = h(x - y). Given an continuous source distribution PX and a target
distribution PY on R having a finite optimal transport cost in (KP-1-D), then
TXmo→n Y (x) :=FY[-1](FX(x)),	(5)
defines an optimal transport map from PX to PY for (MP-1-D), where FX (x) := -x∞ PX (x0)dx0
is the Cumulative Distribution Function (CDF) of X and FY[-1] (y) := inf {t ∈ R|FY (t) ≥ y} is
the pseudo-inverse of FY. Furthermore, the joint distribution of (X, TXmo→n Y(X)) defines an optimal
transport plan for (KP-1-D).
The mapping TXmo→n Y (x) in Theorem 2 is non-decreasing and is known as the monotone transport
map from X to Y. It is easy to verify that TXmo→n Y(X) has the distribution of Y, in particular
Fχ(X)〜UnifOrm(0,1) and if U 〜UnifOrm(0,1) then FY[-1 (U)〜Y.
Now, combining Theorems 1 and 2, we obtain a concrete realization of the Strategy 1 outlined above.
We choose the cost c such that it admits to Theorem 1, such as c(x, y) := kx - yk1, and use an
operation that is pointwise, so we just need to compute the monotone transport map in (5). That is, if
5
Published as a conference paper at ICLR 2019
y
(a) Uniform prior
y
(b) Gaussian prior
Figure 3: We show the monotone transport maps for linear interpolation evaluated at t ∈
{0.05, 0.25, 0.5}, to Uniform and Gaussian priors.
z has i.i.d components with distribution pZ, we just need to compute the component distribution pY
of the result y of the operation, the CDFs FZ , FY and obtain
TYm→onZ(y) := FZ[-1] (FY (y))	(6)
as the component-wise modification of y, i.e. y(i) := Tγm→z(y(i)).
In Figure 3 we show the monotone transport map for the linear interpolation y = tz1 + (1 - t)z2
for various values of t. The detailed calculations and examples for various operations are given in
Appendix B, for both Uniform and Gaussian priors.
3	Simulations
To validate the correctness of the matched operators computed in Appendix B, we numerically
simulate the distributions for toy examples, as well as prior distributions typically used in the
literature.
Priors vs. interpolations in 2-D For Figure 1, we sample 1 million pairs of points in two dimension,
from a uniform prior (on [-1, 1]2), and estimate numerically the midpoint distribution of linear
interpolation, our proposed matched interpolation and the spherical interpolation of White (2016). It
is reassuring to see that the matched interpolation gives midpoints which are identically distributed to
the prior. In contrast, the linear interpolation condenses more towards the origin, forming a pyramid-
shaped distribution (the result of convolving two boxes in 2-d). Since the spherical interpolation
of White (2016) follows a great circle with varying radius between the two points, we see that the
resulting distribution has a “hole” in it, “circling” around the origin for both priors.
Priors vs. interpolations in 100-D For Figure 2, we sample 1 million pairs of points in d = 100
dimensions, using either i.i.d. uniform components on [-1, 1] or Gaussian N(0, 1) and compute the
distribution of the squared norm of the midpoints. We see there is a dramatic difference between
vector lengths in the prior and the midpoints of linear interpolation, with only minimal overlap.
We also see that the spherical interpolation (SLERP) is approximately matching the prior (norm)
distribution, having a matching first moment, but otherwise also induces a distribution mismatch. In
contrast, our matched interpolation, fully preserves the prior distribution and perfectly aligns. We
note that this setting (d = 100, uniform or Gaussian) is commonly used in the literature. 4
4	Experiments
Setup We used DCGAN (Radford et al., 2015) generative models trained on LSUN bedrooms (Yu
et al., 2015), CelebA (Liu et al., 2015) and LLD (Sage et al., 2017; 2018), an icon dataset, to
qualitatively evaluate. For LSUN, the model was trained for two different output resolutions,
providing 64 × 64 pixel and a 128 × 128 pixel output images (where the latter is used in figures
containing larger sample images). The models for LSUN and the icon dataset where both trained on a
uniform latent prior distribution, while for CelebA a Gaussian prior was used. The dimensionality of
the latent space is 100 for both LSUN and CelebA, and 512 for the model trained on the icon model.
Furthermore we use improved Wasserstein GAN (iWGAN) with gradient penalty (Gulrajani et al.,
6
Published as a conference paper at ICLR 2019
Dataset	CIFAR-10	LLD-icon	LSUN	CelebA
Model	iWGAN	DCGAN	DCGAN	DCGAN
Prior	Gaussian, 128-D	Uniform, 100-D	Uniform, 100-D	Gaussian, 100-D
Inception scores for midpoints:				
random samples	7.90 ± 0.11	3.70 ± 0.09	3.90 ± 0.08	2.05 ± 0.04
2-point linear	7.12 ± 0.08 (-10%)	3.56 ± 0.06 (-4%)	3.57 ± 0.07 (-8%)	1.71 ± 0.02 (-17%)
2-point matched	7.89 ± 0.08	3.69 ± 0.08	3.89 ± 0.08	2.04 ± 0.03
4-point linear	5.84 ± 0.08 (-26%)	3.45 ± 0.08 (-7%)	2.95 ± 0.06 (-24%)	1.46 ± 0.01 (-29%)
4-point matched	7.91 ± 0.09	3.69 ± 0.10	3.91 ± 0.10	2.04 ± 0.04
Table 2: Inception scores on LLD-icon, LSUN, CIFAR-10 and CelebA for the midpoints of linear
interpolation and its matched counterpart. Scores are reported as mean ± standard deviation (relative
change in %). Our matched variants fully recover from the (up to 29%) score drop of the linear
interpolation, giving the same quality as random samples.
Prior Perturbation ∣∣ ∙ k2
GaUssian,100-D 02463
Uniform, 100-D	0.2377
Perturbation ∣∣ ∙ ∣ι
0.2460
0.2477
Gaussian, 128-D	0.2470	0.2460
Uniform, 128-D	0.2384	0.2479
Table 3: We measure over the average (normalized) perturbation ∣y — y∣∣p∕∣∣y∣∣p incurred by our
matched interpolation for the latent spaces used in Table 2, for p = 1, 2.
2017) trained on CIFAR-10 at 32 × 32 pixels with a 128-dimensional Gaussian prior to compute
inception scores.
4.1 Quantitative results
To measure the effect of the distribution mismatch, we quantitatively evaluate using the Inception
score(Salimans et al., 2016). In Table 2 we compare the Inception score of our trained models (i.e.
using random samples from the prior) with the score when sampling midpoints from the 2-point and
4-point interpolations described above, reporting mean and standard deviation with 50,000 samples,
as well as relative change to the original model scores if they are significant. Compared to the
original scores of the trained models (random samples), our matched operations are statistically
indistinguishable (as expected) while the linear interpolation gives a significantly lower score in all
settings (up to 29% lower).
However, this is not surprising, since our matched operations are guaranteed to produce samples that
come from the same distribution as the random samples.
To quantify the effect our matching procedure has on the original operation, in Table 3 we compute
the perturbation incurred when warping the linear interpolation y to the matched counterpart y for
2-point interpolation on the latent spaces used in Table 2. We compute the normalized perturbation
∣yft — ytkp∕IIytIlp (with P = 1 corresponding to lι distance and P = 2 to l2 distance), over
N = 100000 interpolation points yt = tz1 + (1 - t)z2 where z1, z2 are sampled from the prior and
t ∈ [0, 1] sampled uniformly. We observe that for all priors and both metrics, the perturbation is in
the range 0.23 — 0.25, i.e. less than a one fourth of ∣yt∣.
4.2 Qualitative results
In the following, we will qualitatively show that our matched operations behave as expected, and that
there is a visual difference between the original operations and the matched counterparts. To this end,
the generator output for latent samples produced with linear interpolation, SLERP (spherical linear
interpolation) of White (2016) and our proposed matched interpolation will be compared.
2-point interpolation We begin with the classic example of 2-point interpolation: Figure 4 shows
three examples per dataset for an interpolation between 2 points in latent space. Each example is
first done via linear interpolation, then SLERP and finally matched interpolation. It is immediately
obvious in Figures 4a and 4b that linear interpolation produces inferior results with generally more
blurry, less saturated and less detailed output images.
The SLERP heuristic and matched interpolation are slightly different visually, but we do not observe
a difference in visual quality. However, we stress that the goal of this work is to construct operations
in a principled manner, whose samples are consistent with the generative model. In the case of linear
7
Published as a conference paper at ICLR 2019
^d^ΛAAA4⅛≠
@衾0**於**
。/。。•❷aG
幼Ig/。。@❷©
Θ 3 0 0 θ(31191 ι0ι
❺⑥⑥⑤图四回因I
O Θ @ g) @ ISI ∣9∣ 10∣
(b) LSUN dataset
(c) CelebA dataset
(a) LLD icon dataset
Figure 4: 2-point interpolation: Each example shows linear, SLERP and transport matched interpola-
tion from top to bottom respectively. For LLD icon dataset (a) and LSUN (b), outputs are produced
with DCGAN using a uniform prior distribution, whereas the CelebA model (c) uses a Gaussian prior.
The output resolution for the (a) is 32 × 32, for (b) and (c) 64 × 64 pixels.
(a) Linear interpolation	(b) Spherical interpolation	(c) Distribution matched
Figure 5: 4-point interpolation between 4 sampled points (corners) from DCGAN trained on LSUN
(128 × 128) using a uniform prior. The same interpolation is shown using linear, SLERP and
distribution matched interpolation.
Figure 6: Random walk for LLD, LSUN (64 x 64) and CelebA. The random walks consist of
a succession of steps in random directions, calculated for the same sequence of directions using
(non-matched) vicinity sampling in the upper rows and our proposed matched vicinity sampling in
the lower rows.
8
Published as a conference paper at ICLR 2019
interpolation (our framework generalizes to more operations, see below and Appendix), the SLERP
heuristic tends to work well in practice but we provide a principled alternative.
4-point interpolation An even stronger effect can be observed when we do 4-point interpolation,
showcased in Figure 5 (LSUN) and Figure 8 (LLD icons). The higher resolution of the LSUN output
highlights the very apparent loss of detail and increasing prevalence of artifacts towards the midpoint
in the linear version, compared to SLERP and our matched interpolation.
Midpoints (Appendix) In all cases, the point where the interpolation methods diverge the most, is
at the midpoint of the interpolation where t = 0.5. Thus we provide 25 such interpolation midpoints
in Figures 11 (LLD icons) and 12 (LSUN) in the Appendix for direct comparison.
Vicinity sampling (Appendix) Furthermore we provide two examples for vicinity sampling in
Figures 9 and 10 in the Appendix. Analogous to the previous observations, the output under a linear
operator lacks definition, sharpness and saturation when compared to both spherical and matched
operators.
Random walk An interesting property of our matched vicinity sampling is that we can obtain a
random walk in the latent space by applying it repeatedly: we start at a point y0 = z drawn from
the prior, and then obtain point yi by sampling a single point in the vicinity of yi-1, using some
fixed ’step size’ . We show an example of such a walk in Figure 6, using = 0.5. As a result of the
repeated application of the vicinity sampling operation, the divergence from the prior distribution
in the non-matched case becomes stronger with each step, resulting in completely unrecognizable
output images on the LSUN and LLD icon models.
5 Conclusions
We proposed a framework that fully eliminates the distribution mismatch in the common latent space
operations used for generative models. Our approach uses optimal transport to minimally modify
(in l1 distance) the operations such that they fully preserve the prior distribution. We give analytical
formulas of the resulting (matched) operations for various examples, which are easily implemented.
The matched operators give a significantly higher quality samples compared to the originals, having
the potential to become standard tools for evaluating and exploring generative models.
Acknowledgments
This work was partly supported by ETH Zurich General Fund (OK) and Nvidia through a hardware
grant.
References
Yoshua Bengio, Gregoire Mesnil, Yann Dauphin, and Salah Rifai. Better mixing via deep representa-
tions. In Proceedings of the 30th International Conference on Machine Learning (ICML-13), pp.
552-560, 2013.
Andrew Brock, Theodore Lim, James M Ritchie, and Nick Weston. Neural photo editing with
introspective adversarial networks. arXiv preprint arXiv:1609.07093, 2016.
Alexey Dosovitskiy, Jost Tobias Springenberg, and Thomas Brox. Learning to generate chairs with
convolutional neural networks. In Proceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pp. 1538-1546, 2015.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,
Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Advances in neural informa-
tion processing systems, pp. 2672-2680, 2014.
Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville. Improved
training of wasserstein gans. arXiv:1704.00028v2, 2017.
Leonid Vitalievich Kantorovich. On the translocation of masses. In Dokl. Akad. Nauk SSSR,
volume 37, pp. 199-201, 1942.
9
Published as a conference paper at ICLR 2019
Yannic Kilcher, Aurelien Lucchi, and Thomas Hofmann. Semantic interpolation in implicit models.
In International Conference on Learning Representations, 2018. URL https://openreview.
net/forum?id=H15odZ-C-.
Diederik P Kingma and Max Welling. Auto-encoding variational bayes. arXiv preprint
arXiv:1312.6114, 2013.
Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the wild. In
Proceedings of International Conference on Computer Vision (ICCV), 2015.
David JC MacKay. Information theory, inference and learning algorithms. Cambridge university
press, 2003.
Alireza Makhzani, Jonathon Shlens, Navdeep Jaitly, Ian Goodfellow, and Brendan Frey. Adversarial
autoencoders. arXiv preprint arXiv:1511.05644, 2015.
GasPard Monge. Memoire sur la theorie des deblais et des remblais. Histoire de IiAcademie Royale
des Sciences de Paris, 1781.
Alec Radford, Luke Metz, and Soumith Chintala. UnsuPervised rePresentation learning with deeP
convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015.
Scott Reed, ZeyneP Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak Lee.
Generative adversarial text to image synthesis. arXiv preprint arXiv:1605.05396, 2016.
Alexander Sage, Eirikur Agustsson, Radu Timofte, and Luc Van Gool. Lld: Large logo dataset. 2017.
URL https://data.vision.ee.ethz.ch/cvl/lld/.
Alexander Sage, Eirikur Agustsson, Radu Timofte, and Luc Van Gool. Logo synthesis and maniPula-
tion with clustered generative adversarial networks. In The IEEE Conference on Computer Vision
and Pattern Recognition (CVPR), June 2018.
Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
ImProved techniques for training gans. In Advances in Neural Information Processing Systems, PP.
2234-2242, 2016.
Filippo Santambrogio. Optimal transport for applied mathematicians. BirkauSer NY, 2015.
Cedric Villani. Topics in optimal transportation. Number 58. American Mathematical Soc., 2003.
Cedric Villani. OPtimal transport: old and new, volume 338. Springer Science & Business Media,
2008.
Tom White. Sampling generative networks. arXiv preprint arXiv:1609.04468, 2016.
Fisher Yu, Ari Seff, Yinda Zhang, Shuran Song, Thomas Funkhouser, and Jianxiong Xiao. Lsun:
Construction of a large-scale image dataset using deep learning with humans in the loop. arXiv
preprint arXiv:1506.03365, 2015.
10
Published as a conference paper at ICLR 2019
A On the curse of dimensionality and geometric outliers
We note that the analysis here can bee seen as a more rigorous version of an observation made by
White (2016), who experimentally show that there is a significant difference between the average
norm of the midpoint of linear interpolation and the points of the prior, for uniform and Gaussian
distributions.
Suppose our latent space has a prior with Z = [Zι, ∙∙∙ ,Zd] ∈ [-1,1]d with i.i.d entries Zi 〜Z. In
this case, we can look at the squared norm
d
kzk2=XZi2.
i=1
From the Central Limit Theorem (CLT), we know that as d → ∞,
√d( J kzk2 - μZ2 ) → N(O, σZ2 ),
(7)
(8)
in distribution. Thus, assuming d is large enough such that we are close to convergence, we can
approximate the distribution of ∣∣zk2 as N(dμz2,dσZ2). In particular, this implies that almost all
points lie on a relatively thin spherical shell, since the mean grows as O(d) whereas the standard
deviation grows only as O(√d).
We note that this property is well known for i.i.d Gaussian entries (see e.g. Ex. 6.14 in MacKay
(2003)). For Uniform distribution on the hypercube it is also well known that the mass is concentrated
in the corner points (which is consistent with the claim here since the corner points lie on a sphere).
Now consider an operator such as the midpoint of linear interpolation, y = 2zι + 11 Z2, with
components Y(i) = 2Z(i) + 1 z2i). Furthermore, let's assume the component distribution PZ is
symmetric around 0, such that E [Z] = 0.
In this case, we can compute:
E[(γ(i))2] = Var[2 Z(i) + ∣ Z?] = ∣ Var[Z ] = ∣ μZ	(9)
Var[(γ(i))2] = Var[(2 Z(i) + 1Z z2i))2] = ɪ Var[Z 2]=+ Z 2.	(10)
Thus, the distribution of ∣ y k2 Can be approximated with N(ɪ dμz2, 11 dσZ2).
Therefore, y also mostly lies on a spherical shell, but with a different radius than z. In fact, the shells
will intersect at regions which have a vanishing probability for large d. In other words, when looking
at the squared norm kyk2, kyk2 is a (strong) outlier with respect to the distribution of kzk2.
This can be quantified in terms of KL-Divergence:
Dkl(∣z∣2, kyk2) ≈ Dkl(N(dμz2,dσZ2),N(|dμz2,*2))
log
Vdσ z2 / 2	dσZ 2 + (dμz2 — 22 dμz2)
+	24dσZ2
√dσz2
1/2
d 2⅝-1/2 - log2,
(11)
(12)
(13)
2
-----
so DKL(kzk2, kyk2) grows linearly with the dimensions d.
A.1 Proof of Theorem 1
Proof. We will show it for the Kantorovich problem, the Monge version is similar.
11
Published as a conference paper at ICLR 2019
Starting from (KP), we compute
inf {E(χ,y)〜px,y [c(x, y)]|(x, y)〜Px,y, X 〜Px, y 〜Py }
= inf E(x,y)
〜Pχ,y [Xd C(x(i),y"))]∣(χ, y) ~ px,y, X ~ px, y ~ Py }
=inf ]χ E(χ,y)〜Pχ,y [C(x(i),沙⑴不出 y)〜Px,y, X 〜Px, y 〜Py }
d
≥ X inf {E(x,y)〜Px,y [C (x(i), y(i))]∣(x, y)〜Px,y, X 〜Px, y 〜Py }
i=1
d
X inf {E(X,Y)〜px,y[C(X,y II(X,y ) 〜PX,Y,X 〜PX,Y 〜PY }
i=1
d ∙ inf nE(X,Y)〜px,y[C(X,Y II(X,Y) 〜PX,Y,X 〜PX,Y 〜PY O ,
(14)
(15)
(16)
(17)
(18)
(19)
(20)
where the inequality in (17) is due to each term being minimized separately.
Now let Pd(X, Y) be the set of joints Px,y withPx,y(x, y) = Qid=1 PX,Y (x(i), y(i)) where PX,Y has
marginals PX andPY. In this case Pd(X, Y) is a subset of all joints Px,y with marginals Px andPy,
where the pairs (X(1), y(1)), . . . , (X(d), y(d))) are constrained to be i.i.d. Starting again from (16)
can compute:
inf
E(x,y)〜Px,y [C(x(i), y(i))]|(x, y) 〜Px,y, X 〜Px, y 〜Py }
)
)
≤ inf ∑E(χ,y)-Px,y [C(x(i), yc0)]∣Pχ,y ∈ Pd(X,Y)
inf ∑E(χ,y)-Px,y [C(x(i), yc0)]∣Pχ,y ∈ Pd(X,Y)
inf {χ E(X,Y)〜px,y[C(X,y II(X,y ) 〜PX,Y,X 〜PX,Y 〜PY j
d ∙ inf {E(X,Y)〜px,y[C(X,yII(X,y) 〜PX,Y, X 〜PX ,y 〜PY O ,
(21)
(22)
(23)
(24)
(25)
where the inequality in (21) is due to minimizing over a smaller set.
Since the two inequalities above are in the opposite direction, equality must hold for all of the
expressions above, in particular:
inf {E(x,y)〜Px,y [c(X, y)] |(x, y) 〜Px,y, X 〜Px, y 〜Py }	(26)
=d ∙ inf {E(x,y )〜px,y [C(X, Y)] ∣ (X, Y)〜Px,y , X 〜PX ,Y 〜Py }	(27)
Thus, (KP) and (KP-1-D) equal up to a constant, and minimizing one will minimize the
other. Therefore the minimization of the former can be done over PX,Y with Px,y (x, y) =
Qd=I px,y (x(i),y(i)).	口
12
Published as a conference paper at ICLR 2019
B Calculations for Examples
In the next sections, we illustrate how to compute the matched operations for a few examples, in
particular for linear interpolation and vicinity sampling, using a uniform or a Gaussian prior. We
picked the examples where we can analytically compute the uniform transport map, but note that it is
also easy to compute FZ[-1] and (FY (y)) numerically, since one only needs to estimate CDFs in one
dimension.
Since the components of all random variables in these examples are i.i.d, for such a random vector x
we will implicitly write X for a scalar random variable that has the distribution of the components of
x.
When computing the monotone transport map TXmo→n Y , the following Lemma is helpful.
Lemma 1 (Theorem 2.5 in Santambrogio (2015)). Suppose a mapping g(x) is non-decreasing and
maps a continuous distribution pX to a distribution pY , i.e.
g(X)〜Y,	(28)
then g is the monotone transport map TXmo→n Y .
According to Lemma 1, an alternative way of computing TXmo→n Y is to find some g that is non-
decreasing and transforms pX to pY .
Example 1:	Uniform Linear Interpolation
Suppose z has uniform components Z 〜 Uniform(-1, 1). In this case, pZ (z) = 1/2 for -1 < z <
1.
Now let yt = tz1 + (1 - t)z2 denote the linear interpolation between two points z1 , z2 , with
component distribution pYt. Due to symmetry we can assume that t > 1/2, since pYt = pY1-t. We
then obtain PYt as the convolution of PtZ and p(i-t)z, i.e. PYt = PtZ * p(i-t)z. First We note that
ptZ = 1/(2t) for -t < z < t and p(1-t)Z = 1/(2(1 - t)) for -(1 - t) < z < 1 - t. We can then
compute:
PYt (y) = (PtZ * P(1-t)Z)(y)
1
2(1 — t)(2t)
y + 1
2-2t
-y + 1
0
ify< -1
if - 1 < y < -t+ (1 -t)
if - t+ (1 - t) < y < t- (1 - t)
if t- (1 - t) < y < 1
if 1 < y
(29)
(30)
(31)
0
The CDF FYt is then obtained by computing
FYt(y)
Zy
-∞
PYt (y0)dy0
1
2(1 — t)(2t)
0
2 (y + 1)(y +I)
2(1 - t)(y + t)
2(1 - t)(3t - I) +(—1 y2 + y +1 (2t-1)2 - (2t-1))
,2(1 — t)(2t)
(32)
ify< —1
if — 1 < y < 1 — 2t
if 1 — 2t< y < 2t— 1
if 2t— 1 < y < 1
if 1 < y
(33)
Since PZ(z) = 1/2 for |z| < 1, We have FZ(z) = 1Z + 11 for |z| < 1. This gives FZ-1] (p)
2(p - 2).
NoW, We just compose the tWo mappings to obtain TYmo→n Z(y) = FZ[-1] (FYt (y)).
13
Published as a conference paper at ICLR 2019
Example 2:	Uniform Vicinity Sampling and Random Walk
Let z again have uniform components on [-1, 1]. For vicinity sampling, we want to obtain new
points z1, ∙, Zk which are close to z. We thus define
zi0 := z + ui,	(34)
where ui also has uniform components, such that each coordinate of zi0 differs at most by from z .
By identifying tZi0 = tZ + (1 - t)Ui with t = 1/(1 + ), we see that tZi0 has identical distribution
to the linear interpolation Yt in the previous example. Thus gt(Zi0) := TYmo→n Z(tZi0) will have the
distribution of Z , and by Lemma1 is then the monotone transport map from Zi0 to Z .
Example 3	: Gaussian Linear Interpolation, Vicinity Sampling and Analogies
Suppose z has components Z 〜N(0, σ2). In this case, we can compute linear interpolation as before,
yt = tzι + (1 - t)z2. Since the sum of Gaussians is Gaussian, we get, Yt 〜 N (0, t2σ2 + (1 - t)2σ2).
Now, it is easy to see that with a proper scaling factor, we can adjust the variance of Yt back to σ2 .
That is, √t2+(ι-t)2 Yt 〜N(0, σ2), so by Lemma 1 gt(y):
map from Yt to Z .
√t2 + (1-t)2
y is the monotone transport
1
By adjusting the vicinity sampling operation to
zi0 := z + ei,	(35)
where ei 〜N(0,1), we can similarly find the monotone transport map ge(y) = √1^y.
Another operation which has been used in the literature is the “analogy”, where from samples
z1 , z2 , z3, one wants to apply the difference between z1 and z2, to z3. The transport map is then
g(y) = √3y
C Deterministic vs stochastic operations
In Strategy 1, we only considered deterministic mappings f such that y = f (y) recovers the
prior distribution. However, one can also consider stochastic mappings f. One example for linear
interpolation, proposed by the area chair (AC) 1, is to set y∣zι, z2 〜 N(tzι + (1 - t)z2, (1 -
t2-(1-t)2)σ2) for the case when zι, Z2 〜N(μ, σ2) are Gaussian. This ensures that marginally
y 〜N(μ, σ2), making it a valid (stochastic) modification to y that recovers the prior distribution.
However, our matched interpolation has two benefits over this approach: since it is deterministic (and
continuous), it means that the line between z1 , z2 gets mapped to a smooth trajectory in the latent
space. Furthermore, for the cost c(x, y) := kx - yk1, it is optimal (see Theorem 2 ), even for the
(KP) problem where f is allowed to be stochastic.
In Figure 7 we illustrate the differences between the two approaches, using a WGAN-GP model
trained on CelebA with a 128 dimensional N(0, 1) latent space. We see that like our matched
interpolation, the stochastic one suggested by the AC has better samples than the linear interpolation.
However, due to the stochastic nature, adjacent data points do not change smoothly. In contrast
our matched interpolation warps the trajectory of the linear one, which ensures that the resulting
trajectory remains smooth.
1https://openreview.net/forum?id=BklCusRct7&noteId=Hkg6swibeN
14
Published as a conference paper at ICLR 2019
raeniL dehctam .tseggus
Jno OV
Figure 7: We illustrate the difference between linear interpolation, our matched interpolation and the
stochastic interpolation suggested by the area chair.
D	Additional experiments
⑥0 O聿辛
©@一“辛辛
Q9字车，
皿亚率≡W
≡≡索再昌
©0 C聿辛
03-▼ Q中
S蓟字卒*
回亚军负与
范建翦Hl *

22 茁

(a) Linear interpolation
(c) Distribution matched
(b) Spherical
(b) Matched vicinity sampling
Figure 9: Vicinity sampling on LSUN dataset (128 × 128) with uniform prior. The sample in the
middle is perturbed in random directions producing the surrounding sample points.
Figure 8: 4-point interpolation between 4 sampled points (corners) from DCGAN trained on icon
dataset using a uniform prior. The same interpolation is shown using linear, SLERP and distribution
matched interpolation.
(a) Vicinity sampling
15
Published as a conference paper at ICLR 2019
(a) Vicinity sampling
(b) Matched vicinity sampling
Figure 10:	Vicinity sampling on LLD icon dataset with uniform prior. The sample in the middle is
perturbed in random directions producing the surrounding sample points.
♦❷③M
Θ<9 ♦0
口。。宓
/«心«©
//ZE®⑥ ™
3 S
篝@您M画
❷独拿9回
QG^≡9
Od
/ME@@ M
京QΞS国
瓣©胎M逊
Θ⅜令®囱
I3G但超 Q
(a) Linear
(b) Spherical
(c) Distribution matched

Figure 11:	Midpoint sampling for linear, SLERP and uniform-matched interpolation when using the
same pairs of sample points on LLD icon dataset with uniform prior.
(a) Linear
(b) Spherical
(c) Distribution matched
Figure 12: Midpoint sampling for linear, SLERP and uniform-matched interpolation when using the
same pairs of sample points on LSUN (64 × 64) with uniform prior.
16
Published as a conference paper at ICLR 2019
(a) Linear interpolation
(b) Spherical linear interpolation
(c) Distribution matched
Figure 13: 4-point interpolation between 4 sampled points (corners) from DCGAN trained on CelebA
with Gaussian prior. The same interpolation is shown using linear, SLERP and distribution matched
interpolation.
(a) Linear	(b) Spherical	(c) Distribution matched
Figure 14: Midpoint sampling for linear, SLERP and uniform-matched interpolation when using the
same pairs of sample points on CelebA with Gaussian prior.
(a) Vicinity sampling
(b) Matched vicinity sampling
Figure 15: Vicinity sampling on CelebA dataset with Gaussian prior. The sample in the middle is
perturbed in random directions producing the surrounding sample points.
17