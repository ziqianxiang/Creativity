Published as a conference paper at ICLR 2019
Caveats for information bottleneck
IN DETERMINISTIC SCENARIOS
Artemy Kolchinsky & Brendan D. Tracey* Steven Van Kuyk
Santa Fe Institute	School of Engineering and Computer Science
Santa Fe, NM 87501, USA	Victoria University of Wellington, New Zealand
{artemyk,tracey.brendan}@gmail.com steven.jvk@gmail.com
Ab stract
Information bottleneck (IB) is a method for extracting information from one ran-
dom variable X that is relevant for predicting another random variable Y . To do
so, IB identifies an intermediate “bottleneck” variable T that has low mutual infor-
mation I(X; T) and high mutual information I(Y ; T). The IB curve characterizes
the set of bottleneck variables that achieve maximal I(Y ; T) for a given I(X; T),
and is typically explored by maximizing the IB Lagrangian, I(Y ; T) - βI(X; T).
In some cases, Y is a deterministic function of X, including many classification
problems in supervised learning where the output class Y is a deterministic func-
tion of the input X . We demonstrate three caveats when using IB in any situation
where Y is a deterministic function of X: (1) the IB curve cannot be recovered by
maximizing the IB Lagrangian for different values of β ; (2) there are “uninterest-
ing” trivial solutions at all points of the IB curve; and (3) for multi-layer classifiers
that achieve low prediction error, different layers cannot exhibit a strict trade-off
between compression and prediction, contrary to a recent proposal. We also show
that when Y is a small perturbation away from being a deterministic function of
X, these three caveats arise in an approximate way. To address problem (1), we
propose a functional that, unlike the IB Lagrangian, can recover the IB curve in
all cases. We demonstrate the three caveats on the MNIST dataset.
1 Introduction
The information bottleneck (IB) method (Tishby et al., 1999) provides a principled way to extract
information that is present in one variable that is relevant for predicting another variable. Given two
random variables X and Y, IB posits a “bottleneck” variable T that obeys the Markov condition
Y - X - T. By the data processing inequality (DPI) (Cover & Thomas, 2012), this Markov con-
dition implies that I(X; T) ≥ I(Y; T), meaning that the bottleneck variable cannot contain more
information about Y than it does about X . In fact, any particular choice of the bottleneck variable
T can be quantified by two terms: the mutual information I(X; T), which reflects how much T
compresses X, and the mutual information I(Y; T), which reflects how well T predicts Y. In IB,
bottleneck variables are chosen to maximize prediction given a constraint on compression (Witsen-
hausen & Wyner,1975; AhlSWede & KOrner,1975; Gilad-Bachrach et al., 2003),
F(r) := max I(Y; T) s.t. I(X; T) ≤ r ,
(1)
where ∆ is the set of random variables T obeying the Markov condition Y - X - T. The values
of F (r ) for different r specify the IB curve. In order to explore the IB curve, one must find optimal
T for different values of r. It is known that the IB curve is concave in r but may not be strictly
concave. This seemingly minor issue of non-strict concavity will play a central role in our analysis.
In practice, the IB curve is almost always explored not via the constrained optimization problem of
Eq. (1), but rather by maximizing the so-called IB Lagrangian,
LeB(T) := I (Y; T) - βI(X; T),
(2)
*Dept of Aeronautics & Astronautics, Massachusetts Institute of Technology, Cambridge, MA 02139, USA
1
Published as a conference paper at ICLR 2019
where β ∈ [0, 1] is a parameter that controls the trade-off between compression and prediction. The
advantage of optimizing LIβB is that it avoids the non-linear constraint in Eq. (1)1.
Several recent papers have drawn connections between IB and supervised learning, in particular
classification using neural networks. In this context, X represents input vectors, Y represents the
output classes, and T represents intermediate representations used by the network architecture, such
as the activity of hidden layer(s) (Tishby & Zaslavsky, 2015). Some of these papers modify neural
network training algorithms so as to optimize the IB Lagrangian (Alemi et al., 2016; Chalk et al.,
2016; Kolchinsky et al., 2017), thereby permitting the use of IB with high-dimensional, continuous-
valued random variables. Some papers have also suggested that by controlling the amount of com-
pression, one can tune desired characteristics of trained models such as generalization error (Shamir
et al., 2010; Tishby & Zaslavsky, 2015; Vera et al., 2018), robustness to adversarial inputs (Alemi
et al., 2016), and detection of out-of-distribution data (Alemi et al., 2018). Other research (Shwartz-
Ziv & Tishby, 2017) has suggested — somewhat controversially (Saxe et al., 2018) — that stochastic
gradient descent (SGD) training dynamics may implicitly favor hidden layer mappings that balances
compression and prediction, with earlier hidden layers favoring prediction over compression and
latter hidden layers favoring compression over prediction. Finally, there is the general notion that
intermediate representations that are optimal in the IB sense correspond to “interesting” or “useful”
compressions of input vectors (Amjad & Geiger, 2018).
There are also numerous application domains of IB beyond supervised learning, including cluster-
ing (Slonim & Tishby, 2000), coding theory and quantization (Cardinal, 2003; Zeitler et al., 2008;
Courtade & Wesel, 2011), and cognitive science (Zaslavsky et al., 2018). In most of these applica-
tions, it is of central interest to explore solutions at different points on the IB curve, for example to
control the number of detected clusters, or to adapt codes to available channel capacity.
In some scenarios, Y may be a deterministic function of X, i.e., Y = f(X) for some single-valued
function f . For example, in many classification problems, it is assumed that any given input belongs
to a single class, which implies a deterministic relationship between X and Y . In this paper, we
demonstrate three caveats for IB that appear whenever Y is a deterministic function of X :
1.	There is no one-to-one mapping between different points on the IB curve and maximizers of the
IB Lagrangian LIβB fordifferentβ, thus the IB curve cannot be explored by maximizing LIβB while
varying β. This occurs because when Y = f(X), the IB curve has a piecewise linear shape and
is therefore not strictly concave. The dependence of the IB Lagrangian on the strict concavity
of F(r) has been previously noted (Gilad-Bachrach et al., 2003; Shwartz-Ziv & Tishby, 2017),
but the implications and pervasiveness of this problem (e.g., in many classification scenarios)
has not been fully recognized. We analyze this issue and propose a solution in the form of an
alternative objective function, which can be used to explore the IB curve even when Y = f(X).
2.	All points on the IB curve contain uninteresting trivial solutions (in particular, stochastic mix-
tures of two very simple solutions). This suggests that IB-optimality is not sufficient for an
intermediate representation to be an interesting or useful compression of input data.
3.	For a neural network with several hidden layers that achieves a low probability of error, the
hidden layers cannot display a strict trade-off between compression and prediction (in particular,
different layers can only differ in the amount of compression, not prediction).
In Appendix B, we show that the above three caveats also apply to the recently proposed determin-
istic IB variant of IB (Strouse & Schwab, 2017), in which the compression term is quantified using
the entropy H(T) rather than the mutual information I(X; T ). In that Appendix, we propose an
alternative objective function that can be used to resolve the first problem for dIB.
We also show, in Appendix C, that our results apply when Y is not exactly a deterministic function
of X, but -close to one. In this case: (1) it is hard to explore the IB curve by optimizing the
IB Lagrangian, because all optimizers will fall within O(- log ) of a single “corner” point on the
information plane; (2) along all points on the IB curve, there are “uninteresting” trivial solutions that
are no more than O(- log ) away from being optimal; (3) different layers ofa neural networks can
trade-off at most O(- log ) amount of prediction.
A recent paper (Amjad & Geiger, 2018) also discusses several difficulties in using IB to analyze
intermediate representations in supervised learning. That paper does not consider the particular
1 Note that optimizing LIβB is still a constrained problem in that p(t|x) must be a valid conditional probability.
However, this constraint is usually easier to handle, e.g., by using an appropriate parameterization.
2
Published as a conference paper at ICLR 2019
issues that arise when Y is a deterministic function of X , and its arguments are complementary
to ours. Shwartz-Ziv & Tishby (2017)[Sec. 2.4] discuss another caveat for IB in deterministic
settings, concerning the relationship between sufficient statistics and the complexity of the input-
output mapping, which is orthogonal to the three caveats analyzed here. Finally, Saxe et al. (2018)
and Amjad & Geiger (2018) observed that when T is continuous-valued and a deterministic function
of a continuous-valued X, I(X; T) can be unbounded, making the application of the IB framework
problematic. We emphasize that the caveats discussed in this paper are unrelated to that problem.
Note that our results are based on analytically-provable properties of the IB curve, i.e., global optima
of Eq. (1), and do not concern practical issues of optimization (which may be important in real-
world scenarios). Our theoretical results are also independent of the practical issue of estimating
MI between neural network layers, an active area of recent research (Belghazi et al., 2018; Goldfeld
et al., 2018; Dai et al., 2018; Gabrie et al., 2018), though our empirical experiments in Section 7
rely on the estimator proposed in (Kolchinsky & Tracey, 2017; Kolchinsky et al., 2017). Finally, our
results are also independent of issues related to the relationship between IB, finite data sampling,
and generalization error (Shamir et al., 2010; Tishby & Zaslavsky, 2015; Vera et al., 2018).
In the next section, we review some of the connections between supervised learning and IB. In
Section 3, we show that when Y = f(X), the IB curve has a piecewise linear (not strictly concave)
shape. In Sections 4, 5 and 6, we discuss the three caveats mentioned above. In Section 7, we
demonstrate the caveats using a neural-network implementation of IB on the MNIST dataset.
2 Supervised Classification and IB
In supervised learning, one is given a training dataset {xi, yi}i=1..N of inputs and outputs. In this
case, the random variables X and Y refer to the inputs and outputs respectively, andp(χ, y) indicates
their joint empirical distribution in the training data. It is usually assumed that the x’s and y’s are
sampled i.i.d. from some “true” distribution w(y|x)w(x). The high-level goal of supervised learning
is to use the dataset to select a particular conditional distribution qθ(y|x) of outputs given inputs
parameterized by θ that is a good approximation of w(y|x). For clarity, We use Y (and y) to indicate
a random variable (and its outcome) corresponding to the predicted outputs. We use X to indicate
the set of outcomes of X, and Y to indicate the set of outcomes of Y and Y. Supervised learning
is called classification When Y takes a finite set of values, and regression When Y is continuous-
valued. Here We focus on classification, Where the set of possible output values can be Written as
Y = {0, 1, . . . , m}. We expect our results to also apply in some regression scenarios (With some
care regarding evaluating MI measures, see Footnote 2), but leave this for future Work.
In practice, many supervised learning architectures use some kind of intermediate representation
to make predictions about the output, such as hidden layers in neural netWorks. In this case, the
random variable T represents the activity of some particular hidden layer in a neural netWork. Let T
be a (possibly stochastic) function of the inputs, as determined by some parameterized conditional
distribution q®(t|x), so that T obeys the Markov condition Y - X - T. The mapping from inputs
to hidden layer activity can be either deterministic, as traditionally done in neural netWorks, or
stochastic, as used in some architectures (Alemi et al., 2016; Kolchinsky et al., 2017; Achille &
Soatto, 2018)2. The mapping from hidden layer activity to predicted outputs is represented by the
parameterized conditional distribution q®(y|t), so the full Markov condition between true outputs,
inputs, hidden layer activity, and predicted outputs is Y - X - T - Y. The overall mapping from
inputs to predicted outputs implemented by a neural network with a hidden layer can be written as
q®(y|x)：
/ q® (y∣t)qθ (t∣χ)dt.
(3)
Note that T does not have to represent a particular hidden layer, but could instead represent the
activity of the neurons in a set of contiguous hidden layers, or in fact any arbitrary set of neurons
that separate inputs from predicted outputs (in the sense of conditional independence, so that Eq. (3)
holds). More generally yet, T could also represent some intermediate representation in a non-neural-
network supervised learning architecture, again as long as Eq. (3) holds.
2If T is continuous-valued and a deterministic function of a continuous-valued X, then one should consider
noisy or quantized mappings from inputs to hidden layers, such that I(X; T) is finite.
3
Published as a conference paper at ICLR 2019
For classification problems, training often involves selecting θ to minimize cross-entropy loss, some-
times while stochastically sampling the activity of hidden layers. When T is the last hidden layer, or
when the mapping from T to the last hidden layer is deterministic, cross-entropy loss can be written
LCE(θ)
-NnX/qθ(t∣χi)iogqθ(y|t)dt = Epθ(y,t)[-logqθ(Y|T)],
i
(4)
where E indicates expectation, pθ(y,t) := N Pi δ(y,y∕qθ(t|xi) is the empirical distribution of
outputs and hidden layer activity, and δ is the Kronecker delta. Eq. (4) can also be written as
,. .. ............................ , ʌ.
Lce (θ) = H(Pθ (Y |T))+ DKL(pθ (Y |T )kqθ (Y |T))	(5)
where H is (conditional) Shannon entropy, DKL is Kullback-Leibler (KL) divergence, andpθ(y|t) is
defined via the definition of pθ(y, t) above. Since KL is non-negative, Lce (θ) is an upper bound on
the conditional entropy H(pθ(Y|T)). During training, one can decrease LCE either by decreasing
the conditional entropy H(pθ(Y|T)), or decreasing the KL term by changing qθ(Y|T) to better
approximate pθ(Y|T). Minimizing LCE thus minimizes an upper bound on H(pθ(Y|T)), which is
equivalent to maximizing a lower bound on Ip§ (Y; T) = H(P(Y)) - H(pθ (Y|T)) (since H(P(Y))
is a constant that doesn’t depend on θ).
We can now make explicit the relationship between supervised learning and IB. In IB, one is given
a joint distribution P(x, y), and then seeks a bottleneck variable T that obeys the Markov condition
Y - X - T and minimizes I(X; T) while maximizing I(Y; T). In supervised learning, one is
given an empirical distribution p(x, y) and defines an intermediate representation T that obeys the
Markov condition Y - X - T; during training, cross-entropy loss is minimized, which is equivalent
to maximizing a lower bound on I(Y ; T) (given assumptions of Eq. (4) hold). To complete the
analogy, one might choose θ so as to also minimize I(X; T), i.e., choose hidden layer mappings that
provide compressed representations of input data (Alemi et al., 2016; Chalk et al., 2016; Kolchinsky
et al., 2017; Achille & Soatto, 2018). In fact, we use such an approach in our experiments on the
MNIST dataset in Section 7.
In many supervised classification problems, there is only one correct class label associated with each
possible input. Formally, this means that given the empirical training dataset distribution p(y|x),
one can write Y = f(X) for some single-valued function f. This relationship between X and Y
may arise because it holds under the “true” distribution w(y|x) from which the training dataset is
sampled, or simply because each input vector x occurs at most once in the training data (as happens
in most real-world classification training datasets). Note that we make no assumptions about the
relationship between X and Y under qθ(y|x), the distribution of predicted outputs given inputs
implemented by the supervised learning architecture, and our analysis holds even if qθ(y∣x) is non-
deterministic (e.g., the softmax function).
It is important to note that not all classification problems are deterministic. The map from X to
Y may be intrinsically noisy or non-deterministic (e.g., if human labelers cannot agree on a class
for some x), or noise may be intentionally added as a regularization technique (e.g., as done in
the label smoothing method (Szegedy et al., 2016)). Moreover, one of the pioneering papers on
the relationship between IB and supervised learning (Shwartz-Ziv & Tishby, 2017) analyzed an
artificially-constructed classification problem in which P(y|x) was explicitly defined to be noisy
(see their Eq. 10). However, we believe that many if not most real-world classification problems do
in fact exhibit a deterministic relation between X and Y. In addition, as we show in Appendix C,
even if the relationship between X and Y is not perfectly deterministic but close to being so, then
the three caveats discussed in this paper still apply in an approximate sense.
3	THE IB CURVE WHEN Y IS A DETERMINISTIC FUNCTION OF X
Consider the random variables X, Y where Y is discrete-valued and a deterministic function of X ,
i.e., Y = f(X). I(Y; T) can be upper bounded as I(Y; T) ≤ I(X; T) by the DPI, and I(Y; T) ≤
H(Y) by basic properties of MI (Cover & Thomas, 2012). To visualize these bounds, as well as
other results of our analysis, we use so-called “information plane” diagrams (Tishby et al., 1999).
The information plane represents various possible bottleneck variables in terms of their compression
(I(X; T), horizontal axis) and prediction (I(Y; T), vertical axis). The two bounds mentioned above
are plotted on an information plane in Fig. 1. In this section, we show that when Y = f(X), the IB
curve saturates both bounds, and is not strictly concave but rather piece-wise linear.
4
Published as a conference paper at ICLR 2019
H(Y)-
O-
—/(y；T)</(x；n
--/(r； n≤H(y)
IB curve for Y = NX)
I(XfT)^^wo
Figure 1: A schematic IB curve. Dashed
line is DPI, dotted line is I (Y ; T ) ≤
H(Y). When Y = f(X), the IB curve
saturates both bounds.

To show that the IB curve saturates the DPI bound
I(Y;T) ≤ I(X; T) forI(X;T) ∈ [0, H(Y)], let Bα be
a Bernoulli random variable that is equal to 1 with proba-
bility α. Then, define a manifold of bottleneck variables
Tα parameterized by α ∈ [0, 1],
Ta= Ba ∙ Y = Ba ∙ f (X) .	(6)
Thus, Tα is equal to Y with probability α, and equal to
0 with probability 1 - α. From Eq. (6), it is clear that
Ta can be written either as a (stochastic) function of X
or a (stochastic) function of Y, thus both Markov condi-
tions Y - X - Ta and X - Y - Ta hold. Applying the
DPI to both Markov conditions implies that I(X; Ta ) =
I(Y; Ta) for any Ta. Note that for α = 1, Ta = Y
and thus I(Y; Ta) = H(Y), while for α = 0, Ta = 0
and thus I(Y; Ta) = 0. Since MI is continuous in probabilities, the manifold of bottleneck vari-
ables Ta sweeps the full range of values hI(X; Ta), I(Y; Ta)i = h0, 0i to hI(X; Ta), I(Y; Ta)i =
hH(Y), H(Y)i as α ranges from 0 to 1, while obeying I(X; Ta) = I(Y; Ta). Thus, the manifold
of Ta bottleneck variables achieves the DPI bound over I(X; T) ∈ [0, H(Y)].
Given its definition in Eq. (1), the IB curve is monotonically increasing. Since hH(Y), H(Y)i is
on the IB curve (e.g., Ta for α = 1), it must be that I(Y; T) ≥ H(Y) when I(X; T) ≥ H(Y) for
optimal T. At the same time, it is always the case that I(Y; T) ≤ H(Y), by basic properties of MI.
Thus, the IB curveisaflatlineatI(Y;T) = H(Y) forI(X;T) ≥ H(Y).
Thus, when Y = f(X), the IB curve is piecewise linear and therefore not strictly concave.3
4	Issue 1: IB Curve cannot be explored using the IB Lagrangian
We now show that when Y = f(X), one cannot explore the IB curve by solving arg maxT ∈∆ LIβB
while varying β, because there is no one-to-one mapping between points on the IB curve and opti-
mizers of LIβB for different β . This issue is diagrammed in Fig. 2, and explained formally below.
Assume Y = f(X). For any bottleneck variable T and all β ∈ [0, 1],4 LIβB is upper bounded by
LeB(T )= I (Y; T) - βI (X ； T) ≤ (1 - β)I (Y; T) ≤ (1 - β)H (Y)	⑺
where the first inequality uses the DPI, and the second I(Y; T) ≤ H(Y).
Now consider the bottleneck variable Tcopy := f(X) = Y (or, equivalently, any one-to-one trans-
formation of Tcopy), which corresponds to Ta for α = 1 in Eq. (6), and is the “corner point” of the
IB curve in Fig. 1. Observe that LIβB(Tcopy) = (1 - β)H(Y), so Tcopy achieves the bound of Eq. (7).
Thus, Tcopy optimizes LIβB for all β ∈ [0, 1], though it represents only a single point on the IB curve.
The above argument shows that a single point on the IB curve optimizes LIβB for many different β .
Conversely, many points on the curve can simultaneously optimize LIβB for a single β. In particular,
for β = 1, LIβB (T) = I(Y; T) - I(X; T) ≤ 0 (the inequality follows from the DPI). Any T that
has I(X; T) = I(Y; T) — such as the manifold of Ta defined in Eq. (6) — achieves the maximum
LIβB (T) = 0 for β = 1, so all points on the non-flat part of IB curve in Fig. 1 simultaneously
maximize LIβB for this β. For β = 0, LIβB(T) = I(Y; T) ≤ H(Y), and this upper bound is achieved
by all T that have I(Y; T) = H(Y). Thus, all solutions on the flat part of the IB curve in Fig. 1
simultaneously maximize LIβB for β = 0. Note that common supervised learning algorithms that
minimize cross-entropy loss can be considered to have β = 0, where there is no explicit benefit to
compression, and their intermediate representations will typically fall into this regime.
The problem is illustrated visually in Fig. 2, which shows two hypothetical IB curves (in thick gray
lines): a not strictly concave (piecewise linear) curve (left), as occurs when Y is a deterministic
3The IB curve may be not strictly concave in other cases as well. A sufficient condition for the IB curve to
be strictly concave is forp(y|x) > 0 for all x, y (Gilad-Bachrach et al., 2003, Lemma 6).
4It is sufficient to consider β ∈ [0, 1] because for β < 0, uncompressed solutions like T = X are maximiz-
ers of LIβB, while for β > 1, LIβB is non-positive and trivial solutions such as T = const are maximizers.
5
Published as a conference paper at ICLR 2019
Figure 2:	Failure of IB Lagrangian.
Thick gray lines shows two possible
IB curves, thin lines are isolines of
LIβB for different β (colors indicate
different β), stars indicate achievable
hI(X; T), I(Y ; T)i that maximize LIβB.
For not strictly concave IB curve, differ-
ent β ∈ (0, 1) only recover a single point.
For strictly concave IB curve, different β
recover different points.
function of X, and a strictly concave curve (right). In both subplots, the colored lines indicate
isolines of the IB Lagrangian. The highest point on the IB curve crossed by a given colored line is
marked by a star, and represents the hI(X; T), I(Y ; T)i values for a T which optimizes LIβB for the
corresponding β. For the piecewise linear IB curve, all β ∈ (0, 1) only recover a single solution
(Tcopy). For the strictly concave IB curve, different β values recover different solutions.
To summarize, when Y = f (X), the IB curve is piecewise linear and cannot be explored by opti-
mizing LIβB while varying β. On the flip side, if Y = f(X) and one’s goal is precisely to find the
corner point hH(Y ), H(Y )i (maximum compression at no prediction loss), then our results suggest
that the IB Lagrangian provides a robust way to do so, being invariant to the particular choice of β.
Moreover, if one does want to recover solutions at different points on the IB curve, and f : X → Y is
fully known, our results show how to do so in a closed-form way (via Tα), without any optimization.
Is there a single procedure that can be used to explore the IB curve in all cases, whether it is strictly
convex or not? In principle, this can be done by solving the constrained optimization of Eq. (1) for
different values of r. In practice, however, solving this constrained optimization problem — even
approximately — is far from a simple task, in part due to the non-linear constraint on I(X; T), and
many off-the-shelf optimization tools cannot handle this kind of problem. It is desirable to have
an unconstrained objective function that can be used to explore any IB curve. For this purpose, we
propose an alternative objective function, which we call the squared-IB functional,
Leq-IB (T ):= I (Y; T) - βI (X ； T )2.	(8)
We show that maximizing Lsβq-IB while varying β recovers the IB curve, whether it is strictly concave
or not. To do so, we first analyze why the IB Lagrangian fails when Y = f(X) (or, more generally,
when the IB curve is piecewise linear). Over the increasing region of the IB curve, the inequality
constraint in Eq. (1) can be replaced by an equality constraint (Witsenhausen & Wyner, 1975, Thm.
2.5), so maximizing LIβB can be written as maxT I(Y; T) - βI(X; T) = maxr F (r) - βr (i.e., the
Legendre transform of -F (r)). The derivative of F(r) - βr is zero when F 0(r) = β, and any point
on the IB curve that has F 0(r) = β will maximize LIβB for that β. When Y = f(X), all points
on the increasing part of the curve have F 0(r) = 1, and will all simultaneously maximize LIβB for
β = 1. More generally, all points on a linear segment of a piecewise linear IB curve will have the
same F 0(r), and will all simultaneously maximize LIβB for the corresponding β.
Using a similar argument as above, we write maxT Lsβq-IB = maxr F (r) - βr2 . The derivative of
F(r) - βr2 is 0 when F 0(r)/(2r) = β. Since F is concave, F 0(r) is decreasing in r, though it
is not strictly decreasing when F is not strictly concave. F 0(r)/(2r), on the other hand, is strictly
decreasing in r in all cases, thus there can be only one r such that F 0(r)/(2r) = β for a given β.
For this reason, for any IB curve, there can be only one point that maximizes Lsβq-IB for a given β.5
Note also that any r that satisfies F0(r) = β also satisfies F0(r)∕(2r) = β∕(2r). Thus, any point that
maximizes LeB for a given β also maximizes Leq-IB under the transformation β → β∕(2 ∙ I(X; T)),
and vice versa. Importantly, unlike for LIβB, there can be non-trivial maximizers of Lsβq-IB for β > 1.
The effect of optimizing Lsβq-IB is illustrated in Fig. 3, which shows two different IB curves (not
strictly concave and strictly concave), isolines of Lsβq-IB for different β, and points on the curves that
maximize Lsβq-IB. For both curves, the maximizers for different β are at different points of the curve.
5For simplicity, we consider only the differentiable points on the IB curve (a more thorough analysis
would look at the superderivatives of F ). Since F is concave, however, it must be differentiable almost ev-
erywhere (Rockafellar, 2015, Thm 25.5).
6
Published as a conference paper at ICLR 2019
Figure 3:	Success of squared-IB func-
tional. Thick gray lines shows two pos-
sible IB curves, thin lines are isolines
of Lsβq-IB for different β (colors indi-
cate different β), stars indicate achievable
hI(X; T), I(Y ; T)i that maximize Lsβq-IB.
For both the not strictly concave IB curve
and the strictly concave curve, different β
values recover different solutions.
Finally, note that the IB curve is the Pareto front of the multi-objective optimization problem,
{max I (Y ; T), minI(X; T)}. Lsβq-IB is one modification of LIβB that allows us to explore a non-
strictly-concave Pareto front. However, it is not the only possible modification, and other alternatives
may be considered. For a full treatment of multi-objective optimization, see Miettinen (1999).
5	Issue 2: All points on IB curve have “uninteresting” solutions
It is often implicitly or explicitly assumed that IB optimal variables provide “useful” or “interesting”
representations of the relevant information in X about Y (see also discussion and proposed criteria
in (Amjad & Geiger, 2018)). While concepts like usefulness and interestingness are subjective, the
intuition can be illustrated using the following example. Consider the ImageNet task (Deng et al.,
2009), which labels images into 1000 classes, such as border collie, golden retriever, coffeepot,
teapot, etc. It is natural to expect that as one explores the IB curve for the ImageNet dataset, one
will identify useful compressed representations of the space of images. Such useful representations
might, for instance, specify hard-clusterings that merge together inputs belonging to perceptually
similar classes, such as border collie and golden retriever (but not border collie and teapot). Here we
show that such intuitions will not generally hold when Y is a deterministic function of X .
Recall the analysis in Section 3, where Eq. (6) defines the manifold of bottleneck variables Tα
parameterized by α ∈ [0, 1]. The manifold of Tα, which spans the entire increasing portion of the
IB curve, represents a mixture of two trivial solutions: a constant mapping to 0, and an exact copy of
Y . Although the bottleneck variables on this manifold are IB-optimal, they do not offer interesting
or useful representations of the input data. The compression offered by Tα arises by “forgetting” the
input with some probability 1 - α, rather than performing any kind of useful hard-clustering, while
the prediction comes from full knowledge of the function mapping inputs to outputs, f : X → Y .
To summarize, when Y is a deterministic function of X, the fact that a variable T is on the IB curve
does not necessarily imply that T is an interesting compressed representation of X. At the same
time, we do not claim that Eq. (6) provides unique solutions. There may also be IB-optimal variables
that do compress X in interesting and useful ways (however such notions may be formalized).
Nonetheless, when Y is a deterministic function of X, for any “interesting” T , there will also be an
“uninteresting” Tα that achieves the same compression I(X; T) and prediction I(Y ; T) values, and
IB does not distinguish between the two. Therefore, identifying useful compressed representations
must generally require the use of quality functions other than just IB.
6	Issue 3: No trade-off among different neural network layers
So far we’ve analyzed IB in terms of a single intermediate representation T (e.g., a single hidden
layer in a neural network). Recent research in machine learning, however, has focused on “deep”
neural networks, with multiple successive hidden layers. What is the relationship between the com-
pression and prediction achieved by these different layers? Recently, Shwartz-Ziv & Tishby (2017)
suggested that due to SGD dynamics, different layers will explore a strict trade-off between com-
pression and prediction: early layers will sacrifice compression (high I(X; T )) for good prediction
(high I(Y ; T)), while latter layers will sacrifice prediction (low I(Y ; T)) for good compression
(low I(X; T)). The authors demonstrated a strict trade-off using an artificial classification dataset,
7
Published as a conference paper at ICLR 2019
in which Y was defined to be a noisy function of X (their Eq. 10 and Fig. 6). As we show, however,
this outcome cannot generally hold when Y is a deterministic function of X .
Recall that we consider IB in terms of the empirical distribution of inputs, hidden layers, and out-
puts given the training data (Section 2). Suppose that a classifier achieves 0 probability of error (i.e.,
classifies every input correctly) on training data. This event, which can only occur when Y is a de-
terministic function of X, is in fact commonly observed in real-world deep neural networks (Zhang
et al., 2017). In such cases, we show that while latter layers may have better compression than
earlier layers, they cannot have worse prediction than earlier layers. Therefore, different layers
can only demonstrate a weak trade-off between compression and prediction. (The same argument
holds if the neural network achieves 0 probability of error on held-out testing data, as long as the
information-theoretic measures are evaluated on the same held-out data distribution.)
Consider a neural network with k hidden layers, where each successive layer is a (possibly stochas-
tic) function of the preceding one, and let T1 , T2 , . . . , Tk indicate the activity of layer 1, 2, . . . , k.
Given the predicted distribution of outputs, qθ(Y = y∣Tk = tk), one can make a “point predic-
tion Y, e.g., by choosing the class With the highest predicted probability, Y := argmaxy qθ (y|Tk).
Given that the true output Y is a function of X , the above architecture obeys the Markov condition
ʌ 〜
Y - X - T1 - T2----------Tk - Y - Y .	(9)
By the DPI, for any i < j We have the inequalities
I (Y; Ti) ≥ I (Y; Tj),	(10)	I (X ； Ti) ≥ I (X; Tj).	(11)
Applying Fano,s inequality (Cover & Thomas, 2012, p. 39) to the chain Y - Tk - Y gives
H(Pe) + Pe log(|Y| -1) ≥ H(Y|Tk),	(12)
where |Y| is the number of output classes, Pe = Pr(Y = Y) is the probability of error, and H(X) =
-x log x - (1 - x) log(1 - x) is the binary entropy function. Given our assumption that Pe = 0,
Eq. (12)impliesthatH(Y|Tk) = 0andthusI(Tk;Y) = H(Y) - H(Y|Tk) = H(Y). Combining
with Eq. (10) and I(Ti; Y) ≤ H(Y) means that I(Ti; Y) = H(Y) for all i = 1, . . . , k.
The above argument neither proves nor disproves the proposal in (Shwartz-Ziv & Tishby, 2017) that
SGD dynamics favor hidden layer mappings that provide compressed representations of the input.
Instead, our point is that for classifiers that achieve 0 prediction error, a strict compression/prediction
trade-off is not possible. Even so, by Eq. (11) it is possible that latter layers have more compression
than earlier layers while achieving the same prediction level (i.e., a weak trade-off). In terms of
Fig. 1, this means that different layers will be on the flat part of the IB curve.
Note that some neural network architectures do not have a simple layer structure, in which each
layer’s activity is a stochastic function of the previous layer’s, but rather allow information to flow
in parallel across different channels (Szegedy et al., 2015) or to skip across some layers (He et al.,
2016). The analysis in this section can still apply to such cases, as long as the different T1, . . . , Tk
are chosen to correspond to groups of neurons that satisfy the Markov condition in Eq. (9).
7	A real-world example: MNIST
We demonstrate the three caveats using the MNIST dataset of hand-written digits. To do so, we use
the “nonlinear IB” method (Kolchinsky et al., 2017), which uses gradient-descent-based training to
minimize cross-entropy loss plus a differentiable non-parametric estimate of I(X; T) (Kolchinsky &
Tracey, 2017). We use this technique to maximize a lower bound on the IB Lagrangian, as explained
in (Kolchinsky et al., 2017), as well as a lower bound on the squared-IB functional.
In our architecture, the bottleneck variable, T ∈ R2 , corresponds to the activity of a hidden layer
with two hidden units. Using a two-dimensional bottleneck variable facilitates easy visual analysis
of its activity. The map from input X to variable T has the form T = a§ (X )+Z, where Z 〜N(0, I)
is noise, and aθ is a deterministic function implemented using three fully-connected layers: two
layers with 800 ReLU units each, and a third layer with two linear units. Note that the stochasticity
in the mapping from X to T makes our mutual information term, I(X; T), well-defined and finite.
The decoding map, q®(y|t), uses a fully-connected layer with 800 ReLU units, followed by an
8
Published as a conference paper at ICLR 2019
squared-IB functional
Figure 4: Theoretical and empirical IB curve found by maximizing the IB Lagrangian (A) and the
squared-IB functional (B). Stars represent solutions recovered for different values of β . Insets show
the bottleneck variable states (i.e., activity of the hidden layer) for different solutions, where colors
represent inputs corresponding to different classes (i.e., different digits). MI values in nats.
★ Empirical results
output layer of 10 softmax units. Results are reported for training data. See Appendix A for more
details and figures, including results on testing data. TensorFlow code can be found at https:
//github.com/artemyk/ibcurve .
Like other practical general-purpose IB methods, “nonlinear IB” is not guaranteed to find globally-
optimal bottleneck variables due to factors like: (a) difficulty of optimizing the non-convex IB ob-
jective; (b) error in estimating I(X; T); (c) limited model class of T (i.e., T must be expressible in
the form of T = aθ(X) + Z); (d) mismatch between actual decoder qθ(Y |T) and optimal decoder
pθ(Y|T) (See Section 2); and (e) StoChastiCity of training due to SGD. Nonetheless, in practice, the
solutions discovered by nonlinear IB were very close to IB-optimal, and are sufficient to demonstrate
the three caveats discussed in the previous sections.
Issue 1: IB Curve cannot be explored using the IB Lagrangian
We first demonstrate that the IB curve cannot be explored by maximizing the IB Lagrangian, but can
be explored by maximizing the squared-IB functional, thus supporting the arguments in Section 4.
Fig. 4 shows the theoretical IB curve for the MNIST dataset, as well as the IB curve empirically
recovered by maximizing these two functionals (see also Fig. A5 for more details).
By optimizing the IB Lagrangian (Fig. 4A), we are only able to find three IB-optimal points:
(1)	Maximum prediction accuracy and no compression, I(Y;T) = H(Y), I(X;T) ≈ 8 nats;
(2)	Maximum compression possible at maximum prediction, I (Y;T) = I (X;T) = H (Y);
(3)	Total compression and zero prediction, I (X ;T) = I (Y;T) = 0.
Note that the identified solutions are all very close to the theoretically-predicted IB-curve. However,
the switch between the 2nd regime (maximal compression possible at maximum prediction) and 3rd
regime (total compression and zero prediction) in practice happens at β ≈ 0.45. This is different
from the theoretical prediction, which states that this switch should occur at β = 1.0. The devia-
tion from the theoretical prediction likely arises due to various practical details of our optimization
procedure, as mentioned above. The switch from the 1st regime (no compression) to the 2nd regime
happened as soon as β > 0, as predicted theoretically.
In contrast to the IB Lagrangian, by optimizing the squared-IB functional (Fig. 4B), we discover
solutions located along different points on the IB curve for different values of β .
Additional insight is provided by visualizing the bottleneck variable T ∈ R2 (i.e., hidden layer
activity) for both experiments. This is shown for different β in the scatter plot insets in Fig. 4.
As expected, the IB Lagrangian experiments displayed three types of bottleneck variables: non-
compressed variables (regime 1), compressed variables where each of the 10 classes is represented
by its own compact cluster (regime 2), and a trivial solution where all activity is collapsed to a
single cluster (regime 3). For the squared-IB functional, a different behavior was observed: As β
increases, multiple classes become clustered together and the total number of clusters decreased.
9
Published as a conference paper at ICLR 2019
Thus, nonlinear IB with the squared-IB functional learned to group X into a varying number of
clusters, in this way exploring the full trade-off between compression and prediction.
Issue 2: All points on IB curve have “uninteresting” solutions
By maximizing the squared-IB functional, we could find (nearly) IB-optimal solutions along dif-
ferent points of the IB curve. Here we show that such solutions do not provide particularly useful
representations of the input data, supporting the arguments made in Section 5.
Note that “stochastic mixture”-type solutions, in particular the family Tα (Eq. (6)), are not in our
model class, since they cannot be expressed in the form T = aθ(X) + Z. Instead, our implementa-
tion favors “hard-clusterings” in which all inputs belonging to a given output class are mapped to a
compact, well-separated cluster in the activation space of the hidden layer (note that inputs belonging
to multiple output classes may be mapped to a single cluster). For instance, Fig. 4B, shows solutions
with 10 clusters (β = 0.05), 6 clusters (β = 0.2), 3 clusters (β = 0.5), and 1 cluster (β = 2.0).
Interestingly, such hard-clusterings are characteristic of optimal solutions for deterministic IB (dIB),
as discussed in Appendix B. At the same time, in our results, the classes are not clustered in any
particularly meaningful or useful way, and clusters contain different combinations of classes for
different solutions. For instance, the solution shown for squared-IB functional with β = 0.5 has 3
clusters, one of which contains the classes {0, 2, 3, 4, 5, 6, 8, 9}, another contains the class 1, and the
last contains the class 7. However, in other runs for the same β value, different clusterings of the
classes arose. Moreover, because the different classes appear with close-to-uniform frequency in the
MNIST dataset, any solution that groups the 10 classes into 3 clusters of size {8, 1, 1} will achieve
similar values of I(X; T), I(Y ; T) as the solution shown for β = 0.5.
Issue 3: No trade-off among different neural network layers
For both types of experiments, runs with β = 0 minimize cross-entropy loss only, without any reg-
ularization term that favors compression. (Such runs are examples of “vanilla” supervised learning,
though with stochasticity in the mapping between the input and the 2-node hidden layer.) These runs
achieved nearly-perfect prediction, so I(Y ; T) ≈ H(Y ). However, as shown in the scatter plots in
Fig. 4, these hidden layer activations fell into spread-out clusters, rather than point-like clusters seen
for β > 0. This shows that hidden layer activity was not compressed, in that it retained information
about X that was irrelevant for predicting the class Y , and fell onto the flat part of the IB curve.
Recall that our neural network architecture has three hidden layers before T , and one hidden layer
after it. Due to the DPI inequalities Eqs. (10) and (11), the earlier hidden layers must have less
compression than T, while the latter hidden layer must have more compression than T. At the same
time, β = 0 runs achieve nearly 0 probability of error on the training dataset (results not shown),
meaning that all layers must achieve I(Y ; T ) ≈ H(Y ), the maximum possible. Thus, for β = 0
runs, as in regular supervised learning, the activity of the all hidden layers is located on the flat part
of the IB curve, demonstrating a lack of a strict trade-off between prediction and compression.
8 Conclusion
The information bottleneck principle has attracted a great deal of attention in various fields, in-
cluding information theory, cognitive science, and machine learning, particularly in the context of
classification using neural networks. In this work, we showed that in any scenario where Y is a deter-
ministic function of X — which includes many classification problems — IB demonstrates behavior
that is qualitatively different from when the mapping from X to Y is stochastic. In particular, in such
cases: (1) the IB curve cannot be recovered by maximizing the IB Lagrangian I(Y ; T) - βI(X; T)
while varying β ; (2) all points on the IB curve contain “uninteresting” representations of inputs; (3)
multi-layer classifiers that achieve zero probability of error cannot have a strict trade-off between
prediction and compression among successive layers, contrary to a recent proposal.
Our results should not be taken to mean that the application of IB to supervised learning is without
merit. First, they do not apply to various non-deterministic classification problems where the output
is stochastic. Second, even for deterministic scenarios, one may still wish to control the amount of
compression during training, e.g., to improve generalization or robustness to adversarial inputs. In
this case, however, our work shows that to achieve varying rates of compression, one should use a
different objective function than the IB Lagrangian.
10
Published as a conference paper at ICLR 2019
Acknowledgments
We would like to thank the Santa Fe Institute for helping to support this research. Artemy Kolchin-
sky was supported by Grant No. FQXi-RFP-1622 from the FQXi foundation and Grant No.
CHE-1648973 from the US National Science Foundation. Brendan D. Tracey was supported by
the AFOSR MURI on multi-information sources of multi-physics systems under Award Number
FA9550-15-1-0038.
References
Alessandro Achille and Stefano Soatto. Information dropout: Learning optimal representations
through noisy computation. IEEE Transactions on Pattern Analysis and Machine Intelligence,
2018.
Rudolf AhlsWede and Jdnos Korner. Source coding with Side Information and a Converse for De-
graded Broadcast Channels. IEEE Transaction on Information Theory, pp. 9, 1975.
Alexander A. Alemi, Ian Fischer, Joshua V. Dillon, and Kevin Murphy. Deep Variational Information
Bottleneck. arXiv preprint arXiv:1612.00410, 2016.
Alexander A Alemi, Ian Fischer, and Joshua V Dillon. Uncertainty in the variational information
bottleneck. arXiv preprint arXiv:1807.00906, 2018.
Rana Ali Amjad and Bernhard C Geiger. Learning representations for neural network-based classi-
fication using the information bottleneck principle. arXiv preprint arXiv:1802.09766, 2018.
Ishmael Belghazi, Sai Rajeswar, Aristide Baratin, R Devon Hjelm, and Aaron Courville. Mine:
mutual information neural estimation. arXiv preprint arXiv:1801.04062, 2018.
Jean Cardinal. Compression of side information. In icme, pp. 569-572. IEEE, 2003.
Matthew Chalk, Olivier Marre, and Gasper Tkacik. Relevant sparse codes with variational informa-
tion bottleneck. In Advances in Neural Information Processing Systems, pp. 1957-1965, 2016.
Thomas A Courtade and Richard D Wesel. Multiterminal source coding with an entropy-based dis-
tortion measure. In Information Theory Proceedings (ISIT), 2011 IEEE International Symposium
on, pp. 2040-2044. IEEE, 2011.
Thomas M. Cover and Joy A. Thomas. Elements of information theory. John Wiley & Sons, 2012.
Bin Dai, Chen Zhu, and David Wipf. Compressing neural networks using the variational information
bottleneck. arXiv preprint arXiv:1802.10399, 2018.
Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale
hierarchical image database. In Computer Vision and Pattern Recognition, 2009. CVPR 2009.
IEEE Conference on, pp. 248-255. Ieee, 2009.
Marylou Gabria Andre Manoel, Clement Luneau, Jean Barbier, Nicolas Macris, Florent Krzakala,
and Lenka Zdeborovd. Entropy and mutual information in models of deep neural networks. arXiv
preprint arXiv:1805.09785, 2018.
Ran Gilad-Bachrach, Amir Navot, and Naftali Tishby. An Information Theoretic Tradeoff be-
tween Complexity and Accuracy. In Gerhard Goos, Juris Hartmanis, Jan van Leeuwen, Bern-
hard Scholkopf, and Manfred K. Warmuth (eds.), Learning Theory and Kernel Machines, volume
2777, pp. 595-609. Springer Berlin Heidelberg, 2003.
Ziv Goldfeld, Ewout van den Berg, Kristjan Greenewald, Igor Melnyk, Nam Nguyen, Brian Kings-
bury, and Yury Polyanskiy. Estimating information flow in neural networks. arXiv preprint
arXiv:1810.05728, 2018.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-
nition. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp.
770-778, 2016.
11
Published as a conference paper at ICLR 2019
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980, 2014.
Artemy Kolchinsky and Brendan D Tracey. Estimating mixture entropy with pairwise distances.
Entropy, 19(7):361, 2017. Corrected version available at https://arxiv.org/abs/1706.
02419.
Artemy Kolchinsky, Brendan D. Tracey, and David H. Wolpert. Nonlinear Information Bottleneck.
arXiv preprint arXiv:1705.02436, May 2017.
Yann LeCun, Leon Bottou, YoshUa Bengio, and Patrick Haffner. Gradient-based learning applied to
document recognition. Proceedings of the IEEE, 86(11):2278-2324,1998.
Kaisa Miettinen. Nonlinear multiobjective optimization, volume 12 of international series in opera-
tions research and management science, 1999.
Ralph Tyrell Rockafellar. Convex analysis. Princeton university press, 2015.
AM Saxe, Y Bansal, J Dapello, M Advani, A Kolchinsky, BD Tracey, and DD Cox. On the informa-
tion bottleneck theory of deep learning. In International Conference on Learning Representations,
2018.
Ohad Shamir, Sivan Sabato, and Naftali Tishby. Learning and generalization with the information
bottleneck. Theoretical Computer Science, 411(29-30):2696-2711, 2010.
Ravid Shwartz-Ziv and Naftali Tishby. Opening the black box of deep neural networks via informa-
tion. arXiv preprint arXiv:1703.00810, 2017.
Noam Slonim and Naftali Tishby. Document clustering using word clusters via the information
bottleneck method. In Proceedings of the 23rd annual international ACM SIGIR conference on
Research and development in information retrieval, pp. 208-215. ACM, 2000.
Dj Strouse and David J. Schwab. The Deterministic Information Bottleneck. Neural Computation,
pp. 1-20, April 2017.
Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott Reed, Dragomir Anguelov, Du-
mitru Erhan, Vincent Vanhoucke, and Andrew Rabinovich. Going deeper with convolutions. In
Proceedings of the IEEE conference on computer vision and pattern recognition, pp. 1-9, 2015.
Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jon Shlens, and Zbigniew Wojna. Rethink-
ing the inception architecture for computer vision. In Proceedings of the IEEE conference on
computer vision and pattern recognition, pp. 2818-2826, 2016.
N. Tishby, F. Pereira, and W. Bialek. The information bottleneck method. In 37th Allerton Conf on
Communication, 1999.
Naftali Tishby and Noga Zaslavsky. Deep learning and the information bottleneck principle. In
Information Theory Workshop (ITW), 2015 IEEE, pp. 1-5. IEEE, 2015.
Matias Vera, Pablo Piantanida, and Leonardo Rey Vega. The role of the information bottleneck in
representation learning. In 2018 IEEE International Symposium on Information Theory (ISIT),
pp. 1580-1584. IEEE, 2018.
H. Witsenhausen and A. Wyner. A conditional entropy bound for a pair of discrete random variables.
IEEE Transactions on Information Theory, 21(5):493-501, 1975.
Noga Zaslavsky, Charles Kemp, Terry Regier, and Naftali Tishby. Efficient compression in color
naming and its evolution. Proceedings of the National Academy of Sciences, 115(31):7937-7942,
2018.
Georg Zeitler, Ralf Koetter, Gerhard Bauch, and Joerg Widmer. Design of network coding func-
tions in multihop relay networks. In Turbo Codes and Related Topics, 2008 5th International
Symposium on, pp. 249-254. Citeseer, 2008.
12
Published as a conference paper at ICLR 2019
Chiyuan Zhang, Samy Bengio, Moritz Hardt, Benjamin Recht, and Oriol Vinyals. Understanding
deep learning requires rethinking generalization. In International Conference on Learning Rep-
resentations, 2017.
Zhengmin Zhang. Estimating Mutual Information Via Kolmogorov Distance. IEEE Transactions
on Information Theory, 53(9):3280-3282, September 2007. ISSN 0018-9448. doi: 10.1109/TIT.
2007.903122. URL http://ieeexplore.ieee.org/document/4294175/.
13
Published as a conference paper at ICLR 2019
A
0.0	2.5	5.0	7.5
/(x；n
B
Figure A5: The top row (A) shows results for the IB Lagrangian, I(Y ; T) - βI(X; T), and the
bottom row (B) shows results for the squared-IB functional, I(Y ; T) - βI(X; T)2. In each row, the
left column shows the information plane (compression I(X; T) versus prediction I(Y ; T)), with the
black dashed line showing the DPI bound I(Y ; T) ≤ I(X; T); the middle column shows prediction
I(Y ; T) as a function of β; the right column shows compression I(X; T) as a function of β. In
all plots, the solid blue line indicates values calculated for the training data set, the dashed green
line indicates values calculated for the held-out testing data set, and the black dotted line indicates
H(Y ) = ln 10. All information-theoretic quantities are plotted in nats.
A Details of MNIST experiments
In Section 7, we demonstrate our results on the MNIST dataset (LeCun et al., 1998). This dataset
contains a training set of 60,000 images and a test set of 10,000 images, each labeled accord-
ing to digit. X ∈ R784 is defined to be a vector of pixels for a single 28 × 28 image, and
Y ∈ {0, 1, ..., 9} is defined to be the class label. Our experiments were carried out using the “non-
linear IB” method (Kolchinsky et al., 2017). I(X; T) was computed using the kernel-based mutual
information upper bound (Kolchinsky & Tracey, 2017; Kolchinsky et al., 2017) and I(Y ; T) was
computed using the lower bound I(Y; T) ≥ H (Y)-6加(工工)
[-log qθ (Y|T)] (SeeEq.(5)).
The neural network was trained using the Adam algorithm (Kingma & Ba, 2014) with a mini-batch
size of 128 and a learning rate of 10-4. Unlike the implementation in (Kolchinsky et al., 2017), the
same mini-batch was used to estimate the gradients of both Iθ (X; T) and the cross-entropy term.
Training was run for 200 epochs. At the beginning of each epoch, the order of training examples was
randomized. To eliminate the effect of the local minima, for each possible value of β, we carried out
20 runs and then selected the run that achieved the best value of the objective function. TensorFlow
code is available at https://github.com/artemyk/ibcurve .
Results for the MNIST dataset are shown in Fig. 4 and Fig. A5, computed for a range of β values.
Fig. A5 shows results for both training and testing datasets, though the main text focuses exclusively
on training data. It can be seen that while the solutions found by IB Lagrangian jump discontinuously
from the “fully clustered” solution (I(X; T) = I(Y; T) = H(Y)) to the trivial solution (I(X; T) =
I (Y; T) = 0), solutions found by the squared-IB functional explore the trade-off in a continuous
manner. See figure captions for details.
14
Published as a conference paper at ICLR 2019
B Deterministic Information B ottleneck
Here we show that our analysis also applies to a recently-proposed (Strouse & Schwab, 2017) variant
ofIB called deterministic IB (dIB). dIB replaces the standard IB compression cost, I(X; T), with the
entropy of the bottleneck variable, H (T ). This can be interpreted as operationalizing compression
costs via a source-coding, rather than a channel-coding, scenario.
Formally, in dIB one is given random variables X and Y . One then identifies bottleneck variables
T that obey the Markov condition Y - X - T and maximize the dIB Lagrangian,
LeIB(T ):= I (Y; T) - βH(T)	(A13)
for β ∈ [0, 1], which can be considered as a relaxation of the constrained optimization problem
FdIB(r) := max I(Y; T) s.t.	H(T) ≤ r .
(A14)
To guarantee that the compression cost is well-defined, T is typically assumed to be discrete-
valued (Strouse & Schwab, 2017). We call FdIB the dIB curve.
Before proceeding, we note that the inequality constraint in the definition of FdIB(r) can be replaced
by an equality constraint,
FdIB(r) := max I(Y; T) s.t. H(T) = r
(A15)
We do so by showing that FdIB (r) is monotonically increasing in r. Consider any T which maxi-
mizes I(Y; T) subject to the constraint H(T) = r, and obeys the Markov condition Y - X - T.
Now imagine some random variable D which obeys the Markov condition Y - X - T - D, and
define a new bottleneck variable T0 := (T, D) (i.e., the joint outcome of T and D). We have
I(Y; T0) =I(Y;T,D) = I(Y; T) + I(Y; D|T) =I(Y;T),
where we’ve used the chain rule for mutual information. At the same time, D can always be chosen
so that H(T0) = H(T, D) = r0 for any r0 ≥ r. Thus, we have shown that there are always random
variables T0 that achieve at least I(Y; T0) = maxT:H (T)=r I(Y; T) and have H(T0) > r, meaning
that FdIB(r) is monotonically increasing in r. This means the inequality constraint in Eq. (A14) can
be replaced with an equality constraint.
As we will see, unlike the standard IB curve, FdIB is not necessarily concave. Since FdIB can be de-
fined using equality constraints, one can rewrite maximization of LdβIB as maxT I(Y; T) -βH(T) =
maxr FdIB (r) - βr, the Legendre-Fenchel transform of -FdIB (r). By properties of the Legendre-
Fenchel transform, the optimizers of LdβIB must lie on the concave envelope of FdIB, which we
indicate as Fffi.
B.1	THE DIB CURVE WHEN Y IS A DETERMINISTIC FUNCTION OF X
As in standard IB, for a discrete-valued Y we have the inequality
I(Y; T) ≤ H(Y).	(A16)
However, instead of the standard IB inequality I(Y; T) ≤ I(X; T), we now employ
I(Y； T) ≤ H(T),	(A17)
which makes use of the assumption that T is discrete-valued. The dIB curve will have the same
bounds as those shown for the standard IB curve (Fig. 1), except that H(T) replaces I(X; T) on the
horizontal axis.
Now consider the case where Y is a deterministic function of X, i.e., Y = f(X). It is easy to check
that Tcopy := f(X) = Y achieves equality for both Eqs. (A16) and (A17), and thus lies on the dIB
curve. Since FdIB is monotonically increasing, the dIB curve is flat and achieves I(Y; T) = H(Y)
for all H(T) ≥ H(Y).
We now consider the increasing part of the curve, H(T) ∈ [0, H(Y)]. We call any T which is
a deterministic function of Y (that is, any T = g(Y) = g(f (X)), where g is any deterministic
function) a “hard-clustering” of Y. Any hard-clustering of Y has H(T) ≤ H(Y). At the same
15
Published as a conference paper at ICLR 2019
time, any hard-clustering of Y has H(T|Y) = 0, thus I(Y;T) = H(T) - H(T|Y) = H(T),
achieving the bound of Eq. (A17). Thus, any hard-clustering of Y lies on the increasing part of the
dIB curve. Note that any hard-clustering of Y will also be a deterministic function of X , thus have
H(T |X) = 0andI(X;T) = H(T) -H(T|X) = H(T) = I(Y; T), and will therefore also fall on
the increasing part of the standard IB curve.
At the same time, the dIB curve cannot be composed en-
tirely of hard-clustering, since — under the assumption
that Y is discrete-valued — there can only be a countable
number of T’s that are hard-clusterings of Y . Thus, the
dIB curve must also contain bottleneck variables that are
not deterministic functions of Y , thus have H(T|Y ) > 0
and I(Y ; T) < H(T), and do not achieve the bound of
Eq. (A17). Geometrically-speaking, when Y is a de-
terministic function of X, the dIB curve must have a
“step-like” structure over H (T) ∈ [0, H(Y )], rather than
increasing smoothly like the standard IB curve. These
results are shown schematically in Fig. A6, where blue
dots indicate hard clusters of Y .
As mentioned, optimizers of LdβIB must lie on the con-
cave envelope of FdiB, indicated by FL Clearly, the
step-like dIB curve that occurs when Y is a deterministic
function of X is not concave, and only hard-clusterings
ofY lie on its concave envelope for H(T) ∈ [0, H(Y )].
In the analysis below, we will generally concern our-
selves with optimizers which are hard-clusterings.
B.2	The three caveats
Figure A6:	A schematic of the
dIB curve. Dashed line is the bound
I(Y;T) ≤ H(T), dotted line is
I(Y ; T) ≤ H(Y ). When Y is a deter-
ministic function ofX, the dIB curve sat-
urate the second bound always. Further-
more, it also saturates the first bound for
any T that is a deterministic function of
Y . The qualitative shape of the resulting
dIB curve is shown as thick gray line.
We now briefly consider the three issues discussed in the main text, in the context of dIB. As usual,
we assume that Y is a deterministic function of X .
Issue 1: dIB Curve cannot be explored using the dIB Lagrangian
In analogy to the analysis done in Section 4, we use the inequalities Eqs. (A16) and (A17) to bound
the dIB Lagrangian as
LeIB(T)= I(Y； T) — βH(T) ≤ (1 — β)I(Y； T) ≤ (1 — β)H(Y) ∙
Now consider the bottleneck variable Tcopy, for which LdβIB(Tcopy) = (1 - β)H(Y). Therefore, Tcopy
(or any one-to-one transformation ofTcopy) will maximize LdβIB for all β ∈ [0, 1]. It is also straight-
forward to show that when β = 0, all bottleneck variables residing on the flat part of the dIB curve
will simultaneously optimize the dIB Lagrangian. Similarly, one can show that all hard-clusterings
of Y, which achieve the bound of Eq. (A17), will simultaneously optimize the dIB Lagrangian for
β = 1. As before, this means that there is no one-to-one map between points on the dIB curve and
optimizers of the dIB Lagrangian for different β .
As in Section 4, we propose to resolve this problem by maximizing an alternative objective function,
which we call the squared-dIB functional,
Lsβq-dIB (T) := I(Y； T) — βH(T)2.	(A18)
We first demonstrate that any optimizer of the dIB Lagrangian must also be an optimizer of the
squared-dIB functional. Consider that maximization of LdβIB can be written as maxT I(Y； T) —
βH(T) = maxr F‰(r) — r. Then, for the point hr, FdIB(r) on the dIB curve to maximize £：1「,
it must have β ∈ ∂rFJ⅛(r), where ∂r indicates the superderivative with regard to r. At the same
time, for the point hr, Fd⅛(r)i to maximize Lβq-dIB, it must satisfy 0 ∈ ∂r [Fd⅛(r) — βr2], or after
rearranging,
2rβ ∈ ∂rFcJIB (r).	(A19)
It is easy to see that if β ∈ ∂rFd⅛(r) is satisfied, then Eq. (A19) is also satisfied under the transfor-
mation β → 2r. Thus, any optimizer of LeIB will also optimize £j_训 given β → 粉.
16
Published as a conference paper at ICLR 2019
0.0 0.2 0.4 0.6 0.8 1.0
β
0.0 0.5 1.0 1.5 2.0 2.5
β
Figure A7: Success of squared-dIB functional. Colored lines indicate manifolds which have the
same value of the dIB Lagrangian (left) and the squared-dIB functional (right) for different values
of β, the stars indicate achievable hH(T), I(Y ; T)i that maximize each function. For the dIB curve
when Y = f(X), different β values recover different solutions only for the squared-dIB functional.
We now show that different hard-clusterings of Y will optimize the squared-dIB functional for dif-
ferent values of β , meaning that we can explore the envelope of the dIB curve by optimizing Lsβq-dIB
while varying β. Formally, we show that for any given β > 0, the point
hH(T ),I(YT )i=d)
(A20)
on the dIB curve will be a unique maximizer of Lsβq-dIB for the correspondingβ. Consider the value
of Lsβq-dIB for any T satisfying Eq. (A20),
Lsβq-dIB (T)
21β-B (2β)	=21β - 41β = 41β
Now consider the value of of £露正 for any other T0 on the dIB curve which has H(T0)=金,
Lβq-dIB(T0)= I (Y; T 0) - BH (T 0)2
=I(Y ；TO)-B ((H(TO)- 21β )2 + HF- ⅛
(a)	1
< (I(Y; T0) - H(T0)) + 4-
4B
(b)	1
≤ 4β = LSq-dIB(T) .
Inequality (a) comes from the assumption that H(T0)= 击,thus (H(T0) - 1∕(2β))2 > 0, while
inequality (b) comes from the bound I(Y; T0) ≤ H(T0). We have shown that Lsβq-dIB (T0) <
Lsβq-dIB (T), meaning that any point on the dIB curve satisfying Eq. (A20) for a given B, assuming it
exists, will be the unique maximizer of Lsβq-dIB. The situation is diagrammed visually in Fig. A7.
Issue 2: All points on dIB curve have “uninteresting” solutions
The family of bottleneck variables Tα defined in Eq. (6), i.e., the mixture of two trivial solutions,
are no longer optimal from the point of view of dIB. However, as mentioned above, any T that is a
hard-clustering of Y achieves the bound of Eq. (A17), and is thus on the dIB curve.
However, given a hard-clustering ofY, there is no reason for the clusters to obey any intuitions about
semantic or perceptual similarity between grouped-together classes. To use the ImageNet example
from Section 5, there is no reason for dIB to prefer a coarse-graining with “natural” groups like
{border collie, golden retriever} and {teapot, coffeepot}, rather than a coarse-graining with groups
like {border collie, teapot} and {golden retriever, coffeepot}, assuming those classes are of the same
17
Published as a conference paper at ICLR 2019
size. Distinguishing between such different clusterings requires some similarity or distortion mea-
sure between classes, which is not provided by the standard information theoretic measures.
Issue 3: No trade-off among different neural network layers
In Section 6, we showed that for a neural network with many hidden layers and zero probability of
error, the activity of the different layers will lie along the flat part of the standard IB curve, where
there is no strict trade-off between compression I(X; T) and prediction I(Y ; T). Note that any
bottleneck variable that lies along the flat part of a standard IB curve will have I(X; T) ≥ H(Y )
and I(Y ; T) = H(Y ). Using the standard information-theoretic inequality H(T) ≥ I(X; T), the
same bottleneck variable must therefore have H(T) ≥ H(Y ) and I(Y ; T) = H(Y ), thus also lying
on the flat part of the dIB curve. Thus, for a neural network with many hidden layers and zero
probability of error, the activity of the different layers will also lie along the flat part of the dIB
curve, and not demonstrate any strict trade-off between compression H(T) and prediction I(Y ; T).
C CAVEATS WHEN Y IS APPROXIMATELY A DETERMINISTIC FUNCTION OF X
In this Appendix, we show that when Y is a small perturbation away from being a deterministic
function of X, the three caveats discussed in the main text persist in an approximate manner.
To derive our results, we first prove several useful theorems. In our proofs, we make central use
of Thm. 17.3.3 from Cover & Thomas (2012), which states that, for two distributions a and b
over the same finite set of outcomes Y, if the '1 distance is bounded as |a - b∣ι ≤ E ≤ 2, then
|H(a) - H(b)| ≤ -Elog 京.We will also use the weaker bound |H(a) - H(b)| ≤ log |Y|, which
is based on the maximum and minimum entropy for any distribution over outcomes Y.
Theorem 1.	Let Z be a random variable (continuous or discrete), and Y a random variable with a
finite set ofoutcomes Y. Consider two joint distributions over Z and Y, PZY and PZY, which have
the same marginal over Z, p(z) = p(z), and obey ∣pzγ 一 PZY 卜 ≤ E ≤ 2. Then,
|H(p(Y|Z)) - H(P(YIZ))I ≤ -Elog -E-3.
|Y |
Proof. For this proof, we will assume that Z is a continuous-valued. In case it is discrete-valued,
the below proof applies after replacing all integrals over the outcomes of Z with summations.
Let ^ := ∣pzγ - PZY∣ι = /Py Ipzy(z,y) - PZY(z,y)∣ dz be the actual '1 distance betweenPZY
and PZY, and note that E ≤ E by assumption. Without loss of generality, We assume that ^ > 0.
Then, define the following probability distribution,
q(Z) := ^P(Z)IPγ∣z=z -PY∣z=z∣ = ^P(Z) X |P(y|z) -P(y|z)| .
y
Note that q(Z) integrates to 1 and is absolutely continuous with respect to P(Z) (P(Z) = 0 implies
q(z) = 0), and that ∣Pγ∣z=z - PY∣z=z ∣ = Epz. When then have
J^追) lθσ∙ ɪ 虱Z)
IH(P(YIZ))-H(P(YIZ))l≤{iogpγ∣ g∣…
if * ≤ 2
otherwise
where the first case follows from (Cover & Thomas, 2012, Thm. 17.3.3), and the second case by
considering minimum vs. maximum possible entropy values.
We now bound the difference in conditional entropies, using [∙] to indicate the Iverson bracket,
H(p(YIZ)) - H(P(YIZ)) = /p(z) [H(P(YIZ))- H(P(YIz))] dZ ≤
P(Z)
Zq(Z) ≤ 1
P(Z) - 2
Ep⅛log 由 pC)dZ + log iyi ∕p(Z)
^哄 > 1] dZ.(a2i)
P(Z)	2
18
Published as a conference paper at ICLR 2019
We upper bound the first integral in Eq.(A21) as
/ P(Z)
< 1](-心 log 二 N
.P(z) - 2」I P(Z) g |Y| P⑺)
dZ
< /P(z)
(-WogE *
I P(Z) g |Y| P(Z))
dz
(A22)
-^ / q(z)
+ log
dZ
-^log TYi - GDKLg(Z)IlP(Z)) < -elog τY∣
|Y| IYI
(A23)
where in Eq. (A22) We dropped the Iverson bracket, in Eq. (A23) We used the definition of KL
divergence, and then its non-negativity.
To upper bound the second integral in Eq. (A21), observe that
1
> 2
P(Z)
二q(Z) 、 1
.p(z)	2.
dZ
∕p(z)	IPy∣z=z - PyIZ=Zl
dx
< /P(z) 2 ∣ Py∣z=z - PyIZ=z I ]∣ Py∣z=z - Py∣z=z ∣ >
< 2/P(z) I Py∣Z=Z -pyIZ=Z I dz < 2l≡
1
2
dz
(A24)
Combining Eqs. (A21), (A23) and (A24) gives
....... .......... € ..
H(p(Y|Z)) - H(P(Y|Z)) < -log — + 2elog |Y|
|Y |
ʌ! €
-€ log ----o
|Y|3
The theorem follows by noting that -€ log ^ is monotonically increasing for ^ < ɪ, and by assump-
tion € < € < 2.	□
In the following theorems, we use the notation Iq (Z; Y) to indicate mutual information between Z
and Y evaluated under somejoint distribution q over Z and Y.
Theorem 2.	Let Z be a random variable (continuous or discrete), and Y a random variable with a
finite set of outcomes. Consider two joint distribution over X × Y, PXY and PXY, which have the
same marginal over Z, p(z) = P(Z), and obey |pzy — PZY |i < € < 1. Then,
|IP(Z ； Y ) -IP(Z ； Y )1 < -2e log iY|2 ∙
Proof. We first bound the 'ι distance between PY and PY,
|Py -py|1 = E |pyIy) -py(y)| = £ I / (Pzy(Z,y -PXY(z,y)) dz
y 'j
<£/ |PZY (Zy) - pZY (z,y)| dz = |PZY - pZY |i
y
By (Cover & Thomas, 2012, Thm. 17.3.3),
|H(P(Y)) - H(P(Y))1 < -€log TYT ∙
|Y |
We now bound the magnitude of the difference of mutual informations as
|Ip(Z; Y) - IA(Z; Y)| = |H(p(Y)) - H(P(Y)) - (H(p(Y|Z)) - H(P(Y|Z)))|
< |H(p(Y)) - H(P(Y))| + |H(p(Y|Z)) - H(P(YIZ))|
€ € €
<-€ log 西-€ log 回=-2e log w,
where in the last line we,ve used Eq. (A25) and Theorem 1.
<
(A25)
□
19
Published as a conference paper at ICLR 2019
Theorem 3.	Let X be a random variable (continuous or discrete), and Y a random variable with a
finite set ofoutcomes Y. Consider two joint distribution over X and Y, PXY and PXY, which have
the same marginal over X, p(x) = p(x) and obey ∣pχγ 一 PXY 卜 ≤ E ≤ 2. Let F(r) and F(r)
indicate the IB curves for PXY and PXY respectively, as defined in Eq. (1). Thenfor any r > 0,
E
IF(r) 一 Fcr)I ≤ -2elog 而.
Proof. For any compression level r > 0, let T and T be optimal bottleneck variables for PXY and
PXY respectively,
I(X;T) ≤r ; Ip(Y;T) = F(r)
~. ~. ~ ,
I(X; T) ≤ r ; Ip(Y; D = F(r).
Let T be defined by the stochastic map q(tIx), and note that PT (t) =	P(x)q(tIx) dx
Pp(x)q(tIx) dx = PT(t). Consider twojoint distributions over T and Y,
PTY(t,y) = /PXY(x,y)q(tIx) dx ； PTY(t,y) = /PXY(x,y)q(tIx) dx,
and observe that
Ipty - Pty Ii = / dt X |/PXY(x,y)q(t∣x) dx ― /PXY(x,y)q(t∣x) dx
≤ Jdt X q q(t∣χ) Ipxy(χ,y) ―PXY(χ,y)∣ dχ
≤ X J Ipxy(x,y) ―Pxy(x,y)I dx ≤ E
y
We now apply Theorem 2 with Z = T and Y = Y to give Ip (Y; T)+2e log ∣γf∣2 ≤ Ip (Y; T). At the
same time, by definition of the IB curve, it must be that Ip(Y; T) ≤ F(r) = Ip(Y; T). Combining
the last two inequalities gives
E
Ip(Y; T) + 2e log -2 ≤ Ip(Y; T).	(A26)
The same argument can be repeated while exchanging the roles of T and T (thus defining the joint
distributions PTY and PTY, etc.). This gives the inequality
E
Ip(Y; T) + 2e log —μ ≤ Ip(Y; T).	(A27)
IY I
The theorem follows by combining Eqs. (A26) and (A27), and using the relations Ip(Y; T) = F(r),
, , ~ , .
Ip(Y; T ) = F(r).	□
It is important to emphasize that having a small `1 distance between the joint distributions PXY and
Pxy does not imply that the conditional distributions PY∣χ=X and pγ∣χ=χ have to be close for all
x. In fact, the conditional distributions can be arbitrarily different for some x, as long as such x do
not have much probability under P(x).
We use these theorems to demonstrate how, if the joint distribution of X and Y is E-close to having
Y be a deterministic function of X, then the three caveats discussed in the main text all apply in an
approximate manner, meaning that can only be avoided up to order O(-e log e).
20
Published as a conference paper at ICLR 2019
C.1 THE THREE CAVEATS WHEN Y IS APPROXIMATELY A DETERMINISTIC FUNCTION OF X
Issue 1: IB curve cannot be explored using the IB Lagrangian
In the main text, we demonstrated that when Y is a deterministic function of X , the single point
hH(Y ), H(Y )i on the information plane optimizes the IB Lagrangian for all β ∈ [0, 1]. We now
consider the case where the joint distribution of X and Y is -close to having Y be a deterministic
function of X. The next theorem shows that in this case, optimizers of the IB Lagrangian must
still be close to hH(Y ), H(Y )i. Formally, for any fixed β ∈ (0, 1), the maximum possible distance
from hH(Y ), H(Y )i scales as O(- log ), though the scaling constant increases as β approaches
0 or 1. This implies that for small , it will difficult to find solutions substantially different from
hH(Y ), H(Y )i, as one would have to search using β very close to 0 or very close to 1.
Theorem 4.	Let X be a random variable (continuous or discrete), and Y a random variable with
a finite Set of outcomes Y. Let PXY be a joint distribution over X and Y under which Y = f (X).
Let PXY be a joint distribution over X and Y which has the same marginal over X as PXY, p(x)=
P(X), and obeys ∣pχγ - pχγ∣ι ≤ E ≤ 1.
Then, for any β ∈ (0, 1) and T which maximizes thePXY IB Lagrangian Ip(Y; T) - βIp(X; T),
-ɪ ≤ Ip(X; T) - H(p(Y)) ≤ Y	(A28)
1-β	β
-ɪ ≤ "T) — H(P(Y)) ≤ 0	(A29)
1-β
where γ:= -3E log E + 5E log |Y|.
Proof. First, note that if ∣Pχγ - PXY11 ≤ e, then |py - PY |i ≤ E and (See proof of Theorem 2)
IH(P(Y)) - H(P(Y))| ≤ -Elog PYi .
|Y |
(A30)
Let F and F indicate the IB curves for PXY and PXY, respectively, defined as in Eq. (I). Because
PXY is deterministic, the IB curve F is the piecewise linear function F(x) = mm{x, H(P(Y))}.
Given Eq. (A30), this means that
E
F(H(P(Y))) ≥ H(P(Y)) + Elog m∙	(A31)
We now to bound F (H (P(Y))) as
E
F (H (P(Y))) ≥ F(H(P(Y )))+2e log 加
|Y|2
≥ H(P(Y)) + 2e log ∣γ∣2 + E log |Y|
= H(P(Y)) - γ,	(A32)
where in the first line we’ve used Theorem 3, and in the second line we used Eq. (A31).
Now consider T, the bottleneck variable that optimizes thePXY IB Lagrangian for some β ∈ (0, 1).
By concavity of the IB curve F, all points on the IB curve must fall below the line with slope β
that passes through the point hIp(X; T), Ip (Y; T)i on the information plane, including the point
hH(P(Y)), F (H (P(Y))i. Formally, we write this condition as
Ip(Y ； T)+ β (H (p(Y)) - Ip(X ； T)) ≥ F (H (p(Y)) ≥ H (p(Y))- Y,	(A39
where the second inequality uses Eq. (A32). Note that by the DPI, Ip(X; T) ≥ Ip(Y; T). Combin-
ing with Eq. (A33) gives
Ip(X； T) + β (H(p(Y)) - Ip(X； T)) ≥ H(p(Y)) - Y
(β - 1)(H(p(Y)) - Ip(X; T)) ≥-γ
H (p(Y )) - Ip(X ； T) ≤ ɪ.	(A34)
1-β
21
Published as a conference paper at ICLR 2019
At the same time, by properties of mutual information, H(p(Y )) ≥ Ip(Y ; T). Combining again
with Eq. (A33) gives
H(P(Y)) + β (H(P(Y))- Ip(X； T)) ≥ H(P(Y))- Y
H(P(Y))- Ip(X； T) ≥ - Y	(A35)
β
The result Eq. (A28) follows immediately from Eq. (A34) and Eq. (A35) and rearranging.
We now derive Eq. (A29). The upper bound arises from basic properties of mutual information,
H(P(Y)) ≥ Ip(Y; T). To derive the lower bound, we rewrite Eq. (A33) as
Ip(Y； T) ≥ H(p(Y)) - Y + β(Ip(X； T) - H(p(Y)))	(A36)
≥ H (P(Y)) - Y - T^Y = H (P(Y)) - ɪ,	(A37)
1-β	1-β
where in the second line We used Eq.(A28) and then combined terms.	□
Issue 2: All points on the IB curve are O(- log ) away from trivial solutions.
In the main text, we show that when Y is a deterministic function of X , there are trivial bottleneck
variables which are optimal for all points of the IB curve. We now consider the case where the
joint distribution of X and Y is -close to having Y be a deterministic function of X . In this case,
by using Theorem 3, it is straightforward to show that there are trivial bottleneck variables that are
O(- log ) away from being optimal along all points on the IB curve.
Theorem 5. Let X be a random variable (continuous or discrete), and Y a random variable with
a finite Set of outcomes Y. Let PXY be a joint distribution over X and Y under which Y = f (X).
Let PXY be a joint distribution over X and Y which has the same marginal over X as PXY, P(X)=
P(x), and obeys ∣Pχγ - PXY∣ι ≤ E ≤ 1.
Then, for any r > 0, there is some value of α ∈ [0, 1] such that the bottleneck variable Tα defined
by the conditional distribution qα(Tα = t|X = x) = αδ(t, f (x)) + (1 - α)δ(t, 0) satisfies
Ip(Tα; X) ≤ r ；	Ip(Ta； Y) ≥ F(r) - Y ,
where Y := -3E log E + 5E log |Y|.
Proof. First, note that if |pxy - PXY11 ≤ e, then |py - PY|i ≤ E and
|H (p(Y )) - H(P(Y ))| ≤ -E log ɪ.	(A38)
|Y |
(See proof of Theorem 2.)
Let F(r) and F(r) indicate the IB curve for PXY and PXY, respectively, as defined in Eq. (1). By
properties of mutual information and Eq. (A38), we have
F(r) ≤ H(P(Y)) ≤ H(P(Y)) - E log 台.	(A39)
|Y |
We now consider two cases.
The first case is when r ≤ H(P(Y)). Recall that because PXY is deterministic, the IB curve F is the
piecewise linear function F(x) = mm{x, H(P(Y))}. Thus, we choose an α so that Ip(X; Ta) = r
and, using Theorem 3,
E
Ip(X； Ta)= F(r) ≥ F(r) + 2Elog 赤 ≥ F(r) - Y
|Y |
Second, when r > H(P(Y)), we choose α = 1 and note that Ip(Ta； X) = H(P(Y)) ≤ r. It
can be verified (see for instance proof of Theorem 3) that the joint distributions PTαY(t, y) =
JPXY(x, y)qa(t∣x) dx and PTaY(t,y) = JPXY(x, y)qa(t∣x) dx satisfy the conditions of The-
orem 2 with Z = Ta , Y = Y. Applying that theorem gives
Ip(Y； Ta) ≥ Ip(Y; Ta) + 2e log ∣YEɪ = H(P(Y)) + 2e log 岛 ≥ H(p(Y)) - Y ,
|Y |	|Y |
where the last inequality uses Eq. (A39).	□
22
Published as a conference paper at ICLR 2019
Issue 3: Prediction/compression trade-off can be most of order O(- log )
In the main text, we consider a neural network consisting of k layers, and show that when Y is
a deterministic function of X, there can be no strict prediction/compression trade-off between the
different layers. We now consider the case where the joint distribution of X and Y is -close to
having Y be a deterministic function of X .
As before, we let X be a (continuous or discrete) random variable, and Y a random variable with a
finite set of outcomes Y. Let PXY be ajoint distribution over X and Y under which Y = f (X). Let
Pxy be ajoint distribution over X and Y which has the same marginal over X as PXY, p(x) = P(x),
and obeys ∣pχγ - Pχγ∣ι ≤ E ≤ 2.
We assume that for each input X, our classifier outputs the prediction Y = f (X) — that is, it
predicts according to the deterministic input-output mapping f . For small E, this is an optimal
prediction strategy in terms of Pe, the probability of error. We write Pe for this classifier as
Pe = /P(X)(I- Py|X=x(f (X)Ix)) dx
2 /P(X) I (1 -Py∣x=χ(f(X)Ix)) + X	PY|x=x(y|x)
y:y6=f (x)
=1 XXP(X) |PY|x=x(y|x) -pγ∣x=x(y|x)| dx
y
=2 |PXY -pxY|i ≤ 2E
We now restate Fano’s inequality (Eq. (12)) for the activity of the last layer, Tk, as
2P	E
H (Y ITk ) ≤ H(Pe) + Pe lθg(∣Y∣- 1) ≤ -2Pe log ^e = -E log 而,
IY I	IY I
(A40)
where the second inequality is found in Zhang (2007).
As before, we note that latter layers may compress input information more than earlier ones, in that
I(Tk; X) may be smaller than I(T1; X). Moreover, when Y is not exactly a deterministic function
of X, then in principle a strict prediction/compression trade-off between different layers is possible
(i.e., I(Ti; Y) can decrease for latter layers). However, if the joint distribution ofX and Y is E-close
to having Y = f(X), then the magnitude this trade-off is limited in size,
I(T1； Y) - I(Tk; Y ) = H (YITk)- H (Y ∣Tι) ≤ -E log 需,
IY I
where we use non-negativity of conditional entropy and Eq. (A40).
23