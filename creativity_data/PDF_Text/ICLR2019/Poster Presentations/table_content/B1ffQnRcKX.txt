Table 1: Numerical Arithmetic DatasetMultilingual arithmetic (Sec. 4.1): The dataset contains arithmetic expressions of k terms wherethe terms are integers ∈ [0, 9] and the operators are ∈ {+, ∙, -}, expressed in five different lan-guages. With 5 choices for the source language and target language, the number of possible prob-lems is (10k)(3k-1)(52). In training, each source language is seen with 4 target languages and eachtarget language is seen with 4 source languages: 20 pairs are seen in training and 5 pairs are held outfor testing. The learner sees 46200/(1.68 ∙ 108) = 2.76 ∙ 10-4 of the training distribution. The entirespace of possible problems in the extrapolation set is (1010)(39)(52) = 4.92 ∙ 1015 out of which Wedraw samples from the 5 held-out language pairs ((101o)(39)(5) = 9.84 ∙ 1014 possible). An inputexpression is a sequence of one-hot vectors of size 13 × 5 + 1 = 66 where the single additionalelement is a STOP token (for training the RNN).
Table 2: Multilingual Arithmetic DatasetSpatially transformed MNIST (Sec. 4.2): The generative process for transforming the standardMNIST dataset to the input the learner observes is described as follows. We first center the 28x28MNIST image in a 42x42 black background. We have three types of transformations to apply to theimage: scale, rotate, and translate. We can scale big or small (by a factor of 0.6 each way). We canrotate left or right (by 45 degrees each direction). We can translate left, right, up, and down, but thedegree to which we translate depends on the size of the object: we translate the digit to the edgeof the image, so smaller digits get translated more than large digits. Large digits are translated by20% of the image width, unscaled digits are translated by 29% of the image width, and small digitsare translated by 38% of the image width. In total there are 2 + 2 + 4 × 3 = 16 individual trans-formation operations used in the generative process. Because some transformation combinationsare commutative, we defined an ordering with which we will apply the generative transformations:scale then rotate then translate. For length-2 compositions of generative transformations, there arescale-small-then-translate (1 × 4), scale-big-then-translate (1 × 4), rotate-then-translate (2 × 4), andscale-then-rotate (2 × 2). We randomly choose 16 of these 20 for training, 2 for validation, 2 for test,as shown in Figure 4 (center). For length-3 compositions of generative transformations, there arescale-small-then-rotate-then-translate (1 × 2 × 4) and scale-big-then-rotate-then-translate (1 × 2 × 4).
