Under review as a conference paper at ICLR 2019
Relational Graph Attention Networks
Anonymous authors
Paper under double-blind review
Abstract
We investigate Relational Graph Attention Networks, a class of models that
extends non-relational graph attention mechanisms to incorporate relational
information, opening up these methods to a wider variety of problems. A
thorough evaluation of these models is performed, and comparisons are made
against established benchmarks. To provide a meaningful comparison, we
retrain Relational Graph Convolutional Networks, the spectral counterpart
of Relational Graph Attention Networks, and evaluate them under the same
conditions. We find that Relational Graph Attention Networks perform
worse than anticipated, although some configurations are marginally benefi-
cial for modelling molecular properties. We provide insights as to why this
may be, and suggest both modifications to evaluation strategies, as well as
directions to investigate for future work.
1	Introduction
Convolutional Neural Networks (CNNs) successfully solve a variety of tasks in Euclidean
grid-like domains, such as image captioning (Donahue et al., 2017) and classifying videos
(Karpathy et al., 2014). CNNs are successful because they assume the data is locally
stationary and compositional (Defferrard et al., 2016; Henaff et al., 2015; Bruna et al., 2013).
However, data often occurs in the form of graphs or manifolds, which are classic examples of
non-Euclidean domains. Specific instances include knowledge bases, molecules, and point
clouds captured by 3D data acquisition devices (Wang et al., 2018). The generalisation
of Neural Networks (NNs) to non-Euclidean domains is termed Geometric Deep Learning
(GDL), and may be roughly divided into spectral, spatial and hybrid approaches (Bronstein
et al., 2017).
Spectral approaches (Defferrard et al., 2016), most notably Graph Convolutional Networks
(GCNs) (Kipf and Welling, 2016), are limited by their basis-dependence. A filter that is
learned with respect to a basis on one domain is not guaranteed to behave similarly when
applied to another basis and domain. Spatial approaches are limited by an absence of shift
invariance and lack of coordinate system (Duvenaud et al., 2015; Atwood and Towsley, 2016;
Monti et al., 2017). Hybrid approaches combine spectral and spatial approaches, trading
their advantages and deficiencies against each-other (Bronstein et al., 2017; Rustamov and
Guibas, 2013; Szlam et al., 2005; Gavish et al., 2010).
A recent approach that began with Graph Attention Networks (GATs), applied attention
mechanisms to graphs, and does not share these limitations (Velickovic et al., 2017; Gong
and Cheng, 2018; Zhang et al., 2018; Monti et al., 2018; Lee et al., 2018).
An alternative direction has been to generalise Recurrent Neural Networks (RNNs) from
sequential message passing on one-dimensional signals, to message passing on graphs (Sperduti
and Starita, 1997; Frasconi et al., 1997; Gori et al., 2005). Incorporating gating mechanisms
led to the development of Gated Graph Neural Networks (GGNNs) (Scarselli et al., 2009;
Allamanis et al., 2017)1.
Relational Graph Convolutional Networks (RGCNs) have been proposed as an extension
of GCNs to the domain of relational graphs (Schlichtkrull et al., 2018). This model has
1We note that GGNNs support relation types. Evaluating these models on the tasks presented
here is necessary to acquire a better understanding neural models of relational data.
1
Under review as a conference paper at ICLR 2019
achieved impressive performance on node classification and link prediction tasks, however,
its mechanisms still resides within spectral methods and shares their deficiencies. The focus
of this work investigate generalisations of RGCN away from its spectral origins.
We take RGCN as a starting point, and investigate a class of models we term Relational
Graph Attention Networks (RGATs), extending attention mechanisms to the relational
graph domain. We consider two variants, Within-Relation Graph Attention (WIRGAT)
and Across-Relation Graph Attention (ARGAT), each with either additive or multiplicative
attention. We perform an extensive hyperparameter search, and evaluate these models on
challenging transductive node classification and inductive graph classification tasks. These
models are compared against established benchmarks, as well as a re-tuned RGCN model.
We show that RGAT performs worse than expected, although some configurations produce
marginal benefits on inductive graph classification tasks. In order to aid further investigation
in this direction, we present the full Cumulative Distribution Functions (CDFs) for the
hyperparameter searches in Appendix D, and statistical hypothesis tests in Appendix E.
We also provide a vectorised, sparse, batched implementation of RGAT and RGCN in
TensorFlow which is compatible with eager execution mode to open up research into these
models to a wider audience2.
2	RGAT architecture
2.1	Relational graph attention layer
We follow the construction of the GAT layer in Velickovic et al. (2017), extending to the
relational setting, using ideas from Schlichtkrull et al. (2018).
Layer input and output The input to the layer is a graph with R = |R | relation types
and N nodes. The ith node is represented by a feature vector hi ∈ RF , and the features of
all nodes are summarised in the feature matrix H = [h1 h2 . . . hN] ∈ RN×F. The output of
the layer is the transformed feature matrix H0 = [h01 h02 . . . h0N] ∈ RN×F0 , where h0i ∈ RF0
is the transformed feature vector of the ith node.
Intermediate representations Different relations convey distinct pieces of information.
The update rule of Schlichtkrull et al. (2018) made this manifest by assigning each node i a
distinct intermediate representation gi(r) ∈ RF0 under relation r
G(r) = HW(r) ∈ RN×F0,	(1)
where G(r) = g1(r) g2(r) . . . gN(r) is the intermediate representation feature matrix under
relation r, and W (r) ∈ RF ×F0 are the learnable parameters of a shared linear transformation.
Logits Following Velickovic et al. (2017); Zhang et al. (2018), we assume the attention
coefficient between two nodes is based only on the features of those nodes up to a neighborhood-
level normalisation. To keep computational complexity linear in R, we assume that, given
linear transformations W (r) , the logits Ei(,rj) of each relation r are independent
Ei(,rj) = a gi(r), gj(r) ,	(2)
and indicate the importance of node j’s intermediate representation to that of node i under
relation r. The attention is masked so that, for node i, coefficients αi(,rj) exist only for j ∈ Ni(r) ,
where Ni(r) denotes the set of neighbor indices of node i under relation r ∈ R .
Queries, keys and values The logits are composed from queries and keys, and specify how
the values, i.e. the intermediate representations gi(r) , will combine to produce the updated
2https://github.com/anonymous/rgat.
2
Under review as a conference paper at ICLR 2019
Figure 1: WIRGAT. The intermediate representations for node i (left red rectangle) are
combined with the intermediate representations for nodes in its neighborhood (blue rectangles)
under each relation r, to form each logit Ei(,rj) . A softmax is taken over each logit matrix
for each relation type to form the attention coefficients αi(,rj) . These attention coefficients
construct a weighted sum over the nodes in the neighborhood for each relation (black
rectangle). These are then aggregated and passed through a nonlinearity to produce the
updated representation for node i (right red rectangle).
node representations h0i (Vaswani et al., 2017). A separate query kernel Q(r) ∈ RF0×D and
key kernel K(r) ∈ RF0 ×D project the intermediate representations gi(r) , into query and key
representations of dimensionality D
qi(r) = gi(r) Q(r) ∈RD,	ki(r) = gi(r) K(r) ∈RD.	(3)
For convenience, the query and key kernels are combined to form the attention kernels
A(r) = Q(r) ㊉ K(r) ∈ R2F ×D. These query and key representations are the building blocks
of the two specific realisations of a in Equation (2) that we now consider.
Additive attention logits The first realisation of a we consider is the relational modifi-
cation of the logit mechanism of Velickovic et al. (2017)
Ei(,rj) = LeakyReLu qi(r) + kj(r) ,	(4)
where the query and key dimensionality are both D = 1, and qi(r) and ki(r) are scalar
flattenings of their one-dimensional vector counterparts qi(r) , ki(r) ∈ R1. We refer to any
instance of RGAT using logits of the form in Equation (4) as additive RGAT.
Multiplicative attention logits The second realisation we consider is the multiplicative
mechanism of Vaswani et al. (2017); Zhang et al. (2018)3
匿=q(r) ∙ kjr),	⑸
where the query and key dimensionality D can be any positive integer. We refer to any
instance of RGAT using logits of the form in Equation (4) as multiplicative RGAT.
It should be noted that there are many types of attention mechanisms beyond vanilla additive
and multiplicative. These include mechanisms leveraging the structure of the dual graph
Monti et al. (2018) as well as learned edge features Gong and Cheng (2018).
The attention coefficients should be comparable across nodes. This can be achieved by
applying softmax appropriately to any logits Ei(,rj) . We investigate two candidates, each
encoding a different prior belief about how the importance of different relations.
3The form of our mechanism is not precisely that of Zhang et al. (2018) as they also consider
residual concatenation and gating mechanism applied across the heads of the attention mechanism.
3
Under review as a conference paper at ICLR 2019
Figure 2: ARGAT. The logits are produced identically to those in Figure 1. A softmax is
taken across all logits independent of relation type to form the attention coefficients αi(,rj) .
The remaining weighting and aggregation steps are the same as those in Figure 1.
WIRGAT The simplest way to take the softmax over the logits Ei(,rj) of Equation (4) or
Equation (5) is to do so independently for each relation r
(r)	(r)	exp (EiJ)	v . V	(r)
αi = = SoftmaX Ei	=,	∀i,r :	αi = = 1.	(6)
i j SI	Pk∈Nir) eXp (Erk))	,W, F
We call the attention in Equation (6) Within-Relation Graph Attention (WIRGAT), and it
is shown in Figure 1. This mechanism encodes the prior that relation importance is a purely
global property of the graph by implementing an independent probability distribution over
nodes in the neighborhood of i for each relation r. Explicitly, for any node i and relation r,
nodes j, k ∈ Ni(r) yield competing attention coefficients αi(,rj) and αi(,rk) with sizes depending
on their corresponding representations gj(r) and gk(r). There is no competition between any
attention coefficients αi(,rj) and αi(,rk)for all nodes i and nodes j ∈ Ni(r), j0 ∈ N(r0) where r0 6= r
irrespective of node representations.
ARGAT An alternative way to take the softmax over the logits Ei(,rj) of Equation (4) or
Equation (5) is across node neighborhoods irrespective of relation r
α(rj = Sofjm ax (Eij) = ~~~i,j) „)、,	∀i : XX a(rj = L ⑺
,	r0∈R	k∈Ni(r0) eXp Ei,k	r∈R j∈Ni(r)
We call the attention in Equation (7) Equation (6) Across-Relation Graph Attention (AR-
GAT), and it is shown in Figure 2. This mechanism encodes the prior that relation
importance is a local property of the graph by implementing a single probability distribution
over the different representations gj(r) for nodes j in the neighborhood of node i. Explicitly,
for any node i and all r, r0 ∈ R , all nodes j ∈ Ni(r) and k ∈ Ni(r ) yield competing attention
coefficients αi(,rj) and αi(,rk) with sizes depending on their corresponding representations gj(r)
and gk(r0) .
(r)
Comparison to RGCN For comparison, the coefficients of RGCN are given by αi,j =
|Ni(r) |-1. This encodes the prior that the intermediate representations of nodes j ∈ Ni(r) to
node i under relation r are equally important.
4
Under review as a conference paper at ICLR 2019
(Node loss)
(RGAT mean〕
(RGATconcat)
(Input-
(Graph loss」
(Dense)
(Dense)
→
(Graph gather)
)
(RGATCOnCat)
T (
(RGAT cOnCat)
→
(Input〕
(a) Node classification.
(b) Multi-task graph classification.
Figure 3: (a) The network architecture used for node classification on AIFB and MUTAG.
This architecture is the same as in Schlichtkrull et al. (2018) except with RGCNs replaced
with RGATs. (b) The network architecture used for multi-task graph classification on Tox21.
This architecture is the same as the GCNs architecture in Altae-Tran et al. (2016) except
with RGCNs replaces with GATs and we do not use graph pooling.
∈ RN×KF0,	(9)
Propagation rule Combining the attention mechanism of either Equation (6) or Equa-
tion (7) with the neighborhood aggregation step of Schlichtkrull et al. (2018) gives
hi = σ(χ X *gjr) ∈ RN×F0,	(8)
r∈R j∈Ni(r)
where σ represents an optional nonlinearity. Similar to VasWani et al. (2017); Velickovic
et al. (2017), we also find that using multiple heads in the attention mechanism can enhance
performance
K /
hi = M σ XX aj g 产
k=1	r∈R j∈Ni(r)
where ㊉ denotes vector concatenation, ɑ(jk) are the normalised attention coefficients under
relation r computed by either WIRGAT or ARGAT, and g(r,k) = hi (WSk))T is the head
specific intermediate representation of node i under relation r.
It might be interesting to consider cases where there are a different number of heads for
different relationship types, as well as when a mixture of ARGAT and WIRGAT produce
the attention coefficients, however, we leave that subject for future investigation and will not
consider it further.
Basis decomposition The number of parameters in the RGAT layer increases linearly
with the number of relations R and heads K , and can lead quickly to overparameterisation. In
RGCNs it was found that decomposing the kernels was beneficial for generalisation, although
it comes at the cost of increased model bias (Schlichtkrull et al., 2018). We follow this
approach, decomposing both the kernels W (r,k) as well as the kernels of attention mechanism
A(r,k) into BV basis matrices V (b) ∈ RF×F0 and BX basis vectors X(b) ∈ R2F0×D
BW	BX
W(r,k) = X c(br,k) V(b),	A(r,k) = X d(br,k) X(b),	(10)
b=1	b=1
where c(br,k), d(br,k) ∈ R are basis coefficients. We consider models using full and decomposed
W and A.
2.2	Node classification
For the transductive task of semi-supervised node classification, we employ a two-layer
RGAT architecture shown in Figure 3a. We use a Rectified Linear Unit (ReLU) activation
after the RGAT concat layer, and a node-wise softmax on the final layer to produce an
estimate for the probability that the ith label is in the class α
P(ClaSSi = α) ≈ τ^i α = softmax(h(2))ɑ∙	(11)
5
Under review as a conference paper at ICLR 2019
Table 1: A summary of the datasets used in our experiments and how they are partitioned.
Datasets	AIFB	MUTAG	ToX21
Task	Transductive	Transductive	Inductive
Nodes	8,285 (1 graph)	23,644 (1 graph)	145,459 (8014 graphs)
Edges	29,043	74,227	151,095
Relations	45	23	4
Labelled	176	340	96,168 (12 per graph)
Classes	4	2	12 (multi-label)
Train nodes	112	218	(6411 graphs)
Validation nodes	28	54	(801 graphs)
Test nodes	28	54	(802 graphs)
We then employ a masked cross-entropy loss L to constrain the network updates to the
subset of nodes Y whose labels are known
nclasses
L = - XX yi,α ln(yi,a),	(12)
i∈Y α=1
where yi is the one-hot representation of the true label for node i.
H0 = GraPhGather(H) = (N ^X hj ㊉
2.3	Graph classification
For inductive graph classification, we employ a two-layer RGAT followed by a graph
gather and dense network architecture shown in Figure 3b. We use ReLU activations
after each RGAT layer and the first dense layer. We use a tanh activation after the
GraphGather : RN ×F → R2F , which is a vector concatenation of the mean of the node
representations with the feature-wise max of the node representations
F
miax hi,f .	(13)
f=1
The final dense layer then produces logits of the size nclasses × ntasks , and we apply a task-wise
SoftmaX to its output to produce an estimate yt,a for the probability that the graph is in
class α for a given task t, analogous to Equation (11). Weighted cross-entropy loss L is then
used to form the learning objective
ntasks nclasses
L(w,y,y)=- Σ Σ Wt,a yt,a ln(yt,α) ,	(14)
t=1 α=1
where wt,α and yt,α are the weights and one-hot true labels for task t and class α respectively.
3	Evaluation
3.1	Datasets
We evaluate the models on transductive and inductive tasks. Following the eXperimental
setup of Schlichtkrull et al. (2018) for the transductive tasks, we evaluate our model on the
Resource Description Framework (RDF) datasets AIFB and MUTAG. We also evaluate our
model for an inductive task on the molecular dataset, ToX21. Details of these data sets are
given in Table 1. For further details on the transductive and inductive datasets, please see
Ristoski and Paulheim (2016) and Wu et al. (2018) respectively.
Transductive baselines We consider as a baseline the recent state-of-the-art results from
Schlichtkrull et al. (2018) obtained with a two-layer RGCN model with 16 hidden units
and basis function decomposition. We also include the same challenging baselines of FEAT
(Paulheim and Fumkranz, 2012), WL (Shervashidze et al., 2011; de Vries and de Rooij, 2015)
and RDF2Vec (Ristoski and Paulheim, 2016). In-depth details of these baselines are given
by Ristoski and Paulheim (2016).
6
Under review as a conference paper at ICLR 2019
Inductive baselines As baselines for Tox21, we compare against the most competitive
methods on Tox21 reported in Wu et al. (2018). Specifically, we compare against deep
multitask networks Ramsundar et al. (2015), deep bypass multitask networks Wu et al.
(2018), Weave Kearnes et al. (2016), and a RGCN model whose relational structure is
determined by the degree of the node to be updated Altae-Tran et al. (2016). Specifically,
up to and including some maximum degree Dmax ,
h0i = σ (Wdeg(i))Thi + X (U deg(i))T hj + bdeg(i) ,	(15)
j∈Ni
where W deg(i) ∈ RF ×F0 is a degree-specific linear transformation for self-connections,
U deg(i) ∈ RF ×F0 is a degree-specific linear transformation for neighbours into their in-
termediate representations gi ∈ RF0 , and bdeg(i) is a degree-specific bias. Any update for
any degree d(i) > Dmax gets assigned to the update for the maximum degree Dmax.
3.2	Experimental setup
Transductive learning For the transductive learning tasks, the architecture discussed in
Section 2.2 was applied. Its hyperparameters were optimised for both AIFB and MUTAG
on their respective training/validation sets defined in Ristoski and Paulheim (2016), using
5-fold cross validation. Using the found hyperparameters, we retrain on the full training
set and report results on the test set across 200 seeds. We employ early stopping on the
validation set during cross-validation to determine the number of epochs we will run on the
final training set. Hyperparameter optimisation details are given in Table 4 of Appendix B.
Inductive learning For the inductive learning tasks, the architecture discussed in Sec-
tion 2.3 was applied. In order to optimise hyperparameters once, ensure no data leakage, but
also provide comparable benchmarks to those presented in Wu et al. (2018), three benchmark
splits were taken from the MolNet benchmarks4 , and graphs belonging to any of the test
sets were isolated. Using the remaining graphs we performed a hyperparameter search using
2 folds of 10-fold cross validation. Using the found hyperparameters, we then retrained
on the three benchmark splits provided with 2 seeds each, giving an unbiased estimate of
model performance. We employ early stopping during both the cross-validation and final
run (the validation set of the inductive task is available for the final benchmark, in contrast
to the transductive tasks) to determine the number of training epochs. Hyperparameter
optimisation details are given in Table 5 of Appendix B.
Constant attention In all experiments, we train with the attention mechanism turned on.
At evaluation time, however, we report results with and without the attention mechanism to
provide insight into whether the attention mechanism helps. ARGAT (WIRGAT) without
the attention is called C-ARGAT (C-WIRGAT).
3.3	Results
3.3.1	Benchmarks and additional analyses
Model means and standard deviations are presented in Table 2. To provide a picture of
characteristic model behaviour, the CDFs for the hyperparameter sweep are presented in
Figure 5 of Appendix D. To draw meaningful conclusions, we compare against our own
implementation of RGCN rather than the results reported in Schlichtkrull et al. (2018); Wu
et al. (2018).
We will occasionally employ a one-sided hypothesis test in order to make concrete statements
about model performance. The details and complete results of this test are presented in
Appendix E. When we refer to significant results this corresponds to a test statistic supporting
our hypothesis with a p-value p ≤ 0.05.
4Retrieved	from http://deepchem.io.s3-website-us-west-1.amazonaws.com/trained_
models/Hyperparameter_MoleculeNetv3.tar.gz.
7
Under review as a conference paper at ICLR 2019
Table 2: (a) Entity classification results accuracy (mean and standard deviation over 10 seeds)
for FEAT (Paulheim and Fumkranz, 2012), WL (ShervashidZe et al., 2011; de Vries and
de Rooij, 2015), RDF2Vec (Ristoski and Paulheim, 2016) and RGCN (Schlichtkrull et al.,
2018), and (mean and standard deviation over 200 seeds) for our implementation of RGCN,
as well as additive and multiplicative attention for (C-)WIRGAT and (C-)WIRGAT (this
work). Test performance is reported on the splits provided in Ristoski and Paulheim (2016).
(b) Graph classification mean Receiver Operating Characteristic (ROC) Area Under the
Curve (AUC) across all 12 tasks (mean and standard deviation over 3 splits) for Multitask
(Ramsundar et al., 2015), Bypass (Wu et al., 2018), Weave (Kearnes et al., 2016), RGCN
(Altae-Tran et al., 2016), and (mean and standard deviation over 3 splits, 2 seeds per split)
our implementation of RGCN, additive and multiplicative attention for (C-)WIRGAT and
(C-)ARGAT (this work). Test performance is reported on the splits provided in Wu et al.
(2018). Best performance in class in boldened, and best performance overall is underlined.
For completeness, we present the training and validation mean ROC-AUCs alongside the
test ROC-AUCs in Appendix A. For a graphical representation of these results, see Figure 4
in Appendix C.
Model	AIFB	MUTAG	Model	Tox21
Feat	55.55 ± 0.00	77.94 ± 0.00	Multitask	0.803 ± 0.012
WL	80.55 ± 0.00	80.88 ± 0.00	Bypass	0.810 ± 0.013
RDF2Vec	88.88 ± 0.00	67.20 ± 1.24	Weave	0.820 ± 0.010
RGCN	95.83 ± 0.62	73.23 ± 0.48	RGCN	0.829 ± 0.006
RGCN (ours)	94.64 ± 2.75	74.15 ± 2.40	RGCN (ours)	0.835 ± 0.008
Additive attention			Additive attention	
C-WIRGAT	96.86 ± 0.94	69.37 ± 2.75	C-WIRGAT	0.832 ± 0.009
WIRGAT	96.83 ± 1.01	69.83 ± 2.74	WIRGAT	0.835 ± 0.006
C-ARGAT	93.05 ± 3.05	63.69 ± 8.41	C-ARGAT	0.829 ± 0.010
ARGAT	94.01 ± 2.76	65.54 ± 6.25	ARGAT	0.835 ± 0.006
Multiplicative attention			Multiplicative attention	
C-WIRGAT	93.71 ± 3.33	69.57 ± 3.70	C-WIRGAT	0.811 ± 0.008
WIRGAT	92.92 ± 3.75	69.60 ± 3.75	WIRGAT	0.838 ± 0.007
C-ARGAT	95.89 ± 1.93	74.38 ± 3.78	C-ARGAT	0.802 ± 0.007
ARGAT	96.19 ± 1.70	73.17 ± 3.41	ARGAT	0.837 ± 0.007
(a) Transductive	(b) Inductive
3.3.2	Transductive learning
In Table 2a we evaluate RGAT on MUTAG and AIFB. With additive attention, WIRGAT
outperforms ARGAT, consistent with Schlichtkrull et al. (2018). Interestingly, when
employing multiplicative attention, the converse appears true. For node classification tasks
on RDF data, this indicates that the importance of a particular relation type does not vary
much (if at all) across the graph unless one employs a multiplicative comparison5 between
node representations.
AIFB On AIFB, the best to worst performing models are: 1) additive WIRGAT 2)
multiplicative ARGAT 3) RGCN 4) additive ARGAT, and 5) multiplicative WIRGAT,
with each comparison being significant.
When comparing against their constant attention counterparts, the significant differences
observed were for additive and multiplicative ARGAT, where attention gives a relative mean
performance improvements of 1.03% and 0.31% respectively, and multiplicative WIRGAT,
where attention gives a relative mean performance drop of 0.84%.
5Or potentially other comparisons beyond additive or constant, i.e. RGCN.
8
Under review as a conference paper at ICLR 2019
Although we present state-of-the art result on AIFB with additive WIRGAT, since its
performance with and without attention are not significantly different, it is unlikely that this
is due to the attention mechanism itself, at least at inference time. Over the hyperparameter
space, additive WIRGAT and RGCN are comparable in performance (see Figure 5a in
Appendix D), leading us to conclude that the result is more likely attributable to finding a
better hyperparameter point for additive WIRGAT during the search.
MUTAG On MUTAG, the best to worst performing models are: 1) RGCN 2) multiplica-
tive ARGAT 3) additive WIRGAT tied with multiplicative WIRGAT, and 4) additive
ARGAT, with each comparison being significant.
When comparing against their constant attention counterparts, the significant differences
observed were for additive WIRGAT and ARGAT, where attention gives relative mean
performance improvements of 0.66% and 2.90% respectively, and multiplicative ARGAT,
where attention gives a relative mean performance drop of 1.63%.
We note that RGCN consistently outperforms RGAT on MUTAG, contrary to what might
be expected (Schlichtkrull et al., 2018). The result is surprising given that RGCN lies within
the parameter space of RGAT (where the attention kernel is zero), a configuration we check
through evaluating C-WIRGAT. In our experiments we have observed that both RGCN
and RGAT can memorise the MUTAG training set with 100% accuracy without difficulty
(this is not the case for AIFB). The performance gap between RGCN and RGAT could
then be explained by the following:
-	During training, the RGAT layer uses its attention mechanism to solve the learning
objective. Once the ob jective is solved, the model is not encouraged by the loss
function to seek a point in the parameter space that would also behave well when
attention is set to a normalising constant within neighbourhoods (i.e. the parameter
space point that would be found by RGCN).
-	The RDF tasks are transductive, meaning that a basis-dependent spectral approach
is sufficient to solve them. As RGCN already memorises the MUTAG training set,
a model more complex6 than RGCN, for example RGAT, that can also memorise
the training set is unlikely to generalise as well, although this is a hotly debated
topic - see e.g. Zhang et al. (2016).
We employed a suite of regularisation techniques to get RGAT to generalise on MUTAG,
including L2-norm penalties, dropout in multiple places, batch normalisation, parameter
reduction and early stopping, however, no evaluated harshly regularised points for RGAT
generalise well on MUTAG.
Our final observation is that the attention mechanism presented in Section 2.1 relies on node
features. The node features for the above tasks are learned from scratch (the input feature
matrix is a one-hot node index) as part of the task. It is possible that in this semi-supervised
setup, there is insufficient signal in the data to learn both the input node embeddings as
well as a meaningful attention mechanism to act upon them.
3.3.3	Inductive learning
In Table 2b we evaluate RGAT on Tox21. The number of samples is lower for these evaluations
than for the transductive tasks, and so fewer model comparisons will be accompanied with a
reasonable significance, although there are still some conclusions we can draw.
Through a thorough hyperparameter search, and incorporating various regularisation tech-
niques, we obtained the relative mean performance of 0.72% for RGCN compared to the
result reported in Wu et al. (2018), providing a much stronger baseline.
Both additive attention models match the performance of RGCN, whereas multiplicative
WIRGAT and ARGAT marginally outperform RGCN, although this is not significant
(p = 0.24 and p = 0.41 respectively).
6Measured in terms of Minimum Description Length (MDL), for example.
9
Under review as a conference paper at ICLR 2019
When comparing against their constant attention counterparts, significant differences observed
were for multiplicative WIRGAT and ARGAT, where attention gives a relative mean
performance improvements of 3.33% and 4.36% respectively. We do not observe any significant
gains coming from additive attention when compared to their constant counterparts.
4	Conclusion
We have investigated a class of models we call Relational Graph Attention Networks (RGATs).
These models act upon graph structures, inducing a masked self-attention that takes account
of local relational structure as well as node features. This allows both nodes and their
properties under specific relations to be dynamically assigned an importance for different
nodes in the graph, and opens up graph attention mechanisms to a wider variety of problems.
We evaluted two specific attention mechanisms, Within-Relation Graph Attention
(WIRGAT) and Across-Relation Graph Attention (ARGAT), under both an additive
and multiplicative logit construction, and compared them to their equivalently evaluated
spectral counterpart Relational Graph Convolutional Networks (RGCNs).
We find RGATs perform competitively or poorly on established baselines. This behavior
appears strongly task-dependent. Specifically, relational inductive tasks such as graph
classification benefit from multiplicative ARGAT, whereas transductive relational tasks,
such as knowledge base completion, at least in the absence of node features, are better
tackled using spectral methods like RGCNs or other graph feature extraction methods like
Weisfeiler-Lehman (WL) graph kernels.
In general we have found that WIRGAT should be paired with an additive logit mechanism,
and fares marginally better than ARGAT on transductive tasks, whereas ARGAT should
be paired with a multiplicative logit mechanism, and fares marginally better on inductive
tasks.
We have found no cases where choosing any variation of RGAT is guaranteed to significantly
outperform RGCN, although we have found that in cases where RGCN can memorise the
training set, we are confident that RGAT will not perform as well as RGCN. Consequently,
we suggest that before attempting to train RGAT, a good first test is to inspect the training
set performance of RGCN.
Through our thorough evaluation and presentation of the behaviours and limitations of
these models, insights can be derived that will enable the discovery of more powerful model
architectures that act upon relational structures. Observing that model variance on all of
the tasks presented here is high, any future work developing and expanding these methods
must choose larger, more challenging datasets. In addition, a comparison between the
generalisation of spectral methods, like those presented here, and generalisations of Recurrent
Neural Networks (RNNs), like Gated Graph Sequence Networks, is a necessary ingredient
for determining the most promising future direction for these models.
References
Allamanis, M., M. Brockschmidt, and M. Khademi
2017. Learning to represent programs with graphs. CoRR, abs/1711.00740.
Altae-Tran, H., B. Ramsundar, A. S. Pappu, and V. Pande
2016. Low Data Drug Discovery with One-shot Learning. Pp. 1-20.
Atwood, J. and D. Towsley
2016.	Diffusion-Convolutional Neural Networks. (Nips).
Bergstra, J., D. Yamins, and D. Cox
2013. Making a science of model search: Hyperparameter optimization in hundreds of
dimensions for vision architectures. In Proceedings of the 30th International Conference
on Machine Learning, S. Dasgupta and D. McAllester, eds., volume 28 of Proceedings of
Machine Learning Research, Pp. 115-123, Atlanta, Georgia, USA. PMLR.
10
Under review as a conference paper at ICLR 2019
Bronstein, M. M., J. Bruna, Y. Lecun, A. Szlam, and P. Vandergheynst
2017.	Geometric Deep Learning: Going beyond Euclidean data. IEEE Signal Processing
Magazine, 34(4):18-42.
Bruna, J., W. Zaremba, A. Szlam, and Y. LeCun
2013. Spectral Networks and Locally Connected Networks on Graphs. Pp. 1-14.
de Vries, G. K. D. and S. de Rooij
2015.	Substructure counting graph kernels for machine learning from rdf data. Web
Semant., 35(P2):71-84.
Defferrard, M., X. Bresson, and P. Vandergheynst
2016.	Convolutional Neural Networks on Graphs with Fast Localized Spectral Filtering.
(Nips).
Donahue, J., L. A. Hendricks, M. Rohrbach, S. Venugopalan, S. Guadarrama, K. Saenko,
and T. Darrell
2017.	Long-Term Recurrent Convolutional Networks for Visual Recognition and Description.
IEEE Transactions on Pattern Analysis and Machine Intelligence, 39(4):677-691.
Duvenaud, D., D. Maclaurin, J. Aguilera-Iparraguirre, R. Gomez-Bombarelli, T. Hirzel,
A. Aspuru-Guzik, and R. P. Adams
2015. Convolutional Networks on Graphs for Learning Molecular Fingerprints.
Frasconi, P., V. D. S. Marta, M. Gori, V. Roma, and A. Sperduti
1997. On the efficient classification of data structures by neural networks.
Gavish, M., B. Nadler, R. R. Coifman, and N. Haven
2010. Multiscale Wavelets on Trees, Graphs and High Dimensional Data: Theory and
Applications to Semi-Supervised Learning. Icml, (i):367-374.
Gong, L. and Q. Cheng
2018.	Adaptive Edge Features Guided Graph Attention Networks.
Gori, M., M. Maggini, and L. Sarti
2005. Exact and approximate graph matching using random walks. IEEE Transactions on
Pattern Analysis and Machine Intelligence, 27(7):1100-1111.
Henaff, M., J. Bruna, and Y. LeCun
2015.	Deep Convolutional Networks on Graph-Structured Data. Pp. 1-10.
Karpathy, A., G. Toderici, S. Shetty, T. Leung, R. Sukthankar, and F. F. Li
2014. Large-scale video classification with convolutional neural networks. Proc. IEEE
CVPR.
Kearnes, S., K. McCloskey, M. Berndl, V. Pande, and P. Riley
2016.	Molecular graph convolutions: moving beyond fingerprints. J. Comput. Aided. Mol.
Des., 30(8):595-608.
Kingma, D. P. and J. Ba
2014. Adam: A method for stochastic optimization. CoRR, abs/1412.6980.
Kipf, T. N. and M. Welling
2016.	Semi-Supervised Classification with Graph Convolutional Networks.
Lee, J. B., R. A. Rossi, S. Kim, N. K. Ahmed, and E. Koh
2018. Attention Models in Graphs: A Survey. 0(1).
Mann, H. B. and D. R. Whitney
1947. On a test of whether one of two random variables is stochastically larger than the
other. Ann. Math. Statist., 18(1):50-60.
11
Under review as a conference paper at ICLR 2019
Monti, F., D. Boscaini, J. Masci, E. Rodola, J. Svoboda, and M. M. Bronstein
2017.	Geometric deep learning on graphs and manifolds using mixture model CNNs. In
Proceedings - 30th IEEE Conference on Computer Vision and Pattern Recognition, CVPR
2017, volume 2017-January, Pp. 5425-5434.
Monti, F., O. Shchur, A. Bojchevski, O. Litany, S. Gunnemann, and M. M. Bronstein
2018. Dual-Primal Graph Convolutional Networks. Pp. 1-11.
Paulheim, H. and J. Fumkranz
2012.	Unsupervised generation of data mining features from linked open data. In Proc.
2nd Int. Conf. Web Intell. Min. Semant. - WIMS ’12, P. 1, New York, New York, USA.
ACM Press.
Ramsundar, B., S. Kearnes, P. Riley, D. Webster, D. Konerding, and V. Pande
2015.	Massively Multitask Networks for Drug Discovery. (Icml).
Ristoski, P. and H. Paulheim
2016.	RDF2Vec: RDF graph embeddings for data mining. In Lecture Notes in Computer
Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in
Bioinformatics), volume 9981 LNCS, Pp. 498-514.
Rustamov, R. and L. Guibas
2013. Wavelets on graphs via deep learning. Nips, Pp. 1-9.
Scarselli, F., M. Gori, A. C. Tsoi, M. Hagenbuchner, and G. Monfardini
2009. The graph neural network model. Trans. Neur. Netw., 20(1):61-80.
Schlichtkrull, M., T. N. Kipf, P. Bloem, R. van den Berg, I. Titov, and M. Welling
2018. Modeling Relational Data with Graph Convolutional Networks. In Lecture Notes in
Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture
Notes in Bioinformatics), volume 10843 LNCS, Pp. 593-607.
Shervashidze, N., P. Schweitzer, E. Jan van Leeuwen, K. Mehlhorn, and K. Borgwardt
2011. Weisfeiler-Lehman Graph Kernels. J. Mach. Learn. Res., 12:2539-2561.
Sperduti, A. and A. Starita
1997. Supervised neural networks for the classification of structures. IEEE transactions
on neural networks / a publication of the IEEE Neural Networks Council, 8:714-35.
Szlam, A. D., M. Maggioni, R. R. Coifman, and J. C. BremerJr.
2005. Diffusion-driven multiscale analysis on manifolds and graphs: top-down and bottom-
up constructions. P. 59141D.
Vaswani, A., N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, L. Kaiser, and
I. Polosukhin
2017.	Attention is all you need. CoRR, abs/1706.03762.
Velickovic, P., G. Cucurull, A. Casanova, A. Romero, P. Lio, and Y. Bengio
2017.	Graph Attention Networks.
Wang, Y., Y. Sun, Z. Liu, S. E. Sarma, M. M. Bronstein, and J. M. Solomon
2018.	Dynamic Graph CNN for Learning on Point Clouds. Technical report.
Wu, Z., B. Ramsundar, E. N. Feinberg, J. Gomes, C. Geniesse, A. S. Pappu, K. Leswing,
and V. Pande
2018. MoleculeNet: A benchmark for molecular machine learning. Chemical Science,
9(2):513-530.
Zhang, C., S. Bengio, M. Hardt, B. Recht, and O. Vinyals
2016. Understanding deep learning requires rethinking generalization.	CoRR,
abs/1611.03530.
Zhang, J., X. Shi, J. Xie, H. Ma, I. King, and D.-Y. Yeung
2018. GaAN: Gated Attention Networks for Learning on Large and Spatiotemporal Graphs.
12
Under review as a conference paper at ICLR 2019
A Tox21 Results
For completeness, we present the training, validation and test set performance of our models
in addition to those in Wu et al. (2018) in Table 3.
Table 3: Graph classification mean Area Under the Curve (AUC) across all 12 tasks
(mean and standard deviation over 3 splits) for Multitask (Ramsundar et al., 2015), Bypass
(Wu et al., 2018), Weave (Kearnes et al., 2016), RGCN (Altae-Tran et al., 2016), our
implementation of RGCN, additive and multiplicative attention versions of WIRGAT and
ARGAT (this work). Training, validation and test performance is reported on the splits
provided in Wu et al. (2018). Best performance in class in boldened, and best performance
overall is underlined.
Model	Training	Validation	Test
Multitask	0.884 ± 0.001	0.795 ± 0.017	0.803 ± 0.012
Bypass	0.938 ± 0.001	0.800 ± 0.008	0.810 ± 0.013
Weave	0.875 ± 0.004	0.828 ± 0.008	0.820 ± 0.010
RGCN	0.905 ± 0.004	0.825 ± 0.013	0.829 ± 0.006
RGCN (ours)	0.883 ± 0.010	0.845 ± 0.003	0.835 ± 0.008
Additive attention
C-WIRGAT	0.897 ± 0.022	0.842 ± 0.004	0.832 ± 0.009
WIRGAT	0.902 ± 0.024	0.845 ± 0.005	0.835 ± 0.006
C-ARGAT	0.884 ± 0.012	0.848 ± 0.003	0.829 ± 0.010
ARGAT	0.896 ± 0.016	0.851 ± 0.004	0.835 ± 0.006
Multiplicative attention
C-WIRGAT WIRGAT	0.859 ± 0.016 0.904 ± 0.022	0.830 ± 0.007 0.852 ± 0.002	0.811 ± 0.008 0.838 ± 0.007
C-ARGAT	0.838 ± 0.007	0.816 ± 0.007	0.802 ± 0.007
ARGAT	0.802 ± 0.007	0.846 ± 0.003	0.837 ± 0.007
13
Under review as a conference paper at ICLR 2019
B Hyperparameters
We perform hyperparameter optimisation using hyperopt Bergstra et al. (2013) with priors
for the transductive tasks specified in Table 4 and priors for the inductive tasks specified in
Table 5. In all experiments we use the Adam optimiser (Kingma and Ba, 2014).
Table 4: Priors on the hyperparameter search space for the transductive tasks. When
multihead attention is used, the number of units per head is appropriately reduced in order
to keep the total number of output units of an RGAT layer independent of the number of
heads.
Hyperparameter	Prior
Graph kernel units Heads Feature dropout rate Edge dropout W basis size Graph layer 1 W L2 coef Graph layer 2 W L2 coef A basis size Graph layer 1 A L2 coef Graph layer 2 A L2 coef Learning rate Use bias Use batch normalisation	MultiplesOfFour(4, 20) OneOf(1, 2, 4) Uniform(0.0, 0.8) Uniform(0.0, 0.8) OneOf(Full, 5, 10, 20, 30) LogUniform(10-6, 10-1) LogUniform(10-6, 10-1) OneOf(Full, 5, 10, 20, 30) LogUniform(10-6, 10-1) LogUniform(10-6, 10-1) LogUniform(10-5, 10-1) OneOf(Yes, No) OneOf(Yes, No)
Table 5: Priors on the hyperparameter for the inductive task. The batch size was held at 64,
and no bases decomposition is used. When multihead attention is used, the number of units
per head is appropriately reduced in order to keep the total number of output units of an
RGAT layer independent of the number of heads.
Hyperparameter	Prior
Graph kernel units
Dense units
Heads
Feature dropout
Edge dropout
W L2 coef (1)
W L2 coef (2)
a L2 coef (1)
a L2 coef (2)
Learning rate
Use bias
Use batch normalisation
MultiplesOfEight(32, 128)
MultiplesOfEight(32, 128)
OneOf(1, 2, 4, 8)
Uniform(0.0, 0.8)
Uniform(0.0, 0.8)
LogUniform(10-6, 10-1)
LogUniform(10-6, 10-1)
LogUniform(10-6, 10-1)
LogUniform(10-6, 10-1)
LogUniform(10-5, 10-1)
OneOf(Yes, No)
OneOf(Yes, No)
14
Under review as a conference paper at ICLR 2019
C Charts
To aid interpretability of the results presented in Table 2 we present a chart representation
in Figure 4.
0 5 0 5 0 5
0 9 9 8 8 7
Baselines Additive Attention HMuItipIicative Attention
H<⅛<
π<⅛<lo
H4oX-M
H<⅛-5lu
π<⅛<
π<⅛<lu
.LVDH-M
π<⅛≡lu
?no) Noo—X
NuoIX
*>zLL.ax
_lM
Baselines Additive Attention HMuItipIicative Attention
(b) MUTAG
(a) AIFB
Baselines Additive Attention HMuItipIicative Attention
UmOH UBəw
(c) TOX21
Figure 4: (a) and (b): Blue Baseline entity classification accuracy (mean and standard
deviation over 10 seeds) for FEAT (Paulheim and Fumkranz, 2012), WL (ShervashidZe
et al., 2011; de Vries and de Rooij, 2015), RDF2Vec (Ristoski and Paulheim, 2016) and
RGCN (Schlichtkrull et al., 2018), and (mean and standard deviation over 200 runs) for
our implementation of RGCN. Yellow Entity classification accuracy (mean and standard
deviation over 200 seeds) for additive attention (this work). Red Entity classification accuracy
(mean and standard deviation over 200 seeds) for multiplicative attention (this work). Test
performance is reported on the splits provided in Ristoski and Paulheim (2016). (c): Blue
Baseline graph classification mean Receiver Operating Characteristic (ROC) AUC across
all 12 tasks (mean and standard deviation over 3 splits) for Multitask (Ramsundar et al.,
2015), Bypass (Wu et al., 2018), Weave (Kearnes et al., 2016), RGCN (Altae-Tran et al.,
2016), and (mean and standard deviation over 3 splits, 2 seeds per split) our implementation
of RGCN. Yellow Additive attention graph classification mean ROC-AUC (mean and
standard deviation over 200 seeds) across all 12 tasks (this work). Red Multiplicative
attention graph classification mean ROC-AUC (mean and standard deviation over 200
seeds) across all 12 tasks (this work). All raw values are given in Table 2.
15
Under review as a conference paper at ICLR 2019
D Cumulative distribution functions
To aid further insight into our results, we present the Cumulative Distribution Functions
(CDFs) for each model on each task in Figure 4. In this context, we treat the performance
metric of interest during the hyperparameter search as the empirical distribution of some
random variable X. We then define its CDF FX (x) in the standard way
FX (x) = P (X ≤ x),
(16)
where P (X ≤ x) is the probability that X takes on a value less than or equal to x. The
CDF allows one to gauge whether any given architecture typically performs better than
another across the whole space, rather than comparison of the tuned hyperparameters, which
in some cases may be outliers in terms of generic behavior for that architecture.
Uo一甘UnL UOAnqNa--Q①>4-nEnυ
---RGCN
1 2
厂0
1± 1±
MultiPlcative WIRGAT
Additive WIRGAT
Multipl Cative ARGAT
Additive ARGAT
Uo一甘UnL uo4nqNtt-α ①>4-nEnυ
O
W
1 2
厂0
1± 1±
0.55	0.60	0.65	0.70	0.75
Test Accuracy
0.4	0.5	0.6	0.7	0.8	0.9
Test Accuracy
(c) TOX21
Figure 5: CDFs for all models on a) AIFB, b) MUTAG and c) TOX21. Green lines
correspond to our implementation of RGCN, blue lines correspond to ARGAT, and orange
lines correspond to WIRGAT. Solid lines correspond to additive attention (and RGCN),
whereas dashed lines correspond to multiplicative attention. A lower CDF value is better in
the sense that a greater proportion of models of achieve a higher value of that metric.
O
W
AIFB Additive and multiplicative ARGAT perform poorly for most areas of the hyperpa-
rameter space, whereas RGCN and multiplicative WIRGAT perform comparably across
the entire hyperparameter space.
16
Under review as a conference paper at ICLR 2019
MUTAG Interestingly, the models that have a greater amount of hyperparameter space
covering poor performance (i.e. RGCN, multiplicative and additive WIRGAT) are also the
models which also have a greater amount of hyperparameter space covering good performance.
In other words, on the MUTAG, the ARGAT prior resulted in a model whose test set
performance was relatively insensitive to hyperparameter choice when compared against
the other candidates. Given that the ARGAT model was the most flexible of the models
evaluated, and that it was able to memorise the training set, this suggests that the task
contained insufficient information for the model to learn its attention mechanism. Given
that WIRGAT was able to at least partially learn to its attention mechanism suggests that
WIRGAT is less data hungry than ARGAT.
Tox21 The multiplicative attention models fare poorly on the majority of the hyperpa-
rameter space compared to the other models. There is a slice of the hyperparameter space
where the multiplicative attention models outperform the other models, however, indicating
that although they are difficult to train, it may be worth spending time hyperoptimising
them if you need the best performing model on a relational inductive task. The additive
attention models and RGCN perform comparably across the entirety of the hyperparameter
space and generally perform better than the multiplicative methods except for the very small
region of hyperparameter space mentioned above.
17
Under review as a conference paper at ICLR 2019
E Significance testing
In order to determine if any of our model comparisons are significant, we employ the one-sided
Mann-Whitney U test Mann and Whitney (1947) as we are interested in the direction of
movement (i.e. performance) and do not want to make any parametric assumptions about
model response. For two populations X and Y :
•	The null hypothesis H0 is that the two populations are equal, and
•	The alternative hypothesis H1 is that the probability of an observation from
population X exceeding an observation from population Y is larger than the
probability of an observation from Y exceeding an observation from X; i.e.,
H1 : P(X > Y) > P(Y > X).
We treat the empirical distributions of Model A as samples from population X and the
empirical distributions of Model B as samples from population Y . This allows us a window
into whether, given a task, whether which is the better model out of a pair of models. Results
on AIFB, MUTAG and TOX21 are given in Figure 6, Figure 7 and Figure 8 respectively.
1.0
1
1
V aPOW
Multiplicative ARGAT -
4.2e-ll
3.9e-29
2e-19
5e-20 6.5e-27 0.051
0.5
Multiplicative C-ARGAT -
2e-07
le-23
2e-14
3.7e-15 9.1e-22
0.95
0.8
MultipIicativeWIRGAT-
LUtI
0.99
Multiplicative C-WIRGAT -
0.0047
0.012
Additive ARGAT
0.99
0.0006
0.0021
ι
1
1
1

1
1
1

1
1
1
1


1
1
1
1


1
1
Additive C-ARGAT -
ι ι
1
1
1
0.4
1
1

AdditiveWIRGAT-
2e-23
8.9e-44 2.6e-34 2.7e-34 5.7e-41
2.5e-09 8.1e-06
0.2
Additive C-WIRGAT -
4.5e-24
LUtl
1.5e-44 4.3e-35 4.8e-35 le-41
9.1e-10 3.7e-06
RGCN (ours)
0.5
1	5.5e-08 0.0086 0.0024 4e-07
0.0
.LVg-M E七PPV
H<ss∂ E七pp4
(S.Ino) Nuα
H<s< Wppv
H<s<α,>4e-y-d≡nw
H<s<.0 EIS-dnw
H<ss E:IS-士nw
vME4ednw



1
1
1
H<s<.0 Wppv
Model B
Figure 6:	The p-values for Mann-Whitney U test with alternative hypothesis H1 of Model A
outperforming Model B on AIFB.
18
Under review as a conference paper at ICLR 2019
Multiplicative ARGAT -
1	3.9e-28 3.3e-22 1.9e-62
Multiplicative C-ARGAT
0.44
MultipIicativeWIRGAT-
Multiplicative C-WIRGAT -
Model A
Additive ARGAT -
Additive C-ARGAT -
AdditiveWIRGAT-
0.21
0.74
6.4e-53 2.3e-20 3.7e-20
9.5e-36 1.6e-30 7e-64
4.7e-56 2.7e-28 4.8e-28
76
4.2e-29
1.2e-20
0.19
8.4e-29
2.2e-20
1
1
0.019
1
0.041
1
0.98
1
1
1
1
4.1e-41 5.3e-30
1
1
1
1
0.26	0.24
0.81	0.79
0.96	2e-34 4e-24
Additive C-WIRGAT
0.5
RGCN (ours)
0.5
1.3e-44 l.le-39 1.3e-66 3.7e-59 5.5e-35 5.5e-34
0.56
l.le-05
□ .00081
0.6
0.4
0.2
1.0
EEJa-M E七PPV
4DM,u E七 pp4
no) Nuα
UV9-M,□ E4e=d≡nw
UVEjaV E4e=d≡nw
H<ωtf<.0 E怖dnw
UV9M>4ednw
0.0
1
1
1
1
1
UVEJaV,ɔ ,史 PPV
UVEJaV E七PPV
Model B
Figure 7:	The p-values for Mann-Whitney U test with alternative hypothesis H1 of Model A
outperforming Model B on MUTAG.
19
Under review as a conference paper at ICLR 2019
Multiplicative ARGAT - 0.41
0.24
0.37
0.086
0.41
0.0025
0.66
0.0025
Model A
Multiplicative C-ARGAT -]
MultipIicativeWIRGAT- 0.24
0.29
0.24
Multiplicative C-WIRGAT -
1
1
1
1
1
0.95
0.11
0.033
0.0025
Additive ARGAT - 0.34
0.24
0.47
0.53
0.0025
0.064
0.086
0.0025
0.81
0.0025
0.76
0.89
0.94
0.0065
0.98
0.53
0.53
0.66
Additive C-ARGAT -
0.94
0.0025
0.94
AdditiveWIRGAT- 0.59
0.24
0.53
0.15
0.59
0.0025
0.76
0.0025
0.68
Additive C-WIRGAT -
0.87
0.53
0.81
0.29
0.81
0.0041
0.91
0.0025
0.81
RGCN (ours)- 0.53
0.17
0.47
0.086
0.71
0.0025
0.81
0.0025
0.66
(S.Ino) Nuoα
h-vo-MdE七 PPV
H<ωtf< E4e=d≡nw
H<ωtf<.0 E怖dnw
H3tfs E:IS-士nw
vM*4ednw
-0.6
-0.4
.LV9α-M E七PPV
H<ωtf<.0 E七PPV
H<ωtf<ω∙5七 PPV
1
Model B
Figure 8:	The p-values for Mann-Whitney U test with alternative hypothesis H1 of Model A
outperforming Model B on TOX21.
20