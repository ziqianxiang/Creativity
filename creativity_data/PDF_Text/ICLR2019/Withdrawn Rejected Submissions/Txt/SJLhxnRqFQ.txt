Under review as a conference paper at ICLR 2019
Adversarially Learned Mixture Model
Anonymous authors
Paper under double-blind review
Ab stract
The Adversarially Learned Mixture Model (AMM) is a generative model for
unsupervised or semi-supervised data clustering. The AMM is the first adversarially
optimized method to model the conditional dependence between inferred continuous
and categorical latent variables. Experiments on the MNIST and SVHN datasets
show that the AMM allows for semantic separation of complex data when little
or no labeled data is available. The AMM achieves unsupervised clustering error
rates of 3.32% and 20.4% on the MNIST and SVHN datasets, respectively. A
semi-supervised extension of the AMM achieves a classification error rate of 5.60%
on the SVHN dataset.
1	Introduction
Semi-supervised or unsupervised representation learning enables the utilization of all available data
when tackling problems where there are little or no labeled examples. This is a common scenario in many
applications of machine learning, such as medical image analysis, where itis reinforced by the expense
of obtaining expert labeled examples. Moreover, machine-learned representations are more likely to
be used for subsequent tasks if they are interpretable and meaningful. Deep generative modelling is
a suitable approach to this problem, as derived models have been shown capable of learning from both
labeled and unlabeled examples, embedding data according to desired latent variable distributions, and
producing realistic data examples generated from samples of those latent variables.
The Generative Adversarial Network (GAN) has recently emerged as a powerful framework for
modeling complex data distributions without having to approximate intractable likelihoods. In the
formulation by Goodfellow et al. (2014), a GAN consists of two networks: a generator G that is
trained to yield unique samples from the data distribution, and a discriminator D that is trained to
distinguish between generated and true data samples.
Dumoulin et al. (2016) and Donahue et al. (2017) have proposed the ALI and BiGAN models that add
an inference process, i.e., the ability to map data samples to points in the latent space, to the GAN
framework. A second generator for inference, or encoder, is added to the original GAN generator and
the discriminator is adapted for the two-dimensional space of data inputs and latent representations.
A variant of the resulting model is also introduced by Dumoulin et al. (2016) for conditional data
generation, but still assumes that the class of the data is always observed, as inference of categorical
variables is not included.
Adversarial approaches for the inference of both continuous and categorical variables are actively
researched. Chen et al. (2016) introduce a hybrid adversarial method that is capable of modelling both
continuous and categorical latent variables for unsupervised clustering and feature disentanglement.
Another hybrid adversarial method is introduced by Makhzani et al. (2016) where adversarial objectives
on continuous and categorical latent variables are optimized for unlabeled examples and categorical
cross entropy on categorical variables is optimized for labeled examples. Li et al. (2017) and Deng et al.
(2017) point toward fully adversarial semi-supervised classification using inferred categorical variables
by introducing a “three player” adversarial game, but stop short by adding auxiliary “collaborative”
objectives. In each of these methods, it is assumed that categorical and continuous latent variables
are independently distributed. This independence assumption results in discontinuities in the latent
space between categories, which removes the notion of inter-categorical proximity.
Another notable family of generative models, Variational Autoencoders (VAEs), maximize the
posterior distribution of latent representations given the data instead of using an adversarial approach.
As VAEs integrate inference, semi-supervised classification can be performed by conditioning the
1
Under review as a conference paper at ICLR 2019
continuous latent variable of the VAE on the class label (Kingma et al., 2014; Dilokthanakul et al.,
2016; Maal0e et al., 2017). However, the quality of VAE results depend on the expressiveness of the
inference distribution and every time the assumptions about the inference or data distributions are
changed a new objective function needs to be derived. In this way, variational optimization is not as
versatile as adversarial training.
We present the Adversarially Learned Mixture Model (AMM). The AMM is, to our knowledge, the
first generative model inferring both continuous and categorical latent variables to perform either
unsupervised or semi-supervised clustering of data using a single adversarial objective. This is enabled,
in part, by explicitly modelling the dependence between continuous and categorical latent variables,
which eliminates discontinuities between categories in the latent space. Semi-supervised clustering
and classification is enabled by a simplified formulation of the “three player game”, presented by Li
et al. (2017). In this paper we show that the AMM achieves an unsupervised clustering error rate of
3.32% and 20.4% on the MNIST (LeCun & Cortes, 2010) and SVHN datasets (Netzer et al., 2011)
respectively, and that a semi-supervised extension, SAMM, achieves a classification error rate of
5.60% on the SVHN dataset . To support the reproducibility of the methodology and experiments
presented, a public version of the code will be made available.
2	Method
2.1	Preliminaries
The ALI and BiGAN models are trained by matching two joint distributions of images x ∈ RD and
their latent code z ∈ RL. The two distributions to be matched are the inference distribution q(x,z)
and the synthesis distribution p(x,z), where,
q(x,z) = q(x)q(z | x),	(1)
p(x,z) = p(z)p(x | z).	(2)
Samples of q(x) are drawn from the training data and samples of p(z) are drawn from a prior distri-
bution, usually N (0,1). Samples from q(z | x) and p(x | z) are drawn from neural networks that are
optimized during training. Dumoulin et al. (2016) show that sampling from q(z | X)= N (μ(x),σ2 (x)I)
is possible by employing the reparametrization trick (Kingma & Welling, 2013), i.e. computing
Z = μ(x)+σ(x)Θ e, E 〜N (0,I),	(3)
where is element wise vector multiplication.
A conditional variant of ALI has also been explored by Dumoulin et al. (2016) where an observed
class-conditional categorical variable y has been introduced. The joint factorization of each distribution
to be matched are:
q(x,y,z) = q(x,y)q(z | y,x),	(4)
p(x,y,z) = p(y)p(z)p(x | y,z).	(5)
Samples of q(x,y) are drawn from the data. Samples ofp(z) are drawn from a continuous prior on z,
and samples of p(y) are drawn from a categorical prior on y, both of which are marginally independent.
Samples from q(z | y,x) and p(x | y,z) are drawn from neural networks that are optimized during
training.
In the following sections we present graphical models for q(x,y,z) and p(x,y,z) that build off of
conditional ALI. Where conditional ALI requires the full observation of categorical variables, the
models we present will account for both unobserved and partially observed categorical variables. We
finally show how they can be optimized using a single adversarial objective.
2.2	Adversarially Learned Mixture Model
The AMM is an adversarial generative model for deep unsupervised clustering of data. Figure 1
presents an overview of the model.
Like conditional ALI, a categorical variable is introduced to model the labels. However, the
unsupervised setting now requires a different factorization of the inference distribution in order to
2
Under review as a conference paper at ICLR 2019
Figure 1: Overview of the unsupervised (AMM) and semi-supervised (SAMM) model with the
first option (Equation (6)) for the inference distribution. AMM consists of two generators, encoder
Gz(x,Gy(x)) and decoder Gx(y,z), and a discriminator D(x,y,z). SAMM includes an additional
generator for labeled data, Gz(x,y).
enable inference of the categorical variable y, namely:
q1(x,y,z) = q(x)q(y | x)q(z | x,y),	(6)
or
q2(x,y,z) = q(x)q(z | x)q(y | x,z).	(7)
Samples ofq(x) are drawn from the training data, and samples from q(y | x), q(z | x,y) or q(z | x),
q(y | x,z) are generated by neural networks. The reparametrization trick is not directly applicable
to discrete variables and multiple methodologies have been introduced to approximate categorical
samples (Jang et al., 2016; Maddison et al., 2017). We follow Kendall & Gal (2017) and sample from
q(y | x) by computing
hy (x) = μy (x)+σy (x)Θ e, e ~N (0,I),	(8)
y(x) = softmax(hy(x)).	(9)
Then, we can sample from q(z | x,y) by computing
z(x,hy (X))= μz(x,hy (x))+σz(x,hy (x))Θ e, e ~N (0,I).	(10)
A similar sampling strategy can be used to sample from q(y | x,z) in (7).
The factorization of the synthesis distribution p(x,y,z) also differs from conditional ALI:
p(x,y,z) = p(y)p(z | y)p(x | y,z).	(11)
The product p(y)p(z | y) can be conveniently given by a mixture model. Samples from p(y) are
drawn from a multinomial prior, and samples from p(z | y) are drawn from a continuous prior, for
example, N(μy=k,1). Samples fromp(z | y) can alternatively be generated by a neural network by
again employing the reparameterization trick. Namely,
z(y)= μ(y)+σ(y)Θ e, e~N(0,I).	(12)
This approach effectively learns the parameters of N(μy=k,σy=k).
2.2	. 1 Adversarial Value Function
We follow Dumoulin et al. (2016) and define the value function that describes the unsupervised game
between the discriminator D and the generator G as:
mGinmDaxV (D,G) =Eq(x) [log(D(x,Gy(x),Gz(x,Gy(x))))]
+Ep(y,z)[log(1-D(Gx(y,Gz(y)),y,Gz(y)))]
=	q(x)q(y | x)q(z | x,y)log(D(x,y,z))dxdydz
+	p(y)p(z|y)p(x|y,z)log(1-D(x,y,z))dxdydz.
(13)
3
Under review as a conference paper at ICLR 2019
There are four generators in total: two for the encoder Gy (x) and Gz(x,Gy(x)), which map the data
samples to the latent space; and two for the decoder Gz(y) and Gx(y,Gz(y)), which map samples
from the prior to the input space. Gz(y) can either be a learned function, orbe specified by a known
prior (see Algorithm 1 for a detailed description of the optimization procedure).
Algorithm 1 AMM training procedure using distributions (6) and (11).
θGy(x),θGz(x,Gy(x)),θGz(y),θGx(y,Gz(y)),θD
while not done do
x(1),...,x(M) ~q(x)
y ⑴,...,y(M) ~ p(y)
ZCj) ~P(Z | y = y(j)), j = 1,...,M
XCj) ~p(x | y = y(j),z = z(j)), j = 1,...,M
y(i) ~q(y | x = x(i)), i = 1,...,M
Z(i) ~ q(z | x = x(i) ,y = y(i)), i = 1,...,M
Pqi) - D(x(i) ,y(i),Z(i)),	i = 1,...,M
Ppj) - D(X ⑺,y ⑺,zj) j = 1,...,M
LD <—焉 pM=ιiog(ρqi))-
LGχ(y,Gz (y)) = LGzCy)-—
LGy (x) = LGz (x,Gy (x)) <
Θd — Θd — VθD LD
BGx (y,Gz (y)) <- BGx (y ,Gz (y )) ReGx (y,Gz (y)) £Gx
θGz (y) J θGz (y)- -VBGz (y) LGz (y)
θGy (x) J θGy (x) - vθGy (x) LGy (x)
θGz (x,Gy (x)) J θGz(x,Gy(x)) — VθGz (x,Gy (x)) LGz
1 ♦ 、 ♦
I-M I-Ml-M
. Initialize AMM parameters
. Sample from data and priors
. Sample from conditionals
. Compute discriminator predictions
)	. Compute discriminator losses
. Compute x generator losses
. Compute y and z generator loss
. Update discriminator parameters
(y,Gz(y))	. Update generator parameters
(x,Gy (x))
2.3	Semi-Supervised Adversarially Learned Mixture Model
The Semi-Supervised Adversarially Learned Mixture Model (SAMM) is an adversarial generative
model for supervised or semi-supervised clustering and classification of data. The objective for
training SAMM involves two adversarial games to match pairs of joint distributions. The supervised
game matches inference distribution (4) to synthesis distribution (11) and is described by the following
value function:
mGinmDaxV (D,G)=Eq(x,y)[log(D(x,y,Gz(x,y)))]+Ep(y,z)[log(1—D(Gx(y,Gz(y)),y,Gz(y)))]
=	q(x,y)q(Z | x,y)log(D(x,y,Z))dxdydZ
+	p(y)p(Z | y)p(x | y,Z)log(1—D(x,y,Z))dxdydZ.
(14)
The unsupervised game matches either of the inference distributions, (6) or (7) to the synthesis
distribution (11). In the case using distribution (6), the unsupervised game is described by (13).
The generator for semi-supervised learning has three components: encoders Gz (x, Gy (x)) and
Gz(x,y) map the labeled and unlabeled data samples, respectively, to the latent space, and a decoder
Gx (y, Gz(y)) maps samples of y and Z to the input space, where Gz(Z) can either be a learned
function or be specified by a prior. The encoder for labeled data again consists of two generators
(Figure 1). A detailed description of the training algorithm is given in algorithm 2 of the appendix.
In practice, optimization of each of the generators and the discriminator can be done simultaneously
for both the unsupervised and semi-supervised updates.
3	Related Works
Unsupervised clustering using hybrid adversarial approaches are proposed by both Makhzani et al.
(2016) (AAE) and Chen et al. (2016) (InfoGAN). For AAE, the synthesis generator is optimized
4
Under review as a conference paper at ICLR 2019
by minimizing the per-example L2 loss between between input data {xi} and their reconstructions
{X i = Gxi (Gy (xi),Gz (xi))}, while the inference generator is optimized using both the L2 objective
and an adversarial objective. For InfoGAN, the inference generator is optimized by maximizing the
per-example Mutual Information (MI) between samples of categorical latent variables {yi 〜p(y)}
and continuous latent variables {zi 〜p(z)} and their “reconstructions” {{y i ,Zi} = Gy,z (Gx(yi,zi)},
while the synthesis generator is optimized using both the MI objective and an adversarial objective.
Recent approaches using self-supervision with data augmentation have also been proposed for
unsupervised discrete representation learning by Kilinc & Uysal (2018) (LALNets) and Hu et al.
(2017) (IMSAT). In IMSAT, a network is trained to maximize the Mutual Information between input
data and a discrete representation, similar to InfoGAN. In addition to this objective, the network is
regularized by encouraging the representation of original, unperturbed data {xi} tobe close to that of
transformed data {T (xi)}. In the LALNets framework, a network is trained to distinguish unperturbed
data and augmented data, and then k-means clustering is performed on the latent space representation
of the unperturbed data to obtain cluster labels.
On the other end of the generative spectrum, Dilokthanakul et al. (2016) and Jiang et al. (2017)
offer non-adversarial, VAE-based approaches for unsupervised clustering. Like in the AMM, the
combination of priors for the latent variables y and z is modeled as a Gaussian mixture model, where
y corresponds to the mixture components.
Multiple adversarial methodologies have been proposed for supervised or semi-supervised learning
(Springenberg, 2015; Salimans et al., 2016; Miyato et al., 2017; Dai et al., 2017), but they suffer from
the same limitation as the original GAN: they do not provide inference. Gan et al. (2017), Li et al.
(2017) and Deng et al. (2017) introduce a third player to the adversarial game. Although this extra
player allows to infer categorical variables, these approaches are not fully adversarial as auxiliary
“collaborative” terms are added to the objective function. Moreover, categorical and continuous latent
variables are modeled independently.
The adversarial and hybrid-adversarial approaches thus far discussed all model y and z as being condi-
tionally independent from each other. This may be an ideal prior structure for inference, for example, in
learning disentangled representations of x sampled from a limited domain (Chen et al., 2016). However,
the independence assumption cannot account for the notion of proximity between categories because
z is identically distributed for each category in y. Therefore, the distance between categories is equal
and indeterminate. AMM and SAMM are presented as adversarial approaches to model conditional
dependencies between y and z, but they do not preclude the independence assumption. The proposed
methods can model y and z as conditionally independent with inference distribution
q(x,y,z) = q(x)q(y | x)q(z | x),	(15)
and synthesis distribution
p(x,y,z) = p(y)p(z)p(x | y,z);	(16)
however, analysis of this graphical model is left for future work.
4	Evaluation
AMM and SAMM are evaluated using two image datasets: MNIST (LeCun & Cortes, 2010) and SVHN
(Netzer et al., 2011). The provided training and testing splits are used for MNIST experiments with 5000
randomly selected examples left out of the training set for validation. The same training, testing, and
validation splits as Dumoulin et al. (2016) are used for SVHN. Preprocessing is limited to scaling image
intensities on the range [0,1]. Detailed architectures for each experiment are shown in Section B of the ap-
pendix. We optimize all networks using Adam (Kingma & Ba, 2014) with α = 0.0002 and β1 = 0.5. All
kernel weights are initialized using a Gaussian distribution with standard deviation 0.02, all biases are
initialized to 0.0. Following the criteria in Jiang et al. (2017), the performance is evaluated as follows:
ACC = maxPMII{yi=n缶，i)} ,	(17)
n∈N	M	,
where M is the number of samples, y% is the true label, and ys,i is the predicted cluster label, and N
is the set of all mappings between cluster labels and true labels.
5
Under review as a conference paper at ICLR 2019
4.1	Gradient Penalty
The gradient penalty introduced by Gulrajani et al. (2017) is added to the discriminator loss to help
stabilize training of AMM and SAMM models. This penalty keeps the gradients of the discriminator
with respect to the inputs x, y, and z on the same order of magnitude. The penalty applied to the
discriminator loss is
LL…=λ(X,y,Z)E⅛,yJWxRZD(X，*Z)I12-DI，	(18)
where points (X,y ,Z) are drawn at random on straight lines between real or prior samples (x,y ,Z) and
synthesized or inferred samples (X,y ,z). The gradient penalty for Jensen-Shannon GAN introduced
by Roth et al. (2017) has also been explored, but did not produce better results. The regularization
term is set to λ= 10.0, and λ=0.01 for MNIST and SVHN experiments, respectively.
4.2	MNIST
In this section, the AMM is evaluated on the task of unsupervised clustering of hand-drawn digits
using the MNIST dataset. To model p(y)p(z | y), a64 dimensional mixture of Gaussians is used with
10, 20, and 30-components across 3 experiments. A multinomial prior is used for p(y) with uniform
probability for each class. The mean and variance of each component distribution are learned using the
reparameterization trick via (12). Table 1 reports the test-set clustering error-rate mean and standard
deviation over 10 trials, with the 10-component AMM achieving a 3.32 ± 0.39 percent error rate.
Figure 2 visualizes results from 1 of the 10 trials.
O
Test Images	Random Generation
IUωuodEOO ①」nl×lAl
777 77 7)77f∣m^7 7 彳 77 7^7 7r7
O O O O O O OO 0(^ OUOOoOObOO
qyH4q HqtlqH √∙√h√√*∕√4√¼
^^7 Q 夕 qqq 夕 99 夕夕
TTTTTTTTTT
(a)
(c) Reconstruction
///// / 6 6666C
d∕∕jj夕夕夕夕夕夕夕
夕7777夕夕夕，，，夕
，《 «9 49066663
“	夕/JJ33M
Ce)C)OoG66666 6
夕夕夕夕夕夕
3335888888犷3
夕夕夕夕77777777
55^dSgg8gJg
九夕〃弓。OoOQOOQ
Predicted label
(b) Cluster matrix
(e) t-SNE projection
(d) Interpolation
Figure 2: Unsupervised clustering of MNIST data with 10 mixture components. (a) Comparing test
image membership and randomly generated digits for each mixture component. (b) Cluster matrix. (c)
Reconstructions of input images: original data on the left of each pair. (d) Interpolation between exam-
ples: original data samples are shown in the first and last columns with linearly interpolated generations
between. (e) t-SNE projection of testing samples, color-coded for the MNIST class labels (0to 9).
6
Under review as a conference paper at ICLR 2019
Table 1: Test set clustering error rate and standard deviation for MNIST data. Methods using data
augmentation are denoted with *.
Model	K	MNIST	SVHN
GMVAE (DILOKTHANAKULET AL., 2016)	30	7.23±1.60	-
VaDE (JIANG ET AL., 2017)	10	5.54	-
CATGAN (SPRINGENBERG, 2015)	20	9.70	-
InfoGAN (CHEN ET AL., 2016)	10	5.00	-
AAE (MAKHZANI ET AL., 2016)	30	4.10±1.13	-
IMSAT (HU ET al., 2017) *	10	1.59±0.40	42.7±3.90
LALNets (KILINC & Uysal, 2018) *	10	1.68±0.08	23.2±1.30
AMM	10	3.32±0.39	-
AMM	20	3.99±0.79	35.0±5.24
AMM	30	4.01±1.11	20.4±0.80
4.3	SVHN
4.3.1	Unsupervised Clustering
In this section, unsupervised clustering is revisited. The SVHN dataset is used to investigate how
confounding attributes, such as color and contrast, affects the semantic separation of digits. To model
p(y)p(z | y) a64 dimensional mixture of Gaussians is used with 10, 20, and 30-components across 3
experiments. A multinomial prior is used for p(y) with uniform probability for each class, and the mean
and variance of each component distribution are learned using the reparameterization trick via (12).
Figure 3a shows random samples drawn from each component distribution generated by Gx. Figure
3b is a t-SNE projection of test samples drawn from Gz onto a 2D manifold. We show in 3c that
AMM learns a smooth latent manifold as we interpolate between examples from SVHN. The cluster
matrix for the SVHN test set is shown in figure 3d, demonstrating an overall classification error rate
of 20.4% ± 0.80. From these results, we can make a few observations. First, the generated images
are realistic looking. This is the case for every cluster other than cluster 5, which appears to be a noise
cluster. Secondly, each cluster only contains a single digit. Finally, we observe that for each digit there
are multiple clusters, one containing a dark background with light numbers (ie. cluster 28), and another
containing a light background with dark numbers (ie. cluster 12). This is important, as it shows that
the AMM has learned semantically meaningful clusters.
4.3.2	Semi-supervised clustering and classification
It is evident from the last experiment that the confounders introduced by the SVHN dataset made
unsupervised semantic clustering more difficult. In this section we show how SAMM can be used
to guide clustering along predefined categories using only a small amount of labeled data. To this
end, we limit the samples drawn from q(x,y) to a random selection of 1000 examples from the training
set. To model p(y)p(z | y) we use a 64 dimensional mixture of 10 spherical Gaussians, where the
the mean and variance of each component distribution are learned using the reparameterization trick
via (12). There is considerable class imbalance in the SVHN dataset, so a multinomial prior is used for
p(y) with each class probability set to the frequency observed in the labeled subset of the training data.
Table 2 reports the test-set error-rate mean and variance over 10 trials. SAMM achieves 5.60±0.45
percent error rate, which is an improvement over the ALI baseline. Figure 4 shows visualizations
of results from 1 of the 10 trials. Finally, given that we have defined p(y)p(z | y) we can use Bayes’
theorem to derivep(y | Z) and get a classifier given an image embedding Z:
yz = argmax[p(z = Z | y = k)p(y = k)]	(19)
k
Figures 4e and 4f compare the confusion matrices for predictions given by yz and those given by y
from Gy. The similarity between each is further evidence that the inference network has learned to
embed data according to the desired distribution.
7
Under review as a conference paper at ICLR 2019
If
10
jEKBJ
il∏i∣β ΙΓ 12 -- S
1	2	. SK猛鹿那［JO
4	4∣	I ) Id :
7Mi
3Z¾3∣
!对田I
MH
419
(a) Randomly generated images
□ OMIlciaa 6 砥
(d) Cluster matrix
Figure 3: Unsupervised clustering of SVHN data with 30 mixture components. (a) Randomly generated
images for each mixture component, mixture component indices are indicated to the left of each row.
(b) t-SNE projection of testing samples, color-coded for the SVHN class label (0to 9). (c) Interpolation
between examples: input images are shown in the first and last columns. (d) Cluster matrix.
0 / I	川
丁	F

5 :瞰J
6
I
5	Conclusion
The AMM is presented as a generative model for unsupervised or semi-supervised data clustering
with several contributions. The AMM is the first fully adversarially optimized method to model the
conditional dependence between categorical and continuous latent variables, providing impressive
unsupervised clustering and competitive semi-supervised classification results on benchmark datasets.
In contrast with other semi-supervised approaches, we have shown that the use of additional losses
or discriminators (Gan et al. (2017); Li et al. (2017); Deng et al. (2017)) are redundant additions to
frameworks, as the AMM yields similar or better results to these methods. In contrast with Dai et al.
(2017), our strong semi-supervised performance and qualitatively good image generation demonstrate
that semi-supervised performance and image generation are not necessarily opposing goals. As a fully
adversarial framework, the AMM provides a simple, yet powerful formulation as a foundation for
8
Under review as a conference paper at ICLR 2019
(a) Test images
IiI£0 由/M⅛Y0f¾⅝<wr
«1 士 V 2∣ P 卜 1, l∙ I
““UuW4
_	m∙MI354, 4
•二I
I I V
(b) Random
(c) Interpolation
(d) t-SNE projection
⑴y
Figure 4: Semi-supervised clustering and classification of SVHN data with 10 mixture components.
(a) Test image predictions: rows correspond to the predicted class. (b) Randomly generated images
for each mixture component. (c) Interpolation between examples: original data samples in first and
last columns. (d) t-SNE projection of testing samples, color-coded for the SVHN class label (0 to
9). Confusion matrix for predictions given an image embedding (e) and given the generator Gy (e).
Table 2: Semi-supervised test set missclassification rate and standard deviation for SVHN data. ↑
and ↑ denote similar encoder/CIaSSifier architectures.
Model	SVHN (N = 1000)
AAE (MAKHZANI ET AL., 2016)	17.70±0.24
IMPROVEDGAN (SALIMANS ET AL., 2016) ] ↑	8.11±1.30
ALI (DUMOULIN ET AL., 2016)	7.42±0.65
VAT small (Miyato et al., 2017) ↑	6.83±0.24
TRIPLEGAN (LI ET AL., 2017) I	5.77±0.17
SGAN (Deng ET al., 2017) ∣	5.73±0.12
VAT large (MIYATO ET AL., 2017) I	4.28±0.10
(DAI ET AL., 2017) t	4.25±0.03
SAMM t	5.60±0.45
future work. For example, the distribution of mixture components can be something be other than a
Gaussian without the need to derive an new evidence lower bound. Furthermore, by learning conditional
dependencies between y andz, the AMM preserves the notion of proximity between classes in the latent
space, which could be useful for applications in metric space learning and few shot learning. On top of
this, learning the mean and variance of mixture components gives access to subsequent analysis of the
likelihood function, which could provide an interpretable insight of the learned distributions. With that,
the mixture coefficients are the only terms to be integrated into the framework. As a whole, the AMMs
demonstrably strong performance validates its use in future work and extension into other domains.
9
Under review as a conference paper at ICLR 2019
References
Xi Chen, Xi Chen, et al. InfoGAN: Interpretable representation learning by information maximizing
generative adversarial nets. In Advances in Neural Information Processing Systems 29, pp.
2172-2180. 2016.
Zihang Dai, Zhilin Yang, et al. Good semi-supervised learning that requires a bad GAN. In Advances
in Neural Information Processing Systems, pp. 6510-6520, 2017.
Zhijie Deng, Hao Zhang, et al. Structured generative adversarial networks. In Advances in Neural
Information Processing Systems 30, pp. 3902-3912. 2017.
Nat Dilokthanakul, Pedro A. M. Mediano, et al. Deep unsupervised clustering with Gaussian mixture
variational autoencoders. arXiv preprint arXiv:1611.02648, 2016.
JeffDonahue, PhiliPP Krahenbuhl, and Trevor Darrell. Adversarial feature learning. In International
Conference on Learning Representations, 2017.
Vincent Dumoulin, Ishmael Belghazi, et al. Adversarially learned inference. In International
Conference on Learning Representations, 2016.
Zhe Gan, Liqun Chen, et al. Triangle generative adversarial networks. In Advances in Neural
Information Processing Systems 30, PP. 5251-5260, 2017.
Ian Goodfellow, Jean Pouget-Abadie, et al. Generative adversarial nets. In Advances in Neural
Information Processing Systems 27, PP. 2672-2680. 2014.
Ishaan Gulrajani, Faruk Ahmed, et al. ImProved training of Wasserstein GANs. arXiv preprint
arXiv:1704.00028, 2017.
Weihua Hu, Takeru Miyato, et al. Learning discrete rePresentations via information maximizing
self-augmented training. arXiv preprint arXiv:1702.08720, 2017.
Eric Jang, Shixiang Gu, and Ben Poole. Categorical reParameterization with Gumbel-softmax. arXiv
preprint arXiv:1611.01144, 2016.
Zhuxi Jiang, Yin Zheng, et al. Variational deeP embedding: An unsuPervised and generative aPProach to
clustering. In Proceedings of the 26th International Joint Conference on Artificial Intelligence, 2017.
Alex Kendall and Yarin Gal. What uncertainties do we need in Bayesian deeP learning for comPuter
vision? In Advances in Neural Information Processing Systems 30, PP. 5580-5590. 2017.
Ozsel Kilinc and Ismail Uysal. Learning latent rePresentations in neural networks for clustering through
Pseudo suPervision and graPh-based activity regularization. arXiv preprint arXiv:1802.03063, 2018.
Diederik Kingma and Max Welling. Auto-encoding variational Bayes. In International Conference
on Learning Representations, 2013.
Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic oPtimization. arXiv preprint
arXiv:1412.6980, 2014.
Diederik P Kingma, Shakir Mohamed, et al. Semi-suPervised learning with deeP generative models.
In Advances in Neural Information Processing Systems 27, PP. 3581-3589. 2014.
Yann LeCun and Corinna Cortes. MNIST handwritten digit database. 2010. URL
http://yann.lecun.com/exdb/mnist/.
Chongxuan Li, Kun Xu, Jun Zhu, and Bo Zhang. TriPle generative adversarial nets. arXiv preprint
arXiv:1703.02291, 2017.
Lars Maal0e, Marco Fraccaro, and Ole Winther. Semi-supervised generation with cluster-aware
generative models. arXiv preprint arXiv:1704.00637, 2017.
Chris J. Maddison, Andriy Mnih, and Yee Whye Teh. The Concrete Distribution: A Continuous Relax-
ation of Discrete Random Variables. In International Conference on Learning Representations, 2017.
10
Under review as a conference paper at ICLR 2019
Alireza Makhzani, Jonathon Shlens, et al. Adversarial autoencoders. In International Conference
on Learning Representations, 2016.
Takeru Miyato, Shin-ichi Maeda, et al. Virtual adversarial training: a regularization method for
supervised and semi-supervised learning. arXiv preprint arXiv:1704.03976, 2017.
Yuval Netzer, Tao Wang, et al. Reading digits in natural images with unsupervised feature learning.
In NIPS Workshop on Deep Learning and Unsupervised Feature Learning, 2011.
Kevin Roth, Aurelien Lucchi, et al. Stabilizing training of generative adversarial networks through
regularization. In Advances in Neural Information Processing Systems 30, pp. 2015-2025.2017.
Tim Salimans, Ian Goodfellow, et al. Improved techniques for training GANs. In Advances in Neural
Information Processing Systems 29, pp. 2234-2242. 2016.
Jost Tobias Springenberg. Unsupervised and semi-supervised learning with categorical generative
adversarial networks. arXiv preprint arXiv:1511.06390, 2015.
11
Under review as a conference paper at ICLR 2019
Appendix A	SAMM Algorithm
Algorithm 2 outlines the SAMM training procedure.
Algorithm 2 SAMM training procedure using distributions (4), (6), and (11).
θGy(x),θGz(x,Gy(x)),θGz(y),θGx(y,Gz(y)),θD
while not done do
xU1),...,xUM) 〜q(x)
yU1),...,yUM) 〜p(y)
Zuj)〜p(z | y = yUj)), j = 1,...,M
Xj)〜p(x | y = yuj),z = ZU)) j = 1,...,M
yUi 〜q(y | x = Xui)), i = 1,…,M
ZUi)〜q(ζ | X = Xui) ,y =		(i) 二 yu ), (M) ...,y'	i = 1,...,M )〜q(X,y)	
(1)	(M) i x ` ,...,x'	),y'1),			
y'1),…,y'M) 〜p(y)				
ζ'j) 〜P(Z I y=	(j)) y' ),	j=1,...	,M	
Xj 〜P(X Iy =	(j) Z y' ,Z	= Z(j)) = Z' ),	j=1,.	..,M
Z'i) 〜q(Z IX =	(i) X' ,y=	(i) =y' ),	i=1,..	.,M
Pqu)—D(Xui),yui),Zui)),	i=1,…,M
PpU) - D(Xj),y(j),zP)), j = 1,...,M
Pq' — D(x'i),y'i),z'i)),	i = 1,…，M
Pj — D(x'j),y'j),z'j)), j = 1,...,M
. Initialize SAMM parameters
. Sample from unlabeled data and priors
. Sample from conditionals
. Sample from labeled data and priors
. Sample from conditionals
. Compute predictions for unlabeled data
. Compute predictions for labeled data
LDu4 2⅛PMIlog(Pqu))- 2⅛PM=I Iog(I-Ppu))
LD' V 2MPM=Ilog(Pq'))- 2MPM=I Iog(I-Pp'))
LGyU (X)= LGzU EGy (x)) J-2M PMIlog(I-Pqu))
LGz'(x,Gy(x)) J-2MPM=Ilog(I-Pq?)
LGxU (y,Gz (y)) = LGzU (y)J- 2M PMJog(P(Pu)
LGxJyCz(y)) = LGzJy) J-2MPMIlog(Pp'))
θD J θD - Vθd (LDU +LD' )
. Compute discriminator losses
. Compute inference losses
. Compute X generator losses
. Update discriminator parameters
OGz(XlGy (X)) J- OGz(XlGy (X))	-^BGz (x,Gy (x)) (CGzU (XlGy (x)) + CGz` (x,Gy (X))
Update Z inference parameters
. Update y inference parameters
(y,Gz(y)) +LGx' (y,Gz(y)))	.
. Update Z synthesis parameters
θGy (x) J θGy (X)-VθGy(x) GyU (X)
Gx (y,Gz (y)) J Gx (y,Gz (y)) - θGx (y,Gz (y))	GxU
Update X synthesis parameters
θGz(y) J θGz(y)-VθGz(y) (LGzU (y) +LGz' (y))
Appendix B	Experiment Information
B.1 Model Architectures
Tables 3, 4, 5 and 6 detail the model architectures for the MNIST experiments. Tables 7, 8, 9 and 10
detail the model architectures for the SVHN experiments. Model inputs and outputs are highlighted in
boldface. “Leak” denotes Leaky ReLU activations. “ExpN” denotes the following activation function:
ExPN(X) = exp(0.5 x)Θe, E〜N(0,I).	(20)
12
Under review as a conference paper at ICLR 2019
Table 3: MNIST: Gz (x)Gy (x,Gz (x))
Name	Input	Channels	Width	Stride	Dropout	BatchNorm	Activation
x	-	1	-	-	-	-	-
y1	x	32	2	1	0.2	-	-
z1	x	32	2	1	0.2	-	-
y1a	y1 + z1	32	-	-	-	yes	Leak 0.2
z1a	z1	32	-	-	-	yes	Leak 0.2
y2	y1a	32	3	2	0.2	-	-
z2	z1a	32	3	2	0.2	-	-
y2a	y2 + z2	32	-	-	-	yes	Leak 0.2
z2a	z2	32	-	-	-	yes	Leak 0.2
y3	y2a	64	3	2	0.2	-	-
z3	z2a	64	3	2	0.2	-	-
y3a	y3 + z3	64	-	-	-	yes	Leak 0.2
z3a	z3	64	-	-	-	yes	Leak 0.2
y4	y3a	64	3	1	0.2	-	-
z4	z3a	64	3	1	0.2	-	-
y4a	y4 + z4	64	-	-	-	yes	Leak 0.2
z4a	z4	64	-	-	-	yes	Leak 0.2
y5	y4a	128	4	1	0.2	-	-
z5	z4a	128	4	1	0.2	-	-
y5a	y5 + z5	128	-	-	-	yes	Leak 0.2
z5a	z5	128	-	-	-	yes	Leak 0.2
yμ	y5a	k	1	1	-	-	-
yσ	y5a	k	1	1	-	-	ExpN
y	yμ + yσ	k	-	-	-	-	Softmax
zμ	z5a	64	1	1	-	-	-
zσ	z5a	64	1	1	-	-	ExpN
z	zμ + zσ	64	-	-	-	-	-
Table 4: MNIST: Gz (y)
Name	Input	Channels	Width	Stride	Dropout	BatchNorm	Activation
y	-	k	-	-	-	-	-
z1	y	64	1	1	-	yes	Leak 0.2
z2	z1	64	1	1	0.2	yes	Leak 0.2
zμ	z2	64	1	1	-	-	-
zσ	zeros	64	-	-	-	-	ExpN
z	zμ + zσ	64	-	-	-	-	-
13
Under review as a conference paper at ICLR 2019
Table 5: MNIST: Gx (y,Gz (y))
Name	Input	Channels	Width	Stride	Dropout	BatchNorm	Activation
y	-	k	-	-	-	-	-
z	-	64	-	-	-	-	-
y1	y	128	1	1	-	-	-
z1	z	128	1	1	-	-	-
y1a	y1 + z1	128	-	-	-	yes	-
z1a	z1	128	-	-	-	yes	Leak 0.2
y2	y1a	64	4	1	0.2	-	-
z2	z1a	64	4	1	0.2	-	-
y2a	y2 + z2	64	-	-	-	yes	-
z2a	z2	64	-	-	-	yes	Leak 0.2
y3	y2a	64	3	1	0.2	-	-
z3	z2a	64	3	1	0.2	-	-
y3a	y3 + z3	64	-	-	-	yes	-
z3a	z3	64	-	-	-	yes	Leak 0.2
y4	y3a	32	3	2	0.2	-	-
z4	z3a	32	3	2	0.2	-	-
y4a	y4 + z4	32	-	-	-	yes	-
z4a	z4	32	-	-	-	yes	Leak 0.2
y5	y4a	32	3	2	0.2	-	-
z5	z4a	32	3	2	0.2	-	-
y5a	y5 + z5	32	-	-	-	yes	-
z5a	z5	32	-	-	-	yes	Leak 0.2
y6	y5a	1	2	1	0.2	-	-
z6	z5a	1	2	1	0.2	-	-
x	y6 + z6	1	-	-	-	-	Sigmoid
Table 6: MNIST: D(x,y,z)
Name Input Channels Width Stride Dropout BatchNorm Activation
2222 2 2 222
-------------.................-.-.-...
-------------0000-0-0-000
---122111111-111
---233341111-111
1k6432326464128646464642562562561
2
z
|
1234 1 12011
---xxxxxyyzz1yppp
|
5
x
123451212012
xyzxxxxxyyzzpppp
Leak 0.2
Leak 0.2
Leak 0.2
Leak 0.2
Leak 0.2
Leak 0.2
Leak 0.2
Leak 0.2
Leak 0.2
-
Leak 0.2
Leak 0.2
14
Under review as a conference paper at ICLR 2019
Table 7: SVHN: Gz(x)Gy(x,Gz (x))
Name	Input	Channels	Width	Stride	Dropout	BatchNorm	Activation
x	-	1	-	-	-	-	-
x1	x	96	3	-	-	yes	Leak 0.2
x2	x1	96	3	-	-	yes	Leak 0.2
x3	x2	96	3	Max2	-	yes	Leak 0.2
x4	x3	192	3	-	-	yes	Leak 0.2
x5	x4	192	3	-	-	yes	Leak 0.2
x6	x5	192	3	Max2	-	yes	Leak 0.2
x7	x6	384	3	-	-	yes	Leak 0.2
y1	x7	192	1	-	-	-	-
z1	x7	192	1	-	-	-	-
y1a	y1 + z1	192	-	-	-	yes	Leak 0.2
z1a	z1	192	-	-	-	yes	Leak 0.2
y2	y1a	96	1	-	-	-	-
z2	z1a	96	1	-	-	-	-
y2a	y2 + z2	96	Avg6	-	-	yes	Leak 0.2
z2a	z2	96	Avg6	-	-	yes	Leak 0.2
yμ	y2a	k	1	1	-	-	-
yσ	y2a	k	1	1	-	-	ExpN
y	yμ + yσ	k	-	-	-	-	Softmax
zμ	z2a	64	1	1	-	-	-
zσ	z2a	64	1	1	-	-	ExpN
z	zμ + zσ	64	-	-	-	-	-
Table 8: SVHN: Gz (y)
Name	Input	Channels	Width	Stride	Dropout	BatchNorm	Activation
y	-	k	-	-	-	-	-
zμ	y	64	1	1	-	-	-
zσ	y	64	1	1	-	-	ExpN
z	zμ + zσ	64	-	-	-	-	-
15
Under review as a conference paper at ICLR 2019
Table 9: SVHN: Gx (y,Gz (y))
Name	Input	Channels	Width	Stride	Dropout	BatchNorm	Activation
y	-	k	-	-	-	-	-
z	-	64	-	-	-	-	-
y1	y	512	1	1	-	-	-
z1	z	512	1	1	-	-	-
y1a	y1 + z1	512	-	-	-	yes	-
z1a	z1	512	-	-	-	yes	Leak 0.2
y2	y1a	256	4	1	-	-	-
z2	z1a	256	4	1	-	-	-
y2a	y2 + z2	256	-	-	-	yes	-
z2a	z2	256	-	-	-	yes	Leak 0.2
y3	y2a	256	3	1	-	-	-
z3	z2a	256	3	1	-	-	-
y3a	y3 + z3	256	-	-	-	yes	-
z3a	z3	256	-	-	-	yes	Leak 0.2
y4	y3a	128	3	2	-	-	-
z4	z3a	128	3	2	-	-	-
y4a	y4 + z4	128	-	-	-	yes	-
z4a	z4	128	-	-	-	yes	Leak 0.2
y5	y4a	128	3	1	-	-	-
z5	z4a	128	3	1	-	-	-
y5a	y5 + z5	128	-	-	-	yes	-
z5a	z5	128	-	-	-	yes	Leak 0.2
y6	y5a	4	2	1	-	-	-
z6	z5a	4	2	1	-	-	-
x	y6 + z6	3	-	-	-	-	Sigmoid
Table 10: SVHN: D(x,y,z)
Name	Input	Channels	Width	Pooling	Dropout	BatchNorm	Activation
x	-	1	-	-	-	-	-
y	-	k	-	-	-	-	-
z	-	64	-	-	-	-	-
x1	x	96	3	-	-	-	Leak 0.2
x2	x1	96	3	-	-	-	Leak 0.2
x3	x2	96	3	Max2	-	-	Leak 0.2
x4	x3	192	3	-	0.1	-	Leak 0.2
x5	x4	192	3	-	-	-	Leak 0.2
x6	x5	192	3	Max2	-	-	Leak 0.2
x7	x6	384	3	-	0.1	-	Leak 0.2
x8	x7	192	1	-	-	-	Leak 0.2
x9	x8	96	1	Avg6	-	-	Leak 0.2
y1	y	96	1	1	-	-	Leak 0.2
y2	y1	96	1	1	0.1	-	Leak 0.2
z1	z	96	1	1	-	-	Leak 0.2
z2	z1	96	1	1	0.1	-	Leak 0.2
p0	x5 | y2 | z2	288	-	-	-	-	-
p1	p0	288	1	1	0.1	-	Leak 0.2
p2	p1	288	1	1	0.1	-	Leak 0.2
p	p1	1	1	1	0.1	-	-
16