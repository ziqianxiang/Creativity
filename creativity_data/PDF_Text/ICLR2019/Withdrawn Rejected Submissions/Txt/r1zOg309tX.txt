Under review as a conference paper at ICLR 2019
Understanding the Effectiveness of Lipschitz-
Continuity in Generative Adversarial Nets
Anonymous authors
Paper under double-blind review
Ab stract
In this paper, we investigate the underlying factor that leads to the failure and
success in training of GANs. Specifically, we study the property of the optimal
discriminative function f *(x) and show that f *(x) in most GANs can only reflect
the local densities at x, which means the value of f * (x) for points in the fake
distribution (Pg) does not contain any information useful about the location of
other points in the real distribution (Pr). Given that the supports of the real and
fake distributions are usually disjoint, we argue that such a f *(x) and its gradient
tell nothing about “how to pull Pg to Pr”, which turns out to be the fundamental
cause of failure in training of GANs. We further demonstrate that a well-defined
distance metric (including the dual form of Wasserstein distance with a compacted
constraint) does not necessarily ensure the convergence of GANs. Finally, we
propose Lipschitz-continuity condition as a general solution and show that in a
large family of GAN objectives, Lipschitz condition is capable of connecting Pg
and Pr through f *(χ) such that the gradient Nxf *(χ) at each sample X 〜Pg points
towards some real sample y 〜Pr.
1	Introduction
Generative Adversarial Networks (GANs) (Goodfellow et al., 2014), as a new way of learning gen-
erative models, have recently shown promising results in various challenging tasks. Although GANs
are popular and widely-used (Isola et al., 2016; Brock et al., 2016; Nguyen et al., 2016; Zhu et al.,
2017; Karras et al., 2017), they are notoriously hard to train (Goodfellow, 2016). The underlying
obstacles, though have been widely studied (Arjovsky & Bottou, 2017; Lucic et al., 2017; Heusel
et al., 2017a; Mescheder et al., 2017; 2018; Yadav et al., 2017), are still not fully understood. In
this paper, we study the convergence of GANs from the perspective of the optimal discriminative
function f *(x).
We show that in original GAN and its most variants, f *(x) is a function of densities at the current
point x but does not reflect any information about the densities/locations of other points in the real
and fake distributions. Moreover, Arjovsky & Bottou (2017) state that the supports of real and fake
distributions are usually disjoint. In this paper, we argue that the fundamental cause of failure in
training of GANs (Section 2.1) stems from the combination of the above two facts. The generator
uses Nx f *(x) as the guidance for updating the generated samples, but Nx f *(x) actually tells nothing
about where Pr is. Therefore, the generator is not guaranteed to converge to the case Pg = Pr.
Accordingly, Arjovsky et al. (2017) proposed the Wasserstein distance (in its dual form) as an al-
ternative objective, which can properly measure the distance between two distributions no matter
whether their supports are disjoint. However, as shown in Section 2.3, when the supports of the Pg
and Pr are disjoint, the gradient of f *(x) from the dual form of Wasserstein distance given a com-
pacted dual constraint also does not reflect any useful information about other points in Pr . Based
on this observation, we provide further investigation in Section 2.4 and argue that measuring the
distance properly does not necessarily imply that the gradient is well-defined in terms of Nx f *(x).
In Section 3, we propose incorporating Lipschitz-continuity condition in the objectives of GANs as
a general solution, and prove that in a broad family of discriminator objectives, Lipschitz-continuity
condition can build strong connections between Pg and Pr through f *(x) such that when the sup-
ports of Pg and Pr are disjoint, Vxf *(χ) at each sample X 〜Pg will point towards some real sample
y 〜Pr. This guarantees that Pg is moving towards Pr at every step.
1
Under review as a conference paper at ICLR 2019
We extend our discussion on f *(x) and Vχf *(x) to the case where the supports of Pg and Pr are
overlapped, and present the general arguments in Section 4.1. Subsequently, in Section 4.2, we show
that the locality of f *(x) and Vxf *(x) in traditional GANS turns out to be an intrinsic cause to mode
collapse. Finally, in Section 4.3, we explain the reason of empirical success of traditional GANs
under the circumstance that they have no convergence guarantee.
Table 1: Comparison of different objectives in GAN models.
		Φ	W		F		f*(X)
JS-Divergence	一log(σ(-x))	-log(σ(X))	{f : Rn → R}	Iogfi Pg (x)
Least Square	(x — α)2	(x - β)2	{f : Rn → R}	α∙Pg(x)+β∙Pr (x) Pg(x)+2(x)
Wasserstein-1 with Lip 1	X	一x	{f: Rn → R, kfkiip ≤ 1}一	N/A
μ-Fisher IPM	X	一X	{f: Rn - R, Ex~μkf(X)k2 ≤ 1}	1	Pr(x)-Pg(x)- Fμ(Pr,Pg)	μ(x)	
2	The Fundamental Cause of Failure in Training of GANs
Typically, the objectives of GANs can be formulated as follows:
m. JD，Ez~Pz [φ(f (g(z)))] + Ex~Pr 3(f (X))],
f∈F
min JG，Ez~Pz[Ψ(f(g(z)))],
g∈G
(1)
where Pz is the source distribution of the generator (usually a Gaussian distribution) in Rm and
Pr is the target (real) distribution in Rn . The generative function g : Rm → Rn learns to output
samples that shares the same dimension as Pr , while the discriminative function f : Rn → R learns
to output a score indicating the authenticity of a given sample. We denote the implicit distribution
of the generated samples as Pg, i.e., Pg = g(Pz ).
F and G denote discriminative and generative function spaces parameterized by neural networks,
respectively; functions φ,夕,ψ: R → R are loss metrics. We list the choices of F, φ and 夕 in some
representative GAN models in Table 1, where We denote f * = arg minf ∈f JD.
In these GANs, the gradient that the generator receives from the discriminator with respect to a
generated sample X 〜Pg is
VxJG(X) = Vf(x)ψ(f (χ)) ∙ Vxf (χ).	⑵
In Eq. (2), the first term Vf(x)ψ(f(x)) is a step-related scalar that is out of the scope of our dis-
cussion in this paper; the second term Vxf(X) is a vector indicating the direction that the generator
should follow for optimizing on sample X.
2.1	Vxf*(X) ON Pg DOES NOT REFLECT USEFUL INFORMATION ABOUT Pr
In this section, we will show that when the supports ofPg and Pr are disjoint, Vx f *(X) in traditional
GANs does not reflect any useful information about Pr , and Pg is not guaranteed to converge to Pr .
We argue that this is the fundamental cause of non-convergence and instability in traditional GANs.1
2.1.1	The original GAN and Least-Squares GAN
In the simplest case of Eq. (1), e.g., the original GAN (Goodfellow et al., 2014) and Least-Squares
GAN (Mao et al., 2016), there is no restriction on F. Therefore, f*(X) for each point X is indepen-
dent of other points, and we have
f*(x) = argmin Pg(x) ∙ Φ(f (x)) + Pr(X) ∙2(f(x)),∀x.
f(x)∈R
Since we assume supports ofPg and Pr are disjoint, we further have
,*，、	fargminf (x)∈R Pg (X) ∙ φ(f(x)), ∀x 〜Pg,
f *(X) =
argminf (x)∈R Pr (X) ∙ φ(f (x)), ∀χ 〜Pr .
(3)
(4)
1In this paper, traditional GANS mainly refers to the original GAN and Least-Squares GAN, where f *(x)
depends only on the densities Pg (x) and Pr (x). Broadly, it refers to all GANs where f *(x) does not reflect
information about the locations of the other points in Pg and Pr , such as the Fisher GAN.
2
Under review as a conference paper at ICLR 2019
Prwith F*(x) =+8 —Pg with f*(x)
-0.50 -0.25 0.00 0.25 0.50 0.75 1.00 1.25 1.50
(a) Original GAN
Pr with f*(x) = 1 - Pg with f*(x) = 0
-0.50 -0.25 0.00 0.25 0.50 0.75 1.00 1.25 1.50
(b) Wasserstein distance
Pr with Γ(x)= 1	— PgWithf-(X)=O
-0.50 -0.25 0.00 0.25 0.50 0.75 1.00 1.25 1.50
(c) Lipschitz constraint
Figure 1: In traditional GANs, f *(x) is only defined on the supports of Pg and Pr and its values do
not reflect any information about the locations of other points in Pg and Pr . Therefore, they have no
guarantee on the convergence. Wasserstein distance in a compacted dual form suffers from the same
problem. GANs under LiPSchitz constraint builds connection between Pg and Pr, where Nxf *(x)
pulls Pg towards Pr .
For X 〜Pg, the value of f *(x) is irrelevant to Pr. Since Pg and Pr are disjoint2, Nxf *(x) for X 〜Pg
also tells nothing about Pr . In consequence, the generator can hardly learn useful information and
is not guaranteed to converge to the case where Pg = Pr .
2.1.2	The Fisher GAN
Mroueh et al. (2017) prove that the optimal f* of μ-Fisher IPM FU(Pr,Pg), the objective used in
Fisher GAN (Mroueh & Sercu, 2017), has the following form
f *(χ) =	1	Pr (X) - Pg(X)	(5)
f ( ) = Fμ(Pr,Pg)	μ(x).	()
where μ is a distribution whose support covers Pr and Pg. Given Pr and Pg are disjoint, We have
f Fμ(Pr ,Pg )怂),	∀x 〜Pg ;
f *(X) = f Fμ(Pr ,Pg) PxL，	∀x 〜Pr ；	(6)
(0,	otherwise.
Note that the scalar F(£ p)is a constant. Eq. (6) also defines f *(x) on Pg and Pr independently.
Therefore, for X ~ Pg, f *(x) and Nxf *(x) tell nothing about Pr.
2.2	Connection to gradient vanishing
The non-convergence problem of the original GAN has once been considered as the gradient van-
ishing problem. In (Goodfellow et al., 2014), it is addressed by using an alternative objective for
the generator. However, it actually only changes the scalar Nf(x)ψ(f(X)) while the aforementioned
problem in Nx f *(X) still exists. The least-squares GAN (Mao et al., 2016) is proposed to address the
gradient vanishing problem, but it also focuses on Nf(x)ψ(f(X)) basically. As we have discussed,
the least-squares GAN also belongs to traditional GANs, which is not guaranteed to converge when
Pg and Pr are disjoint.
Arjovsky et al. (2017) provided a new perspective on understanding the gradient vanishing prob-
lem. They argued that gradient vanishing stems from the ill-behaving of traditional metrics, i.e., the
distance between Pg and Pr remains constant when they are disjoint. Wasserstein distance is thus
proposed as an alternative metric, which can properly measure the distance between two distribu-
tions no matter they are disjoint or not. However, as we will show next, Wasserstein distance may
also suffer from the same problem on Nxf*(X), if a more compact dual form is used.
In summary, gradient vanishing is about the scalar term Nf (x) ψ(f (X)) in NxJG(X) or the overall
scale of NxJG(X), and in this paper we investigate its direction Nx f *(X), where the problem is so
fundamental and challenging that even the Wasserstein distance, which can properly measure the
distance for disjoint distributions, may also suffer from the same issue.
2Here and later, “two distributions are disjoint” means that their supports are disjoint.
3
Under review as a conference paper at ICLR 2019
2.3	Wasserstein distance in compact dual form suffers from the same problem
The (1st-)Wasserstein distance is a distance function defined between two probability distributions:
Wι(Pr ,Pg )=	inf、E(x,y)~∏ [d(χ,y)],
π∈Π(Pr,Pg)
(7)
where Π(Pr, Pg) denotes the collection of all probability measures with marginals Pr and Pg on the
first and second factors, respectively. Since solving it in the primal form (Eq. (7)) is burdensome,
Wasserstein distance is usually solved in its dual form. Though Wasserstein distance in its dual form
is usually written with Lipschitz constraint, we here provide a more compact version. The proof of
this dual form can be found in Appendix I.
Wl(Pr ,Pg) = SUpf Eχ~Pr [f (x)] - Eχ~Pg [f(x)],
s.t. f (χ) - f(y) ≤ d(χ,y), ∀χ 〜Pr, ∀y 〜Pg.
(8)
We leave the detailed discussion on the relationship between Lipschitz-continuity and Wasserstein
distance in Section 4.4. In Eq. (8), we replace the strong Lipschitz constraint with a looser constraint.
Note that Eq. (7) and Eq. (8) are still equivalent. With this dual form, we will demonstrate that a
well-defined distance metric, i.e., Wasserstein distance in this compacted dual form, may also suffer
from the same problem in Nxf *(x) and does not necessarily ensure the convergence of GANs.
We now study the optimal discriminative function f *(x) of Wasserstein distance in this dual form.
Since there is generally no closed-form solution for f *(x) in Eq. (8), We use an illustrative example
for demonstration here, but the conclusion is general. Let Z 〜 U [0,1] be a uniform variable on
interval [0, 1], Pg be the distribution of (1, Z) ∈ R2, and Pr be the distribution of (0, Z) ∈ R2, as
shown in Figure 1. According to Eq. (8), one of the optimal f * is as follows
0	∀X ~ Pq,
f"{l	Vx 〜Pg,
(9)
Though having the constraint “f (x) 一 f (y) ≤ d(x,y), ∀x ~ Pr, ∀y ~ Pg"，Wasserstein distance
in this dual form also only defines the value of f *(x) on the supports of Pg and Pr, and the values
of f*(x) on Pg contain no useful information about the location of Pr. Therefore, ifPg and Pr are
disjoint, Nx f *(x) hardly provides useful information to the generator about “how to change Pg into
Pr” and the generator is not guaranteed to converge to the case Pg = Pr . It is worth noticing that
the value of f *(x) on the region other than the supports of Pg and Pd is still undefined.
2.4	A well-defined metric does not necessarily guarantee the convergence
The objectives of GANs are usually defined as (or proved equivalent to) minimizing a distance
metric between Pg and Pr , which implies that “Pg = Pr is the unique global optimum”, and is
in accordance with the final goal of the generative model, i.e., estimating the distribution of real
samples. However, in this section, we emphasize that a smooth distance metric satisfying “Pg = Pr
is the optimum” does not necessarily guarantee the convergence of GANs.
Given an objective is convex with respect to Pg and holds the property that “Pg = Pr is the unique
optimum”, the convergence of GANs is guaranteed if only they are directly optimizing Pg, i.e.,
“dragging” Pg to Pr. However, what they actually do is using Nxf*(x) as the guidance to optimize
the generated samples. As shown in previous sections, when Pg and Pr are disjoint, Nxf*(x), i.e.,
the direction that the generator follows for updating the generated samples, tells nothing about how
to pull Pg to Pr . In this way, the convergence of GANs are not necessarily guaranteed. Nxf *(x)
indeed indicates the direction of decreasing the objective in terms of the current f *(x), but updating
x to make the value of f *(x) increase / decrease does not necessarily imply that Pg is getting closer
to Pr . Recall that in the failure case of Wasserstein distance dual form in the above section, the
values of f *(x) on Pg is zero, while the values of f *(x) around Pg is undefined.
In conclusion, a smooth distance metric satisfying “Pg = Pr is the optimum” does not guarantee the
convergence and sample updating according to Nxf*(x) does not necessarily decrease the distance
between Pg and Pr. Therefore, if we use Nxf* (x) for updating the generator, it is necessary to
make Nxf* (x) aware of how to pull Pg to Pr. Alternative strategies actually exist, for example,
Sanjabi et al. (2018) use the optimal transport plan (Seguy et al., 2017) between Pg and Pr to update
the generator. However, their results tend to be blurry. In the next section, we will introduce the
Lipschitz constraint as a general solution for making Nxf*(x) well-behaving and guaranteeing the
convergence of Nx f *(x)-based GANs.
4
Under review as a conference paper at ICLR 2019
3	A General Solution: Lipschitz Condition
Lipschitz-continuity constraint becomes popular in GANs recently as part of the discriminator’s ob-
jective (Arjovsky et al., 2017; Kodali et al., 2017; Fedus et al., 2017; Miyato et al., 2018), achieving
great success. In this section, we explain the significance of Lipschitz constraint when introduced
into the objective of the discriminator. In a nutshell, under a board family of GAN objectives, Lips-
Chitz constraint is able to connect Pg and Pr through f *(x) such that when Pr and Pg are disjoint,
Nxf *(x) for each generated sample X 〜 Pg will point towards some real sample y 〜 Pr, which
guarantees the trend that “Pg is getting closer to Pr at every step”.
3.1	The main result
A function f : X → Y is k-Lipschitz continuous if it satisfies the following property:
dγ(f(χ),f(y)) ≤ k ∙ dχ(χ,y),∀ χ,y ∈ X,	(10)
where dX and dY are distances metrics in domains X and Y , respectively. The smallest constant k
is called the Lipschitz constant of function f. In this paper (and most GAN papers), dX and dγ are
defined as Euclidean distance.3 We let ky-xk denote Euclidean distance.
As proved by Gulrajani et al. (2017), when the Lipschitz condition is combined with Wasserstein
distance, We have the following property if f *(x) is differentiable, then
Pr Bf *(xt)
y - X ʌ
ky -XkJ
1, for (x,y)〜∏*,
(11)
where Xt = tx + (1 一 t)y, 0 ≤ t ≤ 1, and ∏ is the optimal π in Eq. (7). The meaning of this
proposition is two-fold: (i) for each X 〜Pg, there exists a y 〜Pr such that Nxf *(Xt)= "二八 for
all linear interpolations Xt between X and y; (ii) these (x, y) pairs match the optimal coupling ∏*.
Next we introduce our theorem on the Lipschitz condition. It turns out when combining the Lipschitz
condition with generalized objectives, Property-(i) still holds and Property-(ii) is naturally dismissed
as it is now not restricted to Wasserstein distance.
Theorem 1. Let JD，Ex~pg [φ(f(x))] + Ex~p,[2(f(x))] and dJ denotes Pg(x)Φ(∕(x)) +
Pr(x)夕(f (x)).	Let	Pr	and	Pg	denote the supports of	Pr	and	Pg,	respectively. Assume	f*	=
arg min f [Jd + λ ∙ k(f )2], where k(f) is the Lipschitz constant of f. If Φ(x) and 夕(x) in JD satisfy
(Φ0(x) > 0, Φ00(x) ≥ 0,
夕0(x) < 0,夕00(x) ≥ 0,	(12)
l∃ a, φ0(a) +，(a) = 0,
then we have that
(a)	∀X ∈ Pg ∪ Pr, ∃y=x ∈ Pg ∪ Pr such that |f *(y)-f *(x)∣ = k(f *) ∙ ∣∣X-yk or Vf*(x)∂x JD = 0;
(b)	∀X ∈ Pg ∪ Pr 一 Pg ∩ Pr, ∃y=x ∈ Pg ∪ Pr SUCh that ∣f*(y)-f *(x)∣ = k(f *) ∙ IlX-y∣∣;
(c)	if Pg = Pr and Pg= Pr, then ∃x, ∃y=x suchthat |f *(y)-f *(x)∣ = k(f *) ∙ ∣∣X-y∣∣;
(d)	the only Nash Equilibrium of JD + λ ∙ k(f )2 is reached when Pg = Pr, where k(f) = 0.
The above theorem states that when the Lipschitz condition is combined with an objective that
satisfies Eq. (12), then: (a) for the optimal discriminative function f *(x) at any point X ∈ Pg ∪ Pr, it
either is bounded by the Lipschitz constant or ∂xJD holds a zero-gradient with respect to f *(X); (b)
for any point that only appears in Pg or Pr, there must exist a point that bounds this point in terms
of |f*(y) 一f*(x)∣ = k(f *) ∙ ∣∣x一y∣, because for these points, ∂xJ° will never get zero gradient
with respect to f *(X) as we prove in the Appendix G; (c) when Pg and Pr are totally overlapped, as
long as Pg still not converges to Pr, there exists at least one pair (X, y) that bounds each other; (d)
the only Nash Equilibrium among Pg and f *(X) under this objective is “Pg = Pr with k(f *) = 0”.
The formal proof is in Appendix G.
3Actually, we argue that the distance metrics must be Euclidean distance in GANs. See Appendix D.
5
Under review as a conference paper at ICLR 2019
Wasserstein distance, i.e., φ(χ)=夕(一x) = X is one instance that satisfies Eq. (12); and it is a Very
special case, which holds φ00(χ) = 0 and 夕00(χ) = 0. Eq. (12) is actually quite general and there
exists many other settings, e.g., φ(x)=夕(一x) = - log(σ(-x)), φ(x)=夕(一x) = X + √x2 + 1
and φ(χ)= 夕(一x) = exp(χ). Generally, it is feasible to set φ(χ)= 夕(一x). As such, to build a
new objectiVe, one only needs to find a function that is increasing and has non-decreasing deriVatiVe.
See Figure 12. In addition, all linear combinations of feasible (φ,夕)pairs also lie in the family.
It is worth noting that k(f) is also optimized here and it is actually necessary for Property-(c)
and Property-(d). This is the key difference when the Lipschitz condition is extended to general
objectiVes. The underlying reason for the need of also minimizing k(f) comes from the existence of
case “▽/*(χ)∂χ Jd = 0 for Pg(x) = Pr (x)”，which does not hold when the objective is Wasserstein
distance. Minimizing k(f) guarantees that the only Nash Equilibrium is “Pg = Pr with k(f *) = 0”.
On the other hand, if k(f) is not minimized towards zero, Wasserstein distance dual form based
GANs are not guaranteed to have zero gradient Nxf * (x) at the convergence state Pg = Pr. It
indicates that minimizing k(f) is also beneficial to the Wasserstein GAN (Arjovsky et al., 2017).
3.2	LIPSCHITZ CONDITION CONNECTS Pg AND Pr THROUGH f *(x)
From Theorem 1, we know that for any point x, as long as ∂xJD does not hold a zero gradient
with respect to f* (x), f* (x) must be bounded by another point y such that |f* (y) - f* (x)| =
k(f *) ∙ ∣∣x-yk. We here further clarify that, when there is a bounding relationship, it must involve
both real sample(s) and fake sample(s). More formally, we have
Theorem 2. If f* = argmin,[Jd + λ ∙ k(f )2], then
•	∀x ∈ Pg, if ∃z=x ∈ Pg ∪ Pr such that |f *(x)-f *(z)∣ = k(f *) ∙ ∣∣x-z∣, then ∃y=x ∈ Pr such
that f*(y)-f*(X) = k(f*) ∙kx-yk,
•	∀y ∈ Pr ,if ∃z=y ∈ Pg ∪ Pr suchthat |f *(z)-f *(y)∣ = k(f *) ∙ ∣∣z-y∣∣,then ∃x=y ∈ Pg such
that f*(y)-f*(X) = k(f*) ∙∣∣x-y∣∣.
The intuition behind the above theorem is that samples from the same distribution, e.g., the fake
samples, will not bound each other. It is worth noticing that there might exist a chain of bounding
relationships that involves a dozen of fake samples and real samples, and these points all lie in the
same line and bounds each other.
Under the Lipschitz condition, the bounded line in the value surface of f * is the basic building
block that connects Pg and Pr, and each fake sample lies in one of the bounded lines. Next we will
further interpret the implication of bounding relationship and show that it guarantees meaningful
Nx f *(x) for all involved points.
3.3	LIPSCHITZ CONDITION ENSURES THE CONVERGENCE OF Nxf *(x)-BASED GANS
Recall that the proposition in Eq. (11) states that Vxf * (Xt) = 口:二八. This is actually a direct
consequence of bounding relationship between x and y. We formally state it as follows:
Theorem 3. Assume f(x) is differentiable and k-Lipschitz continuous. For all x and y which
satisfy x = y andf(y) -f (x) = k∙∣x-y∣,wehave Vxf(Xt) = k∙ Jy-^, whereXt = tx +(1 -t)y
for 0 ≤ t ≤ 1.
In other words, if two points X and y bound each other in terms of f (y)-f (x) = k ∙ ∣x-y∣, there is
a straight line between X and y in the value surface of f . Any point in this line holds the maximum
gradient slope k, and the direction of these gradient all point towards the x→y direction. Combining
Theorem 1 and Theorem 2, we can conclude that when Pg and Pr are disjoint, Vxf *(x) for each
sample X 〜Pg points to a sample y 〜Pr, which guarantees that Pg is moving towards Pr.
In fact, Theorem 1 provides further guarantee on the convergence. Property-(b) implies that for
any X 〜Pg that does not lies in Pr, Vxf * (x) points to some real sample y 〜Pr. In the fully
overlapped case, according to Property-(c), unless Pg = Pr, there exists a pair (x, y) in bounding
relationship and Vx f *(x) pulls x towards y. Property-(d) guarantees that the only Nash Equilibrium
is “Pg = Pr”. The proof of Theorem 3 is provided in Appendix D.
6
Under review as a conference paper at ICLR 2019
(b) Least Square GAN
(C) Fisher GAN With uniform μ
Figure 2: The source of Mode Collapse. In traditional GANs, f * (x) is a function of the local
densities Pg (x) and Pr (x). Given f *(x) is an increasing function of Pr (x) and decreasing function
of Pg (x), when fake samples get close to a mode of the Pr, Nxf *(χ) move them towards the mode.
4	Extensions and Discussions
4.1	From disjoint case to overlapping case
In Section 2, we discuss the problem of f*(x) and Nxf*(x) in the case where Pg and Pr are disjoint.
In this section, we extend our discussion to the overlapping case. In the disjoint case, we argue that
“f *(x) on Pg does not reflect any information about the location of other points in Pr” will lead to
an unfeasible Nxf *(x) and thus non-convergence. In the overlapping and continuous case, things
are actually different, f *(x) around each point is also defined, and its gradient Nxf*(x) now reflects
the local variation of f *(x).
For most traditional GANs, f* (x) mainly reflects the local information about the density Pg(x)
and Pr(x). However, it is worth noting that f *(x) is usually an increasing function with respect to
Pr(x) while a decreasing function with respect to Pg(x). For instance, f *(x) in the original GAN
is logPr(x)/Pg(x). Optimizing the generator according Nxf* (x) will move sample x towards
the direction of increasing f* (x). Because f* (x) positively correlates with Pr (x) and negatively
correlated with Pg (x), it in sense means x is becoming more real. However, such a local greedy
strategy turns out to be a fundamental cause of mode collapse.
4.2	THE CAUSE OF MODE COLLAPSE: THE LOCALITY OF f *(x) AND N
Mode collapse is a notorious problem in GANs’ training, which refers to the phenomenon that the
generator only learns to produce part ofPr. Many literatures try to study the source of mode collapse
(Che et al., 2016; Metz et al., 2016; Kodali et al., 2017; Arora et al., 2017) and measure the degree
of mode collapse (Odena et al., 2016; Arora & Zhang, 2017).
The most recognized cause of mode collapse is that, if the generator is much stronger than the
discriminator, it may learn to only produce the sample(s) in the local or global maximum of f(x)
for the current discriminator. This argument is true for most of GAN models. However, from our
perspective on f *(x) and its gradient, there actually exists a much more fundamental cause of mode
collapse, i.e., the locality of f *(x) in traditional GANs and the locality of gradient operator N.
In traditional GANs, f *(x) is a function of local densities Pg (x) and Pr(x), which is local, and the
gradient operator N is also a local operator. As the result, Nx f *(x) only reflects its local variations
and cannot capture the statistic ofPr and Pg that is far from itself. If f *(x) in the surrounding area
ofx is well-defined, Nxf*(x) will move x towards the nearby location where the value of f *(x) is
higher. It does not take the global status into account.
The typical result is that when fake samples get close to a mode of the Pr , they move towards the
mode and get stuck there (due to the locality). Assume Pr consists of two Gaussian distributions
(A and B) that are distant from each other, while the current Pg is uniformly distributed over its
support and close to real Gaussian A. In this case, Nxf(x) of all fake samples will point towards the
center of Gaussian A. IfPg is a Gaussian with the same standard deviation as Gaussian A, Nxf(x)
in original GAN and Least-Square GAN shows almost identical behaviors, which is illustrated in
Figure 2. In Fisher GAN, if μ(x) is uniform, the case is even worse: a large amount of points that are
relatively far from Gaussian A will move away from A (but the direction is not necessarily towards
B, though in our 1-D case it is). This observation again supports our argument that “a well-defined
distance metric does not necessarily guarantee the convergence”, and the validity of Nx f *(x) is still
necessary even if Pg and Pr is continuous and overlapped.
7
Under review as a conference paper at ICLR 2019
4.3	Explanation on the empirical success of traditional GANs
Though traditional GANs does not have any guarantee on its convergence, it has already achieved
its great success. The reason is that having no guarantee does not mean it cannot converge. It turns
out extensive parameter-tuning actually increases the probability of the convergence.
As shown in Appendix A, hyper-parameters are important in influencing the value surface of f *(x).
Some typical settings (e.g., simplified neural network architecture, relu or leaky relu activation,
relatively high learning rate, Adam optimizer, etc.) tend to form a relatively smooth value surface
(e.g., monotonically increasing from Pg to Pr), making Nxf* (x) much more meaningful. That
is, one can find these settings, where Vxf *(χ) or Vxf (x) is more favourable, to enable traditional
GANs to work. In opposite, we have tried highly-nonlinear activation such as swish (Ramachandran
et al., 2018) in the discriminator. It turns out traditional GANs are very likely to fail. In contrast, our
proposed Lipschitz constraint based GANs are compatible with highly-nonlinear activation. Another
important empirical technique is to delicately balance the generator and the discriminator or limit
the capacity of the discriminator. This is to avoid the fatal optimal f *(x). All these could possibly
make traditional GANs work. However, the consequence is that these GANs are very sensitive
to hyper-parameters and hard to use.
4.4	The relation between Lipschitz condition and Wasserstein distance
Most literature presents the dual form of Wasserstein distance with the Lipschitz condition. How-
ever, it is worth noticing that the Lipschitz condition is actually stronger than the necessary one in
the dual form of Wasserstein distance. Recall that in the dual form of Wasserstein distance, the
constraint can be more compactly written as (introduced in Section 2.3 and proved in Appendix I)
f (χ) - f(y)	≤	d(χ,y),	∀χ	〜Pr,	∀y	〜Pg.	(13)
However, it is usually written as 1-Lipschitz condition, which is
f(x) - f(y) ≤ d(x, y), ∀x, ∀y.	(14)
The key difference is that the constraint in Eq. (13) restricts the range ofx and y, but Lipschitz con-
dition (Eq. (14)) does not have the restriction on the range, thus the latter is the sufficient condition
of the former one. It is also worth noticing that, though Lipschitz condition is stronger than the
compact one, it does not affect the final solution (Appendix I). In other words, Lipschitz condition
is a safe extension of the compact constraint. And if the supports ofPg and Pr are the entire space,
Eq. (13) and Eq. (14) are actually identical; in such condition, Wasserstein distance in its dual form
always works. However, Pg and Pr are usually disjoint in GANs. Therefore, using the strong
Lipschitz condition is necessary to ensure the validity of the dual form of Wasserstein distance in
Vx f *(x)-based updating, and the constraint in Eq. (13) is not enough as shown in Section 2.3.
4.5	Contribution clarification
This work is substantially different from Wasserstein GAN (Arjovsky et al., 2017). Though the final
solution in Wasserstein GAN is sound, its main argument is off the point. The main argument for the
benefit of Wasserstein distance in (Arjovsky et al., 2017) is that it can properly measure the distance
between two distributions no matter whether their supports are disjoint, i.e., Wasserstein distance is
a good distance metric. However, according to our analysis in Section 2.4, a proper distance metric
does not necessarily ensure the convergence of GAN; more specifically, Wasserstein distance in the
dual form with compacted constraint also cannot provide meaningful gradient through Vxf*(x).
In addition, we have shown that Lipschitz constraint is able to ensure the convergence of GANs in
a family of GAN objectives, which is not restricted to Wasserstein distance. For example, Lipschitz
constraint is also introduced to original GAN in (Miyato et al., 2018; Kodali et al., 2017) and shows
improvements on the quality of generated samples. As a matter of fact, the original GAN objective
φ(x)=夕(一x) = 一 log(σ(-x)) is another instance in our proposed family and thus our analysis
explains why and how it works.
It is also worth noticing that JD in our formulation is not derived from any well-established distance
metric; it is derived based on Lipschitz constraint. As we have shown that a well-established distance
or divergence does not necessarily ensure the convergence, we hope our trial could shed light on the
new direction of GANs.
8
Under review as a conference paper at ICLR 2019
Last but no least, though we do not discuss the generator’s objective, our analysis indicates that
the minimax in terms of ψ in Eq. (1) is not essential, because it only influences the scale of the
gradient. Nevertheless, the function ψ does influence the updating of the generator, and we leave the
detailed investigation as future work. Another example that has a theoretically meaningful Vxf *(x)
is Coulomb GAN (Unterthiner et al., 2017), which is also derived neither from minimax game nor
from well-defined distance metric.
4.6	Related work
Fedus et al. (2017) also argued that divergence is not the primary guide of the training of GANs and
pointed out that the gradient does not necessarily related to the divergence. However, they tended to
believe that original GAN with non-saturating generator objective can somehow work. As we have
proved before, given the optimal f *, the original GAN has no guarantee on its convergence. And We
argue that practical work scenarios benefit from parameter-tuning.
Some work study the suboptimal f(x) (Mescheder et al., 2017; 2018; Arora et al., 2017), which is
another important direction for understanding GANs theoretically. While the behaviors of subopti-
mal can be slightly different, we think the optimal f *(x) should well-behave in the first place.
Researchers also found that applying Lipschitz constraint to the generator also benefits the quality of
generated samples (Zhang et al., 2018; Odena et al., 2018). In addition, researchers also investigated
implementation of Lipschitz constraint in GANs (Gulrajani et al., 2017; Petzka et al., 2017; Miyato
et al., 2018). However, this branch of related work is out of scope of the discussion in this paper.
5	Experiments
In this section, we present the experiment results on our proposed objectives for GANs. The anony-
mous code is provided at http://bit.ly/2Kvbkje.
5.1	Verifying THE objective family and its gradient Vxf *(x)
(a) x
(b) - log(σ(-x))
(c) x +	x2 + 1
Figure 3: Verifying the objective family
(d) exp(x)
Figure 4: Vxf *(x) gradation with CIFAR-10
We verify a set of φ and φ satisfying Eq. (12): (a) φ(x) = 夕(一x) = x; (b) φ(x) = 夕(一x) =
—log(σ(—x)); (c) φ(x) = φ(-x) = X + xχ+ + 1; (d) φ(x) = φ(-x) = exp(x). As shown in
Figure 3, the gradient of each generated sample is towards a real sample.
We further verify Vxf* (x) with the real-world data, using ten CIFAR-10 images as Pr and ten
noise images as Pg to make the solving of f *(x) feasible. The result is shown in Figure 4, where
The leftmost in each row are the X 〜Pg and the second are their gradient Vxf (x). The interior are
X + C ∙ Vx f (x) with increasing G which will pass through a real sample, and the rightmost are the
nearest y 〜Pr. This result visually demonstrates that the gradient of a generated sample is towards
the direction of one real sample. Note that the final results of this experiment keep almost identical
when varying the loss metric φ(x) and φ(x) in the family.
9
Under review as a conference paper at ICLR 2019
Figure 5: f *(x) in new objective is more stable.
Figure 6: Training curves on CIFAR-10.
5.2	Stabilizing f *(x) WITH NEW Objectives
Wasserstein distance is a special case in our proposed family of objectives where φ00(χ)=夕00(x)=
0. As a result, f *(x) under the Wasserstein distance objective where φ(χ)=夕(一x) = X has a free
offset, which means given a f *(x), f *(x) + b with any b ∈ R is also an optimal. In practice, this
behaves as an oscillatory f(x) during training. Any other instance of our new proposed objectives
does not have this problem. We illustrate this practical difference in Figure 5.
5.3	Benchmark on unsupervised image generation tasks
Table 2: Quantitative comparisons on unsupervised image generation tasks.
Objective	CIFAR-10		Tiny ImageNet		Oxford 102 Flower	
	FID	IS	FID	IS	FID*	IS*
一min(0, -X — 1)	21.58 ± 0.21	7.43 ± 0.04	16.22 ± 0.33	8.58 ± 0.08	9.72 ± 0.51	21.91 ± 0.18
X	19.64 ± 0.23	7.66 ± 0.03	18.81 ± 0.58	8.20 ± 0.05	9.74 ± 0.63	21.66 ± 0.22
—log(σ(一χ))	16.36 ± 0.09	8.49 ± 0.11	15.94 ± 0.33	8.42 ± 0.04	9.40 ± 0.49	21.82 ± 0.11
χ + √χ2 + 1	15.76 ± 0.13	8.04 ± 0.04	16.83 ± 0.41	8.35 ± 0.09	9.16 ± 0.52	21.96 ± 0.19
exp(χ)	19.82 ± 0.13	7.79 ± 0.03	20.45 ± 0.15	8.06 ± 0.05	9.90 ± 0.72	21.91 ± 0.22
一log(σ(-χ)) + 0.01χ	18.32 ± 0.15-	7.75 ± 0.04	16.09 ± 0.23-	8.47 ± 0.10	9.50 ± 0.39一	21.91 ± 0.20-
Finally, we fix ψ(x) = -x in the generator’s objective and compare various objectives on unsu-
pervised image generation tasks. The results of inception Score (Salimans et al., 2016) and Frechet
inception Distance (Heusel et al., 2017b) are presented in Table 2. We also include the hinge loss
φ(x)= 夕(一x) = - min(0, -X - 1) which used in (Miyato et al., 2018). We use a classifier on
Oxford 102 Flower Dataset for the evaluation of FiD and inception Score for results on Oxford 102.
The gradient of exp(X) varies significantly and we find it requires a small learning rate to avoid
explosion. The objectives X + xχ+ + 1 and - log(σ(-x)) achieve the best performances. This
is probably because they have bounded gradient and reduce the gradient of well-identified points
towards zero, which enables the discriminator to pay more attention to these ill-identified. Hinge
loss - min(0, -X - 1) does not lie in our proposed objective family and turns out to be unstable and
performs unsatisfactory in same cases. We also plot the training curve in terms of FiD in Figure 6.
Due to page limitation, we leave the details, visual results and more experiments in the Appendix.
6	Conclusion
in this paper we have shown that the fundamental cause of failure in training of GANs stems from the
unreliable Nxf *(χ). Specifically, when Pg and Pr are disjoint, Nxf *(χ) for fake sample X 〜Pg tells
nothing about Pr , making it impossible for Pg to converge to Pr . We have further demonstrated that
even Wasserstein distance in a more compact dual form (still is equivalent to Wasserstein distance
and can properly measure the distance between distributions) also suffers from the same problem
when Pg and Pr are disjoint. This implies that “whether a distance metric can properly measure the
distance” does not yet touch the key of non-convergence of GANs. We have highlighted in this paper
that a well-defined distance metric does not necessarily guarantee the convergence of GANs because
its Nxf *(χ) can be meaningless. Therefore, if we update the generator based on Nxf *(χ), we need
to pay more attention on the design of f *(χ). Furthermore, to address the aforementioned problem,
we have proposed the Lipschitz-continuity condition as a general solution to make Nxf *(χ) reliable
and ensure the convergence of GANs, which works well with a large family of GAN objectives. in
addition, we have shown that in the overlapping case, Nxf *(χ) is also problematic which turns out
to be an intrinsic cause of mode collapse in traditional GANs.
10
Under review as a conference paper at ICLR 2019
References
Martin Arjovsky and Leon Bottou. Towards principled methods for training generative adversarial
networks. In ICLR, 2017.
Martin Arjovsky, SoUmith Chintala, and Leon Bottou. Wasserstein gan. arXiv preprint
arXiv:1701.07875, 2017.
Sanjeev Arora and Yi Zhang. Do gans actually learn the distribution? an empirical study. arXiv
preprint arXiv:1706.08224, 2017.
Sanjeev Arora, Rong Ge, Yingyu Liang, Tengyu Ma, and Yi Zhang. Generalization and equilibrium
in generative adversarial nets (gans). arXiv preprint arXiv:1703.00573, 2017.
Andrew Brock, Theodore Lim, JM Ritchie, and Nick Weston. Neural photo editing with introspec-
tive adversarial networks. arXiv preprint arXiv:1609.07093, 2016.
Tong Che, Yanran Li, Athul Paul Jacob, Yoshua Bengio, and Wenjie Li. Mode regularized generative
adversarial networks. arXiv preprint arXiv:1612.02136, 2016.
William Fedus, Mihaela Rosca, Balaji Lakshminarayanan, Andrew M Dai, Shakir Mohamed, and
Ian Goodfellow. Many paths to equilibrium: Gans do not need to decrease adivergence at every
step. arXiv preprint arXiv:1710.08446, 2017.
Ian Goodfellow. Nips 2016 tutorial: Generative adversarial networks. arXiv preprint
arXiv:1701.00160, 2016.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,
Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Advances in neural infor-
mation processing systems,pp. 2672-2680, 2014.
Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville. Im-
proved training of wasserstein gans. arXiv preprint arXiv:1704.00028, 2017.
Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochreiter.
Gans trained by a two time-scale update rule converge to a local nash equilibrium. In Advances
in Neural Information Processing Systems, pp. 6626-6637, 2017a.
Martin HeuSeL HUbert Ramsauer, Thomas Unterthiner, Bernhard Nessler, GUnter Klambauer, and
Sepp Hochreiter. Gans trained by a two time-scale update rule converge to a nash equilibrium.
arXiv preprint arXiv:1706.08500, 2017b.
Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A Efros. Image-to-image translation with
conditional adversarial networks. arXiv preprint arXiv:1611.07004, 2016.
Tero Karras, Timo Aila, Samuli Laine, and Jaakko Lehtinen. Progressive growing of gans for im-
proved quality, stability, and variation. arXiv preprint arXiv:1710.10196, 2017.
Naveen Kodali, Jacob Abernethy, James Hays, and Zsolt Kira. On convergence and stability of gans.
arXiv preprint arXiv:1705.07215, 2017.
Mario Lucic, Karol Kurach, Marcin Michalski, Sylvain Gelly, and Olivier Bousquet. Are gans
created equal? a large-scale study. arXiv preprint arXiv:1711.10337, 2017.
Xudong Mao, Qing Li, Haoran Xie, Raymond YK Lau, Zhen Wang, and Stephen Paul Smolley.
Least squares generative adversarial networks. arXiv preprint ArXiv:1611.04076, 2016.
Lars Mescheder, Sebastian Nowozin, and Andreas Geiger. The numerics of gans. In Advances in
Neural Information Processing Systems, pp. 1825-1835, 2017.
Lars Mescheder, Andreas Geiger, and Sebastian Nowozin. Which training methods for gans do
actually converge? In International Conference on Machine Learning, pp. 3478-3487, 2018.
Luke Metz, Ben Poole, David Pfau, and Jascha Sohl-Dickstein. Unrolled generative adversarial
networks. arXiv preprint arXiv:1611.02163, 2016.
11
Under review as a conference paper at ICLR 2019
Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normalization
for generative adversarial networks. arXiv preprint arXiv:1802.05957, 2018.
Youssef Mroueh and Tom Sercu. Fisher gan. In Advances in Neural Information Processing Systems,
pp. 2510-2520, 2017.
Youssef Mroueh, Chun-Liang Li, Tom Sercu, Anant Raj, and Yu Cheng. Sobolev gan. arXiv preprint
arXiv:1711.04894, 2017.
Anh Nguyen, Jason Yosinski, Yoshua Bengio, Alexey Dosovitskiy, and Jeff Clune. Plug & play
generative networks: Conditional iterative generation of images in latent space. arXiv preprint
arXiv:1612.00005, 2016.
Augustus Odena, Christopher Olah, and Jonathon Shlens. Conditional image synthesis with auxil-
iary classifier gans. arXiv preprint arXiv:1610.09585, 2016.
Augustus Odena, Jacob Buckman, Catherine Olsson, TomB Brown, Christopher Olah, Colin Raffel,
and Ian Goodfellow. Is generator conditioning causally related to gan performance? arXiv
preprint arXiv:1802.08768, 2018.
Henning Petzka, Asja Fischer, and Denis Lukovnicov. On the regularization of wasserstein gans.
arXiv preprint arXiv:1709.08894, 2017.
Prajit Ramachandran, Barret Zoph, and Quoc V Le. Searching for activation functions. 2018.
Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. In Advances in Neural Information Processing Systems,
pp. 2226-2234, 2016.
Maziar Sanjabi, Jimmy Ba, Meisam Razaviyayn, and Jason D. Lee. Solving approximate wasser-
stein gans to stationarity. arXiv preprint arXiv: 1802.08249, 2018.
Vivien Seguy, Bharath BhUshan Damodaran, Remi Flamary, Nicolas Courty, Antoine Rolet, and
Mathieu Blondel. Large-scale optimal transport and mapping estimation. arXiv preprint
arXiv:1711.02283, 2017.
Shai Shalev-Shwartz et al. Online learning and online convex optimization. Foundations and
TrendsR in Machine Learning, 4(2):107-194, 2012.
Thomas Unterthiner, Bernhard Nessler, GUnter Klambauer, Martin HeuseL HUbert Ramsauer, and
Sepp Hochreiter. Coulomb gans: Provably optimal nash equilibria via potential fields. arXiv
preprint arXiv:1708.08819, 2017.
Cedric Villani. Optimal transport: old and new, volume 338. Springer Science & Business Media,
2008.
Abhay Yadav, Sohil Shah, Zheng Xu, David Jacobs, and Tom Goldstein. Stabilizing adversarial nets
with prediction methods. arXiv preprint arXiv:1705.07364, 2017.
Yoav Zemel. Optimal transportation: Continuous and discrete. PhD thesis, 2012.
Han Zhang, Ian Goodfellow, Dimitris Metaxas, and Augustus Odena. Self-attention generative
adversarial networks. arXiv preprint arXiv:1805.08318, 2018.
Jun-Yan Zhu, Taesung Park, Phillip Isola, and Alexei A Efros. Unpaired image-to-image translation
using cycle-consistent adversarial networks. arXiv preprint arXiv:1703.10593, 2017.
12
Under review as a conference paper at ICLR 2019
A Experiments: the influence of hyper-Parameters
The value surface of traditional GANs is highly depended on the network and training hyper-
parameters. We here plot the value surface of Least-Square GAN with various hyper-parameter
settings, to give directly impression on how these parameters influence GANs training. Not very
strictly, but our empirical code is: (i) a low-capacity network tends to learn a simple surface; (ii)
SGD tends to learn a more complex surface than ADAM; (iii) large learning rate tends to learns a
simpler surface than small learning rate; (iv) highly nonlinear activation function tends to result in
more complex value surface.
Though hyper-parameters tuning could possibly make traditional GANs work, it also makes these
GANs hard to use, sensitive to hyper-parameters and easily broken.
Figure 7:	ADAM optimizer with lr=1e-2, beta1=0.0, beta2=0.9. MLP with RELU activations, #hid-
den units=1024, #layers=1.
-2.θ	-1.5	-1.Θ	-θ.5 θ.θ 0.5	1.0	1.5	2.Θ
-2.0	-1.5 -l.θ	-0.5	θ.θ Θ,5	1.Θ	1.5	2.Θ
-2.θ	-1.5 -l.θ -θ.5 θ.θ Θ,5 l.θ 1.5
Figure 8:	ADAM optimizer with lr=1e-2, beta1=0.0, beta2=0.9. MLP with RELU activations, #hid-
den units=1024, #layers=4.
-2.θ	-1.5	-1.Θ	-θ.5 θ.θ 0.5	1.0	1.5	2.Θ
-2.θ	-1.5 -l.θ -θ.5 θ.θ Θ,5 l.θ 1.5	2
Figure 9:	ADAM optimizer with lr=1e-5, beta1=0.0, beta2=0.9. MLP with RELU activations, #hid-
den units=1024, #layers=4.
-2.θ	-1.5	-1.Θ	-θ.5 θ.θ 0.5	1.0	1.5	2.Θ
-2.θ	-1.5	-1.Θ	-θ.5 θ.θ Θ,5	1.Θ	1.5	2.Θ
-2.θ	-1.5 -l.θ -0.5 θ.θ Θ,5 l.θ 1.5
Figure 10:	SGD optimizer with lr=1e-3. MLP with SELU activations, #hidden units=128, #lay-
ers=64.
13
Under review as a conference paper at ICLR 2019
Figure 11:	SGD optimizer with lr=1e-4. MLP with SELU activations, #hidden units=128, #lay-
ers=64.
B	Various φ(x) and φ(x) THAT satisfies Eq. 12
For LiPsChitz constraint based GANs, φ(x) and D(X) are required to satisfy Eq. 12. Eq. (12) is
actually quite general and there exists many other instances, e.g., φ(x) =夕(一x) = x, φ(x)=
D(-x) = - log(σ(-x)),	φ(x)	= D(-x)	= x +	x2 + 1,	φ(x)	=	D(-x)	= exp(x),	etc. We Plot
these instances of φ(x) and D(x) in Figure 12.
Generally, it is feasible to set φ(x) = D(-x). Note that rescaling and offsetting along the axes are
trivial oPeration to found more φ(x) and D(x) within a function class, and linear combination of
two or more φ(x) or D(x) from different function classes also keeP satisfying Eq. 12.
Figure 12: Various φ(x) and D(x) that satisfies Eq. 12.
C	Generated images and Training Curves
Training curves on Tiny imageNet are Plotted in Figure 13. And comParisons on the visual results
among different objectives are also Provided in Figure 14, Figure 15 and Figure 16.
Iterations
(a) FiD training curve
Figure 13: FiD and iCP (incePtion score) training curves of different objectives on Tiny imageNet.
Iterations
(b) incePtion score training curve
14
Under review as a conference paper at ICLR 2019
(a) - log(σ(-x))
(c) x
(e) exp(x)
Figure 14: Random Samples of Lipschitz GAN trained of different objectives on Oxford 102.
(b) - log(σ(-x)) + 0.01x
(d) X + √x2 + 1
(f) - min(0, -x - 1)
15
Under review as a conference paper at ICLR 2019
(a) - log(σ(-x))
(c) x
(e) exp(x)
(b) - log(σ(-x)) + 0.01x
(d) X + √x2 + 1
(f) - min(0, -x - 1)
Figure 15: Random Samples of Lipschitz GAN trained of different objectives on Cifar-10.
16
Under review as a conference paper at ICLR 2019
(a) - log(σ(-x))
(b) - log(σ(-x)) + 0.01x
(C) X	(d) X + √x2 + 1
(e) exp(x)
(f) - min(0, -X - 1)
Figure 16: Random Samples of Lipschitz GAN trained of different objectives on Tiny Imagenet.
17
Under review as a conference paper at ICLR 2019
Figure 17: The gradient of Lipschitz constraint based GANs with real world data, where Pr consists
of ten images and Pg is Gaussian noise. Up: Each odd column are X 〜Pg and the nearby column are
their gradient Vxf *(x). Down: the leftmost in each row are X 〜 Pg, the second are their gradients
Vxf *(x),the interior are X + e ∙ Vxf *(x) with increasing e, and the rightmost are the nearest y 〜Pr.
18
Under review as a conference paper at ICLR 2019
D	Proof of Theorem 3 and the Necessity of Euclidean distance
In this section, we delve deeply into the relationship between gradient properties and different norms
in Lipschitz-continuity condition. We will prove Theorem 3, i.e. Lipschitz continuity with l2-
norm (Euclidean Distance) can guarantee the gradient direction of Vf *(x), and at the same time,
demonstrate that the other norms do not have this property. To start with, we give the proof of
Theorem 3 in the following.
Proof.
Let (χ,y) be such that X = y, and We define Xt = X + t ∙ (y 一 x) with t ∈ [0,1]. We
claim that: if f(x) is k-Lipschitz with respect to .p and f(y) - f(x) = k x - y p, then
f(Xt) = f(X) +t ∙ k∣∣χ 一 y∣∣p.
As we know f(X) is k-Lipschitz, with the property of norms, we have
f(y) 一 f(X) = f(y) 一 f(Xt) + f(Xt) 一 f(X)
≤ Ay)- f(Xt) + kkXt - Xkp = Ay)- f (Xt) +t ∙ kkX - ykp
≤ kky 一 Xtkp +1 ∙ k∣∣X 一 ykp = k ∙ (1 一 t)∣∣X 一 ykp +1 ∙ k∣∣X 一 ykp
= kkX - ykp.	(15)
Given f(X) 一 f(y) = kkX 一 ykp, it implies all the inequalities need to be equalities. Therefore,
f(Xt) = f(X) +t ∙ kkX 一 ykp.
It is clear that: given f(X) is k-Lipschitz with respect to k.k2, if f(X) is differentiable at Xt, then
kVf(Xt)k2 ≤ k. With f(Xt) = f(X) + t ∙ kkX 一 yk2, the directional derivative of f(X) on the
direction V = )^——^ at Xt is equal to k,
∂f(xt) = lim f(xt + hv) - f(xt) = lim fx + hky⅞) - f (Xt)
∂v	h→0	h	h→0	h
f (Xt+	h ) - f (Xt)	-∏~hιr ∙ kky — x∣∣2
lim _Lky-xk2-------- = lim ky-xk2~L = k.
h→0	h	h→0	h
(16)
Notethatkvk2 = k kyy-χ7 l∣2 = 1, ie V is a unit vector. Now,
k2 = kdfXt) = k hv, Vf(Xt))= hkv, Vf(Xtyi ≤ I∣kvk2l∣Vf (Xt)k2 = k2.	(17)
As the equality holds only when Vf(Xt) = kv = k kyy-χ,, We prove that Vf(Xt) = k kyy-χ, ∙ □
Above proof utilizes the property that kVf(Xt)k2 ≤ k, which is derived from that f(X) is k-
Lipschitz with respect to k.k2. However, other norms do not hold this property. Specifically, ac-
cording to the theory in (Shalev-Shwartz et al., 2012): if a convex and differentiable function f is
k-Lipschitz over S with respect to norm k.kp, then the Lipschitz continuity actually implies a bound
on the dual norm of gradients, i.e. kVf kq ≤ k. Here k.kq is the dual norm of k.kp, which satisfies
the equation that 1 + 1 = 1. As we could notice, a norm is equal to its dual norm if and only
if p = 2. Switching to lp-norm with p 6= 2, it is actually bounding the lq-norm of the gradients.
However, bounding the lq -norm of the gradients does not guarantee the gradient direction at fake
samples point towards real samples. A counter-example is provided as follows.
Consider a function g(X, y) = X+y on R2. ∀p1 = (X1, y1), p2 = (X2, y2), there is g(p1) 一 g(p2) =
g(X1,y1) — g(X2,y2) = (X1 — X2) + (y1 一 y2) ≤ ∣X1 — X2∣ + Iyi — y2∣ = kpι — P2k1,whichmeans g
is a 1-Lipschitz function with respect to l1-norm. According to above analysis, the dual norm of Vg
is bounded, i.e. kVgk∞ ≤ 1. Actually Vg is equal to (1, 1) at every point in R2 with kVgk∞ = 1.
Selecting two points A = (0,0) and B = (2,1), we have g(A)—g(B) = ∣∣A — Bki, however, Vg(A)
= (1, 1) is not pointing towards B.
19
Under review as a conference paper at ICLR 2019
E On the implementation of k-Lipschitz for GANs
Typical techniques for enforcing k-Lipschitz includes: spectral normalization (Miyato et al., 2018),
gradient penalty (Gulrajani et al., 2017), and Lipschitz penalty (Petzka et al., 2017). Before moving
into the detailed discussion of these methods, we would provide several important notes in the first
place.
Firstly, enforcing k-Lipschitz in the blending-region of Pg and Pr is actually sufficient. Define
B(μ, V)	= {x =	X ∙ t + y ∙ (1	- t) | X 〜μ∧y 〜V∧t ∈	[0,1]}. Itis clear that f (x) is I-LiPsChitZ in
B(μ, v)	implies	f (x) — f (y)	≤ d(x,y), ∀x ∈ μ, ∀y	∈	V. Thus, it is a sufficient constraint for
Wasserstein distance in Eq. 8. In fact, f(X) is k-LiPschitZ in B(Pg, Pr) is also a sufficient condition
for all properties described in LipschitZ constraint based GANs (Section 3).
Secondly, enforcing k-LipschitZ with regulariZation would provide a dynamic LipschitZ constant k .
Theorem 4. With Wasserstein GAN objective, We have minf ∈Fk-Lip JD (f) = k ∙ minf ∈F1-Lip JD (f).
Assuming we know and can control the LipschitZ constant k of f(X), by introducing a loss, saying
square loss, on k respecting to a constant k0 , the total loss of the discriminator (critic) becomes
J(k)，minfeF-ip JD (f) + λ ∙ (k - k0)2. With Lemma 4, let α = - minf¢0 JD (f), then
J(k) = —k ∙ ɑ + λ ∙ (k — k0)2, and J(k) achieves its minimum when k =聂 + k0. When a goes
to Zero, i.e. Pg converges to Pr, the optimal k decreases. And When Pg = Pr, We have α = 0 and
optimal k = k0 . We choose k0 = 0 in our experiments. The similar analysis applies to LipschitZ
constraint based GANs and we use λ ∙ k2 to enforcing k-Lipschitz for general Lipschitz constraint
based GANs.
For practical methods, though spectral normalization (Miyato et al., 2018) recently demonstrates
their excellent results in training GANs, spectral normalization is an absolute constraint for Lip-
schitz over the entire space, i.e., constricting the maximum gradient of the entire space, which is
unnecessary. On the other side, we also notice both penalty methods proposed in (Gulrajani et al.,
2017) and (Petzka et al., 2017) are not the exactly implementing the Lipschitz continuity condition,
because it does not simply penalty the maximum gradient, but penalties all gradients towards 1, or
penalties all these greater than one towards 1.
We found in our experiments that the existing methods including spectral normalization (Miyato
et al., 2018), gradient penalty (Gulrajani et al., 2017), and Lipschitz penalty (Petzka et al., 2017) all
fail to converge to the optimal f *(x) in many of our synthetic experiments. We thus developed a
new method for enforcing k-Lipschitz and we found in our experiments that the new method stably
converges to the optimal f *(X).
(a) Gradient Penalty
(b) Maximum Gradient Penalty
Figure 18: Comparison between gradient penalty and maximum gradient penalty, with Pr and Pg
consist of ten real and noise images, respectively. The leftmost in each row is a X 〜Pg and the
second is its gradient Vxf *(x). The interior are X + e ∙ Vxf *(x) with increasing e, which will pass
through a real sample, and the rightmost is the corresponding y 〜Pr.
20
Under review as a conference paper at ICLR 2019
The new method. Note that the practical methods of imposing k-Lipschitz is not the key contri-
bution of this work, and it is far from well-validated. We plan a further work on this topic for a more
rigorous study. But for the necessity for understanding our paper and reproducing of experiments,
we introduce it as follows.
Combining the idea of spectral normalization and gradient penalty, we developed an new regulariza-
tion for Lipschitz continuity in our experiments. Spectral normalization is actually constraining the
maximum gradient over the entire space. And as we argued previously, enforcing Lipschitz continu-
ity in the blending region is sufficient. Therefore, we propose to restricting the maximum gradient
over the blending region:
Jmaxgp =	max JWf(X)II2]	(18)
X 〜B(μ,ν)
In practice, We sample X from training batch as in (Gulrajani et al., 2017; Petzka et al., 2017). To
improve the stability and reduce the biased introduced via batch sampling, we propose the keep
track X with the maximum ∣∣ Vf(x) ∣1. A practical and light weight method is to maintain a list
Smax that has the currently highest (top-k) ∣∣ Vf(χ)∣[ (initialized with random X samples), using
the Smax as part of the batch estimation of Jmaxgp, and update the Smax after each batch updating of
the discriminator. In our experiment, Smax takes 1/2 batch, and the remaining 1/2 batch are random
sampled. Smax always keeps track of the maximal 1/2 samples in the batch.
We compare the practical result of gradient penalty Ex 〜B [∣∣ Vf (χ)∣∣2] and the proposed maximum
gradient penalty in Figure 18. Before switching to maximum gradient penalty, we struggled for a
long time and cannot achieve a high quality result as showed in Figure 18b. The other forms of
gradient penalty (Gulrajani et al., 2017; Petzka et al., 2017) perform similar as Ex〜B [∣∣ Vf(x) ∣[].
F Discussion on No-Differentiable f *(x)
If f*(x) is k-Lipschitz and f*(y) — f*(X)= k ∙ d(x,y), we say that (x,y) are coupled. When
a sample X is coupled with more than one y and these y lie in different directions of x, f*(x) is
non-differentiable at X and it will has sub-gradient along each direction.
When the f*(x) non-differentiable, due to the smoothness of practically-used neural network, as
we noticed in the experiments, it usually behaviors as that the gradient direction is pointing in the
middle of these sub-gradient (more strictly, a linear combination of these sub-gradients).
it seems that when the Pg is discrete (simulating discrete token generation, such as language and mu-
sic), it is easy to become non-differentiable: in the optimal transport perspective, once it is required
to move to more than one targets, f*(x) is non-differentiable at this point.
one way to alleviate this above problem is adding noise (e.g. Gaussian) to each discrete token
from Pg . The discrete token with different noises now disperse to different targets. in the practical
generator for continuous token, such as images, this kind of non-differentiable problem naturally get
solved.
The more serious non-differentiable problem traces back to the Monge problem (Villani, 2008),
which theoretically discussed under which condition the optimal transport is a one-one mapping,
which by nature solve the non-differentiable problem, as each sample now has a single target.
However, for the Monge problem is solvable, i.e. the mapping from Pg and Pr is one-one, it requires
the d(X, y) to be a strictly convex and super-linear (Villani, 2008). Unfortunately, the Euclidean
distance, which is necessary to ensure the gradient direction from fake sample directly points toward
real sample, does not fit this condition. so we currently does not figure out a practical solution to
take advantage of the Monge problem related theories.
Nonetheless, even if f* (x) is non-differentiable, the gradient is also usually somehow pointing
towards the real samples. And the empirical founding is that: when the Pg get close to Pr , the
non-differentiable problem diminishes.
21
Under review as a conference paper at ICLR 2019
G Proof of the Theorem 1
Let JD = Eχ~Pg[φ(f(x))] + Ex~p」夕(f(x))] = p Pg(x)φ(f(x)) + Pr(X)夕(f (x))dx. Let ∂χJ0
denotes Pg(x)φ(f (x)) + Pr (x)夕(f (x)). Ithas JD = / ∂χ Jddx.
Define J = JD +λ ∙ k(f )2, where k(f) is Lipschitz constant of f (x). Let f *(x) = arg minf [Jd + λ∙
k(f )2]. LetJD (k) = minf ∈Fk-□p JD = mi□f ∈Fι-□p,b Eχ~Pg [Φ(k ∙f (x)+b)]+Eχ~p, 3(k ∙f(x)+b)].
Lemma 1. ∀x, [fχ JD)] = 0 if and only if k(f *) = 0.
Proof.
⑴ ∀x, d∂fχJD] = 0 implies k(f *) = 0.
For the optimal f *(x), it holds that
∂J
∂JD
dJD	I O ∖ Z√ F*	d[dx jd]
∂k(f*) + 2λ ∙ k(f ) = 0. ∀x, ∂ f * (x) = 0 implies
0. We thus conclude that k(f *) = 0.
∂f)
∂f)
(ii) k(f *) = 0 implies ∀x, fJDɪ = 0.
For the optimal f * (x), it holds that
∂j
∂JD
∂k(f *)
∂kJD*) + 2λ ∙k(f *) = 0. So k(f *) = 0 implies
∂k(f*)
0. k(f *) = 0 also implies ∀x, y, f*(x) = f *(y). If there exists some point x such that
・∂χJD] = 0, then, given ∀x, y,f *(x) = f *(y), it is obviously that ∂JJ*) = 0. It is contradictory
to
∂JD
0.ThUSWehaS ∀x, d∂j = 0.
WT)
□
Lemma 2. If ∀x, y, f *(x) = f*(y),thenPg = Pr.
Proof. ∀x, y, f* (x) = f* (y) implies k(f* ) =
p (T) d(Kf *(x)) +P (T) d)(f *(x)) _ 0 SC Pg(X)
Pg(X) ∂f*(x) +pr(X) ∂f*(x) = 0. So Pr(X)
value, which straightforwardly implies Pg = Pr .
0. According to Lemma 1, ∀x, *XJD)] =
dHf *(χ))
—	df *(X)	g(X)]
—	—∂φ(f*(X)), and IhuS P (χ) has a constant
∂f*(x)	rk J
□
Proof of Theorem 1.
(i)	Considering the f* (x), ∀χ ∈ Pg ∪ Pr, if there does not exist a y such that
lf*(y) — f *(x)∣ = k(f *) ∙ d(x, y), because f *(x) is the optimal, it must hold that *XJD)] = 0. 4
(ii)	For x ∈	Pg	∪	Pr	一	Pg	∩	Pr,	assuming	Pg (x)	= 0 and	Pr (x)	= 0, we have	.fXJD)]	=
P (χ) dφ(f *(x))	+ p (χ) d)(f *(x))	=	p (χ) dφ(f*(X))	> 0	because	P (χ)	> 0 and	d((f*(X)) >	0
Pg(X) ∂f *(x)	+ Pr(X) ∂f *(x)	=	Pg(X) ∂f *(x)	> 0,	Decause	Pg(X)	> 0 and ∂f *(x)	>	0.
Then, according to (i), there must exist a y such that |f*(y) 一 f*(x)∣ = k(f *) ∙ d(X, y). The other
situation can be proved in the same way.
(iii)	According to Lemma 2, in this situation that Pg 6= Pr, for the optimal f *(X), there must exist
at least one pair of points X and y such that X 6= y and f* (X) 6= f* (y). If there are no X and y
satisfying that |f *(y) 一 f *(x)∣ = k(f *) ∙ d(x, y), it will be contradictory to that f *(x) is optimal,
because we can construct a better f* by decreasing the value of k(f) until there are two points, e.g.
x and y, constrained by Lipschitz constraint, i.e. |f *(y) 一 f *(x)∣ = k(f *) ∙ d(x, y).
∂J*
(iv)	In Nash Equilibrium state, it holds that, for any X ∈ Pg ∪ Pr, afJf) = dk(D) + 2λ ∙ k(f) = 0 and
∂[∂xJd] ∂f (x)
∂f (x)	∂x
0. We claim that in the Nash Equilibrium state, the Lipschitz constant k(f) must
be 0. If k(f) = 0, according to Lemma 1, there must exist a point X such that df(XD] = 0. And
according to (i), it must hold that ∃y fitting |f (y) 一 f (X) | = k(f) ∙ d(X, y). According to Theorem
4Otherwise, as f *(x) is not constrained by the Lipschitz constraint, we can construct a better f * by adjusting
the value of f *(x) at X according to the non-zero gradient.
22
Under review as a conference paper at ICLR 2019
3, We have ∣∣ fx)∣x=χ∣∣2 = k(f) = 0. This is contradictory to that dfJ] fXx)∣x=χ = 0. Thus
k(f) = 0, that is, ∀x ∈ Pg ∪ Pr, fXx = 0, which means ∀x,y,f(x) = f(y). According to
Lemma 2, ∀x, y, f(x) = f(y) implies Pg = Pr. Thus Pg = Pr is the only Nash Equilibrium of our
system.
Remark: For the WaSSerStein distance, [fχ J)] = 0 if and only if Pg (x) = Pr (x). For the WaSSer-
stein distance, penalizing the Lipschitz constant also benefits: at the convergence state, it holds
f*(x) .0
∂x = 0.
H	On the importance of Eq. 12
Requiring φ(x) and 夕(x) to satisfy Eq. 12 is important, because it is the non-trivial condition that
makes sure Ex〜Pg [φ(f (x))] + Ex〜pr[夕(f (x))] + λ ∙ k(f )2 has attainable global minimum with
respect to f.
Theorem 5. If φ(x) and 夕(x) satisfies Eq. 12, then for any fixed Pg and Pr, Ex〜Pg [φ(f (x))] +
Ex〜pr [夕(f (x))] + λ ∙ k(f )2 has an lower bound with respect to f.
Proof.
Given ∃a, φ0(a) + 夕0(a) = 0, φ00(x) ≥ 0 and 夕00(x) ≥ 0, we have:
Ex〜Pg [φ(f(x))] + Ex〜P, 3(f(x))]+ λ ∙ k(f)2
≥ Ex〜Pg [φ0(a)(f(x) - a) + φ(a)] + Ex〜p,[夕0(a)(f (x) - a) + 2(a)] + λ ∙ k(f)2
=Ex〜Pg [φ0(a)f (x)] + Ex〜P, [，(a)f (x)] + λ ∙ k(f )2 + C
=φ0(a)[Ex〜Pg [f(x)] - Ex〜Pr[f(x)]] + λ ∙ k(f )2 + c
≥ φ0(a)[k • —Wι(Pr, Pg)] + λ ∙ k2 + c
=[-φ0(a) Wi (Pr, Pg)] ∙ k + λ ∙ k2 + c
[φ0(a)Wι(Pr ,Pg )]2
，C.--------------------
4λ
Remark. Theorem 5 implies that there exists an infimum for Ex〜Pg [φ(f (x))]+Ex〜Pr k(f(x))] +
λ ∙ k(f )2. According to the definition of infimum, there exists a sequence of {fn}∞=ι such that
Ex〜Pg [φ(fn(x))] + Ex〜Pr [夕(fn(x))] + λ ∙ k(fn)2 infinitely approaches the infimum.
Remark. The Lipschitz constant of fn, i.e., k(fn), as n goes to infinity, is bounded, because
Ex〜Pg[φ(f(x))] + Ex〜Prmf(X))]+ λ ∙ k(f )2 > [-φ0(a)Wi(P,Pg)] ∙ k(f) + λ ∙ k(f)2 + c.
We further present several simply Lemmas. These Lemmas and their proofs would provide some
intuitive impressions on why Eq. 12 is necessary and the properties of proposed objectives.
Lemma 3. Assuming Pg and Pr are two delta distributions. If φ(x) and 夕(x) satisfies Eq. 12, then
for any fixed Pg and Pr, Ex〜Pg [φ(f (x))] + Ex〜Pr [夕(f (x))] has global minimum with respect to f,
for any fixed k(f) = k.
Proof. Given Pg and Pr are two delta distributions, according to Theorem 1 and Theorem 2, for
X 〜Pg and y 〜Pr, f *(y) — f *(x) = k ∙ d(x,y). Let f *(x) = α and β = k ∙ d(x,y), then
f *(y) = α + β. Define JD(α) = Ex〜Pg [φ(f (x))]+ Ex〜p,[P(f (x))] = φ(α) + P(α + β).
Given ∃ a such that φ0(a) + 夕0(a) = 0, φ00(x) ≥ 0 and 夕00(x) ≥ 0, we have, when a is small enough
(such that, α < a and a+β < a), JD(α) = φ0(α)+q0(α+β) ≤ φ0(a)+夕0(a) = 0. Similarly, when
a is large enough (such that, α > a and α+β > a), JD (α) = φ0(α)+夕0(α+β) ≥ φ0(a)+"(a) = 0.
Therefore, JD (α) is convex with respect to α and there exists an α0 such that JD0 (α0) = 0, where
JD achieves its the global minimum. When φ00(x) > 0 and 夕00(x) > 0, it is the unique global
minimum.	□
23
Under review as a conference paper at ICLR 2019
Lemma 4. Assuming Pg and Pr are two delta distributions. If φ(x) and 夕(x) satisfies Eq. 12,
then for any fixed Pg and Pr, Eχ~Pg [φ(f (x))] + Eχ~pr [夕(f (x))] monotonically increases as k(f)
decreases.
Proof. Given Pg and Pr are two delta distributions, according to Theorem 1 and Theorem 2, for
X 〜Pg andy 〜Pr, f *(y)-f*(x) = k∙d(x, y). Let f *(x) = α andβ = k∙d(x, y) > 0, then f *(y)=
α + β. Define JD(β) =minf三下皿「Eχ~Pg [φ(f(x))]+ Eχ~p,[P(f (x))] =min. φ(α) + P(α + β).
We need to prove JD (β) is monotonically decreasing, for β ≥ 0.
Let 0 ≤ βι	< β2,	let	αι = minɑ φ(α) +	夕(α + βι)	and α2	= mina	φ(α)	+ 夕(α + β2). Given
夕0(x) < 0	and βι	<	β2, we have φ(αι)	+ 夕(αι +	βι) >	φ(αι) +	夕(αι	+ β2). Given a2=
minα φ(α) + φ(α + β2), We further have φ(αι) + 夕(αι + βι) > φ(αι) + 夕(αι + β2) ≥ φ(a2) +
夕(α2 + β2). Done.
Additionally, with φ0(α1) + φ0(α1 + β1) = 0 and φ00(x) ≥ 0, we have φ0(α1) + φ0(α1 + β2) ≥ 0.
Providing φ0(α2) + φ'(α2 + β?) = 0, φ00(x) ≥	0 and φ00(x)	≥	0, we get α?	≤ αι.	That is,
ɑ2 ≤ αι < βι < β2. When φ00(x) > 0 and φ00(x)	> 0, we have	α?	< αι < βι <	β2.	口
Lemma 5. If the support of Pg and Pr is bounded, i.e., ∃R such that ∣∣χk < R, ∀χ ∈ Pg ∪ Pr.
Assume φ(x) and φ(x) satisfy Eq. 12 and further have φ00(x) > 0 or φ00(x) > 0. ∀N, ∃M, if
Eχ~Pg [φ(f(x))] + Eχ~Pr[φ(f(χ))] + λ ∙ k(f )2 <N ,then ∣f(χ)∣ < M, ∀χ ∈ Pg ∪ Pr
Proof.
∃a, φ0(a) + φ0(a) = 0 and φ00(x) + φ00(x) > 0 implies ∃b, φ0 (b) + φ0(b) > 0. Then:
Eχ~Pg [Φ(f (x))] + Eχ~Pr [φ(f (x))]+ λ ∙ k(f )2
≥ Eχ~Pg [Φ0(b)(f (x) — b) + φ(b)] + Eχ~Pr[φ'(b)(f(x) - b) + φ(b)] + λ ∙ k(f )2
=Eχ~Pg [φ0(b)f (x)] + Eχ~Pr [φ0(b)f (x)] + λ ∙ k(f )2 + C
=[φ0(b)	+	φ0(b)]Eχ~Pg	[f (x)] +	φ0(b)[Eχ~Pr [f (x)] - Eχ~Pg [f (x)]] + λ ∙ k(f )2	+ C
≥	[φ0(b)	+	φ0(b)N~Pg	[f (x)] +	φ0(b)[W1(Pr, Pg) ∙ k(f)]+ λ ∙ k(f )2 + c
∀x ∈ Pg ∪ Pr, if f (x) = T, then: ∀x ∈ Pg ∪ Pr, f (x) ≥ T - k(f) ∙ R.
Eχ~Pg [Φ(f (x))] + Eχ~Pr [φ(f (x))] + λ ∙ k(f )2
≥ [φ0(b) + φ0(b)](T - k(f) ∙ R) + φ0(b)[W1(P,Pg) ∙ k(f)]+ λ ∙ k(f)2 + C
≥ [φ0(b) + φ0(b)]T -
[φ0(b)Wl(Pr ,Pg )-[φ0(b) + φ0(b)]R]2
4λ
+C
Given Eχ~Pg [φ(f (x))] + Eχ~p, [φ(f (x))]+ λ ∙ k(f )2 < N, we have:
[φ0(b)+φ0(b)]τ - [φ0(b)WI(Pr R) - [φ0(b)+φ0(b)]R]2 + C<N
⇒ T < (N - C +31 (Pr,Pg)-B±φMl)∕[φ0(b) + φ0(b)]
4λ
Similarly, ∃a, φ0(a) + φ0(a) = 0 and φ00(x) + φ00(x) > 0 implies ∃d, φ0(d) + φ0 (d) < 0. And then
it implies T is greater than some constant. So, ∃M such that |f (x) | < M, ∀x ∈ Pg ∪ Pr. 口
24
Under review as a conference paper at ICLR 2019
I Proof on the dual form of Wasserstein distance
We here provide a formal proof for our new dual form of Wasserstein distance. The Wasserstein
distance is given as follows:
Wι(Pr,Pg)=	inf 、E(χ,y)〜∏ [d(x,y)],	(19)
π∈Π(Pr,Pg)
where Π(Pr, Pg) denotes the collection of all probability measures with marginals Pr and Pg on the
first and second factors respectively.
The dual form of Wasserstein distance is usually written as:
I(Pr,Pg) = Supf Ex〜Pr [f(x)] - Ex〜Pg [f(x)],
s.t. f(x) - f(y) ≤ d(x, y), ∀x, ∀y.
We will prove that Wasserstein distance in its dual form can also be written as:
J (Pr ,Pg ) =Supf Ex 〜Pr [f (x)] - Ex 〜Pg [f(x)],
s.t. f (x) - f(y) ≤ d(x,y), ∀x 〜Pr,∀y 〜Pg,
(20)
(21)
which means the constraint in the dual form of Wasserstein distance can be looser than the common
formulation.
With the compacted formulation, we argued that a well-defined metric, i.e., J(Pr, Pg ), which is
equivalent to Wasserstein distance W1(Pr, Pg) and thus can properly measure the distance between
two distributions, may also fail to provide a meaningful Vxf *(x). This observation indicates that
a well-defined distance metric does not necessarily guarantee a meaningful Vxf *(x) and thus does
not guarantee the convergence of Vxf *(x)-based GANs.
I.1	Proving the equivalence
Theorem 6. Given I(Pr, Pg) = W1(Pr, Pg)5, we have I(Pr, Pg) = J(Pr, Pg) = W1(Pr, Pg)
Proof.
(i)	For any f that satisfies	“f (x) -	f(y)	≤	d(χ,y),	∀x, Vy"，it must satisfy “f (x)	-	f(y)	≤
d(x,y), Vx 〜Pr ,∀y 〜Pg”. Thus, I (Pr ,Pg) ≤ J (Pr ,Pg).
(ii)	Let FJ = {f | f (x) - f (y) ≤ d(x, y), ∀x 〜Pr, ∀y 〜Pg}.
Let A = {(χ,y)∣χ 〜Pr ,y 〜Pg} and IA = P, (Xj) ∈. A; .
0, otherwise
Let Ac denote the complementary set of A and define IAc accordingly.
Vπ ∈ Π(Pr , Pg ) We have the following:
J (Pr ,Pg )= Supf ∈Fj Ex 〜P, [f(x)] - Ex 〜Pg [f(x)]
=Supf ∈FJ E(x,y)〜π [f (x) - f (y)]
=Supf ∈FJ E(x,y)〜π [(f (x) - f (y))IA] + E(x,y)〜π [(f (x) - f(y))IA。]
=Supf ∈FJ E(x,y)〜π [(f (x) - f(y))IA]
≤ E(x,y)~π [d(x, y)IA]
≤ E(x,y)~π [d(x, y)].
J (Pr ,Pg ) ≤ E(x,y)5 [d(x,y)], ∀∏ ∈ ∏(Pr ,Pg )
⇒ J(Pr,Pg) ≤ inf∏∈∏(Pr,Pg) E(x,y)〜∏ [d(χ,y)] = Wι(Pr,Pg).
(iii)	Combining (i) and (ii), we have I(Pr, Pg) ≤ J(Pr, Pg) ≤ W1(Pr, Pg). Given I(Pr, Pg) =
Wι(Pr ,Pg), we have I(Pr ,Pg) = J (Pr ,Pg ) = Wι(Pr ,Pg).	□
5The equivalence of W1 (Pr, Pg) and I(Pr, Pg) is well-known (Villani, 2008; Zemel, 2012).
25
Under review as a conference paper at ICLR 2019
I.2	PROVING J(Pr, Pg) = W1(Pr, Pg) DIRECTLY
Let Pr and Pg denote the supports of Pr and Pg, respectively. Because ∀∏ ∈ Π(Pr, Pg), it must
hold that ∏(χ, y) = 0 for any (x, y) that outside Pr X Pg, i.e., Pr(x) = 0 or Pg(y) = 0 implies
∏(x, y) = 0. We let Γ(R × Pg) denote the collection of all probability measures that defined on
Pr × Pg with marginals Pr and Pg on the first and second factors respectively. Let M+(Pr × Pg)
be the collection of all non-negative measures (not necessarily probability measures) on Pr × Pg.
Before the proof, we would like to give several preliminary notes.
•	A more formal and detailed proof for Kantorovich duality with same logic of justification
can be found in Theorem 2.3 of (Zemel, 2012). And a more relevant version that focused
on Wasserstein distance can be found in this blog6.
•	The key change here is that we handle the support of Pr and Pg more carefully, which
results in elimination of the unnecessary constraints f(x) - f(y) ≤ d(x, y) that involve
(x, y) pair where Pr(x) = 0 or Pg(x) = 0.
•	The validity of the use of the minimax-principle, i.e., invert the order of inf and sup, in
this case, is proved in (Zemel, 2012) and the blog.
Theorem 7. J(Pr, Pg) = W1 (Pr, Pg)
Proof.
inf	E(x,y)~π [d(X, y)] = inf _ E(x,y)~π [d(X, y)]
π∈Π(Pr,Pg)	π∈Γ(Pr ×Pg)
Lg
h LrZPg
inf
π∈M+(Pr ×
inf
Π∈M+(Pr ×Pg)
d(X, y )π(X, y)dXdy +	,
∞,
d(X, y)π(X, y)dXdy
∏ ∈ Γ(Pr X Pg) i
otherwise
+ sup [Es~Pr [f (s)] — Et~Pg [f (t)] - f [ (f (x) - f (y))∏(x, y)dxdy]]
f	Pr JPg	」
* ʃ tς> ∖ SUP但 S~Pr[f (S)]— Et^^P^g [f(t)]+ [[
π∈M+(Pr ×Pg)	f	Pr JPg
SUP	inf	[Es~Pr [f (s)] - Et^P>g [f (t)] + [	/
f π∈M+ (Pr × Pg )	Pr JPg
[d(X, y)
[d(X, y)
- (f (X) - f(y))]π(X, y)dXdy
- (f (X) - f(y))]π(X, y)dXdy
SuphEs"(s)i- E"g[f(t)]+∏∈M+infr ×Pg)ZJg[d(x,y)
- (f (X) - f(y))]π(X, y)dXdy
hE	E	0, f (X)- f(y ≤ d(x,y), VX ~ Pr,∀y ~ Pg
= SuP [Es~Pr[f (s)] - Et~Pg [f (t)] + ∣-∞, otherwise
= SuP Es~Pr[f(s)] - Et~Pg[f(t)], s.t. f (x) - f (y) ≤ d(x,y), Vx ~ Pr, Vy ~ Pg.
f
]
□
I.3 Another perspective: eliminating redundant constraint
To provide a more comprehensive understanding on why constraint f(x) - f(y) ≤ d(x, y) that
involves point (x, y) where Pr (x) = 0 or Pg (x) = 0 is unnecessary, we here give a intuitive
explanation in the following way: one can safely remove all constraints that does not involve any
point in the support of Pg and Pr, because give f (x) - f (y) ≤ d(x, y), Vx 〜Pr, Vy 〜Pg, it is
sufficient to bound the value of f (x) for x 〜 Pr and f(y) for y 〜Pg. In other words, given the
existence of constraint f (x) - f (y) ≤ d(x, y), Vx 〜Pr, Vy 〜Pg, the other constraints can be
safely eliminated without affecting the final solution.
6https://vincentherrmann.github.io/blog/wasserstein/
26
Under review as a conference paper at ICLR 2019
J Connections with Optimal Transport
The 1st-Wasserstein distance, also named as the Earth Mover’s distance, is a special form of optimal
transport (Villani, 2008), which measures the minimal cost of moving the source distribution to the
target distribution, and the optimal coupling π(x, y) describes the transport plan, i.e. how much
density we should move from x to y. Naturally, updating the generator according to the optimal
coupling would pull Pg towards Pr .
However, updating the generator according to the optimal coupling π(x, y) is a totally different
mechanism for training GANs. In typical GANs, We update the generator following Nxf *(x). An
interesting fact7 is that: with Wasserstein GAN objective, when updating the generator according
to Vxf *(x), it follows the optimal coupling π, if (and only if) there is LiPschitz constraint and the
d(x, y) represents the Euclidean distance.
In general optimal transport, d(x, y) is not required to be a distance and can be any cost function.
To the best knowledge of the authors, it is hard to access the coupling information from Vxf *(x)
if d(x, y) is arbitrary. However, fortunately, given the optimal coupling π , directly updating each
sample towards its target is also possible. An instance of this line of work can be found in (Sanjabi
et al., 2018), where the objective (SegUy et al., 2017) of generator is Ex〜Pg [Ey〜∏(∙∣x) [d(χ, y)]].
In summary, we think training GANs with optimal mapping and with Lipschitz constraint are two
mechanisms with different underlying principles, and Wasserstein GAN in the Lipschitz dual form
with Euclidean distance is the connecting point.
K	Hyper-parameter & Network Architecture
We follow the network architecture proposed in (Gulrajani et al., 2017) to conduct our experiments
on CIFAR-10, Tiny Imagenet, Oxford 102. The details of network architecture are in Table 3.
Generator:
Operation	Kernel	Resample	Output Dims
Noise	N/A	-N/a-	128
Linear	N/A	N/A	128×4×4
Residual block	3×3	UP	128×8×8
Residual block	3×3	UP	128×16×16
Residual block	3×3	UP	128×32×32
Conv & Tanh	3×3	N/A	3×32×32
Critic:
Operation	Kernel	Resample	Output Dims
Residual Block	3×3×2	Down	128×16×16
Residual Block	3×3×2	Down	128×8×8
Residual Block	3×3×2	N/A	128×8×8
Residual Block	3×3×2	N/A	128×8×8
ReLU,mean pool	N/A	N/A	128
Linear	N/A	N/A	1
Optimizer: Adam with beta1=0.0, beta2=0.9;
For more details, please refer to our published codes.
Table 3: Hyper-parameter and Network Architectures
7Assuming f *(x) is differentiable.
27