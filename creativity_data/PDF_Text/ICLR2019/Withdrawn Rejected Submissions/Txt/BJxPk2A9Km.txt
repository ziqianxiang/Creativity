Under review as a conference paper at ICLR 2019
Learning What to Remember:
Long-term Episodic Memory Networks for
Learning from Streaming Data
Anonymous authors
Paper under double-blind review
Ab stract
Current generation of memory-augmented neural networks has limited scalability
as they cannot efficiently process data that are too large to fit in the external mem-
ory storage. One example of this is lifelong learning scenario where the model
receives unlimited length of data stream as an input which contains vast majority
of uninformative entries. We tackle this problem by proposing a memory net-
work fit for long-term lifelong learning scenario, which we refer to as Long-term
Episodic Memory Networks (LEMN), that features a RNN-based retention agent
that learns to replace less important memory entries based on the retention proba-
bility generated on each entry that is learned to identify data instances of generic
importance relative to other memory entries, as well as its historical importance.
Such learning of retention agent allows our long-term episodic memory network
to retain memory entries of generic importance for a given task. We validate our
model on a path-finding task as well as synthetic and real question answering
tasks, on which our model achieves significant improvements over the memory-
augmented networks with rule-based memory scheduling as well as an RL-based
baseline that does not consider relative or historical importance of the memory.
1	Introduction
In a real world machine learning problem, it is common to process a tremendous amount of sequen-
tial data (e.g. dialogues, videos, and medical records). To model such sequential data, researchers
often use recurrent neural networks (RNNs) because of its capability to process sequentially depen-
dent data. Recently, popular variants of RNNs such as Long Short-Term Memory (LSTM, Hochre-
iter & Schmidhuber (1997)) and Gated Recurrent Unit (GRU, Chung et al. (2014)) have achieved
impressive performances on a number of tasks, such as machine translation, image annotation, and
question answering. Nevertheless, despite such impressive achievements of the recurrent neural net-
works, it is still challenging to model long sequential data such as dialogues since RNNs have a
limited memory capacity. The only memory that LSTM or RNN contains is a fixed dimensional
vector. The LSTM or RNN performs memorization by adding to, and erasing, this single vector.
This limited memory capacity can be problematic when dealing with a long sequence.
To overcome this scalability problem, researchers have proposed neural network architectures that
contain external memory module, including Neural Turing machine (NTM, Graves et al. (2014))
and End-to-End Memory Networks (Sukhbaatar et al. (2015)). These memory-augmented networks
have mechanisms to write representation to the memory cells and read from them. The addressing of
the memory cells can be done either by an index to perform sequential read/write or by contents to
perform a content-based access. The memory-augmented networks have been shown to be useful for
memory-oriented tasks such as copying, pathfinding, and question answering. Yet, they are mostly
targeting toy problems, using the external memory as a working memory in the human memory
mechanism, and need to manage a relatively small number of memory entries. Thus, there has been
less focus on how to efficiently manage the memory.
However, when the network needs to process data that are too large to fit into the memory, we
need to carefully manage the memory cell such that the external memory module contains the most
informative pieces of data. In other words, we should be able to determine which memory cell is
1
Under review as a conference paper at ICLR 2019
unlikely to be used in the future so it can be replaced with the incoming data when memory is full.
To this end, we consider this memory management problem as a learning problem and train an agent
by reinforcement learning, such that it learns to keep the most important information in memory and
evict unimportant ones.
How can we then select which memory entries are most important? To achieve this goal, we pro-
pose to train the memory module itself using reinforcement learning to delete the most uninformative
memory entry in order to maximize its reward on a future task. However, this is a challenging task
since for most of the time, this scheduling should be performed without knowing which task will
arrive when. Thus, deciding which memory to keep and which to erase should be done by consid-
ering relative generic importance of the memory entries. To tackle this challenge, we implemented
the memory retention mechanism using a spatio-temporal recurrent neural network, that can learn
relative importance among the memory entries as well as their historic importance. We refer to this
memory-augmented networks with spatio-temporal retention mechanism as Long Term Episodic
Memory Networks (LEMN). LEMN can perform selective memorization to keep a compact set of
important pieces of data that will be useful for future tasks in lifelong learning scenarios. We validate
our proposed retention mechanism against naive scheduling method as well as RL-based schedul-
ing on three different tasks, namely path-finding, episodic question answering and long question
answering, against which it significantly outperforms.
Our contribution is twofold:
•	We consider a novel task of learning from streaming data, where the size of the memory is
significantly smaller than the length of the data stream.
•	To implement a retention mechanism, we propose a retention agent that can be integrated
with existing external memory neural networks, which is trained with reinforcement learn-
ing to keep memory cells of general importance.
2	Related Work
Memory-augmented networks Graves et al. (2014) propose Neural Turing Machine (NTM),
which has a memory and a controller that reads from and writes to memory. The controller composed
of read heads and write heads uses soft-attention mechanism to access memory for differentiable
memory access. The NTM has two addressing mechanisms: content-based addressing and location-
based addressing. Location-based addressing allows a data sequence to be stored in consecutive
memory cells to preserve its sequential order. However, once the write head accesses a distant mem-
ory cells, the sequential order of information in consecutive memory cells is no longer preserved.
Graves et al. (2016) propose Differentiable Neural Computer that extends the NTM to address the
issue by introducing a temporal link matrix. As it is costly to write into memory while preserving
its sequential order, memory-augmented networks with write mechanism are mostly used in cases
where itis not necessary to track which sequential order the memory has been written (Santoro et al.,
2016; Vinyals et al., 2016; Kaiser et al., 2017; Kim et al., 2018). Unlike NTM, End-to-End Memory
Networks (MemN2N) (Sukhbaatar et al., 2015) and Dynamic Memory Networks (DMN+) (Xiong
et al., 2016) do not have write mechanism but store all the inputs into memory. For this reason, the
sequential order of the inputs are preserved at no extra cost; thus they are more suitable for episodic
question answering problems such as bAbI tasks (Weston et al., 2015). In addition, they have so-
phisticated read mechanisms that allow to reason through multiple hops (or passes in DMN+). Seo
et al. (2016) propose more advanced soft-attention based read mechanism, Bi-Directional Attention
Flow (BiDAF), which obtains impressive performance on a difficult reading comprehension dataset,
Stanford Question Answering Dataset (SQuAD, Rajpurkar et al. (2016)). Oh et al. (2016) extend
MemN2N to train deep reinforcement learning agents, Memory Q-Network (MQN) and Feedback
Recurrent Memory Q-Network (FRMQN), to solve 3D Mazes. However, such neural networks have
the limitation that the size of external memory should be large enough to store all the data.
Memory Retention Policy Most of the existing approaches (MemN2N, DMN+, BiDAF and FR-
MQN) do not consider the case where memory becomes full, and simply truncate the sequence of
data to the size of memory if it is longer than the memory size. Many of mutable external memory
neural networks employ least-recently-used (LRU) based memory retention policy, which overwrites
new data into the least used memory cell. This policy, although more reasonable than FIFO, is still
2
Under review as a conference paper at ICLR 2019
limited as it is a hand-crafted rule and does not consider actual long-term dependencies between a
memory entry and the task. This is a critical limitation in lifelong learning setting, since some of the
memory entries written in the long past and have not been accessed for long may still be necessary
to respond to queries that arrive in the far future. Our work, on the other hand, is able to learn
such long-term dependencies. DNTM (GulCehre et al., 2016) learns where to overwrite using rein-
forcement learning as done in our work. Yet, it only considers the pairwise relationships between
the current data instance and each individual memory entries, while our model learns both relative
importance and historic importance of a memory entry using a spatio-temporal RNN architecture.
3	Learning What to Remember from Streaming Data
We consider the problem of learning from a long data stream that contains large portion of unimpor-
tant, noisy data (e.g. routine greetings in dialogs) with limited memory. Formally, an agent A takes
as input a streaming data (e.g. sentences or images) X = {xι,…,xτ} and manages an external
memory M = [m4,…,mN], m, ∈ Rd where T》N. Thus, the agent should decide which mem-
ory cell to evict to store incoming data. To this end, the agent should learn the relative importance
of memory entries for a future task. In traditional reinforcement learning scheme, we can formulate
this problem as learning the policy π(a"st) to maximize a return R, where action at is a memory
cell to erase, and state st = [Mt ; xt], where Mt is the current memory and xt is the input at time t.
The agent appends xt to the memory Mt until it reaches the maximum size N.
If the memory is full, the agent erases one memory cell based on the policy π(mi |Mt, Xt) to append
Xt. Thus, we can consider 1 一 π(m∕Mt,xt) as the retention value of each memory. At arbitrary
time step tf, it encounters a task T (e.q. question answering) with a reward RT , whose reward is
defined by the specific task. For QA task, the reward will be 1 if it generated a correct answer and -1
otherwise. The instance xt which arrive at timestep t can be in any data format, and is transformed
into a memory vector representation et ∈ Rd to be stored in memory.
(a) Input-Matching LEMN
Figure 1:
^↑Θ↑Λ
一⅞↑N↑A
,93x自 一 t∕3
τθ↑æ
^↑- - ↑A
(b) Spatial LEMN
Sl	e2	e3	e4	e5
(c) Spatio-Temporal LEMN
ɛl		e3	e4	e5
Illustration of memory-retention architectures
3.1	Memory-Retention Mechanisms
In this section, we describe three different memory-retention mechanisms in detail. We first encode
input xt and each memory cell mt,i to a vector representation as follows:
ct = ψ(xt)
et,i = φ(mt,i)
where Ct, et,i ∈ Rd, ψ(∙) can be an input embedding similar to RNN controller in (Gulcehre et al.,
2016) or position encoding in (Sukhbaatar et al., 2015) and 夕(∙)can be a memory encoding layer of
the base external memory neural network. For example, MemN2N (Sukhbaatar et al., 2015) uses a
bag of words and embedding matrices to convert to memory representation.
Input-Matching LEMN This is the simplest RL-based retention mechanism that is similar to
DNTM from GulCehre et al. (2016) and utilizes the memory usage information, which We refer to
3
Under review as a conference paper at ICLR 2019
as Input-Matching LEMN (IM-LEMN, Figure 1a). The usage of each memory representation mi is
computed as the learned similarity between it and the current input xt. As in Gulcehre et al. (2016),
we least recently used (LRU) addressing by computing the exponential moving average vt of the
logit zt, the LRU factor γt, and the policy as follows:
vt,i = 0.1vt-1,i + 0.9zt,i
γt = σ(Wγct + bγ)
gt,i = zt,i - γtvt-1,i
π(mi∣Mt,xt) = Softmax(gt,i)
where Wγ ∈ Rd, bγ ∈ R, softmax(zi) is exp(zi)/ Pj exp(zj), σ(z) is 1/(1 + exp(z)). This model
estimates the policy based on the similarities between input xt and memory cells mt,i .
Spatial LEMN A major drawback of IM-LEMN is that the score of each memory depends only
on the inputxt. In other words, the score is computed independently between memory cell and input
but does not consider its relative importance to other data instances in the memory. To overcome this
limitation, we propose Spatial LEMN (S-LEMN, Figure 1b) which computes the relative importance
of memory cells to its neighbors and other memory cells using a bidirectional GRU as follows:
-→e t,i = GRUθfw (et,i, -→e t,i-1)
Qt,i = GRUθbw (et,i, ^et,i+1)
ft,i = ReLU(Wf[→ t,i, Q t,i]+ bf)
where Wf ∈ R2d×d, bf ∈ Rd, GRUθ is a Gated Recurrent Unit parameterized by θ, [-→e t,i, Q-et,i] is
a concatenation of features, ReLU is a rectified linear unit. We use multi-layer perceptron (MLP)
with scalar output to estimate the policy as follows:
ht,i = Whft,i +bh
gt,i = Wg ht,i + bg
π(mi∣Mt,xt) = Softmax(gt,i)
(1)
where Wh ∈ Rd×d/4, bh ∈ Rd/4, Wg ∈ Rd/4, bg ∈ R. Thus, it can compute the general importance
of memory cell itself and the relation between its neighbors in contrast to IM-LEMN.
Spatio-Temporal LEMN In episodic tasks, the importance of memory also changes over time
and tasks. Hence, we propose Spatio-Temporal LEMN (ST-LEMN, Figure 1c) that uses a GRU over
time to consider the historical importance as well as relative importance of each memory entry. We
simply replace the hidden layer in Equation (1) with a GRU over time as follows:
ht,i = GRUθh(ft,i,ht-1,i)
gt,i = Wg ht,i + bg
π(mi∣Mt,xt) = Softmax(gt,i)
Memory Update Using aforementioned memory-retention mechanism, the agent samples the
memory cell index i from the probability distribution π(mi∣Mt, xt). Then it erases the ith memory
cell and appends the input xt as follows:
Mt+1 = [mi, ∙∙∙ ,mi-i,mi+ι,∙∙∙ ,mN,xt].
4
Under review as a conference paper at ICLR 2019
No Operation (NOP) As done in Gincehre et al. (2016), for IM-LEMN We add a NOP memory
cell at the end of memory to consider the case where the input is not written to the memory. For S-
LEMN and ST-LEMN, We append xt to the place of NOP sich that it coild be selected for removal.
We integrate these retention mechanisms into base memory-aigmented neiral netWorks to enable
to efficiently maintain its external memory. The details of the base netWorks are given in the Ex-
periment section. We ise Asynchronois Advantage Actor-Critic (A3C, Mnih et al. (2016)) With
Generalized Advantage Estimation (GAE, Schilman et al. (2015)) to train all models.
4 Experiment
We evaliate the proposed retention agent on three different tasks in folloWing sibsections.
4.1 Maze
Oh et al. (2016) proposed a task for memory-based deep reinforcement learning (RL) agents, Where
the agent shoild navigate throigh a 3D maze and enter the correct exit, and demonstrated that
the agents With external memory oitperform the agents Withoit external memory. HoWever, they
assimed that the agent had a sifficiently large memory to store every observed cell, althoigh the
actial amoint of information Was not as mich as the size of the memory. In this experiment,
We compare the navigator agent With and Withoit ST-LEMN. We folloWed the same experimental
setip as ised in Oh et al. (2016) except that We ise A3C algorithm (Mnih et al. (2016)) With GAE
(Schilman et al. (2015)) instead of Q-Learning algorithm (Mnih et al. (2015)) to train the agent, and
ised only three actions - Move forWard, Look Left, Look Right - for expedited training. We ise
MQN and FRMQN as base netWorks to see the effect of the model Withoit recirrent connections
and With recirrent connections. We compared the performance of these base models With learned
retention and FIFO schediling inder tWo different environments.
Maze Length
(c) IMaze Siccess Rate
Figire 2: (a) Example of IMaze environment. (b) Example of Random Maze environment. (c) Siccess rate of
memory-based agents ising FIFO memory schediling and oir retention mechanism.
IMaze This environment contains an I-shaped maze, Where the agent shoild reach the correct exit
based on the color of the initial cell (See Figire 2a). We train the models on mazes With varying
lengths of corridors N = {5, 7, 9}, and validate on mazes With corridors With 15 different lengths
N = {4, 6, 8, 10, 15, 20, 25, 30, 35, 40, 100, 200}. We set the memory size to 4 for all compared
models. We observe that the agent With ST-LEMN siccessfilly retains the indicator information in
its memory While passing throigh the long corridor by removing iseless frames that describe the
corridor (Figire 3a and 3b). At the end of corridor, agent With ST-LEMN retrieves stored indicator
frame to decide Which Way to go. Agents With FIFO schediling do not retain the indicator infor-
mation and alWays exits at the same goal. FRMQN, Which is an agent that has recirrent connection
betWeen time in its context embedding can complete task correctly on mazes With short corridor
even With FIFO schediling. Yet, it fails on mazes With long corridors since it is difficilt to learn
long-term dependencies Withoit explicitly storing the cell in the memory. In contrast, We observed
that the agents With ST-LEMN can solve the maze With small fixed-sized memories regardless of
the length of maze, by learning the long-term importance of inpit data instances (Figire 2c).
Random Maze: Single Goal with Indicator We also test With the randomly generated maze as
in Oh et al. (2016) (Figire 2b), testing for the Single Goal With Indicator (SingInd) task, Where
the agent shoild reach the correct goal based on the indicator that can be observed at the starting
5
Under review as a conference paper at ICLR 2019
(a) in the corridor (b) at the bottom fork (c) in the middle (d) In front of the goal
Figure 3: Visualization of MQN retention agent’s status: (a-b) I-Maze and (c-d) Single Goal with Indicator.
The first row shows a current view of an agent, a top-down view of the maze with the current position of the
agent, and action probability distribution. Each column from the second row shows the content of memory
cells. The third and the fourth row indicate the attention value and the drop probability of each memory cell.
position. As shown in Table 1 the retention agent has significantly higher success rate compared
to the agent with FIFO scheduling, as it retains the indicator frame while it navigates through the
random maze. As shown in 3c, 3d the retention agent retains the indicator discovered at the start of
maze in its memory and retrieves its information when it needs to make a decision.
Table 1: Best success rates on SingleInd Task.
Task	Test	Large	Task	Test	Large
FIFO	68.90	60.40	FIFO	84.30	91.20
ST-LEMN 73.20 (a) MQN-5		74.80	ST-LEMN 88.50 (b) FRMQN-5		93.70
4.2 Synthetic Episodic Question Answering
Dataset Weston et al. (2015) created a synthetic dataset for episodic question answering, called
bAbI, that consists of 20 tasks. Among tasks, we evaluate memory-retention mechanisms on two
supporting facts task (task 2, Figure 4a). Additionally, We generate noisy and large version of the
two supporting facts task from open-sourced template Weston et al. (2015). Each task equally has
five questions in an episode, where all questions share context sentences given in the episode. In the
noisy two supporting fact task, which we refer to as Noisy task (Figure 4b), we inject noise sentences
into original two supporting facts task to investigate the ability of retention mechanism to filter out
the noise. We organize this synthetic dataset as follows: 60% of dataset have no noise sentence;
10% of dataset have approximately 30% noise sentences; 10% of dataset have approximately 45%
noise sentences; 10% of dataset have approximately 60% noise sentences. Totally, the length of
each episode is fixed to 45 (5 questions + 40 facts). Questions are placed after every 8 facts. In large
and noisy two supporting facts task, which is called Large task (Figure 4c), composition of tasks
is similar to Noisy but the length of episode and the position of questions vary. The length of each
episode is randomly Chosen between 20 and 80. Questions can be placed anywhere in episode.
idx	Memory
1 2 6	Mary journeyed to the bathroom Sandra went to the garden Sandra put down the milk there
Where is the milk?	garden	[6, 2]	
8 17	Daniel went to the garden Daniel dropped the f∞tball
Where is the football? bedroom [17, 12]	
19 I Sandra left the milk there 20 ∣ Daniel grabbed the football there		
Where is the milk?	bedroom [19, 16]	
22 Sandra grabbed the milk there 23 Daniel went to the kitchen	
Where is the football? kitchen [20, 23]	
25 I John travelled to the kitchen 26 ∣ Mary moved to the hallway		
Where is the football? kitchen [20, 23]	
(a) Original
idx	Memory
T	Sandra moved to the kitchen Wolves are afraid of cats Sandra put down the apple Sandra took the milk Sandra is yellow Mary is green Sandra grabbed the apple Mary went to the hallway
Where is the milk?	kitchen [1,4]	
40 41 42 43 44	Sandra let go of the football Mary is green Mary journeyed to the kitchen Mary grabbed the milk John is bored
Where is the apple?	kitchen [3	
(b) Noisy
idx	Memory
1 2 3 4 46	Sandra is thirsty Sandra is green Sandra took the apple John is bored Mary is yellow
Where is the football?	kitchen [21,31]	
Where is the milk?	bedroom [36, 38]	
49 50 74 75 76 77	Sandra is thirsty John put down the football Sandra is green Sandra is a mouse Sandra grabbed the apple Cats are afraid of sheep
Where is the milk?	bedroom [36, 38]	
(c) Large
Figure 4: Example of (a) Original task, (b) Noisy task and (c) Large task. Sentences in green are noise
sentences and ones in blue are supporting facts of each question.
Training Detail We use MemN2N(Sukhbaatar et al. (2015)) as base networks. Particularly, we
use base MemN2N with position encoding representation, 3 hops and adjacent weight tying. We set
6
Under review as a conference paper at ICLR 2019
the dimension of memory representations to d = 20. We compare FIFO, IM-LEMN, S-LEMN and
ST-LEMN on the two supporting facts task, and two modified tasks. IM-LEMN on this task uses an
average of attention logits from each hop as zt in Equation (3.1). Also, it embeds input using GRU
similar to a GRU controller in Gulcehre et al. (2016). S-LEMN and ST-LEMN use the value memory
of the first hop in the base MemN2N as a memory representation et,i in Equation (3.1). We constrain
the size of memory as 5 or 10 to validate the scheduling performance of our retention mechanism.
Since we jointly train the agent for QA task and memory retention, for stable training we pretrain
MemN2N with FIFO mechanism for 50k steps and then go on with training other mechanisms. We
train our models using ADAM optimizer (Kingma & Ba (2014)) with the learning rate of 0.001 for
200k steps on the Original and Noisy tasks, and for 400k steps on the Large task.
Results Table 2 shows the results on synthetic episodic question answering tasks. Sukhbaatar et al.
(2015) reports the lowest error by multiple agents to cope with large variance in performance, and
we follow this evaluation measure. For the Original and Noisy tasks, we measure error rate using
best performing parameter among three takes of training, and among five takes for the Large task.
As shown in table 2, our suggested memory retention mechanism significantly outperforms naive
policy and policy inspired by LRU in all cases. For more detailed analysis, we present two sampled
data from IM-LEMN and ST-LEMN in Figure 5. IM-LEMN’s selection policy seems to largely
depend on the current context, and therefore it deletes not only noise sentences but also informative
sentences as well. Compared to IM-LEMN, memory of ST-LEMN does not have any noise sentences
in its memory but evenly contains informative facts about location and object acquisition.
Table 2: Best error rates on bAbI tasks
Task	Original	Noisy	Task	Original	Noisy	Large
FIFO	41.40	50.20	FIFO	-16.50	44.10	32.40
IM-LEMN	23.70	40.20	IM-LEMN	16.10	18.90	9.00
S-LEMN	20.30	40.60	S-LEMN	-500-	4.80	5.10
ST-LEMN	17.50	11.70	ST-LEMN	4.60	3.90	5.60
(a) Memory size 5
(b) Memory size 10
Figure 5: Examples of memory state of IM-LEMN and ST-LEMN on the Large task. Idx denotes index of
sentence in one episode. Sentences in blue are supporting facts, and ones in green are irrelevant ones.
4.3 TRIVIAQA
Dataset TriviaQA(Joshi et al., 2017) is a question-answering dataset over 950K question-answer
pairs in 662K evidence documents collected manually. The problem is difficult to solve by conven-
tional models as it requires multiple reasoning with large number of sentences. The average number
of words per document is 2895, which is infeasible to handle using existing reading comprehension
models. We limit the number of words per document to 800 and use only questions that could be
spanned within 400 words out of the 800 for training for expedited training. Also, we only use the
first spanned word as labels since TriviaQA provides only the answer word and not their correct in-
dices in the document. For a test set, we use all words in a document for each question-answer pair.
Since the dataset does not provide labels for the test set, we use a validation set for test which con-
tains both distant supervision set whose labels are collected automatically and verified set evaluated
by the annotator. We evaluate our work only on the Wikipedia dataset, since previous work (Joshi
et al., 2017), (Pan et al., 2017), (Yu et al., 2018) report similar results on both datasets.
7
Under review as a conference paper at ICLR 2019
[Context]
The Italian national football team () represents Italy in association football and is controlled by
the Italian Football Federation (FIGC)z the governing body for football in Italy. Italy is one of
the most successful national teams in the history of the World Cupz having won four titles
(1934,1938,1982, 2006) and appearing in two finals (1970,1994), reaching a third place
(Ellipsis)
The 23-man squad saw notable absences with Andrea Pirlo and Sebastian Giovinco
controversially left out and Claudio Marchisio and Marco Verratti left out due to injury. Italy
opened Euro 2016 with a 2-0 victory over Belgium on 13 June. Italy qualified for the Round of
16 with one game to spare on 17 June with a lone goal by Eder for the victory against Sweden;
the first time they won the second group game in a major international tournament since Euro
2000.
(Ellipsis)
*	1986-1987 Antonio Cabrini
*	1988-1991 Giuseppe Bergomi
*	1991-1994 Franco Baresi
*	1994-2002 Paolo Maldini
*	2010-present Gianluigi Buffon
Hat-tricks
Head to head records
*	Draws include penalty shoot-outs
*	Countries that are in italics are used as a team country a nonmember to FIFA or a team
country had been defunct was on the team record
[Question]
Davide Santon, Dino Zoff and Simone Barone have all played for which national football team?
[Answer]
Italy
[State 1]
Index	Retertior	Memory information	
OO Ol 02 03 04 05 06 07 08 *09 10	-Lδδ- 1.00 1.00 0.91 0.96 0.93 0.89 0.84 0.85 0.79 0.83	The Italian national football team () represents Italy in association football (FIGC), the governing body for football in Italy. Italy is one of the most teams in the history of the World Cup, having won four titles (1934,1938, 2006) and appearing in two finals (1970, 1994)y reaching a third place (1990) (2000, 2012), one Olympic football tournament (1936) and two Central Italy's highest finish at the FIFA Confederations Cup was in 2013, when the .The national football team is known as Gli Azzurri from the traditional representing Italy. In its first two matches, the Italian nation al team wore title in 1934. They achieved their second title in a 4-2 defeat of Hungary, The Italian team was bitterly condemned upon their return home, while David who killed Goliath. 1968-1976: European champions and World Cup
[State N]
Index	RetertiOn	MemOry information	
00 Ol 02 03 04 05 06 07 08 09 *10	-Lδδ- 1.00 1.00 0.90 0.98 0.93 0.90 0.89 0.94 1.00 0.47	The Italian national football team () represents Italy in association football (FIGC), the governing body for football in Italy. Italy is one of the most teams in the history of the World Cupz having won four titles (1934,1938, 2006) and appearing in two finals (1970,1994), reaching a third place (1990) (2000, 2012), one Olympic football tournament (1936) and two Central Italy's highest finish at the FIFA Confederations Cup was in 2013, when the The national football team is known as Gli Azzurri from the traditional title in 1934. They achieved their second title in a 4-2 defeat of Hungar½ team in the first round. 1978-1986: The third World Cup In the 1978 FIFA by Milan president and politician Silvio Berlusconi. In the 2002 World Cup matches and friendlies are currently televised by Rai.
When no more context information to read, perform QA based on the last state information
(a) Question-answering pair and its context	(b) The operation process of our model
Figure 6: (a) An example of TriviaQA dataset, (b) A visualization of how our model operates in order to solve
the problem. LEMN sequentially reads the sentence one by one while scheduling the memory to retain only
the important sentences. During the process in (b), it retained the word ‘Italy’(Thick blue) in order to answer
a given question, by generating high retention value(Thick blue) on the memory cell containing ‘Italy’, and
decides to erase uninformative memory cells with low retention value (Thick red / * Mark).
Base network As base network, we use BiDAF(Seo et al., 2016), which is one of the state-of-
the-art reading comprehension model that predicts the indices for the exact location of the answer
in the given document and modified the word-level intermediate representations to sentence-level
representations using RNN to handle an entire sentence at a time. We set the memory size N = 10,
and the word length per memory slot to 20. We trained our memory-augmented BiDAF using
ADAM optimizer (Kingma & Ba, 2014) with the initial learning rate of 0.0001.
Results Table 3 shows the results on TriviaQA dataset. In (Joshi et al., 2017), they selected the
highest score for ExactMatch and F1 score among multiple documents that could find the answer
to a question. Our model outperforms all baselines because it has the ability to correctly identify
informative sentences that are required to answer a given question. As shown in Figure 6, when new
context information arrives at the model, our model determines which memory information is the
most unnecessary based on the predicted the retention value.
Table 3: Q&A accuracy on Distant supervision (Left) and Verified (Right) subsets of Trivia dataset.
Model	EXaCtMatCh	F1sCore	Model	ExactMatch	F1score
FIFO	18:49	20:33	FIFO	1604	17.63
IM-LEMN	34.92	38:72	IM-LEMN	32.07	33.75
S-LEMN	42:97	46:61	S-LEMN	3836	41.27
ST-LEMN	45.21	49.04	ST-LEMN	44.33	47.24
5 Conclusion
We considered the problem of learning from streaming data, where the size of the data is too large
to fit into the memory of a memory-augmented network. To solve the problem of retaining impor-
tant data instances, we proposed Long-term Episodic Memory Network (LEMN), which is able to
remember data instances of long-term generic importance. Using reinforcement learning, LEMN
learns to decide which memory entry to replace when the memory becomes full, based on both rel-
ative importance between memory entries and their historical importance. We validated our LEMN
on three different tasks, namely path finding, episodic question answering and long question an-
swering against rule-based memory scheduling methods as well as an RL-agent trained without
consideration of relative and historic importance of memory entries, against which it significantly
outperforms. Further analysis of LEMN shows that such good performance comes from its ability
to retain instances of long-term importance. As future work, we plan to apply our model to dialogue
generation task for conversational agents.
8
Under review as a conference paper at ICLR 2019
References
JUnyoUng Chung, Caglar Gulcehre, KyUngHyUn Cho, and YoshUa Bengio. Empirical evaluation of
gated recurrent neural networks on sequence modeling. CoRR, abs/1412.3555, 2014.
Alex Graves, Greg Wayne, and Ivo Danihelka. NeUral tUring machines. CoRR, abs/1410.5401,
2014.
Alex Graves, Greg Wayne, Malcolm Reynolds, Tim Harley, Ivo Danihelka, Agnieszka Grabska-
Barwinska, Sergio Gomez Colmenarejo, Edward Grefenstette, Tiago Ramalho, John AgapioU,
Adria Puigdomenech Badia, Karl Moritz Hermann, Yori Zwols, Georg Ostrovski, Adam Cain,
Helen King, Christopher SUmmerfield, Phil BlUnsom, Koray KavUkcUoglU, and Demis Hassabis.
Hybrid compUting Using a neUral network with dynamic external memory. Nature, 538(7626):
471-476,2016. doi: 10.1038∕natUre20101.
Caglar GUlcehre, Sarath Chandar, Kyunghyun Cho, and Yoshua Bengio. Dynamic neUral tUring
machine with soft and hard addressing schemes. CoRR, abs/1607.00036, 2016.
SePP Hochreiter and JUrgen SchmidhUber. Long short-term memory. Neural Comput., 9(8):1735—
1780, November 1997. ISSN 0899-7667. doi: 10.1162/neco.1997.9.8.1735.
Mandar Joshi, EUnsol Choi, Daniel S. Weld, and LUke Zettlemoyer. Triviaqa: A large scale distantly
sUPervised challenge dataset for reading comPrehension. CoRR, abs/1705.03551, 2017.
LUkasz Kaiser, Ofir NachUm, AUrko Roy, and Samy Bengio. Learning to remember rare events.
CoRR, abs/1703.03129, 2017.
YoUngjin Kim, MinjUng Kim, and GUnhee Kim. Memorization Precedes generation: Learning
UnsUPervised gans with memory networks. CoRR, abs/1803.01500, 2018.
Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic oPtimization. CoRR,
abs/1412.6980, 2014.
Volodymyr Mnih, Koray KavUkcUoglU, David Silver, Andrei A. RUsU, Joel Veness, Marc G. Belle-
mare, Alex Graves, Martin Riedmiller, Andreas K. Fidjeland, Georg Ostrovski, Stig Petersen,
Charles Beattie, Amir Sadik, Ioannis AntonogloU, Helen King, Dharshan KUmaran, Daan Wier-
stra, Shane Legg, and Demis Hassabis. HUman-level control throUgh deeP reinforcement learning.
Nature, 518(7540):529-533, 02 2015.
Volodymyr Mnih, Adria PUigdomenech Badia, Mehdi Mirza, Alex Graves, Timothy P. Lillicrap, Tim
Harley, David Silver, and Koray KavUkcUoglU. AsynchronoUs methods for deeP reinforcement
learning. CoRR, abs/1602.01783, 2016.
JUnhyUk Oh, Valliappa Chockalingam, Satinder P. Singh, and Honglak Lee. Control of memory,
active perception, and action in minecraft. CoRR, abs/1605.09128, 2016.
BoyUan Pan, Hao Li, ZhoU Zhao, Bin Cao, Deng Cai, and Xiaofei He. MEMEN: mUlti-layer em-
bedding with memory networks for machine comprehension. CoRR, abs/1707.09098, 2017.
Pranav RajpUrkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. SqUad: 100, 000+ qUestions
for machine comprehension of text. CoRR, abs/1606.05250, 2016.
Adam Santoro, Sergey BartUnov, Matthew Botvinick, Daan Wierstra, and Timothy Lillicrap. Meta-
learning with memory-aUgmented neUral networks. In Maria Florina Balcan and Kilian Q. Wein-
berger (eds.), Proceedings of The 33rd International Conference on Machine Learning, volUme 48
of Proceedings of Machine Learning Research, pp. 1842-1850, New York, New York, USA, 20-
22 JUn 2016. PMLR.
John SchUlman, Philipp Moritz, Sergey Levine, Michael I. Jordan, and Pieter Abbeel. High-
dimensional continUoUs control Using generalized advantage estimation. CoRR, abs/1506.02438,
2015.
Min Joon Seo, AnirUddha Kembhavi, Ali Farhadi, and Hannaneh Hajishirzi. Bidirectional attention
flow for machine comprehension. CoRR, abs/1611.01603, 2016.
9
Under review as a conference paper at ICLR 2019
Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. End-to-end memory networks.
In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett (eds.), Advances in Neural
Information Processing Systems 28, pp. 2440-2448. Curran Associates, Inc., 2015.
Oriol Vinyals, Charles Blundell, Tim Lillicrap, koray kavukcuoglu, and Daan Wierstra. Matching
networks for one shot learning. In D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon, and
R. Garnett (eds.), Advances in Neural Information Processing Systems 29, pp. 3630-3638. Curran
Associates, Inc., 2016.
Jason Weston, Antoine Bordes, Sumit Chopra, and Tomas Mikolov. Towards ai-complete question
answering: A set of prerequisite toy tasks. CoRR, abs/1502.05698, 2015.
Caiming Xiong, Stephen Merity, and Richard Socher. Dynamic memory networks for visual and
textual question answering. In Proceedings of the 33rd International Conference on International
Conference on Machine Learning - Volume 48, ICML’16, pp. 2397-2406. JMLR.org, 2016.
Adams Wei Yu, David Dohan, Minh-Thang Luong, Rui Zhao, Kai Chen, Mohammad Norouzi,
and Quoc V. Le. Qanet: Combining local convolution with global self-attention for reading
comprehension. CoRR, abs/1804.09541, 2018.
A Shuffling Memory Entries
We evaluate the effect of perturbing a sequential order of memory cells on an episodic question
answering dataset. We perturb the sequential order of the memory of our models (S-LEMN and
ST-LEMN) when estimating the policy π(at∣st) in training phase. We compare the models with the
memory shuffled (Shuffled S-LEMN and Shuffled ST-LEMN) and ones with the sequential order
preserved (S-LEMN and ST-LEMN) in Table 4. We observe that perturbing a sequential order
results in the performance degeneration. This result shows that our models learn the relation between
ordered memory cells to perform the episodic task where a sequential order is obviously important.
Table 4: Best error rates on bAbI tasks.
Task	Original	Noisy	Task	Original	Noisy	Large
Shuffled S-LEMN	37.50	41.60	Shuffled S-LEMN	^^1270^^	38.40	17.70
Shuffled ST-LEMN	34.70	40.60	Shuffled ST-LEMN	7.10	38.00	6.30
S-LEMN	20.30	40.60	S-LEMN	-^500^^	4.80	5.10
ST-LEMN	17.50	11.70	ST-LEMN	4.60	3.90	5.60
(a) Memory size 5
(b) Memory size 10
10