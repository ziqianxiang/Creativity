Figure 1: An input-output example. The input is a sequence of tokens [“a", “=", “1", “if", “x",“==", “y"], and the output is its parse tree. The non-terminals are denoted by boxes, and terminals aredenoted by circles.
Figure 2: A full example to parse x+y into a parse tree. 9 instructions are executed to constructthe final tree. We use red labels to illustrate the changes after performing each operation. For easeof illustration, if a tree has only one node, which is a terminal, then we simply use this terminal torepresent both the root node and the tree in the stack; otherwise, we draw the tree next to the stack,and refer to it with a unique label in the stack.
Figure 3: The Neural Parsing Program Model.
Figure 4: A copy of Figure 2 to provide a full example to parse x+y into a parse tree. 9 instructionsare executed to construct the final tree. We use red labels to illustrate the changes after performingeach operation. For ease of illustration, if a tree has only one node, which is a terminal, then wesimply use this terminal to represent both the root node and the tree in the stack; otherwise, we drawthe tree next to the stack, and refer to it with a unique label in the stack.
Figure 5: The (partial) execution traces for parsing “x+y*z" (above) and “x*y*z" (bottom) respec-tively. For “x+y*z", “y*z" needs to be associated; when “y" is reduced to a tree with the root Id,the token "*" needs to be shifted into the stack top. On the other hand, for “x*y*z", “x*y" needs tobe associated, thus after “y" is reduced, the parse tree of “x*y" should be popped before shifting thenext token "*" in the input. In this case, only the function ID in the stack top, i.e., 1 (above) or 2(bottom), can distinguish whether SHIFT or RETURN should be executed next.
Figure 6: The illustration of the reward function rf . The instructions colored orange indicate theground truth, where none of inst1, inst2, and inst 3 is a CALL instruction. The reward function rffor the prediction of the first CALL’s argument 1 (in the green circle) is the summation of four losses,where the loss function is the cross entropy loss.
Figure 7: A wrong execution trace that can correctly parse x+y. The wrong operations (i.e., steps 3,4, 6, and 8) are colored purple.
