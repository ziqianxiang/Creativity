Published as a conference paper at ICLR 2018
Auto-Encoding Sequential Monte Carlo
Tuan Anh Let, Maximilian IgH, Tom Rainforthr Tom Jint，§, Frank Woodt
^Department of Engineering Science, University of Oxford
^Department of Statistics, University of Oxford
§Department of Statistics, University of Warwick
{tuananh,igl,jin,fwood}@robots.ox.ac.uk, rainforth@stats.ox.ac.uk
Ab stract
We build on auto-encoding sequential Monte Carlo (aesmc):1 a method for model
and proposal learning based on maximizing the lower bound to the log marginal
likelihood in a broad family of structured probabilistic models. Our approach
relies on the efficiency of sequential Monte Carlo (smc) for performing inference
in structured probabilistic models and the flexibility of deep neural networks
to model complex conditional probability distributions. We develop additional
theoretical insights and experiment with a new training procedure which can
improve both model and proposal learning. We demonstrate that our approach
provides a fast, easy-to-implement and scalable means for simultaneous model
learning and proposal adaptation in deep generative models.
1	Introduction
We build upon aesmc (Le et al., 2017), a method for model learning that itself builds on variational
auto-encoders (vaes) (Kingma & Welling, 2014; Rezende et al., 2014) and importance weighted
auto-encoders (iwaes) (Burda et al., 2016). Aesmc is similarly based on maximizing a lower bound
to the log marginal likelihood, but uses smc (Doucet & Johansen, 2009) as the underlying marginal
likelihood estimator instead of importance sampling (is). For a very wide array of models, particularly
those with sequential structure, smc forms a substantially more powerful inference method than is,
typically returning lower variance estimates for the marginal likelihood. Consequently, by using
smc for its marginal likelihood estimation, aesmc often leads to improvements in model learning
compared with vaes and iwaes. We provide experiments on structured time-series data that show
that aesmc based learning was able to learn useful representations of the latent space for both
reconstruction and prediction more effectively than the iwae counterpart.
Aesmc was introduced in an earlier preprint (Le et al., 2017) concurrently with the closely related
methods of Maddison et al. (2017); Naesseth et al. (2017). In this work we take these ideas further by
providing new theoretical insights for the resulting evidence lower bounds (elbos), extending these
to explore the relative efficiency of different approaches to proposal learning, and using our results to
develop a new and improved training procedure. In particular, we introduce a method for expressing
the gap between an elbo and the log marginal likelihood as a Kullback-Leibler (kl) divergence
between two distributions on an extended sampling space. Doing so allows us to investigate the
behavior of this family of algorithms when the objective is maximized perfectly, which occurs only if
the kl divergence becomes zero. In the iwae case, this implies that the proposal distributions are
equal to the posterior distributions under the learned model. In the aesmc case, it has implications
for both the proposal distributions and the intermediate set of targets that are learned. We demonstrate
that, somewhat counter-intuitively, using lower variance estimates for the marginal likelihood can
actually be harmful to proposal learning. Using these insights, we experiment with an adaptation to
the AESMC algorithm, which we call alternating ELBOs, that uses different lower bounds for updating
the model parameters and proposal parameters. We observe that this adaptation can, in some cases,
improve model learning and proposal adaptation.
1This work builds upon an earlier preprint (Le et al., 2017) along with the independent, simultaneously
developed, closely related, work of Maddison et al. (2017) and Naesseth et al. (2017).
1
Published as a conference paper at ICLR 2018
2	Background
2.1	State-Space Models
State-space models (SSMs) are probabilistic models over a set of latent variables x1:T and observed
variables yi：T. Given parameters θ, a SSM is characterized by an initial density μθ(xi), a series
of transition densities ft,θ (χt∣χLt-ι), and a series of emission densities gt,θ (yt|xi：t) with thejoint
density being pθ(xi：T,yi：T) = μθ(xi) QT=2 ft,θ(xt|xi：t-i) QT=i gt,θ(yt|xi：t).
We are usually interested in approximating the posterior pθ (xi:T |yi:T) or the expectation of some test
function 夕 under this posterior I(夕)：= J 夕(xi：T)pθ(xi：T|yi：T) dxi：T. We refer to these two tasks
as inference. Inference in models which are non-linear, non-discrete, and non-Gaussian is difficult
and one must resort to approximate methods, for which smc has been shown to be one of the most
powerful approaches (Doucet & Johansen, 2009).
We will consider model learning as a problem of maximizing the marginal likelihood pθ (yi：T) =
pθ (xi：T, yi：T) dxi：T in the family of models parameterized by θ.
2.2	Sequential Monte Carlo
SMC performs approximate inference on a sequence of target distributions (∏t(x±t))T=i∙ In the
context of SSMs, the target distributions are often taken to be (pθ(xi：t|yi：t))T=i. Given a parameter φ
and proposal distributions qi,φ(xi∣yi) and (qt,φ(xt∣yLt,x±t-i))T=2 from which we can sample and
whose densities we can evaluate, smc is described in Algorithm 1.
Using the set of weighted particles (xk：T, WT)3i at the last time step, we can approximate the pos-
terior as PK=I WTδ欧 τ (xi：T) and the integral IW as PK=I WT夕(xk：T), where WT := WT/ Pj WT
is the normalized weight and δz is a Dirac measure centered on z. Furthermore, one can obtain an
unbiased estimator of the marginal likelihood pθ (yi：T) using the intermediate particle weights:
T
ZSMC = ɪɪ
t=i
(1)
Algorithm 1: Sequential Monte Carlo
Data: observed values yi：T, model parameters θ, proposal parameters φ
begin
Sample initial particle values Xk 〜qi,φ(∙∣yi).
Compute and normalize weights:
k = μθ (Xk )gi,θ (yi|xk)	-k = Wk
Wi = q" ∣yi)	,	Wi = ∑‰W'.
Initialize particle set: Xk J Xk
for t = 2, 3, . . . , T do
Sample ancestor index ak-i 〜 Discrete(∙∣Wi-i,..., WK11).
ak
Sample particle value Xk 〜qt,φ(∙∣yLt,xLt-i).
ak
Update particle set Xk：t J (XIt-1i,xk).
Compute and normalize weights:
ak
k _ ft,θ(Xt |xi：t-i)gt,θ(yt|xi：t)	-k _	Wt
Wt =	ak	,	Wt = Pκ
qt,φ(xk |yi：t,xitt-1i)	Te=i
Compute marginal likelihood: ZSMC = QT=i K PK=i Wk.
return particles (Xk：T)3i, weights (WT)3i, marginal likelihood estimate ZSMC
2
Published as a conference paper at ICLR 2018
The sequential nature of smc and the resampling step are crucial in making smc scalable to large
T . The former makes it easier to design efficient proposal distributions as each step need only
target the next set of variables xt . The resampling step allows the algorithm to focus on promising
particles in light of new observations, avoiding the exponential divergence between the weights of
different samples that occurs for importance sampling as T increases. This can be demonstrated
both empirically and theoretically (Del Moral, 2004, Chapter 9). We refer the reader to (Doucet &
Johansen, 2009) for an in-depth treatment of smc.
2.3	Importance Weighted Auto-Encoders
Given a dataset of observations (y(n))nN=1, a generative network pθ(x, y) and an inference net-
work qφ(x∣y), IWAEs (Burda et al., 2016) maximize 焉 PN=I ELBOIS(θ, φ, y(n)) where, for a given
observation y, the ELB OIS (with K particles) is a lower bound on log pθ (y) by Jensen’s inequality:
ELBOIS(θ, φ, y) =
/ Qis (x1:K )log ZIS (x1:K )dx1:K
≤ log pθ (y), where
(2)
Qιs(χ1:K) = YY qφ(χk∣y), "1K) = ⅛ XPjk⅛).	⑶
Note that for K = 1 particle, this objective reduces to a VAE (Kingma & Welling, 2014; Rezende
et al., 2014) objective we will refer to as
ELBOVAE(θ, φ,y) = / qφ(x∣y)(logPθ(x,y) - logq°(x∣y))dx.	(4)
The iwae optimization is performed using stochastic gradient ascent (sga) where a sample from
QkK=1qφ(xk |y(n)) is obtained using the reparameterization trick (Kingma & Welling, 2014) and
the gradient Nn PN=I Vθ,φlog (PK=I Pθ(χk,y(n))) is used to perform an optimization step.
3	Auto-Encoding Sequential Monte Carlo
aesmc implements model learning, proposal adaptation, and inference amortization in a similar
manner to the vae and the iwae: it uses sga on an empirical average of the elbo over observations.
However, it varies in the form of this elbo. In this section, we will introduce the aesmc elbo,
explain how gradients of it can be estimated, and discuss the implications of these changes.
3.1	Objective Function
Consider a family of SSMS {pθ(xi：T,yi：T) : θ ∈ Θ} and a family of proposal distributions
{qφ(χi:T|yi：T) = qι,φ(χι∣yι) QT=2 qt,0(xt|xi：t-i,yi：t) ： Φ ∈ Φ}. Aesmc uses an elbo ob-
jective based on the SMC marginal likelihood estimator (1). In particular, for a given yi:T, the
objective is defined as
ELBOSMC(θ,φ,yi:T )：= / QSMC(xi：K ,。1：K-i)log ZSMC(X1：K ,a；：K-I)dx；：K da1:K-1,	(5)
where ZSMC(X1：K, a1：K—i) is defined in (1) and QSMC is the sampling distribution of SMC,
QSMC(X1：K,a1：K-I) = (∏ qι,φ(Xk)) (∏ ∏ qt,φ(Xk度二)∙DiSCrete(ak-i|w1K)).⑹
k=i	t=2 k=i
ELBOSMC forms a lower bound to the log marginal likelihood log Pθ (yi：T) due to Jensen’s inequality
and the unbiasedness of the marginal likelihood estimator. Hence, given a dataset (yi(n：T) )nN=i, we
can perform model learning based on maximizing the lower bound of N PnN=Ilog Pθ (y(nT) as a
surrogate target, namely by maximizing
1N
J(θ,φ) ：= N EELBOSMc(θ,φ,y(nT).	⑺
n=i
3
Published as a conference paper at ICLR 2018
For notational convenience, we will talk about optimizing elbos in the rest of this section. However,
we note that the main intended use of aesmc is to amortize over datasets, for which the elbo is
replaced by the dataset average J (θ, φ) in the optimization target. Nonetheless, rather than using the
full dataset for each gradient update, will we instead use minibatches, noting that this forms unbiased
estimator.
3.2	Gradient Estimation
We describe a gradient estimator used for optimizing ELBOSMC (θ, φ, y1：T ) using SGA. The SMC
sampler in Algorithm 1 proceeds by sampling x11：K, a11：K, x21：K, . . . sequentially from their respec-
k
tive distributions QkK=1 q1(x1k), QkK=1 Discrete(a1k |w11：K), QkK=1 q2(x2k|x11 ), . . . until the whole
particle-weight trajectory (x11：：TK, a11：：TK-1) is sampled. From this trajectory, using equation (1), we can
obtain an estimator for the marginal likelihood.
Assuming that the sampling of latent variables x11：：TK is reparameterizable, we can make their sampling
independent of (θ, φ). In particular, assume that there exists a set of auxiliary random variables
E弋：T where Ek 〜St and a set of reparameterization functions rt. We can simulate the SMC sampler
= x1k, then for t = 2, . . . , T
E1K 〜 Qk=ι st, and setting
by first sampling e^k ~ Qk=I si and setting Xk = rι(Ek) and Xk
QkK=1 Discrete(atk-1 |wt1-:K1) and
cycling through sampling a1-K 〜
ak
Xt = rt(Et ,x1：t-1) and x1:t =(
ak
(xi：t-i，xk). We use the resulting reparameterized sample of
(xl：K, a1：K-i) to evaluate the gradient estimator Vθ,φ log ZSMC(xl：K, a1lK-ι).
To account for the discrete choices of ancestor indices atk one could additionally use the REIN-
force (Williams, 1992) trick, however in practice, we found that the additional term in the estimator
has problematically high variance. We explore various other possible gradient estimators and em-
pirical assessments of their variances in Appendix A. This exploration confirms that including the
additional reinforce terms leads to problematically high variance, justifying our decision to omit
them, despite introducing a small bias into the gradient estimates.
3.3	Bias & Implications on the Proposals
In this section, we express the gap between elbos and the log marginal likelihood as a kl divergence
and study implications on the proposal distributions. We present a set of claims and propositions
whose full proofs are in Appendix B. These give insight into the behavior of aesmc and show the
advantages, and disadvantages, of using our different elbo. This insight motivates Section 4 which
proposes an algorithm for improving proposal learning.
∙-v
Definition 1. Given an unnormalized target density P : X → [0, ∞) with normalizing constant
∙-v
ZP > 0, P := P/ZP, and a proposal density Q : X → [0, ∞), then
∙-v
f 〜、、P(x),
ELBO :=	Q(x)log--4∙dx,
Q(x)
is a lower bound on log ZP and satisfies
ELBO = log ZP - KL (Q||P) .
(8)
(9)
This is a standard identity used in variational inference and vaes. In the case of vaes, applying
∙-v
Definition 1 with P being pθ(x|y), P being pθ(x, y), ZP being pθ(y), and Q being qφ(x∣y), we can
directly rewrite (4) as ELBOVAe(Θ, Φ,y) = logPθ(y) — KL (qφ(x∣y)∣∣Pθ(x∣y)).
The key observation for expressing such a bound for general elbos such as elboIS and elboSMC
is that the target density P and the proposal density Q need not directly correspond to pθ(x|y) and
qφ(x|y). This allows us to view the underlying sampling distributions of the marginal likelihood
Monte Carlo estimators such as QIS in (3) and QSMC in (6) as proposal distributions on an extended
space X. The following claim uses this observation to express the bound between a general ELBO
and the log marginal likelihood as kl divergence from the extended space sampling distribution to a
corresponding target distribution.
4
Published as a conference paper at ICLR 2018
ʌ
Claim 1. Given a non-negative unbiased estimator ZP (x) ≥ 0 of the normalizing constant ZP
where x is distributed according to the proposal distribution Q(x), the following holds:
ELBO = /Q(x)logZZp(x)dx = logZp — KL (Q||P),
ʌ
, Q( Q	Q(X)ZP(X)
where P (x)=-----------
ZP
is the implied normalized target density.
(10)
(11)
ʌ ʌ
In the case of IWAEs, we can apply Claim 1 with Q and ZP being QIS and ZIS respectively as defined
in (3) and ZP being pθ(y). This yields
ELB OIS (θ, φ,y) = log pθ (y) — KL (QIS||PIS) , where
1K
PIS(XLK) = κ£ (qφ(χ1∣y)…qφ(χk 1∣y)pθ(χk∣y)qφ(χk+1∣y) ∙∙∙qφ(χK|y)).
k=1
(12)
(13)
Similarly, in the case of aesmc, we obtain
ELBOSMC (θ, φ, y1:T) = log pθ (y1:T) — KL (QSMC||PSMC) , where	(14)
PSMC(X 1:K, a1：K-I) = QSMC(X 1:K, a1：K-I)ZSMC(x1：K, a11K-l"pθ(y1:T).	(15)
Having expressions for the target distribution P and the sampling distribution Q for a given ELB O
allows us to investigate what happens when we maximize that elbo, remembering that the kl
term is strictly non-negative and zero if and only if P = Q. For the VAE and IWAE cases then,
provided the proposal is sufficiently flexible, one can always perfectly maximize the elbo by setting
Pθ(X∣y) = qφ(X∣y) for all x. The reverse implication also holds: if ELBOVAE = log ZP then it
must be the case that pθ (X∣y) = qφ(X∣y). However, for aesmc, achieving ELBO = log ZP is only
possible when one also has sufficient flexibility to learn a particular series of intermediate target
distributions, namely the marginals of the final target distribution. In other words, it is necessary to
learn a particular factorization of the generative model, not just the correct individual proposals, to
achieve P = Q and thus ELBOSMC = ZP. These observations are formalized in Propositions 1 and 2
below.
Proposition 1. QIS (X1:K) = PIS (X1:K) for all X1:K if and only if q(X|y) = p(X|y) for all X.
Proposition 2. IfK > 1, then PSMC(X11::TK, a11::TK-1) = QSMC(X11::TK, a11::TK-1) for all (X11::TK, a11::TK-1) if
and only if
1.	nt(X1:t) = pp(X1:T|y1:T)dXt+1:T = p(X1:t|y1:T) forall X1:t and t =1,...,T, and
2.	q1(X1|y1) = p(X1 |y1:T) for all X1 and qt(Xt|X1:t-1, y1:t) = p(X1:t |y1:T)/p(X1:t-1 |y1:T)
for t = 2, . . . , Tfor all X1:t,
where πt (X1:t) are the intermediate targets used by SMC.
Proposition 2 has the consequence that if the family of generative models is such that the first
condition does not hold, we will not be able to make the bound tight. This means that, except for a
very small class of models, then, for most convenient parameterizations, it will be impossible to learn
a perfect proposal that gives a tight bound, i.e. there will be no θ and φ such that the above conditions
can be satisfied. However, it also means that elboSMC encodes important additional information
about the implications the factorization of the generative model has on the inference—the model
depends only on the final target ∏t(xi：T) = Pθ(xi：t|y1:T), but some choices of the intermediate
targets ∏t(X1:t) will lead to much more efficient inference than others. Perhaps more importantly,
smc is usually a far more powerful inference algorithm than importance sampling and so the aesmc
setup allows for more ambitious model learning problems to be effectively tackled than the vae or
iwae. After all, even though it is well known in the smc literature that, unlike for is, most problems
have no perfect set of smc proposals which will generate exact samples from the posterior (Doucet
& Johansen, 2009), smc still gives superior performance on most problems with more than a few
dimensions. These intuitions are backed up by our experiments that show that using elboSMC
regularly learns better models than using elboIS.
5
Published as a conference paper at ICLR 2018
4	Improving Proposal Learning
In practice, one is rarely able to perfectly drive the divergence to zero and achieve a perfect proposal.
In addition to the implications of the previous section, this occurs because q@(x1：T |yi：T) may not be
sufficiently expressive to represent pθ (xi：T |yi：T) exactly and because of the inevitable sub-optimality
of the optimization process, remembering that we are aiming to learn an amortized inference artifact,
rather than a single posterior representation. Consequently, to accurately assess the merits of
different elbos for proposal learning, it is necessary to consider their finite-time performance. We
therefore now consider the effect the number of particles K has on the gradient estimators for ELBOIS
and elboSMC.
Counter-intuitively, it transpires that the tighter bounds implied by us-
ing a larger K is often harmful to proposal learning for both IWAE and
AESMC. At a high-level, this is because an accurate estimate for ZP can be
achieved for a wide range of proposal parameters φ and so the magnitude
of Vφ ELBO reduces as K increases. Typically, this shrinkage happens
faster than increasing K reduces the standard deviation of the estimate and
so the standard deviation of the gradient estimate relative to the problem
scaling (i.e. as a ratio of true gradient Vφ ELBO) actually increases. This
effect is demonstrated in Figure 1 which shows a kernel density estimator
for the distribution of the gradient estimate for different K and the model
given in Section 5.2. Here we see that as we increase K, both the expected
gradient estimate (which is equal to the true gradient by unbiasedness) and
standard deviation of the estimate decrease. However, the former decreases
faster and so the relative standard deviation increases. This is perhaps
Figure 1: Density es-
timate of Vφ ELBO for
different K
easiest to appreciate by noting that for K > 10, there is a roughly equal probability of the estimate
being positive or negative, such that we are equally likely to increase or decrease the parameter value
at the next SGA iteration, inevitably leading to poor performance. On the other hand, when K = 1,
it is far more likely that the gradient estimate is positive than negative, and so there is clear drift to
the gradient steps. We add to the empirical evidence for this behavior in Section 5. Note the critical
difference for model learning is that Vθ ELBO does not, in general, decrease in magnitude as K
increases. Note also that using a larger K should always give better performance at test time; it may
though be better to learn φ using a smaller K.
In simultaneously developed work (Rainforth et al., 2017), we formalized this intuition in the iwae
setting by showing that the estimator of Vφ ELBOIS (θ, φ, x) with K particles, denoted by IK, has the
following signal-to-noise ratio (snr):
SNR :
E[Ik ]
PVar[Iκ ]
(16)
We thus see that increasing K reduces the SNR and so the gradient updates for the proposal will
degrade towards pure noise if K is set too high.
4.1	Alternating ELBOs
To address these issues, we suggest and investigate the alternating elbos (alt) algorithm which
updates (θ, φ) in a coordinate descent fashion using different ELBOs, and thus gradient estimates,
for each. We pick a θ-optimizing pair and a φ-optimizing pair (Aθ, Kθ), (Aφ, Kφ) ∈ {IS, SMC} ×
{1, 2, . . . }, corresponding to an inference type and number of particles. In an optimization step, we
obtain an estimator for Vθ ELBOAθ with Kθ particles and an estimator for Vφ ELBOAφ with Kφ
particles which we call gθ and gφ respectively. We use gθ to update the current θ and gφ to update
the current φ. The results from the previous sections suggest that using Aθ = SMC and Aφ = IS
with a large Kθ and a small Kφ may perform better model and proposal learning than just fixing
(Aθ, Kθ) = (Aφ, Kφ) to (SMC, large) since using Aφ = IS with small Kφ helps learning φ (at least
in terms of the SNR) and using Aθ = SMC with large Kθ helps learning θ. We experimentally observe
that this procedure can in some cases improve both model and proposal learning.
6
Published as a conference paper at ICLR 2018
5	Experiments
We now present a series of experiments designed to answer the following questions: 1) Does
tightening the bound by using either more particles or a better inference procedure lead to an adverse
effect on proposal learning? 2) Can aesmc, despite this effect, outperform iwae? 3) Can we further
improve the learned model and proposal by using alt?
First we investigate a linear Gaussian state space model (lgssm) for model learning and a latent
variable model for proposal adaptation. This allows us to compare the learned parameters to the
optimal ones. Doing so, we confirm our conclusions for this simple problem.
We then extend those results to more complex, high dimensional observation spaces that require
models and proposals parameterized by neural networks. We do so by investigating the Moving
Agents dataset, a set of partially occluded video sequences.
5.1	Linear Gaussian State Space Model
Given the following lgssm
p(xι) = Normal (xi；0,12) ,	(17)
p(xt |xt-1) = Normal xt; θ1xt-1, 12 ,	t = 2, . . . T,	(18)
p(yt∣xt) = Normal (yt； θ2xt, √012) ,	t = 1,...,T,	(19)
we find that optimizing ELBOSMC(θ, φ, y1:T) w.r.t. θ leads to better generative models than optimizing
ELBOIS(θ, φ, y1:T). The same is true for using more particles.
We generate a sequence y1:T forT = 200 by sampling from the model withθ = (θ1,θ2) = (0.9, 1.0).
We then optimize the different ELBOs w.r.t. θ using the bootstrap proposal qι(χι ∣yι) = μθ(xi) and
qt(xt∣xι∙∙t-ι,yι∙∙t) = ft,θ(xt|xi：t-i). Because we use the bootstrap proposal, gradients w.r.t. to θ
are not backpropagated through q.
We use a fixed learning rate of 0.01 and optimize for 500 steps using SGA. Figure 2 shows that the
convergence ofboth logpθ (yi：T) to maxθ logpθ (yi：T) and θ to argmaxθ logpθ (yi：T) is faster when
elboSMC and more particles are used.
POOqIWIa IEU'sbJEN MOJ
Figure 2: (Left) Log marginal likelihood analytically evaluated at every θ during optimization; the
black line indicates maxθ log pθ (yi：T) obtained by the expectation maximization (EM) algorithm.
(Right) learning of model parameters; the black line indicates argmaxθ logpθ (yi：T) obtained by the
em algorithm.
100	200	300	400	500
Optimization Step
5.2	Proposal Learning
We now investigate how learning φ, i.e. the proposal, is affected by the the choice of ELBO and the
number of particles.
7
Published as a conference paper at ICLR 2018
Consider a simple, fixed generative modelp(μ)p(x∣μ) = Normal(μ; 0,12)Normal(x; μ, 12) where
μ and X are the latent and observed variables respectively and a family of proposal distributions
qφ(μ) = Normal(μ; μq, σj) parameterized by φ = (μq, log σ2). For a fixed observation X = 2.3,
we initialize φ = (0.01, 0.01) and optimize ELBOIS with respect to φ. We investigate the quality of
the learned parameter φ as we increase the number of particles K during training. Figure 3 (left)
clearly demonstrates that the quality of φ compared to the analytic posterior decreases as we increase
K.
Similar behavior is observed in Figure 3 (middle, right) where we optimize elboSMC with respect to
both θ and φ for the LGSSM described in Section 5.1. We see that using more particles helps model
learning but makes proposal learning worse. Using our alt algorithm alleviates this problem and at
the same time makes model learning faster as it profits from a more accurate proposal distribution.
We provide more extensive experiments exploring proposal learning with different elbos and number
of particles in Appendix C.3.
1.0 -
S 0.5 -
0.0 -
1.5 -
0 1.0 -
0.5 -
0	500	1000
Optimization step
---true ------- 10	---- 1000
---1	---- 100	  10000
POOqHθ"jIEU'sbJEN MOJ
Optimization step
Optimization Step
Smc 10
Smc 1000
・-- alternate
EM/bootstrap
Figure 3: (Left) Optimizing ELBOIS for the Gaussian unknown mean model with respect to φ results
in worse φ as we increase number of particles K. (Middle, right) Optimizing ELBOSMC with respect
to (θ, φ) for LGSSM and using the ALT algorithm for updating (θ, φ) with (Aθ, K) = (SMC, 1000)
and (Aφ, Κφ) = (IS, 10). Right measures the quality of φ by showing JpT=ι(μkalman - μapprox)2
where μkalman is the marginal mean obtained from the Kalman smoothing algorithm under the model
with EM-optimized parameters and μapprox is an marginal mean obtained from the set of 10 SMC
particles with learned/bootstrap proposal.
5.3	Moving Agents
To show that our results are applicable to complex, high dimensional data we compare AESMC
and IWAE on stochastic, partially observable video sequences. Figure 7 in Appendix C.2 shows an
example of such a sequence.
The dataset consists of N = 5000 sequences of images (y(nT)N=ι of which 1000 are randomly held
out as test set. Each sequence contains T = 40 images represented as a 2 dimensional array of size
32 X 32. In each sequence there is one agent, represented as circle, whose starting position is sampled
randomly along the top and bottom of the image. The dataset is inspired by (Ondruska & Posner,
2016), however with the crucial difference that the movement of the agent is stochastic. The agent
performs a directed random walk through the image. At each timestep, it moves according to
yt+ι 〜Normal(yt+ι; y + 0.15,0.022)
xt+ι 〜Normal(Xt+i；0,0.022)
(20)
where (xt, yt) are the coordinates in frame t in a unit square that is then projected onto 32 × 32 pixels.
In addition to the stochasticity of the movement, half of the image is occluded, preventing the agent
from being observed.
For the generative model and proposal distribution we use a Variational Recurrent Neural Network
(VRNN) (Chung et al., 2015). It extends recurrent neural networks (RNNs) by introducing a stochastic
8
Published as a conference paper at ICLR 2018
(o≡somaacs IOmqa)xeul
latent state xt at each timestep t. Together with the observation yt , this state conditions the determin-
istic transition of the rnn. By introducing this unobserved stochastic state, the vrnn is able to better
model complex long range variability in stochastic sequences. Architecture and hyperparameter
details are given in Appendix C.1.
Figure 4 shows max(ELBOIS, ELB OSMC) for models trained with IWAE and AESMC for different
particle numbers. The lines correspond to the mean over three different random seeds and the shaded
areas indicate the standard deviation. The same number of particles was used for training and testing,
additional hyperparameter settings are given in the appendix. One can see that models trained using
aesmc outperform iwae and using more particles improves the elbo for both. In Appendix C.2,
we inspect different learned generative models by using them for prediction, confirming the results
presented here. We also tested alt on this task, but found that while it did occasionally improve
performance, it was much less stable than iwae and aesmc.
-355 -
-356 -
-357 -
-358 -
-359 -
-360 -
-361 -
Particles	Method	Moving Agents
10	IWAE	-357.3
	AESMC	-356.7
20	IWAE	-356.6
	AESMC	-356.1
40	IWAE	-356.2
	AESMC	-356.1
0	20	40	60	80
Epoch
Figure 4: (Left) Rolling mean over 5 epochs of max(ELBθsMc, ELBOIS) on the test set, lines in-
dicate the average over 3 random seeds and shaded areas indicate standard deviation. The color
indicates the number of particles, the line style the used algorithm. (Right) The table shows the final
max(ELBOSMC, ELBOIS)for each learned model.
6	Conclusions
We have developed aesmc—a method for performing model learning using a new elbo objective
which is based on the smc marginal likelihood estimator. This elbo objective is optimized using
sga and the reparameterization trick. Our approach utilizes the efficiency of smc in models with
intermediate observations and hence is suitable for highly structured models. We experimentally
demonstrated that this objective leads to better generative model training than the iwae objective for
structured problems, due to the superior inference and tighter bound provided by using smc instead
of importance sampling.
Additionally, in Claim 1, we provide a simple way to express the bias of objectives induced by log of
marginal likelihood estimators as a kl divergence on an extended space. In Propositions 1 and 2, we
investigate the implications of these kls being zero in the case of iwae and aesmc. In the latter case,
we find that we can achieve zero kl only if we are able to learn smc intermediate target distributions
corresponding to marginals of the target distribution. Using our assertion that tighter variational
bounds are not necessarily better, we then introduce and test a new method, alternating elbos, that
addresses some of these issues and observe that, in some cases, this improves both model and proposal
learning.
9
Published as a conference paper at ICLR 2018
Acknowledgments
TAL is supported by EPSRC DTA and Google (project code DF6700) studentships. MI is supported
by the UK EPSRC CDT in Autonomous Intelligent Machines and Systems. TR is supported by the
European Research Council under the European Union’s Seventh Framework Programme (FP7/2007-
2013) ERC grant agreement no. 617071; majority of TR’s work was undertaken while he was in the
Department of Engineering Science, University of Oxford, and was supported by a BP industrial
grant. TJ is supported by the UK EPSRC and MRC CDT in Statistical Science. FW is supported by
The Alan Turing Institute under the EPSRC grant EP/N510129/1; DARPA PPAML through the U.S.
AFRL under Cooperative Agreement FA8750-14-2-0006; Intel and DARPA D3M, under Cooperative
Agreement FA8750-17-2-0093.
References
Yuri Burda, Roger Grosse, and Ruslan Salakhutdinov. Importance weighted autoencoders. In ICLR,
2016.
Junyoung Chung, Kyle Kastner, Laurent Dinh, Kratarth Goel, Aaron C Courville, and Yoshua Bengio.
A recurrent latent variable model for sequential data. In Advances in neural information processing
systems,pp. 2980-2988, 2015.
P Del Moral. Feynman-Kac formulae: genealogical and interacting particle systems with applications.
Probability and its applications, 2004.
Arnaud Doucet and Adam M Johansen. A tutorial on particle filtering and smoothing: Fifteen years
later. Handbook of nonlinear filtering, 12(656-704):3, 2009.
Diederik P Kingma and Max Welling. Auto-encoding variational Bayes. In ICLR, 2014.
Tuan Anh Le, Maximilian Igl, Tom Jin, Tom Rainforth, and Frank Wood. Auto-encoding sequential
Monte Carlo. arXiv preprint arXiv:1705.10306v1, 2017.
Chris J Maddison, John Lawson, George Tucker, Nicolas Heess, Mohammad Norouzi, Andriy Mnih,
Arnaud Doucet, and Yee Teh. Filtering variational objectives. In Advances in Neural Information
Processing Systems, pp. 6576-6586, 2017.
Christian A Naesseth, Scott W Linderman, Rajesh Ranganath, and David M Blei. Variational
sequential Monte Carlo. arXiv preprint arXiv:1705.11140, 2017.
Peter Ondruska and Ingmar Posner. Deep tracking: Seeing beyond seeing using recurrent neural
networks. In Thirtieth AAAI Conference on Artificial Intelligence, 2016.
Tom Rainforth, Tuan Anh Le, Maximilian Igl, Chris J Maddison, Yee Whye Teh, and Frank Wood.
Tighter variational bounds are not necessarily better. NIPS Workshop on Bayesian Deep Learning,
2017.
Danilo Jimenez Rezende, Shakir Mohamed, and Daan Wierstra. Stochastic backpropagation and
approximate inference in deep generative models. In ICML, 2014.
Ronald J Williams. Simple statistical gradient-following algorithms for connectionist reinforcement
learning. Machine learning, 8(3-4):229-256, 1992.
10
Published as a conference paper at ICLR 2018
A Gradients
The goal is to obtain an unbiased estimator for the gradient
Vθ,φ / QSMC(X1:K ,a1:K-I)Iog ZSMC(X1:K ,a1:K-I)dx1:Kda1：K-1.
A.1 Full Reinforce
We express the required quantity as
r	ʌ
Vθ φ I QSMC(X1:K,a1:K 1)log ZSMC(X1:K,a1:K 1)dx1:K da1:K 1
,φ	1:T , 1:T -1	1:T , 1:T -1	1:T	1:T -1
=/ vθ,φQSMC(X 1:K, a1:K-I)Iog ZSMC(X1:K, a1:K-I) +
QSMC(X1:K,a1:K-I)Vθ,φ log ZSMC(X1:K,a1:K-I) dX1:Kda1:K-I
=J QSMC(X 1:K, a1:K-I) hvθ,φ log QSMC(X1:K, a1:K-1)log ZSMC(X1:K, a1:K-1) +
Vθφ log ZSMC(X1:K,a1:K 1)i dX1:K da1:K 1,
,φ	1:T , 1:T -1	1:T	1:T -1 ,
(21)
(22)
(23)
(24)
(25)
(26)
which we can estimate by sampling (X11::TK, a11::TK-1) directly from QSMC and evaluating
∣Vθ,φ log Qsmc (X1:K, a1:K-1)log ZSMC(X1:K ,a1:K-1) + Vθ,φ log ZSMC(X1:K ,a1:K-1)].
A.2 Reinforce & Reparameterization
We express the required quantity as
vΘ,Φ / QSMC(X1:K, a1:K-1) log ZSMC(X1:K, a11K-1) dX1:Kda1:K-1
=Vθ,φ∕(Y q1(Xk)) (IY YY qt(Xk X-Z1) ∙Discrete(ak-1∣w1-K)
k=1	t=2 k=1
log ZSMC(X1:K, a1:K 1)dX1:K da1:K 1
1:T , 1:T -1	1:T	1:T -1
Vθ,φZ	YK s1(1k)	YTYK std) ∙DiSCrete(ak-1ιw1-K)
k=1	t=2 k=1
log ZSMc(r(e1:K), a1:K-I) de1:Kda1:K-1
(27)
(28)
(29)
TK
YY
t=1 k=1
TK
Vθ,φYY
Discrete(ak-1∣wi1-K) logZsMc(r(c1:K),a1:K-1)+
t=2 k=1
YT YK
Discrete(ak-1∣w1-K)) Vθ,φ log ZsMc(r(e1:K),a1:K-1)[ de1:K da1:K-1
t=2 k=1
(30)
TK	TK
∏∏ std)	∏∏ Discrete(ak-1W-K) ∙
t=1 k=1	t=2 k=1
Vθ,φ log (∏ ∏ Discrete(ak-1∣w1K)) logZsMc(r(e1:K),a1:K-1)+
t=2 k=1
vθ,ΦlogZsMc(r(e1:K),a1:K-1 )i de1:Kda1:K-1,
(31)
where r(11::TK) denotes a sample with identical distribution as X11::TK obtained by passing
the auxiliary samples 11::TK through the reparameterization function. We can thus estimate
11
Published as a conference paper at ICLR 2018
the gradient by sampling 11：：TK from the auxiliary distribution, reparameterizing and evaluating
∣Vθ,Φ log (QT=2 QK=I DiSCrete(ak-1 |w1-K Dlog ZSMC(r(e1：K), a1:K-I) + Vθ,φ log ZSMC(r(e1：K),。1帝-1)].
In Figure 5, We demonstrate that the estimator in (31) has much higher variance if We include the first
term.
əojOJInəɪ
0.00003
0.00002
0.00001
0.00000
250	300	350	-50000	0	50000
Figure 5: T = 200 model described in Section 5.1. Kernel density estimation (KDE) of N§、ELBOSMC
evaluated at θ1 = 0.1 with K = 16 using 100 samples.
B Proofs for Bias & Implications on the Proposals
Derivation of (9).
ELBO
Z Q(X)Iog ZQPFdx
Q Q(x)log Zp dx — Q Q(x)log PQ(x)dx
P (x)
log ZP - KL (Q||P ) .
(32)
(33)
(34)
□
ʌ ʌ ʌ
Proof of Claim 1. Since ZP (x) ≥ 0, Q(x) ≥ 0 and Q(x)ZP (x) dx = ZP, we can let the unnor-
malized target density in Definition 1 be P (x) = Q(x)ZP (x). Hence, the normalized target density
is P (x) = Q(x)ZP (x)/ZP. Substituting these quantities into (8) and (9) yields the two equalities in
(10).
Proof of Proposition 1. ( =⇒ ) Substituting for QIS (x1:K) = PIS(x1:K), we obtain
YY q(xk∣y) = ⅛ XX qK1 k(χ'ly)p(xk|y)	(35)
k=1	K k=1	q(xk |y)
1K
=KE [q(x1∣y) ∙ ∙ ∙ q(xk-1∣y)p(xk ∣y)q(xk+1∣y) ∙ ∙ ∙ q(xκ |y)] ∙	(36)
k=1
Integrating both sides with respect to (x2, ∙ ∙ ∙ , xκ) over the whole support (i.e. marginalizing out
everything except x1 ), we obtain:
(37)
(38)
(39)
(40)
1
q(x1Iy) = κ P(XIIy) + Eq(XIIy) ∙
k=2
Rearranging gives us q(x1 Iy) = p(x1 Iy) for all x1.
(U= ) Substituting p(xk ∣y) = q(xk∣y), We obtain
P 1 1：K\	1 QIS(XLKLkl、
PIS(X ) = K g	P(XIy)
1K
=K X QIS(X1：K)
k=1
=QIS(X1：K )∙
κ
12
Published as a conference paper at ICLR 2018
□
Proofof Proposition 2. We consider the general sequence of target distributions ∏t(χLt)
(pθ(xi：t|yi：t) in the case of SSMs), their unnormalized versions Yt(xi：t) (pθ(xi：t, yi：t) in the case
γt (x1:t) dx1:t (pθ (y1:t) in the case of SSMs), where
of SSMs), their normalizing constants Zt
Z = ZT = p(yi：T).
(=⇒ ) It suffices to show that ZSMC(X1：K, a1：K-i) = Z for all (x；：K, a1：K-i) implies 1 and 2 in
Proposal 2 due to equation (11).
We first prove that ZSMC(X1：K, a1：K-i) = Z for all (x；：K, ai：，-；) implies that the weights
w1 (x1 ) :
Yi (XI)
qι(χι)
(41)
wt(x1:t) :
_________Yt(Xi：t)_________
Yt-l(Xl：t-l)qt(Xt|Xl：t-l)
for t = 2, . . . , T
(42)
are constant with respect to X1：t.
Pick t ∈ {1, . . . , T } a1n：d dis1t：inct k, ` ∈ {11：, . . . ,1K： }. Also, pick X1：t and X01：t. Now, consider two
sets of particle sets (X；：K, a1：T—i) and (X；：K, a1：T-i), illustrated in Figure 6, such that
)X
X
X
X
0τ
0τ
if κ = ` and τ < t
if (κ, τ) = (k, t)
if κ = k and τ < t
otherwise
for τ = 1, . . . , T, κ = 1, . . . , K,
(43)
`
aτ = K
if (κ, τ) = (k, t - 1) or (k, t)
otherwise
for τ = 1, . . . , T - 1, κ = 1, . . . , K,
(44)
XT
x
x
x
x
0τ
if κ = ` and τ < t
if (κ, τ) = (k, t)
if κ = k and τ < t
otherwise
for τ = 1, . . . , T, κ = 1, . . . , K,
(45)
aτ = {K
if (κ, τ) = (k, t)
otherwise
for τ = 1, . . . , T - 1,
κ = 1, . . . , K.
(46)
τ
κ
τ
τ
κ
`
k
Figure 6: (Left) particle set (xi：K, ai：K-i
ancestor indices.
`
k
)and (right) particle set (Xi：K, a1T-ι). Lines indicate
The weights WK and WK for the respective particle sets are identical except when (τ, K) = (t, k)
where
(47)
(48)
Since Z(X1：K,矶：K-I) = Z(X；：K, (⅛K-ι), we have wt(X0i：t) = Wt(XI：t). AS this holds for any
arbitrary t and X1：t, it follows that Wt(X1：t) must be constant with respect to X1：t for all t = 1, . . . , T.
13
Published as a conference paper at ICLR 2018
Now, for x1:t, consider the implied proposal by rearranging (41) and (42)
q1(x1 ) = 3	(49)
w1
qt(xt|xi：t-i ) = -T(XIt∖	fort = 2,...,T,	(50)
Yt-I(xi：t-1 IWt
where wt := wt(X1:t) is constant from our previous results. For this to be a normalized density with
respect to xt, we must have	W1 =	γ1(x1) dx1 = Z1,	(51)
and for t = 2, . . . , T :	/	Yt(xLt) N Wt =		7	? dxt J Yt-I(Xi：t-i)	(52)
	_ J Yt(xi：t)dxt Yt-l(xi：t-l)	(53)
	_	Zt	∕∏t(x±t)dxt =			:		. Zt-1 πt-1 (x1:t-1)	(54)
πt(x1-t)=ht+ι(xι-t+ι)dxt+1
Since ∏nt+i(xi：t+i)dxt+i and ∏t(χ±t) are both normalized densities, We must have ∏t(χLt)=
∏ ∏t+ι(x±t+ι) dxt+ι for all t = 1,...,T - 1 for all xi：t. For a given t ∈ {1,...,T - 1} and xi：t,
applying this repeatedly yields
nt+2(xi：t+2)dxt+2 dxt+1 = •…=/ ∏T(xi:T) dxt+1:T
(55)
such that each ∏t(x±t) must be the corresponding marginal of the final target. We also have
(56)
t = 2, . . .,T,	(57)
(58)
t = 2, . . .,T.	(59)
(^= ) To complete the proof, we now simply substitute identities in 1 and 2 of Proposal 2 back to
the expression of Z(x1：K, a1：K-i) to obtain Z(x1：K, a1：K-i) = Z.	□
π
w1(x1) = Z1,
Z 、	Zt
Wt(XLt)=ν—,
Zt-1
q1(x1) =π1(x1) =πT(x1),
qt(xt|x1:t-1)
nt(xi：t)
∏T (xi：t)
∏t-l(x±t-l)	∏T(xi：t-1)，
C Experiments
C.1 VRNN
In the following we give the details of our vrnn architecture. The generative model is given by:
p(x1:T, h0:T, y1:T) = p(h0)	p(xt|ht-1)p(yt|ht-1, xt)p(ht|ht-1, xt, yt)	(60)
t
where
p(h0) = Normal(h0; 0, I)
p(xt∣ht-i) = Normal(Xt； μχ(ht-i),σX(ht-i)2)
p(yt ∣ht-i,xt) = BernouUi(yt; μy (2X(Xt) ,ht-1))
(61)
Plht∖ht-i,Xt,y ) = δf(ht-ι,wχ(xjwy (yt))(ht)
14
Published as a conference paper at ICLR 2018
and the proposal distribution is given by
p(xt[yt, ht-ι) = NOrmal(Xt；μφ(φφ(yt),ht-ι),σp2Wφ3iht-1))	(62)
The functions μχ and σχ are computed by networks with two fully connected layers of size 128
whose first layer is shared.夕X is one fully connected layer of size 128.
For visual input, the encoding * is a convolutional network with conv-4x4-2-1-32, conv-4x4-2-1-64,
conv-4x4-2-1-128 where conv-wxh-s-p-n denotes a convolutional network with n filters of size w × h,
stride s, padding p. Between convolutions we use leaky ReLUs with slope 0.2 as nonlinearity and
batch norms. The decoding μy uses transposed convolutions of the same dimensions but in reversed
order, however with stride s = 1 and padding p = 0 for the first layer.
A Gated Recurrent Unit (GRU) is used as RNN and if not stated otherwise ReLUs are used in between
fully connected layers.
For the proposal distribution, the functions μφ and σφ are neural networks with three fully connected
layers of size 128 that are sharing the first two layers. Sigmoid and softplus functions are used where
values in (0, 1) or R+ are required. We use a minibatch size of 25.
For the moving agents dataset we use ADAM with a learning rate of 10-3.
A specific feature of the vrnn architecture is that the proposal and the generative model share the
component 夕φ 6. Consequently, we set φ = θ for the parameters belonging to this module and train
it using gradients for both θ and φ.
C.2 Moving Agents
In Figure 7 we investigate the quality of the generative model by comparing visual predictions. We
do so for models learned by IWAE (top) and AESMC (bottom). The models were learned using ten
particles but for easier visualization we only predict using five particles.
The first row in each graphic shows the ground truth. The second row shows the averaged predictions
of all five particles. The next five rows show the predictions made by each particle individually.
The observations (i.e. the top row) up to t = 19 are shown to the model. Up to this timestep the latent
values x0:19 are drawn from the proposal distribution q(xt |yt, ht-1). From t = 20 onwards the latent
values x20:37 are drawn from the generative modelp(xt|xt-1). Consequently, the model predicts the
partially occluded, stochastic movement over 17 timesteps into the future.
We note that most particles predict a viable future trajectory. However, the model learned by iwae is
not as consistent in the quality of its predictions, often ’forgetting’ the particle. This does not happen
in every predicted sequence but the behavior shown here is very typical. Models learned by aesmc
are much more consistent in the quality of their predictions.
C.3 Optimizing Only Proposal Parameters
We have run experiments where we optimize various ELBO objectives with respect to φ with θ fixed
in order to see how various objectives have an effect on proposal learning. In particular, we train
ELB OIS and ELBOSMC with number of particles K ∈ {10, 100, 1000}. Once the training is done, we
use the trained proposal network to perform inference using both is and smc with number of particles
Ktest ∈ {10, 100, 1000}.
In Figure 8, we see experimental results for the LGSSM described in Section 5.1. We measure
the quality of the inference network using a proxy JpT=ι(μkalman - μapprox)2 where μkalman is
the true marginal mean Ep(x1:T |y1:T) [xt] obtained from the Kalman smoothing algorithm and
μapprox = (PK=I WTXt) / (PK=I WT) is an approximate marginal mean obtained from the pro-
posal parameterized by φ.
15
Published as a conference paper at ICLR 2018
≡mj. uesw Z6UM z.OUM ZG=M Sns ZGUM EnJ-L cs≡ ZOUM M∙oπs ZduM N-OHS Z6U5
□□H
□□□□□□
ooo□o□π
□□□□□□
□□□□□
□□□□□□
■■■■■■
□□□□□□
□□□□□□
□□□□□□
I_____I
- -
ooo□□□
HnL


□O□□□□H

- -
- .



■


- -
- -
L
- -
Figure 7:	Visualisation of the learned model. Ground truth observations (top row in each sub figure)
are only revealed to the algorithm up until t=19 inclusive. The second row shows the prediction
averaged over all particles, all following rows show the prediction made by a single particle. (Top)
IWAE. (Bottom) AESMC.
We see that if we train using ELB OSMC with Ktrain = 1000, the performance for inference using SMC
(with whichever Ktest ∈ {10, 100, 1000}) is worse than if we train with ELB OIS with any number of
particles Ktrain ∈ {10, 100, 1000}. Examining the other axes of variation:
•	Increasing Ktest (moving up in Figure 8 (Right)) improves inference.
•	Increasing Ktrain (moving to the right in Figure 8 (Right)) worsens inference.
•	Among different possible combinations of (training algorithm, testing algorithm), (IS, SMC)
(SMC, SMC)	(IS, IS) (SMC, IS), where we use “a	b” to denote that the combination
a results in better inference than combination b.
16
Published as a conference paper at ICLR 2018
-5000
-6000
true log marginal likelihood
IslO
IslOO
IslOOO
smc 10
smc 100
smc 1000
200	400	600	800	1000
Epoch
IOOO
Mean L2 between approximate inference
and ground truth
10
100
# train particles
1000
UΛ IS train, IS test	IS train, SMC test
I I SMC train, IS test ι ι SMC train, SMC test
SWylJedtt34 ⅛
Figure 8:	(Left) Optimizing ELBO with respect to φ for LGSSM. (Right) The lengths of the squares are
proportional (with a constant factor) to y PT=ι(μkalman - μapprox)2 which is a proxy for inference
quality of φ described in the main text. The larger the square, the worse the inference.
17