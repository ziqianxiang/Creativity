Published as a conference paper at ICLR 2018
Action-dependent Control Variates for Pol-
icy Optimization via Stein’s Identity
Hao Liu*
Computer Science
UESTC
Chengdu, China
uestcliuhao@gmail.com
Yihao Feng*
Computer science
University of Texas at Austin
Austin, TX, 78712
yihao@cs.utexas.edu
Yi Mao
Microsoft
Redmond, WA, 98052
maoyi@microsoft.com
Dengyong Zhou	Jian Peng	Qiang Liu
Google	Computer Science	Computer Science
Kirkland, WA, 98033	UIUC	University of Texas at Austin
dennyzhou@google.com	Urbana, IL 61801	Austin, TX, 78712
	jianpeng@illinois.edu	lqiang@cs.utexas.edu
Ab stract
Policy gradient methods have achieved remarkable successes in solving challeng-
ing reinforcement learning problems. However, it still often suffers from the large
variance issue on policy gradient estimation, which leads to poor sample efficiency
during training. In this work, we propose a control variate method to effectively
reduce variance for policy gradient methods. Motivated by the Stein’s identity,
our method extends the previous control variate methods used in REINFORCE
and advantage actor-critic by introducing more general action-dependent base-
line functions. Empirical studies show that our method significantly improves the
sample efficiency of the state-of-the-art policy gradient approaches.
1	Introduction
Deep reinforcement learning (RL) provides a general framework for solving challenging goal-
oriented sequential decision-making problems, It has recently achieved remarkable successes in
advancing the frontier of AI technologies (Silver et al., 2017; Mnih et al., 2013; Silver et al., 2016;
Schulman et al., 2017). Policy gradient (PG) is one of the most successful model-free RL approaches
that has been widely applied to high dimensional continuous control, vision-based navigation and
video games (Schulman et al., 2016; Kakade, 2002; Schulman et al., 2015; Mnih et al., 2016).
Despite these successes, a key problem of policy gradient methods is that the gradient estimates
often have high variance. A naive solution to fix this issue would be generating a large amount
of rollout samples to obtain a reliable gradient estimation in each step. Regardless of the cost of
generating large samples, in many practical applications like developing driverless cars, it may not
even be possible to generate as many samples as we want. A variety of variance reduction techniques
have been proposed for policy gradient methods (See e.g. Weaver & Tao 2001, Greensmith et al.
2004, Schulman et al. 2016 and Asadi et al. 2017).
In this work, we focus on the control variate method, one of the most widely used variance reduc-
tion techniques in policy gradient and variational inference. The idea of the control variate method
is to subtract a Monte Carlo gradient estimator by a baseline function that analytically has zero ex-
pectation. The resulted estimator does not introduction biases theoretically, but may achieve much
lower variance if the baseline function is properly chosen such that it cancels out the variance of
the original gradient estimator. Different control variates yield different variance reduction meth-
ods. For example, in REINFORCE (Williams, 1992), a constant baseline function is chosen as a
control variate; advantage actor-critic (A2C) (Sutton & Barto, 1998; Mnih et al., 2016) considers a
state-dependent baseline function as the control variate, which is often set to be an estimated value
*Both authors contributed equally. Author ordering determined by coin flip over a Google Hangout.
1
Published as a conference paper at ICLR 2018
function V (s). More recently, in Q-prop (Gu et al., 2016b), a more general baseline function that lin-
early depends on the actions is proposed and shows promising results on several challenging tasks.
It is natural to expect even more flexible baseline functions which depend on both states and actions
to yield powerful variance reduction. However, constructing such baseline functions turns out to be
fairly challenging, because it requires new and more flexible mathematical identities that can yield
a larger class of baseline functions with zero analytic expectation under the policy distribution of
interest.
To tackle this problem, we sort to the so-called Stein’s identity (Stein, 1986) which defines a broad
class of identities that are sufficient to fully characterize the distribution under consideration (see
e.g., Liu et al., 2016; Chwialkowski et al., 2016). By applying the Stein’s identity and also drawing
connection with the reparameterization trick (Kingma & Welling, 2013; Rezende et al., 2014), we
construct a class of Stein control variate that allows us to use arbitrary baseline functions that depend
on both actions and states. Our approach tremendously extends the existing control variates used in
REINFORCE, A2C and Q-prop.
We evaluate our method on a variety of reinforcement learning tasks. Our experiments show that
our Stein control variate can significantly reduce the variance of gradient estimation with more flex-
ible and nonlinear baseline functions. When combined with different policy optimization methods,
including both proximal policy optimization (PPO) (Schulman et al., 2017; Heess et al., 2017) and
trust region policy optimization (TRPO) (Schulman et al., 2015; 2016), it greatly improves the sam-
ple efficiency of the entire policy optimization.
2	Background
We first introduce basic backgrounds of reinforcement learning and policy gradient and set up the
notation that we use in the rest of the paper in Section 2.1, and then discuss the control variate
method as well as its application in policy gradient in Section 2.2.
2.1	Reinforcement Learning and Policy Gradient
Reinforcement learning considers the problem of finding an optimal policy for an agent which in-
teracts with an uncertain environment and collects reward per action. The goal of the agent is to
maximize the long-term cumulative reward. Formally, this problem can be formulated as a Markov
decision process over the environment states s ∈ S and agent actions a ∈ A, under an unknown
environmental dynamic defined by a transition probability T(s0|s, a) and a reward signal r(s, a)
immediately following the action a performed at state s. The agent’s action a is selected by a con-
ditional probability distribution π(a∣s) called policy. In policy gradient methods, We consider a set
of candidate policies ∏θ (a|s) parameterized by θ and obtain the optimal policy by maximizing the
expected cumulative reWard or return
J(θ) = Es〜ρ∏ ,a〜π(a∣s) Ir(S, a)],
Where ρπ(s) = Pt∞=1 γt-1Pr(st = s) is the normalized discounted state visitation distribution With
discount factor Y ∈ [0,1). To simplify the notation, we denote Es〜ρπ,a〜∏(a∣s)[∙] by simply En[∙] in
the rest of paper. According to the policy gradient theorem (Sutton & Barto, 1998), the gradient of
J(θ) can be written as
VθJ(θ) = E∏ [Vθ log∏(a∣s)Qπ(s,a)],	(1)
where Qπ(s, a) = Eπ Pt∞=1 γt-1r(st, at)|s1 = s, a1 = a denotes the expected return under pol-
icy π starting from state s and action a. Different policy gradient methods are based on different
stochastic estimation of the expected gradient in Eq (1). Perhaps the most straightforward way is
to simulate the environment with the current policy π to obtain a trajectory {(st, at, rt)}tn=1 and
estimate VθJ(θ) using the Monte Carlo estimation:
1n
VθJ(θ) = n^γt-1Vθ log ∏(at∣St)Qπ(st,at),	⑵
where Qπ(st, at) is an empirical estimate of Qn(st, at), e.g., Qπ (st, at) = Pj≥tt YjTrj. Unfortu-
nately, this naive method often introduces large variance in gradient estimation. It is almost always
2
Published as a conference paper at ICLR 2018
the case that we need to use control variates method for variance reduction, which we will introduce
in the following. It has been found that biased estimators help improve the performance, e.g., by
using biased estimators of Qπ or dropping the γt-1 term in Eq (2). In this work, we are interested
in improving the performance without introducing additional biases, at least theoretically.
2.2	Control Variate
The control variates method is one of the most widely used variance reduction techniques in policy
gradient. Suppose that We want to estimate the expectation μ = ET [g(s, a)] with Monte Carlo
samples (st, at)tn=1 drawn from some distribution τ, which is assumed to have a large variance
varτ (g). The control variate is a function f(s, a) with known analytic expectation under τ, which,
without losing of generality, can be assumed to be zero: Eτ [f (s, a)] = 0. With f, we can have an
alternative unbiased estimator
1n
μ = - X2 (g(st, at) -f (st, at)),
n
t=1
where the variance of this estimator is varτ (g - f)/n, instead of varτ (g)/n for the Monte Carlo
estimator. By taking f to be similar to g, e.g. f = g 一 μ in the ideal case, the variance of g 一 f can
be significantly reduced, thus resulting in a more reliable estimator.
The key step here is to find an identity that yields a large class of functional f with zero expectation.
In most existing policy gradient methods, the following identity is used
E∏(a∣s) [Vθ log π(a∣s)φ(s)] = 0, for any function φ.	(3)
Combining it with the policy gradient theorem, we obtain
1n
VθJ(θ) = ~ X Vθ log π(at∣st) QQ (st, at) - φ(st)) ,	3 (4)
n t=1
Note that we drop the γt-1 term in Eq (2) as we do in practice. The introduction of the function φ
does not change the expectation but can decrease the variance significantly when it is chosen prop-
erly to cancel out the variance of Qπ (s, a). In REINFORCE, φ is set to be a constant φ(s) = b
baseline, and b is usually set to approximate the average reward, or determined by minimizing
var(Vθ J (θ)) empirically. In advantage actor-critic (A2C), φ(s) is set to be an estimator of the value
function V (s) = E∏(a∣s)[Qπ (s, a)], so that Q (s, a) - φ(s) is an estimator of the advantage func-
tion. For notational consistency, we call φ the baseline function and f (s, a) = Vθ logπ(a∣s)φ(s)
the corresponding control variate.
Although REINFORCE and A2C have been widely used, their applicability is limited by the possible
choice of φ. Ideally, we want to set φ to equal Qπ (s, a) up to a constant to reduce the variance of
VθJ(θ) to close to zero. However, this is impossible for REINFORCE or A2C because φ(s) only
depends on state s but not action a by its construction. Our goal is to develop a more general control
variate that yields much smaller variance of gradient estimation than the one in Eq (4).
3	Policy Gradient with Stein control variate
In this section, we present our Stein control variate for policy gradient methods. We start by intro-
ducing Stein’s identity in Section 3.1, then develop in Section 3.2 a variant that yields a new control
variate for policy gradient and discuss its connection to the reparameterization trick and the Q-prop
method. We provide approaches to estimate the optimal baseline functions in Section 3.3, and dis-
cuss the special case of the Stein control variate for Gaussian policies in Section 3.4. We apply our
control variate to proximal policy optimization (PPO) in Section 3.5.
3.1 Stein’s Identity
Given a policy π(a∣s), Stein,s identity w.r.t π is
E∏(α∣s) Va log ∏(a∣S)φ(s,a) + Vαφ(s,a) ] = 0,	∀s,	(5)
3
Published as a conference paper at ICLR 2018
which holds for any real-valued function φ(s, a) with some proper conditions. To see this, note the
left hand side ofEq (5) is equivalent to / Na (π(a∣s)φ(s, a)) da, which equals zero if π(a∣s)φ(s, a)
equals zero on the boundary of the integral domain, or decay sufficiently fast (e.g., exponentially)
when the integral domain is unbounded.
The power of Stein’s identity lies in the fact that it defines an infinite set of identities, indexed by
arbitrary function φ(s, a), which is sufficient to uniquely identify a distribution as shown in the
work of Stein’s method for proving central limit theorems (Stein, 1986; Barbour & Chen, 2005),
goodness-of-fit test (Chwialkowski et al., 2016; Liu et al., 2016), and approximate inference (Liu &
Wang, 2016). Oates et al. (2017) has applied Stein’s identity as a control variate for general Monte
Carlo estimation, which is shown to yield a zero-variance estimator because the control variate is
flexible enough to approximate the function of interest arbitrarily well.
3.2	Stein Control Variate for Policy Gradient
Unfortunately, for the particular case of policy gradient, it is not straightforward to directly apply
Stein’s identity (5) as a control variate, since the dimension of the left-hand side of (5) does not
match the dimension of a policy gradient: the gradient in (5) is taken w.r.t. the action a, while the
policy gradient in (1) is taken w.r.t. the parameter θ. Therefore, we need a general approach to con-
nect Va logπ(a∣s) to Vθ logπ(a∣s) in order to apply Stein's identity as a control variate for policy
gradient. We show in the following theorem that this is possible when the policy is reparameteri-
zable in that a 〜 ∏θ(a|s) can be viewed as generated by a = fθ(s, ξ) where ξ is a random noise
drawn from some distribution independently of θ. With an abuse of notation, We denote by ∏(a, ξ∣s)
the joint distribution of (a,ξ) conditioned on s, so that π(a∣s) = ∏ π(a∣s, ξ)∏(ξ)dξ, where π(ξ)
denotes the distribution generating ξ and π(a∣s,ξ) = δ(a 一 f (s,ξ)) where δ is the Delta function.
Theorem 3.1. With the reparameterizable policy defined above, using Stein’s identity, we can derive
Eπ(a∣s) [vθ log π⑷ S)φGa)] = Eπ(a,ξ∣s) [vθfθ (S, 8 Va。(S, a)] ∙	⑹
Proof. See Appendix for the detail proof. To help understand the intuition, we can consider the
Delta function as a Gaussian with a small variance h2, i.e. π(a∣s, ξ) 8 exp(一∣∣a — f (s, ξ)k2∕2h2),
for which it is easy to show that
Vθ log ∏(a,ξ | S) = -Vθ fθ(s,ξ) Va logπ(a,ξ | s).	(7)
This allows us to convert between the derivative w.r.t. a and w.r.t. θ, and apply Stein,s identity. □
Stein Control Variate Using Eq (6) as a control variate, we obtain the following general formula
of policy gradient:
Vθ J (θ)= E∏[Vθ log π(a∣s)(Qπ (s,a) - φ(s,a)) + Vθ fθ (s,ξ)Vaφ(s,a)],	(8)
where any fixed choice of φ does not introduce bias to the expectation. Given a sample set
(St, at, ξt)tn=1 where at = fθ(St, ξt), an estimator of the gradient is
1n
Vθ J(θ) = - X [Vθ log∏(at | St)(Qn(st,at) — φ(st,at)) + Vθfθ(st,ξt)Vaφ(st,at)] .	(9)
n t=1
This estimator clearly generalizes the control variates used in A2C and REINFORCE. To see this,
let φ be action independent, i.e. φ(S, a) = φ(S) or even φ(S, a) = b, in both cases the last term in
(9) equals to zero because Vaφ = 0. When φ is action-dependent, the last term (9) does not vanish
in general, and in fact will play an important role for variance reduction as we will illustrate later.
Relation to Q-prop Q-prop is a recently introduced sample-efficient policy gradient method that
constructs a general control variate using Taylor expansion. Here we show that Q-prop can be
derived from (8) with a special φ that depends on the action linearly, so that its gradient w.r.t. a is
action-independent, i.e. Vaφ(a, S)=夕(s). In this case, Eq (8) becomes
Vθ J (θ) = E∏ [Vθ log ∏(a∣S)(Qπ (s, a) — φ(S,a)) + Vθ fθ (S,ξ)夕(s)].
4
Published as a conference paper at ICLR 2018
Furthermore, note that E∏(ξ)[Vθf (s,ξ)] = VθE∏(ξ)[f (s,ξ)] := Vθμ∏(s), where μ∏(S) is the ex-
pectation of the action conditioned on s. Therefore,
Vθ J (θ) = E∏[Vθ log π(a∣s)(Qπ (s,a)-φ(s,a)) + Vθ μ∏(s)P(s)],
which is the identity used in Q-prop to construct their control variate (see Eq 6 in Gu et al. 2016b).
In Q-prop, the baseline function is constructed empirically by the first-order Taylor expansion as
φ(s,a) = Vz (s) + hVaQ (s,μ∏(S)), a 一 μ∏(s)i,	(10)
where V π (S) and Qπ (S, a) are parametric functions that approximate the value function and Q
function under policy π, respectively. In contrast, our method allows us to use more general and
flexible, nonlinear baseline functions φ to construct the Stein control variate which is able to decrease
the variance more significantly.
Relation to the reparameterization trick The identity (6) is closely connected to the reparame-
terization trick for gradient estimation which has been widely used in variational inference recently
(Kingma & Welling, 2013; Rezende et al., 2014). Specifically, let us consider an auxiliary objective
function based on function φ:
Ls(θ) := Eπ(a∣s)[φ(S,a)]
J π(a∣s)φ(s, a)da.
Then by the log-derivative trick, we can obtain the gradient of this objective function as
VθLs(θ) =
Vθπ(a∣s)φ(s, a)da = E∏(a∣s) [Vθ log π(a∣s)φ(s, a)],
(11)
which is the left-hand side of (6). On the other hand, if a 〜 π(a∣s) can be parameterized by
a = fθ(S, ξ), then Ls (θ) = Eπ(ξ) [φ(S, fθ(S, ξ))], leading to the reparameterized gradient in Kingma
& Welling (2013):
vΘ Ls(θ) = E∏(a,ξ∣s) [V6 fθ (s,g)Va0(s, a)].
(12)
Equation (11) and (12) are equal to each other since both are VθLs(θ). This provides another way
to prove the identity in (6). The connection between Stein’s identity and the reparameterization trick
that we reveal here is itself interesting, especially given that both of these two methods have been
widely used in different areas.
3.3	Constructing the Baseline Functions for Stein Control Variate
We need to develop practical approaches to choose the baseline functions φ in order to fully lever-
age the power of the flexible Stein control variate. In practice, we assume a flexible parametric
form φw(S, a) with parameter w, e.g. linear functions or neural networks, and hope to optimize w
efficiently for variance reduction. Here we introduce two approaches for optimizing w and discuss
some practical considerations.
We should remark that if φ is constructed based on data (St, at)tn=1, it introduces additional depen-
dency and (4) is no longer an unbiased estimator theoretically. However, the bias introduced this
way is often negligible in practice (see e.g., Section 2.3.4 of Oates & Girolami (2016)). For policy
gradient, this bias can be avoided by estimating φ based on the data from the previous iteration.
Estimating φ by Fitting Q Function Eq (8) provides an interpolation between the log-likelihood
ratio policy gradient (1) (by taking φ = 0) and a reparameterized policy gradient as follows (by
taking φ(S, a) = Qπ (S, a)):
VθJ(θ) =Eπ[Vθf(S,ξ)VaQπ(S,a)].	(13)
It is well known that the reparameterized gradient tends to yield much smaller variance than the
log-likelihood ratio gradient from the variational inference literature (see e.g., Kingma & Welling,
2013; Rezende et al., 2014; Roeder et al., 2017; Tucker et al., 2017). An intuitive way to see this is to
consider the extreme case when the policy is deterministic. In this case the variance of (11) is infinite
because log ∏(a∣s) is either infinite or does not exist, while the variance of (12) is zero because ξ is
5
Published as a conference paper at ICLR 2018
deterministic. Because optimal policies often tend to be close to deterministic, the reparameterized
gradient should be favored for smaller variance.
Therefore, one natural approach is to set φ to be close to Q function, that is, φ(s, a) = Qπ (s, a) so
that the log-likelihood ratio term is small. Any methods for Q function estimation can be used. In
our experiments, we optimize the parameter w in φw (s, a) by
n
min X(φw(st, at) - Rt)2,	(14)
w
t=1
where Rt an estimate of the reward starting from (st, at). It is worth noticing that with deterministic
policies, (13) is simplified to the update of deep deterministic policy gradient (DDPG) (Lillicrap
et al., 2015; Silver et al., 2014). However, DDPG directly plugs an estimator Qn (s, a) into (13) to
estimate the gradient, which may introduce a large bias; our formula (8) can be viewed as correcting
this bias in the reparameterized gradient using the log-likelihood ratio term.
Estimating φ by Minimizing the Variance Another approach for obtaining φ is to directly mini-
mize the variance of the gradient estimator. Note that var(57 θ J (θ)) = E[(57 θ J (θ))2] - EB θ J (θ)]2.
Since E[Bθ J (θ)] = Bθ J(θ) which does not depend on φ, it is sufficient to minimize the first term.
Specifically, for φw(s, a) we optimize w by
n2
mwnXIalog∏(at | St) (Qπ(st,at) - Φw(st, at)) + Bθf(st,ξt)BaΦw(st,at)∣∣ .	(15)
w t=1	2
In practice, we find that it is difficult to implement this efficiently using the auto-differentiation in
the current deep learning platforms because it involves derivatives w.r.t. both θ and a. We develop a
computational efficient approximation for the special case of Gaussian policy in Section 3.4.
Architectures of φ Given the similarity between φ and the Q function as we mentioned above, we
may decompose φ into
π
φw(s,a) = Vπ(s) + ψw(s,a).
The term Vπ(s) is parametric function approximation of the value function which We separately
estimate in the same way as in A2C, and W is optimized using the method above with fixed Vπ(s).
Here the function ψw(s, a) can be viewed as an estimate of the advantage function, whose parameter
w is optimized using the two optimization methods introduced above. To see, we rewrite our gradient
estimator to be
1n
J(θ) = - X [Vθ logπ(at | St)(An(st,at) - ψw(st,at))+ V©fθ(st,ξtRaψw(st,at)] , (16)
n t=1
where Aπ(st, at) = Qπ(st, at) - Vπ (st) is an estimator of the advantage function. If we set
ψw(s, a) = 0, then Eq (16) clearly reduces to A2C. We find that separating Vπ(s) from ψw(s, a)
works well in practice, because it effectively provides a useful initial estimation of φ, and allows us
to directly improve the φ on top of the value function baseline.
3.4 Stein control variate for Gaus sian Policies
Gaussian policies have been widely used and are shown to perform efficiently in many practical con-
tinuous reinforcement learning settings. Because of their wide applicability, we derive the gradient
estimator with the Stein control variate for Gaussian policies here and use it in our experiments.
Specifically, Gaussian policies take the form π(a | s) = N (a; μθ∖ (s), ∑e2 (s)), where mean μ and
covariance matrix Σ are often assumed to be parametric functions with parameters θ = [θ1, θ2].
This is equivalent to generating a by a = f©(s,ξ) = μθ∖ (s) + ∑θ2 (S)1∕2ξ, where ξ 〜 N(0,1).
Following Eq (8), the policy gradient w.r.t. the mean parameter θ1 is
V©i J(θ) = E∏ [Vθι logπ(a∣s)(Qn(s, a) - φ(s,a)) + V©1μ(s) Vθφ(s, a)] .	(17)
6
Published as a conference paper at ICLR 2018
For each coordinate θ` in the variance parameter θ2 , its gradient is computed as
Vθ' J (θ) = En Vθ' log π(a∣s)(Qπ (s,a) - φ(s,a)) - 1 DS log π(a∣s) Vaφ(s,a)>, R θ` Σ)] ,	(18)
where hA, Bi := trace(AB) for two da × da matrices.
Note that the second term in (18) contains Na log ∏(a∣s); We can further apply Stein's identity on it
to obtain a simplified formula
Vθ' J (θ) = En Vθ' log π(a∣s)(Qπ (s,a) - φ(s,a)) + 1 "a,aφ(s,α), N θ` ∑i .	(19)
The estimator in (19) requires to evaluate the second order derivative Na,aφ, but may have loWer
variance compared to that in (18). To see this, note that if φ(s, a) is a linear function of a (like the
case of Q-prop), then the second term in (19) vanishes to zero, While that in (18) does not.
We also find it is practically convenient to estimate the parameters W in φ by minimizing var(VμJ) +
var(VΣJ), instead of the exact variance var(VθJ). Further details can be found in Appendix 7.2.
3.5 PPO with Stein control variate
Proximal Policy Optimization (PPO) (Schulman et al., 2017; Heess et al., 2017) is recently intro-
duced for policy optimization. It uses a proximal Kullback-Leibler (KL) divergence penalty to
regularize and stabilize the policy gradient update. Given an existing policy πold, PPO obtains aneW
policy by maximizing the folloWing surrogate loss function
"EnoId ⅛⅛⅞ Qn Ga- λKL[πold (忖 llπ"忖]
Where the first term is an approximation of the expected reWard, and the second term enforces the
the updated policy to be close to the previous policy under KL divergence. The gradient of Jppo(θ)
can be reWritten as
Vθ jppo (θ) = EnOId Wn(S, a)Vθ log n(a|S)Qλ (S, a)
where Wn(s, a) := ∏θ(a∣s)∕∏old(a∣s) is the density ratio of the two polices, and Qn(s,a):=
Qn(S, a) + λWn(S, a)-1 Where the second term comes from the KL penalty. Note that
Enold [Wn (S, a)f (S, a)] = En [f (S, a)] by canceling the density ratio. Applying (6), we obtain
Vθ Jppo (θ) = Enold Wn (s,a)(vθ log π(a∣s)(Qλ(s,a) — φ(s,a)) + Vθ fθ(s,a) Vaφ(s,a)) .	(20)
Putting everything together, we summarize our PPO algorithm with Stein control variates in Algo-
rithm 1. It is also straightforward to integrate the Stein control variate with TRPO.
4	Related Work
Stein’s identity has been shown to be a powerful tool in many areas of statistical learning and infer-
ence. An incomplete list includes Gorham & Mackey (2015), Oates et al. (2017), Oates et al. (2016),
Chwialkowski et al. (2016), Liu et al. (2016), Sedghi et al. (2016), Liu & Wang (2016), Feng et al.
(2017), Liu & Lee (2017). This work was originally motivated by Oates et al. (2017), which uses
Stein’s identity as a control variate for general Monte Carlo estimation. However, as discussed in
Section 3.1, the original formulation of Stein’s identity can not be directly applied to policy gradi-
ent, and we need the mechanism introduced in (6) that also connects to the reparameterization trick
(Kingma & Welling, 2013; Rezende et al., 2014).
Control variate method is one of the most widely used variance reduction techniques in policy gradi-
ent (see e.g., Greensmith et al., 2004). However, action-dependent baselines have not yet been well
7
Published as a conference paper at ICLR 2018
Algorithm 1 PPO with Control Variate through Stein’s Identity (the PPO procedure is adapted from
Algorithm 1 in Heess et al. 2017)
repeat
Run policy πθ for n timesteps, collecting {st, at, ξt, rt}, where ξt is the random seed that generates action
at, i.e., at = fθ (st, ξt). Set πold 4- πθ.
// Updating the baseline function φ
for K iterations do
Update w by one stochastic gradient descent step according to (14), or (15), or (27) for Gaussian
policies.
end for
// Updating the policy π
for M iterations do
Update θ by one stochastic gradient descent step with (20) (adapting it with (17) and (19) for Gaussian
policies).
end for
// Adjust the KL penalty coefficient λ
if KL[∏old∣∏θ] > βhighKLtarget then
λ 4 αλ
else if KL[∏old∣∏θ] < βlowKLtarget then
λ 一 λ∕α
end if
until Convergence
studied. Besides Q-prop (Gu et al., 2016b) which we draw close connection to, the work of Thomas
& Brunskill (2017) also suggests a way to incorporate action-dependent baselines, but is restricted to
the case of compatible function approximation. More recently, Tucker et al. (2017) studied a related
action-dependent control variate for discrete variables in learning latent variable models.
Recently, Gu et al. (2017) proposed an interpolated policy gradient (IPG) framework for integrating
on-policy and off-policy estimates that generalizes various algorithms including DDPG and Q-prop.
If we set ν = 1 and pπ = pβ (corresponding to using off-policy data purely) in IPG, it reduces to
a special case of (16) with ψw(s, a) = Qw(s, a) - E∏(a∣s)[Qw(s, a)] where Qw an approximation
of the Q-function. However, the emphasis of Gu et al. (2017) is on integrating on-policy and off-
policy estimates, generally yielding theoretical bias, and the results of the case when ν = 1 and
pπ = pβ were not reported. Our work presents the result that shows significant improvement of
sample efficiency in policy gradient by using nonlinear, action-dependent control variates.
In parallel to our work, there have been some other works discovered action-dependent baselines
for policy-gradient methods in reinforcement learning. Such works include Grathwohl et al. (2018)
which train an action-dependent baseline for both discrete and continuous control tasks. Wu et al.
(2018) exploit per-dimension independence of the action distribution to produce an action-dependent
baseline in continuous control tasks.
5	Experiments
We evaluated our control variate method when combining with PPO and TRPO on continuous con-
trol environments from the OpenAI Gym benchmark (Brockman et al., 2016) using the MuJoCo
physics simulator (Todorov et al., 2012). We show that by using our more flexible baseline func-
tions, we can significantly improve the sample efficiency compared with methods based on the
typical value function baseline and Q-prop.
All our experiments use Gaussian policies. As suggested in Section 3.3, we assume the baseline to
have a form of φw(s, a) = V π(s) + ψw(s, a), where V π is the valued function estimated separately
in the same way as the value function baseline, and ψw(s, a) is a parametric function whose value
w is decided by minimizing either Eq (14) (denoted by FitQ), or Eq (27) designed for Gaussian
policy (denoted by MinVar). We tested three different architectures of ψw(s, a), including
Linear. ψw (s, a) = Naqw (a, μ∏(s)), (a - μ∏ (s))i, where qw is a parametric function designed
for estimating the Q function Qπ . This structure is motivated by Q-prop, which estimates w by
8
Published as a conference paper at ICLR 2018
——Value
—MinVar-Linear
→- MinVar-Quadratic
→- MinVar-MLP
—FitQ-Linear
—FitQ-Quadratic
τ- FitQ-MLP
Figure 1: The variance of gradient estimators of different control variates under a fixed policy obtained by
running vanilla PPO for 200 iterations in the Walker2d-v1 environment.
fitting qw(s, a) with Qπ. Our MinVar, and FitQ methods are different in that they optimize w as
a part of φw(s, a) by minimizing the objective in Eq (14) and Eq (27). We show in Section 5.2 that
our optimization methods yield better performance than Q-prop even with the same architecture of
ψw. This is because our methods directly optimize for the baseline function φw (s, a), instead of
qw(s, a) which serves an intermediate step.
Quadratic. ψw(s,a) = —(a 一 μw(s))>∑W1 (a 一 μw(s)). In our experiments, we set μw(s) to
be a neural network, and Σw a positive diagonal matrix that is independent of the state s. This is
motivated by the normalized advantage function in Gu et al. (2016a).
MLP. ψw(s, a) is assumed to be a neural network in which we first encode the state s with a hidden
layer, and then concatenate it with the action a and pass them into another hidden layer before the
output.
Further, we denote by Value the typical value function baseline, which corresponds to setting
ψw (s, a) = 0 in our case. For the variance parameters θ2 of the Gaussian policy, we use formula
(19) for Linear and Quadratic, but (18) for MLP due to the difficulty of calculating the second
order derivative Vα,αψw (s, a) in MLP. All the results We report are averaged over three random
seeds. See Appendix for implementation details.
5.1	Comparing the Variance of different Gradient Estimators
We start with comparing the variance of the gradient estimators with different control variates. Fig-
ure 1 shows the results on Walker2d-v1, when we take a fixed policy obtained by running the vanilla
PPO for 2000 steps and evaluate the variance of the different gradient estimators under different
sample size n. In order to obtain unbiased estimates of the variance, we estimate all the baseline
functions using a hold-out dataset with a large sample size. We find that our methods, especially
those using the MLP and Quadratic baselines, obtain significantly lower variance than the typical
value function baseline methods. In our other experiments of policy optimization, we used the data
from the current policy to estimate φ, which introduces a small bias theoretically, but was found to
perform well empirically (see Appendix 7.4 for more discussion on this issue).
5.2	Comparison with Q-prop using TRPO for policy optimization
Next we want to check whether our Stein control variate will improve the sample efficiency of policy
gradient methods over existing control variate, e.g. Q-prop (Gu et al., 2016b). One major advan-
tage of Q-prop is that it can leverage the off-policy data to estimate qw (s, a). Here we compare our
methods with the original implementation of Q-prop which incorporate this feature for policy opti-
mization. Because the best existing version of Q-prop is implemented with TRPO, we implement a
variant of our method with TRPO for fair comparison. The results on Hopper-v1 and Walker2d-v1
are shown in Figure 2, where we find that all Stein control variates, even including FitQ+Linear
9
Published as a conference paper at ICLR 2018
Figure 2: Evaluation of TRPO with Q-prop and Stein control variates on Hopper-v1 and Walker2d-v1.
Walker2d-v1
	HUmanoid-VI		HUmanoidStandUp-V1	
Function	MinVar	FitQ	MinVar	FitQ
MLP	3847 ± 249.3	3334 ± 695.7	143314 ± 9471	139315 ± 10527
Quadratic	2356 ± 294.7	3563 ± 235.1	117962 ± 5798	141692 ± 3489
Linear	2547 ± 701.8	3404 ± 813.1	129393 ± 18574	132112 ± 11450
Value	2207 ± 554		128765 ± 13440	
Table 1: Results of different control variates and methods for optimizing φ, when combined with
PPO. The reported results are the average reward at the 10000k-th time step on Humanoid-v1 and
the 5000k-th time step on HumanoidStandup-v1.
and MinVar+Linear, outperform Q-prop on both tasks. This is somewhat surprising because the
Q-prop compared here utilizes both on-policy and off-policy data to update w, while our methods
use only on-policy data. We expect that we can further boost the performance by leveraging the off-
policy data properly, which we leave it for future work. In addition, we noticed that the Quadratic
baseline generally does not perform as well as it promises in Figure 1; this is probably because that
in the setting of policy training we optimize φw for less number of iterations than what we do for
evaluating a fixed policy in Figure 1, and it seems that Quadratic requires more iterations than
MLP to converge well in practice.
5.3	PPO with Different Control Variates
Finally, we evaluate the different Stein control variates with the more recent proximal policy op-
timization (PPO) method which generally outperforms TRPO. We first test all the three types of
φ listed above on Humanoid-v1 and HumanoidStandup-v1, and present the results in Table 1. We
can see that all the three types of Stein control variates consistently outperform the value function
baseline, and Quadratic and MLP tend to outperform Linear in general.
We further evaluate our methods on a more extensive list of tasks shown in Figure 3, where we only
show the result of PPO+MinVar+MLP and PPO+FitQ+MLP which we find tend to perform the
best according to Table 1. We can see that our methods can significantly outperform PPO+Value
which is the vanilla PPO with the typical value function baseline (Heess et al., 2017).
It seems that MinVar tends to work better with MLP while FitQ works better with Quadratic
in our settings. In general, we find that MinVar+MLP tends to perform the best in most cases.
Note that the MinVar here is based on minimizing the approximate objective (27) specific to Gaus-
sian policy, and it is possible that we can further improve the performance by directly minimizing
the exact objective in (15) if an efficient implementation is made possible. We leave this a future
direction.
10
Published as a conference paper at ICLR 2018
Figure 3: Evaluation of PPO with the value function baseline and Stein control variates across different Mujoco
environments: HumanoidStandup-v1, Humanoid-v1, Walker2d-v1, Ant-v1 and Hopper-v1, HalfCheetah-v1.
6	Conclusion
We developed the Stein control variate, a new and general variance reduction method for obtain-
ing sample efficiency in policy gradient methods. Our method generalizes several previous ap-
proaches. We demonstrated its practical advantages over existing methods, including Q-prop and
value-function control variate, in several challenging RL tasks. In the future, we will investigate
how to further boost the performance by utilizing the off-policy data, and search for more efficient
ways to optimize φ. We would also like to point out that our method can be useful in other chal-
lenging optimization tasks such as variational inference and Bayesian optimization where gradient
estimation from noisy data remains a major challenge.
References
Kavosh Asadi, Cameron Allen, Melrose Roderick, Abdel-rahman Mohamed, George Konidaris, and
Michael Littman. Mean actor critic. arXiv preprint arXiv:1709.00503, 2017.
Andrew D Barbour and Louis Hsiao Yun Chen. An introduction to Stein’s method, volume 4. World
Scientific, 2005.
Greg Brockman, Vicki Cheung, Ludwig Pettersson, Jonas Schneider, John Schulman, Jie Tang, and
Wojciech Zaremba. Openai gym, 2016.
Kacper Chwialkowski, Heiko Strathmann, and Arthur Gretton. A kernel test of goodness of fit. In
International Conference on Machine Learning, pp. 2606-2615, 2016.
Yihao Feng, Dilin Wang, and Qiang Liu. Learning to draw samples with amortized stein variational
gradient descent. Conference on Uncertainty in Artificial Intelligence (UAI), 2017.
Jackson Gorham and Lester Mackey. Measuring sample quality with stein’s method. In Advances
in Neural Information Processing Systems, pp. 226-234, 2015.
Will Grathwohl, Dami Choi, Yuhuai Wu, Geoff Roeder, and David Duvenaud. Backpropagation
through the void: Optimizing control variates for black-box gradient estimation. In International
Conference on Learning Representations, 2018. URL https://openreview.net/forum?
id=SyzKd1bCW.
11
Published as a conference paper at ICLR 2018
Evan Greensmith, Peter L Bartlett, and Jonathan Baxter. Variance reduction techniques for gradient
estimates in reinforcement learning. Journal ofMachine Learning Research, 5(Nov):1471-1530,
2004.
Shixiang Gu, Timothy Lillicrap, Ilya Sutskever, and Sergey Levine. Continuous deep q-learning
with model-based acceleration. In International Conference on Machine Learning, pp. 2829-
2838, 2016a.
Shixiang Gu, Timothy P. Lillicrap, Zoubin Ghahramani, Richard E. Turner, and Sergey Levine.
Q-prop: Sample-efficient policy gradient with an off-policy critic. International Conference on
Learning Representations (ICLR), 2016b.
Shixiang Gu, Timothy Lillicrap, Zoubin Ghahramani, Richard E Turner, Bernhard Scholkopf, and
Sergey Levine. Interpolated policy gradient: Merging on-policy and off-policy gradient estimation
for deep reinforcement learning. Advances in Neural Information Processing Systems, 2017.
Nicolas Heess, Srinivasan Sriram, Jay Lemmon, Josh Merel, Greg Wayne, Yuval Tassa, Tom Erez,
Ziyu Wang, Ali Eslami, Martin Riedmiller, et al. Emergence of locomotion behaviours in rich
environments. arXiv preprint arXiv:1707.02286, 2017.
Sham M Kakade. A natural policy gradient. In Advances in Neural Information Processing Systems,
pp. 1531-1538, 2002.
Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. Proceedings of the
3rd International Conference on Learning Representations (ICLR), 2014.
Diederik P Kingma and Max Welling. Auto-encoding variational bayes. Proceedings of the 2nd
International Conference on Learning Representations (ICLR), 2013.
Timothy P. Lillicrap, Jonathan J. Hunt, Alexander Pritzel, Nicolas Heess, Tom Erez, Yuval Tassa,
David Silver, and Daan Wierstra. Continuous control with deep reinforcement learning. Proceed-
ings of the 2nd International Conference on Learning Representations (ICLR), 2015.
Qiang Liu and Jason D Lee. Black-box importance sampling. International Conference on Artificial
Intelligence and Statistics, 2017.
Qiang Liu and Dilin Wang. Stein variational gradient descent: A general purpose bayesian inference
algorithm. In Advances in Neural Information Processing Systems, 2016.
Qiang Liu, Jason Lee, and Michael Jordan. A kernelized stein discrepancy for goodness-of-fit tests.
In International Conference on Machine Learning, pp. 276-284, 2016.
Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Alex Graves, Ioannis Antonoglou, Daan Wier-
stra, and Martin Riedmiller. Playing atari with deep reinforcement learning. arXiv preprint
arXiv:1312.5602, 2013.
Volodymyr Mnih, Adria Puigdomenech Badia, Mehdi Mirza, Alex Graves, Timothy Lillicrap, Tim
Harley, David Silver, and Koray Kavukcuoglu. Asynchronous methods for deep reinforcement
learning. In International Conference on Machine Learning, pp. 1928-1937, 2016.
Chris J. Oates and Mark A. Girolami. Control functionals for quasi-monte carlo integration. In
International Conference on Artificial Intelligence and Statistics, 2016.
Chris J Oates, Jon Cockayne, Francois-Xavier Briol, and Mark Girolami. Convergence rates for a
class of estimators based on stein’s identity. arXiv preprint arXiv:1603.03220, 2016.
Chris J Oates, Mark Girolami, and Nicolas Chopin. Control functionals for monte carlo integration.
Journal of the Royal Statistical Society: Series B (Statistical Methodology), 79(3):695-718, 2017.
Danilo Jimenez Rezende, Shakir Mohamed, and Daan Wierstra. Stochastic backpropagation and ap-
proximate inference in deep generative models. Proceedings of the 31st International Conference
on Machine Learning (ICML), 2014.
12
Published as a conference paper at ICLR 2018
Geoffrey Roeder, Yuhuai Wu, and David K. Duvenaud. Sticking the landing: An asymptotically
zero-variance gradient estimator for variational inference. Advances in Neural Information Pro-
cessing Systems, 2017.
John Schulman, Sergey Levine, Philipp Moritz, Michael I. Jordan, and Pieter Abbeel. Trust region
policy optimization. In International Conference on Machine Learning, 2015.
John Schulman, Philipp Moritz, Sergey Levine, Michael Jordan, and Pieter Abbeel. High-
dimensional continuous control using generalized advantage estimation. International Confer-
ence of Learning Representations (ICLR), 2016.
John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. Proximal policy
optimization algorithms. Advances in Neural Information Processing Systems, 2017.
Hanie Sedghi, Majid Janzamin, and Anima Anandkumar. Provable tensor methods for learning
mixtures of generalized linear models. In International Conference on Artificial Intelligence and
Statistics, 2016.
David Silver, Guy Lever, Nicolas Heess, Thomas Degris, Daan Wierstra, and Martin Riedmiller.
Deterministic policy gradient algorithms. In Proceedings of the 31st International Conference on
Machine Learning (ICML),pp. 387-395, 2014.
David Silver, Aja Huang, Chris J Maddison, Arthur Guez, Laurent Sifre, George Van Den Driessche,
Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, et al. Mastering
the game of go with deep neural networks and tree search. Nature, 529(7587):484-489, 2016.
David Silver, Julian Schrittwieser, Karen Simonyan, Ioannis Antonoglou, Aja Huang, Arthur Guez,
Thomas Hubert, Lucas Baker, Matthew Lai, Adrian Bolton, Yutian Chen, Timothy Lillicrap, Fan
Hui, Laurent Sifre, George van den Driessche, Thore Graepel, and Demis Hassabis. Mastering the
game of go without human knowledge. Nature, 550(7676):354-359, Oct 2017. ISSN 0028-0836.
Charles Stein. Approximate computation of expectations. Lecture Notes-Monograph Series, 7:
i-164, 1986.
Richard S. Sutton and Andrew G. Barto. Introduction to Reinforcement Learning. MIT Press,
Cambridge, MA, USA, 1st edition, 1998. ISBN 0262193981.
Philip S. Thomas and Emma Brunskill. Policy gradient methods for reinforcement learning with
function approximation and action-dependent baselines. arxiv, abs/1706.06643, 2017.
Emanuel Todorov, Tom Erez, and Yuval Tassa. Mujoco: A physics engine for model-based control.
In Intelligent Robots and Systems (IROS), 2012 IEEE/RSJ International Conference on, pp. 5026-
5033. IEEE, 2012.
George Tucker, Andriy Mnih, Chris J Maddison, and Jascha Sohl-Dickstein. Rebar: Low-variance,
unbiased gradient estimates for discrete latent variable models. Advances in Neural Information
Processing Systems, 2017.
Lex Weaver and Nigel Tao. The optimal reward baseline for gradient-based reinforcement learning.
In Proceedings of the Seventeenth conference on Uncertainty in artificial intelligence, pp. 538-
545. Morgan Kaufmann Publishers Inc., 2001.
Ronald J Williams. Simple statistical gradient-following algorithms for connectionist reinforcement
learning. Machine learning, 8(3-4):229-256, 1992.
Cathy Wu, Aravind Rajeswaran, Yan Duan, Vikash Kumar, Alexandre M Bayen, Sham Kakade,
Igor Mordatch, and Pieter Abbeel. Variance reduction for policy gradient with action-dependent
factorized baselines. In International Conference on Learning Representations, 2018. URL
https://openreview.net/forum?id=H1tSsb-AW.
13
Published as a conference paper at ICLR 2018
7	Appendix
7.1	Proof of Theorem 3.1
Proof. Assume a = fθ (s, ξ) + ξ0 where ξ0 is Gaussian noise N(0, h2) with a small variance h that
We will take h → 0+. Denote by π(a, ξ∣s) the joint density function of (a, ξ) conditioned on s. It
can be written as
π(a,ξ∣s) = ∏(a∣s,ξ)∏(ξ) X exp (-击||a - fθ(s,ξ)∣∣2) ∏(ξ).
Taking the derivative of log π(a, ξ∣s) w.r.t. a gives
▽a log π(a, ξls) = - h (a - fθ (s, ξ)) .
Similarly, taking the derivative of log π(a, ξ∣s) w.r.t. θ, we have
Vθ log ∏(a,ξ∣s) = h Vθ fθ (s,ξ)(a — fθ (s,ξ))
=-Vθfθ(s,ξ)Va log∏(a,ξ∣s).
Multiplying both sides with φ(s, a) and taking the conditional expectation yield
E∏(a,ξ∣s) [^θ log ∏(a, ξ∣s)Φ(s, a)] = —E∏(a,ξ∣s) [Vθ fθ (s, ξ)Va log ∏(a, ξ∣s)Φ(s, a)]
=E∏(ξ) [Vθ fθ (s, ξ)E∏(a∣s,ξ) [ — Va log ∏(a, ξ∣s)φ(s, a)]]
=Eπ(ξ) [vθ fθ (S, ξ)Eπ(a∣s,ξ) [vaφ(s, a)]]
=Eπ(a,ξ∣s) [vθ fθ (S, ξ)vaφ(s, a)]	QI)
where the third equality comes from Stein,s identity (5) of ∏(a∣ξ, s). One the other hand,
E∏(a,ξ∣s) [Vθ log ∏(a, ξ∣s)φ(s, a)]
=E∏(a,ξ∣s) [vθ log π(a∣S)φ(s, a)] + Eπ(a,ξ∣s) [V6 log n(6|s, a)φ(s, a)]	(22)
=E∏(a,ξ∣s) [vθ log ∏(a∣s)φ(s, a)] ,	(23)
where the second term of (22) equals zero because
E∏(α,ξ∣s) [vθ log π(ξls,a)φ(s,a)]= Eπ(a∣ s) [Eπ(ξ∣ s,a) [vθ log π(ξ1s, a)]]φ(s,a)] = 0.
Combining (21) and (23) gives the result:
Eπ(a∣s) [vθ log π(als)φ(s, a)] = Eπ(a,ξ∣s) [vθfθ (s, ξ)vaφ(s, a)]
The above result does not depend on h, and hence holds when h → 0+ . This completes the proof.
□
7.2	ESTIMATING φ FOR GAUSSIAN POLICIES
The parameters w in φ should be ideally estimated by minimizing the variance of the gradient
estimator var(vθJ(θ)) using (15). Unfortunately, it is computationally slow and memory ineffi-
cient to directly solve (15) with the current deep learning platforms, due to the limitation of the
auto-differentiation implementations. In general, this problem might be solved with a customized
implementation of gradient calculation as a future work. But in the case of Gaussian policies, we
find minimizing var(v* J(θ)) +var(v∑ J(θ)) provides an approximation that we find works in our
experiments.
More specifically, recall that Gaussian policy has a form of
π(a |s) X p∑s) exP (-2 (a - μ(s))> ς(S)T (a - μ(s))),
where μ(s) and Σ(s) are parametric functions of state s, and ∣Σ∣ is the determinant of Σ. Following
Eq (8) we have
v*J(θ) = E∏ [-v° log ∏(a∣s)(Qπ(s, a) — φ(s,a)) + vΟφ(s, a)],	(24)
14
Published as a conference paper at ICLR 2018
Figure 4: Evaluation of PPO with Stein control variate when φ is estimated based on data from different
iterations. The architecture of φ is choosen to be MLP.
Walker2d-v1
where We use the fact that Vμf (s,ξ) = 1 and
Vμ logπ(a∣s) = -Va log π(a∣s) = Σ(s)-1(a — μ(s)).
Similarly, following Eq (18), we have
V∑J(θ) = En V∑ logπ(a∣s)(Qπ(s,a) — φ(s,a)) — 1 Valogπ(a∣s)Vαφ(s,a)>	(25)
where
V∑ logπ(a∣s) = 1 (—∑-1 (s) + ∑(s)-1(a — μ(s))(a 一 μ(s))>Σ(s)-1).
And Eq (19) reduces to
V∑J(θ)= En V∑logπ(a∣s)(Qn(s,a) — φ(s,a)) + 2Va,aφ(s,a) .	(26)
Because the baseline function does not change the expectations in (24) and (25), we can frame
mι□w var(Vμ J(θ)) + var(V∑ J(θ)) into
n
∏wnX kg”(st,at)k2 + kg∑(st, at)kF ,	(27)
t=1
where gμ and g∑ are the integrands in (24) and (25) (or (26)) respectively, that is, gμ(s, a)=
—Va log∏(a∣s)(Qn(s,a) 一 φ(s,a)) + Vaφ(s,α) and g∑(s, a) = V∑ log π(a∣s)(Qn(s, a)—
φ(s, a)) — 1 Va log∏(a∣s)Vɑφ(s, a)>. Here IlAkF ：= Pij Aj is the matrix Frobenius norm.
7.3	Experiment Details
The advantage estimation An(st, at) in Eq 16 is done by GAE with λ = 0.98, and Y = 0.995
(Schulman et al., 2016), and correspondingly, Qn(st, at) = An(st, at) + Vn(st) in (9). Observa-
tions and advantage are normalized as suggested by Heess et al. (2017). The neural networks of the
policies π(a∣s) and baseline functions φw (s, a) use RelU activation units, and the neural network of
the value function Vn (s) uses Tanh activation units. All our results use Gaussian MLP policy in our
experiments with a neural-network mean and a constant diagonal covariance matrix.
Denote by ⅛ and d。the dimension of the states S and action a, respectively. Network sizes are fol-
lows: On Humanoid-v1 and HUamnOidStandUp-v1, we use (ds, √dɑ ∙ 5, 5) for both policy network
and value network; On other Mujoco environments, we use (10 ∙ ⅛, √10 ∙ d$ ∙ 5, 5) for both policy
network and value network, with learning rate 0.0009 for policy network and 0.0001 for value
(ds ∙5)	(ds ∙5)
network. The network for φ is (100, 100) with state as the input and the action concatenated with
the second layer.
15
Published as a conference paper at ICLR 2018
All experiments of PPO with Stein control variate selects the best learning rate from {0.001, 0.0005,
0.0001} for φ networks. We use ADAM (Kingma & Ba, 2014) for gradient descent and evaluate the
policy every 20 iterations. Stein control variate is trained for the best iteration in range of {250, 300,
400, 500, 800}.
7.4	ESTIMATING φ USING DATA FROM PREVIOUS ITERATIONS
Our experiments on policy optimization estimate φ based on the data from the current iteration.
Although this theoretically introduces a bias into the gradient estimator, we find it works well em-
pirically in our experiments. In order to exam the effect of such bias, we tested a variant of PPO-
MinVar-MLP which fits φ using data from the previous iteration, or previous two iterations, both of
which do not introduce additional bias due to the dependency of φ on the data. Figure 4 shows the
results in Hopper-v1 and Walker2d-v1, where we find that using the data from previous iterations
does not seem to improve the result. The may be because during the policy optimization, the updates
of φ are early stopped and hence do not introduce overfitting even when it is based on the data from
the current iteration.
16