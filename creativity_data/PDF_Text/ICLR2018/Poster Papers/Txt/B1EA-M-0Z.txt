Published as a conference paper at ICLR 2018
Deep Neural Networks as Gaussian Processes
Jaehoon Lee**, Yasaman Bahri*t, Roman Novak, Samuel S. Schoenholz,
Jeffrey Pennington, Jascha Sohl-Dickstein
Google Brain
{jaehlee, yasamanb, romann, schsam, jpennin, jaschasd}@google.com
Ab stract
It has long been known that a single-layer fully-connected neural network with an
i.i.d. prior over its parameters is equivalent to a Gaussian process (GP), in the limit
of infinite network width. This correspondence enables exact Bayesian inference
for infinite width neural networks on regression tasks by means of evaluating the
corresponding GP. Recently, kernel functions which mimic multi-layer random
neural networks have been developed, but only outside of a Bayesian framework.
As such, previous work has not identified that these kernels can be used as co-
variance functions for GPs and allow fully Bayesian prediction with a deep neural
network.
In this work, we derive the exact equivalence between infinitely wide deep net-
works and GPs. We further develop a computationally efficient pipeline to com-
pute the covariance function for these GPs. We then use the resulting GPs to per-
form Bayesian inference for wide deep neural networks on MNIST and CIFAR-
10. We observe that trained neural network accuracy approaches that of the corre-
sponding GP with increasing layer width, and that the GP uncertainty is strongly
correlated with trained network prediction error. We further find that test perfor-
mance increases as finite-width trained networks are made wider and more similar
to a GP, and thus that GP predictions typically outperform those of finite-width
networks. Finally we connect the performance of these GPs to the recent theory
of signal propagation in random neural networks.
1	Introduction
Deep neural networks have emerged in recent years as flexible parametric models which can fit
complex patterns in data. As a contrasting approach, Gaussian processes have long served as a
traditional nonparametric tool for modeling. An equivalence between these two approaches was
derived in Neal (1994a), for the case of one layer networks in the limit of infinite width. Neal
(1994a) further suggested that a similar correspondence might hold for deeper networks.
Consider a deep fully-connected neural network with i.i.d. random parameters. Each scalar output
of the network, an affine transformation of the final hidden layer, will be a sum of i.i.d. terms. As we
will discuss in detail below, in the limit of infinite width the Central Limit Theorem* 1 implies that the
function computed by the neural network (NN) is a function drawn from a Gaussian process (GP).
In the case of single hidden-layer networks, the form of the kernel of this GP is well known (Neal
(1994a); Williams (1997)).
This correspondence implies that if we choose the hypothesis space to be the class of infinitely
wide neural networks, an i.i.d. prior over weights and biases can be replaced with a corresponding
GP prior over functions. As noted by (Williams, 1997), this substitution enables exact Bayesian
inference for regression using neural networks. The computation requires building the necessary
covariance matrices over the training and test sets and straightforward linear algebra computations.
*Both authors contributed equally to this work.
^Work done as a member of the Google AI Residency program (g.co/airesidency).
1Throughout this paper, we assume the conditions on the parameter distributions and nonlinearities are such
that the Central Limit Theorem will hold; for instance, that the weight variance is scaled inversely proportional
to the layer width.
1
Published as a conference paper at ICLR 2018
In light of the resurgence in popularity of neural networks, it is timely to revisit this line of work.
We delineate the correspondence between deep and wide neural networks and GPs and utilize it for
Bayesian training of neural networks on regression tasks.
1.1	Related Work
Our work touches on aspects of GPs, Bayesian learning, and compositional kernels. The corre-
spondence between infinite neural networks and GPs was first noted by Neal (1994a;b). Williams
(1997) computes analytic GP kernels for single hidden-layer neural networks with error function or
Gaussian nonlinearities and noted the use of the GP prior for exact Bayesian inference in regression.
Duvenaud et al. (2014) discusses several routes to building deep GPs and observes the degenerate
form of kernels that are composed infinitely many times - a point We will return to Section 3.2 -
but they do not derive the form of GP kernels as we do. Hazan & Jaakkola (2015) also discusses
constructing kernels equivalent to infinitely wide deep neural networks, but their construction does
not go beyond two hidden layers with nonlinearities.
Related work has also appeared outside of the GP context but in compositional kernel construc-
tions. Cho & Saul (2009) derives compositional kernels for polynomial rectified nonlinearities,
which includes the Sign and ReLU nonlinearities, and can be used in GPs; our manner of com-
posing kernels matches theirs, though the context is different. Daniely et al. (2016) extends the
construction of compositional kernels to neural networks whose underlying directed acyclic graph
is of general form. They also prove, utilizing the formalism of dual activations, that compositional
kernels originating from fully-connected topologies with the same nonlinearity become degenerate
when composed infinitely many times. In a different context than compositional kernels, Poole et al.
(2016); Schoenholz et al. (2017) study the same underlying recurrence relation for the specific case
of fully-connected networks and bounded nonlinearities. They distinguish regions in hyperparame-
ter space with different fixed points and convergence behavior in the recurrence relations. The focus
in these works was to better understand the expressivity and trainability of deep networks.
Drawing inspiration from the multi-layer nature of deep neural networks, there is a line of work
considering various approaches to stacking GPs, such as deep GPs (Lawrence & Moore (2007);
Damianou & Lawrence (2013); Hensman & Lawrence (2014); Duvenaud et al. (2014); Bui et al.
(2016)), which can give rise to a richer class of probabilistic models beyond GPs. This contrasts
with our work, where we study GPs that are in direct correspondence with deep, infinitely wide
neural networks. Krauth et al. (2016) has recently explored the performance of GP models with
deep kernels given in Cho & Saul (2009), implemented with scalable approximations. However,
they do not discuss the equivalence between deep neural networks and GPs with compositional
kernels, which constitutes a conceptual contribution of our work. Furthermore, we note that the GP
kernels in our work are more general than the compositional kernel construction outlined in Cho
& Saul (2009) in two respects: (i) we are not limited to rectified polynomials but can deal with
general nonlinearities, and (ii) we consider two additional hyperparameters in the kernels, which
would correspond to the weight and bias parameter variances in a neural network. Finally, Gal &
Ghahramani (2016) connects dropout in deep neural networks with approximate Bayesian inference
in deep GPs.
Another series of recent works (Wilson et al. (2016b;a); Al-Shedivat et al. (2017)), termed deep
kernel learning, utilize GPs with base kernels which take in features produced by a deep multilayer
neural network, and train the resulting model end-to-end. Our work differs from these in that our
GP corresponds to a multilayer neural network. Additionally, our GP kernels have many fewer pa-
rameters, and these parameters correspond to the hyperparameters of the equivalent neural network.
1.2	Summary of Contributions
We begin by specifying the form of a GP which corresponds to a deep, infinitely wide neural network
- hereafter referred to as the Neural Network GP (NNGP) - in terms of a recursive, deterministic
computation of the kernel function. The prescription is valid for generic pointwise nonlinearities in
fully-connected feedforward networks. We develop a computationally efficient method (Section 2.5)
to compute the covariance function corresponding to deep neural networks with fixed hyperparam-
eters.
2
Published as a conference paper at ICLR 2018
In this work, as a first proof of concept of our NNGP construction, we focus on exact Bayesian
inference for regression tasks, treating classification as regression on class labels. While less prin-
cipled, least-squares classification performs well (Rifkin et al., 2003) and allows us to compare
exact inference via a GP to prediction by a trained neural network on well-studied tasks (MNIST
and CIFAR-10 classification). Note that it is possible to extend GPs to softmax classification with
cross entropy loss (Williams & Barber (1998); Rasmussen & Williams (2006)), which we aim to
investigate in future work.
We conduct experiments making Bayesian predictions on MNIST and CIFAR-10 (Section 3) and
compare against NNs trained with standard gradient-based approaches. The experiments explore
different hyperparameter settings of the Bayesian training including network depth, nonlinearity,
training set size (up to and including the full dataset consisting of tens of thousands of images), and
weight and bias variance. Our experiments reveal that the best NNGP performance is consistently
competitive against that of NNs trained with gradient-based techniques, and the best NNGP setting,
chosen across hyperparameters, often surpasses that of conventional training (Section 3, Table 1).
We further observe that, with increasing network width, the performance of neural networks with
gradient-based training approaches that of the NNGP computation, and that the GP uncertainty is
strongly correlated with prediction error. Furthermore, the performance of the NNGP depends on
the structure of the kernel, which can be connected to recent work on signal propagation in networks
with random parameters (Schoenholz et al., 2017).
2	Deep, infinitely wide Neural Networks are drawn from GPs
We begin by specifying the correspondence between GPs and deep, infinitely wide neural networks,
which hinges crucially on application of the Central Limit Theorem. We review the single-hidden
layer case (Section 2.2) before moving to the multi-layer case (Section 2.3).
2.1	Notation
Consider an L-hidden-layer fully-connected neural network with hidden layers of width Nl (for layer
l) and pointwise nonlinearities φ. Let x ∈ Rdin denote the input to the network, and let zL ∈ Rdout
denote its output. The ith component of the activations in the lth layer, post-nonlinearity and post-
affine transformation, are denoted xli and zil respectively. We will refer to these as the post- and
pre-activations. (We let xi ≡ xi for the input, dropping the Arabic numeral superscript, and instead
use a Greek superscript xα to denote a particular input α). Weight and bias parameters for the lth
layer have components Wilj, bli, which are independent and randomly drawn, and we take them all to
have zero mean and variances σW/N and σ2, respectively. GP(μ, K) denotes a Gaussian process
with mean and covariance functions μ(∙), K(∙, ∙), respectively.
2.2	Review of Gaussian Processes and S ingle-layer Neural Networks
We briefly review the correspondence between single-hidden layer neural networks and GPs (Neal
(1994a;b); Williams (1997)). The ith component of the network output, zi1, is computed as,
N1	din
zi1(x) =	bi1	+ XWi1jxj1(x),	xj1(x)	= φ	bj0	+ XWj0kxk	,	(1)
j=1	k=1
where we have emphasized the dependence on input x. Because the weight and bias parameters are
taken to be i.i.d., the post-activations xj1, xj10 are independent for j 6= j0. Moreover, since zi1(x) is
a sum of i.i.d terms, it follows from the Central Limit Theorem that in the limit of infinite width
N1 → ∞, zi1(x) will be Gaussian distributed. Likewise, from the multidimensional Central Limit
Theorem, any finite collection of {zi1(xα=1), ..., zi1(xα=k)} will have a joint multivariate Gaussian
distribution, which is exactly the definition of a Gaussian process. Therefore we conclude that
z1 〜 GP(μ1,K1), aGP with mean μ1 and covariance K1, which are themselves independent of i.
Because the parameters have zero mean, We have that μ1(χ) = E [z1(χ)] = 0 and,
K1(x, x0) ≡ E	zi1(x)zi1(x0)	=	σb2	+ σw2 E	xi1(x)xi1(x0)	≡	σb2 +	σw2 C(x, x0),	(2)
3
Published as a conference paper at ICLR 2018
where we have introduced C(x, x0) as in Neal (1994a); it is obtained by integrating against the
distribution of W0, b0. Note that, as any two zi1, z1 for i 6= j are joint Gaussian and have zero
i
covariance, they are guaranteed to be independent despite utilizing the same features produced by
the hidden layer.
2.3	Gaussian Processes and Deep Neural Networks
The arguments of the previous section can be extended to deeper layers by induction. We proceed by
taking the hidden layer widths to be infinite in succession (N1 → ∞, N2 → ∞, etc.) as we continue
with the induction, to guarantee that the input to the layer under consideration is already governed by
a GP. In Appendix C we provide an alternative derivation in terms of Bayesian marginalization over
intermediate layers, which does not depend on the order of limits, in the case of a Gaussian prior on
the weights. A concurrent work (de G. Matthews et al., 2018) further derives the convergence rate
towards a GP if all layers are taken to infinite width simultaneously, but at different rates.
Suppose that zjl-1 is a GP, identical and independent for every j (and hence xlj (x) are independent
and identically distributed). After l - 1 steps, the network computes
Nl
zil(x) = bli + X Wilj xlj (x), xlj(x) = φ(zjl-1(x)).	(3)
j=1
As before, zil (x) is a sum of i.i.d. random terms so that, as Nl → ∞, any finite collection
{z1 (xα=1),..., z1(xɑ=k)} will have joint multivariate Gaussian distribution and Zi 〜 GP(0, Kl).
The covariance is
Kl(X,χ0) ≡ Elzi(X)Zi(X')] = σ2 + σWEZiT〜GP(o,κi-i) [φ(ZiT(X))φ(ZiT(X'))].⑷
By induction, the expectation in Equation 4 is over the GP governing zil-1 , but this is equivalent
to integrating against the joint distribution of only Zil-1(X) and Zil-1(X0). The latter is described by
a zero mean, two-dimensional Gaussian whose covariance matrix has distinct entries Kl-1 (X, X0),
Kl-1(X, X), and Kl-1(X0, X0). As such, these are the only three quantities that appear in the result.
We introduce the shorthand
Kl(X, X0) = σb2 + σw2 Fφ K l-1 (X, X0), K l-1 (X, X), Kl-1(X0, X0)	(5)
to emphasize the recursive relationship between Kl and Kl-1 via a deterministic function F whose
form depends only on the nonlinearity φ. This gives an iterative series of computations which can
be performed to obtain KL for the GP describing the network’s final output.
For the base case K0, suppose Wj 〜N(0, σW/din), bj 〜N(0, σ2); We can utilize the recursion
relating K1 and K0, where
K0(x, X0) = E [z0(x)z0(x0)] = σb+σW (χ∙χ0).	⑹
In fact, these recurrence relations have appeared in other contexts. They are exactly the relations
derived in the mean field theory of signal propagation in fully-connected random neural networks
(Poole et al. (2016); Schoenholz et al. (2017)) and also appear in the literature on compositional
kernels (Cho & Saul (2009); Daniely et al. (2016)). For certain activation functions, Equation 5 can
be computed analytically (Cho & Saul (2009); Daniely et al. (2016)). In the case of the ReLU non-
linearity, it yields the well-known arccosine kernel (Cho & Saul (2009)) whose form we reproduce
in Appendix B. When no analytic form exists, it can instead be efficiently computed numerically, as
described in Section 2.5.
2.4	Bayesian Training of Neural Networks using Gaussian Process Priors
Here we provide a short review of how a GP prior over functions can be used to do Bayesian infer-
ence; see e.g. (Rasmussen & Williams, 2006) for a comprehensive review of GPs. Given a dataset
4
Published as a conference paper at ICLR 2018
D = {(x1, t1), ..., (xn, tn)} consisting of input-target pairs (x, t), we wish to make a Bayesian pre-
diction at test point x* using a distribution over functions z(x). This distribution is constrained to
take values z ≡ (z1, ..., zn) on the training inputs x ≡ (x1, ..., xn) and,
P(z*∣D,x*) = J dz P(z*∣z, x,x*) P(z|D) =	)J dz P(z*, z∣x*, x) P(t∣z),	(7)
where t = (t1, ..., tn)T are the targets on the training set, and P(t|z) corresponds to observation
noise. We will assume a noise model consisting of a Gaussian with variance σ2 centered at z .
If the conditions of Section 2.2 or 2.3 apply, our choice of prior over functions implies that
z1,…，zn, z* are n + 1 draws from a GP and z*, z|x*, X 〜 N(0, K) is a multivariate Gaussian
whose covariance matrix has the form
K = [KD,D	KX*,D
[Kx*,d Kχ*,x*r
where the block structure corresponds to the division between the training set and the test point.
That is, KD D is an n × n matrix whose (i, j)th element is K(xi, xj) with xi, xj ∈ D, while e.g.
the ith element of Kχ* ,d is K (x* ,x ),χi ∈D. As is standard in GPs, the integral in Equation 7 can
be done exactly, resulting in z* |D, x* 〜N(μ, K) with
μ = Kx* ,d (Kd,d + σ2In)-1t	(8)
K = Kx*,x* - Kχ*,D(Kd,D + σ2In)-1KT*,D	(9)
where In is the n × n identity. The predicted distribution for z* |D, x* is hence determined from
straightforward matrix computations, yet nonetheless corresponds to fully Bayesian training of the
deep neural network. The form of the covariance function used is determined by the choice of GP
prior, i.e. the neural network model class, which depends on depth, nonlinearity, and weight and
bias variances. We henceforth resume placing a superscript L as in KL to emphasize the choice of
depth for the compositional kernel.
2.5	Efficient Implementation of the GP Kernel
Given an L-layer deep neural network with fixed hyperparameters, constructing the covariance ma-
trix KL for the equivalent GP involves computing the Gaussian integral in Equation 4 for all pairs
of training-training and training-test points, recursively for all layers. For some nonlinearities, such
as ReLU, this integration can be done analytically. However, to compute the kernel corresponding
to arbitrary nonlinearities, the integral must be performed numerically.
The most direct implementation of a numerical algorithm for KL would be to compute integrals
independently for each pair of datapoints and each layer. This is prohibitively expensive and costs
O ng2L(nt2rain + ntrainntest) , where n2g is the sampling density for the pair of Gaussian random vari-
ables in the 2D integral and ntrain , ntest are the training and test set sizes, respectively. However, by
careful pipelining, and by preprocessing all inputs to have identical norm, we can improve this cost
to O ng2nvnc + L(nt2rain + ntrainntest) , where nv and nc are sampling densities for a variance and
correlation grid, as described below. In order to achieve this, we break the process into several steps:
1.	Generate: pre-activations U = [-Umax, ∙∙∙ ,Umax] consisting of ng elements linearly
spaced between -UmaX and Umax; variances S = [0,…,Smax] with n linearly spaced
elements, where SmaX < Umax; and correlations C = (-1,…，1) with n linearly spaced
elements. Note that we are using fixed, rather than adaptive, sampling grids to allow oper-
ations to be parallelized and reused across datapoints and layers.
2. Populate a matrix F containing a lookup table for the function Fφ in Equation 5. This
involves numerically approximating a Gaussian integral, in terms of the marginal variances
S and correlations c. We guarantee that the marginal variance is identical for each datapoint,
by preprocessing all datapoints to have identical norm at the input layer, so the number of
5
Published as a conference paper at ICLR 2018
entries in the lookup table need only be nvnc. These entries are computed as2:
(10)
3.	For every pair of datapoints x and x0 in layer l, compute Kl (x, x0) using Equation 5.
Approximate the function Fφ Kl-1 (x, x0); Kl-1 (x, x); Kl-1 (x0, x0) by bilinear inter-
polation into the matrix F from Step 2, where we interpolate into s using the value
of K l-1 (x, x), and interpolate into c using Kl-1 (x, x0)/Kl-1 (x, x) . Remember that
Kl-1(x, x) = Kl-1(x0, x0), due to data preprocessing to guarantee constant norm.
4.	Repeat the previous step recursively for all layers. Bilinear interpolation has constant cost,
so this has Cost O (乙(雇疝 + ntrainntest)).
This computational recipe allows us to compute the covariance matrix for the NNGP correspond-
ing to any well-behaved nonlinearity φ. All computational steps above can be implemented using
accelerated tensor operations, and computation of KL is typically faster than solving the system of
linear equations in Equation 8-9. Figure 6 illustrates the close agreement between the kernel func-
tion computed numerically (using this approach) and analytically, for the ReLU nonlinearity. It also
illustrates the angular dependence of the kernel and its evolution with increasing depth.
Finally, note that the full computational pipeline is deterministic and differentiable. The shape
and properties of a deep network kernel are purely determined by hyperparameters of the deep
neural network. Since GPs give exact marginal likelihood estimates, this kernel construction may
allow principled hyperparameter selection, or nonlinearity design, e.g. by gradient ascent on the log
likelihood w.r.t. the hyperparameters. Although this is not the focus of current work, we hope to
return to this topic in follow-up work.
An open source implementation of the algorithm is available at https://github.com/brain-
research/nngp.
3	Experimental Results
3.1	Description
We compare NNGPs with SGD3 trained neural networks on the permutation invariant MNIST and
CIFAR-10 datasets. The baseline neural network is a fully-connected network with identical width
at each hidden layer. Training is on the mean squared error (MSE) loss, chosen so as to allow
direct comparison to GP predictions. Formulating classification as regression often leads to good
results (Rifkin & Klautau, 2004). Future work may involve evaluating the NNGP on a cross entropy
loss using the approach in (Williams & Barber, 1998; Rasmussen & Williams, 2006). Training used
the Adam optimizer (Kingma & Ba (2014)) with learning rate and initial weight/bias variances op-
timized over validation error using the Google Vizier hyperparameter tuner (Golovin et al., 2017).
Dropout was not used. In future work, it would be interesting to incorporate dropout into the NNGP
covariance matrix using an approach like that in (Schoenholz et al., 2017). For the study, nonlineari-
ties were chosen to be either rectified linear units (ReLU) or hyperbolic tangent (Tanh). Class labels
were encoded as a one-hot, zero-mean, regression target (i.e., entries of -0.1 for the incorrect class
and 0.9 for the correct class). We constructed the covariance kernel numerically for ReLU and Tanh
nonlinearities following the method described in Section 2.5.
Performance: We find that the NNGP often outperforms trained finite width networks. See Table 1
and Figure 1.
2For numerical reasons, in practice an independent 1D lookup table is built for the case that cj = 1.
3For all presented results, the variant of SGD used is Adam. Although not shown, we found vanilla SGD
produced qualitatively similar results, with slightly higher MSE.
6
Published as a conference paper at ICLR 2018
Training dataset size
Training dataset size
Training dataset size
Training dataset size
(a) Accuracy
(b) Mean squared error
Figure 1: The NNGP often outperforms finite width networks, and neural network performance
more closely resembles NNGP performance with increasing width. Test accuracy and mean squared
error on MNIST and CIFAR-10 dataset are shown for the best performing NNGP and best perform-
ing SGD trained neural networks for given width. ‘NN-best’ denotes the best performing (on the
validation set) neural network across all widths and trials. Often this is the neural network with the
largest width.
We additionally find the performance of the best finite-width NNs, trained with a variant of SGD,
approaches that of the NNGP with increasing layer width. This is interesting from at least two, po-
tentially related, standpoints. (1) NNs are commonly believed to be powerful because of their ability
to do flexible representation learning, while our NNGP uses fixed basis functions; nonetheless, in
our experiments we find no salient performance advantage to the former. (2) It hints at a possible
relationship between SGD and Bayesian inference in certain regimes - were the neural networks
trained in a fully Bayesian fashion, rather than by SGD, the approach to NNGP in the large width
limit would be guaranteed. There is recent work suggesting that SGD can implement approximate
Bayesian inference (Mandt et al., 2017) under certain assumptions.
The similarity of the performance of the widest NN in Figure 1 with the NNGP suggests that the
limit of infinite network width, which is inherent to the GP, is far from being a disadvantage. Indeed,
in practice it is found that the best generalizing NNs are in fact the widest. To support this, in Fig-
ure 2 we show generalization gap results from an experiment in which we train 180 fully-connected
networks with five hidden layers on CIFAR-10 with a range of layer widths. For this experiment,
we trained the networks using a standard cross entropy loss rather than MSE, leading to a slight
difference in performance.
Uncertainty: One benefit in using a GP is that, due to its Bayesian nature, all predictions have
uncertainty estimates (Equation 9). For conventional neural networks, capturing the uncertainty in
a model’s predictions is challenging (Gal, 2016). In the NNGP, every test point has an explicit
estimate of prediction variance associated with it (Equation 9). In our experiments, we observe that
the NNGP uncertainty estimate is highly correlated with prediction error (Figure 3).
3.2	Relationship to Deep Signal Propagation
Several prior works (Poole et al. (2016); Schoenholz et al. (2017); Daniely et al. (2016); Duvenaud
et al. (2014)) have noted the recurrence relations Equation 5 commonly approach a functionally
uninteresting fixed point with depth l → ∞, in that K∞ (x, x0) becomes a constant or piecewise
constant map. We now briefly relate our ability to train NNGPs with the convergence of Kl (x, x0)
to the fixed-point kernel.
We will be particularly interested in contextualizing our results in relation to Poole et al. (2016);
Schoenholz et al. (2017) which analyzed the fixed points and the approach to them in detail for
bounded nonlinearities. To briefly recapitulate: there are regions of hyperparameter space (called
phases) where K∞ (x, x0) changes only quantitatively with σw2 and σb2 . However, there are low
7
Published as a conference paper at ICLR 2018
0.6
ReLU
Tanh
, ∙ .
0.8
0.45	1
• ∙ .
5	100	2	5	1000	2	5	10k	2
Width
0.5
5	100	2	5	1000	2	5	10k	2
Width
Figure 2: Generalization gap for five hidden layer fully-connected networks with variable widths,
using ReLU and Tanh nonlinearities on CIFAR-10. Random optimization and initialization hy-
perparameters were used and results were filtered for networks with 100% classification training
accuracy, resulting in a total of 125 Tanh and 55 ReLU networks. The best generalizing networks
are consistently the widest.
LU
ω
W
MN∣ST-50k
LU
ω
W
-0.05	0.00	0.05	0.10
0.15	0.20
Output variance
0.08
0.07
0.06
0.05
0.04
0.03
CIFAR-45k
0.00
0.05
0.10 0.15 0.20 0.25 0.30 0.35
Output variance
Figure 3: The Bayesian nature of NNGP allows it to assign a prediction uncertainty to each test
point. This prediction uncertainty is highly correlated with the empirical error on test points. The
x-axis shows the predicted MSE for test points, while the y-axis shows the realized MSE. To allow
comparison of mean squared error, each plotted point is an average over 100 test points, binned by
predicted MSE. The hyperparameters for the NNGP are depth= 3, σw2 = 2.0, and σb2 = 0.2. See
Appendix Figure 8 for dependence on training set size.
dwMUO-WZIIWJeM0
dwMUO-WZIIWJeM0
dimensional boundaries that separate different phases and between them the nature of K∞ (x, x0)
changes qualitatively.
For the Tanh nonlinearity, there are two distinct phases respectively called the “ordered” phase and
the “chaotic” phase that can be understood as a competition between the weights and the biases of the
network. A diagram showing these phases and the boundary between them is shown in Figure 4a.
In the ordered phase, the features obtained by propagating an input through the each layer of the
recursion become similar for dissimilar inputs. Fundamentally, this occurs because the different
inputs share common bias vectors and so all inputs end up just approaching the random bias. In this
case the covariance K l(χ, χ0) → q* for every pair of inputs x, x0, where q* is a constant that depends
only on σw2 and σb2 . All inputs have unit correlation asymptotically with depth. By contrast in the
chaotic phase the weight variance σw2 dominates and similar inputs become dissimilar with depth as
they are randomly projected by the weight matrices. In this case, the covariance Kl (x, x0) → q* for
x = x0 but q*c* for x 6= x0. Here c* < 1 is the fixed point correlation. In each of these regimes,
there is also a finite depth-scale ξ which describes the characteristic number of layers over which
the covariance function decays exponentially towards its fixed point form. Exactly at the boundary
between these two regimes is a line in (σw2 , σb2)-space where the decay Kl(x, x0) towards its fixed
8
Published as a conference paper at ICLR 2018
Table 1: The NNGP often outperforms finite width networks. Test accuracy on MNIST and CIFAR-
10 datasets. The reported NNGP results correspond to the best performing depth, σw2 , and σb2 values
on the validation set. The traditional NN results correspond to the best performing depth, width
and optimization hyperparameters. Best models for a given training set size are specified by (depth-
Width-σW-σ2) for NNs and (depth-σW-σ2) for GPs. More results are in Appendix Table 2.
Num training	Model (ReLU)	Test accuracy	Model (tanh)	Test accuracy
MNIST:1k	NN-2-5000-3.19-0.00 GP-20-1.45-0.28	0.9252 = 0.9279	NN-2-1000-0.60-0.00 GP-20-1.96-0.62	0.9254 0.9266
MNIST:10k	NN-2-2000-0.42-0.16 GP-7-0.61-0.07	0.9771 0.9765	-NN-2-2000-2.41-1.84 GP-2-1.62-0.28	0.9745 0.9773
MNIST:50k	NN-2-2000-0.60-0.44 GP-1-0.10-0.48	0.9864 0.9875	-NN-2-5000-0.28-0.34 GP-1-1.28-0.00	0.9857 0.9879
CIFAR:1k	NN-5-500-1.29-0.28 GP-7-1.28-0.00	0.3225 = 0.3608	NN-1-200-1.45-0.12 二 GP-50-2.97-0.97	0.3378 0.3702
CIFAR:10k	NN-5-2000-1.60-1.07 GP-5-2.97-0.28	0.4545 0.4780	-NN-1-500-1.48-1.59 GP-7-3.48-2.00	0.4429 0.4766
CIFAR:45k	NN-3-5000-O53-0.01 GP-3-3.31-1.86	G:53T3 0.5566	-NN-2-2000-1.05-2.08 GP-3-3.48-1.52	0.5034 0.5558
point is significantly slower and non-exponential. It was noted in Schoenholz et al. (2017) that this
approach to the fixed-point covariance fundamentally bounded Whether or not neural netWorks could
successfully be trained. It Was shoWn that initializing netWorks on this line alloWed for significantly
deeper neural netWorks to be trained.
For ReLU netWorks a similar picture emerges, hoWever there are some subtleties due to the un-
bounded nature of the nonlinearity. In this case for all σW and σ2, K∞(x, x0) = q* for all x, x0
and every point becomes asymptotically correlated. Despite this, there are again tWo phases: a
“bounded” phase in Which q* is finite (and nonzero) and an unbounded phase in Which q* is either
infinite or zero. As in the Tanh case there are depth scales that control the rate of convergence to
these fixed points and therefore limit the maximum trainable depth. The phase diagram for the ReLU
nonlinearity is also shoWn in Figure 4b.
In a striking analogy With the trainability of neural netWorks, We observe that the performance of the
NNGP appears to closely track the structure from the phase diagram, clearly illustrated in Figure 4.
Indeed, We see that as for hyperparameter settings that are far from criticality, the GP is unable to
train and We encounter poor test set performance. By contrast, near criticality We observe that our
models display high accuracy. Moreover, We find that the accuracy appears to drop more quickly
aWay from the phase boundary With increase in depth L of the GP kernel, KL . To understand this
effect We note that information about data Will be available to our model only through the difference
KL(x, x0) - K∞ (x, x0). HoWever, as the depth gets larger, this difference becomes increasingly
small and at some point can no longer be represented due to numerical precision. At this point our
test accuracy begins to quickly degrade to random chance.
4	Conclusion and Future Directions
By harnessing the limit of infinite Width, We have specified a correspondence betWeen priors on deep
neural netWorks and Gaussian processes Whose kernel function is constructed in a compositional, but
fully deterministic and differentiable, manner. Useofa GP prior on functions enables exact Bayesian
inference for regression from matrix computations, and hence We are able to obtain predictions and
uncertainty estimates from deep neural netWorks Without stochastic gradient-based training. The
performance is competitive With the best neural netWorks (Within specified class of fully-connected
models) trained on the same regression task under similar hyperparameter settings. While We Were
able to run experiments for someWhat large datasets (sizes of 50k), We intend to look into scalability
for larger learning tasks, possibly harnessing recent progress in scalable GPs (Quinonero-Candela
& Rasmussen (2005); Hensman et al. (2013)).
9
Published as a conference paper at ICLR 2018
MNlsT-5k∙d=50. Tanh
MNlsT-5k,d=50. ReLU
ordered
chaotic
bounded
exponential
unbounded
powerlaw
0.92
0.92
044
WeIgHt_Var
wegnt-var
(a) Tanh
(b) ReLU
2Λ)
ι现
1.72
139
145
131
1.17
I lXβ
0.9
0.7β
042
048
034
021
OXW
0.84
0.8β
αj
2X)
1.8t
1.72
l∙5t
1.45
1.3J
1.1?
11.03
0.9
0.7«
0.β2
0.4«
0.34
0.21
0.07


Figure 4:	The best performing NNGP hyperparameters agree with those predicted by deep signal
22
propagation. Test set accuracy heatmaps for NNGPs evaluated for a grid of σw and σb values. The
right plot in each subfigure (a), (b) is a theoretical phase diagram for that nonlinearity following the
methodology of Schoenholz et al. (2017). We observe that the performance of the NNGP is best
along the critical line (dotted lines). Additional depths are shown in the Appendix Figure 9.
In our experiments, we observed the performance of the optimized neural network appears to ap-
proach that of the GP computation with increasing width. Whether gradient-based stochastic opti-
mization implements an approximate Bayesian computation is an interesting question (Mandt et al.,
2017). Further investigation is needed to determine if SGD does approximately implement Bayesian
inference under the conditions typically employed in practice.
Additionally, the NNGP provides explicit estimates of uncertainty. This may be useful in predicting
model failure in critical applications of deep learning, or for active learning tasks where it can be
used to identify the best datapoints to hand label.
Acknowledgments
We thank Ryan Adams, Samy Bengio, and Matt Hoffman for useful discussions and feedback, and
Gamaleldin Elsayed and Daniel Levy for helpful comments on the manuscript.
References
Maruan Al-Shedivat, Andrew Gordon Wilson, Yunus Saatchi, Zhiting Hu, and Eric P Xing. Learning
scalable deep kernels with recurrent structure. Journal of Machine Learning Research, 18(82):
1-37, 2017.
Thang Bui, Daniel Hernandez-Lobato, Jose Hernandez-Lobato, Yingzhen Li, and Richard Turner.
Deep gaussian processes for regression using approximate expectation propagation. In Interna-
tional Conference on Machine Learning, pp. 1472-1481, 2016.
Youngmin Cho and Lawrence K Saul. Kernel methods for deep learning. In Advances in neural
information processing systems, pp. 342-350, 2009.
Andreas Damianou and Neil Lawrence. Deep gaussian processes. In Artificial Intelligence and
Statistics, pp. 207-215, 2013.
Amit Daniely, Roy Frostig, and Yoram Singer. Toward deeper understanding of neural networks:
The power of initialization and a dual view on expressivity. In Advances In Neural Information
Processing Systems, pp. 2253-2261, 2016.
Alexander G. de G. Matthews, Jiri Hron, Mark Rowland, Richard E. Turner, and Zoubin Ghahra-
mani. Gaussian process behaviour in wide deep neural networks. In International Confer-
ence on Learning Representations, 2018. URL https://openreview.net/forum?id=
H1-nGgWC-.
David Duvenaud, Oren Rippel, Ryan Adams, and Zoubin Ghahramani. Avoiding pathologies in
very deep networks. In Artificial Intelligence and Statistics, pp. 202-210, 2014.
Yarin Gal. Uncertainty in deep learning. PhD thesis, PhD thesis, University of Cambridge, 2016.
10
Published as a conference paper at ICLR 2018
Yarin Gal and Zoubin Ghahramani. Dropout as a bayesian approximation: Representing model
uncertainty in deep learning. In international conference on machine learning, pp. 1050-1059,
2016.
Daniel Golovin, Benjamin Solnik, Subhodeep Moitra, Greg Kochanski, John Karro, and D Scul-
ley. Google vizier: A service for black-box optimization. In Proceedings of the 23rd ACM
SIGKDD International Conference on Knowledge Discovery and Data Mining, pp. 1487-1495.
ACM, 2017.
Tamir Hazan and Tommi Jaakkola. Steps toward deep kernel methods from infinite neural networks.
arXiv preprint arXiv:1508.05133, 2015.
James Hensman and Neil D Lawrence. Nested variational compression in deep gaussian processes.
arXiv preprint arXiv:1412.1370, 2014.
James Hensman, Nicolo Fusi, and Neil D Lawrence. Gaussian processes for big data. arXiv preprint
arXiv:1309.6835, 2013.
Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980, 2014.
Karl Krauth, Edwin V Bonilla, Kurt Cutajar, and Maurizio Filippone. Autogp: Exploring the capa-
bilities and limitations of gaussian process models. arXiv preprint arXiv:1610.05392, 2016.
Neil D Lawrence and Andrew J Moore. Hierarchical gaussian process latent variable models. In
Proceedings ofthe 24th international conference on Machine learning, pp. 481-488. ACM, 2007.
Stephan Mandt, Matthew D Hoffman, and David M Blei. Stochastic gradient descent as approximate
bayesian inference. arXiv preprint arXiv:1704.04289, 2017.
Radford M. Neal. Priors for infinite networks (tech. rep. no. crg-tr-94-1). University of Toronto,
1994a.
Radford M. Neal. Bayesian Learning for Neural Networks. PhD thesis, University of Toronto, Dept.
of Computer Science, 1994b.
Ben Poole, Subhaneil Lahiri, Maithra Raghu, Jascha Sohl-Dickstein, and Surya Ganguli. Expo-
nential expressivity in deep neural networks through transient chaos. In Advances In Neural
Information Processing Systems, pp. 3360-3368, 2016.
Joaquin Quinonero-Candela and Carl Edward Rasmussen. A unifying view of sparse approximate
gaussian process regression. Journal of Machine Learning Research, 6(Dec):1939-1959, 2005.
Carl Edward Rasmussen and Christopher KI Williams. Gaussian processes for machine learning,
volume 1. MIT press Cambridge, 2006.
Ryan Rifkin and Aldebaro Klautau. In defense of one-vs-all classification. Journal of machine
learning research, 5(Jan):101-141, 2004.
Ryan Rifkin, Gene Yeo, Tomaso Poggio, et al. Regularized least-squares classification. Nato Science
Series Sub Series III Computer and Systems Sciences, 190:131-154, 2003.
Samuel S Schoenholz, Justin Gilmer, Surya Ganguli, and Jascha Sohl-Dickstein. Deep information
propagation. ICLR, 2017.
Christopher KI Williams. Computing with infinite networks. In Advances in neural information
processing systems, pp. 295-301, 1997.
Christopher KI Williams and David Barber. Bayesian classification with gaussian processes. IEEE
Transactions on Pattern Analysis and Machine Intelligence, 20(12):1342-1351, 1998.
Andrew G Wilson, Zhiting Hu, Ruslan R Salakhutdinov, and Eric P Xing. Stochastic variational
deep kernel learning. In Advances in Neural Information Processing Systems, pp. 2586-2594,
2016a.
Andrew Gordon Wilson, Zhiting Hu, Ruslan Salakhutdinov, and Eric P Xing. Deep kernel learning.
In Artificial Intelligence and Statistics, pp. 370-378, 2016b.
11
Published as a conference paper at ICLR 2018
A Draws from an NNGP prior
Figure 5 illustrates the nature of the GP prior for the ReLU nonlinearity by depicting samples of
1D functions z(X) drawn from a ReLU GP, GP(0, KL), with fixed depth L = 10 and (σw2 , σb2) =
(1.8, 0.01).
an10> us4uunu.
-1.5
-3	-2	-1	O	1
X value
2	3
Figure 5:	Samples from an NNGP prior for 1D functions. Different lines correspond to different
draws (arbitrary colors).
B Analytic Form for Kernel and Comparison
Figure 6: The angular structure of the kernel and its evolution with depth. Also illustrated is the
good agreement between the kernel computed using the methods of Section 2.5 (blue, starred) and
the analytic form of the kernel (red). The depth l in Kl runs from l = 0, ..., 9 (flattened curves for
increasing l), and (σw2 , σb2) = (1.6, 0.1).
In the main text, we noted that the recurrence relation Equation 5 can be computed analytically
for certain nonlinearities. In particular, this was computed in Cho & Saul (2009) for polynomial
rectified nonlinearities. For ReLU, the result including the weight and bias variance is
2	/-------------------- /
KI(X,xO) = σ2 + 2w Ki-l-1(χ,χ)Kl-1(χ0,χ0) Lin O)-1, + (π -θX-1O)COS
θl = COST ( L KI(X,xO)
XH	( PK l(x,x)K l(x0,x0)
(11)
To illustrate the angular form of Kl(X, XO) and its evolution with l, in Figure 6 we plot Kl(θ ) for the
ReLU nonlinearity, where θ is the angle between X and XO with norms such that ||X||2 = ||XO||2 =
12
Published as a conference paper at ICLR 2018
din. We observe a flattening of the angular structure with increase in depth l, as predicted from
the understanding in Section 3.2. Simultaneously, the figure also illustrates the good agreement
between the kernel computed using the numerical implementation of Section 2.5 (blue, starred) and
the analytic arccosine kernel, Equation 11 (red), for a particular choice of hyperparameters (σw2 , σb2).
C Bayesian marginalization over intermediate layers
In this section, we present an alternate derivation of the equivalence between infinitely wide deep
neural networks and Gaussian process by marginalization over intermediate layers. For this deriva-
tion, we take the weight and bias parameters to be drawn from independent Gaussians, with zero
mean and appropriately scaled variance.
We are interested in finding the distribution p(zL|x) over network outputs zL ∈ Rdout×B, condi-
tioned on network inputs x ∈ Rdin ×B, for input dimensionality din, output dimensionality dout, and
dataset size B. Intervening layers will have width Nl, zl ∈ RNl+1 ×B for L > l > 0. We define the
second moment matrix (here post-nonlinearity) for each layer l to be
l = I	din Tn Xnaxnb
ab = I N Pn φ(zna1)φ(zn-1)
l=0
l>0
(12)
Our approach is to think of intermediate random variables corresponding to these second moments
defined above. By definition, Kl only depends on zl-1 . In turn, the pre-activations zl are described
by a Gaussian process conditioned on the second moment matrix Kl ,
p(zl∣Kl) = N (Vec (Zl) ;0,G (Kl)③ I)
=：GP (zl；0,G (Kl)),	(13)
where
G (Kl) := σWKl + σ2l1T.	(14)
This correspondence of each layer to a GP, conditioned on the layer’s second moment matrix, is
exact eVen for finite width Nl because the parameters are drawn from a Gaussian. Altogether, this
justifies the graphical model depicted in Figure 7.
We will write p(zL|x) as an integral oVer all the interVening second moment matrices Kl,
P(ZLIx) = Z p (zL, K0, K1,…，K LIx) dK 0∙∙∙l.
This joint distribution can be decomposed as
p(ZL Ix) = Zp(zL∣KL) (YP(Kl∣Kl-1 ))p(K0∣x)dK。…L.
(15)
(16)
The directed decomposition in Equation 16 holds because KL is a function only of ZL-1 (see Equa-
tion 12), ZL-1 depends only on KL-1 (see Equation 13), KL-1 is a function only of ZL-2 , etc
(Figure 7).
Figure 7: Graphical model for neural network’s computation.
The sum in Equation 12 for l > 0 is a sum oVer i.i.d. terms. As Nl grows large, the Central
Limit Theorem applies, andP (Kl∣Kl-1) converges to a Gaussian with variance that shrinks as 志.
Further, in the infinite width limit it will go to a delta function,
lim p (Kl∣Kl-1) = δ (Kl - (F ◦ G)(Kl-1)) ,	(17)
13
Published as a conference paper at ICLR 2018
with F (∙) defined as in Equation 5. Similarly, the dependence of K0 on X can be expressed as a
delta function,
p (Ko∣x) = δ (K0 — JXTX
(18)
Substituting p(zL|KL), p Kl|Kl-1 andp K0|X into Equation 16, we get
N TJimN T OOp(ZLIX) = Z GP (zL；0,G (K L)) (YY δ (K I-(F ◦ G)(K l-1))
=GP(zL；0，(G O(F ◦ G)L) (dinXTX))
=GP (zL; O, (g◦ (F ◦ G)L)(K0)).
--^-XT x) dK0…L
din
(19)
So, in the limit of infinite width, zL |x is described by a Gaussian process with kernel
(G ◦ (F ◦ G)L)(K 0).
D Details of the Experiments
We outline details of the experiments for Section 3. For MNIST we use a 50k/10k/10k split of the
training/validation/test dataset. For CIFAR-10, we used a 45k/5k/10k split. The validation set was
used for choosing the best hyperparameters and evaluation on the test set is reported.
For training neural networks hyperparameters were optimized via random search on average 250
trials for each choice of (ntrain, depth, width, nonlinearity).
Random search range: Learning rate was sampled within (10-4, 0.2) in log-scale, weight decay
constant was sampled from (10-8,1.0) in log-scale, σw ∈ [0.01, 2.5], σb ∈ [0, 1.5] was uniformly
sampled and mini-batch size was chosen equally among [16, 32, 64, 128, 256].
For the GP with given depth and nonlinearity, a grid of 30 points evenly spaced from 0.1 to 5.0 (for
σw2 ) and 30 points evenly spaced from 0 to 2.0 (for σb2) was evaluated to generate the heatmap. The
best GP run was chosen among the 900 evaluations in the σw2 -σb2 grid.
Computation time: We report computation times for NNGP experiments. The grid generation with
took 440-460s with 6 CPUs for ng = 501, nv = 501, nc = 500, which was amortized over all the
experiments. For full (50k) MNIST, constructing KDD for each layer took 90-140s (depending on
CPU generation) running on 64 CPUs. Solving linear equations via Cholesky decomposition took
180-220s for 1000 test points.
Details of NNGP implementaion: For all the experiments we used pre-computed lookup tables
F with ng = 501, nv = 501, nc = 500, and smax = 100. Default value for the target noise
σ2 was set to 10-10 and was increased by factor of 10 when Cholesky decomposition failed while
solving Equation 8 and 9. We refer to Rasmussen & Williams (2006) for standard numerically stable
implementation of GP regression.
E	Further results
Here we include more results from experiments described in Section 3.
Uncertainty: Relationship between the target MSE and the GP’s uncertainty estimate for smaller
training set size is shown in Figure 8.
Performance: Performance of grid points of σw2 -σb2 for varying depth is shown in Figure 9. The
best performing NNGP’s hyperparameters are distributed near the critical line (Figure 10) where the
phase changes as described in Section 3.2.
14
Published as a conference paper at ICLR 2018
0.07
MNIST-Ik
0.06
0.05
0.04
<Λ 0.03
0.02
0.01
0.00
-0.01
Outputvariance
T⅛nh<crrΛ.9792
ReLU∙βoEo.9806
0.4
0.5
0.12
0.11
0.10
0.09
0.08
0.07
0.06
0.05
-0.1
0.0
CIFAR-Ik
0.2
0.3
Output variance
0.06
MNlST-5k
0.11
CIFAR-5lc
0.05
0.10
0.04
0.09
0.03
E 0.02
ω 0.08
0.01
0.07
0.00
0.06
Tanh-corπO.8851
ReLU-corr:0.8430
0.4
0.5
0.6
-0.01
-0.05
TanhγorrQ.9583
ReLU-«orr:0.9701
0.00	0.05	0.10	0.15	0.20	0.25	0.30	0.35
Outputvariance
0.05
0.0
0.2
0.3
Output variance
Tanh-corn0-8176
ReLUYom0.84U
0.4
0.5

Figure 8:	The prediction uncertainty for smaller number of training points. The details are the same
as Figure 3.
2.gl.w1.721.591.451.311.171.030.90.7c0.620.4«0.340.210.07
MNlST-5K d=l.Tanh
U.S2
we⅛htvar
2.031.721.591.451.311.171.030.90.763 30.340.210.07
MNlSr-5k, d=l. ReLU
I 0.96
0.92
048
044
0«0
VVW V v*⅜∙ "⅛∙ "⅛∙ V >∙ v∙
weight Var
MNlST-5 k,
d=20, Tanh
MN∣sτ-5k. d=20. ReLU
weight Var
we⅛ntvar
0.96
0.92
048
0⅞4
0«0
0.96
0.92
048
0Λ4
0«0
v ⅛∙ ⅛∙ V V V W k "⅛∙ *⅛∙ ⅞∙ v∙ ‰∙ V
weight Var
MNlST-5K d=100,Ta∏h
we⅛htvar
MNIST-5k, d=100, ReLU
weight Var
0.96
0.92
048
0⅞4
040
0.96
0.92
048
044




口 .HH
口 .HH





Figure 9:	Test set accuracy heatmaps for NNGPs evaluated for a grid of σw2 and σb2 values for varying
depth. Rows correspond to Tanh and ReLU nonlinearities, and columns correspond to varying depth.
15
Published as a conference paper at ICLR 2018
se_q
MNISTfTanh
MNlST, ReLU
CIFAR7Tanh
Se-q
n trai∏=100
∏ traiπ=200
n traiπ=5OO
n train=lOOO
n traiπ=2000
n_train=5000
n-train=lOOOO
πtraiπ=20000
πtraiπ=5OOOO
2	3
weight var
Figure 10:	Best performing NNGPs are distributed near the critical line. Weight and bias variance
distribution for the 25 best performing runs for NNGP with the given training set size is shown.
16
Published as a conference paper at ICLR 2018
Table 2: Completion of Table 1. The reported NNGP results correspond to the best performing
depth, σw2 , and σb2 values on the validation set. The traditional NN results correspond to the best
performing depth, width and optimization hyperparameters. Best models for a given training set size
are specified by (depth-width-σW-σ2) for NNs and (depth-σ(-σIb)) for GPs.
Num training	Model(ReLU)	Test accuracy	Model (tanh)	Test accuracy
MNIST:100	NN-2-5000-O10-0.11 GP-100-1.79-0.83	0.7786 = 0.7735	NN-1-500-1.48-0.61 GP-100-3.14-0.97	0.7766 0.7736
MNIST:200	NN-2-2000-0.52-0.00 GP-100-1.79-0.83	0.8298- 0.8282	-NN-2-1000-1.80-1.99 GP-100-3.99-2.00	0.8223 0.8277
MNIST:500	NN-2-5000-1.82-O77 GP-100-1.79-0.83	0.9028- 0.8995	-NN-1-5000-3.74-2.18 GP-50-3.48-1.86	0.9001 0.9008
MNIST:1k	NN-2-5000-3.19-0.00 GP-20-1.45-0.28	0.9252 0.9279	-NN-2-1000-0.60-0.00 GP-20-1.96-0.62	0.9254 0.9266
MNIST:2k	NN-2-5000-2.88-0.01 GP-10-1.11-0.55	0.9468 0.9485	-NN-1-2000-0.98-1.30 GP-10-1.79-1.45	0.9462 0.9477
MNIST:5k	NN-3-500-2.92-0.22 GP-7-0.61-0.07	0.9675 0.9692	-NN-2-1000-4.12-2.18 GP-3-1.11-0.00	0.9655 0.9693
MNIST:10k	NN-2-2000-0.42-0.16 GP-7-0.61-0.07	0.9771 0.9765	-NN-2-2000-2.41-1.84 GP-2-1.62-0.28	0.9745 0.9773
MNIST:20k	NN-3-1000-2.45-0.98 GP-5-1.62-0.83	0.9825 0.9830	-NN-2-2000-0.21-0.10 GP-1-2.63-0.00	0.9814 0.9836
MNIST:50k	NN-2-2000-0.60-0.44 GP-1-0.10-0.48	0.9864 0.9875	-NN-2-5000-0.28-0.34 GP-1-1.28-0.00	0.9857 0.9879
CIFAR:100	NN-5-500-1.88-1.00 GP-3-4.49-0.97	0.2586 = 0.2673	NN-2-200-3.22-2.09 二 GP-10-3.65-1.17	0.2470 0.2718
CIFAR:200	NN-3-200-0.17-0.00 GP-3-3.99-1.72	0.27T9 0.3022	-NN-3-200-1.41-0.21^^ GP-7-3.65-0.55	0.2686 0.2927
CIFAR:500	NN-1-100-1.26-0.63 GP-20-1.79-0.21	0.3132 0.3395	-NN-1-2000-0.11-0.90 GP-7-3.65-0.62	0.2939 0.3291
CIFAR:1k	NN-5-500-1.29-0.28 GP-7-1.28-0.00	0.3225 0.3608	-NN-1-200-1.45-0.12 GP-50-2.97-0.97	0.3378 0.3702
CIFAR:2k	NN-3-5000-5.59-0.57 GP-3-4.16-1.17	0.3894 0.3953	-NN-5-1000-0.86-1.28 GP-5-4.66-1.03	0.3597 0.3959
CIFAR:5k	NN-5-2000-5.26-1.74 GP-3-4.66-1.03	0.4241 0.4454	-NN-1-5000-0.07-0.22 GP-10-3.65-1.38	0.3993 0.4430
CIFAR:10k	NN-5-2000-1.60-1.07 GP-5-2.97-0.28	0.4545 0.4780	-NN-1-500-1.48-1.59 GP-7-3.48-2.00	0.4429 0.4766
CIFAR:20k	NN-3-5000-4.18-0.18 GP-3-5.00-0.83	0.5041 0.5118	-NN-2-5000-0.02-1.12 GP-7-3.14-1.93	0.4565 0.5124
CIFAR:45k	NN-3-5000-O53-0.01 GP-3-3.31-1.86	0.5313 0.5566	-NN-2-2000-1.05-2.08 GP-3-3.48-1.52	0.5034 0.5558
17