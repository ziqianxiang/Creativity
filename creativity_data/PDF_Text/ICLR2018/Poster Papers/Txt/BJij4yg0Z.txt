Published as a conference paper at ICLR 2018
A Bayesian Perspective on Generalization and
Stochastic Gradient Descent
Samuel L. Smith* & Quoc V Le
Google Brain
{slsmith, qvl}@google.com
Ab stract
We consider two questions at the heart of machine learning; how can we predict
if a minimum will generalize to the test set, and why does stochastic gradient
descent find minima that generalize well? Our work responds to Zhang et al.
(2016), who showed deep neural networks can easily memorize randomly labeled
training data, despite generalizing well on real labels of the same inputs. We show
that the same phenomenon occurs in small linear models. These observations are
explained by the Bayesian evidence, which penalizes sharp minima but is invariant
to model parameterization. We also demonstrate that, when one holds the learning
rate fixed, there is an optimum batch size which maximizes the test set accuracy.
We propose that the noise introduced by small mini-batches drives the parameters
towards minima whose evidence is large. Interpreting stochastic gradient descent
as a stochastic differential equation, We identify the “noise scale” g = e( N -1) ≈
N/B, where is the learning rate, N the training set size and B the batch size.
Consequently the optimum batch size is proportional to both the learning rate and
the size of the training set, Bopt α EN. We verify these predictions empirically.
1	Introduction
This paper shoWs Bayesian principles can explain many recent observations in the deep learning
literature, While also discovering practical neW insights. Zhang et al. (2016) trained deep convolu-
tional netWorks on ImageNet and CIFAR10, achieving excellent accuracy on both training and test
sets. They then took the same input images, but randomized the labels, and found that While their
netWorks Were noW unable to generalize to the test set, they still memorized the training labels. They
claimed these results contradict learning theory, although this claim is disputed (KaWaguchi et al.,
2017; Dziugaite & Roy, 2017). Nonetheless, their results beg the question; if our models can assign
arbitrary labels to the training set, Why do they Work so Well in practice? MeanWhile Keskar et al.
(2016) observed that if We hold the learning rate fixed and increase the batch size, the test accuracy
usually falls. This striking result shoWs improving our estimate of the full-batch gradient can harm
performance. Goyal et al. (2017) observed a linear scaling rule betWeen batch size and learning rate
in a deep ResNet, While Hoffer et al. (2017) proposed a square root rule on theoretical grounds.
Many authors have suggested “broad minima” Whose curvature is small may generalize better than
“sharp minima” Whose curvature is large (Chaudhari et al., 2016; Hochreiter & Schmidhuber, 1997).
Indeed, Dziugaite & Roy (2017) argued the results of Zhang et al. (2016) can be understood using
“nonvacuous” PAC-Bayes generalization bounds Which penalize sharp minima, While Keskar et al.
(2016) shoWed stochastic gradient descent (SGD) finds Wider minima as the batch size is reduced.
HoWever Dinh et al. (2017) challenged this interpretation, by arguing that the curvature of a mini-
mum can be arbitrarily increased by changing the model parameterization. In this Work We shoW:
•	The results of Zhang et al. (2016) are not unique to deep learning; We observe the same
phenomenon in a small “over-parameterized” linear model. We demonstrate that this phe-
nomenon is straightforWardly understood by evaluating the Bayesian evidence in favor of
each model, Which penalizes sharp minima but is invariant to the model parameterization.
*Work done as a member of the Google Brain Residency Program (g.co/brainreSidency)
1
Published as a conference paper at ICLR 2018
•	SGD integrates a stochastic differential equation whose “noise scale” g ≈ N/B, where
is the learning rate, N training set size and B batch size. Noise drives SGD away from
sharp minima, and therefore there is an optimal batch size which maximizes the test set
accuracy. This optimal batch size is proportional to the learning rate and training set size1.
We describe Bayesian model comparison in section 2. In section 3 we replicate the observations of
Zhang et al. (2016) in a linear model, and show they are explained by the Bayesian evidence. In
section 4 we show there is an optimum batch size which maximizes the test set accuracy, and in
section 5 we derive scaling rules between the optimum batch size, learning rate, training set size and
momentum coefficient. Throughout this work, “generalization gap” refers to the gap in test accuracy
between small and large batch SGD training, not the gap in accuracy between training and test sets.
2	Bayesian model comparis on
Bayesian model comparison was first applied to neural networks in MacKay (1992). We provide a
brief tutorial here, since the theory is central to the remainder of the paper. For simplicity we first
consider a classification model M with a single parameter ω, training inputs x and training labels y .
We can infer a posterior probability distribution over the parameter by applying Bayes theorem,
P(ω∣y,x; M)
P(y∣ω,x; M)P(ω; M)
P(y|x; M)
(1)
The likelihood, P(y∣ω,x; M) = Qi P(y∕ω,Xi; M) = e-H(ω;M), where H(ω; M) =
-Piln(P(yi∣ω,xi;M)) denotes the cross-entropy of unique categorical labels. We typically
use a Gaussian prior, P(ω; M) = ,λ∕2πe-λω /2, and therefore the posterior probability den-
sity of the parameter given the training data, P(ω∣y, x; M) 8 ,λ∕2πe-C(ω;M), where C(ω; M)=
H(ω; M) + λω2∕2 denotes the L2 regularized cross entropy, or “cost function”, and λ is the regu-
larization coefficient. The value ω0 which minimizes the cost function lies at the maximum of this
posterior. To predict an unknown label yt of a new input xt , we should compute the integral,
P(yt |xt, y, x; M)
/ dω P(yt∣ω,xt; M)P(ω∣y,x; M)
(2)
R dω P(yt∖ω,xt' M)e-°Q;M)
R dωe-°Q;M)
(3)
However these integrals are dominated by the region near ω0, and since P(yt∣ω, Xt; M) is smooth
We usually approximate P(yt∣xt, x, y; M) ≈ P(yt∣ω0, xt； M). Having minimized C(ω; M) to find
ω0, we now wish to compare two different models and select the best one. The probability ratio,
P(Mι∣y,x) _ P(y|x; Mi) P(Mi)
P(M2∣y,x) = P(y|x; M2) P(M2)
(4)
The second factor on the right is the prior ratio, which describes which model is most plausible. To
avoid unnecessary subjectivity, we usually set this to 1. Meanwhile the first factor on the right is the
evidence ratio, which controls how much the training data changes our prior beliefs. Germain et al.
(2016) showed that maximizing the evidence (or “marginal likelihood”) minimizes a PAC-Bayes
generalization bound. To compute it, we evaluate the normalizing constant of equation 1,
P(y|x;M)
/ dω P(y∣ω, x; M)P(ω; M)
(5)
=H/d"…).	⑹
Notice that the evidence is computed by integrating out the parameters; and consequently it is invari-
ant to the model parameterization. Since this integral is dominated by the region near the minimum
ωo, We can estimate the evidence by Taylor expanding C(ω; M) ≈ C(ω0) + C00(ωo)(ω - ω0)2∕2,
P(y|x; M)	≈	e-c(ω0)	Z dω e-σ00(ω0)(ω-ω0)2/2
(7)
+ 2ln(C "(so)")
(8)
1Equivalently, there is an optimal learning rate proportional to the batch size and the training set size.
2
Published as a conference paper at ICLR 2018
Within this “Laplace” approximation, the evidence is controlled by the value of the cost function at
the minimum, and by the logarithm of the ratio of the curvature about this minimum compared to
the regularization constant. Thus far we have considered models of a single parameter; in realistic
models with many parameters P (y|x; M) ≈ λPe-c(ωo)∕∣wC(ω)∣ω∕2, where |WC(ω)∣ω0 is the
determinant of the Hessian, and p denotes the number of model parameters (Kass & Raftery, 1995).
The determinant of the Hessian is simply the product of its eigenvalues, (Qip=1 λi), and thus,
P (y|x; M) ≈ exp
- C(ω0) +
2 X lwλ"λj}.
(9)
The contribution (λP/∣WC(ω)∣ω/2) is often called the “Occam factor”, because it enforces Oc-
cam’s razor; when two models describe the data equally well, the simpler model is usually better
(Gull, 1988). Minima with low curvature are simple, because the parameters do not have to be fine-
tuned to fit the data. Intuitively, the Occam factor describes the fraction of the prior parameter space
consistent with the data. Since this fraction is always less than one, we propose to approximate
equation 9 away from local minima by only performing the summation over eigenvalues λi ≥ λ.
The evidence can be reframed in the language of information theory, whereby Occam’s factor penal-
izes the amount of information the model must learn about the parameters to accurately model the
training data (Hinton & Van Camp, 1993; Achille & Soatto, 2017; Shwartz-Ziv & Tishby, 2017).
In this work, we will compare the evidence against a null model which assumes the labels are entirely
random, assigning equal probability to each class. This unusual model has no parameters, and so the
evidence is controlled by the likelihood alone, P (y|x; NULL) = (1/n)N = e-N ln (n), where n
denotes the number of model classes and N the number of training labels. Thus the evidence ratio,
P(y|x； M)	= e-E(ωo)
P(y|x; NULL)=
(10)
Where E(ω0) = C(ω0) + (1/2) Ei ln(λi∕λ) - N ln(n) is the log evidence ratio in favor of the null
model. Clearly, we should only assign any confidence to the predictions of our model if E(ω0) < 0.
The evidence supports the intuition that broad minima generalize better than sharp minima, but
unlike the curvature it does not depend on the model parameterization. Dinh et al. (2017) showed
one can increase the Hessian eigenvalues by rescaling the parameters, but they must simultaneously
rescale the regularization coefficients, otherwise the model changes. Since Occam’s factor arises
from the log ratio, ln (λi∕λ), these two effects cancel out2. It is difficult to evaluate the evidence for
deep networks, as we cannot compute the Hessian of millions of parameters. Additionally, neural
networks exhibit many equivalent minima, since we can permute the hidden units without changing
the model. To compute the evidence we must carefully account for this “degeneracy”. We argue
these issues are not a major limitation, since the intuition we build studying the evidence in simple
cases will be sufficient to explain the results of both Zhang et al. (2016) and Keskar et al. (2016).
3	Bayes theorem and generalization
Zhang et al. (2016) showed that deep neural networks generalize well on training inputs with in-
formative labels, and yet the same model can drastically overfit on the same input images when the
labels are randomized; perfectly memorizing the training set. To demonstrate that these observations
are not unique to deep networks, let’s consider a far simpler model; logistic regression. We form a
small balanced training set comprising 800 images from MNIST, of which half have true label “0”
and half true label “1”. Our test set is also balanced, comprising 5000 MNIST images of zeros and
5000 MNIST images of ones. There are two tasks. In the first task, the labels of both the training and
test sets are randomized. In the second task, the labels are informative, matching the true MNIST
labels. Since the images contain 784 pixels, our model has just 784 weights and 1 bias.
We show the accuracy of the model predictions on both the training and test sets in figure 1. When
trained on the informative labels, the model generalizes well to the test set, so long as it is weakly
regularized. However the model also perfectly memorizes the random labels, replicating the obser-
vations of Zhang et al. (2016) in deep networks. No significant improvement in model performance
2Note however that while the evidence itself is invariant to model parameterization, one can find reparame-
terizations which change the approximate evidence after the Laplace approximation.
3
Published as a conference paper at ICLR 2018
Training accuracy
-*∙ Test accuracy
■ Mean margin
。。02
>WE3uura ueəw
u⅞πE Ueωw
0 5 0 5
ZllE
(a)	(b)
Figure 1: Prediction accuracy and mean training set margin as a function of regularization coeffi-
cient, for a logistic regression trained on random (a) and informative (b) labels of the same inputs.
The weakly regularized model generalizes well on informative labels but memorizes random labels.
is observed as the regularization coefficient increases. For completeness, we also evaluate the mean
margin between training examples and the decision boundary. For both random and informative
labels, the margin drops significantly as we reduce the regularization coefficient. When weakly
regularized, the mean margin is roughly 50% larger for informative labels than for random labels.
Now consider figure 2, where we plot the mean cross-entropy of the model predictions, evaluated on
both training and test sets, as well as the Bayesian log evidence ratio defined in the previous section.
Looking first at the random label experiment in figure 2a, while the cross-entropy on the training
set vanishes when the model is weakly regularized, the cross-entropy on the test set explodes. Not
only does the model make random predictions, but it is extremely confident in those predictions. As
the regularization coefficient is increased the test set cross-entropy falls, settling at ln 2, the cross-
entropy of assigning equal probability to both classes. Now consider the Bayesian evidence, which
we evaluate on the training set. The log evidence ratio is large and positive when the model is
weakly regularized, indicating that the model is exponentially less plausible than assigning equal
probabilities to each class. As the regularization parameter is increased, the log evidence ratio falls,
but it is always positive, indicating that the model can never be expected to generalize well.
Now consider figure 2b (informative labels). Once again, the training cross-entropy falls to zero
when the model is weakly regularized, while the test cross-entropy is high. Even though the model
makes accurate predictions, those predictions are overconfident. As the regularization coefficient
increases, the test cross-entropy falls below ln 2, indicating that the model is successfully gener-
alizing to the test set. Now consider the Bayesian evidence. The log evidence ratio is large and
positive when the model is weakly regularized, but as the regularization coefficient increases, the
(a)
(b)
Figure 2: The cross-entropy and log evidence ratio, evaluated on random (a) or informative (b)
labels. The evidence, evaluated on the training set, is strongly correlated with the test cross-entropy.
4
Published as a conference paper at ICLR 2018
log evidence ratio drops below zero, indicating that the model is exponentially more plausible than
assigning equal probabilities to each class. As we further increase the regularization, the log evi-
dence ratio rises to zero while the test cross-entropy rises to ln 2. Test cross-entropy and Bayesian
evidence are strongly correlated, with minima at the same regularization strength.
Bayesian model comparison has explained our results in a logistic regression. Meanwhile, Krueger
et al. (2017) showed the largest Hessian eigenvalue also increased when training on random labels
in deep networks, implying the evidence is falling. We conclude that Bayesian model comparison
is quantitatively consistent with the results of Zhang et al. (2016) in linear models where we can
compute the evidence, and qualitatively consistent with their results in deep networks where we
cannot. Dziugaite & Roy (2017) recently demonstrated the results of Zhang et al. (2016) can also
be understood by minimising a PAC-Bayes generalization bound which penalizes sharp minima.
4	Bayes theorem and stochastic gradient descent
We showed above that generalization is strongly correlated with the Bayesian evidence, a weighted
combination of the depth of a minimum (the cost function) and its breadth (the Occam factor).
Consequently Bayesians often add isotropic Gaussian noise to the gradient (Welling & Teh, 2011).
In appendix A, we show this drives the parameters towards broad minima whose evidence is large.
The noise introduced by small batch training is not isotropic, and its covariance matrix is a function
of the parameter values, but empirically Keskar et al. (2016) found it has similar effects, driving the
SGD away from sharp minima. This paper therefore proposes Bayesian principles also account for
the “generalization gap”, whereby the test set accuracy often falls as the SGD batch size is increased
(holding all other hyper-parameters constant). Since the gradient drives the SGD towards deep
minima, while noise drives the SGD towards broad minima, we expect the test set performance to
show a peak at an optimal batch size, which balances these competing contributions to the evidence.
We were unable to observe a generalization gap in linear models (since linear models are convex
there are no sharp minima to avoid). Instead we consider a shallow neural network with 800 hidden
units and RELU hidden activations, trained on MNIST without regularization. We use SGD with a
momentum parameter of 0.9. Unless otherwise stated, we use a constant learning rate of 1.0 which
does not depend on the batch size or decay during training. Furthermore, we train on just 1000
images, selected at random from the MNIST training set. This enables us to compare small batch
to full batch training. We emphasize that we are not trying to achieve optimal performance, but to
study a simple model which shows a generalization gap between small and large batch training.
In figure 3, we exhibit the evolution of the test accuracy and test cross-entropy during training. Our
small batches are composed of 30 images, randomly sampled from the training set. Looking first
at figure 3a, small batch training takes longer to converge, but after a thousand gradient updates
a clear generalization gap in model accuracy emerges between small and large training batches.
Now consider figure 3b. While the test cross-entropy for small batch training is lower at the end
Figure 3: The evolution during training of the test accuracy (a), and the test set cross-entropy (b).
Full batches are composed of 1000 images, while small batches comprise 30 images.
5
Published as a conference paper at ICLR 2018
0.0
10'	IO2	IO3	IO4
Gradient descent updates
(a)
Batch size
(b)
Figure 4: The test accuracy for a range of batch sizes, during training (a) and after 10000 steps (b).
(a)
Figure 5: a) The test set accuracy as a function of batch size, for a range of learning rates . The
performance peak shifts to the right as we increase , but the overall performance falls once & 3.
b) The best observed batch size is proportional to the learning rate across two orders of magnitude.
of training; the cross-entropy of both small and large training batches is increasing, indicative of
over-fitting. Both models exhibit a minimum test cross-entropy, although after different numbers of
gradient updates. Intriguingly, we show in appendix B that the generalization gap between small
and large batch training shrinks significantly when we introduce L2 regularization.
From now on we focus on the test set accuracy (since this converges as the number of gradient
updates increases). In figure 4a, we exhibit training curves for a range of batch sizes between 1 and
1000. We find that the model cannot train when the batch size B / 10. In figure 4b we plot the mean
test set accuracy after 10000 training steps. A clear peak emerges, indicating that there is indeed
an optimum batch size which maximizes the test accuracy, consistent with Bayesian intuition. The
results of Keskar et al. (2016) focused on the decay in test accuracy above this optimum batch size.
5	Stochastic differential equations and the scaling rules
We showed above that the test accuracy peaks at an optimal batch size, if one holds the other SGD
hyper-parameters constant. We argued that this peak arises from the tradeoff between depth and
breadth in the Bayesian evidence. However it is not the batch size itself which controls this tradeoff,
but the underlying scale of random fluctuations in the SGD dynamics. We now identify this SGD
“noise scale”, and use it to derive three scaling rules which predict how the optimal batch size
depends on the learning rate, training set size and momentum coefficient. A gradient update,
∆ω
de	dC	dc∖∖
dω	dω	dω
(11)
N
6
Published as a conference paper at ICLR 2018
Figure 6: a) The test accuracy as a function of batch size, for a range of training set sizes. To reduce
noise, we average each curve over five experiments. The performance peak shift to the right as we
increase the size of the training set. Unsurprisingly, the overall model performance also improves.
b) The best observed batch size is proportional to the size of the training set once N & 20000.
where e is the learning rate, N the training set size,需=Pi=ι 薨 the true gradient, and ddC =
N PB=ι ddω the estimated gradient evaluated on a mini-batch. The expected gradient of a single
eχample,〈dC〉= Ndω, while D dCdCjE = (NdC)2 + F(ω)δij. F(ω) isamatrix describing the
gradient covariances, which are a function of the current parameter values. We adopt the central limit
^
theorem and model the gradient error α=(dω - dω) with Gaussian random noise (We discuss this
approximation briefly in appendix C). It is easy to show that <a) = 0, while(a2)= N(N 一 1)F(ω).
Typically N》B, such that (a2) ≈ N2F(ω)∕B. To continue, We interpret equation 11 as the
discrete update ofa stochastic differential equation (Li et al., 2017; Gardiner, 1985),
dω
dt
dC
一石 + η(t),
(12)
Where t is a continuous variable, η(t) representsnoise, (η(t)) = 0 and hη(t)η(t0)) = gF (ω)δ(t-t0).
The constant g controls the scale of random fluctuations in the dynamics. To relate this differential
equation to the SGD, We compute a gradient update ∆ω = R^/N ddt = 一NdC + R0/N η(t)dt.
Finally, to measure g, we equate the variance in this gradient update to the variance in equation 11,
e2(N - 1)F(ω)∕N
B
h(Z dt η(t))2i = Z dtZ	dt0 hη(t)η(t0)i = egF(ω)∕N.	(13)
0	00
Rearranging, the SGD noise scale g = e(N 一 1) ≈ eN∕B. The noise scale falls when the batch
size increases, consistent with our earlier observation of an optimal batch size Bopt while holding
the other hyper-parameters fixed. Notice that one would equivalently observe an optimal learning
rate if one held the batch size constant. A similar analysis of the SGD was recently performed by
Mandt et al. (2017), although their treatment only holds near local minima where the covariances
F(ω) are stationary. Our analysis holds throughout training, which is necessary since Keskar et al.
(2016) found that the beneficial influence of noise was most pronounced at the start of training.
When we vary the learning rate or the training set size, we should keep the noise scale fixed, which
implies that Bopt α eN. In figure 5a, We plot the test accuracy as a function of batch size after
(10000∕e) training steps, for a range of learning rates. Exactly as predicted, the peak moves to the
right as e increases. Additionally, the peak test accuracy achieved at a given learning rate does not
begin to fall until e 〜3, indicating that there is no significant discretization error in integrating the
stochastic differential equation below this point. Above this point, the discretization error begins to
dominate and the peak test accuracy falls rapidly. In figure 5b, we plot the best observed batch size
as a function of learning rate, observing a clear linear trend, Bopt a e. The error bars indicate the
distance from the best observed batch size to the next batch size sampled in our experiments.
7
Published as a conference paper at ICLR 2018
Figure 7: a) The test set accuracy as a function of batch size for a range of momentum coefficients.
As expected, the peak moves to the right as the momentum coefficient increases. b) The best ob-
served batch size for a range of momentum coefficients. The green curve exhibits the scaling rule.
(a)
(b)
This scaling rule allows us to increase the learning rate with no loss in test accuracy and no increase
in computational cost, simply by simultaneously increasing the batch size. We can then exploit
increased parallelism across multiple GPUs, reducing model training times (Goyal et al., 2017). A
similar scaling rule was independently proposed by Jastrzebski et al. (2017) and Chaudhari & Soatto
(2017), although neither work identifies the existence ofan optimal noise scale. A number of authors
have proposed adjusting the batch size adaptively during training (Friedlander & Schmidt, 2012;
Byrd et al., 2012; De et al., 2017), while Balles et al. (2016) proposed linearly coupling the learning
rate and batch size within this framework. In Smith et al. (2017), we show empirically that decaying
the learning rate during training and increasing the batch size during training are equivalent.
In figure 6awe exhibit the test set accuracy as a function of batch size, for a range of training set sizes
after 10000 steps ( = 1 everywhere). Once again, the peak shifts right as the training set size rises,
although the generalization gap becomes less pronounced as the training set size increases. In figure
6b, we plot the best observed batch size as a function of training set size; observing another linear
trend, Bopt α N. This scaling rule could be applied to production models, progressively growing
the batch size as new training data is collected. We expect production datasets to grow considerably
over time, and consequently large batch training is likely to become increasingly common.
Finally, in appendix D we extend our analysis to SGD with momentum, identifying the noise scale,
g ≈ b(；-m), where m denotes the momentum coefficient. Notice that this reduces to the noise
scale of conventional SGD as m → 0. When m > 0, we obtain an additional scaling rule Bopt 8
1/(1 - m). This scaling rule predicts that the optimal batch size will increase when the momentum
coefficient is increased. In figure 7a we plot the test set performance as a function of batch size after
10000 gradient updates ( = 1 everywhere), for a range of momentum coefficients. In figure 7b, we
plot the best observed batch size as a function of the momentum coefficient, and fit our results to the
scaling rule above; obtaining remarkably good agreement. We propose a simple heuristic for tuning
the batch size, learning rate and momentum coefficient in appendix E.
6 Conclusions
Just like deep neural networks, linear models which generalize well on informative labels can mem-
orize random labels of the same inputs. These observations are explained by the Bayesian evidence,
which is composed of the cost function and an “Occam factor”. The Occam factor penalizes sharp
minima but it is invariant to changes in model parameterization. Mini-batch noise drives SGD away
from sharp minima, and therefore there is an optimum batch size which maximizes the test accuracy.
Interpreting SGD as the discretization ofa stochastic differential equation, we predict this optimum
batch size should scale linearly with both the learning rate and the training set size, Bopt α eN.
We derive an additional scaling rule, Bopt 8 1/(1 - m), between the optimal batch size and the
momentum coefficient. We verify these scaling rules empirically and discuss their implications.
8
Published as a conference paper at ICLR 2018
Acknowledgments
We thank Pieter-Jan Kindermans, Prajit Ramachandran, Jascha Sohl-Dickstein, Jon Shlens, Kevin
Murphy, Samy Bengio, Yasaman Bahri and Saeed Saremi for helpful comments on the manuscript.
References
Alessandro Achille and Stefano Soatto. On the emergence of invariance and disentangling in deep
representations. arXiv preprint arXiv:1706.01350, 2017.
Lukas Balles, Javier Romero, and Philipp Hennig. Coupling adaptive batch sizes with learning rates.
arXiv preprint arXiv:1612.05086, 2016.
Richard H Byrd, Gillian M Chin, Jorge Nocedal, and Yuchen Wu. Sample size selection in opti-
mization methods for machine learning. Mathematical programming, 134(1):127-155, 2012.
Pratik Chaudhari and Stefano Soatto. Stochastic gradient descent performs variational inference,
converges to limit cycles for deep networks. arXiv preprint arXiv:1710.11029, 2017.
Pratik Chaudhari, Anna Choromanska, Stefano Soatto, and Yann LeCun. Entropy-SGD: Biasing
gradient descent into wide valleys. arXiv preprint arXiv:1611.01838, 2016.
Soham De, Abhay Yadav, David Jacobs, and Tom Goldstein. Automated inference with adaptive
batches. In Artificial Intelligence and Statistics, pp. 1504-1513, 2017.
Laurent Dinh, Razvan Pascanu, Samy Bengio, and Yoshua Bengio. Sharp minima can generalize
for deep nets. arXiv preprint arXiv:1703.04933, 2017.
Gintare Karolina Dziugaite and Daniel M Roy. Computing nonvacuous generalization bounds for
deep (stochastic) neural networks with many more parameters than training data. arXiv preprint
arXiv:1703.11008, 2017.
Michael P Friedlander and Mark Schmidt. Hybrid deterministic-stochastic methods for data fitting.
SIAM Journal on Scientific Computing, 34(3):A1380-A1405, 2012.
Crispin W Gardiner. Handbook of Stochastic Methods, volume 4. Springer Berlin, 1985.
Pascal Germain, Francis Bach, Alexandre Lacoste, and Simon Lacoste-Julien. PAC-bayesian theory
meets bayesian inference. In Advances in Neural Information Processing Systems, pp. 1884-
1892, 2016.
Priya Goyal, Piotr Dollar, Ross Girshick, Pieter Noordhuis, LUkasz Wesolowski, AaPo Kyrola, An-
drew Tulloch, Yangqing Jia, and Kaiming He. Accurate, large minibatch SGD: Training imagenet
in 1 hour. arXiv preprint arXiv:1706.02677, 2017.
StePhen F Gull. Bayesian inductive inference and maximum entroPy. In Maximum-entropy and
Bayesian methods in science and engineering, PP. 53-74. SPringer, 1988.
Geoffrey E Hinton and Drew Van CamP. KeePing the neural networks simPle by minimizing the
descriPtion length of the weights. In Proceedings of the sixth annual conference on Computational
learning theory, PP. 5-13. ACM, 1993.
Sepp Hochreiter and JUrgen Schmidhuber. Flat minima. Neural Computation, 9(1):142, 1997.
Elad Hoffer, Itay Hubara, and Daniel Soudry. Train longer, generalize better: closing the general-
ization gap in large batch training of neural networks. arXiv preprint arXiv:1705.08741, 2017.
StaniSIaW Jastrzebski, Zachary Kenton, Devansh Arpit, Nicolas Ballas, Asja Fischer, Yoshua
Bengio, and Amos Storkey. Three factors influencing minima in SGD. arXiv preprint
arXiv:1711.04623, 2017.
Robert E Kass and Adrian E Raftery. Bayes factors. Journal of the american statistical association,
90(430):773-795, 1995.
9
Published as a conference paper at ICLR 2018
Kenji Kawaguchi, Leslie Pack Kaelbling, and Yoshua Bengio. Generalization in deep learning.
arXiv preprint arXiv:1710.05468, 2017.
Nitish Shirish Keskar, Dheevatsa Mudigere, Jorge Nocedal, Mikhail Smelyanskiy, and Ping Tak Pe-
ter Tang. On large-batch training for deep learning: Generalization gap and sharp minima. arXiv
preprint arXiv:1609.04836, 2016.
David Krueger, Nicolas Ballas, Stanislaw Jastrzebski, Devansh Arpit, Maxinder S Kanwal, Tegan
Maharaj, Emmanuel Bengio, Asja Fischer, and Aaron Courville. Deep nets don’t learn via mem-
orization. ICLR Workshop, 2017.
Qianxiao Li, Cheng Tai, and E Weinan. Stochastic modified equations and adaptive stochastic
gradient algorithms. In International Conference on Machine Learning, pp. 2101-2110, 2017.
David JC MacKay. A practical bayesian framework for backpropagation networks. Neural compu-
tation, 4(3):448-472, 1992.
Stephan Mandt, Matthew D Hoffman, and David M Blei. Stochastic gradient descent as approximate
bayesian inference. arXiv preprint arXiv:1704.04289, 2017.
Ravid Shwartz-Ziv and Naftali Tishby. Opening the black box of deep neural networks via informa-
tion. arXiv preprint arXiv:1703.00810, 2017.
Samuel L. Smith, Pieter-Jan Kindermans, and Quoc V. Le. Don’t decay the learning rate, increase
the batch size. arXiv preprint arXiv:1711.00489, 2017.
Max Welling and Yee W Teh. Bayesian learning via stochastic gradient langevin dynamics. In
Proceedings of the 28th International Conference on Machine Learning (ICML-11), pp. 681-688,
2011.
Chiyuan Zhang, Samy Bengio, Moritz Hardt, Benjamin Recht, and Oriol Vinyals. Understanding
deep learning requires rethinking generalization. arXiv preprint arXiv:1611.03530, 2016.
A Bayesian posterior sampling and Langevin dynamics
Instead of minimizing the cost function, Bayesian usually prefer to sample parameter values from
the posterior (MacKay, 1992),
P(ω∣y,x; M) (X e-CQ；M),	(14)
where C(ω; M) is the regularized summed cost function, as shown in section 2 of the main text. It
is well known that one can sample this posterior by simulating the overdamped Langevin equation
(Gardiner, 1985), which is described by the stochastic differential equation,
dω
dt
dC
-石+ η⑴,
(15)
where t is a continuous variable, and η(t) describes Gaussian noise with mean hη(t)i = 0 and
variance hη(t)η(t0)i = 2T Iδ(t-t0). The matrix I denotes the identity, while T is the “temperature”.
Notice this Langevin equation is extremely similar to the stochastic differential equation of SGD,
discussed in section 5 of the main text. Indeed, if the gradient covariances F (ω) were stationary
and proportional to the identity, then the SGD would integrate an overdamped Langevin equation
with temperature proportional to the SGD noise scale g. As t → ∞, the probability of sampling any
particular parameter vector ω from the Langevin equation, P(ω, t → ∞) X e-C/T .
We obtain posterior samples if T = 1. In order to draw posterior samples in practice, we repeatedly
integrate the Langevin equation (at temperature T = 1), over a finite step t → t + /N,
∆ω
E dC
Ndω
∕*t+ N
+t
η(t)dt
(16)
(17)
E dC
Ndω
+ α,
10
Published as a conference paper at ICLR 2018
where α denotes a Gaussian random variable with mean hαi = 0 and variancehα2i = 2I/N,
which introduces isotropic noise to the gradient update as described in section 4 of the main text.
Note that, since C(ω; M) denotes the summed cost function, we chose to scale our step size by the
training set size N . This also matches our treatment of SGD in section 5 of the main text. The
larger the step size , the greater the discretization error, but if is sufficiently small and we iterate
equation 17 sufficiently many times, we will obtain valid samples from the posterior.
Since the probability of sampling any given parameter vector ω is proportional to the posterior, the
probability of sampling a parameter vector belonging to any given local minimum is proportional to
the integral of the posterior over the bowl of attraction D which surrounds that minimum.
P(ω ∈ D, t → ∞)
H d dω e-c(ωM)
D
(18)
Meanwhile we showed in section 2 of the main text that the evidence in favor of a model is propor-
tional to the integral of the posterior over all parameter space.
P(y|x; M) (X / dω e-CC(ωM)
(19)
As we discussed, this evidence is dominated by the contributions to the integral near local minima.
In a convex model, there is only one such minimum; which allows us to accurately estimate the
model evidence. Meanwhile, in non-convex models, there are many such minima, and so we can
instead define the evidence as a sum over local evidences in favor of each minimum,
P(y|x;M) =	P(y|x, ω ∈ Di;M),
(20)
i
where we define the evidence in favor of a minimum as the integral over the local bowl of attraction,
P(y|x, ω ∈
D; M) X
D
dω e-2M).
(21)
Since the combined bowls of attraction of all the minima perfectly tile the entire parameter space,
equations 19 and 20 are equivalent. Meanwhile, equating equations 18 and 21 we find that, when one
performs Bayesian posterior sampling, the probability of sampling the parameter vector from a local
minimum is proportional to the evidence in favor of that minimum. This demonstrates that bayesian
posterior samples are biased in favor of local minima whose evidence is large, which explains why
a single posterior sample ωp often achieves lower test error than the cost function minimum ω0 .
B The effect of regularization on the generalization gap
In the experiments of section 4 of the main text, the L2 regularization coefficient λ = 0. In figure
8, we plot the evolution of the training curves when λ = 0.1, for both small batch and full batch
(a)
Figure 8: The mean test accuracy (a) and the mean test cross-entropy (b) of a regularized model
during training. While full batch training takes longer to converge, it achieves similar performance
at long times. The noise inherent in small batch training causes the performance to fluctuate.
(b)
11
Published as a conference paper at ICLR 2018
Gradient of a single example
(a)
Figure 9: The gradient distribution of a randomly selected parameter in the softmax layer, when
measured over a single training example (a), and when averaged over mini-batches of 30 images (b).
Mean gradient over mini-batch
(b)
training. Excluding the regularization parameter, these experiments are identical to figure 3. To our
surprise, regularized full batch training took longer to converge than small batch training. In another
surprise, regularization significantly reduced the size of the generalization gap. While large batch
regularized training achieves slightly lower test set accuracy than unregularized small batch training,
it also achieves lower test cross-entropy. The test cross-entropy of our regularized models does not
degrade after many gradient updates, removing the need for early stopping.
C	The Gaussian approximation to the mini-batch error
In section 5 of the main text, we approximated the difference between the full batch gradient and
the mini-batch gradient estimate, α =(dC 一 dC), by a Gaussian random variable. This enabled
us to derive the scaling rules, which we verified empirically. We motivated this assumption by
reference to the central limit theorem, which states that the gradient error will tend towards Gaussian
noise as {N → ∞, B → ∞, B N}, so long as the distribution of gradients over individual
training examples does not have heavy tails. In practice neither N nor B is infinite, and the gradient
distribution may be heavy tailed, especially when gradients are sparse. Nonetheless the central limit
theorem tends to be surprisingly robust in practice, and is consequently widely used.
It is beyond the scope of this work to perform a thorough study of the gradient noise distribution
in deep networks. However as a brief proof of principle, we present the distribution of the gradient
immediately after random initialization in figure 9, for the shallow neural network discussed in
sections 4 and 5 of the main text. In figure 9a, we present the distribution over the individual
training examples, of the gradient of a single matrix element in the softmax output layer, chosen
randomly. The distribution is double peaked and clearly not Gaussian. However in figure 7b, we plot
the distribution of the gradient of the same matrix element, when averaged over randomly sampled
mini-batches of 30 images (without replacement). A single peak emerges, and while the distribution
is still slightly skewed, it is clearly already approaching the Gaussian limit. We conclude that the
Gaussian approximation is likely to be reasonable for commonly used mini-batch sizes.
D Deriving the scaling rules for SGD with momentum
Momentum simulates a generalized Langevin equation (with structured fluctuations),
d2ω	dω dC
壶2 = 一λ成一石 + η(t).
(22)
λ is the “damping coefficient” and η(t) describes Gaussian noise, whose statistics hη(t)i = 0 and
hη(t)η(t0)i = gλF (w)δ(t 一 t0). As before, the coefficient g describes the scale of random fluctua-
tions in the dynamics, and F(ω) describes the gradient covariances between parameters. We include
a factor of λ in the noise variance to satisfy the fluctuation-dissipation theorem, which states that
12
Published as a conference paper at ICLR 2018
we can vary the damping coefficient without changing the probability of sampling any particular
configuration of parameters in the limit t → ∞, if we proportionally increase the noise variance.
To relate this Langevin equation to the usual momentum equations, we first re-express it as two
coupled first order differential equations,
dp dt	dC =-λP - -r- dω	+ η(t),	(23)
dω			
dt	= p.		(24)
Integrating over a single step ∆t∕N,			
			
∆p =	-(λ∆t∕N)p-	∆t dC NCω十η,	(25)
∆ω =	p∆t∕N.		(26)
Where now ⑺=0 and hη2i = g∆tλF(WyN. We define the accumulation A = p∕∆t,
δa	=	-g/N )A- N dC+∆?	(27)
∆ω	=	(∆t)2A∕N.	(28)
These equations can be compared to the TensorFlow update equations for momentum,
δa = (m — I)A - -1 (Cr- + 0} ,	(29)
N dω
∆ω =	A.	(30)
Where α
(dB - ddω) denotes the error in the gradient update. As discussed in the main text,
we can approximate this error as Gaussian noise with statistics ha) = 0 and(a2)≈ N2F(ω)∕B.
Equations 27 and 28 match equations 29 and 30 if the step size = (∆t)2 /N, and the momentum
parameter m = (1 一 λ∆t∕N). Finally we equate the noise by setting (a2)∕N2 = (η2)∕(∆t)2, and
solve for the noise scale g to obtain,
g≈
∆tN _	(∆t)2
Bλ = B(1 - m)
EN
B(1 - m).
(31)
(32)
As observed in the main text, if we wish to keep the scale of random fluctuations constant, then
we should scale the batch size B α EN. We also predict an additional scaling relation between
the batch size and the momentum parameter, B a 1∕(1 - m). Note that one can also interpret
Eeff = E∕(1 - m) as the “effective learning rate”.
E How to achieve large batch training
Here we propose a simple heuristic for tuning the batch size, learning rate and momentum parame-
ter; in order to maximize both test accuracy and batch size (enabling parallel training across many
machines). Note that this is only worthwhile if one expects to retrain a model many times.
1.	Set the learning rate to 0.1 and the momentum coefficient to 0.9. Run experiments at a range
of batch sizes on a logarithmic scale, and identify the optimal batch size which maximizes
the validation set accuracy. If training is not stable, reduce the learning rate, and repeat.
2.	Repeatedly increase the batch size by a factor of 3, while scaling the learning rate E a B,
until the validation set accuracy starts to fall. Then repeatedly increase the batch size by
a factor of 3, while scaling the momentum coefficient (1 - m) a 1∕B, until either the
validation set accuracy falls or the batch size reaches the limits of your hardware.
3.	Having identified the final learning rate and momentum parameter, retune the batch size on
a linear scale in the local neighborhood of the current batch size.
We believe that this simple procedure will increase the test accuracy, reduce the cost of tuning hyper-
parameters, and significantly reduce the final number of gradient updates required to train a model.
13