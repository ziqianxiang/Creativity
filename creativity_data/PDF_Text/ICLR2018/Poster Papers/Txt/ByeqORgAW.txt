Published as a conference paper at ICLR 2018
Proximal Backpropagation
Thomas Frerix1*, Thomas Mollenhoff1*, Michael Moeller2*, Daniel Cremers1
thomas.frerix@tum.de
thomas.moellenhoff@tum.de
michael.moeller@uni-siegen.de
cremers@tum.de
1	Technical University of Munich
2	University of Siegen
Ab stract
We propose proximal backpropagation (ProxProp) as a novel algorithm that takes
implicit instead of explicit gradient steps to update the network parameters during
neural network training. Our algorithm is motivated by the step size limitation
of explicit gradient descent, which poses an impediment for optimization. Prox-
Prop is developed from a general point of view on the backpropagation algorithm,
currently the most common technique to train neural networks via stochastic gra-
dient descent and variants thereof. Specifically, we show that backpropagation of
a prediction error is equivalent to sequential gradient descent steps on a quadratic
penalty energy, which comprises the network activations as variables of the op-
timization. We further analyze theoretical properties of ProxProp and in partic-
ular prove that the algorithm yields a descent direction in parameter space and
can therefore be combined with a wide variety of convergent algorithms. Finally,
we devise an efficient numerical implementation that integrates well with popular
deep learning frameworks. We conclude by demonstrating promising numerical
results and show that ProxProp can be effectively combined with common first
order optimizers such as Adam.
1 Introduction
In recent years neural networks have gained considerable attention in solving difficult correla-
tion tasks such as classification in computer vision (Krizhevsky et al., 2012) or sequence learn-
ing (Sutskever et al., 2014) and as building blocks of larger learning systems (Silver et al., 2016).
Training neural networks is accomplished by optimizing a nonconvex, possibly nonsmooth, nested
function of the network parameters. Since the introduction of stochastic gradient descent (SGD)
(Robbins & Monro, 1951; Bottou, 1991), several more sophisticated optimization methods have
been studied. One such class is that of quasi-Newton methods, as for example the comparison of
L-BFGS with SGD in (Le et al., 2011), Hessian-free approaches (Martens, 2010), and the Sum of
Functions Optimizer in (Sohl-Dickstein et al., 2013). Several works consider specific properties of
energy landscapes of deep learning models such as frequent saddle points (Dauphin et al., 2014) and
well-generalizable local optima (Chaudhari et al., 2017a). Among the most popular optimization
methods in currently used deep learning frameworks are momentum based improvements of classi-
cal SGD, notably Nesterov’s Accelerated Gradient (Nesterov, 1983; Sutskever et al., 2013), and the
Adam optimizer (Kingma & Ba, 2015), which uses estimates of first and second order moments of
the gradients for parameter updates.
Nevertheless, the optimization of these models remains challenging, as learning with SGD and its
variants requires careful weight initialization and a sufficiently small learning rate in order to yield
a stable and convergent algorithm. Moreover, SGD often has difficulties in propagating a learning
signal deeply into a network, commonly referred to as the vanishing gradient problem (Hochreiter
et al., 2001).
* contributed equally
1
Published as a conference paper at ICLR 2018
Figure 1: Notation overview. For an L-layer feed-forward network we denote the explicit layer-wise
activation variables as zl and al. The transfer functions are denoted as φ and σ. Layer l is of size nl .
Training neural networks can be formulated as a constrained optimization problem by explicitly
introducing the network activations as variables of the optimization, which are coupled via layer-
wise constraints to enforce a feasible network configuration. The authors of (Carreira-Perpinan &
Wang, 2014) have tackled this problem with a quadratic penalty approach, the method of auxiliary
coordinates (MAC). Closely related, (Taylor et al., 2016) introduce additional auxiliary variables
to further split linear and nonlinear transfer between layers and propose a primal dual algorithm for
optimization. From a different perspective, (LeCun, 1988) takes a Lagrangian approach to formulate
the constrained optimization problem.
In this work, we start from a constrained optimization point of view on the classical backpropagation
algorithm. We show that backpropagation can be interpreted as a method alternating between two
steps. First, a forward pass of the data with the current network weights. Secondly, an ordered
sequence of gradient descent steps on a quadratic penalty energy.
Using this point of view, instead of taking explicit gradient steps to update the network parameters
associated with the linear transfer functions, we propose to use implicit gradient steps (also known as
proximal steps, for the definition see (6)). We prove that such a model yields a descent direction and
can therefore be used in a wide variety of (provably convergent) algorithms under weak assumptions.
Since an exact proximal step may be costly, we further consider a matrix-free conjugate gradient
(CG) approximation, which can directly utilize the efficient pre-implemented forward and backward
operations of any deep learning framework. We prove that this approximation still yields a descent
direction and demonstrate the effectiveness of the proposed approach in PyTorch.
2	Model and notation
We propose a method to train a general L-layer neural network of the functional form
J(θ; X, y) = Ly(Φ(θL-i,σ(φ(…,σ(φ(θι, X))…)).	(1)
Here, J(θ; X, y) denotes the training loss as a function of the network parameters θ, the input data
X and the training targets y. As the final loss function Ly we choose the softmax cross-entropy for
our classification experiments. φ is a linear transfer function and σ an elementwise nonlinear transfer
function. As an example, for fully-connected neural networks θ = (W, b) and φ(θ, a) = Wa + b1.
While we assume the nonlinearities σ to be continuously differentiable functions for analysis pur-
poses, our numerical experiments indicate that the proposed scheme extends to rectified linear units
(ReLU), σ(x) = max(0, x). Formally, the functions σ and φ map between spaces of different di-
mensions depending on the layer. However, to keep the presentation clean, we do not state this
dependence explicitly. Figure 1 illustrates our notation for the fully-connected network architecture.
Throughout this paper, we denote the Euclidean norm for vectors and the Frobenius norm for matri-
cesby ∣∣∙∣∣, induced by an inner product(,, •). We use the gradient symbol V to denote the transpose
of the Jacobian matrix, such that the chain rule applies in the form “inner derivative times outer
derivative”. For all computations involving matrix-valued functions and their gradient/Jacobian,
we uniquely identify all involved quantities with their vectorized form by flattening matrices in a
column-first order. Furthermore, We denote by A* the adjoint of a linear operator A.
2
Published as a conference paper at ICLR 2018
Algorithm 1 - Penalty formulation of BackProp Algorithm 2 - ProxProp
Input: Current parameters θk .
// Forward pass.
for l = 1 to L - 2 do
zlk = φ(θlk, alk-1),	// a0 = X.
alk = σ(zlk).
end for
// Perform minimization steps on (3).
a grad. step on E wrt. (θL-1 , aL-2)
for l = L - 2 to 1 do
b grad. step on E wrt. zl and al-1,
c grad. step on E wrt. θl .
end for
Output: New parameters θk+1 .
Input: Current parameters θ k .
// Forward pass.
for l = 1 to L - 2 do
zlk = φ(θlk, alk-1),	// a0 = X.
alk = σ(zlk).
end for
// Perform minimization steps on (3).
a grad. step on E wrt. (θL-1, aL-2), Eqs. 8, 12.
for l = L - 2 to 1 do
b grad. step on E wrt. zl and al-1, Eqs. 9, 10.
c prox step on E wrt. θl, Eq. 11.
end for
Output: New parameters θk+1 .
3	Penalty formulation of backpropagation
The gradient descent iteration on a nested function J (θ; X, y),
θk+1 = θk - TVJ(θk; X,y),	(2)
is commonly implemented using the backpropagation algorithm (Rumelhart et al., 1986). As the
basis for our proposed optimization method, we derive a connection between the classical back-
propagation algorithm and quadratic penalty functions of the form
L-2
E(θ, a, Z) = Ly(Φ(θL-i,aL-2)) + X Y∣∣σ(zι) - aι∣∣2 + P∣∣φ(θι,ai-i) - zι∣∣2.	⑶
l=1
The approach of (Carreira-Perpinan & Wang, 2014) is based on the minimization of (3), as under
mild conditions the limit ρ, γ → ∞ leads to the convergence of the sequence of minimizers of E
to the minimizer of J (Nocedal & Wright, 2006, Theorem 17.1). In contrast to (Carreira-Perpinan
& Wang, 2014) we do not optimize (3), but rather use a connection of (3) to the classical backprop-
agation algorithm to motivate a semi-implicit optimization algorithm for the original cost function
J.
Indeed, the iteration shown in Algorithm 1 of forward passes followed by a sequential gradient
descent on the penalty function E is equivalent to the classical gradient descent iteration.
Proposition 1. Let Ly, φ and σ be continuously differentiable. For P = Y = 1∕τ and θk as the
input to Algorithm 1, its output θk+1 satisfies (2), i.e., Algorithm 1 computes one gradient descent
iteration on J.
Proof. For this and all further proofs we refer to Appendix A.
□
4	Proximal backpropagation
The interpretation of Proposition 1 leads to the natural idea of replacing the explicit gradient steps
⑧，(Jb and (c) in Algorithm 1 with other - possibly more powerful - minimization steps. We propose
Proximal Backpropagation (ProxProp) as one such algorithm that takes implicit instead of explicit
gradient steps to update the network parameters θ in step (c . This algorithm is motivated by the step
size restriction of gradient descent.
4.1	Gradient descent and proximal mappings
Explicit gradient steps pose severe restrictions on the allowed step size τ: Even for a convex, twice
continuously differentiable, L -smooth function f : Rn → R, the convergence of the gradient
3
Published as a conference paper at ICLR 2018
descent algorithm can only be guaranteed for step sizes 0 < τ < 2/L . The Lipschitz constant
L of the gradient Vf is in this case equal to the largest eigenvalue of the Hessian H. With the
interpretation of backpropagation as in Proposition 1, gradient steps are taken on quadratic functions.
As an example for the first layer,
f(θ) = 2I∣ΘX - zιIl2.	(4)
In this case the Hessian is H = XX>, which is often ill-conditioned. For the CIFAR-10 dataset the
largest eigenvalue is 6.7∙106, which is seven orders of magnitude larger than the smallest eigenvalue.
Similar problems also arise in other layers where poorly conditioned matrices al pose limitations for
guaranteeing the energy E to decrease.
The proximal mapping (Moreau, 1965) of a function f : Rn → R is defined as:
ProXTf (y) := argmin f (x) + 2^ ∣∣x 一夕"'
(5)
By rearranging the oPtimality conditions to (5) and taking y = xk, it can be interPreted as an implicit
gradient steP evaluated at the new Point xk+1 (assuming differentiability of f):
xk+1 := argmin f(x) 十 —\\x — Xk∣∣2 = Xk — TVf(xk+1).	(6)
x∈Rn	2τ
The iterative algorithm (6) is known as the ProXimal Point algorithm (Martinet, 1970). In contrast
to eXPlicit gradient descent this algorithm is unconditionally stable, i.e. the uPdate scheme (6)
monotonically decreases f for any T > 0, since it holds by definition of the minimizer Xk+1 that
f(xk+1) + 2T∖∖χk+1 - XkII2 ≤ f(xk).
Thus ProXimal maPPings yield unconditionally stable subProblems in the following sense: The uP-
date in θl Provably decreases the Penalty energy E(θ, ak, zk) from (3) for fiXed activations (ak, zk)
for any choice of steP size. This motivates us to use ProXimal stePs as dePicted in Algorithm 2.
4.2	ProxProp
We ProPose to rePlace eXPlicit gradient stePs with ProXimal stePs to uPdate the network Parameters
of the linear transfer function. More Precisely, after the forward Pass
zlk = φ(θlk,alk-1),	(7)
alk = σ(zlk),
we keeP the eXPlicit gradient uPdate equations for zl and al. The last layer uPdate is
akL+-12/2 = akL-2 - T VaL-2 Ly (φ(θL-1, aL-2)),	(8)
and for all other layers,
zlk+1/2 = zlk - σ0(zlk)(σ(zlk) - alk+1/2),	(9)
ak-ι1∕2 = ak-1 - V Qkφ(θι, ∙) - zk+1/2k) (ak-i),	(10)
where we use alk+1/2 and zlk+1/2 to denote the uPdated variables before the forward Pass of the neXt
iteration and multiPlication in (9) is comPonentwise. However, instead of taking eXPlicit gradient
stePs to uPdate the linear transfer Parameters θl, we take ProXimal stePs
θk+1 = argmin 1 ∖∖Φ(θ,。3) - zk+"2∖∖2 + ɪ∖∖θ -θ∖∖2.	(11)
θ 2	2Tθ
This uPdate can be comPuted in closed form as it amounts to a linear solve (for details see AP-
PendiX B). While in PrinciPle one can take a ProXimal steP on the final loss Ly , for efficiency rea-
sons we choose an eXPlicit gradient steP, as the ProXimal steP does not have a closed form solution
in many scenarios (e.g. the softmaX cross-entroPy loss in classification Problems). SPecifically,
θLk+-11 =θLk-1 -TVθL-1Ly(φ(θLk-1,akL-2)).	(12)
4
Published as a conference paper at ICLR 2018
Note that we have eliminated the step sizes in the updates for zl and al-1 in (9) and (10), as such
updates correspond to the choice of P = Y = 1 in the penalty function (3) and are natural in the
sense of Proposition 1. For the proximal steps in the parameters θ in (11) we have introduced a step
size tθ which - as We will see in Proposition 2 below - changes the descent metric opposed to T
which rather rescales the magnitude of the update.
We refer to one sweep of updates according to equations (7) - (12) as ProxProp, as it closely re-
sembles the classical backpropagation (BackProp), but replaces the parameter update by a proximal
mapping instead of an explicit gradient descent step. In the following subsection we analyze the
convergence properties of ProxProp more closely.
4.2.1	Convergence of ProxProp
ProxProp inherits all convergence-relevant properties from the classical backpropagation algorithm,
despite replacing explicit gradient steps with proximal steps: It minimizes the original network
energy J(θ; X, y) as its fixed-points are stationary points of J(θ; X, y), and the update direction
θk+1 - θk is a descent direction such that it converges when combined with a suitable optimizer.
In particular, it is straight forward to combine ProxProp with popular optimizers such as Nesterov’s
accelerated gradient descent (Nesterov, 1983) or Adam (Kingma & Ba, 2015).
In the following, we give a detailed analysis of these properties.
Proposition 2. For l = 1, . . . , L - 2, the update direction θk+1 - θk computed by ProxProp meets
θk+1-θk = -τ (τ11 +(Vφ(∙,ak-J)(Vφ(∙,ak-i))*) 1 V/(θk; X,y).	(13)
In other words, ProxProp multiplies the gradient Vθ% J with the inverse of the positive definite,
symmetric matrix
Mk := ɪI + (Vφ(∙, ak-i))(Vφ(∙, ak-i))*,	(14)
τθ
which depends on the activations alk-1 of the forward pass. Proposition 2 has some important impli-
cations:
Proposition 3. For any choice of τ > 0 and tθ > 0, fixed points θ* of ProxProp are stationary
points of the original energy J(θ; X, y).
Moreover, we can conclude convergence in the following sense.
Proposition 4. The ProxProp direction θk+1 - θk is a descent direction. Moreover, under the
(weak) assumption that the activations alk remain bounded, the angle αk between -VθJ(θk; X, y)
and θk+1 一 θk remains uniformly bounded away from π∕2, i.e.
cos(αk) > c ≥ 0,	∀k ≥ 0,	(15)
for some constant c.
Proposition 4 immediately implies convergence of a whole class of algorithms that depend only on
a provided descent direction. We refer the reader to (Nocedal & Wright, 2006, Chapter 3.2) for
examples and more details.
Furthermore, Proposition 4 states convergence for any minimization scheme in step c of Algo-
rithm 2 that induces a descent direction in parameter space and thus provides the theoretical basis
for a wide range of neural network optimization algorithms.
Considering the advantages of proximal steps over gradient steps, it is tempting to also update the
auxiliary variables a and z in an implicit fashion. This corresponds to a proximal step in b of
Algorithm 2. However, one cannot expect an analogue version of Proposition 3 to hold anymore.
For example, if the update of aL-2 in (8) is replaced by a proximal step, the propagated error does
not correspond to the gradient of the loss function Ly, but to the gradient of its Moreau envelope.
Consequently, one would then minimize a different energy. While in principle this could result
in an optimization algorithm with, for example, favorable generalization properties, we focus on
minimizing the original network energy in this work and therefore do not further pursue the idea of
implicit steps on a and z .
5
Published as a conference paper at ICLR 2018
4.2.2	Inexact solution of proximal steps
As we can see in Proposition 2, the ProxProp updates differ from vanilla gradient descent by the
variable metric induced by the matrices (Mlk)-1 with Mlk defined in (14). Computing the ProxProp
update direction Vk := 1 (θf+1 - θf) therefore reduces to solving the linear equation
Mk Vk = -Vθι J (θk; X,y),	(16)
which requires an efficient implementation. We propose to use a conjugate gradient (CG) method,
not only because it is one of the most efficient methods for iteratively solving linear systems in gen-
eral, but also because it can be implemented matrix-free: It merely requires the application of the
linear operator Mk which consists of the identity and an application of (Vφ(∙, a" 1))(Vφ(∙, ak-1)) *.
The latter, however, is preimplemented for many linear transfer functions φ in common deep learn-
ing frameworks, because φ(x, alk-1) = (Vφ(∙, alk-1))* (x) is nothing but a forward-pass in φ, and
φ* (z, alk-1) = (Vφ(∙, alk-1))(z) provides the gradient with respect to the parameters θ if z is the
backpropagated gradient up to that layer. Therefore, a CG solver is straight-forward to implement
in any deep learning framework using the existing, highly efficient and high level implementations
of φ and φ* . For a fully connected network φ is a matrix multiplication and for a convolutional
network the convolution operation.
As we will analyze in more detail in Section 5.1, we approximate the solution to (16) with a few CG
iterations, as the advantage of highly precise solutions does not justify the additional computational
effort in obtaining them. Using any number of iterations provably does not harm the convergence
properties of ProxProp:
Proposition 5. The direction vk one obtains from approximating the solution Vl of (16) with the
CG method remains a descent direction for any number of iterations.
4.2.3	Convergence in the stochastic setting
While the above analysis considers only the full batch setting, we remark that convergence of Prox-
Prop can also be guaranteed in the stochastic setting under mild assumptions. Assuming that the
activations alk remain bounded (as in Proposition 4), the eigenvalues of (Mlk)-1 are uniformly
contained in the interval [λ, τθ] for some fixed λ > 0. Therefore, our ProxProp updates fulfill As-
sumption 4.3 in (Bottou et al., 2016), presuming the classic stochastic gradient fulfills them. This
guarantees convergence of stochastic ProxProp updates in the sense of (Bottou et al., 2016, Theo-
rem 4.9), i.e. for a suitable sequence of diminishing step sizes.
5	Numerical evaluation
ProxProp generally fits well with the API provided by modern deep learning frameworks, since it
can be implemented as a network layer with a custom backward pass for the proximal mapping. We
chose PyTorch for our implementation1. In particular, our implementation can use the API’s GPU
compute capabilities; all numerical experiments reported below were conducted on an NVIDIA
Titan X GPU. To directly compare the algorithms, we used our own layer for either proximal or gra-
dient update steps (cf. step c in Algorithms 1 and 2). A ProxProp layer can be seamlessly integrated
in a larger network architecture, also with other parametrized layers such as BatchNormalization.
5.1	Exact and approximate solutions to proximal steps
We study the behavior of ProxProp in comparison to classical BackProp for a supervised visual
learning problem on the CIFAR-10 dataset. We train a fully connected network with architecture
3072 - 4000 - 1000 - 4000 - 10 and ReLU nonlinearities. As the loss function, we chose the cross-
entropy between the probability distribution obtained by a softmax nonlinearity and the ground-truth
labels. We used a subset of 45000 images for training while keeping 5000 images as a validation
set. We initialized the parameters θι uniformly in [-1/√nlj-ι, 1 /√nlj-↑], the default initialization
of PyTorch.
1https://github.com/tfrerix/proxprop
6
Published as a conference paper at ICLR 2018
CIFAR-10, 3072-4000-1000-4000-10 MLP
ssoL gniniarT hctaB lluF
50
40
30
20
0
1. 0.
ssoL gniniarT hctaB lluF
CIFAR-10, 3072-4000-1000-4000-10 MLP
ycaruccA noitadilaV
Figure 2: Exact and inexact solvers for ProxProp compared with BackProp. Left: A more precise
solution of the proximal subproblem leads to overall faster convergence, while even a very inexact
solution (only 3 CG iterations) already outperforms classical backpropagation. Center & Right:
While the run time is comparable between the methods, the proposed ProxProp updates have better
generalization performance (≈ 54% for BackProp and ≈ 56% for ours on the test set).
Figure 2 shows the decay of the full batch training loss over epochs (left) and training time (middle)
for a NesteroV momentum2 based optimizer using a momentum of μ = 0.95 and minibatches of
size 500. We used τθ = 0.05 for the ProxProp variants along with τ = 1. For BackProp we chose
τ = 0.05 as the optimal Value we found in a grid search.
As we can see in Figure 2, using implicit steps indeed improVes the optimization progress per epoch.
Thanks to powerful linear algebra methods on the GPU, the exact ProxProp solution is competitiVe
with BackProp eVen in terms of runtime.
The adVantage of the CG-based approximations, howeVer, is that they generalize to arbitrary linear
transfer functions in a matrix-free manner, i.e. they are independent of whether the matrices Mlk
can be formed efficiently. MoreoVer, the Validation accuracies (right plot in Figure 2) suggest that
these approximations haVe generalization adVantages in comparison to BackProp as well as the exact
ProxProp method. Finally, we found the exact solution to be significantly more sensitiVe to changes
of τθ than its CG-based approximations. We therefore focus on the CG-based Variants of ProxProp
in the following. In particular, we can eliminate the hyperparameter τθ and consistently chose τθ = 1
for the rest of this paper, while one can in principle perform a hyperparameter search just as for the
learning rate τ . Consequently, there are no additional parameters compared with BackProp.
5.2	Stability for larger step sizes
We compare the behaVior of ProxProp and BackProp for different step sizes. Table 1 shows the
final full batch training loss after 50 epochs with Various τ . The ProxProp based approaches remain
stable oVer a significantly larger range ofτ. EVen more importantly, deViating from the optimal step
size τ by one order of magnitude resulted in a diVergent algorithm for classical BackProp, but still
proVides reasonable training results for ProxProp with 3 or 5 CG iterations. These results are in
accordance with our motiVation deVeloped in Section 4.1. From a practical point of View, this eases
hyperparameter search oVer τ .
τ	50	10	5	1	0.5	0.1	0.05	5∙10-3	5∙10-4
BaCkProP	—	—	一	一	—	0.524	0.091	0.637	1.531
ProxProp (cg1)	77.9	0.079	0.145	0.667	0.991	1.481	1.593	1.881	2.184
ProxProp (cg3)	94.7	0.644	0.031	2∙10-3	0.012	1.029	1.334	1.814	2.175
ProxProp (cg5)	66.5	0.190	0.027	3∙10-4	2∙10-3	0.399	1.049	1.765	2.175
Table 1: Full batch loss for conjugate gradient Versions of ProxProp and BackProp after training for
50 epochs, where “-” indicates that the algorithm diverged to NaN. The implicit ProxProP algorithms
remain stable for a significantly wider range of step sizes.
2PyTorch's Nesterov SGD for direction d(θk): mk+1 = μmk +d(θk), θk+1 = θk-τ(μmk+1+d(θk)).
7
Published as a conference paper at ICLR 2018
CIFAR-10, Convolutional Neural Network
ssοjlpaqαI=H
Adam + BackProP
Adam + ProxProp (3 cg)
Adam + ProxProp (10 cg)
0	10	20	30	40	50
Epochs
CIFAR-10, Convolutional Neural Network
ssοjlpaqαI=H
CIFAR-10, Convolutional Neural Network
0	50	100	150	200	250	300
Time [s]
CIFAR-10, Convolutional Neural Network
ycaruccA noitadila
0.6
0.4
0.2
0	10	20	30	40	50
Epochs
64
..
00
ycaruccA noitadilaV
Figure 3: ProxProp as a first-order oracle in combination with the Adam optimizer. The proposed
method leads to faster decrease of the full batch loss in epochs and to an overall higher accuracy on
the validation set. The plots on the right hand side show data for a fixed runtime, which corresponds
to a varying number of epochs for the different optimizers.
2
5.3	ProxProp as a first-order oracle
We show that ProxProp can be used as a gradient oracle for first-order optimization algorithms. In
this section, we consider Adam (Kingma & Ba, 2015). Furthermore, to demonstrate our algorithm
on a generic architecture with layers commonly used in practice, we trained on a convolutional
neural network of the form:
Conv[16 × 32 × 32] → ReLU → Pool[16 × 16 × 16] → Conv[20 × 16 × 16] → ReLU
→ Pool[20 × 8 × 8] → Conv[20 × 8 × 8] → ReLU → Pool[20 × 4 × 4] → FC + Softmax[10 × 1 × 1]
Here, the first dimension denotes the respective number of filters with kernel size 5 × 5 and max
pooling downsamples its input by a factor of two. We set the step size τ = 10-3 for both BackProp
and ProxProp.
The results are shown in Fig. 3. Using parameter update directions induced by ProxProp within
Adam leads to a significantly faster decrease of the full batch training loss in epochs. While the
running time is higher than the highly optimized backpropagation method, we expect that it can be
improved through further engineering efforts. We deduce from Fig. 3 that the best validation accu-
racy (72.9%) of the proposed method is higher than the one obtained with classical backpropagation
(71.7%). Such a positive effect of proximal smoothing on the generalization capabilities of deep
networks is consistent with the observations of Chaudhari et al. (2017b). Finally, the accuracies on
the test set after 50 epochs are 70.7% for ProxProp and 69.6% for BackProp which suggests that the
proposed algorithm can lead to better generalization.
8
Published as a conference paper at ICLR 2018
6	Conclusion
We have proposed proximal backpropagation (ProxProp) as an effective method for training neural
networks. To this end, we first showed the equivalence of the classical backpropagation algorithm
with an algorithm that alternates between sequential gradient steps on a quadratic penalty function
and forward passes through the network. Subsequently, we developed a generalization of Back-
Prop, which replaces explicit gradient steps with implicit (proximal) steps, and proved that such a
scheme yields a descent direction, even if the implicit steps are approximated by conjugate gradient
iterations. Our numerical analysis demonstrates that ProxProp is stable across various choices of
step sizes and shows promising results when compared with common stochastic gradient descent
optimizers.
We believe that the interpretation of error backpropagation as the alternation between forward passes
and sequential minimization steps on a penalty functional provides a theoretical basis for the devel-
opment of further learning algorithms.
References
Leon Bottou. Stochastic gradient learning in neural networks. Proceedings of Neuro-Nimes, 91(8),
1991.
Leon Bottou, Frank E Curtis, and Jorge Nocedal. Optimization methods for large-scale machine
learning. arXiv preprint arXiv:1606.04838, 2016.
Miguel A. Carreira-Perpinan and Weiran Wang. Distributed optimization of deeply nested systems.
In Proceedings of the 17th International Conference on Artificial Intelligence and Statistics, AIS-
TATS, 2014.
Pratik Chaudhari, Anna Choromanska, Stefano Soatto, Yann LeCun, Carlo Baldassi, Christian
Borgs, Jennifer Chayes, Levent Sagun, and Riccardo Zecchina. Entropy-SGD: Biasing gradi-
ent descent into wide valleys. In Proceedings of the 5th International Conference on Learning
Representations, ICLR, 2017a.
Pratik Chaudhari, Adam Oberman, Stanley Osher, Stefano Soatto, and Guillame Carlier. Deep
Relaxation: partial differential equations for optimizing deep neural networks. arXiv preprint
arXiv:1704.04932, 2017b.
Yann N. Dauphin, Razvan Pascanu, Caglar Gulcehre, Kyunghyun Cho, Surya Ganguli, and Yoshua
Bengio. Identifying and attacking the saddle point problem in high-dimensional non-convex opti-
mization. In Proceedings of the 27th International Conference on Neural Information Processing
Systems, NIPS, 2014.
Sepp Hochreiter, Yoshua Bengio, and Paolo Frasconi. Gradient flow in recurrent nets: the difficulty
of learning long-term dependencies. In Field Guide to Dynamical Recurrent Networks. IEEE
Press, 2001.
Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In Proceedings
of the 3rd International Conference on Learning Representations, ICLR, 2015.
Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. ImageNet classification with deep convolu-
tional neural networks. In Proceedings ofthe 25th International Conference of Neural Information
Processing Systems, NIPS, 2012.
Quoc V Le, Adam Coates, Bobby Prochnow, and Andrew Y Ng. On optimization methods for deep
learning. In Proceedings of The 28th International Conference on Machine Learning, ICML,
2011.
Yann LeCun. A theoretical framework for back-propagation. In Proceedings of the 1988 Connec-
tionist Models Summer School, pp. 21-28, 1988.
James Martens. Deep learning via Hessian-free optimization. In Proceedings of the 27th Interna-
tional Conference on Machine Learning, ICML, 2010.
9
Published as a conference paper at ICLR 2018
Bernard Martinet. Regularisation d,inequations Variationnelles par approximations SUccessives. Rev.
Francaise Inf. Rech. Oper, pp. 154-159, 1970.
Jean-Jacques Moreau. Proximite et dualite dans un espace hilbertien. Bulletin de la Societe
mathematique de France, 93:273-299, 1965.
Yurii Nesterov. A method of solving a convex programming problem with convergence rate
O(1/k2). Soviet Mathematics Doklady, 27(2):372-376, 1983.
Jorge Nocedal and Stephen Wright. Numerical Optimization. Springer Series in Operations Re-
search and Financial Engineering. Springer, 2006.
Herbert Robbins and Sutton Monro. A stochastic approximation method. The Annals of Mathemat-
ical Statistics, 22(3):400-407, 1951.
David E Rumelhart, Geoffrey E Hinton, and Ronald J Williams. Learning representations by back-
propagating errors. Nature, 323(6088):533-536, 1986.
David Silver, Aja Huang, Chris J. Maddison, Arthur Guez, Laurent Sifre, George van den Driessche,
Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, Sander Dieleman,
Dominik Grewe, John Nham, Nal Kalchbrenner, Ilya Sutskever, Timothy Lillicrap, Madeleine
Leach, Koray Kavukcuoglu, Thore Graepel, and Demis Hassabis. Mastering the game of go with
deep neural networks and tree search. Nature, 529(7587):484-489, 2016.
Jascha Sohl-Dickstein, Ben Poole, and Surya Ganguli. Fast large-scale optimization by unifying
stochastic gradient and quasi-newton methods. In Proceedings of The 31st International Confer-
ence on Machine Learning, ICML, 2013.
Ilya Sutskever, James Martens, George Dahl, and Geoffrey Hinton. On the importance of initial-
ization and momentum in deep learning. In Proceedings of the 30th International Conference on
International Conference on Machine Learning, ICML, 2013.
Ilya Sutskever, Oriol Vinyals, and Quoc V Le. Sequence to sequence learning with neural networks.
In Proceedings of the 27th International Conference of Neural Information Processing Systems,
NIPS, 2014.
Gavin Taylor, Ryan Burmeister, Zheng Xu, Bharat Singh, Ankit Patel, and Tom Goldstein. Training
neural networks without gradients: A scalable ADMM approach. In Proceedings of the 33rd
International Conference on Machine Learning, ICML, 2016.
10
Published as a conference paper at ICLR 2018
Appendix
A Theoretical results
Proof of Proposition 1. We first take a gradient step on
L-2
E(θ, a, Z) = Ly (φ(θL-1,aL-2)) + X 2 kσ(Zl)- alk2 + 2 kφ(θl, al-1)- zlk2,	(17)
l=1
with respect to (θL-1, aL-2). The gradient step with respect to θL-1 is the same as in the gradient
descent update,
θk+1 = θk - TVJ(θk; X, y),	(18)
since J depends on θL-1 only via Ly ◦ φ.
The gradient descent step on aL-2 in a yields
aL-1/2 = aL-2 - TVaφ(θL-i,aL-2) ∙ VφLy(φ(θL-i,aL-2)),	(19)
where we use akL+-12/2 to denote the updated variable aL-2 before the forward pass of the next it-
eration. To keep the presentation as clear as possible we slightly abused the notation of a right
multiplication with Vaφ(θLk-1, akL-2): While this notation is exact in the case of fully connected
layers, it represents the application of the corresponding linear operator in the more general case,
e.g. for convolutions.
For all layers l ≤ L - 2 note that due to the forward pass in Algorithm 1 we have
σ(zlk) = alk,	φ(θlk, alk-1) = zlk	(20)
and we therefore get the following update equations in the gradient step b
zlk+1/2 = Zk - τγVσ(zlk) (σ(zlk) -。"1/2) = Zk - Vσ(zlk) (af - af”),	(21)
and in the gradient step c w.r.t. al-1,
ak+i1/2 = ak-1 - τρVaφ(θlk,af-i) ∙ (φ(θlk,冷"Zi2)
(22)
=ak-i-Vαφ(θk,ak-i) ∙ (Zk - z*].
Equations (21) and (22) can be combined to obtain:
Zk-Zk+1∕2 =Vσ(Zlk)Vaφ(θlk+ι,ak) ∙ (Zk^ - Zl+：/2) .	(23)
The above formula allows us to backtrack the differences of the old Zlk and the updated Zlk+1/2 up to
layer L - 2, where we can use equations (21) and (19) to relate the difference to the loss. Altogether,
we obtain
Zk - Zk+1/2 = τ (J Vσ(Zk )Vaφ(θk+ι, ak )“Ly (φ(θL-i,aL-2)).	(24)
By inserting (24) into the gradient descent update equation with respect to θl in c ,
θk+1 = θk - Vθφ(θlk, ak-) ∙ (Zk - Zk+1∕2) ,	(25)
We obtain the chain rule for update (18).	□
Proof of Proposition 2. Since only the updates for θl , l = 1, . . . , L - 2, are performed implicitly,
one can replicate the proof of Proposition 1 exactly up to equation (24). Let us denote the right hand
side of (24) by glk , i.e. Zlk+1/2 = Zlk - glk and note that
TVθι J(θk; X,y) = Vθφ(∙,ak-i) ∙ glk	(26)
11
Published as a conference paper at ICLR 2018
holds by the chain rule (as seen in (25)). We have eliminated the dependence of Vθ φ(θ 弋,af-J on
θk and wrote Vφ(∙, af-ι) instead, because We assume φ to be linear in θ such that Vφ does not
depend on the point θ where the gradient is evaluated anymore.
We now rewrite the ProxProp update equation of the parameters θ as follows
θk+1= argmin 1 ∣∣φ(θ,a3) - zf+1/"2 + ɪ∣∣θ - θf∣∣2
θ 2	2τθ
=argmin 2llφ(θ,ak-ι) - (zι - gk)||2 + 2 — llθ - θk||2
θ 1	τθ 1	(27)
=argmin	∣∣φ(θ,αf-i) - (φ(θk,af-i) - gf )||2 +	∣∣θ - θf ||2
θ 2	2τθ
=argmin -IIΦ(Θ - θk,af-i)+ gf ||2 + ɪ∣∣θ - θf∣∣2,
θ 2	2τθ
where we have used that φ is linear in θ. The optimality condition yields
0 = Vφ(∙, ak-i)(φ(θk+1 - θk, ak-i) + gk) + -{θk+1 - θk)	(28)
τθ
Again, due to the linearity of φ in θ, one has
φ(θ,ak-i) = (Vφ(∙,ak-i))*(θ),	(29)
where *, denotes the adjoint of a linear operator. We conclude
0 = Vφ(∙,ak-i)(Vφ(∙,a3))*(θk+1 - θk) + Vφ(∙,a3)gk + °(θf+1 - θf),
τθ
⇒ (τ11 + Vφ(∙,ak-i)(Vφ(∙,a3))*) (θf+1 - θkk) = -Vφ(∙,ah)gk = -TVθl J(θk; X,y),
(30)
which yields the assertion.	□
Proofof Proposition 3. Under the assumption that θk converges, θk → θ, one finds that af →
^ι and Zk → zι = φ(θι, a—) converge to the respective activations of the parameters θ due to
the forward pass and the continuity of the network. As we assume J(∙; X,y) to be continuously
differentiable, we deduce from (30) that limk→∞ Vθl J(θk; X, y) = 0 for all l = 1, . . . , L - 2. The
parameters of the last layer θL-1 are treated explicitly anyways, such that the above equation also
holds for l = L - 1, which then yields the assertion.	□
Proof of Proposition 4. As the matrices
Mk ：= ɪI + (Vφ(∙, ak-i))(Vφ(∙, ak-i))*	(31)
Tθ	-	-
(with the convention MLk-1 = I) are positive definite, so are their inverses, and the claim that
θk+1 - θk is a descent direction is immediate,
hθιk+1 - θιk, -VθlJ(θk; Y, x)i = Th(Mιk)-1VθlJ(θk; Y, x), VθlJ(θk; Y, x)i.	(32)
We still have to guarantee that this update direction does not become orthogonal to the gradient in
the limit k → ∞. The largest eigenvalue of (Mιk)-1 is bounded from above by Tθ. If the aιk-1
remain bounded, then so does Vφ(∙, af-ι) and the largest eigenvalue of Vφ(∙, af-ι)Vφ(∙, af-ι)*
must be bounded by some constant C. Therefore, the smallest eigenvalue of (Mk)T must remain
bounded from from below by (ɪ + c)-1. Abbreviating V = Vθ, J (θk; Y,χ),it follows that
τθ	l
k) = T h(Mk)-1 v,vi
cos(α ) = Tk(Mιk)-1vkkvk
≥ λmin((Mf)-1)kvk2
≥	k(Mιk )-1vkkvk
≥ λmin((Mk)T)
一λmaχ((Mιk)-1)
(33)
12
Published as a conference paper at ICLR 2018
which yields the assertion.
□
Proof of Proposition 5. According to (Nocedal & Wright, 2006, p. 109, Thm. 5.3) and (Nocedal &
Wright, 2006, p. 106, Thm. 5.2) the k-th iteration xk of the CG method for solving a linear system
Ax = b with starting point x0 = 0 meets
Xk = arg min	Uhx,Axi-hb,xi,
x∈span(b,Ab,...,Ak-1 b) 2
(34)
i	.e. is optimizing over an order-k Krylov subspace. The starting point x0 = 0 can be chosen
without loss of generality. Suppose the starting point is X。= 0, then one can optimize the variable
x = x - X0 with a starting point x。= 0 and b = b + Ax。.
We will assume that the CG iteration has not converged yet as the claim for a fully converged CG
iteration immediately follow from Proposition 4. Writing the vectors b, Ab, . . . , Ak-1b as columns
of a matrix Kk, the condition x ∈ span(b, Ab, . . . , Ak-1b) can equivalently be expressed as x =
Kkα for some α ∈ Rk. In terms of α our minimization problem becomes
Xk = Kkα = arg min 1 hα, (Kk)TAKkα>-<(Kk)Tb,α),	(35)
α∈Rk 2
leading to the optimality condition
0 = (Kk)TAKkα - (Kk)Tb,
⇒ xk = Kk((Kk)TAKk)-1(Kk)Tb.
(36)
一 .	一 一	一	一	一	T~TT I~~Γ 一 一
Note that A is symmetric positive definite and can therefore be written as √A √A, leading to
(Kk )t AKk = (√AKk)T (√AKk)	(37)
being symmetric positive definite. Hence, the matrix ((Kk)T AKk)-1 is positive definite, too, and
hxk,bi=hKk((Kk)TAKk)-1(Kk)Tb,bi	(38)
= h((Kk)TAKk)-1(Kk)Tb, (Kk)Tbi >0.	()
Note that (Kk)Tb is nonzero if b is nonzero, as kbk2 is its first entry.
To translate the general analysis of the CG iteration to our specific case, using any number of CG
iterations We find that an approximate solution 说 of
Mkvk = -Vθι J (θk; X,y)	(39)
leads to
hvιk, -Vθι J(θk; X,y)i > 0,
i.e., to vk being a descent direction.	□
B Proximal operator for linear transfer functions
In order to update the parameters θl of the linear transfer function, we have to solve the problem
(11),
θk+1 = argmin 1 ∣∣φ(θ,ak) - zk+1/2||2 + ɪ∣∣θ - θk||2.	(40)
θ 2	2τθ
Since we assume that φ is linear in θ for a fixed ak, there exists a matrix Ak such that
vec(θk+1) = argmin 11|AkveC(θ) - VeC(Zk+1∕2)∣∣2 + ɪ∣∣vec(θ) - vec(θk)||2,	(41)
θ 2	2τθ
and the optimality condition yields
vec(θk+1) = (I+τθ(Ak)TAk)-1(vec(θk) + (Ak)T vec(zk+1∕2)).	(42)
13
Published as a conference paper at ICLR 2018
In the main paper We sometimes use the more abstract but also more concise notion of Vφ(∙, ak),
which represents the linear operator
Vφ(∙,ak)(Y )= VecT((Ak )T Vec(Y)).	(43)
To also make the above more specific, consider the example of φ(θ, ak) = θak. In this case the
Variable θ may remain in a matrix form and the solution of the proximal mapping becomes
θk+1 = (zk+1/2 (ak)> + ɪθk) (ak(ak)> + ɪI)	.	(44)
Since ak ∈ Rn×N for some layer size n and batch size N, the size of the linear system is independent
of the batch size.
14