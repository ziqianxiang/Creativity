Under review as a conference paper at ICLR 2018
Cheap DNN Pruning
with Performance Guarantees. /
Conference Submissions
Anonymous authors
Paper under double-blind review
Ab stract
Recent DNN pruning algorithms have succeeded in reducing the number of pa-
rameters in fully connected layers, often with little or no drop in classification
accuracy. However, most of the existing pruning schemes either have to be ap-
plied during training or require a costly retraining procedure after pruning to re-
gain classification accuracy. In this paper we propose a cheap pruning algorithm
based on difference of convex functions (DC) optimisation. We also provide theo-
retical analysis for the growth in the Generalization Error (GE) of the new pruned
network. Our method can be used with any convex regulariser and allows for a
controlled degradation in classification accuracy, while being orders of magnitude
faster than competing approaches. Experiments on common feedforward neu-
ral networks show that for sparsity levels above 90% our method achieves 10%
higher classification accuracy compared to Hard Thresholding.
1	Introduction
Recently, deep neural networks have achieved state-of-the art results in a number of machine learn-
ing tasks LeCun et al. (2015). Training such networks is computationally intensive and often requires
dedicated and expensive hardware. Furthermore, the resulting networks often require a considerable
amount of memory to be stored. Using a Pascal Titan X GPU the popular AlexNet and VGG-16
models require 13 hours and 7 days, respectively, to train, while requiring 200MB and 600MB, re-
spectively, to store. The large memory requirements limit the use of DNNs in embedded systems
and portable devices such as smartphones, which are now ubiquitous.
A number of approaches have been proposed to reduce the DNN size during training time, often with
little or no degradation to classification performance. Approaches include introducing bayesian,
sparsity-inducing priors Louizos et al. (2017) Blundell et al. (2015) Molchanov et al. (2017) and
binarization Hou et al. (2016) Courbariaux et al. (2016).Other methods include the hashing trick
used in Chen et al. (2015), tensorisation Novikov et al. (2015) and efficient matrix factorisations
Yang et al. (2015).
However, trained DNN models are used by researchers and developers that do not have dedicated
hardware to train them, often as general feature extractors for transfer learning. In such settings
it is important to introduce a cheap compression method, i.e., one that can be implemented as a
postprocessing step with little or no retraining. Some first work in this direction has been Kim
et al. (2015) Han et al. (2015a) Han et al. (2015b) although these still require a lengthy retraining
procedure. Closer to our approach recently in Aghasi et al. (2016) the authors propose a convexified
layerwise pruning algorithm termed Net-Trim. Building upon Net-Trim, the authors in Dong et al.
(2017) propose LOBS, an algorithm for layerwise pruning by loss function approximation.
Pruning a neural network layer introduces a pertubation to the latent signal representations gen-
erated by that layer. As the pertubated signal passes through layers of non-linear projections, the
pertubation could become arbitrary large. In Aghasi et al. (2016) and Dong et al. (2017) the authors
conduct a theoretical analysis using the Lipschitz properties of DNNs showing the stability of the
latent representations, over the training set, after pruning. The methods employed have connections
to recent work Sokolic et al. (2017) Bartlett et al. (2017) Neyshabur et al. (2017) that have used the
1
Under review as a conference paper at ICLR 2018
Lipschitz properties to analyze the Generalization Error (GE) of DNNs, a more useful performance
measure.
1.1	Contributions
In this work we introduce a cheap pruning algorithm for dense layers of DNNs. We also conduct a
theoretical analysis of how pruning affects the Generalization Error of the trained classifier.
•	We show that the sparsity-inducing objective proposed in Aghasi et al. (2016) can be cast
as a difference of convex functions problem, that has an efficient solution. For a fully
connected layer with input dimension d1 , output dimension d2 and N training samples,
Net-Trim and LOBS scale like O(Nd13) and O((N + d2)d12), respectively. Our iterative al-
gorithm scales like O(K (N + NN√ )log( ɪ )d1d2), where E is the precision of the solution,
k is related to the Lipschitz and strong convexity constants, d2	d1 and K is the outer
iteration number. Emprirically, our algorithm is orders of magnitude faster than competing
approaches. We also extend our formulation to allow retraining a layer with any convex
regulariser.
•	We build upon the work of Sokolic et al. (2017) to bound the GE of a DNN after pruning.
Our theoretical analysis holds for any bounded pertubation to one or multiple hidden DNN
layers and provides a principled way of pruning while managing the GE.
Experiments on common feedforward architectures show that our method is orders of magnitude
faster than competing pruning methods, while allowing for a controlled degradation in GE.
1.2	Notation and Definitions
We use the following notation in the sequel:matrices ,column vectors, scalars and sets are denoted
by boldface upper-case letters (X), boldface lower-case letters (x), italic letters (x) and calligraphic
upper-case letters (X), respectively. The covering number of X with d-metric balls of radius ρ
is denoted by N (X ; d, ρ). A CM -regular k-dimensional manifold, where CM is a constant that
captures "intrinsic" properties, is one that has a covering number N(X; d,ρ) = (CM)k.
2	Our formulation
2.1	DC decomposition
We consider a classification problem, where we observe a vector x ∈ X ⊆ RN that has a corre-
sponding class label y ∈ Y. The set X is called the input space, Y = {1, 2, ..., NY} is called the
label space and NY denotes the number of classes. The samples space is denoted by S = X × Y
and an element ofS is denoted by s = (x, y). We assume that samples from S are drawn according
to a probability distribution P defined on S . A training set of m samples drawn from P is denoted
by Sm = {si}im=1 ={(xi,yi)}im=1.
We start from the Net-Trim formulation and show that it can be cast as a difference of convex
functions problem. For each training signal x ∈ RN we assume also that we have access to the
inputs a ∈ Rd1 and the outputs b ∈ Rd2 of the fully connected layer, with a rectifier non-linearity
ρ(x) = max(0, x). The optimisation problem that we want to solve is then
mUnm X ||P(UTaj) - bj||2+xω(U),	⑴
sj ∈Sm
where λ is the sparsity parameter. The term ∣∣ρ(UTaj∙) 一 bj ||2 ensures that the nonlinear projection
remains the same for training signals. The term λΩ(U) is the convex regulariser which imposes the
desired structure on the weight matrix U.
2
Under review as a conference paper at ICLR 2018
The objective in Equation 1 is non-convex. We show that the optimisation of this objective can be
cast as a difference of convex functions (DC) problem. We assume just one training sample x ∈ RN,
for simplicity, with latent representations a ∈ Rd and b ∈ Rz
∣∣ρ(UTa)- b||2 + λΩ(U)
=X[ρ(uiTa) - bi]2 + λΩ(U)
i
=X[ρ2(uiTa) - 2ρ(uiTa)bi + bi2] + λΩ(U)
i
=X[ρ2(uiT a) + bi2] + λΩ(U) + X[-2biρ(uiT a)]
ii
=X[ρ2(uiTa) + bi2] + λΩ(U) + X [-2biρ(uiTa)]+ X [-2biP(UiTa)].
i	ii
bi<0	bi≥0
(2)
Notice that after the split the first term (bi < 0) is convex while the second (bi ≥ 0) is concave. We
note that bi ≥ 0 by definition of the ReLu and set
g(U; x) =	[ρ2 (uiTa) + bi2],	(3)
i
h(U; x) = X [2biρ(uiTa)].	(4)
i
bi>0
Then by summing over all the samples we get
f (U) = E g(U； Xj) + λΩ(U) - E h(U; Xj)
=g(U) + λΩ(U)- h(U),
which is difference of convex functions. The rectifier nonlinearity is non-smooth, but we can al-
leviate that by assuming a smooth approximation. A common choice for this task is ρ(x) =
1 log(1 + exp(βχ)), with β a positive constant.
2.2	Optimisation
It is well known that DC programs have efficient optimisation algorithms. We propose to use the
DCA algorithm Tao & An (1997). DCA is an iterative algorithm that consists in solving, at each
iteration, the convex optimisation problem obtained by linearizing h(∙) (the non-convex part of f =
g - h) around the current solution. Although DCA is only guaranteed to reach local minima the
authors of Tao & An (1997) state that DCA often converges to the global minimum, and has been
used succefully to optimise a fully connected DNN layer Fawzi et al. (2015). At iteration k of DCA,
the linearized optimisation problem is given by
argmin{g(U) + λΩ(U) - Tr(UTVh(Uk))},	(6)
U
where Uk is the solution estimate at iteration k. The detailed procedure is then given in algorithms
1 and 2. We assume that the regulariser is convex but possibly non-smooth in which case the opti-
misation can be performed using proximal methods.
3
Under review as a conference paper at ICLR 2018
Algorithm 1 FeTa (Fast and Efficient Trimming Algorithm)
1:	Choose initial point: U0
2:	for k = 1,...,K do
3:	Compute C J Ph(Uk).
4:	Solve with Algorithm 2 the convex optimisation problem:
Uk+1 J argmin{g(U) + λΩ(U) — Tr(UTC)}	(7)
U
5:	end for
6:	If Uk+1 ≈ Uk return Uk+1.
Algorithm 2a Prox-SGD
1:	Initialization: U J Uk ,ρ,t0
2:	for t = 1,...,T do
3:	Choose (A, B) randomly chosen minibatch.
4:	Pt J min(ρ,ρ牛)
5:	U = proxies。- ρt[PgA,B(U)-VTr(UTC)])
6:	end for
7:	Return Uk+1 J U
Algorithm 2b Acc-ProX-SVRG
1:	Initialization: Xo J Uk ,β,η
2:	for s = 1,...,S do
3:	u = Vg(X S)
4:	χι = yι = X s
5:	for t = 1,2,...,T do
6:	Choose (A, B) randomly chosen minibatch.
7:	Ut = VgA,B (yt) — VgA,B(Xs) + U
8:	Xt+1 = proxηh(yt - ηut)
9:	yt+1 = Xt+1 + β(Xt+1 - Xt)
10:	end for
11:	X s+1 = XT +1
12:	end for
13:	Return Uk+1 J Xs+ι
In order to solve the linearized problem we first propose to use Proximal Stochastic Gradient Descent
(Prox-SG), which we detail in algorithm 2a. At each iteration a minibatch A and B is drawn. The
gradient for the smooth part is calculated and the algorithm takes a step in that direction with step
size ρt. At each iteration P is updated as Pt J min(ρ, Pt0) where to is a hyperparameter. Then the
proximal operator for the non-smooth regulariser λΩ(∙) is applied to the result. We find that for the
outer iterations K the values 5 to 15 are usually sufficient, while for the inner iterations T = 150 is
usually sufficient.
Although Prox-SG is very efficient, it sometimes doesn’t converge to a good solution. We therefore
propose to use Accelerated Proximal SVRG (Acc-Prox-SVRG), which was presented in Nitanda
(2014). We detail this method in Algorithm 2b. For most experiments we see a significant improve-
ment over Prox-SG. The hyperparameters for Acc-Prox-SVRG are the acceleration parameter β and
the gradient step η. We have found that in our experiments, using β = 0.95 andη ∈ {0.001, 0.0001}
gives the best results.
We name our algorithm FeTa, Fast and Efficient Trimming Algorithm.
4
Under review as a conference paper at ICLR 2018
3	Generalization Error
3.1	Generalization Error of Pruned Layer
Having optimized our pruned layer for the training set we want to see if it is stable for the test
set. We denote f 1(∙, W 1) the original representation and f 2(∙, W2) the pruned representation. We
assume that after training ∀si ∈ Sm ||f1(ai, W1) - f2(ai, W2)||22 ≤ C1. Second, we assume that
∀s ∈ S ∃si ∈ Sm ⇒ ||a - ai ||22 ≤ . Third, the linear operators in W 1 , W2 are frames with upper
frame bounds B1 , B2 respectively.
Theorem 3.1. For any testing point s ∈ S, the distance between the original represen-
tation f1 (a, W1) and the pruned representation f2 (a, W2) is bounded by ||f 1 (a, W1) -
f2(a,W2)||22 ≤ C2 where C2 = C1 + (B1 +B2).
the detailed proof can be found in Appendix A.
3.2	Generalization Error of Classifier
In this section we use tools from the robustness framework Xu & Mannor (2012) to bound the
generalization error of the new architecture induced by our pruning. We consider DNN classifiers
defined as
g(x) = max (f (x))i,	(8)
i∈[Ny]
where (f (x))i is the i-th element of Ny dimensional output ofaDNN f : RN → RNy. We assume
that f (x) is composed of L layers
f(x) = fL(fL-1(...f1(x, W1),...WL-1), WL),	(9)
where fι(∙, Wι) represents the l-th layer with parameters Wι, l = 1,..., L. The output of the
l-th layer is denoted zl, i.e. zl = fl(zl-1, Wl). The input layer corresponds to z0 = x and the
output of the last layer is denoted by z = f (x). We then need the following two definitions of the
classification margin and the score that we take from Sokolic et al. (2017). These will be useful later
for measuring the generalization error.
Definition 3.1. (Score). For a classifier g(x) a training sample si = (xi, yi) has a score
o(si) = o(xi, g(xi)) = mjn 6也@讣-δj)Tf(xQ,	(10)
j6=g(xi)
where δi ∈ RNy is the Kronecker delta vector with (δi)i = 1, and g(xi) is the output class for si
from classifier g(x) which can also be g(xi) 6= yi.
Definition 3.2. (Training Sample Margin). For a classifier g(x) a training sample si = (xi, yi) has
a classification margin γ(si) measured by the l2 norm if
g(x) = g(xi); ∀x : ||x - xi||2 < γ(si).	(11)
The classification margin of a training sample si is the radius of the largest metric ball (induced
by the l2 norm) in X centered at xi that is contained in the decision region associated with the
classification label g(xi). Note that it is possible for a classifier to misclassify a training point
g(xi) 6= yi. We then restate a useful result from Sokolic et al. (2017).
Corollary 3.1.1. Assume that X is a (subset of) CM -regular k-dimensional manifold, where
N(X; d; P) ≤ (CM)k. Assume also that the DNN classifier g(x) achieves a lower bound to the
classification score o(s) < o(si), Nsi ∈ Sm and take l(g(xi), yi) to be the 0 一 1 loss. Thenforany
δ > 0, with probability at least 1 - δ,
GE(g) ≤ A ∙(γ)-2 + B,	(12)
5
Under review as a conference paper at ICLR 2018
where A = J。0 ⑵)N啖+9ML and B = J2⅛1^ Can be considered CCmStantSrelated to the
data manifold and the training Sample Size, and γ
。⑸
Qi l∣wil∣2'
We are now ready to state our main result.
Theorem 3.2. ASSume that X iS a (SubSet of) CM -regular k-dimenSional manifold, where
N(X; d; P) ≤ (CM)k. Assume also that the DNN classifier gι(x) achieves a lower bound to the
classification score o(s) < o(si), NSi ∈ Sm and take l(g(xi),yi) to be the 0 一 1 loss. Further-
more assume that we prune classifier g1 (x) on layer i? using Algorithm 1, to obtain a new classifier
g2(x). Thenfor any δ > 0, with probability at least 1 一 δ, when (Y — √C2 ∙ 口干? WWiJ2) > 0,
GE(g2) ≤ A ∙ (Y — p∕C2 ∙ QijW ∙j2 厂 2 + B,	(13)
where A
心=ICMk and B
m
22⅛1^ can be considered constants related to the
data manifold and the training sample size, and Y
。⑸
Qi l∣wil∣2.
The detailed proof can be found in Appendix B. The bound depends on two constants related to
intrinsic properties of the data manifold, the regularity constant CM and the intrinsic data dimen-
sionality k. In particular the bound depends exponentially on the intrinsic data dimensionality k .
Thus more complex datasets are expected to lead to less robust DNNs. This has been recently ob-
served empirically in Bartlett et al. (2017). The bound also depends on the spectral norm of the
hidden layers || Wi ||2. Small spectral norms lead to a larger base in (∙)-2 and thus to tigher bounds.
With respect to pruning our result is quite pessimistic as the pruning error √C2 is multiplied by
the factor Qi>i ||Wi||2. Thus in our analysis the GE grows exponentially with respect to the
remaining layer depth of the pertubated layer. This is in line with previous work Raghu et al. (2016)
Han et al. (2015b) that demonstrates that layers closer to the input are much less robust compared to
layers close to the output. Our algorithm is applied to the fully connected layers of a DNN, which
are much closer to the output compared to convolutional layers.
We can extend the above bound to include pruning of multiple layers.
Theorem 3.3. Assume that X is a (subset of) CM -regular k-dimensional manifold, where
N(X; d; P) ≤ (CM)k. Assume also that the DNN classifier gι(x) achieves a lower bound to the
classification score o(s) < o(si), ∀Si ∈ Sm and take l(g(Xi), yi) to be the 0 — 1 loss. Furthermore
assume that we prune classifier g1(x) on all layers using Algorithm 1, to obtain a new classifier
g2(x). Thenfor any δ > 0, with probability at least 1 — δ, when (γ —
PLq √C2QL=i++l∣w川2
Qi l∣wi∣∣2
) > 0,
Pi=0 √Ci2 ΠL=i+1 ||Wj ||2 k
GE(g2) ≤ A ∙ (Y----------πr Ha +----------) 2 + B,	(14)
i ||Wi||2
where A
户三三三 and B
m
22⅛1^ can be Considered constants related to the
data manifold and the training sample size, and Y
。⑸
Qi Iiwil∣2.
The detailed proof can be found in Appendix C. The bound predicts that when pruning multiple
layers the GE will be much greater than the sum of the GEs for each individual pruning. We note
also the generality of our result; even though we have assumed a specific form of pruning, the GE
bound holds for any type of bounded pertubation to a hidden layer.
4 Experiments
We make a number of experiments to compare FeTa with LOBS and NetTrim-ADMM. We test two
versions of the algorithm, FeTa1 optimised with Prox-SGD and FeTa2 optimized with Acc-Prox-
SVRG. All experiments were run on a MacBook Pro with CPU 2.8GHz Intel Core i7 and RAM
16GB 1600 MHz DDR3.
6
Under review as a conference paper at ICLR 2018
4.1	Time Complexity
First we compare the execution time of FeTa with that of LOBS and NetTrim-ADMM. We set
Ω(U) = ||U||1 and aim for 95% sparsity. We set d1 to be the input dimensions, d2 to be the
output dimensions and N to be the number of training samples. Assuming that each g(U; xj) is
L-LiPSChitZ smooth and g(U) is μ-strongly convex, if we optimise for an e optimal solution and set
k = L∕μ, FeTa1 scales like O(K表d1 d2) and FeTa2 scales like O(K(N + NNkzk)log(ɪ)d1 d2).
We obtain this by multiplying the number of outer iterations K with the number of gradient evalua-
tions required to reach an good solution in inner Algorithm 2a and inner Algorithm 2b, and finally
multiplying with the gradient evaluation cost. Conversely LOBS scales like O((N + d2)d12) while
NetTrim-ADMM scales like O(Nd13) due to the required Cholesky factorisation. This gives a com-
putational advantage to our algorithm in settings where the input dimension is large. We validate this
by constructing a synthetic experiment with d2 = 10 , d1 = {2000 : 100 : 3000} and N = 1000.
The samples a ∈ Rd1 and b ∈ Rd2 are generated with i.i.d Gaussian entries. We plot in Figure 1
the results, which are in line with the theoretical predictions.
Figure 1: Time Complexity
4.2	Classification Accuracy
4.2.1	Sparse Regularisation
In this section we perform experiments on the proposed compression scheme with feedforward
neural networks. We compare the original full-precision network (without compression) with the
following compressed networks: (i) FeTa1 with Ω(U) = ||U||1 (ii) FeTa2 with Ω(U) = ||U||1
(iii) Net-Trim (vi) LOBS (v) Hard Thresholding. We refer to the respective papers for Net-Trim
and LOBS. Hard Thresholding is defined as F(x) = x I (|x| > t), where I is the elementwise
indicator function, is the Hadamard product and t is a positive constant.
Experiments were performed on two commonly used datasets:
1.	MNIST : This contains 28 × 28 gray images from ten digit classes. We use 55000 images
for training, another 5000 for validation, and the remaining 10000 for testing. We use the
LeNet-5 model:
(1 × 6C5) -MP2- (6 × 16C5) -MP2-120FC-84FC-10SM,	(15)
where C5 is a 5 × 5 ReLU convolution layer, MP2 is a 2 × 2 max-pooling layer, FC is a
fully connected layer and SM is a linear softmax layer.
2.	CIFAR-10:This contains 60000 32 × 32 color images for ten object classes. We use 50000
images for training and the remaining 10000 for testing. The training data is augmented by
random cropping to 24 × 24 pixels, random flips from left to right, contrast and brightness
distortions to 200000 images. We use a smaller variant of the AlexNet model:
(3 × 64C5) -MP2- (64 × 64C5) - MP2 - 384FC - 192FC - 10SM.	(16)
7
Under review as a conference paper at ICLR 2018
We first prune only the first fully connected layer (the one furthest from the output) for clarity.
Figure 2 shows the classification accuracy vs compression ratio for FeTa1, FeTa2, NetTrim, LOBS
and Hard Thresholding. We see that Hard Thresholding works adequately up to 85% sparsity. From
this level of sparsity and above the performance of Hard Thresholding degrades rapidly and FeTa
has 10% higher accuracy on average. We also see a notable improvement of 3% - 5% for FeTa2
over FeTa1 . Finally NetTrim and LOBS also give good results for a wide range of sparsity values,
with LOBS giving the best results overall.
(a) LeNet-5
(b) CifarNet
Figure 2: Accuracy vs Sparsity
Table 1: Test accuracy rates (%) prune only first fully connected layer.
Method	Networks	Original Accuracy	CR	Pruned Accuracy	Computation Time
Net-Trim	LeNet-5	99.2%	95%	95%	455s
LOBS	LeNet-5	99.2%	95%	97%	90s
Thresholding	LeNet-5	99.2%	95%	83%	-
FeTa1	LeNet-5	99.2%	95%	91%	32s
FeTa2	LeNet-5	99.2%	95%	95%	18s
Net-Trim	CifarNet	86%	-	-	-
LOBS	CifarNet	86%	90%	83.4%	2h 47min
Thresholding	CifarNet	86%	90%	73%	-
FeTa1	CifarNet	86%	90%	77%	9min
FeTa2	CifarNet	86%	90%	80%	20min
Table 2: Test accuracy rates (%) prune all fully connected layers.
Method	Networks	Original Accuracy	CR	Pruned Accuracy	Computation Time
Net-Trim	LeNet-5	99.2%	90%	95%	500s
LOBS	LeNet-5	99.2%	90%	97%	97s
Thresholding	LeNet-5	99.2%	90%	64%	-
FeTa1	LeNet-5	99.2%	90%	89%	41s
FeTa2	LeNet-5	99.2%	90%	95%	38s
Net-Trim	CifarNet	86%	-	-	-
LOBS	CifarNet	86%	90%	83.4%	3h 15min
Thresholding	CifarNet	86%	90%	64%	-
FeTa1	CifarNet	86%	90%	68%	14min
FeTa2	CifarNet	86%	90%	71%	25min
For the task of pruning the first fully connected layer we also show detailed comparison results for
all methods in Table 1. For the LeNet-5 model, FeTa achieves the same accuracy as Net-Trim while
8
Under review as a conference paper at ICLR 2018
being significantly faster. This is expected as the two algorithms optimise a similar objective, while
FeTa exploits the structure of the objective to achieve lower complexity in optimisation. Furthermore
FeTa achieves marginally lower classification accuracy compared to LOBS, and is significantly bet-
ter than Thresholding. Overall FeTa enjoys competitive accuracy results while being able to prune
the dense layer 5× to 25× faster compared to other approaches.
For the CifarNet model Net-Trim is not feasible on the machine used for the experiments as it
requires over 16GB of RAM. Compared to LOBS FeTa again achieves marginally lower accuracy
but is 8× to 14× faster. Note that as mentioned in Dong et al. (2017) and Wolfe et al. (2017)
retraining can recover classification accuracy that was lost during pruning. Starting from a good
pruning which doesn’t allow for much degradation significantly reduces retraining time.
Next we prune both the fully connected layers in the two architectures to the same sparsity level and
plot the results in Table 2. We lower the achieved sparsity for all methods to 90%. The accuracy re-
sults are mostly the same as when pruning a single layer, with FeTa achieving the same or marginally
worse results while enjoying significant computation speedups for MNIST. At the same time there
is a larger degradation for the CIFAR experiment. One significant difference is that Thresholding
achieves a notably bad result of 64% accuracy, which makes the method essentially inapplicable for
multilayer pruning.
4.2.2 Low Rank Regularisation
As a proof of concept for the generality of our approach we apply our method while imposing low-
rank regularisation on the learned matrix U. For low rank k we compare two methods (i) FeTa1 with
Ω(U) = ||U||? and optimised with ACC-ProX-SVRG and (ii) Hard Thresholding of singular values
using the truncated SVD defined as U = N ΣV ?, Σ = diag({σi }1≤i≤k). We plot the results in
Figure 3.
Figure 3: ACCuraCy vs CR
In the above given U ∈ Rd1 ×d2 the CommPreSSion Ratio (CR) is defined as CR = (k * d1 + k +
k * d2)∕(d1 * d2). The results are in line with the l1 regularisation, with significant degredation in
ClassifiCation aCCuraCy for Hard Thresholding above 85% CR.
4.3 Generalization Error
ACCording to our theoretiCal analysis the GE drops eXponentially as the pruning moves away from
the output layer. To Corroborate this we train a LeNet-5 to high aCCuraCy, then we piCk a single
layer and gradually inCrease its sparsity using Hard Thresholding. We find that the layers Closer to
the input are eXponentially less robust to pruning, in line with our theoretiCal analysis. We plot the
results in Figure 4.a. For some layers there is a sudden inCrease in aCCuraCy around 90% sparsity
whiCh Could be due to the small size of the DNN. We point out that in empiriCal results Raghu et al.
(2016) Han et al. (2015b) for muCh larger networks the degradation is entirely smooth.
9
Under review as a conference paper at ICLR 2018
Next we test our multilayer pruning bound. We prune to the same sparsity levels all layers in the
sets i ≥ 0 , i ≥ 1 , i ≥ 2 , i ≥ 3. We plot the results in Figure 4.b. It is evident that the accuracy loss
for layer groups is not simply the addition of the accuracy losses of the individual layers, but shows
an exponential drop in accordance with our theoretical result.
Figure 4: Layer Robustness
We now aim to see how well our bound captures this exponential behaviour. We take two net-
works ga pruned at layer 3 and gb pruned at layers 2 and 3 and make a number of simplify-
ing assumptions.
PL=0 √C2 QL=i+1
∏i || W i ||2
First We assume that in Theorem 3.3 B = 0 SUCh that GE(g?) ≤ A ∙ (Y -
||Wj||2)-2. This is logical as B includes only log terms. Assuming that the
bounds are tight we now aim to CalCulate
GE (ga) = (Y-P=0 (PCa / Qj=0 l∣Wj∣∣2)!--
ge(gb)	γ - ∑L=0(√C2/ Qj=0 IIWj l∣2 J
We know that the value of this ratio for 90% sparsity is GE(ga)/GE(gb) ≈ 0.1/0.4 = 1/4 and we
have managed to avoid the cumbersome A parameter. Next we make the assumption that k ≈ 40,
this is common for the MNIST dataset and results from a simple dimensionality analysis using
PCA. We also deviate slightly from our theory by using the average layerwise errors ES〜S[∖fCa2],
ES〜S[ VCa], as well as the average scores ES〜S[oa(x, ga(x))], ES〜S[ob(x, gb(x))]. We calculate
GE(ga)
GE(gb)
which is very close to the empirical value.
1
≈ 56,
(18)
5 Conclusion
In this paper we have presented an efficient pruning algorithm for fully connected layers of DNNs,
based on difference of convex functions optimisation. Our algorithm is orders of magnitude faster
than competing approaches while allowing for a controlled degradation in the Generalization Error.
We provided a theoretical analysis of the degradation in GE resulting from our pruning algorithm.
This analysis validates the previously observed phenomenon that network layers closer to the input
are exponentially less robust to pruning compared to layers close to the output. Our theoretical
analysis is of value by itself as it holds for any kind of bounded pertubation to one or multiple
hidden DNN layers. Experiments on common feedforward architectures validate our results.
References
Alireza Aghasi, Nam Nguyen, and Justin Romberg. Net-trim: A layer-wise convex pruning of deep
neural networks. arXiv preprint arXiv:1611.05162, 2016.
10
Under review as a conference paper at ICLR 2018
Peter Bartlett, Dylan J Foster, and Matus Telgarsky. Spectrally-normalized margin bounds for neural
networks. arXiv preprint arXiv:1706.08498, 2017.
Charles Blundell, Julien Cornebise, Koray Kavukcuoglu, and Daan Wierstra. Weight uncertainty in
neural networks. arXiv preprint arXiv:1505.05424, 2015.
Joan Bruna, Arthur Szlam, and Yann LeCun. Signal recovery from pooling representations. arXiv
preprint arXiv:1311.4025, 2013.
Wenlin Chen, James Wilson, Stephen Tyree, Kilian Weinberger, and Yixin Chen. Compressing
neural networks with the hashing trick. In International Conference on Machine Learning, pp.
2285-2294, 2015.
Matthieu Courbariaux, Itay Hubara, Daniel Soudry, Ran El-Yaniv, and Yoshua Bengio. Binarized
neural networks: Training deep neural networks with weights and activations constrained to+ 1
or-1. arXiv preprint arXiv:1602.02830, 2016.
Xin Dong, Shangyu Chen, and Sinno Jialin Pan. Learning to prune deep neural networks via layer-
wise optimal brain surgeon. arXiv preprint arXiv:1705.07565, 2017.
Alhussein Fawzi, Mike Davies, and Pascal Frossard. Dictionary learning for fast classification based
on soft-thresholding. International Journal of Computer Vision, 114(2-3):306-321, 2015.
Song Han, Huizi Mao, and William J Dally. Deep compression: Compressing deep neural networks
with pruning, trained quantization and huffman coding. arXiv preprint arXiv:1510.00149, 2015a.
Song Han, Jeff Pool, John Tran, and William Dally. Learning both weights and connections for
efficient neural network. In Advances in Neural Information Processing Systems, pp. 1135-1143,
2015b.
Lu Hou, Quanming Yao, and James T Kwok. Loss-aware binarization of deep networks. arXiv
preprint arXiv:1611.01600, 2016.
Yong-Deok Kim, Eunhyeok Park, Sungjoo Yoo, Taelim Choi, Lu Yang, and Dongjun Shin. Com-
pression of deep convolutional neural networks for fast and low power mobile applications. arXiv
preprint arXiv:1511.06530, 2015.
Yann LeCun, Yoshua Bengio, and Geoffrey Hinton. Deep learning. Nature, 521(7553):436-444,
2015.
Christos Louizos, Karen Ullrich, and Max Welling. Bayesian compression for deep learning. arXiv
preprint arXiv:1705.08665, 2017.
Dmitry Molchanov, Arsenii Ashukha, and Dmitry Vetrov. Variational dropout sparsifies deep neural
networks. arXiv preprint arXiv:1701.05369, 2017.
Behnam Neyshabur, Srinadh Bhojanapalli, David McAllester, and Nathan Srebro. A pac-
bayesian approach to spectrally-normalized margin bounds for neural networks. arXiv preprint
arXiv:1707.09564, 2017.
Atsushi Nitanda. Stochastic proximal gradient descent with acceleration techniques. In Advances in
Neural Information Processing Systems, pp. 1574-1582, 2014.
Alexander Novikov, Dmitrii Podoprikhin, Anton Osokin, and Dmitry P Vetrov. Tensorizing neural
networks. In Advances in Neural Information Processing Systems, pp. 442-450, 2015.
Maithra Raghu, Ben Poole, Jon Kleinberg, Surya Ganguli, and Jascha Sohl-Dickstein. On the ex-
pressive power of deep neural networks. arXiv preprint arXiv:1606.05336, 2016.
Jure Sokolic, Raja Giryes, Guillermo Sapiro, and Miguel RD Rodrigues. Robust large margin deep
neural networks. IEEE Transactions on Signal Processing, 2017.
Pham Dinh Tao and Le Thi Hoai An. Convex analysis approach to dc programming: Theory,
algorithms and applications. Acta Mathematica Vietnamica, 22(1):289-355, 1997.
11
Under review as a conference paper at ICLR 2018
Nikolas Wolfe, Aditya Sharma, Lukas Drude, and Bhiksha Raj. The incredible shrinking neural
network: New perspectives on learning representations through the lens of pruning. arXiv preprint
arXiv:1701.04465, 2017.
Huan XU and Shie Mannor. Robustness and generalization. Machine learning, 86(3):391—423,
2012.
Zichao Yang, Marcin Moczulski, Misha Denil, Nando de Freitas, Alex Smola, Le Song, and Ziyu
Wang. Deep fried convnets. In Proceedings of the IEEE International Conference on Computer
Vision ,pp.1476-1483, 2015.
12
Under review as a conference paper at ICLR 2018
6	Appendix
A.	Proof of theorem 3.1.
We denote by f 1(∙, W 1) the original representation and by f2(∙, W2) the pruned representation.
We assume that, after training,∀s ∈ Sm ||f1(a,W1) -f2(a,W2)||22 ≤ C1 . Second, we assume
that ∀s ∈ S ∃si ∈ Sm ⇒ ||a - ai||22 ≤ . Third the linear operators in W1 , W2 are frames with
upper frame bounds B1 , B2 respectively. The following two lemmas will be useful:
Lemma 6.1. The operator f 1 (∙, W1) is Lipschitz continuous with upper Lipschitz constant B1 .
Proof. See Bruna et al. (2013) for details, the derivation is not entirely trivial due to the non-
smoothness of the rectifier non-linearity.	□
Lemma 6.2. The operator f2 (∙, W2) is LiPschitz continuous with upper Lipschitz Constant B2.
Proof. We see that:去ρ(χ)=言1 log(1 + exp(βχ)) = 1黑鼠焉 ≤ 1. Therefore the smooth
approximation to the rectifier non-linarity is Lipschitz smooth with Lipschitz constant k = 1. Then
Ilf2(x, W2) - f2(y, W2)I∣2 ≤ k||W2X - W2y∣l2 ≤ I∣w2(χ - y)ll2 ≤ B2l∣χ -y∣l2.	□
We drop the Wi from the layer notation for clarity. Using the triangle inequality
||f1(a) - f2(a)||22 = ||f1 (a) +f1(ai) - f1(ai) - f2(a)||22
≤ ||f1 (a) - f1(ai)||22 + ||f1(ai) - f2(a)||22
= ||f1 (a) - f1(ai)||22 + ||f1(ai) + f2(ai) - f2(ai) - f2(a)||22
≤ ||f1(a) -f1(ai)||22+||f1(ai)-f2(ai)||22+||f2(ai)-f2(a)||22 (19)
≤ B1 ||ai - a||22 + C + B2 ||ai - a||22
= C1 + (B1 + B2)||ai - a||22
≤ C1 + (B1 + B2),
where we used Lemma 6.1 and Lemma 6.2 in line 5.
B.	Proof of theorem 3.2.
We will proceed as follows. We first introduce some prior results which hold for the general class
of robust classifiers. We will then give specific prior generalization error results for the case of
classifiers operating on datapoints from Cm-regular manifolds. Afterwards we will provide prior
results for the specific case of DNN clasifiers. Finally we will prove our novel generalization error
bound and provide a link with prior bounds.
We first formalize robustness for generic classifiers g(x). In the following we assume a loss function
l(g(x), y) that is positive and bounded 0 ≤ l(g(x), y) ≤ M.
Definition 6.1. An algorithm g(x) is (K, (Sm)) robust ifS can be partitioned into K disjoint sets,
denoted by {Tt}tK=1, such that ∀si ∈ Sm, ∀s ∈ S,
si, s ∈ Tt, ⇒ |l(g(xi), yi) - l(g(x), y)| ≤ (Sm).	(20)
Now let l(∙) and lemp(∙) denote the expected error and the training error, i.e,
l(g)，Es〜Si(g(χ),y); lemp(g)，— X i(q(χi),yi)	(21)
m
si ∈Sm
we can then state the following theorem from Xu & Mannor (2012):
Theorem 6.3.	IfSm consists ofm i.i.d. samples, and g(x) is (K, (Sm))-robust, then for any δ > 0,
with probability at least 1 - δ,
GE(g) = ∣l(g) - lemp(g)∣≤ e(Sm)+ M J2K12 +m2l(I/δ).	(22)
The above generic bound can be specified for the case of Cm-regular manifolds as in Sokolic et al.
(2017). We recall the definition of the sample margin γ(si) as well as the following theorem:
13
Under review as a conference paper at ICLR 2018
Theorem 6.4.	If there exists γ such that
γ(si) > γ > 0 ∀si ∈ Sm ,	(23)
then the Classfierg(X) is (Nγ ∙ N(X; d, γ∕2), 0)-robust.
By direct substitution of the above result and the definiton of a Cm-regular manifold into Theorem
6.3 we get:
Corollary 6.4.1. Assume that X is a (subset of) CM regular k-dimensional manifold, where
N(X; d,ρ) ≤ (CM)k. Assume also that classifier g(x) achieves a classification margin Y and
take l(g(x), y) to be the 0 - 1 loss. Then for any δ > 0, with probability at least 1 - δ,
GE(g) ≤ ʌ log^(2) ∙ NY ∙fe2k+1 ^ (CM^k + ∖∕2o≡.	(24)
γkm	m
Note that in the above we have used the fact that l(g(x), y) ≤ 1and therefore M = 1. The above
holds for a wide range of algorithms that includes as an example SVMs. We are now ready to specify
the above bound for the case of DNNs, adapted from Sokolic et al. (2017),
Theorem 6.5.	Assume that a DNN classifier g(x), as defined in equation 8, and let X be the training
sample with the smallest score o(s) > 0. Then the classification margin is bounded as
o⑻
γ(si) ≥
Qi l∣w il∣2 = γ.
(25)
We now prove our main result. We will denote by X = arg mins.∈smmi□j=g(χi)vT(xa)jf (Xi)
the training sample with the smallest score. For this training sample we will denote j? =
arg min7-=g(χ)vj(χ)jf (X) the second best guess of the classifier g(∙). Throughout the proof, we
will use the notation Vij = √2(δi - δj).
First we assume the score oι(X, gι(X)) of the point X for the original classifier gι(X). Then, for
the second classifier g2 (x), we take a point x? that lies on the decision boundary between g2(X)
and j? such that 02(X*, g2(X)) = 0. We assume for simplicity that, after pruning, the classification
decisions do not change such that gι (X) = g2 (X). We then make the following calculations
o1(X,g1(X)) = o1(X,g1 (X)) - o2 (X*,g2 (X)) = vT1(X)j* f1(X) - vT2(X)j? f 2(x?)
=VT2(X)j*(f1 (X)- f2(x?))
≤ l∣vT2(x)j?I∣2∣lf 1(X) - f2(x?)ll2 = IIfL(X) - fL(x?)ll2
≤ Y IIWi∣∣2∣lfi?(X) - fi2?(X?)I|2
i>i?
≤ Y IIWi∣∣2{∣lfi1?(X) - fi?(x?)I∣2 + IIfi?(x?) - fi2?(x?)I∣2}	(26)
i>i?
≤ Y IIWiII2{IIfi1?(X) - fl?(x*)II2 + pC2}
i>i?
≤ YIIWiII2IIx -x?II2 + Y IIWiII2pC2
i	i>i?
≤ YIIWiII2γ2(si) + Y IIWiII2pC2,
i	i>i?
where we used Theorem 3.1 in line 5, since X? is not a training sample. From the above we can
therefore write
o1(X ,gl(X)) - √C2 Qi>i* IIW i“2
Qi IIWi“2
≤ Y2(X).
(27)
By following the derivation of the margin from the original paper Sokolic et al. (2017) and taking
into account the definition of the margin we know that
=01 (X ,gι(X))
Y = Qi IIW iII2
≤ Yl(X).
(28)
14
Under review as a conference paper at ICLR 2018
Therefore we can finally write
√C2 ∏i>i? IIWi∣∣2
Y - 一∏I∣W∣∣2	≤Y2(x).
(29)
The theorem follows from direct application of Corollary 3.1.1. Note that if Y - VCMjW | Wi||2 <
0 the derived bound becomes vacuous, as by definition 0 ≤ γ (x).
C. PROOF OF THEOREM 3.3.
We start as in theorem 3.2 by assuming the score oι(x, gι (X)) of the point x for the original classifier
g1(x). Then, for the second classifier g? (x), we take a point x? that lies on the decision boundary
between g2(X) and j? such that 02(x?,g2(X)) = 0. We assume as before that the classification
decisions do not change such that gι (x) = g2 (x). We write
0ι(x,gι(x)) =。1 (X,gι(x)) - 02(x*,g2(x))=吸(x)j*f1(x) - vT2(x)j*f2(x?)
=喙(X)j*(P(X)- f2(X?))
≤ ∣∣吸(x)j*∣∣2∣∣f1(X) - f2(x*)∣∣2 = ∣∣fL(X) - fL(x?)∣∣2
≤∣∣fL (X) - f (x?)∣∣2 + 11fL (x?) - K (x?)∣∣2
≤ ∣∣fL(X) - fL(x?)∣∣2 + √cL2
≤ ∣∣WL∣∣2∣∣fL-ι(x) - fL-1(x*)∣∣2 + √cL2
≤ ∣∣WL∣∣2{∣∣fL-1(X) - fL-ι(x*)∣∣2 + ∣∣fL-1(X?) - fL-ι(x*)∣∣2} + √Cl2
≤ ∣∣WL∣∣2{∣∣fL-1(X) - fL-1(X?)∣∣2 + √Cl-J} + √Cl2
≤ ∣∣WL∣∣2∣∣fL-1(x) - fL-1(x*)∣∣2 + ∣∣Wl∣∣2√CL-7 + √cL2
≤ ...
L	L
≤ ∏∣∣Wi∣∣2∣∣x-x*∣∣2 + X√C2 ∏ ∣∣Wj∣∣2
i	i=0	j=i+1
L	L
≤ ∏∣∣Wi∣∣2γ2(si) + X√C2 ∏ ∣∣Wj∣∣2.
i	i=0	j=i+1
(30)
We can then write
01(x,gι(X))- Pi=0 √C2 ∏L=i+ι ∣∣W j ∣∣2
∏i ∣∣W i∣∣2
≤ Y2(X).
(31)
Then as before
Pi=0 √C2 ∏L=i+ι ∣∣W j ∣∣2
∏i ∣∣W i ∣∣2
≤ Y2(X).
(32)
The theorem follows from direct application of Corollary 3.1.1.
15