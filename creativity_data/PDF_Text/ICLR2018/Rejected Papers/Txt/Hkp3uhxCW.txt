Under review as a conference paper at ICLR 2018
Revisiting Bayes by Backprop
Anonymous authors
Paper under double-blind review
Ab stract
In this work we explore a straightforward variational Bayes scheme for Recur-
rent Neural Networks. Firstly, we show that a simple adaptation of truncated
backpropagation through time can yield good quality uncertainty estimates and
superior regularisation at only a small extra computational cost during training,
also reducing the amount of parameters by 80%. Secondly, we demonstrate how
a novel kind of posterior approximation yields further improvements to the per-
formance of Bayesian RNNs. We incorporate local gradient information into the
approximate posterior to sharpen it around the current batch statistics. We show
how this technique is not exclusive to recurrent neural networks and can be applied
more widely to train Bayesian neural networks. We also empirically demonstrate
how Bayesian RNNs are superior to traditional RNNs on a language modelling
benchmark and an image captioning task, as well as showing how each of these
methods improve our model over a variety of other schemes for training them. We
also introduce a new benchmark for studying uncertainty for language models so
future methods can be easily compared.
1	Introduction
Recurrent Neural Networks (RNNs) achieve state-of-the-art performance on a wide range of se-
quence prediction tasks (Wu et al., 2016; Amodei et al., 2015; Jozefowicz et al., 2016; Zaremba
et al., 2014; Lu et al., 2016). In this work we examine how to add uncertainty and regularisation
to RNNs by means of applying Bayesian methods to training. This approach allows the network
to express uncertainty via its parameters. At the same time, by using a prior to integrate out the
parameters to average across many models during training, it gives a regularisation effect to the
network. Recent approaches either justify dropout (Srivastava et al., 2014) and weight decay as
a variational inference scheme (Gal & Ghahramani, 2016), or apply Stochastic Gradient Langevin
dynamics (Welling & Teh, 2011, SGLD) to truncated backpropagation in time directly (Gan et al.,
2016). Interestingly, recent work has not explored further directly applying a variational Bayes in-
ference scheme (Beal, 2003) for RNNs as was done in Graves (2011). We derive a straightforward
approach based upon Bayes by Backprop (Blundell et al., 2015) that we show works well on large
scale problems. Our strategy is a simple alteration to truncated backpropagation through time that
results in an estimate of the posterior distribution on the weights of the RNN. This formulation ex-
plicitly leads to a cost function with an information theoretic justification by means of a bits-back
argument (Hinton & Van Camp, 1993) where a KL divergence acts as a regulariser.
The form of the posterior in variational inference shapes the quality of the uncertainty estimates
and hence the overall performance of the model. We shall show how performance of the RNN can
be improved by means of adapting (“sharpening”) the posterior locally to a batch. This sharpening
adapts the variational posterior to a batch of data using gradients based upon the batch. This can
be viewed as a hierarchical distribution, where a local batch gradient is used to adapt a global
posterior, forming a local approximation for each batch. This gives a more flexible form to the
typical assumption of Gaussian posterior when variational inference is applied to neural networks,
which reduces variance. This technique can be applied more widely across other Bayesian models.
The contributions of our work are as follows:
•	We show how Bayes by Backprop (BBB) can be efficiently applied to RNNs.
•	We develop a novel technique which reduces the variance of BBB, and which can be widely
adopted in other maximum likelihood frameworks.
1
Under review as a conference paper at ICLR 2018
•	We improve performance on two widely studied benchmarks outperforming established
regularisation techniques such as dropout by a big margin.
•	We introduce a new benchmark for studying uncertainty of language models.
2	Bayes by Backprop
Bayes by Backprop (Graves, 2011; Blundell et al., 2015) is a variational inference (Wainwright et al.,
2008) scheme for learning the posterior distribution on the weights θ ∈ Rd ofa neural network. This
posterior distribution is typically taken to be a Gaussian with mean parameter μ ∈ Rd and standard
deviation parameter σ ∈ Rd, denoted N(θ∣μ, σ2). Note that we use a diagonal covariance matrix,
and d - the dimensionality of the parameters of the network - is typically in the order of millions.
Let logp(y∣θ, x) be the log-likelihood of the model, then the network is trained by minimising the
variational free energy:
L(θ)= Eq(θ) [log ∕∣q(θ) (A、1 ,	(1)
L	p(y∣θ,χ)p(θ)J
where p(θ) is a prior on the parameters.
Minimising the variational free energy (1) is equivalent to maximising the log-likelihood
logp(y∣θ, x) subject to a KL complexity term on the parameters of the network that acts as a regu-
lariser:
L(θ) = -Eq(θ) [logp(y∣θ, x)] + KL [q(θ) || p(θ)].	(2)
In the Gaussian case with a zero mean prior, the KL term can be seen as a form of weight decay on
the mean parameters, where the rate of weight decay is automatically tuned by the standard deviation
parameters of the prior and posterior. Please refer to the supplementary material for the algorithmic
details on Bayes by Backprop.
The uncertainty afforded by Bayes by Backprop trained networks has been used successfully for
training feedforward models for supervised learning and to aid exploration by reinforcement learning
agents (Blundell et al., 2015; Lipton et al., 2016; Houthooft et al., 2016), but as yet, it has not been
applied to recurrent neural networks.
3	Truncated Bayes by Backprop Through Time
The core of an RNN, f, is a neural network that maps the RNN state st at step t, and an input
observation xt to a new RNN state st+1, f : (st, xt) 7→ st+1. The exact equations of an LSTM core
can be found in the supplemental material Sec A.2.
An RNN can be trained on a sequence of length T by backpropagation through by unrolling T times
into a feedforward network. Explicitly, we set si = f(si-1, xi), for i = 1, . . . , T. We shall refer to
an RNN core unrolled for T steps by s1:T = FT (x1:T, s0). Note that the truncated version of the
algorithm can be seen as taking s0 as the last state of the previous batch, sT .
RNN parameters are learnt in much the same way as in a feedforward neural network. A loss
(typically after further layers) is applied to the states s1:T of the RNN, and then backpropagation
is used to update the weights of the network. Crucially, the weights at each of the unrolled steps
are shared. Thus each weight of the RNN core receives T gradient contributions when the RNN is
unrolled for T steps.
Applying BBB to RNNs is depicted in Figure 1 where the weight matrices of the RNN are drawn
from a distribution (learnt by BBB). However, this direct application raises two questions: when
to sample the parameters of the RNN, and how to weight the contribution of the KL regulariser of
(2). We shall briefly justify the adaptation of BBB to RNNs, given in Figure 1. The variational free
energy of (2) for an RNN on a sequence of length T is:
L(θ) = -Eq(θ) [logp(yi:T∣θ,xi:T)] + KL [q(θ) || p(θ)],	⑶
where p(yi：T∣θ, xi：T) is the likelihood of a sequence produced when the states of an unrolled RNN
FT are fed into an appropriate probability distribution. The parameters of the entire network are
2
Under review as a conference paper at ICLR 2018
Algorithm: Bayes by Backprop for RNNs
Sample e 〜N(0, I), e ∈ Rd, and set network
parameters to θ = μ + σe.
Sample a minibatch of truncated sequences (x, y).
Do forward and backward propagation as normal,
and let g be the gradient w.r.t θ.
Let gKL, gKL, gKL be the gradients of
logN(θ∣μ, σ2) 一 logp(θ) w.r.t. θ, μ and σ
respectively.
Update μ using the gradient
Update σ using the gradient
KL
μ
BC .
e+
gKL
BC .
Figure 1: Illustration (left) and Algorithm (right) of Bayes by Backprop applied to an RNN.
θ. Although the RNN is unrolled T times, each weight is penalised just once by the KL term,
rather than T times. Also clear from (3) is that when a Monte Carlo approximation is taken to the
expectation, the parameters θ should be held fixed throughout the entire sequence.
Two complications arise to the above naive derivation in practice: firstly, sequences are often long
enough and models sufficiently large, that unrolling the RNN for the whole sequence is prohibitive.
Secondly, to reduce variance in the gradients, more than one sequence is trained at a time. Thus the
typical regime for training RNNs involves training on mini-batches of truncated sequences.
Let B be the number of mini-batches and C the number of truncated sequences (“cuts”), then we
can write (3) as:
BC
L(θ) = -Eq(θ) log YYp(y(b,c)∣θ,χ(b,c)) + KL [q(θ) || p(θ)],	(4)
b=1 c=1
where the (b, c) superscript denotes elements of cth truncated sequence in the bth minibatch. Thus
the free energy of mini-batch b of a truncated sequence c can be written as:
L(b,c)(θ) = -Eq(θ) [log p(yfθ,x(KSpbec))] + WKbLc)KL [q(θ) || p(θ)],	(5)
where wK(bL,c) distributes the responsibility of the KL cost among minibatches and truncated se-
quences (thus PbB=1 PcC=1 wK(bL,c) = 1), and S(pbre,vc) refers to the initial state of the RNN for the
minibatch x(b,c). In practice, We pick W(Lc)= 忐 so that the KL penalty is equally distributed
among all mini-batches and truncated sequences. The truncated sequences in each subsequent mini-
batches are picked in order, and so S(pbre,vc) is set to the last state of the RNN for x(b,c-1).
Finally, the question of when to sample weights follows naturally from taking a Monte Carlo ap-
proximations to (5): for each minibatch, sample a fresh set of parameters.
4	Posterior S harpening
The choice of variational posterior q(θ) as described in Section 3 can be enhanced by adding side
information that makes the posterior over the parameters more accurate, thus reducing variance of
the learning process.
Akin to Variational Auto Encoders (VAEs) (Kingma & Welling, 2013; Rezende et al., 2014), which
propose a powerful distribution q(z|x) to improve the gradient estimates of the (intractable) like-
lihood function p(x), here we propose a similar approach. Namely, for a given minibatch of data
(inputs and targets) (x, y) sampled from the training set, we construct such q(θ∣(χ, y)). Thus, we
compute a proposal distribution where the latents (z in VAEs) are the parameters θ (which we wish
to integrate out), and the “privileged” information upon which we condition is a minibatch of data.
We could have chosen to condition on a single example (x, y) instead of a batch, but this would
have yielded different parameter vectors θ per example. Conditioning on the full minibatch has
3
Under review as a conference paper at ICLR 2018
the advantage of producing a single θ per minibatch, so that matrix-matrix operations can still be
carried.
This “sharpened” posterior yields more stable optimisation, a common pitfall of Bayesian ap-
proaches to train neural networks, and the justification of this method follows from strong empirical
evidence and extensive work on VAEs.
A challenging aspect of modelling the variational posterior q(θ∣(x, y)) is the large number of di-
mensions of θ ∈ Rd. When the dimensionality is not in the order of millions, a powerful non-linear
function (such as a neural network) can be used which transforms observations (x, y) to the param-
eters of a Gaussian distribution, as proposed in Kingma & Welling (2013); Rezende et al. (2014).
Unfortunately, this neural network would have far too many parameters, making this approach un-
feasible.
Given that the loss - logp(y∣θ, x) is differentiable with respect to θ, We propose to parameterise q
as a linear combination of θ and gθ = -Vθ logp(y∣θ, x), both d-dimensional vectors.
Thus, we can define a hierarchical posterior of the form
q(θ∣(χ,y))
/ q(θ∖ψ, (X,y))qW)⅛,
(6)
with μ,σ ∈ Rd, and q(夕)=N(φ∖μ, σ) 一 the same as in the standard BBB method. Finally, let *
denote element-wise multiplication, we then have
q(θ∖中,(x, y)) = N(θ∖φ - η * gv, σ0I),	⑺
where η ∈ Rd is a free parameter to be learnt and σ0 a scalar hyper-parameter of our model. η can
be interpreted as a per-parameter learning rate.
During training, we get θ 〜q(θ∖(x, y)) via ancestral sampling to optimise the loss
L(μ, σ, η) = E(x,y) [Eq(w)q(θs,(x,y)) [L(x,期,θ,5∖μ, σ, n)]],	(8)
with L(x, y, θ, φ∖μ, σ, η) given by
L(x,y,θ,φ∖μ,σ,η) = - log p(y∖θ,x) + KL [q(θ∖φ, (x,y)) ∖∖ p(θ∖0] + J KL [q(夕)∖∖ p(φ)↑, (9)
where μ, σ, η are our model parameters, and P are the priors for the distributions defining q (for exact
details of these distributions see Section 6). The constant C is the number of truncated sequences as
defined in Section3. The bound on the true data likelihood which yields eq. (8) is derived in Sec 4.1.
Algorithm 1 presents how learning is performed in practice.
Algorithm 1 BBB with Posterior Sharpening
Sample a minibatch (x, y) of truncated sequences.
Sample 夕 〜q(夕)=N(φ∖μ, σ).
Let gψ = -VW logp(y∖φ, x).
Sample θ 〜q(θ∖φ, (x, y)) = N(θ∖φ - η * gψ, σ2I).
Compute the gradients of eq. (8) w.r.t. (μ, σ, η).
Update (μ,σ, η).
As long as the improvement of the log likelihood log p(y∖θ, x) term along the gradient gψ is greater
than the KL cost added for posterior sharpening (KL [q(θ∖φ, (x, y)) ∖∖ p(θ∖ 夕)]),thentheloWerbOund
in (8) will improve. This justifies the effectiveness of the posterior over the parameters proposed in
eq. 7 which will be effective as long as the curvature of log p(y∖θ, x) is large. Since η is learnt, it
controls the tradeoff between curvature improvement and KL loss. Studying more powerful param-
eterisations is part of future research.
Unlike regular BBB where the KL terms can be ignored during inference, there are two options
for doing inference under posterior sharpening. The first involves using q(夕)and ignoring any
KL terms, similar to regular BBB. The second involves using q(θ∖φ, (x, y)) which requires using
the term KL [q(θ∖夕,(x, y)) ∖∖ p(θ∖φ)↑ yielding an upper bound on perplexity (lower bound in log
probability; see Section 4.2 for details). This parameterisation involves computing an extra gradient
and incurs a penalty in training speed. A comparison of the two inference methods is provided in
Section 6. Furthermore, in the case of RNNs, the exact gradient cannot be efficiently computed, so
BPTT is used.
4
Under review as a conference paper at ICLR 2018
4.1	Derivation of Free Energy for Posterior Sharpening
Here we turn to deriving the training loss function we use for posterior sharpening. The basic
idea is to take a variational approximation to the marginal likelihood p(x) that factorises hierar-
chically. Hierarchical variational schemes for topic models have been studied previously in Ran-
ganath et al. (2016). Here, we shall assume a hierarchical prior for the parameters such that
p(x) = Pp(χ∣θ)p(θ∣φ)p(φ)dθdφ. Then we pick a variational posterior that conditions upon x,
and factorises as q(θ, Hx) = q(θ∣g, χ)q(0. The expected lower bound on p(x) is then as follows:
log p(x)
log (/p(xlθ)p(θl3)p(3)dθd3
(10)
≥ Eq(r,θ∣χ)
l p(xlθ)p(θ3)p(0-
.og q(ψ,θ∖χ) 一
(11)
Eq(θ∣φ,x)q(φ)
Eq(v)
lo p(χ∖θ)p(θ3)p(0-
.θg q(θ∖ψ,χ)q(ψ) .
Eq(θk,χ)
logp(x∖θ) + log
p(θ"
q(θ∖φ,x)
+ log
Eq(v) [Eq(θk,χ) Rogp(χ∖θ)]- KL[q(θ3,χ) ∖∖ p(θM]] - KL03 ∖∖ p3]
(12)
(13)
(14)
4.2	Derivation of Predictions with Posterior Sharpening
Now we consider making predictions. These are done by means of Bayesian model averaging
over the approximate posterior. In the case of no posterior sharpening, predictions are made by
evaluating: Eq(θ) [logp(x∖θ)]. For posterior sharpening, We derive a bound on a Bayesian model
average over the approximate posterior of 中:
Eq(0 [logp(x∖ψ)] = Eq(0 log J p(x∖θ)p(θ∖φ)dθ	(15)
、EiE	l"l p(χ∖θ)p(θ∖0]]	z16
≥ Eq(0 Fq也Sx) K q(θ∖φ,x) U	(16)
=Eq® [Eq(θ∣φ,x) [logP(x∖θ)] - KL [q(θ∖ψ, x) ∖∖ P(θ∖ψ)]∖	(17)
5	Related work
We note that the procedure of sharpening the posterior as explained above has similarities with
other techniques. Perhaps the most obvious one is line search: indeed, η is a trained parameter that
does line search along the gradient direction. Probabilistic interpretations have been given to line
search in e.g. Mahsereci & Hennig (2015), but ours is the first that uses a variational posterior with
the reparametrization trick/perturbation analysis gradient. Also, the probabilistic treatment to line
search can also be interpreted as a trust region method.
Another related technique is dynamic evaluation (Mikolov et al., 2010), which trains an RNN during
evaluation of the model with a fixed learning rate. The update applied in this case is cumulative, and
only uses previously seen data. Thus, they can take a purely deterministic approach and ignore any
KL between a posterior with privileged information and a prior. As we will show in Section 6,
performance gains can be significant as the data exhibits many short term correlations.
Lastly, learning to optimise (or learning to learn) (Li & Malik, 2016; Andrychowicz et al., 2016) is
related in that a learning rate is learned so that it produces better updates than those provided by e.g.
AdaGrad (Duchi et al., 2011) or Adam (Kingma & Ba, 2014). Whilst they train a parametric model,
we treat these as free parameters (so that they can adapt more quickly to the non-stationary distribu-
tion w.r.t. parameters). Notably, we use gradient information to inform a variational posterior so as
to reduce variance of Bayesian Neural Networks. Thus, although similar in flavour, the underlying
motivations are quite different.
Applying Bayesian methods to neural networks has a long history, with most common approxima-
tions having been tried. Buntine & Weigend (1991) propose various maximum a posteriori schemes
5
Under review as a conference paper at ICLR 2018
for neural networks, including an approximate posterior centered at the mode. Buntine & Weigend
(1991) also suggest using second order derivatives in the prior to encourage smoothness of the re-
sulting network. Hinton & Van Camp (1993) proposed using variational methods for compressing
the weights of neural networks as a regulariser. Hochreiter et al. (1995) suggest an MDL loss for
single layer networks that penalises non-robust weights by means of an approximate penalty based
upon perturbations of the weights on the outputs. Denker & Lecun (1991); MacKay (1995) investi-
gated using the Laplace approximation for capturing the posterior of neural networks. Neal (2012)
investigated the use of hybrid Monte Carlo for training neural networks, although it has so far been
difficult to apply these to the large sizes of networks considered here.
More recently Graves (2011) derived a variational inference scheme for neural networks and Blun-
dell et al. (2015) extended this with an update for the variance that is unbiased and simpler to com-
pute. Graves (2016) derives a similar algorithm in the case of a mixture posterior. Several authors
have claimed that dropout (Srivastava et al., 2014) and Gaussian dropout (Wang & Manning, 2013)
can be viewed as approximate variational inference schemes (Gal & Ghahramani, 2015; Kingma
et al., 2015, respectively).
A few papers have investigated approximate Bayesian recurrent neural networks. Mirikitani & Niko-
laev (2010) proposed a second-order, online training scheme for recurrent neural networks, while
Chien & Ku (2016) only capture a single point estimate of the weight distribution. Gal & Ghahra-
mani (2016) highlighted Monte Carlo dropout for LSTMs (we explicitly compare to these results in
our experiments), whilst Graves (2011) proposed a variational scheme with biased gradients for the
variance parameter using the Fisher matrix. Our work extends this by using an unbiased gradient
estimator without need for approximating the Fisher and also add a novel posterior approximation.
Variational methods typically underestimate the uncertainty in the posterior (as they are mode seek-
ing, akin to the Laplace approximation), whereas expectation propagation methods often average
over modes and so tend to overestimate uncertainty (although there are counter examples for each
depending upon the particular factorisation and approximations used; see for example (Turner &
Sahani, 2011)). Nonetheless, several papers explore applying expectation propagation to neural
networks: Soudry et al. (2014) derive a closed form approximate online expectation propagation
algorithm, whereas Hemandez-Lobato & Adams (2015) proposed using multiple passes of assumed
density filtering (in combination with early stopping) attaining good performance on a number of
small data sets. Hasenclever et al. (2015) derive a distributed expectation propagation scheme with
SGLD (Welling & Teh, 2011) as an inner loop. Others have also considered applying SGLD to
neural networks (Li et al., 2015) and Gan et al. (2016) more recently used SGLD for LSTMs (we
compare to these results in our experiments).
6	Experiments
We present the results of our method for a language modelling and an image caption generation task.
6.1	Language Modelling
We evaluated our model on the Penn Treebank Marcus et al. (1993) benchmark, a task consisting
on next word prediction. We used the network architecture from Zaremba et al. (2014), a simple
yet strong baseline on this task, and for which there is an open source implementation1. The base-
line consists of an RNN with LSTM cells and a special regularisation technique, where the dropout
operator is only applied to the non-recurrent connections. We keep the network configuration un-
changed, but instead of using dropout we apply our Bayes by Backprop formulation. Our goal is to
demonstrate the effect of applying BBB to a pre-existing, well studied architecture.
To train our models, we tuned the parameters on the prior distribution, the learning rate and its
decay. The weights were initialised randomly and we used gradient descent with gradient clipping
for optimisation, closely following Zaremba et al. (2014)’s “medium” LSTM configuration (2 layers
with 650 units each).
1https://github.com/tensorflow/models/blob/master/tutorials/rnn/ptb/
ptb_word_lm.py
6
Under review as a conference paper at ICLR 2018
Table 1: Word-level perplexity on the Penn Treebank language modelling task (lower is better),
where DE indicates that Dynamic Evaluation was used.
Model (medium)	Val	Test	Val (DE)	Test (DE)
LSTM (Zaremba et al., 2014)	120.7	114.5	-	-
LSTM dropout (Zaremba et al., 2014)	86.2	82.1	79.7	77.1
Variational LSTM (tied weights)	81.8	79.7	-	-
(Gal & Ghahramani, 2016)				
Variational LSTM (tied weights, MS)	-	79.0	-	-
(Gal & Ghahramani, 2016)				
Bayesian RNN (BRNN)	78.8	75.5	73.4	70.7
BRNN w/ Posterior Sharpening	≤ 77.8	≤ 74.8	≤ 72.6	≤ 69.8
As in Blundell et al. (2015), the prior of the network weights θ was taken to be a scalar mixture of
two Gaussian densities with zero mean and variances σ12 and σ22, explicitly
p(θ) = Y (∏N(θj∣0, σ2) + (1 - π)N(θj∣0, σ2)) ,	(18)
j
where θj is the j-th weight of the network. We searched π ∈ {0.25, 0.5, 0.75}, log σ1 ∈ {0, -1, -2}
and log σ2 ∈ {-6, -7, -8}.
For speed purposes, during training we used one sample from the posterior for estimating the gradi-
ents and computing the (approximate) KL-divergence. For prediction, we experimented with either
computing the expected loss via Monte Carlo sampling, or using the mean of the posterior distribu-
tion as the parameters of the network (MAP estimate). We observed that the results improved as we
increased the number of samples but they were not significantly better than taking the mean (as was
also reported by Graves (2011); Blundell et al. (2015)). For convenience, in Table 1 we report our
numbers using the mean of the converged distribution, as there is no computation overhead w.r.t. a
standard LSTM model.
Table 1 compares our results to the LSTM dropout baseline Zaremba et al. (2014) we built from,
and to the Variational LSTMs Gal & Ghahramani (2016), which is another Bayesian approach to
this task. Finally, we added dynamic evaluation Mikolov et al. (2010) results with a learning rate of
0.1, which was found via cross validation.
As with other VAE-related RNNs Fabius & van Amersfoort (2014); Bayer & Osendorfer (2014);
Chung et al. (2015) perplexities using posterior sharpening are reported including a KL penalty
KL [q(θ3, (x, y)) || p(θ∣0] in the log likelihood term (the KL is computed exactly, not sampled).
For posterior sharpening we use a hierarchical prior for θ: p(θ∣夕)= N(θ∣夕,σ2I) which expresses
our belief that a priori, the network parameters θ will be much like the data independent parameters
夕 with some small Gaussian perturbation. In our experiments We swept over σ° on the validation
set, and found σ0 = 0.02 to perform well, although results were not particularly sensitive to this.
Note that with posterior sharpening, the perplexities reported are upper bounds (as the likelihoods
are lower bounds).
Lastly, we tested the variance reduction capabilities of posterior sharpening by analysing the per-
plexity attained by the best models reported in Table 1. Standard BBB yields 258 perplexity after
only one epoch, whereas the model with posterior sharpening is better at 227. We also implemented
it on MNIST following Blundell et al. (2015), and obtained small but consistent speed ups. Lower
perplexities on the Penn Treebank task can be achieved by varying the model architecture, which
should be complementary to our work of treating weights as random variables—we are simply
interested in assessing the impact of our method on an existing architecture, rather than absolute
state-of-the-art. See Kim et al. (2015); Zilly et al. (2016); Merity et al. (2016), for a report on recent
advances on this benchmark, where they achieve perplexities of 70.9 on the test set. Furthermore
We note that the speed of our naive implementation of Bayesian RNNs was 0.7 times the original
speed and 0.4 times the original speed for posterior sharpening. Notably, Figure 2 shows the effect
of weight pruning: weights were ordered by their signal-to-noise ratio (∣μ∕∕σi) and removed (set
7
Under review as a conference paper at ICLR 2018
Figure 2: Weight pruning experiment. No signif- Figure 3: Entropy gap ∆Hp (Eq. (20)) between
icant loss on performance is observed until prun- reversed and regular Penn Treebank test sets ×
ing more than 80% of weights.	number of samples.
to zero) in reverse order. We evaluated the validation set perplexity for each proportion of weights
dropped. As can be seen, around 80% of the weights can be removed from the network with little
impact on validation perplexity. Additional analysis on the existing patterns of the dropped weights
can be found in the supplementary material A.3.
6.1.1	Uncertainty Analysis
We used the Penn Treebank test set, which is a long sequence of ≈ 80K words, and reversed it. Thus,
the “reversed” test set first few words are: “us with here them see not may we ...” which correspond
to the last words of the standard test set: “... we may not see them here with us”.
Let V be the vocabulary of this task. For a given input sequence x = x1:T and a probabilistic model
p, we define the entropy of x under p, Hp [x], by
Hp[x] = -	p(w|x1:i-1) logp(w|x1:i-1)	(19)
i=1,...,T w∈V
Let 1 Hp [X] = Hp[X] , i.e., the per word entropy. Let X be the standard Penn Treebank test set,
and Xrev the reversed one. For a given probabilistic model p, we define the entropy gap ∆Hp by
∆Hp = Hp[Xrev] - Hp[X].	(20)
Since Xrev clearly does not come from the training data distribution (reversed English does not look
like proper English), we expect ∆Hp to be positive and large. Namely, if we take the per word
entropy of a model as a proxy for the models’ certainty (low entropy means the model is confident
about its Prediction)Jhen the overall certainty of well calibrated models over Xrev should be lower
than over X. Thus, Hpʤ] > Hp[X]. When comparing two distributions, We expect the better
calibrated one to have a larger ∆Hp .
In Figure 3, we plotted ∆Hp for the BBB and the baseline dropout LSTM model. The BBB model
has a gap of about 0.67 nats/word when taking 10 samples, and slightly below 0.65 when using the
posterior mean. In contrast, the model using MC Dropout (Gal & Ghahramani, 2015) is less well
calibrated and is below 0.58 nats/word. However, when “turning off” dropout (i.e., using the mean
field approximation), ∆Hp improves to below 0.62 nats/word.
We note that with the empirical likelihood of the words in the test set with size T (where for each
word W ∈ V, p(w)=侨 OCCUrrTCeS of W)), We get an entropy of 6.33 nats/word. The BBB mean model
has entropy of 4.48 nats/word on the reversed set which is still far below the entropy we get by using
the empirical likelihood distribution.
6.2	Image Caption Generation
We also applied Bayes by Backprop for RNNs to image captioning. Our experiments were based
upon the model described in Vinyals et al. (2016), where a state-of-the-art pre-trained convolutional
8
Under review as a conference paper at ICLR 2018
Baseline: a white plate with a pizza
on it
BBB: a small white dog eating a
piece of pizza
Baseline: a small boat in a	large body Baseline: a pile of luggage sitting on	Baseline: a man riding a
of water	top of a wooden floor	motorcycle down a street
BBB: a boat traveling down	a	river	BBB: a close up of a person holding a	BBB: a police officer riding
next io a bridge	skate board	a motorcycle down a street
Figure 4: Image captioning results on MSCOCO development set.
neural network (CNN) was used to map an image to a high dimensional space, and this representa-
tion was taken to be the initial state of an LSTM. The LSTM model was trained to predict the next
word on a sentence conditioned on the image representation and all the previous words in the im-
age caption. We kept the CNN architecture unchanged, and used an LSTM trained using Bayes by
Backprop rather than the traditional LSTM with dropout regularisation. As in the case for language
modelling, this work conveniently provides an open source implementation2. We used the same
prior distribution on the weights of the network (18) as we did for the language modelling task, and
searched over the same hyper-parameters.
We used the MSCOCO (Lin et al., 2014) data set and report perplexity, BLUE-4, and CIDER scores
on compared to the Show and Tell model (Vinyals et al., 2016), which was the winning entry of the
captioning challenge in 20153. The results are:
Model	PerpleXity	BLUE-4	CIDER
Show and Tell	8.3	28.8	89.8
Bayes RNN	8.1	30.2	96.0
We observe significant improvements in BLUE and CIDER, outperforming the dropout baseline
by a large margin. Moreover, a random sample of the captions that were different for both the
baseline and BBB is shown in Figure 4. Besides the clear quantitative improvement, it is useful
to visualise qualitatively the performance of BBB, which indeed generally outperforms the strong
baseline, winning in most cases. As in the case of Penn Treebank, we chose a performant, open
source model. Captioning models that use spatial attention, combined with losses that optimise
CIDER directly (rather than a surrogate loss as we do) achieve over 100 CIDER points (Lu et al.,
2016; Liu et al., 2016).
7	Discussion
We have shown how to apply the Bayes by Backprop (BBB) technique to RNNs. We enhanced it
further by introducing the idea of posterior sharpening: a hierarchical posterior on the weights of
neural networks that allows a network to adapt locally to batches of data by a gradient of the model.
We showed improvements over two open source, widely available models in the language modelling
and image captioning domains. We demonstrated that not only do BBB RNNs often have superior
performance to their corresponding baseline model, but are also better regularised and have superior
uncertainty properties in terms of uncertainty on out-of-distribution data. Furthermore, BBB RNNs
through their uncertainty estimates show signs of knowing what they know, and when they do not, a
critical property for many real world applications such as self-driving cars, healthcare, game playing,
and robotics. Everything from our work can be applied on top of other enhancements to RNN/LSTM
models (and other non-recurrent architectures), and the empirical evidence combined with improve-
ments such as posterior sharpening makes variational Bayes methods look very promising. We are
exploring further research directions and wider adoption of the techniques presented in our work.
2https://github.com/tensorflow/models/tree/master/im2txt
3The winning entry was an ensemble of many models, including some with fine tuning w.r.t. the image
model. In this paper, though, we report single model performance.
9
Under review as a conference paper at ICLR 2018
References
Dario Amodei, Rishita Anubhai, Eric Battenberg, Carl Case, Jared Casper, Bryan Catanzaro, Jing-
dong Chen, Mike Chrzanowski, Adam Coates, Greg Diamos, et al. Deep speech 2: End-to-end
speech recognition in English and Mandarin. arXiv preprint arXiv:1512.02595, 2015.
Marcin Andrychowicz, Misha Denil, Sergio Gomez, Matthew W Hoffman, David Pfau, Tom Schaul,
and Nando de Freitas. Learning to learn by gradient descent by gradient descent. In Advances in
Neural Information Processing Systems,pp. 3981-3989, 2016.
Justin Bayer and Christian Osendorfer. Learning stochastic recurrent networks. arXiv preprint
arXiv:1411.7610, 2014.
Matthew James Beal. Variational algorithms for approximate Bayesian inference. University of
London United Kingdom, 2003.
Charles Blundell, Julien Cornebise, Koray Kavukcuoglu, and Daan Wierstra. Weight uncertainty in
neural networks. arXiv preprint arXiv:1505.05424, 2015.
Wray L Buntine and Andreas S Weigend. Bayesian back-propagation. Complex systems, 5(6):
603-643, 1991.
Jen-Tzung Chien and Yuan-Chu Ku. Bayesian recurrent neural network for language modeling.
IEEE transactions on neural networks and learning systems, 27(2):361-374, 2016.
Junyoung Chung, Kyle Kastner, Laurent Dinh, Kratarth Goel, Aaron C Courville, and Yoshua Ben-
gio. A recurrent latent variable model for sequential data. In Advances in neural information
processing systems, pp. 2980-2988, 2015.
John S Denker and Yann Lecun. Transforming neural-net output levels to probability distributions.
In Advances in neural information processing systems, pp. 853-859, 1991.
John Duchi, Elad Hazan, and Yoram Singer. Adaptive subgradient methods for online learning and
stochastic optimization. Journal of Machine Learning Research, 12(Jul):2121-2159, 2011.
Otto Fabius and Joost R van Amersfoort. Variational recurrent auto-encoders. arXiv preprint
arXiv:1412.6581, 2014.
Yarin Gal and Zoubin Ghahramani. Dropout as a Bayesian approximation: Representing model
uncertainty in deep learning. arXiv preprint arXiv:1506.02142, 2, 2015.
Yarin Gal and Zoubin Ghahramani. A theoretically grounded application of dropout in recurrent
neural networks. In Advances in Neural Information Processing Systems, pp. 1019-1027, 2016.
Zhe Gan, Chunyuan Li, Changyou Chen, Yunchen Pu, Qinliang Su, and Lawrence Carin. Scal-
able Bayesian learning of recurrent neural networks for language modeling. arXiv preprint
arXiv:1611.08034, 2016.
Alex Graves. Practical variational inference for neural networks. In Advances in Neural Information
Processing Systems, pp. 2348-2356, 2011.
Alex Graves. Stochastic backpropagation through mixture density distributions. arXiv preprint
arXiv:1607.05690, 2016.
Leonard Hasenclever, Thibaut Lienart, Sebastian Vollmer, Stefan Webb, Balaji Lakshminarayanan,
Charles Blundell, and Yee Whye Teh. Distributed Bayesian learning with stochastic natural-
gradient expectation propagation and the posterior server. arXiv preprint arXiv:1512.09327, 2015.
Jose MigUel Hemandez-Lobato and Ryan Adams. Probabilistic backpropagation for scalable learn-
ing of Bayesian neural networks. In ICML, pp. 1861-1869, 2015.
Geoffrey E Hinton and Drew Van Camp. Keeping the neUral networks simple by minimizing the
description length of the weights. In Proceedings of the sixth annual conference on Computational
learning theory, pp. 5-13. ACM, 1993.
10
Under review as a conference paper at ICLR 2018
SePP Hochreiter and Jurgen Schmidhuber. Long short-term memory. Neural computation, 9(8):
1735-1780,1997.
Sepp Hochreiter, Jurgen Schmidhuber, et al. Simplifying neural nets by discovering flat minima.
Advances in Neural Information Processing Systems, PP. 529-536, 1995.
Rein Houthooft, Xi Chen, Yan Duan, John Schulman, Filip De Turck, and Pieter Abbeel. Curiosity-
driven exploration in deep reinforcement learning via Bayesian neural networks. arXiv preprint
arXiv:1605.09674, 2016.
Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploring the
limits of language modeling. arXiv preprint arXiv:1602.02410, 2016.
Yoon Kim, Yacine Jernite, David Sontag, and Alexander M Rush. Character-aware neural language
models. arXiv preprint arXiv:1508.06615, 2015.
Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980, 2014.
Diederik P Kingma and Max Welling. Auto-encoding variational bayes. arXiv preprint
arXiv:1312.6114, 2013.
Diederik P Kingma, Tim Salimans, and Max Welling. Variational dropout and the local reparame-
terization trick. In Advances in Neural Information Processing Systems, pp. 2575-2583, 2015.
Chunyuan Li, Changyou Chen, David Carlson, and Lawrence Carin. Preconditioned stochastic
gradient Langevin dynamics for deep neural networks. arXiv preprint arXiv:1512.07666, 2015.
Ke Li and Jitendra Malik. Learning to optimize. arXiv preprint arXiv:1606.01885, 2016.
Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays, Pietro Perona, Deva Ramanan, Piotr
Dollar, and C Lawrence Zitnick. Microsoft coco: Common objects in context. In European
Conference on Computer Vision, pp. 740-755. Springer, 2014.
Zachary C Lipton, Jianfeng Gao, Lihong Li, Xiujun Li, Faisal Ahmed, and Li Deng. Efficient ex-
ploration for dialogue policy learning with BBQ networks & replay buffer spiking. arXiv preprint
arXiv:1608.05081, 2016.
Siqi Liu, Zhenhai Zhu, Ning Ye, Sergio Guadarrama, and Kevin Murphy. Optimization of image
description metrics using policy gradient methods. arXiv preprint arXiv:1612.00370, 2016.
Jiasen Lu, Caiming Xiong, Devi Parikh, and Richard Socher. Knowing when to look: Adaptive
attention via a visual sentinel for image captioning. arXiv preprint arXiv:1612.01887, 2016.
David JC MacKay. Probable networks and plausible predictionsa review of practical Bayesian meth-
ods for supervised neural networks. Network: Computation in Neural Systems, 6(3):469-505,
1995.
Maren Mahsereci and Philipp Hennig. Probabilistic line searches for stochastic optimization. In
Advances in Neural Information Processing Systems, pp. 181-189, 2015.
Mitchell P Marcus, Mary Ann Marcinkiewicz, and Beatrice Santorini. Building a large annotated
corpus of English: The Penn Treebank. Computational linguistics, 19(2):313-330, 1993.
Stephen Merity, Caiming Xiong, James Bradbury, and Richard Socher. Pointer Sentinel Mixture
Models. arXiv preprint arXiv:1609.07843, 2016.
Tomas Mikolov, Martin Karafiat, Lukas Burget, Jan Cernocky, and Sanjeev Khudanpur. Recurrent
neural network based language model. In Interspeech, volume 2, pp. 3, 2010.
Derrick T Mirikitani and Nikolay Nikolaev. Recursive bayesian recurrent neural networks for time-
series modeling. IEEE Transactions on Neural Networks, 21(2):262-274, 2010.
Radford M Neal. Bayesian learning for neural networks, volume 118. Springer Science & Business
Media, 2012.
11
Under review as a conference paper at ICLR 2018
Rajesh Ranganath, Dustin Tran, and David Blei. Hierarchical variational models. In Proceedings of
The 33rd International Conference on Machine Learning, volume 48 of Proceedings of Machine
Learning Research,pp. 324-333, 2016.
Danilo Jimenez Rezende, Shakir Mohamed, and Daan Wierstra. Stochastic backpropagation and
approximate inference in deep generative models. In Proceedings of The 31st International Con-
ference on Machine Learning, pp. 1278-1286, 2014.
Daniel Soudry, Itay Hubara, and Ron Meir. Expectation backpropagation: Parameter-free train-
ing of multilayer neural networks with continuous or discrete weights. In Advances in Neural
Information Processing Systems, pp. 963-971, 2014.
Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov.
Dropout: a simple way to prevent neural networks from overfitting. Journal of Machine Learning
Research, 15(1):1929-1958, 2014.
Richard E Turner and Maneesh Sahani. Two problems with variational expectation maximisation
for time-series models. Bayesian Time series models, pp. 115-138, 2011.
Oriol Vinyals, Alexander Toshev, Samy Bengio, and Dumitru Erhan. Show and tell: Lessons learned
from the 2015 mscoco image captioning challenge. IEEE transactions on pattern analysis and
machine intelligence, 2016.
Martin J Wainwright, Michael I Jordan, et al. Graphical models, exponential families, and variational
inference. Foundations and TrendsR in Machine Learning, 1(1-2):1-305, 2008.
Sida I Wang and Christopher D Manning. Fast dropout training. In ICML (2), pp. 118-126, 2013.
Max Welling and Yee W Teh. Bayesian learning via stochastic gradient Langevin dynamics. In
Proceedings of the 28th International Conference on Machine Learning (ICML-11), pp. 681-688,
2011.
Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google’s neural machine trans-
lation system: Bridging the gap between human and machine translation. arXiv preprint
arXiv:1609.08144, 2016.
Wojciech Zaremba, Ilya Sutskever, and Oriol Vinyals. Recurrent neural network regularization.
arXiv preprint arXiv:1409.2329, 2014.
Julian Georg Zilly, RUPesh Kumar Srivastava, Jan Koutnlk, and Jurgen Schmidhuber. Recurrent
highway networks. arXiv preprint arXiv:1607.03474, 2016.
12
Under review as a conference paper at ICLR 2018
A Supplementary Material
A.1 Bayes by Backprop Algorithm
Algorithm 2 shows the Bayes by Backprop Monte Carlo procedure from Section 2 for minimising
the variational free energy from Eq. (1) with respect to the mean and standard deviation parameters
of the posterior q(θ).
Algorithm 2 Bayes by BackProP
Sample E 〜N(0,I), E ∈ Rd.
Set network parameters to θ = μ + σe.
Do forward ProPagation and backProPagation as normal.
Let g be the gradient w.r.t. θ from backpropagation.
Let gKL,gKL,gKL be the gradients of logN(θ∣μ, σ2) - logp(θ) with respect to θ, μ and σ
respectively.
Update μ according to the gradient g + gKL + gKL.
Update σ according to the gradient (g + gθKL)E + gσKL.
A.2 LSTM equations
The core of an RNN, f, is a neural network that maps the RNN state at step t, st and an input
observation xt to a new RNN state st+1, f : (st, xt) 7→ st+1.
An LSTM core Hochreiter & Schmidhuber (1997) has a state st = (ct, ht) where c is an internal
core state and h is the exposed state. Intermediate gates modulate the effect of the inputs on the
outputs, namely the input gate it, forget gate ft and output gate ot . The relationship between the
inputs, outputs and internal gates of an LSTM cell (without peephole connections) are as follows:
it = σ(Wi[xt, ht-1]T + bi),
ft = σ(Wf [xt, ht-1]T + bf),
ct = ft ct-1 + it tanh(Wc [xt , ht-1] + bc),
ot = σ(Wo[xt, ht-1]T + bo),
ht = ot tanh(ct),
where Wi (bi), Wf (bf), Wc (bc) and Wo (bo) are the weights (biases) affecting the input gate, forget
gate, cell update, and output gate respectively.
A.3 Weight pruning
As discussed in Section 6.1, for the Penn Treebank task, we have taken the converged model an
performed weight pruning on the parameters of the network. Weights were ordered by their signal-
to-noise ratio (∣μi ∣∕σ“ and removed (set to zero) in reverse order. It was observed that around 80%
of the weights can be removed from the network with little impact on validation perplexity. In
Figure 5, we show the patterns of the weights dropped for one of the LSTM cells from the model.
A.4 Additional Captioning examples
13
Under review as a conference paper at ICLR 2018
Figure 5: Pruning patterns for one LSTM cell (with 650 untis) from converged model with 80% of
total weights dropped. A white dot indicates that particular parameter was dropped. In the middle
column, a horizontal white line means that row was set to zero. Finally, the last column indicates
the total number of weights removed for each row.
篦占s≡之泮≡s
二:£>?<*»丁∙..七 G
Σ,⅛∙二-⅛7∙∙∙b
800
700
600
500
Baseline: a man riding a
skateboard up the side of a ramp
BBB: a man flying through the air
while riding a skateboard
Baseline: a person walking on the
beach with a surfboard
BBB: a person with a surfboard on
beach
Baseline: a sheep standing in a field
of grass
BBB: a sheep standing on top of a
lush green field
Baseline: a red double decker bus
parked in a parking lot
BBB: a red double decker bus
driving down a street
Baseline: a man is cooking in a large
kitchen
BBB: a man is putting something in
IIhe oven
Baseline: a large clock mounted
to the side of a building
BBB: a clock hanging from the
ceiling of a building
Figure 6: Additional Captions from MS COCO validation set.
14