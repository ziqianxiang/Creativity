Published as a conference paper at ICLR 2022
Generative Modeling
with Optimal Transport Maps
Litu Rout
Space Applications Centre
Indian Space Research Organisation
lr@sac.isro.gov.in
Alexander Korotin
Skolkovo Institute of Science and Technology
Artificial Intelligence Research Institute (AIRI)
a.korotin@skoltech.ru
Evgeny Burnaev
Skolkovo Institute of Science and Technology
Artificial Intelligence Research Institute (AIRI)
e.burnaev@skoltech.ru
Ab stract
With the discovery of Wasserstein GANs, Optimal Transport (OT) has become a
powerful tool for large-scale generative modeling tasks. In these tasks, OT cost is
typically used as the loss for training GANs. In contrast to this approach, we show
that the OT map itself can be used as a generative model, providing comparable
performance. Previous analogous approaches consider OT maps as generative
models only in the latent spaces due to their poor performance in the original
high-dimensional ambient space. In contrast, we apply OT maps directly in the
ambient space, e.g., a space of high-dimensional images. First, we derive a min-
max optimization algorithm to efficiently compute OT maps for the quadratic cost
(Wasserstein-2 distance). Next, we extend the approach to the case when the
input and output distributions are located in the spaces of different dimensions
and derive error bounds for the computed OT map. We evaluate the algorithm on
image generation and unpaired image restoration tasks. In particular, we consider
denoising, colorization, and inpainting, where the optimality of the restoration
map is a desired attribute, since the output (restored) image is expected to be close
to the input (degraded) one.
1 Introduction
Since the discovery of Generative Adversarial Networks (GANs, Goodfellow et al. (2014)), there has
been a surge in generative modeling (Radford et al., 2016; Arjovsky et al., 2017; Brock et al., 2019;
Karras et al., 2019). In the past few years, Optimal Transport (OT, Villani (2008)) theory has been
pivotal in addressing important issues of generative models. In particular, the usage of Wasserstein
distance has improved diversity (Arjovsky et al., 2017; Gulrajani et al., 2017), convergence (Sanjabi
et al., 2018), and stability (Miyato et al., 2018; Kim et al., 2021) of GANs.
Generative models based on OT can be split into two classes depending on what OT is used for.
First, the optimal transport cost serves as the loss for generative models, see Figure 1a. This is
the most prevalent class of methods which includes WGAN (Arjovsky et al., 2017) and its modifi-
cations: WGAN-GP (Gulrajani et al., 2017), WGAN-LP (Petzka et al., 2018), and WGAN-QC (Liu
et al., 2019). Second, the optimal transport map is used as a generative model itself, see Fig-
ure 1b. Such approaches include LSOT (Seguy et al., 2018), AE-OT (An et al., 2020a), ICNN-OT
(Makkuva et al., 2020), W2GN (Korotin et al., 2021a). Models of the first class have been well-
studied, but limited attention has been paid to the second class. Existing approaches of the second
class primarily consider OT maps in latent spaces of pre-trained autoencoders (AE), see Figure 3.
The performance of such generative models depends on the underlying AEs, in which decoding
transformations are often not accurate; as a result this deficiency limits practical applications in
high-dimensional ambient spaces. For this reason, using OT in the latent space does not necessarily
guarantee superior performance in generative modeling.
1
Published as a conference paper at ICLR 2022
(a) OT cost as the loss for the generative model.
Figure 1: Two existing approaches to use optimal transport in generative models.
(b) OT map as the generative model.
The focus of our paper is the second class of OT-based models using OT map as the generative map.
Finding an optimal mapping is motivated by its ability to preserve specific attributes of the input
samples, a desired property in unpaired learning. For example, in unpaired image-to-image transla-
tion, the learner has to fit a map between two data distributions which preserves the image content.
CycleGAN-based models (Zhu et al., 2017) are widely used for this purpose. However, they typi-
cally have complex optimization objectives consisting of several losses (Amodio & Krishnaswamy,
2019; Lu et al., 2019) in order to make the fitted map preserve the required attributes.
The main contributions of this paper are as follows:
1.	We propose an end-to-end algorithm (M4.3) to fit OT maps for the quadratic cost (Wasserstein-2
distance) between distributions located on the spaces of equal dimensions (M4.1) and extend the
method to unequal dimensions as well (M4.2). We prove error bounds for the method (M4.4).
2.	We demonstrate large-scale applications of OT maps in popular computer vision tasks. We con-
sider image generation (M5.1) and unpaired image restoration (M5.2) tasks.
Our strict OT-based framework allows the theoretical analysis of the recovered transport map. The
OT map obtained by our method can be directly used in large-scale computer vision problems which
is in high contrast to previous related methods relying on autoencoders and OT maps in the latent
space. Importantly, the performance and computational complexity of our method is comparable to
OT-based generative models using OT cost as the loss.
Notations. In What follows, X and Y are two complete metric spaces, μ(x) and V(y) are probability
distributions on X and Y, respectively. For a measurable map T : X → Y, T# μ denotes the
pushforward distribution of μ, i.e., the distribution for which any measurable set E ⊂ Y satisfies
T#μ(E) = μ(T-1 (E)). For a vector x, ∣∣x∣∣ denotes its Euclidean norm. Weusehx,y〉to denote the
inner product of vectors X and y. We use Π(μ,ν) to denote the set ofjoint probability distributions on
XXY whose marginals are μ and V, respectively (couplings). For a function f : RD → R ∪ {±∞}
its Legendre-Fenchel transform (the convex conjugate) is f (y) = supx∈RD {〈x, y)一 f (x)}. It is
convex, even if f is not.
2 Background on Optimal Transport
Consider a cost of transportation, c : X × Y → R defined over the product space of X and Y .
Monge's Formulation. The optimal transport cost between μ
and v for ground cost c(∙, ∙) is
Cost(μ, v) def inf / C (x, T(x)) dμ(x),	⑴
T# μ=ν JX
Figure 2: Monge’s OT.
where the infimum is taken over all measurable maps
T : X → Y pushing μ to V, see Figure 2. The map T* on which
the infimum in (1) is attained is called the optimal transport
2
Published as a conference paper at ICLR 2022
map. Monge's formulation does not allow splitting. For example, when μ is a Dirac distribution and
ν is a non-Dirac distribution, the feasible set of equation (1) is empty.
Kantorovich’s Relaxation. Instead of asking to which particular point y ∈ Y should all the proba-
bility mass of x be moved, Kantorovich (1948) asks how the mass of x should be distributed among
all y ∈ Y . Formally, a transport coupling replaces a transport map; the OT cost is given by:
Cost(μ, V)
def
inf
π∈Π(μ,ν)
/
X×Y
c (x, y) dπ(x, y),
(2)
where the infimum is taken over all couplings π ∈ Π(μ, V) of μ and V. The coupling π* attaining
the infimum of (2) is called the optimal transport plan. Unlike the formulation of (1), the formu-
lation of (2) is well-posed, and with mild assumptions on spaces X, Y and ground cost c(∙, ∙), the
minimizer π* of (2) always exists (Villani, 2008, Theorem 4.1). In particular, if π* is deterministic,
i.e., π* = [idχ, T*]#仙 for some T* : X → Y, then T* minimizes (1).
Duality. The dual form of (2) is given by (Kantorovich, 1948):
Cost(μ, ν)
sup ∖ / u(x)dμ(x) + / v(y)dν(y): u(x) + v(y) ≤ c(x,y),,
(u,v)	X	Y
(3)
with u ∈ L1(μ), V ∈ L1(ν) called Kantorovich potentials. For u : X → R and V : Y → R de-
fine their c-transforms by uc(y) = infx∈X{c (x, y) -u (x)} and vc(x) = inf y∈Y {c (x, y) - v (y)}
respectively. Using c-transform, (3) is reformulated as (Villani, 2008, M5)
Cost(μ,ν)=sup{J Vc(X)dμ(x) + J v(y)dν(y)
u(x)dμ(x) + J uc(y)dν(y] . (4)
Primal-dual relationship. For certain ground costs c(∙, ∙), the primal solution T* of (1) can be
recovered from the dual solution u* of (3). For example, if X = Y = RD, c(x, y) = h(x - y) with
strictly convex h : RD → R and μ is absolutely continuous supported on the compact set, then
T*(x) = x - (Vh)-1(Vu*(x)),	(5)
see (Santambrogio, 2015, Theorem 1.17). For general costs, see (Villani, 2008, Theorem 10.28).
3 Optimal Transport in Generative Models
Optimal transport cost as the loss (Figure 1a). Starting with the works of Arjovsky &
Bottou (2017); Arjovsky et al. (2017), the usage of OT cost as the loss has become a major way
to apply OT for generative modeling. In this setting, given data distribution V and fake distribution
μθ, the goal is to minimize Cost(μθ, V) w.r.t. the parameters θ. Typically, μθ is a pushforward
distribution of some given distribution, e.g., N(0, I), via generator network Gθ.
The Wasserstein-1 distance (W1), i.e., the transport cost for ground cost c(x, y) = kx - yk, is
the most practically prevalent example of such a loss. Models based on this loss are known as
Wasserstein GANs (WGANS). They estimate Wi (μθ, V) based on the dual form as given by (4). For
W1, the optimal potentials u*, V* of (4) satisfy u* = -V* where u* is a 1-Lipschitz function (Villani,
2008, Case 5.16). As a result, to compute W1, one needs to optimize the following simplified form:
Wι(μθ ,v)
kuk
u(x)dμθ(x) — / u(y)dV(y)}.
(6)
In WGANs, the potential u is called the discriminator. Optimization of (6) reduces constrained
optimization of (4) with two potentials u, V to optimization of only one discriminator u. In practice,
enforcing the Lipschitz constraint on u is challenging. Most methods to do this are regularization-
based, e.g., they use gradient penalty (Gulrajani et al., 2017, WGAN-GP) and Lipschitz penalty
(Petzka et al., 2018, WGAN-LP). Other methods enforce Lipschitz property via incorporating cer-
tain hard restrictions on the discriminator’s architecture (Anil et al., 2019; Tanielian & Biau, 2021).
General transport costs (other than W1 ) can also be used as the loss for generative models. They
are less popular since they do not have a dual form reducing to a single potential function simi-
lar to (6) for W1 . Consequently, the challenging estimation of the c-transform uc is needed. To
3
Published as a conference paper at ICLR 2022
avoid this, Sanjabi et al. (2018) consider the dual form of (3) with two potentials u, v instead form
(4) with one u and softly enforce the condition u(x) + v(y) ≤ c(x, y) via entropy or quadratic
regularization. Nhan Dam et al. (2019) use the dual form of (4) and amortized optimization to
compute Uc Via an additional neural network. Both methods work for general c(∙, ∙), though the
authors test them for c(x, y) = kx - yk only, i.e., W1 distance. Mallasto et al. (2019) propose a
fast way to approximate the c-transform and test the approach (WGAN-(q, p)) with seVeral costs,
in particular, the Wasserstein-2 distance (W2), i.e., the transport cost for the quadratic ground cost
c(x, y) = 1 ∣∣x - y∣∣2. Specifically for W2, Liu et al. (2019) approximate the c-transform via a linear
program (WGAN-QC).
A fruitful branch of OT-based losses for generative models comes from modified versions of OT
cost, such as Sinkhorn (Genevay et al., 2018), sliced (Deshpande et al., 2018) and minibatch (Fatras
et al., 2019) OT distances. They typically have lower sample complexity than usual OT and can be
accurately estimated from random mini-batches without using dual forms such as (3). In practice,
these approaches usually learn the ground OT cost c(∙, ∙).
The aforementioned methods use OT cost in the ambient space to train GANs. There also exist ap-
proaches using OT cost in the latent space. For example, Tolstikhin et al. (2017); Patrini et al. (2020)
use OT cost between encoded data and a given distribution as an additional term to reconstruction
loss for training an AE. As the result, AE’s latent distribution becomes close to the given one.
Optimal transport map as the generative map (Figure 1b). Methods to compute the
OT map (plan) are less common in comparison to those computing the cost. Recovering the map
from the primal form (1) or (2) usually yields complex optimization objectives containing several
adversarial terms (Xie et al., 2019; Liu et al., 2021; Lu et al., 2020). Such procedures require careful
hyperparameter choice. This needs to be addressed before using these methods in practice.
Primal-dual relationship (M2) makes it possible to recover the OT map via solving the dual form (3).
Dual-form based methods primarily consider W2 cost due to its nice theoretical properties and rela-
tion to convex functions (Brenier, 1991). In the semi-discrete case (μ is continuous, V is discrete),
An et al. (2020a) and Lei et al. (2019) compute the dual potential and the OT map by using the
Alexandrov theory and convex geometry. For the continuous case, Seguy et al. (2018) use the en-
tropy (quadratic) regularization to recover the dual potentials and extract OT map from them via
the barycenteric projection. Taghvaei & Jalali (2019), Makkuva et al. (2020), Korotin et al. (2021a)
employ input-convex neural networks (ICNNs, see Amos et al. (2017)) to parametrize potentials in
the dual problem and recover OT maps by using their gradients.
Figure 3: The existing most prevalent approach to use OT maps in generative models.
The aforementioned dual form methods compute OT maps in LATENT SPACES for problems such
as domain adaptation and latent space mass transport, see Figure 3. OT maps in high-dimensional
ambient spaces, e.g., natural images, are usually not considered. Recent evaluation of continuous
OT methods for W2 (Korotin et al., 2021b) reveals their crucial limitations, which negatively affect
their scalability, such as poor expressiveness of ICNN architectures or bias due to regularization. 4
4 End-to-end Solution to Learn Optimal Maps
4.1 Equal Dimensions of Input and Output Distributions
In this section, we use X = Y = RD and consider the Wasserstein-2 distance (W2), i.e., the optimal
transport for the quadratic ground cost c(x, y) = 2 ∣∣x — y ∣∣2. We use the dual form (4) to derive a
saddle point problem the solution of which yields the OT map T*. We consider distributions μ, V
with finite second moments. We assume that for distributions μ,ν in view there exists a unique OT
plan π* minimizing (3) and it is deterministic, i.e., π* = [idRD, T*]#μ. Here T* is an OT map
4
Published as a conference paper at ICLR 2022
which minimizes (1). Previous related works (Makkuva et al., 2020; Korotin et al., 2021a) assumed
the absolute continuity of μ, which implied the existence and uniqueness of T* (Brenier, 1991).
Let ψ(y) d=f 2 ∣∣y∣∣2 — v(y), where V is the potential of (4). Note that
vc(χ) =	inf [1 l∣χ	— yk2	— v(y)l	= 1 l∣χ∣l2	— SUP	{hχ,yi - ψ(y)}	= 1 l∣χ∣l2	-Ψ(χ).	(7)
y∈RD 2	2	y∈RD	2
Therefore, (4) is equivalent to
W2(μ,ν)= k kxk-dμ(x) + k kyk-dν(x) + sup
X2	Y2	ψ
ψ(x)dμ(x) -	ψ(y)dν(y)
Y
(8)
Constant(μ,ν) - inf |/ ψ(x)dμ(x) + / ψ(y)dν(y)
(9)
Constant(μ,ν) — inf < / SuP {〈x,y〉— ψ(y)} dμ(x) + / ψ(y)dν(y) > = (10)
ψ X y∈RD	Y
Constant(μ,ν)—叩{sup/ {(x,T(x)i — ψ(T(x))} dμ(x) + / ψ(y)dν(y)} (11)
where between lines (10) and (11) we replace the optimization over y ∈ RD with the equivalent
optimization over functions T : RD → RD . The equivalence follows from the interchange between
the integral and the supremum (Rockafellar, 1976, Theorem 3A). We also provide an independent
proof of equivalence specializing Rockafellar’s interchange theorem in Appendix A.1. Thanks to
the following lemma, we may solve saddle point problem (11) and obtain the OT map T* from its
solution (ψ*, T*).
Lemma 4.1. Let T * be the OT map from μ to V. Then, for every optimal potential ψ*,
T * ∈ arg sup / {hx,T (x)i — ψ*(T (x))} dμ(x).
TX
(12)
We prove Lemma 4.1 in Appendix A.2. For general μ, V the arg SuPT set for optimal ψ* might con-
tain not only OT map T* , but other functions as well. Working with real-world data in experiments
(M5.2), we observe that despite this issue, optimization (11) still recovers T*.
Relation to previous works. The use of the function T to approximate the c-transform was pro-
posed by Nhan Dam et al. (2019) to estimate the Wasserstein loss in WGANs. For W2, the fact
that T* is an OT map was used by Makkuva et al. (2020); Korotin et al. (2021a) who primarily
assumed continuous μ, V and reduced (11) to convex ψ and T = Vφ for convex φ. Issues with non-
uniqueness of solution of (12) were softened, but using ICNNs to parametrize ψ became necessary.
Korotin et al. (2021b) demonstrated that ICNNs negatively affect practical performance of OT and
tested an unconstrained formulation similar to (11). As per the evaluation, it provided the best em-
pirical performance (Korotin et al., 2021b, M4.5). The method bMM:Re they consider parametrizes
11l ∙ ∣2 — ψ(∙) by a neural network, while We directly parametrize ψ(∙) by a neural network (§4.3).
Recent work by Fan et al. (2021) exploits formulation similar to (11) for general costs c(∙, ∙). While
their formulation leads to a max-min scheme with general costs (Fan et al., 2021, Theorem 3), our
approach gives rise to a min-max method for quadratic cost. In particular, we extend the formulation
to learn OT maps between distributions in spaces with unequal dimensions, see the next subsection.
4.2	Unequal Dimensions of Input and Output Distributions
Consider the case when X = RH and Y = RD have different dimensions, i.e., H 6= D. In order
to map the probability distribution μ to ν, a straightforward solution is to embed X to Y via some
Q : X → Y and then to fit the OT map between Q#m and V for the quadratic cost on Y = RD. In
this case, the optimization objective becomes
*'詈{L {hQ3,T(Q(X))〉— Ψ(T(Q(X)))}dμ(χ) + (Ψ(y)dν(y)}	(13)
5
Published as a conference paper at ICLR 2022
With the optimal T* recovering the OT map from Q#μ to V. For equal dimensions H = D and the
identity embedding Q(x) ≡ x, expression (13) reduces to optimization (11) up to a constant.
Instead of optimizing (13) over functions T : Q(X ) → Y, We propose to consider optimization
directly over generative mappings G : X → Y :
L(ψ,G) d=f inf sup L {hQ(x),G(x)) - ψ(G(x))} dμ(x) + (ψ(y )dν (y)
(14)
Our folloWing lemma establishes connections betWeen (14) and OT With unequal dimensions:
Lemma 4.2. Assume that exists a unique OTplan between Q#μ and V and it is deterministic, i.e.,
[id RD, T *]# (Q# μ). Then G* (x) = T * (Q(X)) is the OT map between μ and V for the Q-embedded
quadratic cost c(x, y) = 2 ∣∣Q(x) - y ∣∣2. Moreover, for every optimal potential ψ * of problem (14),
G*
∈ arg sup hQ(x), G(x)i
(15)
We prove Lemma 4.2 in Appendix A.3 and
schematically present its idea in Figure 4.
Analogously to Lemma 4.1, it provides a
Way to compute the OT map G* for the Q-
embedded quadratic cost betWeen distribu-
tions μ and V by solving the saddle point
problem (14). Note the situation With non-
uniqueness of arg supG is similar to M4.1.
Relation to previous works. In practice,
learning OT maps directly betWeen spaces
of unequal dimensions Was considered in the
Work by (Fan et al., 2021, M5.2) but only
on toy examples. We demonstrate that our
method Works Well in large-scale generative
modeling tasks (M5.1). Theoretical properties
of OT maps for embedded costs are studied,
e.g., in (Pass, 2010; McCann & Pass, 2020).
—ψ* (G(X))} dμ(x).
Figure 4: The scheme of our approach for learning
OT maps betWeen unequal dimensions. In the fig-
ure, the setup of M5.1 is shown: μ is a noise, Q is
the bicubic upscaling, V is a distribution of images.
4.3	Practical Aspects and Optimization Procedure
To optimize functional (14), we approximate G : RH → RD and ψ : RD → R with neural networks
Gθ, ψω and optimize their parameters via stochastic gradient descent-ascent (SGDA) by using mini-
batches from μ,ν. The practical optimization procedure is given in Algorithm 1 below. Following
the usual practice in GANs, we add a small penalty (MB.3) on potential ψω for better stability. The
penalty is not included in Algorithm 1 to keep it simple.
Relation to previous works. WGAN by Arjovsky & Bottou (2017) uses W1 as the loss to update the
generator while we solve a diferent task — we fit the generator G to be the OT map for Q-embedded
quadratic cost. Despite this, our Algorithm 1 has similarities with WGAN’s training. The update
of ψ (line 4) coincides with discriminator’s update in WGAN. The update of generator G (line 8)
differs from WGAN’s update by the term -<Q(∙), Gθ(•)). Besides, in WGAN the optimization is
infG supD. We have infψ supG, i.e., the generator in our case is the solution of the inner problem.
4.4	Error Analysis
Given a pair (ψ, G) approximately solving (14), a natural question to ask is how good is the recov-
ered OT map G. In this subsection, we provide a bound on the difference between G* and G based
on the duality gaps for solving outer and inner optimization problems.
In (8), and, as the result, in (10), (11), (13), (14), it is enough to consider optimization over convex
functions ψ, see (Villani, 2008, Case 5.17). Our theorem below assumes the convexity ofψ although
it might not hold in practice since in practice ψ is a neural network.
6
Published as a conference paper at ICLR 2022
1
2
3
4
5
6
7
8
9
10
11
Algorithm 1: Learning the optimal transport map between unequal dimensions.
Input : Input distribution μ on X = RH; output distribution V on Y = RD;
generator network Gθ : RH → RD; potential network ψω : RD → R;
number of iterations per network: KG, Kψ ; embedding Q : X → Y;
Output: Trained generator Gθ representing OT map from μ to V;
repeat
for kψ = 1 to Kψ do
DraW batch X 〜μ and Y 〜V;
Lψ J ∣γY∣ Py∈Y ψω (y) - |XXy Px∈X ψω (Gθ (X));
Update ω by using d∂ψ to minimize Lψ;
for kG = 1 to KG do
Draw batch X 〜μ;
LG J |X| Px∈X [ψ(G(X)) - hQ(x),Gθ(X)i];
Update θ by using d^G to minimize Lg;
until not converged;
return Gq_
Theorem 4.3. Assume that there exists a unique deterministic OT plan for Q-embedded quadratic
cost between μ and V, i.e., π* = [idRH, G*]#μ for G* : RH → RD. Assume that ψ is β-strongly
ConVex(β > 0) and G : RH → RD. Define
1 = sup L(ψ, G) - L(ψ, G)	and 2 = sup L(ψ, G) - inf sup L(ψ, G)
G	G	ψG
Then the following bound holds ITuefor the OT map G* from μ to V:
,ʌ, .
FID(G#〃,v)
L2
≤ 2 -W2(G#〃,v) ≤ [
X
..八..........C	2	—	_ C
kG(X)- G (X)k dμ(X) ≤ —(√∈1 + √e2) ,
β
(16)
where FID is the Frechet inception distance (HeuSel et al., 2017) and L is the Lipschitz constant of
the feature extractor of the pre-trained InceptionV3 neural network (Szegedy et al., 2016).
We prove Theorem 4.3 in Appendix A.4. The duality gaps upper bound L2(μ) norm between com-
puted G and true G* maps, and the W2 between true V and generated (fake) distribution G#μ.
Consequently, they upper bound FID between data V and fake (generated) G#仙 distributions.
Relation to previous works. Makkuva et al. (2020); Korotin et al. (2021a) prove related bounds for
W2 with μ, V located on the spaces of the same dimension. Our result holds for different dimensions.
5	Experiments
We evaluate our algorithm in generative modeling of the data distribution from a noise (M5.1) and
unpaired image restoration task (M5.2). Technical details are given in Appendix B. Additionally, in
Appendix B.4 we test our method on toy 2D datasets and evaluate it on the Wasserstein-2 benchmark
(Korotin et al., 2021b) in Appendix B.2. The code is in the supplementary material.
5.1	Modeling Data distribution from Noise Distribution
In this subsection, μ is a 192-dimensional normal noise and V the high-dimensional data distribution.
Let the images from V be of size w × h with c channels. As the embedding Q : X → Y we use a
naive upscaling of a noise. For X ∈ R192 we represent it as 3-channel 8 × 8 image and bicubically
upscale it to the size w × h of data images from V. For grayscale images drawn from V, we stack c
copies over channel dimension.
We test our method on MNIST 32 × 32 (LeCun et al., 1998), CIFAR10 32 × 32 (Krizhevsky et al.,
2009), and CelebA 64 × 64 (Liu et al., 2015) image datasets. In Figure 5, we show random samples
7
Published as a conference paper at ICLR 2022
Figure 5: Randomly generated MNIST, CIFAR10, and CelebA samples by our method (OTM).
Table 1: Results on CIFAR10 dataset.
Table 2: Results on CelebA dataset.
Model	Related Work	Inception ↑	FID J	Model	Related Work	FID J
NVAE PixelIQN EBM DCGAN NCSN NCP-VAE	Vahdat & KaUtZ (2020) Ostrovski et al. (2018) Du & Mordatch (2019) Radford et al. (2016) Song & Ermon (2019) Anejaetal.(2021)		51.71 49.46 40.58 37.70 25.32 24.08			
		- 5.29 6.02 6.64±0.14 8.87±0.12 -		DCGAN DRAGAN BEGAN NVAE NCP-VAE	RadfOrd et al. (2016) Kodali et al. (2017) Berthelot et al. (2017) Vahdat & KautZ (2020) Anejaetal. (2021)	52.0 42.3 38.9 13.4 5.2
				WGAN WGAN-GP WGAN-QC	Arjovsky et al. (2017) Gulrajani et al. (2017) Liu et al. (2019)	41.3 30.0 12.9
WGAN WGAN-GP 3P-WGAN	Arjovsky et al. (2017) Gulrajani et al. (2017) NhanDametal. (2019)	- 6.49±0.09 7.38 ± 0.08	55.2 39.40 28.8			
				AE-OT AE-OT-GAN	An et al. (2020a) An et al. (2020b)	28.6 7.8
AE-OT AE-OT-GAN	An et al. (2020a) An et al.(2020b)	- -	28.5 17.1			
				OTM	Ours	6.5
OTM	Ours	7.42±0.06	21.78			
generated by our approach, namely Optimal Transport Modeling (OTM). To quantify the results,
in Tables 1 and 2 we give the inception (Salimans et al., 2016) and FID (Heusel et al., 2017) scores
of generated samples. Similar to (Song & Ermon, 2019, Appendix B.2), we compute them on 50K
real and generated samples. Additionally, in Appendix B.4, we test our method on 128× 128 CelebA
faces. We provide qualitative results (images of generated faces) in Figure 11.
For comparison, we include the scores of existing generative models of three types: (1) OT map as
the generative model; (2) OT cost as the loss; (3) not OT-based. Note that models of the first type
compute OT in the latent space of an autoencoder in contrast to our approach. According to our
evaluation, the performance of our method is better or comparable to existing alternatives.
5.2	Unpaired Image Restoration
In this subsection, we consider unpaired image restoration tasks on CelebA faces dataset. In this
case, the input distribution μ consists of degraded images, while V are clean images. In all the cases,
embedding Q is a straightforward identity embedding Q(x) ≡ x.
In image restoration, optimality of the restoration map is desired since the output (restored) image
is expected to be close to the input (degraded) one minimizing the transport cost. Note that GANs
do not seek for an optimal mapping. However, in practice, due to implicit inductive biases such as
convolutional architectures, GANS still tend to fit low transport cost maps (BeZenaC et al., 2021).
The experimental setup is shown in Figure 6. We split the dataset in 3 parts A, B, C containing 90K,
90K, 22K samples respectively. To each image we apply the degradation transform (decoloriZation,
noising or occlusion) and obtain the degraded dataset containing of 3 respective parts A, B, C. For
unpaired training we use part A of degraded and part B of clean images. For testing, we use parts C.
Figure 6: The training/testing scheme that we use for unpaired restoration tasks.
To quantify the results we compute FID of restored images w.r.t. clean images of part C. The scores
for denoising, inpainting and coloriZation are given in Table 3, details of each experiment and qual-
itative results are given below.
As a baseline, we include WGAN-GP. For a fair comparison, we fit it using exactly the same hyper-
parameters as in our method OTM-GP. This is possible due to the similarities between our method
and WGAN-GP’s training procedure, see discussion in M4.3. In OTM, there is no GP (MB.3).
8
Published as a conference paper at ICLR 2022
Model	DenoiSing Colorization Inpainting
Input	166.59	32.12	47.65
WGAN-GP	25.49	7.75	16.51
OTM-GP (ours)	10.95	5.66	9.96
OTM (ours)	5.92	5.65	8.13
Table 3: FID] on test part C in image restoration experiments.
Denoising. To create noisy images, we add white normal noise with σ = 0.3 to each pixel. Fig-
ure 7 illustrates image denoising using our OTM approach on the test part of the dataset. We show
additional qualitative results for varying σ in Figure 15 of M(B.4).
(a) Noisy samples.	(b) Pushforward samples.	(c) Original samples.
Figure 7: OTM for image denoising on test C part of CelebA, 64 × 64.
Colorization. To create grayscale images, we average the RGB values of each pixel
illustrates image colorization using OTM on the test part of the dataset.
(a) Grayscale samples.	(b) Pushforward samples.	(c) Original samples.
Figure 8: OTM for image colorization on test C part of CelebA, 64 × 64.
也留守号
≡β留・
Figure 8
Inpainting. To create incomplete images, we replace the right half of each clean image with zeros.
Figure 9 illustrates image inpainting using OTM on the test part of the dataset.
(a) Occluded samples.	(b) Pushforward samples.	(c) Original samples.
Figure 9: OTM for image inpainting on test C part of CelebA, 64 × 64.
6	Conclusion
Our method fits OT maps for the embedded quadratic transport cost between probability distribu-
tions. Unlike predecessors, it scales well to high dimensions producing applications of OT maps
directly in ambient spaces, such as spaces of images. The performance is comparable to other exist-
ing generative models while the complexity of training is similar to that of popular WGANs.
Limitations. For distributions μ, V We assume the existence of the OT map between them. In
practice, this might not hold for all real-world μ,ν. Working with equal dimensions, we focus on
the quadratic ground cost 2∣∣x 一 y∣∣2. Nevertheless, our approach extends to other costs c(∙, ∙),
see Fan et al. (2021). When the dimensions are unequal, we restrict our analysis to embedded
quadratic cost 1 ∣∣Q(x) — y∣2 where Q equalizes dimensions. Choosing the embedding Q might
not be straightforward in some practical problems, but our evaluation (M5.1) shows that even naive
choices of Q work well.
Potential impact and ethics. Real-world image restoration problems often do not have paired
datasets limiting the application of supervised techniques. In these practical unpaired learning prob-
lems, we expect our optimal transport approach to improve the performance of the existing models.
However, biases in data might lead to biases in the pushforward samples. This should be taken into
account when using our method in practical problems.
9
Published as a conference paper at ICLR 2022
Reproducibility. The PyTorch source code is provided at
https://github.com/LituRout/OptimalTransportModeling
The instructions to use the code are included in the README.md file.
7	Acknowledgment
This research was supported by the computational resources provided by Space Applica-
tions Centre (SAC), ISRO. The first author acknowledges the funding by HRD Grant No.
0303T50FM703/SAC/ISRO. Skoltech RAIC center was supported by the RF Government (subsidy
agreement 000000D730321P5Q0002, Grant No. 70-2021-00145 02.11.2021).
References
Matthew Amodio and Smita Krishnaswamy. Travelgan: Image-to-image translation by transfor-
mation vector learning. In Proceedings of the IEEE/CVF Conference on CompUter Vision and
Pattern Recognition, pp. 8983-8992, 2019.
Brandon Amos, Lei Xu, and J Zico Kolter. Input convex neural networks. In International
Conference on Machine Learning, pp. 146-155. PMLR, 2017.
Dongsheng An, Yang Guo, Na Lei, Zhongxuan Luo, Shing-Tung Yau, and Xianfeng Gu. Ae-ot:
A new generative model based on extended semi-discrete optimal transport. In International
COnference on Learning RePresentations, 2020a. URL https://openreview.net/
forum?id=HkldyTNYwH.
Dongsheng An, Yang Guo, Min Zhang, Xin Qi, Na Lei, and Xianfang Gu. Ae-ot-gan: Training gans
from data specific latent distribution. In EUrOPean COnference on COmPUter Vision, pp. 548-564.
Springer, 2020b.
Jyoti Aneja, Alexander Schwing, Jan Kautz, and Arash Vahdat. Ncp-vae: Variational autoencoders
with noise contrastive priors. In Advances in NeUraI InfOrmatiOn PrOcessing Systems Conference,
2021.
Cem Anil, James Lucas, and Roger Grosse. Sorting out lipschitz function approximation. In
International COnference on Machine Learning, pp. 291-3θ1. PMLR, 2019.
Martin Arjovsky and Leon Bottou. Towards principled methods for training generative adversarial
networks. arXiv PrePrint arXiv:1701.04862, 2017.
Martin Arjovsky, Soumith Chintala, and Leon Bottou. Wasserstein generative adversarial networks.
In International conference on machine Iearning, pp. 214-223. PMLR, 2017.
David Berthelot, Thomas Schumm, and Luke Metz. Began: Boundary equilibrium generative ad-
versarial networks. arXiv PrePrint arXiv:1703.10717, 2017.
Emmanuel de Bezenac, Ibrahim Ayed, and Patrick Gallinari. Cyclegan through the lens of (dy-
namical) optimal transport. In Joint EUrOPean COnference on Machine Learning and Knowledge
DiscOVery in Databases, pp. 132-147. Springer, 2021.
Yann Brenier. Polar factorization and monotone rearrangement of vector-valued functions.
COmmUnicatiOns on PUre and applied mathematics, 44(4):375^17, 1991.
Andrew Brock, Jeff Donahue, and Karen Simonyan. Large scale GAN training for high fidelity
natural image synthesis. In International COnference on Learning RePresentations, 2019. URL
https://openreview.net/forum?id=B1xsqj09Fm.
Biwei Dai and Uros Seljak. Sliced iterative normalizing flows. In ICML WOrkshOP on InVertibIe
NeUraI Networks, Normalizing Flows, and ExPIicit LikeIihood Models, 2021.
10
Published as a conference paper at ICLR 2022
Ishan Deshpande, Ziyu Zhang, and Alexander G Schwing. Generative modeling using the sliced
Wasserstein distance. In Proceedings of the IEEE conference on CompUter Vision and Pattern
recognition, pp. 3483-3491, 2018.
DC Dowson and BV Landau. The frechet distance between multivariate normal distributions.
JournaI of multivariate analysis, 12(3):450^55, 1982.
Yilun Du and Igor Mordatch. Implicit generation and generalization in energy-based models. arXiv
PrePrint arXiv:1903.08689, 2019.
Jiaojiao Fan, Shu Liu, Shaojun Ma, Yongxin Chen, and Haomin Zhou. Scalable computation of
monge maps with general costs. arXiv PrePrint arXiv:2106.03812, 2021.
Kilian Fatras, Younes Zine, Remi Flamary, Remi Gribonval, and Nicolas Courty. Learning with
minibatch wasserstein: asymptotic and gradient properties. arXiv PrePrint arXiv:1910.04091,
2019.
Aude Genevay, Gabriel Peyre, and Marco Cuturi. Learning generative models with sinkhorn di-
vergences. In International ConferenCe on ArtifiCiaI Intelligence and Statistics, pp. 1608-1617.
PMLR, 2018.
Ian J Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,
Aaron C Courville, and Yoshua Bengio. Generative adversarial nets. In AdVanCes in Neural
Information Processing Systems Conference, pp. 2674-2680, 2014.
Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville. Im-
proved training of wasserstein gans. In Proceedings of the 31st International ConferenCe on
NeUraI Information ProCessing Systems, pp. 5769-5779, 2017.
Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochreiter.
Gans trained by a two time-scale update rule converge to a local nash equilibrium. AdVances in
neural information ProCessing systems, 30, 2017.
Leygonie Jacob, Jennifer She, Amjad Almahairi, Sai Rajeswar, and Aaron Courville. W2gan: Re-
covering an optimal transport map with a gan. 2018.
Leonid Vitalevich Kantorovich. On a problem of monge. UsPekhi Mat. Nauk, pp. 225-226, 1948.
Tero Karras, Samuli Laine, and Timo Aila. A style-based generator architecture for generative
adversarial networks. In ProCeedings of the IEEE/CVF ConferenCe on ComPUter Vision and
Pattern Recognition, pp. 4401⑷10, 2019.
Cheolhyeong Kim, Seungtae Park, and Hyung Ju Hwang. Local stability of wasserstein gans with
abstract gradient penalty. IEEE TransaCtions on NeUraI NetWorks and Learning Systems, 2021.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv PrePrint
arXiv:1412.6980, 2014.
Diederik P Kingma and Max Welling. Auto-encoding variational bayes. arXiv PrePrint
arXiv:1312.6114, 2013.
Naveen Kodali, Jacob Abernethy, James Hays, and Zsolt Kira. On convergence and stability of gans.
arXiv PrePrint arXiv:1705.07215, 2017.
Alexander Korotin, Vage Egiazarian, Arip Asadulaev, Alexander Safin, and Evgeny Burnaev.
Wasserstein-2 generative networks. In International ConferenCe on Learning RePresentations,
2021a. URL https://openreview.net/forum?id=bEoxzW_EXsa.
Alexander Korotin, Lingxiao Li, Aude Genevay, Justin Solomon, Alexander Filippov, and Evgeny
Burnaev. Do neural optimal transport solvers work? a continuous wasserstein-2 benchmark. arXiv
PrePrint arXiv:2106.01954, 2021b.
Alex Krizhevsky, Geoffrey Hinton, et al. Learning multiple layers of features from tiny images.
2009.
11
Published as a conference paper at ICLR 2022
Yann LeCun, Leon Bottou, YoshUa Bengio, and Patrick Haffner. Gradient-based learning applied to
document recognition. Proceedings of the IEEE, 86(11):2278-2324, 1998.
Na Lei, Kehua Su, Li Cui, Shing-Tung Yau, and Xianfeng David Gu. A geometric view of optimal
transportation and generative model. Computer Aided GeometriC Design, 68:1-21, 2019.
Huidong Liu, Xianfeng Gu, and Dimitris Samaras. Wasserstein gan with quadratic transport cost.
In ProCeedings of the IEEE/CVF International ConferenCe on Computer Vision (ICCV), October
2019.
Shu Liu, Shaojun Ma, Yongxin Chen, Hongyuan Zha, and Haomin Zhou. Learning high dimensional
wasserstein geodesics. arXiv Preprint arXiv:2102.02992, 2021.
Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the wild.
In ProCeedings of the IEEE international conference on Computer vision, pp. 3730-3738, 2015.
Guansong Lu, Zhiming Zhou, Yuxuan Song, Kan Ren, and Yong Yu. Guiding the one-to-one map-
ping in cyclegan via optimal transport. In ProCeedings of the AAAI ConferenCe on ArtifiCiaI
Intelligence, volume 33, pp. 4432⑷39, 2019.
Guansong Lu, Zhiming Zhou, Jian Shen, Cheng Chen, Weinan Zhang, and Yong Yu. Large-scale op-
timal transport via adversarial training with cycle-consistency. arXiv Preprint arXiv:2003.06635,
2020.
Ashok Makkuva, Amirhossein Taghvaei, Sewoong Oh, and Jason Lee. Optimal transport mapping
via input convex neural networks. In International ConferenCe on MaChine Learning, pp. 6672-
6681.PMLR, 2020.
Anton Mallasto, Jes Frellsen, Wouter Boomsma, and Aasa Feragen. (q, p)-wasserstein gans: Com-
paring ground metrics for wasserstein gans. arXiv Preprint arXiv:1902.03642, 2019.
Xudong Mao, Qing Li, Haoran Xie, Raymond YK Lau, Zhen Wang, and Stephen Paul Smol-
ley. Least squares generative adversarial networks. In Proceedings of the IEEE international
Conference on CompUter Vision, pp. 2794-2802, 2017.
Robert J McCann and Brendan Pass. Optimal transportation between unequal dimensions. ArChiVe
for RationaI MeChaniCs and AnaIysis, 238(3):1475-1520, 2020.
Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normalization for
generative adversarial networks. In International ConferenCe on Learning Representations, 2018.
Quan Hoang Nhan Dam, Trung Le, Tu Dinh Nguyen, Hung Bui, and Dinh Phung. Threeplayer
wasserstein gan via amortised duality. In Proc. of the 28th Int.Joint Conf. on ArtifiCiaI Intelligence
(IJCAI), 2019.
Georg Ostrovski, Will Dabney, and Remi Munos. Autoregressive quantile networks for generative
modeling. In International ConferenCe on MaChine Learning, pp. 3936-3945. PMLR, 2018.
Brendan Pass. Regularity of optimal transportation between spaces with different dimensions. arXiv
PreprintarXiV:1008.1544, 2010.
Giorgio Patrini, Rianne van den Berg, Patrick Forre, Marcello Carioni, Samarth Bhargav, Max
Welling, Tim Genewein, and Frank Nielsen. Sinkhorn autoencoders. In UnCertainty in ArtifiCiaI
Intelligence, pp. 733-743. PMLR, 2020.
Henning Petzka, Asja Fischer, and Denis Lukovnikov. On the regularization of wasserstein gans. In
International ConferenCe on Learning Representations, 2018.
Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with deep
convolutional generative adversarial networks. In 4th International ConferenCe on Learning
Representations, ICLR 2016, San Juan, PUerto Rico, May 2-4, 2016, ConferenCe TraCk
Proceedings, 2016. URL http://arxiv.org/abs/1511.0 64 34.
R Tyrrell Rockafellar. Integral functionals, normal integrands and measurable selections. In
Nonlinear Operators and the calculus of Variations, pp. 157-207. Springer, 1976.
12
Published as a conference paper at ICLR 2022
Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. Advances in neural information processing systems, 29:
2234-2242, 2016.
Maziar Sanjabi, Meisam Razaviyayn, Jimmy Ba, and Jason D Lee. On the convergence and ro-
bustness of training gans with regularized optimal transport. AdvanceS in Neural Information
ProceSSing Systems, 2018:7091-7101, 2018.
Filippo Santambrogio. Optimal transport for applied mathematicians. Birkauser, NY, 55(58-63):94,
2015.
Vivien Seguy, Bharath Bhushan Damodaran, Remi Flamary, Nicolas Courty, Antoine Rolet, and
Mathieu Blondel. Large scale optimal transport and mapping estimation. In International
COnference on Learning RePreSentations, 2018.
Yang Song and Stefano Ermon. Generative modeling by estimating gradients of the data distribution.
In Proceedings of the 33rd AnnuaI COnference on NeUraI InfOrmatiOn PrOceSSing Systems, 2019.
Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jon Shlens, and Zbigniew Wojna. Rethink-
ing the inception architecture for computer vision. In Proceedings of the IEEE conference on
computer vision and Pattem recognition, pp. 2818-2826, 2016.
Amirhossein Taghvaei and Amin Jalali. 2-wasserstein approximation via restricted convex potentials
with application to improved training for gans. arXiv PrePrint arXiv:1902.07197, 2019.
Ugo Tanielian and Gerard Biau. Approximating lipschitz continuous functions with groupsort neu-
ral networks. In International COnference on ArtificiaI Intelligence and StatiStics, pp. 442U50.
PMLR, 2021.
Ilya Tolstikhin, Olivier Bousquet, Sylvain Gelly, and Bernhard Schoelkopf. Wasserstein auto-
encoders. arXiv PrePrint arXiv:1711.01558, 2017.
Arash Vahdat and Jan Kautz. Nvae: A deep hierarchical variational autoencoder. In AdvanceS in
NeUraI InfOrmatiOn PrOceSSing SyStemS Conference, 2020.
Cedric Villani. OPtimaI transport: old and new, volume 338. Springer Science & Business Media,
2008.
Yujia Xie, Minshuo Chen, Haoming Jiang, Tuo Zhao, and Hongyuan Zha. On scalable and efficient
computation of large scale optimal transport. In International COnference on Machine Learning,
pp. 6882-6892. PMLR, 2019.
Jun-Yan Zhu, Taesung Park, Phillip Isola, and Alexei A Efros. Unpaired image-to-image trans-
lation using cycle-consistent adversarial networks. In COmPUter ViSiOn (ICCV), 2017 IEEE
International COnference on, 2017.
13
Published as a conference paper at ICLR 2022
A Proofs
A.1 Proof of Equivalence: Equation (10) and (11)
Proof. Pick any T : X → Y . For every point x ∈ X by the definition of the supremum we have
hX,T(X)i-ψ(T(X))≤ysu∈Yp{hX,yi-ψ(y)}.
Integrating the expression w.r.t. X 〜μ yields
/ {(x,T(x)) — ψ (T(X))}dμ(X) ≤ / sup {(X,y)- ψ(y)} dμ(X) = Lι∙
Since the inequality holds for all T : X → Y, we conclude that
L2 = sup / {(x,T(x)) — Ψ (T(X))}dμ(X) ≤ / sup {(X,y) — ψ(y)} dμ(X) = Li,
T：X→γJχ	JX y∈Y
i.e. L2 ≤ L1. Now let us prove that the sup on the left side actually equals L1. To do this, we need
to show that for every > 0 there exists T : X → Y satisfying
{ {(x, Te(x)i — ψ (Te(x))}dμ(x) ≥ Li — e.
X
First note that for every X ∈ X by the definition of the supremum there exists ye = ye (X) which
provides
hx, y(x)i - ψ (y(x)) ≥ sup{hx,yi - ψ(y)} - .
y∈Y
We take Te(χ) = ye(χ) for all X ∈ X and integrate the previous inequality w.r.t. X ~ μ. We obtain
{ {(x,Te(X)i — Ψ (Te(X))}dμ(X) ≥ S sup {(X,y) — ψ(y)} dμ(X) — e = Li — e,
X	X y∈Y
which is the desired inequality.
□
A.2 Proof of Lemma 4.1
Proof. It is enough to prove that ψ* (x) = (T* (x), Xi — ψ* (T(x)) holds μ-almost everywhere, i.e.,
T *(x) ∈ arg sup {(x, y)— ψ*(y)}. Since V = T# μ, we use (9) with ψ  ψ* to derive
y∈RD
W2 (μ,ν) - Jx 1 kX『d〃(X)-(11∣yk2dν(y)
—/ ψ*(X)dμ(X) — / ψ*(y)dν(y) = — / ψ*(X)dμ(X) — / ψ*(T*(X))dμ(X)
—I [Ψ*(x) + Ψ* (T*(x) )]dμ(X) ≤
JX ×----------------}
^^™^^{^^^^^^™
≥hT *(x),x〉
—I (T*(x),x>dμ(x)
X
(17)
lχX kx - T *(x)k2dμ(x) — L 2 ∣∣x∣∣2dμ(x) — L 1 ∣∣T *(x)∣∣2dμ(x)=
W2(μ,ν) — Zx 2kχk2dμ(X)- J] 1 ∣∣yk2dν(y).
As a result, inequality (17) becomes the equality, in particular, ψ*(x) + ψ* (T*(x)) =(T*(x), Xi
holds μ-almost everywhere.
□
14
Published as a conference paper at ICLR 2022
A.3 Proof of Lemma 4.2
Proof. Let QW22 denote the Q-embedded quadratic cost. We use the change of variables formula to
derive
QW2(μ,ν) =πeinf	了 2kQ(χ) -yk2d∏(χ,y)=
ττ0∈勰 μι∕)Jx y2kx — yk2d∏0(χ,y) = w2(Q#〃,ν),	(⑻
i.e., computing the OT plan for QW2(μ, V) boils down to computing the OT plan for W2(Q#M, ν).
It follows that [idRH, T* (Q(X))]#仙=[idRH, G*]#m is an OT plan for QW2(μ, V), and G* is the
OT map. Inclusion (15) now follows from Lemma 4.1.	口
A.4 Proof of Theorem 4.3
>Λ	C τ-⅜∙	1	_	C / 7	x-»\
Proof. Pick any G0 ∈ arg suPG L(ψ, G)
argsuPG RX {hQ(x),G(x)i - ψ⅛(G(x))} dμ(x) or,
equivalently, for all X ∈ RH, G0(χ) ∈ argsuPy {hQ(x),y)- ψ⅛(y)}. Consequently, forall y ∈ RD
hQ(χ),GO(X)i - ψ(G0(X)) ≥ hQ(X), yi - ψ(y)
which after regrouping the terms yields
ψ⅛) ≥ ψ(G0(X)) + hQ(X),y - GW).
El ♦	.1 .	/ ∖ ∙	.	1 ∙ . <	F	f . <Λ ?	X-*! / ∖ /`	? n ∙	? ∙
This means that Q(X) is contained in the subgradient ∂ψ at G0(X) for a convex ψ. Since ψ is
β-strongly convex, for points G(x), G0(x) ∈ RD and Q(X) ∈ ∂ψ (G0(x)) we derive
Ψ(G(x)) ≥ Ψ(G0(x)) +〈Q(x), G(x) — G0(x)) + 2∣∣G0(x) — G(x)∣∣2.
Regrouping the terms, this gives
[hQ(x), G(Xy)- ψ(G0(X))] - [(Q(x), G(Xy)- Ψ(G(x))] ≥ 2∣G0(x) - G(x)∣2.
Integrating w.r.t. X ~ μ yields
eι = L(ψ, G0) - L(ψ, G) ≥ β( 1 ∣G0(x) - G(x)∣2dμ(x) = 2 ∙ ∣G -⑺隹⑷.
Let G* be the OT map from μ to V. We use G#m = V to derive
L(ψ,G0) = / nhQ(x),G0(x)) - ψ(G0(x))} dμ(x) + / ψ(y)dν(y) =
J n hQ(x), G0(x)) - ψ(G0(x))} dμ(x) + J ψ(G*(x))dμ(x)=
/ ∖ hQ(x), G(Xy)- ψ(G0(x)) + ψ(G*(x)) , dμ(x) ≥
z
I	≥hQ(x),G*(x)i + β 2 kG0-G*k2
[hQ(X),G*(X))dμ(X) + β [ 1 ∣∣G0 - G*∣2dμ(X).
X	X2
Let ψ* be an optimal potential in (14). Thanks to Lemma 4.2, we have
inf suP L(ψ, G) = L(ψ *, G*) =
[{hQ(X),G*(X))- ψ*(g*(x))}必⑺+ ψ ψ*(y)dν(y) =
XY
(19)
(20)
15
Published as a conference paper at ICLR 2022
[{hQ(x), G*(x)i — ψ* (G*(x))} dμ(x) + ψ ψ* (G*(x))dμ(x)=
XX
/ hQ(x), G*(x)>dμ(x)
X
By combining (20) with (21), we obtain
C = L(Ψ,G') — L(ψ*,G*) ≥ β∣χ 2kG0 — G*k2d〃(x) = Ie ∙∣Q- G*kL2(μ)
(21)
(22)
The right-hand inequality of (16) follows from the triangle inequality combined with (19) and (22).
The middle inequality of (16) follows from (Korotin et al., 2021a, Lemma A.2) and G)μ = ν.
Now we prove the left-hand inequality of (16). Let I be the feature extractor of the pre-trained
IncePtionV3 neural networks. FID score between generated (fake) G#仙 and data distribution V is
FID(G#M, V)= FD(Z#G#M, I#V) ≤ 2 ∙ W2(Z#G#M,I#V),	(23)
where FD(∙, ∙) is the Frechet distance which lower bounds 2 ∙ W2, see (Dowson & Landau, 1982).
Finally, from (Korotin et al., 2021a, Lemma A.1) it follows that
W2(I#G#〃,I#V) ≤ L1 2 ∙ W2(G#〃, V).	(24)
Here L is the LiPschitz constant of I. We combine (23) and (24) to get the left-hand inequality
in (16).	口
B Experimental Details
We use the PyTorch framework. All the exPeriments are conducted on 2×V100 GPUs. We comPute
incePtion and FID scores with the official imPlementation from OPenAI1 and TTUR2. The comPared
results are taken from the resPective PaPers or Publicly available source codes.
B.1	General Training Details
MNIST (LeCun et al., 1998). On MNIST, we use x ∈ R192 and y ∈ R32×32. The batch size is 64,
learning rate 2 ∙ 10-4, optimizer Adam (Kingma & Ba, 2014) with betas (0,0.9), gradient optimality
coefficient λ = 10, and the number of training ePochs T = 30. We observe stable training while
updating ψ once in multiple G updates, i.e., kG = 2 and kψ = 1.
CIFAR10 (Krizhevsky et al., 2009). We use all 50000 samples while training. The latent vector
x ∈ R192 and y ∈ R32×32×3, batch size 64, λ = 10, kG = 1, kψ = 1, T = 1000, Adam optimizer
with betas (0,0.9), and learning rate 2 ∙ 10-4 for G and 1 ∙ 10-3 for ψ.
CelebA (Liu et al., 2015). We use x ∈ R192 and y ∈ R64×64×3. The images are first cropped at the
center with size 140 and then resized to 64 × 64. We consider all 202599 samples. We use Adam
with betas (0,0.9), T = 200, KG = 2, Kψ = 1 and learning rate 2 ∙ 10-4.
Image restoration. In the unpaired image restoration experiments, we use Adam optimizer with
betas (0,0.9), KG = 5, Kψ = 1, λ = 0, learning rate 1 ∙ 10-4 and train for T = 300 epochs.
CelebA128x128 (Liu et al., 2015). On this dataset, we resize the cropped images as in CelebA to
128 X 128, i.e. y ∈ r128×128×3. Here, KG = 5, Kψ = 1, λ = 0.01, learning rate 1 ∙ 10-4 and
betas=(0.5, 0.999). The batch size is reduced to 16 so as to fit in the GPU memory.
Anime128x1283 . This dataset consists of 500000 high resolution images. We resize the cropped
images as in CelebA to 128 × 128, i.e. y ∈ R128×128×3. Here, KG = 5, Kψ = 1, λ = 0.01,
learning rate 2 ∙ 10-4, batch size 16, and betas=(0,0.9).
Toy datasets. The dimension is D = H = 2, total number of samples is
10000. We use the batch size 400, λ = 0.1, Kψ = 1, KG = 16, and
1IS: https://github.com/openai/improved-gan/tree/master/inception_score
2FID: https://github.com/bioinf-jku/TTUR
3Anime: https://www.kaggle.com/reitanaka/alignedanimefaces
16
Published as a conference paper at ICLR 2022
T = 100. The optimizer is Adam With betas (0.5,0.99) and learning rate 1 ∙
10-3 . We use the following datasets: Gaussian to mixture of Gaussians4, two moons
(sklearn.datasets.make_moons), circles (sklearn.datasets.make_circles),
gaussian to S-curve (sklearn.datasets.make_s_curve), and gaussian to sWiss roll
(sklearn.datasets.make_swiss_roll).
Wasserstein-2 benchmark (Appendix B.2). The dimension is D = H = 64 × 64 × 3. We use
batch size 64, λ = 0, Kψ = 1, KG = 5, learning rate 10-4, and Adam optimizer With default betas.
B.2	Evaluation on the Continuous Wasserstein-2 Benchmark
To empirically shoW that the method recovers the optimal transport maps Well on equal dimensions,
We evaluate it on the recent continuous Wasserstein-2 benchmark by Korotin et al. (2021b). The
benchmark provides a number of artificial test pairs (μ, V) of continuous probability distributions
with analytically known OT map T* between them.
For evaluation, we use the ”Early” images benchmark pair
(D = 12288), see (Korotin et al., 2021b, M4.1) for details.
We adopt the L2-unexplained percentage metric (Korotin
et al., 2021a, M5.1) to quantify the recovered OT map T:
L2-UVP(T) = 100 ∙ IlT - T* k2/Var(ν)%. For our method the
Method	L2-UVPJ
[mm：Re 一	-14%-
OTM (ours)	1.32%
Table 4: L2-UVP metric
of the recovered transport
map on the ”Early” images
benchmark pair.
L2-UVP metric is only ≈ 1%, see Table 4. This is comparable
to the best dMM:Re method which the authors evaluate on their
benchmark. The qualitative results are given in Figure 10.
Figure 10: Qualitative results of OTM on the ”Early” images benchmark pair (μ, V) by Korotin et al.
(2021b). The 1st line shows samples X 〜μ, the 2nd line shows fitted OT map T(x), and the 3rd
line shows the corresponding optimal map T* (x)〜V.



B.3	Further Discussion and Evaluation
Generative modeling. In the experiments, we use the gradient penalty on ψ for better stability of
optimization. The penalty is intended to make the gradient norm of the optimal WGAN critic equal
to 1 (Gulrajani et al., 2017, Corollary 1). This condition does not necessarily hold for optimal ψ* in
our case and consequently might introduce bias to optimization.
To address this issue, we additionally tested an alternative regularization which we call the gradient
optimality. For every optimal potential ψ* and map G* of problem (14), we get from Lemma 4.2:
▽g{Ex” KQ(x), G*(x)i - ψ* (G*(x)))] } = Ex” [Q(x)] - Ex〜μ [vψ* (G*(x)))] = 0. (25)
Since μ is normal noise distribution and Q(X) is naive upscaling (M5.1), the above expression sim-
plifies to Ex〜μVψ* (G*(X))) = 0. Based on this property, we establish the following regularizer
λ∣Ex〜μ Vψ (G(X))) k for λ > 0 and add this to Lψ in our Algorithm 1.
While gradient penalty considers expectation of norm, gradient optimality considers norm of expec-
tation. The gradient optimality is always non-negative and vanishes at the optimal point.
4https://github.com/AmirTag/OT- ICNN
17
Published as a conference paper at ICLR 2022
We conduct additional experiments with the gradient optimality and
compare FID scores for different λ in Table 5. It leads to an improve-
ment of FID score from the earlier 7.7 with the gradient penalty to
the current 6.5 with the gradient optimality on CelebA (Table 2).
Unpaired restoration. In the unpaired restoration experiments
(M5.2), we test OTM with the gradient penalty to make a fair com-
parison with the baseline WGAN-GP. We find OTM without regular-
ization, i.e., λ = 0 works better than OTM-GP (Table 3). In practice,
more G updates for a single ψ update works fairly well (MB.1).
λ	I FID； I
0.001	16.91
0.01	16.22
0.1	16.70
1.0	10.01
I 10 I	I 6.50 I
Table 5: Ablation study of
gradient optimality in OTM.
B.4	Additional Qualitative Results
OTM works with both the grayscale and color embeddings of noise in the ambient space.
CelebA128x128. Figure 11 shows the grayscale embedding Q(x), the recovered transport map
G(x), and independently drawn real samples y 〜V.
Figure 11: OTM between 128-dimensional noise and CelebA, 128 × 128. The 1st line shows
the grayscale embedding Q (repeating bicubic upscaling of a noise, 16 × 8), the 2nd line shows
corresponding generated samples, and the 3rd line shows random samples from the dataset.
Anime128x128. Figure 12 shows the color embedding Q(x), the recovered transport map G(x),
and independently drawn real samples y ~ ν.
Figure 12: OTM between 192-dimensional noise and Anime, 128 × 128. The 1st line shows the
color embedding Q (bicubic upscaling of a noise, 3 × 8 × 8), the 2nd line shows corresponding
generated samples, and the 3rd line shows random samples from the dataset.
The extended qualitative results with color embedding on MNIST, CIFAR10, and CelebA are
shown in Figure 13a, Figure 13b, and Figure 13c respectively. Table 6 shows quantiative results
on MNIST. The color embedding Q is bicubic upscaling of a noise in R3×8×8 . The samples are
18
Published as a conference paper at ICLR 2022
Table 6: Results on MNIST dataset.
Model	Related Work	FID J
VAE	Kingma &WeUing (2013)	23.8±0.6
LSGAN	Mao et al. (2017)	7.8±0.6
BEGAN	Berthelotet al.(2017)	13.1±1.0
WGAN	ArjoVSky et al. (2017)	6.7±0.4
SIG	Dai&Seljak (2021)	4.5
AE-OT	An et al. (2020a)	6.2±0.2
AE-OT-GAN	An et al. (2020b)	3.2
OTM	Ours	2.4
generated randomly (uncurated) by fitted optimal transport maps between noise and ambient space,
e.g., spaces of high-dimensional images. Figure 14 illustrates latent space interpolation between the
generated samples. Figure 15 shows denoising of images with varying levels ofσ = 0.1, 0.2, 0.3, 0.4
by the model trained with σ = 0.3.
3
q
3
O
3 √
3 r
I 5
7 n
oι I
O O
7 7
N O
7 7
/ 3 Oo ɪ 7‰ 7
(a) MNIST, 32 × 32, grayscale	(b) CIFAR10, 32 × 32, RGB	(c) CelebA, 64 × 64, RGB
Figure 13: Randomly generated MNIST, CIFAR10, and CelebA samples by our method (OTM).
Figure 14: OTM for latent space interpolation on CelebA, 64 × 64. Extended samples.
Toy datasets. Figure 16 shows the results of our method and related approaches (M3) on a toy 2D
dataset. Figure 17 shows the results of our method applied to other toy datasets.
B.5 Neural Network Architectures
This section contains architectures on CIFAR10 (Table 7), CelebA (Table 8), CelebA 128 × 128
(Figure 11) generation, image restoration tasks (Table 9), evaluation on the toy 2D datasets and
Wasserstein-2 images benchmark (Table 4).
In the unpaired restoration tasks (M5.2), we use UNet architecture for transport map G and convolu-
tional architecture for potential ψ. Similarly to (Song & Ermon, 2019), we use BatchNormaliation
(BN) and InstanceNormalization+ (INorm+) layers. In the ResNet architectures, we use the Resid-
ualBlock of NCSN (Song & Ermon, 2019).
In the toy 2D examples, we use a simple multi-layer perceptron with 3 hidden layers consisting of
128 neurons each and LeakyReLU activation. The final layer is linear without any activation.
19
Published as a conference paper at ICLR 2022
(a) Noisy samples.	(b) Pushforward samples.	(c) Clean.
Figure 15: OTM for image denoising for varying levels of noise on test C part of CelebA, 64 × 64.
(a) LSOT (Seguy et al., 2018)
(b) W2GAN (Jacob et al., 2018)
(c) WGAN-LP (Petzka et al., 2018)
(d) ICNN-OT(Makkuva et al., 2020)
(f) OTM (ours)
Figure 16: Mapping between a Gaussian and a Mixture of 8 Gaussians in 2D by various methods.
The colors green, blue, and peru represent input, pushforward, and output samples respectively.
The transport map G and potential ψ architectures on MNIST 32 × 32, CelebA 128 × 128, and
Anime 128 × 128 are the generator and discriminator architectures of WGAN-QC Liu et al. (2019)
respectively.
In the evaluation on the Wasserstein-2 benchmark, we use publicly available Unet5 architecture for
transport map T and WGAN-QC discriminator’s architecture for ψ (Liu et al., 2019). These neural
network architectures are the same as the authors of the benchmark use.
5https://github.com/milesial/Pytorch-UNet
20
Published as a conference paper at ICLR 2022
(c) S Curve
Figure 17: OTM on toy datasets, D = 2. Here, the colors green, blue, and peru represent input,
pushforward, and output samples respectively.
(d) Swiss Roll
Table 7:	Architectures for generation task on CIFAR10, 32 × 32.
G(.)…
Noise: X ∈ R128
Linear, Reshape, output shape: [128 × 4 × 4]
ResidualBlock Up, output shape: [128 × 8 × 8]
ResidualBlock Up, output shape: [128 × 16 × 16]
ResidualBlock Up, output shape: [128 × 32 × 32]
Conv, Tanh, output shape: [3 × 32 × 32]
ψ().........
Target: y ∈ R3 × 32 × 32
ResidualBlock Down, output shape: [128 × 16 × 16]
ResidualBlock Down, output shape: [128 × 8 × 8]
ResidualBlock, output shape: [128 × 8 × 8]
ResidualBlock, output shape: [128 × 8 × 8]
ReLU, Global sum pooling, output shape: [128 × 1 × 1]
Linear, output shape: [1]
21
Published as a conference paper at ICLR 2022
Table 8:	Architectures for generation task on Celeba, 64 × 64.
Gu
Noise: X ∈ R128
ConvTranspose, BN, LeakyReLU, output shape: [256 × 1 × 1]
ConvTranspose, BN, LeakyReLU, output shape: [512 × 4 × 4]
Conv, PixelShuffle, BN, LeakyReLU, output shape: [512 × 8 × 8]
Conv, PixelShuffle, BN, LeakyReLU, output shape: [512 × 16 × 16]
Conv, PixelShuffle, BN, LeakyReLU, output shape: [512 × 32 × 32]
ConvTranspose, Tanh, output shape: [3 × 64 × 64]
ψ.)
Target: y ∈ R3 × 64 × 64
Conv, output shape: [128 × 64 × 64]
ResidualBlock Down, output shape: [256 × 32 × 32]
ResidualBlock Down, output shape: [256 × 16 × 16]
ResidualBlock Down, output shape: [256 × 8 × 8]
ResidualBlock Down, output shape: [128 × 4 × 4]
Conv, output shape: [1]
Table 9:	Architectures for restoration tasks on CelebA, 64 × 64.
Gu
Input: X ∈ R3 × 64 × 64
Conv, BN, LeakyReLU, output shape: [256 × 64 × 64]
Conv, LeakyReLU, AvgPool, output shape: [256 × 32 × 32], x1
Conv, LeakyReLU, AvgPool, output shape: [256 × 16 × 16], x2
Conv, LeakyReLU, AvgPool, output shape: [256 × 8 × 8], x3
Conv, LeakyReLU, AvgPooL output shape: [256 X 4 X 4],x4
Nearest Neighbour Upsample, Conv, BN, ReLU, output shape: [256 X 8 X 8],y3
Add (y3, x3), output shape: [256 X 8 X 8], y3
Nearest Neighbour Upsample, Conv, BN, ReLU, output shape: [256 X 16 X 16], y2
Add (y2, x2), output shape: [256 X 16 X 16], y2
Nearest Neighbour Upsample, Conv, BN, ReLU, output shape: [256 X 32 X 32], y1
Add (y1, x1), output shape: [256 X 32 X 32], y1
Nearest Neighbour Upsample, Conv, BN, ReLU, output shape: [256 X 64 X 64], y
Add (y, x), output shape: [256 X 64 X 64], y
ConvTranspose, Tanh, output shape: [3 X 64 X 64]
ψ.)
Target: y ∈ R3 × 64 × 64
Conv, LeakyReLU, AvgPool, output shape: [256 X 32 X 32]
Conv, LeakyReLU, AvgPool, output shape: [256 X 16 X 16]
Conv, LeakyReLU, AvgPool, output shape: [256 X 8 X 8]
Conv, LeakyReLU, AvgPool, output shape: [256 X 4 X 4]
Linear, output shape: [1]
22