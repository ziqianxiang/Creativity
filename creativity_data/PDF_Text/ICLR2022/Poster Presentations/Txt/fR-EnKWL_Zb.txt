Published as a conference paper at ICLR 2022
Quadtree Attention for Vision Transformers
Shitao Tang1*, Jiahui Zhang2； Siyu Zhu2, Ping Tan12
1Simon Fraser University, 2Alibaba A.I. Lab
shitaot@sfu.ca, zjhthu@gmail.com,
siting.zsy@alibaba-inc.com, pingtan@sfu.ca
Ab stract
Transformers have been successful in many vision tasks, thanks to their capa-
bility of capturing long-range dependency. However, their quadratic computa-
tional complexity poses a major obstacle for applying them to vision tasks re-
quiring dense predictions, such as object detection, feature matching, stereo, etc.
We introduce QuadTree Attention, which reduces the computational complex-
ity from quadratic to linear. Our quadtree transformer builds token pyramids
and computes attention in a coarse-to-fine manner. At each level, the top K
patches with the highest attention scores are selected, such that at the next level,
attention is only evaluated within the relevant regions corresponding to these
top K patches. We demonstrate that quadtree attention achieves state-of-the-
art performance in various vision tasks, e.g. with 4.0% improvement in feature
matching on ScanNet, about 50% flops reduction in stereo matching, 0.4-1.5%
improvement in top-1 accuracy on ImageNet classification, 1.2-1.8% improve-
ment on COCO object detection, and 0.7-2.4% improvement on semantic seg-
mentation over previous state-of-the-art transformers. The codes are available at
https://github.com/Tangshitao/QuadtreeAttention.
1	Introcution
Transformers can capture long-range dependencies by the attention module and have demonstrated
tremendous success in natural language processing tasks. In recent years, transformers have also
been adapted to computer vision tasks for image classification (Dosovitskiy et al., 2020), object
detection (Wang et al., 2021c), semantic segmentation (Liu et al., 2021), feature matching (Sarlin
et al., 2020), and stereo (Li et al., 2021), etc. Typically, images are divided into patches and these
patches are flattened and fed to a transformer as word tokens to evaluate attention scores. However,
transformers have quadratic computational complexity in terms of the number of tokens, i.e. number
of image patches. Thus, applying transformers to computer vision applications requires careful
simplification of the involved computation.
To utilize the standard transformer in vision tasks, many works opt to apply it on low resolution or
sparse tokens. ViT (Dosovitskiy et al., 2020) uses coarse image patches of 16 × 16 pixels to limit
the number of tokens. DPT (Ranftl et al., 2021) up-samples low-resolution results from ViT to high
resolution maps to achieve dense predictions. SuperGlue (Sarlin et al., 2020) applies transformer on
sparse image keypoints. Focusing on correspondence and stereo matching applications, Germain
et al. (2021) and Li et al. (2021) also apply transformers at a low resolution feature map.
However, as demonstrated in several works (Wang et al., 2021c; Liu et al., 2021; Sun et al., 2021; Li
et al., 2021; Shao et al., 2020), applying transformers on high resolution is beneficial for a variety
of tasks. Thus, many efforts have been made to design efficient transformers to reduce computa-
tional complexity. Linear approximate transformers (Katharopoulos et al., 2020; Wang et al., 2020)
approximate standard attention computation with linear methods. However, empirical studies (Ger-
main et al., 2021; Chen et al., 2021) show those linear transformers are inferior in vision tasks. To
reduce the computational cost, the PVT (Wang et al., 2021c) uses downsampled keys and values,
which is harmful to capture pixel-level details. In comparison, the Swin Transformer (Liu et al.,
* Equal contribution
1
Published as a conference paper at ICLR 2022
Figure 1: Illustration of QuadTree Attention. Quadtree attention first builds token pyramids by
down-sampling the query, key and value. From coarse to fine, quadtree attention selects top K
(here, K = 2) results with the highest attention scores at the coarse level. At the fine level, attention
is only evaluated at regions corresponding to the top K patches at the previous level. The query
sub-patches in fine levels share the same top K key tokens and coarse level messages, e.g., green
and yellow sub-patches at level 2 share the same messages from level 1. We only show one patch in
level 3 for simplicity.
2021) restricts the attention in local windows in a single attention block, which might hurt long-
range dependencies, the most important merit of transformers.
Unlike all these previous works, we design an efficient vision transformer that captures both fine
image details and long-range dependencies. Inspired by the observation that most image regions are
irrelevant, we build token pyramids and compute attention in a coarse to fine manner. In this way,
we can quickly skip irrelevant regions in the fine level if their corresponding coarse level regions are
not promising. For example, as in Figure 1, at the 1st level, we compute the attention of the blue
image patch in image A with all the patches in image B and choose the top K (here, K = 2) patches
which are also highlighted in blue. In the 2nd level, for the four framed sub-patches in image A
(which are children patches of the blue patch at the 1st level), we only compute their attentions with
the sub-patches corresponding to the top K patches in image B at the 1st level. All the other shaded
sub-patches are skipped to reduce computation. We highlight two sub-patches in image A in yellow
and green. Their corresponding top K patches in image B are also highlighted in the same color.
This process is iterated in the 3rd level, where we only show the sub-sub-patches corresponding to
the green sub-patch at the 2nd level. In this manner, our method can both obtain fine scale attention
and retain long-range connections. Most importantly, only sparse attention is evaluated in the whole
process. Thus, our method has low memory and computational costs. Since a quadtree structure is
formed in this process, we refer to our method as QuadTree Attention, or QuadTree Transformer.
In experiments, we demonstrate the effectiveness of our quadtree transformer in both tasks requiring
cross attention, e.g. feature matching and stereo, and tasks only utilizing self-attention, e.g. im-
age classification and object detection. Our method achieves state-of-the-art performance with sig-
nificantly reduced computation, comparing to relevant efficient transformers (Katharopoulos et al.
(2020); Wang et al. (2021c); Liu et al. (2021)). In feature matching, we achieve 61.6 AUC@20°
in ScanNet (Dai et al., 2017), 4.0 higher than the linear transformer (Katharopoulos et al., 2020)
but with similar flops. In stereo matching, we achieve a similar end-point-error as standard trans-
former, (Li et al., 2021) but with about 50% flops reduction and 40% memory reduction. In image
classification, we achieve 84.0% top-1 accuracy in ImageNet (Deng et al., 2009), 5.7% higher than
ResNet152 (He et al., 2016) and 1.0% higher than the Swin Transformer-S (Liu et al., 2021). In ob-
ject detection, our QuadTree Attention + RetinaNet achieves 47.9 AP in COCO (Lin et al., 2014), 1.8
higher than the backbone PVTv2 (Wang et al., 2021b) with fewer flops. In semantic segementation,
QuadTree Attention improves the performance by 0.7-2.4%.
2	Related work
Efficient Transformers. Transformers have shown great success in both natural language pro-
cessing and computer vision. Due to the quadratic computational complexity, the computation of
2
Published as a conference paper at ICLR 2022
full attention is unaffordable when dealing with long sequence tokens. Therefore, many works de-
sign efficient transformers, aiming to reduce computational complexity (Katharopoulos et al., 2020;
Choromanski et al., 2020; Shao et al., 2021; Wang et al., 2020; Lee et al., 2019; Ying et al., 2018).
Current efficient transformers can be categorized into three classes. 1) Linear approximate atten-
tion (Katharopoulos et al., 2020; Choromanski et al., 2020; Wang et al., 2020; Beltagy et al., 2020;
Zaheer et al., 2020) approximates the full attention matrix by linearizing the softmax attention and
thus can accelerate the computation by first computing the product of keys and values. 2) Inducing
point-based linear transformers (Lee et al., 2019; Ying et al., 2018) use learned inducing points with
fixed size to compute attention with input tokens, thus can reduce the computation to linear complex-
ity. However, these linear transformers are shown to have inferior results than standard transformers
in different works (Germain et al., 2021; Chen et al., 2021). 3) Sparse attention, including Long-
former (Beltagy et al., 2020), Big Bird (Zaheer et al., 2020), etc, attends each query token to part of
key and value tokens instead of the entire sequence. Unlike these works, our quadtree attention can
quickly skip the irrelevant tokens according to the attention scores at coarse levels. Thus, it achieves
less information loss while keeps high efficiency.
Vision Transformers. Transformers have shown extraordinary performance in many vision tasks.
ViT (Dosovitskiy et al., 2020) applies transformers to image recognition, demonstrating the supe-
riority of transformers for image classification at a large scale. However, due to the computational
complexity of full attention, it is hard to apply transformers in dense prediction tasks, e.g. object
detection, semantic segmentation, etc. To address this problem, Swin Transformer (Liu et al., 2021)
restricts attention computation in a local window. Focal transformer (Yang et al., 2021) uses two-
level windows to increase the ability to capture long-range connection for local attention methods.
Pyramid vision transformer (PVT) (Wang et al., 2021c) reduce the computation of global attention
methods by downsampling key and value tokens. Although these methods have shown improve-
ments in various tasks, they have drawbacks either in capturing long-range dependencies (Liu et al.,
2021) or fine level attention (Wang et al., 2021c). Different from these methods, our method si-
multaneously capture both local and global attention by computing attention from full image levels
to the finest token levels with token pyramids in one single block. Besides, the K-NN transform-
ers (Wang et al., 2021a; Zhao et al., 2019) aggregate messages from top K most similar tokens as
ours, but they compute the attention scores among all pairs of query and key tokens, and thus still
has quadratic complexity.
Beyond self-attention, many tasks can largely benefit from cross attention. Superglue (Sarlin et al.,
2020) processes detected local descriptors with self- and cross attention and shows significant im-
provement in feature matching. Standard transformers can be applied in SuperGlue because only
sparse keypoints are considered. SGMNet (Chen et al., 2021) further reduces the computation by
attending to seeded matches. LoFTR (Sun et al., 2021) utilizes linear transformer (Katharopoulos
et al., 2020) on low-resolution feature maps to generate dense matches. For stereo matching, STTR
(Li et al., 2021) applies self- and cross attention along epipolar lines and reduces the memory by
gradient checkpointing engineering techniques. However, due to the requirement of processing a
large number of points, these works either use linear transformers, which compromise performance,
or a standard transformer, which compromises efficiency. In contrast, our transformer with quadtree
attention achieves a significant performance boost compared with linear transformer or efficiency
improvement compared with standard transformer. Besides, it can be applied to both self-attention
and cross attention.
3	Method
We first briefly review the attention mechanism in transformers in Section 3.1 and then formulate
our quadtree attention in Section 3.2.
3.1	Attention in Transformer
Vision transformers have shown great success in many tasks. At the heart of a transformer is the
attention module, which can capture long-range information between feature embeddings. Given
two image embeddings X1 and X2 , the attention module passes information between them. Self-
attention is the case when X1 and X2 are the same, while cross attention covers a more general
situation when X1 and X2 are different. It first generates the query Q, key K, and value V by the
3
Published as a conference paper at ICLR 2022
Figure 2: Illustration of quadtree message aggregation for a query token qi. (a) shows the token
pyramids and involved key/value tokens in each level. Attention scores are marked in the first two
levels for clarification, and the top K scores are highlighted in red. (b) shows message aggregation
for QuadTree-A architecture. The message is assembled from different levels along a quadtree. (c)
shows message aggregation for QuadTree-B architecture. The message is collected from overlap-
ping regions from different levels.
following equation,
Q = WqX1,
K = WkX2,
V=WvX2,
where Wq , Wk and Wv are learnable parameters. Then, it performs message aggregation by
computing the attention scores between query and key as following,
QKT
Y = softmax( √- )V,	(1)
where C is the embedding channel dimension. The above process has O (N2) computational com-
plexity, where N is the number of image patches in a vision transformer. This quadratic complexity
hinders transformers from being applied to tasks requiring high resolution output. To address this
problem, PVT (Wang et al. (2021c)) downsamples K and V, while Swin Transformer (Liu et al.
(2021)) limits the attention computation within local windows.
3.2	QuadTree Attention
In order to reduce the computational cost of vision transformers, we present QuadTree Attention.
As the name implies, we borrow the idea from quadtrees, which are often used to partition a two-
dimensional space by recursively subdividing it into four quadrants or regions. Quadtree attention
computes attention in a coarse to fine manner. According to the results at the coarse level, irrelevant
image regions are skipped quickly at the fine level. This design achieves less information loss while
keeping high efficiency.
The same as the regular transformers, we first linearly project X1 and X2 to the query, key, and value
tokens. To facilitate fast attention computation, we construct L-level pyramids for query Q, key
4
Published as a conference paper at ICLR 2022
K, and value V tokens by downsampling feature maps. For query and key tokens, we use average
pooling layers. For value tokens, average pooling is used for cross attention tasks and convolutional-
normalization-activation layers with stride 2 are used for self attention tasks if no special statement.
As shown in Figure 1, after computing attention scores in the coarse level, for each query token, we
select the top K key tokens with the highest attention scores. At the fine level, query sub-tokens only
need to be evaluated with those key sub-tokens that correspond to one of the selected K key tokens at
the coarse level. This process is repeated until the finest level. After computing the attention scores,
we aggregate messages at all levels, where we design two architectures named as QuadTree-A and
QuadTree-B.
QuadTree-A. Considering the i-th query token qi at the finest level, we need to compute its received
message mi from all key tokens. This design assembles the full message by collecting partial
messages from different pyramid levels. Specifically,
mi = X mli ,	(2)
1≤l≤L
where mli indicates the partial message evaluated at level l. This partial message mli assemble
messages at the l-th level from tokens within the region Ωi, which will be defined later. In this way,
messages from less related regions are computed from coarse levels, while messages from highly
related regions are computed in fine levels. This scheme is illustrated in Figure 2 (b), message mi
is generated by assembling three partial messages that are computed from different image regions
with different colors, which collectively cover the entire image space. The green region indicates the
most relevant region and is evaluated at the finest level, while the red region is the most irrelevant
region and is evaluated at the coarsest level. The region Ωi can be defined as Γi - Γi+1, where the
image region Γli corresponds to the top K tokens at the level l - 1. The regions Γli are illustrated in
Figure 2 (c). The region Γi1 covers the entire image.
The partial messages are computed as,
mli = X slij vlj ,	(3)
j∈Ω
where slij is the attention score between the query and key tokens at level l. Figure 2 (a) highlights
query and key tokens involved in computing mi with the same color as Ω% Attention scores are
computed recursively,
slij = sli-j 1tlij.	(4)
Here, sli-j 1 is the score of corresponding parent query and key tokens and si1j = 1. The tentative
attention score tlij is evaluated according to Equation 1 among the 2 × 2 tokens of the same parent
query token. For QuadTree-A, we use average pooling layers to downsample all query, key and
value tokens.
QuadTree-B. The attention scores slij in QuadTree-A are recursively computed from all levels,
which makes scores smaller at finer levels and reduces the contributions of fine image features.
Besides, fine level scores are also largely affected by the inaccuracy at coarse levels. So we design
a different scheme, referred as QuadTree-B in this paper, to address this problem. Specifically, we
compute mi as a weighted average of the partial messages from different levels,
mi =	wilmli ,	(5)
1≤l≤L
where wil is a learned weight. As shown in Figure 2 (c), the partial messages here overlap with each
other, which are computed as,
mli = Attention(qli, KlΓl , VlΓl ),	(6)
ii
where Attention is the attention message computation as Equation 1. Here, KlΓl and VlΓl are matri-
ii
ces formed by stacking all keys and values within the region Γli .
Both QuadTree-A and QuadTree-B involve only sparse attention evaluation. Thus, our method
largely reduces computational complexity. As analyzed in Appendix A.1, the computational com-
plexity of our quadtree attention is linear to the number of tokens.
5
Published as a conference paper at ICLR 2022
		AUC@50	AUC@100	AUC@200
	COntextDeSC + SGMNet(Chen et al.(2021))	"T5.4	32.3	48.8
Others	SuperPoint + OANet (Zhang et al. (2019b))	11.8	26.9	43.9
	SuperPoint + SuperGlue (Sarlin et al. (2020))	16.2	33.8	51.9
	DRC-Net (Li et al.(2020))		7.7	17.9	30.5
	Linear Att. (LoFTR) (Katharopoulos et al. (2020))	ɪi	32.6	49.0
LoFTR-lite	PVT (Wang etal.,2021c)	16.2	32.7	49.2
	QuadTree-A (ours, K = 8)	16.8	33.4	50.5
	QuadTree-B (ours, K = 8)	17.4	34.4	51.6
	Linear Att. (LoFTR) ? (Sun et al. (2021), 64 GPUs)	ɪi	40.8	57.6
LoFTR	Linear Att. (LoFTR) (Katharopoulos et al. (2020))	21.1	39.5	56.6
	QuadTree-B (ours, K = 8)	23.0	41.7	58.5
	QUadTree-B * (ours, K = 16)	24.9	44.7	61.6
Table 1: Results on feature matching. The symbol ? indicates results cited from (Sun et al., 2021),
where the model is trained with a batch size of 64 on 64 GPUs (a more preferable setting than
ours). The symbol * indicates We use the ViT (DosoVitskiy et al., 2020)-like architecture for trans-
former blocks. For PVT and our method, we replace the original linear attention in LoFTR with
corresponding attentions.
Multiscale position encoding. The computation of attention is permutation inVariant to tokens,
and thus positional information is missed. To address this problem, We adopt the locally-enhanced
positional encoding (LePE) (Dong et al., 2021) at each leVel to design a multiscale position encoding.
Specifically, for leVel l, We apply unshared depth-Wise conVolution layers to Value tokens Vl to
encode the positional information.
4	Experiment
We experiment our quadtree transformer With four representatiVe tasks, including feature match-
ing, stereo, image classification, and object detection. The first tWo tasks require cross attention to
fuse information across different images, While the latter tWo inVolVe only self-attention. We imple-
ment our quadtree transformer using PyTorch and CUDA kernels. More implementation details are
proVided in Appendix B.
4.1	Cross attention tasks
4.1.1	Feature matching
Finding feature correspondence (Luo et al., 2019; DeTone et al., 2018) across different images is
a precedent problem for many 3D computer Vision tasks. It is typically eValuated by the accuracy
of the camera pose estimated from the corresponding points. We folloW the frameWork proposed
in a recent state-of-the-art Work LoFTR (Sun et al., 2021), Which consists of a CNN-based feature
extractor and a transformer-based matcher. We replace the linear transformer (Katharopoulos et al.,
2020) in LoFTR With our quadtree transformer. Besides, We also implement a neW Version of LoFTR
With the spatial reduction (SR) attention (Wang et al., 2021c) for additional comparison.
Setting. We experiment on ScanNet (Dai et al., 2017) With 1,513 scans. In order to accelerate
training, We design the LoFTR-lite setting, Which uses half of the feature channels of LoFTR and 453
training scans. Ablation studies in section 4.3 are conducted in this setting. We train both LoFTR-
lite and LoFTR for 30 epochs With batch size 8. For quadtree transformer, We build pyramids of
three leVels With the coarsest resolution at 15 × 20 pixels. We set the parameter K to 8 at the finest
leVel, and double it at coarser leVels. For the SR attention, We aVerage pool the Value and key tokens
to the size 8 × 8 to keep similar memory usage and flops as our quadtree attention. More details are
included in Appendix B.1.
Results. Table 1 shows the AUC of camera PoSe errors1 under (5°, 10°, 20°). We can see that
the SR attention achieVes similar results With linear transformer. In comparison, both QuadTree-A
and QuadTree-B outPerform linear transformer and SR attention by a large margin. Quadtree-B
generally Performs better than Quadtree-A. Quadtree-B has 2.6 and 1.9 imProVements in terms of
AUC@20° oVer linear transformer on LoFTR-lite and LoFTR resPectiVely. To further enhance the
1Camera Pose errors are eValuated as the differences between estimated and ground truth camera orientation
and translation direction, both measured in degrees.
6
Published as a conference paper at ICLR 2022
	EPE (Px)	IOU	Flops (G)	Mem. (MB)
GA-Net (Zhang et al., 2019a)	^089	/	/	/
GWC-Net (GUo et al., 2019)	0.97	/	305	4339
Bi3D (Badki et al., 2020)	1.16	/	897	10031
STTR (Vanilla Transformer) (Li et al., 2021)	^045	0.92	490	8507
QUadTree-B (oUrs, K = 6)	0.46	0.99	254 (52%)	5381 (63%)
Table 2: Results of stereo matching. QuadTree-B achieves similar performance as STTR but with
significantly lower flops and memory usage.
results, we train a model with K = 16 and leverage a ViT (Dosovitskiy et al., 2020)-like trans-
former archtecture instead of the original one used in (Sun et al., 2021). This model achieves 4
improvements on AUC@20° over (SUn et al., 2021), where the LoFTR model is trained with a
batch size of 64 with 64 GPUs, a more preferable setting leading to slightly better results than our
linear transformer implementation shown in Table 1.
4.1.2	S tereo Matching
Stereo matching aims to find corresponding pixels on epipolar lines between two rectified images.
The recent work STTR (Li et al., 2021) applies transformers to featUre points between epipolar
lines and achieves state-of-the-art performance. Note here, both self- and cross attention are applied
along epipolar lines, pixels across different lines are not considered in the attention compUtation.
We replace the standard transformer in STTR (Li et al., 2021) with oUr qUadtree transformer.
Setting. We experiment on the Scene Flow FlyingThings3D (Mayer et al., 2016) synthetic dataset,
which contains 25,466 images with a resolUtion of 960 × 540. We bUild pyramids of foUr levels
to evalUate qUadtree attention. While the STTR is applied to featUres of 1/3 of image resolUtion,
we Use featUre maps of 1/2 of image resolUtion. More details aboUt the network are inclUded in
Appendix B.2.
Results. We report EPE (End-Point-Error) in non-occlUded regions and IOU (Intersection-over-
Union) for occlUsion estimation in Table 2 as (Li et al., 2021). CompUtational complexity and
memory Usage are also reported. Compared with STTR based on the standard transformer, oUr
qUadtree transformer achieves similar EPE (0.45 px vs 0.46 px) and higher IOU for occlUsion es-
timation, bUt with mUch lower compUtational and memory costs, with only 52% FLOPs and 63%
memory consUmption.
4.2	Self-attention task
This section presents resUlts on image classification and object detection. In the past, convolUtional
neUral networks (CNNs) have dominated these tasks for a long time. Recently, vision transformers
(Dosovitskiy et al., 2020; LiU et al., 2021; Wang et al., 2021c) show excellent potential on these
problems, thanks to their capability in captUring long-range interactions. To compare oUr method
with these vision transformers on image classification, we Use the pUblic codes of PVTv2 (Wang
et al., 2021c) and replace all the spatial redUction attention with oUr qUadtree attention. For object
detection, we fUrther apply a representative object detection framework, RetinaNet (Lin et al., 2017),
which is a widely Used single-stage object detector.
4.2	. 1 Image classification
Settings. We evalUate image classification on the ImageNet-1K dataset (Deng et al., 2009), which
consists of 1.28M training images and 50K validation images from 1,000 categories. We bUild token
pyramids with the coarsest level at a resolUtion of 7 × 7 and set K = 8. We crop and resize the inpUt
images to 224 × 224 pixels and train the model with a mini-batch of 128. All models are trained for
300 epochs from scratch on 8 GPUs. All the other training settings are the same as in (Wang et al.,
2021c). We bUild five different qUadtree transformers at different complexity, named as b0, b1, b2,
b3, b4. These models are gradUally deeper and wider. More configUration details can be foUnd in
Appendix. B.3.
Results. We provide the top-1 accUracy of varioUs methods and network settings in Table 3. These
resUlts are groUped into five sections, each with several methods of similar network complexity, as
7
Published as a conference paper at ICLR 2022
	Param (M)	Flops (G)	Top1 (%)
PVTv2-b0 (Wang et al., 2021b)	F	0.6	70.5
QuadTree-A-b0 (ours)	3.4	0.6	70.9
QuadTree-B-b0 (ours)	3.5	0.7	72.0
ResNet18(He et al.,2016)	TTT	1.8	69.8
PVTv1-Tiny (Wang et al., 2021c)	13.2	2.1	75.1
PVTv2-b1 (Wang et al., 2021b)	14.0	2.1	78.7
QuadTree-B-b1(ours)	13.6	2.3	80.0
ResNet50 (He et al.,2016)	ɪi	4.1	76.4
ResNeXt50-32x4d (Xie et al., 2017)	25.0	4.3	77.6
RegNetY-4G (Radosavovic et al., 2020)	21.0	4.0	80.0
DeiT-Small/16 (Touvron et al., 2021)	22.1	4.6	79.9
Swin-T (Liu et al., 2021)	29.0	4.5	81.3
TNT-S (Han et al., 2021)	23.8	5.2	81.3
CeiT (Yuan et al., 2021a)	24.2	4.5	82.0
PVTv2-b2 (Wang et al., 2021c)	25.4	4.0	82.0
Focal-T (Yang et al., 2021)	29.1	4.9	82.2
QuadTree-B-b2 (ours)	24.2	4.5	82.7
ResNet101(He etal., 2016)	^44^	7.9	77.4
ResNeXt101-32x4d (Xie et al., 2017)	44.2	8.0	78.8
RegNetY-8G (Radosavovic et al., 2020)	39.0	8.0	81.7
CvT-21 (Wu et al., 2021)	32.0	7.1	82.5
PVTv2-b3 (Wang et al., 2021c)	45.2	6.9	83.2
Quadtree-B-b3(ours)	46.3	7.8	83.7
ResNet152 (He etal., 2016)	-602	11.6	78.3
T2T-ViTt-24 (Yuan et al., 2021b)	64.0	15.0	82.2
Swin-S (Liu et al., 2021)	50.0	8.7	83.0
Focal-Small (Yang et al., 2021)	51.1	9.1	83.5
PVTv2-b4 (Wang et al., 2021c)	62.6	10.1	83.6
Quadtree-B-b4 (ours)	64.2	11.5	84.0
Table 3: Image classification results. We report top-1 accuracy on the ImageNet validation set.
	Flops (G)	AP	AP50	AP75	APS	APM	APL
PVTv2-b0 (Wang et al., 2021b)	ɪ^	37.2	57.2	39.5	23.1	40.4	49.7
QuadTree-A-b0 (K=32, ours)	16.0	37.0	56.8	38.9	22.8	39.7	50.0
QuadTree-B-b0 (K=32, ours)	16.5	38.4	58.7	41.1	22.5	41.7	51.6
ResNet18(He etal., 2016)	■38.6	31.8	49.6	33.6	16.3	34.3	43.2
PVTVI-Tiny (Wang et al., 2021c)	72.5	36.7	56.9	38.9	22.6	38.8	50.7
PVTv2-b1 (Wang et al., 2021b)	78.8	41.2	61.9	43.9	25.4	44.5	54.3
Quadtree-B-b1 (K=32, ours)	56.2	42.6	63.6	45.3	26.8	46.1	57.2
ResNet50 (He etal., 2016)	^873	36.3	55.3	38.6	19.3	40.0	48.8
ResNet101 (He et al.,2016)	166.3	38.5	57.8	41.2	21.4	42.6	51.1
ResNeXt101-32x4d (Xie et al., 2017)	170.2	39.9	59.6	42.7	22.3	44.2	52.5
PVTVI-small (Wang et al., 2021c)	139.8	36.7	56.9	38.9	25.0	42.9	55.7
PVTv2-b2 (Wang et al., 2021c)	149.1	44.6	65.6	47.6	27.4	48.8	58.6
QuadTree-B-b2 (K=32, ours)	108.6	46.2	67.2	49.5	29.0	50.1	61.8
PVTVI-Medium (Wang et al., 2021C)	237.4	41.9	63.1	44.3	25.0	44.9	57.6
PVTv2-b3 (Wang et al., 2021b)	243.0	45.9	66.8	49.3	28.6	49.8	61.4
QuadTree-B-b3 (ours)	193.9	47.3	68.2	50.6	30.4	51.3	62.9
PVTv1-Large (Wang et al., 2021c)	346.6	42.6	63.7	45.4	25.8	46.0	58.4
PVTv2-b4 (Wang et al., 2021b)	353.3	46.1	66.9	49.2	28.4	50.0	62.2
QuadTree-B-b4 (ours)	283.9	47.9	69.1	51.3	29.4	52.2	63.9
Table 4: Object detection results on COCO val2017 with RetinaNet. We use PVTv2 backbone and
replace the reduction attention with quadtree attention. ‘Flops’ is the backbone flops for input image
size of 800 × 1, 333.
indicated by the number of parameters. As shown in Table 3, QuadTree-B outperforms PVTv2 by
0.4%-1.5% in top-1 accuracy with fewer parameters. Swin Transformer-S adopts local attention
and is surpassed by our QuadTree-B-b2 by 1.0% in top-1 accuracy. This result proves that global
information is important. In general, our quadtree transformer leverages both global information
at the coarse level and local information at fine levels, and outperforms both PVTv2 and Swin
Transformer.
8
Published as a conference paper at ICLR 2022
	ImageNet-IK		COCO(RetinaNet)				
	Flops (G)	Top-1 (%)	Mem. (MB)	AP	AP50	AP75
PVTv2 (Wang et al., 2021b)	^06	^^5	^374	37.2	57.2	39.5
PVTv2+LePE (Dong et al., 2021)	0.6	70.9	574	37.6	57.8	39.9
Swin (Liu et al., 2021)	^06	^^5	3088	35.3	54.2	37.4
Swin+LePE	0.6	70.7	308	35.8	55.3	37.7
Focal Attention (Yang et al., 2021)	^07	~H6	^^32	37.5	57.6	39.5
Focal Attention+LePE	0.7	71.5	732	37.1	57.0	39.4
QuadTree-B	^06	"ɪθ	-339	38.4	58.8	41.1
Table 5: To fairly compare with Swin, PVT, Focal attention and our method, we replace the attention
module in PVTv2-b0 with different types of attention and same position encoding method LePE and
run image classification and object detection respectively.
4.2.2 Object detection
Settings. We experiment on the COCO dataset. All models are trained on COCO train 2017 (118k
images) and evaluated on val 2017 (5k images). We initialize the quadtree backbone with the weights
pre-trained on ImageNet. We adopt the same setting as PVTv2, training the model with a batch size
of 16 and AdamW optimizer with an initial learning rate of 1 × 10-4 for 12 epochs. We use the
standard metric average precision to evaluate our method.
Results. We mainly compare our method with PVTv2, ResNet (He et al., 2016), and ResNeXt
(Xie et al., 2017) using detection framework of RetinaNet (Lin et al., 2017), which are state-of-
the-art backbones for dense prediction. Table 4 lists the average precision of different methods and
their backbone flops for images of resolution of 800 × 1, 333. Benefiting from the coarse to fine
mechanism, a small K is enough for our method. Thus, the computation can be reduced when
using high resolution images. We can see that QuadTree-B achieves higher performance, but with
much fewer flops than PVTv2. Our quadtree transformer also outperforms ResNet and ResNeXt.
For example, QuadTree-B-b2 outperform ResNet101 and ResNeXt101-32x4d by 7.7 AP and 6.3
AP respectively with about 40% backbone flops reduction. We also show Mask-RCNN results (He
et al., 2017) in Appendix. E.
4.3	Comparison with other attention mechanisms
For a fair comparison with other attention mechanisms, we test these attention mechanisms under
the same backbone and training settings. Specifically, we replace the original attention module in
PVTv2-b0 with the attention method used in Swin Transformer and Focal Transformer. For more fair
comparison, we adopt the same positional encoding LePE (Dong et al., 2021) to PVTv2, Swin and
Focal transformer. As shown in Table 5, QuadTree attention obtain consistently better performance
than Swin and PVTv2 in both classification task and detection task. Compared with focal attention,
our method gets 0.9 higher AP in object detection, which might be because that QuadTree attention
can always cover the whole images, while Focal attention only covers 1/6 of the image in the first
stage. More experiments on Swin-like architecture can be found in Appendix E.
For cross attention tasks, we also provide visualization of attention score as shown in Fig.5 in Ap-
pendix E. Our method can attend to much more related regions than PVT (Wang et al., 2021b) and
Linear attention (Katharopoulos et al., 2020).
5	Conclusion
We introduce QuadTree Attention to reduce the computational complexity of vision transformers
from quadratic to linear. Quadtree transformers build token pyramids and compute attention in a
coarse-to-fine manner. At each level, top K regions with the highest attention scores are selected,
such that in finer level, computation in irrelevant regions can be quickly skipped. Quadtree attention
can be applied to cross attention as well as self-attention. It achieves state-of-the-art performance in
various tasks including feature matching, stereo, image classification, and object detection.
9
Published as a conference paper at ICLR 2022
References
Abhishek Badki, Alejandro Troccoli, Kihwan Kim, Jan Kautz, Pradeep Sen, and Orazio Gallo. Bi3d:
Stereo depth estimation via binary classifications. In Proceedings of the IEEE/CVF Conference
on Computer Vision and Pattern Recognition, pp. 1600-1608, 2020.
Iz Beltagy, Matthew E Peters, and Arman Cohan. Longformer: The long-document transformer.
arXiv preprint arXiv:2004.05150, 2020.
Hongkai Chen, Zixin Luo, Jiahui Zhang, Lei Zhou, Xuyang Bai, Zeyu Hu, Chiew-Lan Tai, and
Long Quan. Learning to match features with seeded graph matching network. arXiv preprint
arXiv:2108.08771, 2021.
Krzysztof Choromanski, Valerii Likhosherstov, David Dohan, Xingyou Song, Andreea Gane, Tamas
Sarlos, Peter Hawkins, Jared Davis, Afroz Mohiuddin, Lukasz Kaiser, et al. Rethinking attention
with performers. arXiv preprint arXiv:2009.14794, 2020.
Marco Cuturi. Sinkhorn distances: Lightspeed computation of optimal transport. Advances in neural
information processing systems, 26:2292-2300, 2013.
Angela Dai, Angel X Chang, Manolis Savva, Maciej Halber, Thomas Funkhouser, and Matthias
Nieβner. Scannet: Richly-annotated 3d reconstructions of indoor scenes. In Proceedings of the
IEEE conference on computer vision and pattern recognition, pp. 5828-5839, 2017.
Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale hi-
erarchical image database. In 2009 IEEE conference on computer vision and pattern recognition,
pp. 248-255. Ieee, 2009.
Daniel DeTone, Tomasz Malisiewicz, and Andrew Rabinovich. Superpoint: Self-supervised interest
point detection and description. In Proceedings of the IEEE conference on computer vision and
pattern recognition workshops, pp. 224-236, 2018.
Xiaoyi Dong, Jianmin Bao, Dongdong Chen, Weiming Zhang, Nenghai Yu, Lu Yuan, Dong Chen,
and Baining Guo. Cswin transformer: A general vision transformer backbone with cross-shaped
windows. arXiv preprint arXiv:2107.00652, 2021.
Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas
Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, et al. An
image is worth 16x16 words: Transformers for image recognition at scale. arXiv preprint
arXiv:2010.11929, 2020.
Hugo Germain, Vincent Lepetit, and Guillaume Bourmaud. Visual correspondence hallucination:
Towards geometric reasoning. arXiv preprint arXiv:2106.09711, 2021.
Xiaoyang Guo, Kai Yang, Wukui Yang, Xiaogang Wang, and Hongsheng Li. Group-wise correlation
stereo network. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern
Recognition, pp. 3273-3282, 2019.
Kai Han, An Xiao, Enhua Wu, Jianyuan Guo, Chunjing Xu, and Yunhe Wang. Transformer in
transformer. arXiv preprint arXiv:2103.00112, 2021.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-
nition. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp.
770-778, 2016.
Kaiming He, Georgia Gkioxari, Piotr Dollar, and RoSS Girshick. Mask r-cnn. In Proceedings Ofthe
IEEE international conference on computer vision, pp. 2961-2969, 2017.
Angelos Katharopoulos, Apoorv Vyas, Nikolaos Pappas, and Francois Fleuret. Transformers are
rnns: Fast autoregressive transformers with linear attention. In International Conference on Ma-
chine Learning, pp. 5156-5165. PMLR, 2020.
Juho Lee, Yoonho Lee, Jungtaek Kim, Adam Kosiorek, Seungjin Choi, and Yee Whye Teh. Set
transformer: A framework for attention-based permutation-invariant neural networks. In Interna-
tional Conference on Machine Learning, pp. 3744-3753. PMLR, 2019.
10
Published as a conference paper at ICLR 2022
Xinghui Li, Kai Han, Shuda Li, and Victor Prisacariu. Dual-resolution correspondence networks.
Advances in Neural Information Processing Systems, 33, 2020.
Zhaoshuo Li, Xingtong Liu, Nathan Drenkow, Andy Ding, Francis X Creighton, Russell H Taylor,
and Mathias Unberath. Revisiting stereo depth estimation from a sequence-to-sequence perspec-
tive with transformers. IEEE/CVF International Conference on Computer Vision, 2021.
Zhengqi Li and Noah Snavely. Megadepth: Learning single-view depth prediction from internet
photos. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp.
2041-2050, 2018.
Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays, Pietro Perona, Deva Ramanan, Piotr
Dollar, and C LaWrence Zitnick. Microsoft coco: Common objects in context. In European
conference on computer vision, pp. 740-755. Springer, 2014.
TsUng-Yi Lin, Priya Goyal, Ross Girshick, Kaiming He, and Piotr Dollar. Focal loss for dense
object detection. In Proceedings of the IEEE international conference on computer vision, pp.
2980-2988, 2017.
Ze LiU, YUtong Lin, YUe Cao, Han HU, YixUan Wei, Zheng Zhang, Stephen Lin, and Baining
GUo. SWin transformer: Hierarchical vision transformer Using shifted WindoWs. arXiv preprint
arXiv:2103.14030, 2021.
Zixin LUo, TianWei Shen, Lei ZhoU, JiahUi Zhang, Yao Yao, ShiWei Li, Tian Fang, and Long QUan.
Contextdesc: Local descriptor aUgmentation With cross-modality context. In Proceedings of the
IEEE/CVF Conference on Computer Vision and Pattern Recognition, pp. 2527-2536, 2019.
NikolaUs Mayer, Eddy Ilg, Philip HaUsser, Philipp Fischer, Daniel Cremers, Alexey Dosovitskiy,
and Thomas Brox. A large dataset to train convolUtional netWorks for disparity, optical floW, and
scene floW estimation. In Proceedings of the IEEE conference on computer vision and pattern
recognition, pp. 4040-4048, 2016.
Ilija Radosavovic, Raj Prateek Kosaraju, Ross Girshick, Kaiming He, and Piotr Dollar. Designing
netWork design spaces. In Proceedings of the IEEE/CVF Conference on Computer Vision and
Pattern Recognition, pp. 10428-10436, 2020.
Rene Ranftl, Alexey Bochkovskiy, and Vladlen Koltun. Vision transformers for dense prediction.
arXiv preprint arXiv:2103.13413, 2021.
Paul-Edouard Sarlin, Daniel DeTone, Tomasz MalisieWicz, and AndreW Rabinovich. Superglue:
Learning feature matching With graph neural netWorks. In Proceedings of the IEEE/CVF confer-
ence on computer vision and pattern recognition, pp. 4938-4947, 2020.
Wenqi Shao, Shitao Tang, Xingang Pan, Ping Tan, Xiaogang Wang, and Ping Luo. Channel equilib-
rium netWorks for learning deep representation. In International Conference on Machine Learn-
ing, pp. 8645-8654. PMLR, 2020.
Wenqi Shao, Yixiao Ge, Zhaoyang Zhang, Xuyuan Xu, Xiaogang Wang, Ying Shan, and Ping Luo.
Dynamic token normalization improves vision transformer. arXiv preprint arXiv:2112.02624,
2021.
Jiaming Sun, Zehong Shen, Yuang Wang, Hujun Bao, and XiaoWei Zhou. Loftr: Detector-free local
feature matching With transformers. In Proceedings of the IEEE/CVF Conference on Computer
Vision and Pattern Recognition, pp. 8922-8931, 2021.
Hugo Touvron, Matthieu Cord, Matthijs Douze, Francisco Massa, Alexandre Sablayrolles, and
Herve Jegou. Training data-efficient image transformers & distillation through attention. In
International Conference on Machine Learning, pp. 10347-10357. PMLR, 2021.
Pichao Wang, Xue Wang, Fan Wang, Ming Lin, Shuning Chang, Wen Xie, Hao Li, and Rong Jin.
Kvt: k-nn attention for boosting vision transformers. arXiv preprint arXiv:2106.00515, 2021a.
Sinong Wang, Belinda Z Li, Madian Khabsa, Han Fang, and Hao Ma. Linformer: Self-attention
With linear complexity. arXiv preprint arXiv:2006.04768, 2020.
11
Published as a conference paper at ICLR 2022
Wenhai Wang, Enze Xie, Xiang Li, Deng-Ping Fan, Kaitao Song, Ding Liang, Tong Lu, Ping Luo,
and Ling Shao. Pvtv2: Improved baselines with pyramid vision transformer. arXiv preprint
arXiv:2106.13797, 2021b.
Wenhai Wang, Enze Xie, Xiang Li, Deng-Ping Fan, Kaitao Song, Ding Liang, Tong Lu, Ping Luo,
and Ling Shao. Pyramid vision transformer: A versatile backbone for dense prediction without
convolutions. arXiv preprint arXiv:2102.12122, 2021c.
Haiping Wu, Bin Xiao, Noel Codella, Mengchen Liu, Xiyang Dai, Lu Yuan, and Lei Zhang. Cvt:
Introducing convolutions to vision transformers. arXiv preprint arXiv:2103.15808, 2021.
Saining Xie, Ross Girshick, Piotr Dollar, ZhUoWen Tu, and Kaiming He. Aggregated residual trans-
formations for deep neural networks. In Proceedings of the IEEE conference on computer vision
andpattern recognition, pp. 1492-1500, 2017.
JianWei Yang, Chunyuan Li, Pengchuan Zhang, Xiyang Dai, Bin Xiao, Lu Yuan, and Jianfeng
Gao. Focal self-attention for local-global interactions in vision transformers. arXiv preprint
arXiv:2107.00641, 2021.
Rex Ying, Jiaxuan You, Christopher Morris, Xiang Ren, William L Hamilton, and Jure
Leskovec. Hierarchical graph representation learning With differentiable pooling. arXiv preprint
arXiv:1806.08804, 2018.
Kun Yuan, Shaopeng Guo, ZiWei Liu, Aojun Zhou, FengWei Yu, and Wei Wu. Incorporating con-
volution designs into visual transformers. arXiv preprint arXiv:2103.11816, 2021a.
Li Yuan, Yunpeng Chen, Tao Wang, Weihao Yu, Yujun Shi, Zihang Jiang, Francis EH Tay, Jiashi
Feng, and Shuicheng Yan. Tokens-to-token vit: Training vision transformers from scratch on
imagenet. arXiv preprint arXiv:2101.11986, 2021b.
Manzil Zaheer, Guru Guruganesh, Kumar Avinava Dubey, Joshua Ainslie, Chris Alberti, Santiago
Ontanon, Philip Pham, Anirudh Ravula, Qifan Wang, Li Yang, et al. Big bird: Transformers for
longer sequences. In NeurIPS, 2020.
Feihu Zhang, Victor Prisacariu, Ruigang Yang, and Philip HS Torr. Ga-net: Guided aggregation net
for end-to-end stereo matching. In Proceedings of the IEEE/CVF Conference on Computer Vision
and Pattern Recognition, pp. 185-194, 2019a.
Jiahui Zhang, DaWei Sun, Zixin Luo, Anbang Yao, Lei Zhou, TianWei Shen, Yurong Chen, Long
Quan, and Hongen Liao. Learning tWo-vieW correspondences and geometry using order-aWare
netWork. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pp.
5845-5854, 2019b.
Guangxiang Zhao, Junyang Lin, Zhiyuan Zhang, Xuancheng Ren, Qi Su, and Xu Sun. Ex-
plicit sparse transformer: Concentrated attention through explicit selection. arXiv preprint
arXiv:1912.11637, 2019.
A Appendix
A. 1 Complexity analysis
In this section, We analyze the computational complexity of quadtree attention. Suppose the lengths
of the query tokens, key tokens, and value tokens are all H × W. We build token pyramids of L
levels, the lth level has a token length of HlWI. The flops of computing quadtree attention is,
Flops = 2(H2W2 + X 4KHW)
4-
l-2
=2(H2w2 + 4(1 - 41-L)KHW).
Here, H0 and W0 are the height and Width of the coarsest level of token pyramids. Therefore, H02 W02
is a constant and the computational complexity is O(KHW). Since K is a constant number, the
complexity of quadtree attention is linear to the number of tokens.
12
Published as a conference paper at ICLR 2022
	AUC@5°	AUC@10°	AUC@20°
DRC-Net (Li et al., 2020)	ɪŋ	43.0	58.3
SuPerPoint + SuPerGlue (Sarlin et al., 2020)	42.2	61.2	76.0
LoFTR (Sun et al., 2021)	52.8	69.2	81.2
QuadTree-B (ours, K=16)	54.6	70.5	82.2
Table 6: Feature matching results on megadepth. Our method obtains better performance than other
methods.
B Additional experiments and implementation details
B.1	Feature Matching
Implementation details. We train and evaluate the model in ScanNet (Dai et al., 2017), where 230M
image pairs is sampled for training, with overlapping scores between 0.4 and 0.8. ScanNet provides
RGB images, depth maps, and ground truth camera poses on a well-defined training and testing split.
Following the same evaluation settings as Sarlin et al. (2020) and Sun et al. (2021), we evaluate our
method on the 1,500 testing pairs from (Sarlin et al., 2020). For both trainig and testing, all images
and depth maps are resized to 640 × 480. Following (Sun et al., 2021), we compute the camera
pose by solving the essential matrix from predicted matches with RANSAC. We report the AUC
of the Pose error at thresholds (5°, 10°, 20°), where the Pose error is defined as the maximum of
angular error in rotation and translation. We only replace the coarse level transformer with quadtree
attention.
Results of megadepth. We show our results on MegadePth (Li & Snavely, 2018) in Table 6. We
can see our method outPerforms others by a large margin.
B.2	Stereo matching
Our network is based on the STTR (Li et al., 2021), where we rePlace the standard transformer with
our quadtree transformer. The network consists of a CNN backbone which outPuts feature maPs of
1/2 image resolution, a quadtree transformer with both self- and cross attention, a regression head
with oPtimal transPort layers (Cuturi, 2013), and a context adjust layer to refine the disParity. Six
self- and cross attention layers are used with 128 channels. We build Pyramids with four levels for
quadtree attention, and aPPly the Sinkhorn algorithm (Cuturi, 2013) for 10 iteration for oPtimal
transPort. We follow STTR to train the network, with 15 ePochs of AdamW oPtimizer. OneCycle
learning rate scheduler is used with a leaning rate of 6e-4 and a batch size of 8.
B.3	Image classification
This ParagraPh introduces the details of PVTv2-b0, b1, b2, b3, b4. All these five networks have
4 stages. Each stage is down-samPled from the Previous stage by a stride of 2. The feature reso-
lutions for each stage are H X 手,H X 与,4 X 篇 and H X 基 respectively, where H and W
is the image height and width. For each stage, M quadtree transformers are used with a channel
number of I and head number of J. For the network PVTv2-b0, the Parameters M, I, J are set to
[2, 2, 2, 2], [32, 64, 160, 256], [1, 2, 5, 8] at each stage resPectively. For the network PVTv2-b1, the
Parameters M, I, J are set to [2, 2, 2, 2], [64, 128, 320, 512], [1, 2, 5, 8] resPectively. For PVTv2-b2,
the Parameters M, I, J are set to [3, 4, 6, 3], [64, 128, 320, 512], [1, 2, 5, 8] resPectively. For PVTv2-
b3, the Parameters M, I, J are set to [3, 4, 18, 3], [64, 128, 320, 512], [1, 2, 5, 8] resPectively. For
PVTv2-b4, the Parameters M, I, J are set to [3, 8, 27, 3], [64, 128, 320, 512], [1, 2, 5, 8] resPectively.
B.4	Object detection and instance segmentation
We show the object detection and instance segmentation results of Mask-RCNN (He et al., 2017) in
Table 7 and Table 8 in different training settings. In Table 7, we train Mask-RCNN for 12 ePoch and
resize the image to 800 X 1333 while In Table 8, we train the model for 36 ePochs and resize the
training images to different scales for data augmentation. We can see that the QuadTree attention
obtains consistently better Performance than other methods.
13
Published as a conference paper at ICLR 2022
PVTv2-b0 (Wang et al., 2021b)
QuadTree-B-b0 (K=32, ours)
ResNet18 (He et al., 2016)
PVTv1-Tiny (Wang et al., 2021c)
PVTv2-b1 (Wang et al., 2021b)
Quadtree-B-b1 (K=32, ours)
ResNet50 (He et al., 2016)
ResNet101 (He et al., 2016)
ResNeXt101-32x4d (Xie et al., 2017)
PVTv1-small (Wang et al., 2021c)
PVTv2-b2 (Wang et al., 2021b)
QuadTree-B-b2 (K=32, ours)
APb	APb50	APb75	APm	AP5m0	AP7m5
38Γ^	60.5	40.7	36.2	57.8	38.6
38.8	60.7	42.1	36.5	58.0	39.1
34.0-	54.0	36.7	31.2	51.0	32.7
36.7	59.2	39.3	35.1	56.7	37.3
41.8	64.3	45.9	38.8	61.2	41.6
43.5	65.6	47.6	40.1	62.6	43.3
3o-	58.6	41.4	34.4	55.1	36.7
40.4	61.1	44.2	36.4	57.7	38.8
41.9	62.5	45.9	37.5	59.4	40.2
40.4	62.9	43.8	37.8	60.1	40.3
45.3	67.1	49.6	41.2	64.2	44.4
46.7	68.5	51.2	42.4	65.7	45.7
PVTv1-Medium (Wang et al., 2021c)	42.0	64.4	45.6	39.0	61.6	42.1
PVTv2-b3 (Wang et al., 2021b)	45.9	66.8	49.3	28.6	49.8	61.4
QuadTree-B-b3	48.3	69.6	52.8	43.3	66.8	46.6
PVTv1-Large (Wang et al., 2021c)	42.9	65.0	46.6	39.5	61.9	42.5
PVTv2-b4 (Wang et al., 2021b)	47.5	68.7	52.0	42.7	66.1	46.1
QuadTree-B-b4	48.6	69.5	53.3	43.6	66.9	47.4
Table 7: Object detection results on COCO val2017 with Mask-RCNN. We use PVTv2 backbone
and replace the reduction attention with quadtree attention.
	#Params	AP	AP50	AP75	APS	APM	APL
QUadTree-B-b0	23.4	42.4	64.5	45.9	38.9	61.6	41.6
QUadTree-B-b1	33.3	46.4	68.6	50.7	41.9	65.6	44.7
SWin-T (LiU et al., 2021)-	47.8	46.0	68.1	50.3	41.6	65.1	44.9
Focal-T (Yang etal., 2021)	48.8	47.2	69.4	51.9	42.7	66.5	45.9
QUadTree-B-b2	44.8	49.3	70.7	53.9	43.9	67.6	47.4
SWin-S (LiU etal., 2021)-	69.1	48.5	70.2	53.5	43.3	67.3	46.6
Focal-S Yang et al. (2021)	71.2	48.8	70.5	53.6	43.8	67.7	47.2
QUadTree-B-b3	70.0	49.6	70.4	54.2	44.0	67.7	47.5
Table 8: Object detection results on COCO val2017 with Mask-RCNN training with 36 epochs
and multi-scale data argumentation strategy. We use PVTv2 backbone and replace the reduction
attention with quadtree attention.
2.4
2.2
2.0
1.8
1.6
1.4
1.2
1.0
0.30
0.25
QuadTree-B Attention
Spatial Reduction Attention
Linear Attention
QuadTree-A Attention
O 5 IO 15	20	25	30
Epoch
0	5	10	15	20	25	30
Epoch
(a) Training Loss
(b)AUC@200
Figure 3:	Loss and AUC@20° of image matching.
14
Published as a conference paper at ICLR 2022
(a) Training Loss
80
20
10
3
50
150
Epoch
——Quadtree-B-bO
一PVΓv2-bO -
—Swiπ-bO
200	250	300
(b) Validation Accuracy
Figure 4:	Loss and top 1 accuracy of image classification for PVTv2-b0 archtecture.
ImageNet	COCO (RetinaNet)
Param.(M) FloPs (G) Top1(%) AP	AP50	AP75
Swin-T (Liu et al., 2021)	29	45	81.3	42.0	\	\
Focal-T (Yang et al., 2021)	29	4.9	82.2	43.7	\	\
Quadtree-B	30	4.6	82.2	44.6	65.8	47.7
Table 9: Comparison under Swin-T settings in image classification and object detection.
C Training loss
Feature matching. We plot the training loss and validation performance for LoFTR-lite in Fig-
ure 3 for different efficient transformers, including spatial reduction (SR) transformer (Wang et al.,
2021c), linear transformer (Katharopoulos et al., 2020), our Quadtree-A, and Quadtree-B transform-
ers. We can see quadtree-B transformer obtains consistently lower training loss and higher perfor-
mance over other three transformers. In addition, it is also noted that the spatial reduction (SR)
transformer has lower training but worse AUC@20° than QUadTree-A attention, which indicates
that it cannot generalize well.
Image classification. We also show traning and validation curve for image classification task with
respective to different attentions in Fig. 4. Compared with Swin Transformer (Liu et al., 2021) and
PVT (Wang et al., 2021c), the loss of Quadtree attention is consistently lower and the top 1 accuracy
is higher.
D Running time
Currently, we only implement a naive CUDA kernel without many optimizations and it is not as
efficient as the well-optimized dense GPU matrix operation. We test the running time of Retinanet
under PVTv2-b0 architecture. For PVTv2-b0, The running time is 0.026s to forward one image
and for Quadtree-b0, the running time is 0.046s for forwarding once. However, Quadtree-b0 has
much lower memory usage than PVTv2-b0. Quadtree-b0 consumes about 339MB while PVTv2-b0
consumes about 574MB for one 800 × 1333 image.
E	Ablations
QuadTree-A vs QuadTree-B. QuadTree-B architecture consistently outperforms QuadTree-A in
feature matching, image classification, and detection experiments. We analyze its reason as shown
in Figure 5, where (d) and (e) show the attention score maps of QuadTree-A and QuadTree-B at
different levels for the same point in the query image shown in (a). It is clear that the QuadTree-B
has more accurate score maps, and is less affected by the inaccuracy in coarse level score estimation.
We further visualize the attention scores of spatial reduction (SR) attention (Wang et al., 2021c) and
15
Published as a conference paper at ICLR 2022
(a) Query image
(b) SR attention
(c) Linear attention
level 1	level 2	level 3
(d) Quadree-A
Figure 5: Score map visualization of different attention methods for one patch in the query image.
The first row shows score maps of spatial reduction attention and linear attention. The second row
shows score maps of QuadTree-A and QuadTree-B at different levels, and the left image is the
coarsest level, while the right image is the finest level for both sub-figures.
level 1	level 2	level 3
(e) Quadtree-B
ImageNet			COCO (RetinaNet)		
	Flops (G)	Top 1(%)	AP	AP50	AP75
Quadtree-B-b2	^Γ3	-82.6	44.9	66.2	47.7
Quadtree-B-b2+MPE	4.3	82.7	46.2	67.2	49.5
Table 10: Ablation on multiscale position encoding.
linear transformer (Katharopoulos et al., 2020) in (b) and (c). We can see that SR attention and
linear transformer attend the query token on large unrelated regions due to the loss of fine-grained
information. In contrast, our quadtree transformer focus on the most relevant area.
Comparison with Swin Transformer and Focal Transformer. We compare with Swin Trans-
former and Focal Transformer in Table. 9 using the released codes. We replace the corresponding
attention in Swin Transformer with Quadtree-B attention. Our method obtains 0.9% higher top 1
accuracy than Swin Transformer and 2.6% higher AP in object detection. Compared with Focal
transformer, quadtree attention achieve the same top 1 accuracy in classification with fewer flops,
and 0.9% higher AP in object detection.
Multiscale position encoding. We compare our method with or without multiscale position encod-
ing (MPE). For Quadtree-B-b2 model, MPE can bring an improvement of 1.3 on object detection.
Top K numbers. Table 11 and Table 12 shows the performance of QuadTree-B architecture with
different value of K for object detection and feature matching respectively. The performance is
improved when K becomes larger and saturates quickly. This indicates only a few tokens with high
attention scores should be subdivided in the next level for computing attentions.
		AP	AP50	AP75					AUC@5°	AUC@10°	AUC@20°
K	=1	37.3	57.2	39.4	K=	1	15.7	^^∑3	48.9
K	≡-8-	38.0	58.2	40.4	K=	厂	16.2	^^3^3	50.8
K	1Γβ~	38.4	58.7	41.1	K=	^8-	17.4	~44a	51.6
K	≡-32-	38.5	58.8	41.1	K=	^16^	17.7	^346	51.7
Table 11: The performance of QuadTree-B un-
der different K in object detection.
Table 12: The performance of QuadTree-B un-
der different K in feature matching
16