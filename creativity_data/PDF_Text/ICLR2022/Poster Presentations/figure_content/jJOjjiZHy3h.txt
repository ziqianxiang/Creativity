Figure 1: Adversarial examples generated using our proposed method (AdA). Examples are shown fromtwo different backbone architectures used with our method: EDSR in (b) and CAE in (c). Original images areshown in (a); the image pairs in (b) and (c) show the adversarial example produced by our method on the leftand exaggerated differences on the right. In this case, adversarial examples found through either backbone showlocal and global color shifts, while examples found through EDSR preserve high-frequency details and onesfound through CAE do not. Examples found through CAE also exhibit grid-like artifacts due to the transposedconvolutions in the CAE decoder.
Figure 2: Distribution of SSIM scores between clean and adversarial images found through AdA. Densitiesare shown for two backbones (EDSR & CAE) backbones at five perturbation radii (ν). The AdA (EDSR) SSIMdistribution with a low perturbation radius (ν = 0.0075) is highly concentrated around 0.99 yielding imagesvery close to the clean inputs; increasing ν slightly, dissipates density rapidly. For AdA (CAE) increasing theperturbation radius shifts the density lower, yielding increasingly more corrupted images. Also note that theSSIM range with non-zero support of AdA (CAE) is much wider than of AdA (EDSR).
Figure 3: Reconstructing Cifar-10-C corruptions through two image-to-image models. These bar plotsshow the extent to which two AdA backbones (EDSR & CAE) can be used to approximate the effects of the15 corruptions present in Cifar- 1 0-C. Bars show mean (and 95% CI of the mean) SSIM (Wang et al., 2004)(higher is better) between pairs of corrupted images and their reconstructions (starting from the original images).
Figure 4: Performance on image corruptions through training. These plots visualize the perfor-mance of the best AdA combination on each of the common and extra *-C corruptions as trainingprogresses. Each individual rectangle plots top-1 accuracy. Brighter is better. The accuracies arevisualized raw (plots to the left), normalized over the columns (middle plots) or over the rows (plotsto the right). Normalizing over the columns visualizes which corruption’s performance is best at thatpoint in training. Normalizing over the rows visualizes at which stage the classifier performs best ona given corruption.
