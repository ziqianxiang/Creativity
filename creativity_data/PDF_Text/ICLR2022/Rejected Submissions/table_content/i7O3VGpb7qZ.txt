Table 1: Experimental results of code editing with 5 support exemplars on C#Fixer dataset. RS: random select; AE: average edit representation; GED: graph edit distance; NN: nearest neighbor; CS: cosine similarity; Comp: composition. Please refer to the experiment protocol for a full explanation. The middle line in the table divides the methods into non-composition and composition ones.						Macro Accuracy	Split #1	Split #2	Split #3	Split #4	Split #5	Avg.
Table 2: Experimental results of code editing with 5 support exemplars on PyFixer dataset. Macroand micro accuracy are identical on this dataset. The middle line in the table divides the method intonon-composition and composition method.
Table 4: Fixer Splits on C#FixerSplit #1	CA2007, IDE0004, RCS1015, RCS1021, RCS1032, RCS1058, RCS1077, RCS1097, RCS1118, RCS1123, RCS1197, RCS1206	RCS1146, RCS1207, RCS1202, RCS1089Split #2	IDE0004, RCS1015, RCS1032, RCS1058, RCS1077, CA2007, RCS1089, RCS1146, RCS1202, RCS1206, RCS1207, RCS1097	RCS1118, RCS1123, RCS1021, RCS1197Split #3	RCS1015, RCS1021, RCS1032, RCS1058, RCS1077, RCS1097, CA2007, IDE0004, RCS1118, RCS1146, RCS1202, RCS1207	RCS1123, RCS1197, RCS1206, RCS1089Split #4	RCS1123, RCS1021, RCS1032, RCS1058, RCS1206, RCS1097, CA2007, IDE0004, RCS1118, RCS1146, RCS1202, RCS1207	RCS1015, RCS1197, RCS1077, RCS1089Split #5	RCS1077, RCS1021, RCS1032, RCS1058, RCS1206, RCS1097, CA2007, IDE0004, RCS1197, RCS1146, RCS1089, RCS1207	RCS1118, RCS1015, RCS1123, RCS1202Table 5: Fixer Split on PyFixerSplit#1	I	08, 15, 18, 23, 34, 42, 47, 49	∣	05, 41, 09, 35Split #2	I	08, 09, 35, 23, 34, 42, 47, 05	∣	41, 49, 15, 18Split #3	I	41,09, 15, 23, 49,42, 47, 05	∣	08, 18, 34, 35Split #4	I	41,09, 34, 23, 49,42, 08, 05	∣	47, 15, 18, 35Split #5	I	15, 09, 34, 23, 49, 35, 08, 47	∣	05, 41, 18, 42We use the fixer’s name in Table 4 and the fixer’s index in Table 5 corresponding to the order in thePython-Future package.
Table 5: Fixer Split on PyFixerSplit#1	I	08, 15, 18, 23, 34, 42, 47, 49	∣	05, 41, 09, 35Split #2	I	08, 09, 35, 23, 34, 42, 47, 05	∣	41, 49, 15, 18Split #3	I	41,09, 15, 23, 49,42, 47, 05	∣	08, 18, 34, 35Split #4	I	41,09, 34, 23, 49,42, 08, 05	∣	47, 15, 18, 35Split #5	I	15, 09, 34, 23, 49, 35, 08, 47	∣	05, 41, 18, 42We use the fixer’s name in Table 4 and the fixer’s index in Table 5 corresponding to the order in thePython-Future package.
Table 6: Graph2Edit results of Hit-1-in-5 and Hit-5-in-5 with 5 support exemplars on C#Fixer dataset.
Table 7: Graph2Edit results of Hit-1-in-5 and Hit-5-in-5 with 5 support exemplars on PyFixer dataset.
Table 8: A failure case from our method on C#Fixer datasetSupport setC-	Utils.AssertArgument(this.VAR0!= null && this.VAR0.Any(), LITERAL);C+	Utils.AssertArgument(this.VAR0?.Any() == true, LITERAL);C-	bool VAR0= this.VAR1!= null && this.VARLAny();C+	bool VAR0= this.VAR1?.Any() == true;C-	Var VAR0= VARLProPertieS().Where(VAR2=> VAR2!= null && VAR2.Name != null&& String.Equals(VAR2.Name, LITERAL, StringComparison.OrdinalIgnoreCase));C+	var VAR0= VAR1.ProPerties().Where(VAR2=> VAR2?.Name != null&& String.Equals(VAR2.Name, LITERAL, StringComParison.OrdinalIgnoreCase));C-	Var VAR0= VAR1.AsEnumerable().FirstOrDefault(VAR2=> VAR2.Inline != null&& VAR2.Inline.Tag == Syntax.InlineTag.String);C+	Var VAR0= VAR1.AsEnumerable().FirstOrDefault(VAR2=> VAR2.Inline?.Tag == SyntaX.InlineTag.String);C-	Var VAR0= VAR1.AsEnumerable().FirstOrDefault(VAR2=> VAR2.Inline != null&& VAR2.Inline.LiteralContent == LITERAL);C+	Var VAR0= VAR1.AsEnumerable().FirstOrDefault(VAR2=> VAR2.Inline?.LiteralContent == LITERAL);Query samPleC-	var VAR0= (VAR1!= null) && (VAR1.NodeType == EXPreSSionTyPe.Not);C+	Var VAR0= (VAR1?.NodeTyPe == EXPressionTyPe.Not);Prediction Var VAR0= (VAR1?.Any() == EXPressionTyPe.Not);
