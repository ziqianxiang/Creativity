Table 1: Profit Comparison on Different Scenarios of 50 and 100 SKUs EnvironmentEnv-Scenario	CD-PPO(OUrS)	IPPO-IR(W/o context)	IPPO-IR	IPPO(W/o context)	IPPO	BaSe-StOCk(DynamiC)N50-C500	310.81 ± 76.46	235.09 ± 60.61	250.03 ± 58.38	164.43 ± 143.01	366.74 ± 89.58	-408.14N50-C2000-	694.87 ± 174.184	689.27 ± 48.92	545.86 ± 459.71	-1373.29 ± 870.03	-1102.97 ± 1115.69	42.71N100-C1000	660.28 ± 149.94-	-2106.98 ± 315.38-	-1126.42 ± 409.83	-1768.19 ± 1063.61	-669.83 ± 1395.92-	-22.05N100-C400P~	1297.75 ± 124.52	-2223.11 ± 2536.00	148.00 ± 1017.47	-6501.42 ± 6234.06	-6019.28 ± 9056.49	493.32shown in Figure 2. It is straightforward to observe that CD-PPO converges to the same performancecomparing with other methods. In particular, CD-PPO is more sample-efficient due to its local sim-ulations in parallel. To evaluate our algorithm on a larger scenario, we also run CD-PPO and IPPO(same with previous settings) on 50 and 100 SKUs and record the number of data samples whenreaching the median performance of baselines. The results are summarized in Table 1 and Figure 3,where “N” and “C” denote the number of SKUs and the maximum capacity of shared resource,respectively. More details about the implementation and hyper-parameters we used can be found inAppendix C.
Table 2: Notations.
Table 3: Hyparameters used in CD-PPOE.3 Details of States and RewardsTable 4	shows the features of the state for our MARL agent that corresponds to the i-th SKU on thet-th time step.
Table 4: Features of the stateF Base-stock PolicyAlgorithm 5 Base-stock PolicyInput:{Dt* i }tt2=t , v, τ , IM parametersOutput:Zi,{Oti}tt4=t3// Description:Base-stock policy for single SKU i// Zi:Base-stock level for SKU i// {Oti}tt4=t3:Base-stock replenishment policy for SKU i, from t3 to t4// {Dti}tt2=t :Demand series of SKU i used to infer Zi, from t1 to t2// v : v ≥ 1, v ∈ R, Hyper-parameter to control storage utilization level// τ : τ ∈ N+, Hyper-parameter to control replenishing interval// IM parameters:including leading time Li, storage capacity C, etc// Solve Mixed Integer Programming with dual simplex methods:'Si = min (Dit, It)Ti+1 = Tt -Oi-Li+1 + Oi+1ZiJ max X2 Pt s.t. < It+ [ = It -(Stt;Ot-Li+Ii)Zi /，t—tι	Ot ——max (0, Zi — It — Tt)Ptt= PiSi- qiOi- hIi
Table 5:	Profit Comparison on All EnvironmentsEnv ScenarioN5-C50N5-C100N50-C500CD-PPO(ours)40.58 ± 6.0299.21 ± 1.91310.81 ± 76.46Profit(10k dollar)IPPO-IR(w∕o context)~MAPPO-IR(w/o context)	IPPO-IR	MAPPO-IR	IPPO(W/ocontext)	MAPPO(W/o context)	IPPO	MAPPO-40.37 ± 4.89	39.32 ± 15.53	43.33 ± 3.30	54.87 ± 9.26	74.11	± 1.5 5	4 9.24	± 1.32	63.22 ± 13.75	48.49	± 1.8992.41 ± 2.78	94.70 ± 18.84	91.38 ± 3.57	97.69 ± 14.41	97.89	± 6.65	74.71	± 1.51	92.90 ± 13.36	71.57 ± 3.14235.09 ± 60.61	N/A	250.03 ± 58.38	N/A	164.43 ± 143.01	N/A	366.74 ± 89.58	N/ABasestock(Static) Basestock(Dynamic) Basestock(Oracle)17.4834	33.9469	38.620748.894480.8602N50-C2000N100-C1000
Table 6:	Average samples needed by different algorithms to reach the median performance of base-lines on All EnvironmentsData Samples(10k)CD-PPO(ours)	IPPO-IR(W/o context)	MAPPO-IR(W/o context)	IPPO-IR	MAPPO-IR	IPPO(W/o context)	MAPPO(W/o context)	IPPO	MAPPO∞	∞	∞	∞	708.10	588.63	1671.10	708.10	1671.10522.80	∞	711.97	∞	987.27	806.56	∞	1298.40	∞5484.49	∞	N/A	∞	N/A	9195.23	N/A	12802.89	N/AN/A	8483.04	N/A	∞N/A	∞	N/A	539.26N/A	127.57	N/A	∞^^N/A	∞	N/AN/A	191.88	N/AN/A	1151.57	N/AEnv ScenarioN5-C50N5-C100N50-C500N50-C2000-1	2996.87	3138.49N100-C1000	47.14	∞-N100-C4000	60.07	∞-
