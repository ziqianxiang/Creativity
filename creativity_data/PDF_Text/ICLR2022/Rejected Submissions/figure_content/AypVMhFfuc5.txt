Figure 1: Demonstration of FrugalMCT. (a): FrugalMCT workflow. (b): Performance of Fru-galMCT on COCO, a multi-label image dataset, using real commercial ML APIs. (c), (d): Exam-ples of FrugalMCT’s behavior on different inputs. In (c), FrugalMCT estimates that the accuracyof a cheap open source SSD model from GitHub is high, and thus directly returns its predictions. In(d), FrugalMCT estimates that combining SSD’s results with the Everypixel API has a much higherestimated accuracy, and thus it invokes EveryPixel and combines its results with SSD’s results.
Figure 2: Overview of FrugalM C T. (a) shows how it works: Given a data point, FrugalMCT firstinvokes a base service. An accuracy predictor then estimates the performance of different APIs.
Figure 3: A FrugalMCT strategy learned on the dataset COCO. (a) shows that FrugalMCT reduCesCost by mostly Calling the Everypixel API (45.4%) or the GitHub API (22.1%) only. (b) and (c) showhow the accuracy and cost vary with weight P. The blue point corresponds to 0.006, the learned p.
Figure 4:	Accuracy cost trade-offs. The offline FrugalMCT (black) observes the full data and thenmake decisions. The online FrugalMCT (red) matches the offline performance in all the experiments.
Figure 5:	Testing accuracy v.s.training data size. The fixed budget is 6, 15, 3, respectively.
