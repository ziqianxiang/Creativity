Figure 1: Default color jitter (left) and Planckian jitter (right). Augmentations based on default colorjitter lead to unrealistic images, while Planckian augmentations lead to a set of realistic augmenta-tions. We also provide the ARC chromaticity diagrams. Here we sample a number of initial RGBvalues, and map them into the range of possible outputs given by the respective data augmentationtechnique. These diagrams show that Planckian jitter transforms colors along chromaticity linesthat occur in nature when changing the illuminant, whereas the default color jitter transfers colorsthroughout the whole chromaticity plane. In both cases, only chromaticity effects have been shown,disregarding brightness and contrast variations, to simplify the visualization.
Figure 2: SimSiam training procedure exploiting Planckian-based data augmentation (left), andfine-tuning the linear classifier using the trained encoder (right).
Figure 3: Color sensitivity analysis. On the left, the results of the robustness analysis: here arereported the accuracies at different illuminant achieved by the backbones trained with the differentdata augmentation configurations. On the right, the color sensistivity indexes computed for thedifferent configurations used for training the backbone network.
Figure 4:	Spectral power distributions (left) and corresponding ARC chromaticities (right) of thesampled black body radiator, used to generate Planckian jittering.
Figure 5: Default color jitter (left) and Planckian jitter (right) in xy chromaticity.
Figure 6: Example of images taken from the datasets used for the downstream classification task.
Figure 7: Illumimant robustness analysis. To assess the features invariance to realistic color changesin the images, for each method has been tested the classification accuracy with 25 different versionsof the datsets. The images of the two datasets (Cifar- 1 00 on the left and Flowers-1 02 on theright) have been modified with the illumimants from temperature 3000 K to 15000 K, using thePlanckian Jitter transform.
Figure 8: Execution time comparison between the proposed data augmentation algorithm imple-mentation and the Color Jitter implementation in Pytorch Torchvision v0.9.1. For each resolutionwe executed both the algorithms 40 times.
