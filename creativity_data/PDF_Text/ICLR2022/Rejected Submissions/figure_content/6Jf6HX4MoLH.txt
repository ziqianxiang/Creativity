Figure 1: GiVen a planning problem (left), we propose a hierar-chical approach to planning. In our method, the MPT proposesa region where a Valid path might exist (center). A sampling-based planner is used to find a collision-free path (right) giVen theproposed region.
Figure 2: Overview of MPT Module. (Start from the top left and move clockwise) The input map,and the start (green) and goal (red) encoded map are concatenated together and passed as inputs to themodel. The Fully Convolution Network (FCN) passes a sliding window of size p Ã— p over the inputand encodes each patch into latent vectors of dimension d. After reshaping, fixed positional encodingsare added to the latent vectors to inject spatial location. The modified latent representation is used bythe transformer module to identify patches through which a path might exist. This information isencoded into a latent vector of size d, which is used by a classifier to provide the probability that apath might pass through the patch. The patches with probability greater than 0.5 are used to createthe mask for the map. The light green shading highlights the flow of information for a single patchfrom the input to the output of the model.
Figure 3: Planned paths for two different planning problems. Top Row: Random Forest environment.
Figure 4: (From left) Path planned by RRT*, IRRT*, MPT-RRT*, and MPT-IRRT* for the same start(green) and goal (red) positions. MPT aided planners are able to reduce significantly the number ofFigure 5: Planning statistics for the Point Robot Model. Left: The planning time for traditionaland learning-based planners. Right: Number of vertices in the planning tree for traditional andlearning-based planners. MPT aided planners consistently reduce the planning time and the verticesin the planning tree, resulting in a lower variance of these statistics for these planners.
Figure 5: Planning statistics for the Point Robot Model. Left: The planning time for traditionaland learning-based planners. Right: Number of vertices in the planning tree for traditional andlearning-based planners. MPT aided planners consistently reduce the planning time and the verticesin the planning tree, resulting in a lower variance of these statistics for these planners.
Figure 6: Plot of paths for Random Forest envi-ronments of different size. The architecture ofthe MPT Model allows flexibility in planning forenvironments of different sizes.
Figure 7: Path generated by MPT-RRT*on a random start and goal pair on themap of building 079 at University ofFreiburg using a model trained only onsimulated environments.
Figure 8: MPT can also be trained to aid SMP plannersfor non-holonomic robots. Left and Right: Planned pathson Random Forest environment using MPT-SST. MPTidentifies regions through which a non-holonomic pathexists.
Figure 9: To encode the (x, y) position of each pixel in the world co-ordinate we add fixed positionvectors. Left: Region proposed by an MPT model trained with position encoding proposed inDosovitskiy et al. (2021) for a map larger than the training dataset. The blue box marks the size ofthe training dataset and the red box marks the size of test dataset. The model fails to predict regionsnear the boundary of the training map. Right: A training map, randomly shifted in world coordinates.
Figure 10: Plots of two paths for the modified maze envi-ronment using the NEXT-KS planner. The yellow circlesindicate the sampled points by the planner. The planneris able to solve for simple problems (Left) while for longhorizon problems it gets stuck in local minimums.(Right)Table 7: Comparing planning accuracy,planning time, and number of verticesin the tree for the Point Robot on adown sampled Maze EnvironmentAlgorithm	NEXT-KSAccuracy	28.28%Time (sec)	3.021Vertices	387C Position EncodingWe observed that the MPT modeltrained on the position encodingproposed by Vaswani et al. (2017)showed signs of overfitting. Themodel fails to highlight the regionnear the boundary of the training
Figure 11: (From left) Path planned by RRT*, IRRT*, MPT-RRT*, and MPT-IRRT* for the samestart (green) and goal (red) positions for the Random Forest environment. MPT aided planners areable to reduce significantly the number of vertices (orange) required to search for a path.
Figure 12: Three different trajectories planned successfully using MPT on the Random Forestenvironment. Left Column: The ground truth path in the validation dataset. Middle Column: Theprobability estimate made by the MPT. Right Column: The planned path using RRT* on the regionproposed by the MPT.
Figure 13: (From left) Path planned by RRT*, IRRT*, MPT-RRT*, and MPT-IRRT* for the samestart (green) and goal (red) positions for the Maze environment. MPT aided planners are able toreduce significantly the number of vertices (orange) required to search for a path. The IRRT* plannerhas to search the entire space for these kinds of maps.
Figure 14: Three different trajectories planned successfully using MPT on the Maze environment.
Figure 15: The distribution of metrics for maps of different sizes. Top: The distribution of planningtime for different algorithms for maps of different sizes. Bottom: The distribution of the number ofvertices in the planning tree for different algorithms for maps of different sizes. MPT aided plannerscan achieve faster planning times and lower variance in the metrics across maps of different sizes,which were not part of the training data.
Figure 16: Three different trajectories planned unsuccessfully using MPT on the Random Forestenvironment. Left Column: The ground truth path in the validation dataset. Middle Column: Theprobability estimate made by the MPT. Right Column: The planned path using RRT* on the regionproposed by the MPT. We observe that in all three cases the failure to predict a few patches resultedin a scenario with no valid paths.
Figure 17: Three different trajectories planned unsuccessfully using MPT on the Maze environment.
