Table 3: Monitored code lines in OpenBLAS and Pytorch.
Table 4: Detailed cell structures of random NAS models. Each cell in a model contains 4 nodes (4layers) and each node has two inputs, i.e., (operations, node where input f rom)D Comparison between Fidelity Extracted Network with theOriginal NetworkFigure 11 demonstrates an example of the raw memory address trace of a NAS cell. For the sakeof simple understanding, we divide the whole trace into multiple blocks representing computationalnodes in the cell. Each adjacent ”read-write” pair in the trace means the data is first read fromaddrA and then is written back to addrB , where addrA and addrB can be either the same or differ-ent according to the following usage of the data. By analyzing consistent between the read/writeaddresses, we can reveal the model topology with 100% precision. Figure 12 gives a comparisonbetween the architecture obtained by the fidelity extraction and the original network. As we dis-cussed in main text, while the monitored memory address traces allow the attacker to reveal thecomplete model topology precisely, the difference between the extracted model and the original oneis only determined by the predicted operation sequence and hyper-parameters. In Figure 12 (a), twooperations 3 × 3DSC and 5 × 5SC are marked as red, because the predicted operation sequencesof them contain small errors, i.e., the repeated times of event labels (i.e., channel size) has slightdeviations. But it is simple to fix them based on the model context. Hence, we can finally reveal thecomplete model architecture.
