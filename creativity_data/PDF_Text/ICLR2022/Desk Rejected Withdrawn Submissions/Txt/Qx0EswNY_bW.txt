Under review as a conference paper at ICLR 2022
Modeling Variable Space with Residual Ten-
sor Networks for Multivariate Time Series
Anonymous authors
Paper under double-blind review
Ab stract
Multivariate time series involve a series of valuable applications in the real world,
and the basic premise of which is that multiple variables are interdependent. How-
ever, the relationship between variables in the latent space is dynamic and com-
plex, and as the time window increases, the size of the space also increases expo-
nentially. For fully exploiting the dependencies in the variable space, we propose
Modeling Variable Space with Residual Tensor Networks (MVSRTN) for multi-
variate time series. In this framework, we derive the mathematical representation
of the variable space, and then use a tensor network based on the idea of low-rank
approximation to model the variable space. The tensor components are shared to
ensure the translation invariance of the network. In order to improve the ability to
model long-term sequences, we propose an N-order residual connection approach
and couple it to the space-approximated tensor network. Moreover, the series-
variable encoder is designed to improve the quality of the variable space, and we
use the skip-connection layer to achieve the dissemination of information such as
scale. Experimental results verify the effectiveness of our proposed method on
four multivariate time series forecasting benchmark datasets.
1	Introduction
Multivariate time series are ubiquitous in the real world, such as energy collection and consump-
tion (Rangapuram et al., 2018), traffic occupancy (Lai et al., 2018), financial market trends (Shih
et al., 2019), and aerospace data (Zhao et al., 2020). They mainly consist of sensor data sampled
on multiple variables at different timestamps. In order to accurately forecast future time series, it is
necessary to learn the laws and the dynamic interaction information between variables that exist in
the series history (Wu et al., 2020; Xu et al., 2020; Cheng et al., 2020).
For illustrating the dependencies in the multivariate time series, we focus on examples through case
study. In Figure 1(a), a certain variable itself has periodic laws, and the dependency relationship in
this respect can be well captured by the short-term and long-term model of the modeling sequence.
As shown in Figure 1(b), there are dynamic dependency relations between the variables. The “ar-
row” indicates the trend of data changes. In 2011, the “Switzerland” variable changed significantly
earlier than the other in 2013, the trends of the three variables occurred almost simultaneously.
In literature, there have been some approaches to capture interactions in series history from different
perspectives. research utilizing traditional deep learning components such as CNNs, RNNs, and
attention mechanisms are more inclined to learn long-term and short-term sequence states, and fail
to make full use of the entanglement between variables in the latent space (Lai et al., 2018; Shih
et al., 2019; Cheng et al., 2020). New mathematical tools such as graph neural networks and tensor
calculation methods have inspired the research on the spatial Relations in multivariate time series.
(Wu et al., 2020) uses graph neural network to extract one-way relationships between variable pairs
in the end-to-end framework. The TLASM (Xu et al., 2020) adopts tensor calculation to model the
trend in the multivariate time series, and combines the core tensor components into the LSTM.
Nevertheless, most of the above-mentioned schemes for explicitly modeling spatio-temporal depen-
dencies tend to bulid low-dimensional variable spaces, but this is still incomplete for the variable
spaces shown in Figure 1(c) of. In other words, in the high-dimensional variable space evolved
over time, the ideal state for multivariate time series is that the model can capture the effective re-
lationship between variables as fully as possible. To address the above challenges, we first define
1
Under review as a conference paper at ICLR 2022
(a) Electricity series data
yι	Y2	y3	Vm	yM+h
Variable 1
Variable 2
Variable 3
Variable 4
Time
(b) Exchange rate series data (c) Multivariate time series
Figure 1: (a) The electricity consumption of an area for 3 weeks, which represents periodic depen-
dence of a single variable. (b) Daily exchange rates for 3 years to show the interaction between
variables. (c) Schematic diagram of variable space for multivariate time series.
the high-dimensional variable space mathematically through the tensor product operator. Then, the
proposed MVSRTN model models the variable space of multivariate time series.
In the proposed scheme, N-Order Residual Tensor Network is the core component. The tensor net-
work is based on the idea of low-rank approximation, which refers to the mode of decomposing
and truncating the extremely large dependent space through tensor decomposition methods (Ma
et al., 2019; Zhang et al., 2019) in the case of a certain error. For modeling the exponential vari-
able space, we first adopt the Tensor-Train (Oseledets, 2011) algorithm satisfying the demands of
processing different timestamps to decompose the variable space representation, and then obtain
the space-approximated tensor network by tensor contraction. However, for long-term sequences,
the continuous multiplication in the tensor contraction calculation would result in series of gradient
problems. Inspired by ordinary differential equations, we extend and introduce N-order Euler dis-
cretization method, and the first-order approach can be thought of as residual connection. Finally,
the space-approximated tensor network and the proposed N-order residual connection are coupled
to model the effective interdependence in the variable space.
In addition, Series-Variable Encoder aims at improving the quality of the variable space by reinte-
grating the time series. In this component, the combination of 1D CNN and self-attention mecha-
nism at series level and variable level effectively enrich the dependency information mapped to the
latent space. For making MVSRTN more robust, we use the linear Skip-Connection Layer to di-
rectly propagate the input scale and coding scale information to the Output Layer. Our contributions
are of three-folds:
•	We represent the high-dimensional variable space, and through theoretical analysis, we
demonstrate the space-approximated tensor network has the ability to model the latent vari-
able space.
•	We propose the MVSRTN. In this architecture, a designed encoder combines long-term and
short-term interactive information to optimize the variable space, a tensor network coupled
by N-order residual connection captures the dynamically changing dependencies, and an
additional layer propagates the scale features.
•	We perform extensive experiments on four benchmark datasets and the results demonstrate
the effectiveness of MVSRTN in evaluation metrics.
2	Related work
Multivariate Time Series In the real world, a large number of multivariate time series tasks are
derived from the fields of finance, economy, and transportation. The purpose of this type of task
is to capture or predict the trend of a set of variables that change dynamically over time. In the
research history of multivariate time series, researchers have reached a basic consensus that multiple
variables are interdependent. After a period of development, statistical machine learning models
such as Vector Auto-Regressive (Box et al., 2015), Gaussian Process (Frigola, 2015) algorithm can
linearly model multivariate time series data, but the complexity of the model expands dramatically
with the increase of time or variables. In recent years, with the rise of deep learning, neural networks
implicitly capture the dependence of data in a non-linear mode. LSTNet (Lai et al., 2018) uses CNN
and RNN to extract the local-term dependent mode of the time series, and extracts the long-term
2
Under review as a conference paper at ICLR 2022
mode by recurrent-skip layer. Based on the attention mechanism and the LSTNet model, the TPA-
LSTM (Shih et al., 2019) model can capture long-term dependencies across multiple time steps.
However, algorithms based on neural networks only explicitly model the interaction in the time di-
mension, and fail to fully analyze the relationships in the latent variable space. The MTCNN (Wu
et al., 2020) model based on graph neural network technology explicitly extracts the relationship
between variables and achieves the effect of SOTA. However, only the one-way relationship be-
tween variable pairs is processed, which is not enough for the dynamic and complex variable space.
Therefore, we consider using the idea of approximation to model the variable space.
Tensor Network for Dependent Space The tensor network is a powerful mathematical modeling
framework originated from many-body physics, which learns the effective associations in the expo-
nential Hilbert space through the idea of low-rank approximation (Stoudenmire & Schwab, 2016).
Based on the training approach of deep learning, Tensor networks just need to approximate the de-
pendent space by training the decomposed parameter space. In the field of natural language, the
TSLM (Zhang et al., 2019) model proves that the theoretical model obtained by tensor decom-
position of the high-dimensional semantic space has a stronger ability to capture semantic depen-
dence than the RNNs network. The u-MPS (Zauner-Stauber et al., 2018) tensor network based on
Tensor-Train decomposition (Oseledets, 2011) is also effective for probabilistic sequence model-
ing. Tensor networks have natural advantages in the field of modeling high-dimensional dependent
spaces (Miller et al., 2021). However, due to the gradient problem, the existing tensor network
modeling schemes are still difficult to deal with real-world sequence data with long periods.
Euler Discretization and Residual Connection The residual connection method can solve the
problem of the gradient disappearance of the deep network (He et al., 2016). When the gradient
is saturated, it can maintain the stability of the network according to the principle of identity map-
ping. Based on the theory of differential dynamics, the residual connection can be considered as
a discretization application of the first-order Euler solver (Chen et al., 2018). Higher-order solvers
(for example, the second-order Runge-Kutta) reduce the approximation error caused by the iden-
tity mapping (Zhu et al., 2019; Li et al., 2021), and also have better ability to process continuously
sampled data (Demeester, 2020).
3	Problem Statement
In this paper, we denote the multivariate time series task as follows. Formally, given the time series
signal of T points of time X = {yι, y2,…，yτ}>, where yt = {vt,1,vt,2,…,vt,D}> ∈ RD, T
is the number of time steps and D is the number of variables. We leverage X ∈ RT×D as time series
history to forecast the series of next time stamp yT+h, where h ≥ 0 and it is the desirable horizon
which is ahead of the current time stamp. It is worth mentioning that the range of the prediction task
h varies on different tasks.
The main purpose of this paper is to model the effective variable dependency in latent space. Hence,
we formulate the variable space as shown in Definition 1.
Definition 1. The tensor product operator is adopted to fully interact with the variable series yt
indexed by different timestamps. Taking y1 and y2 as an example, the interactive function is:
Vl,lV2,1	…V1,D V2,1
Tyι,y2 = y1 X y2 =	:	".	:	(I)
Vl,lV2,D ,…V1,D V2,D
where Ty1,y2 ∈ RD×D, and we define the whole variable space T ∈ RDT as:
Tyi,…,yτ = yι 0 y % …% yτ	(2)
In the model architecture, we will detail how to model the proposed variable space.
4	Model Architecture
In this section, we introduce the proposed MVSRTN architecture as shown in Figure 2. The Series-
Variable Encoder is utilized to optimize the original series data. The N-Order Residual Tensor
3
Under review as a conference paper at ICLR 2022
Output Layer
Time
MUltiVariate Time Series
ʌ.
Series-Variable Encoder
____________ʌ____________
N-Order Residual Tensor Network
λ
Figure 2: An overview of the proposed MVSRTN.
Network approximates the variable space, captures the dynamic dependence between variables over
time, and ensures the ability to model long-term sequences. We leverage Skip-Connection Layer
components to memory coding and scale information. Finally, the loss function exploited by MVS-
RTN is mentioned.
4.1	Series-Variable Encoder
The Series-variable Encoder is the first part of MVSRTN, in this component, 1D CNN layer is first
exploited to extract short-term patterns in the time dimension as well as local dependencies between
variables:
Ct = GeLU(WC * yt + be)	(3)
where * represents convolution operation, WC ∈ RkD×d and be ∈ Rd are all the weight parame-
ters, d is the number of filters, k is the kernel size, and GeLU is an activation function (Hendrycks
& Gimpel, 2016). After the above operations and zero-padding, the new sequence representation
C = {cι,…,CT}> ∈ RT×d can be obtained.
In addition, the proposed model gains the representation that enriches the global interaction infor-
mation by self-attention mechanism at series level and variable level, denoted as G ∈ RT ×d,
GS = SoftmaX(Tril(QSKS ))VS
d
GV = Softmax( QV√^V )VV
G = ReLU(Concat(GS;GV>)WG + bG)
(4)
where GS is the output of series-level self-attention, QS = CWSQ, KS = CWSK, VS = CWSV,
and WS ∈ Rd×d are all weight parameters. GV is from variable-level self-attention, QV =
C> WVQ, KV = C> WVK, VV = C> WVV, and WV ∈ RT ×T . Moreover, ReLU is an activa-
tion function (Nair & Hinton, 2010), Softmax means normalization, Tril refer to lower triangular
matrix and WG ∈ R2d×d . A gate structure is leveraged to fuse information :
X0 = Sigmoid(α) × C + Sigmoid(β) × G
(5)
where α and β are all scale parameters, and Sigmoid is an function (Leshno et al., 1993) commonly
used as gates. Finally, we achieve the encoded high-quality multivariate time series, and then map it
to the latent variable space.
4
Under review as a conference paper at ICLR 2022
(a)	(b)
(c)
Figure 3: (a) A space-approximated tensor network. (b) A first-order residual tensor network. (c) A
N-order residual tensor network.
4.2	N-Order Residual Tensor Network
In this section, we first give a theoretical analysis of the approximate variable space of the tensor
network, and secondly, introduce the algorithm flow of the component.
In the theoretical analysis part, We build the encoded series X0 = {xι, ∙ ∙ ∙ , XT}> ∈ RT×d into a
variable space. Compared to the Definition 1, based on the time series history X0, we represent the
final variable space as folloWs:
TXι,…，xτ = Xi 0 X2 % …% XT
(6)
In order to learn the effective interactive information in the variable space T, We decompose its rep-
resentation into a tensor netWork A that is contracted from T parameter tensors W(t) ∈ Rrt-1 ×rt×d:
A =W ⑴ Θ∙∙∙Θ W (T)
r1	r2	rT-1
XX…X
Whohι WIhIh2 …WhT-1 hT
(7)
h1 =1 h2 =1	hT -1 =1
Where xt ∈ Rd and ht ∈ Rrt refer to the indexes of W (t), and the dimension of the index ht is the
truncated rank of the tensor. This set of values [rt] determines the degree to Which A approximates
the variable space T. Θ is tensor contraction, Which can be understood as the dot product betWeen
tensors. As shoWn in Eq.(7), tensor contraction is essentially an addition operation on indexes With
the same dimensions to eliminate this index.
It is Worth noting that A and T are equal When the error is alloWed. The above theory is demonstrated
in Claim 1, Which illustrates that the decomposed parameter space A has the ability to model the
variable space.
Claim 1. The tensor network A is obtained by tensor-train decomposition of the variable space T.
When the rank of the parameter tensors in Eq.(7) is not truncated, A=T, and their complexity are
all equal to O(dT) ; When the following inequalities are satisfied, for the prescribed accuracy , A
can be considered as the optimal approximation of the space T.
kT -AkF ≤kTkF
(8)
The above is the theoretical discussion of modeling variable space through the idea of loW-rank
approximation. From a practical point of vieW, updating the tensor netWork through automatic
differentiation is an effective Way to reduce its loss With the variable space. Next, We give the
specific modeling process of the N-Order Residual Tensor Network component.
For ensuring the probability normalization of the tensor netWork input (Stoudenmire & SchWab,
2016), L2 regularization is performed on the sequence vector Xt in X0 at first:
φ(Xt) = L2(Xt)	(9)
As shoWn in Figure 3(a), the normalized series φ(Xt) is condensed With the netWork to forecast
the future distribution of variables. For avoiding confusion in the position of different times-
tamps, the netWork is modeled step by step in the direction of time, and the parameter tensors
5
Under review as a conference paper at ICLR 2022
are shared (ZaUner-StaUber et al., 2018), namely W(1)=…=W(T) = W ∈ Rr×r×d
ht = A(φ(xt), ht-i； W)
=ht G)WG) φ(Xi), t ∈ [1, …，T]
(10)
where ht ∈ Rr , h0 refers to all one vector, G refers to tensor contraction and r is set as a hyper-
parameter bond-dimension (which is adopted to control the ability to approximate the variable space
∙,T
of the tensor network, and the upper limit is d2).
For long-term seqUences, only the space-approximated tensor network will resUlt in gradient prob-
lems. In response to the issUe, we propose the N-order residUal connection approach. First, com-
pared with the tensor network strUctUre mentioned above, we add the residUal term when modeling
the series information of the cUrrent time stamp (as shown in FigUre 3(b)):
ht = H(φ(xt), ht-1; W)
=ht-i + A(φ(xt), ht—i； W),t ∈ [1,...,T]
(11)
Inspired by the nUmerical solUtion of ordinary differential eqUations, its high-order solvers have
lower trUncation error and higher convergence stability, we propose a tensor network combined with
the N-order residUal connection as shown in FigUre 3(c):
ht = H(φ(xt), ht-1; W)
N
=ht-1+	ajzj,t∈ [1,...,T]
j=1
(12)
zj = A(φ(xt), ht-1; W)	j = 1
zj = A(φ(xt) + bj, xt-1 + bjzj-1; W) 2 ≤ j ≤ N
where aj and bj are all fixed coefficients. Please see the Appendix A for the coefficient valUes
calcUlated by the Taylor’s FormUla of the different order residUal connections.
xU = hTWU + bU	(13)
Finally, a linear component maps hT ∈ Rr to xU ∈ RD, where WU ∈ Rr×D and bU are all
parameter weights.
4.3	Skip Connection Layer
The layer is added after the inpUt layer and encoder layer respectively, which directly connected to
the Output Layer. For mUltivariate time series, nUmeroUs nonlinear strUctUres in the model make
the oUtpUt scale insensitive to the inpUt scale (Lai et al., 2018), resUlting in a significant redUction in
the prediction accUracy of the model. In addition, in order to memorize the encoder states, we also
adopt the layer to directly propagate the encoding information to the oUtpUt.
xL = LWL + bL	(14)
the known input data is X = {yi, y?, …, yτ}> ∈ RT×D, and the selected series is L =
{yτ-ι+ι, ∙ ∙ ∙ , yτ} ∈ RD×l, WL ∈ Rl×1 and bL ∈ R1 are all weight parameters.
xM = (MWM+bM)WO+bO	(15)
the selected series is M = {xτ-m+ι, •…, XT} ∈ Rd×m, where the encoder series is X0 =
{xi, X2,…, XT}> ∈ RT×d, and weight parameters are WM ∈ Rm×1, bM ∈ R1, WO ∈ Rd×D
and bO ∈ RD.
4.4	Output Layer and Loss Function
Finally, the prediction result at time stamp s = T + h of the network is Ys0 ∈ RD :
Ys0 = XU + XL + XM	(16)
Moreover, we utilize the validation set to decide which of the two loss functions is better for our
model. we leverage Mean Absolute Error (MAE, also denoted as L1 loss function) and Mean Square
6
Under review as a conference paper at ICLR 2022
Error (MSE, also denoted as L2 loss function) to update the network parameters. MSE is simple to
calculate, which is the default loss function of many prediction tasks, and MAE has better robustness
for outliers.
D
MSE= X X(Ys,i - Ys0,i)1 2
SR.train i=1
D
MAE= X X|Ys,i - Ys0,i|
S∈Ωtrain i=1
where Ωtrain is a set of time stamps for model training.
(17)
5	Experiments
In the section, we perform extensive experiments on four multivariate time series forecasting bench-
mark datasets between MVSRTN and seven baselines. Moreover, in order to evaluate the effective-
ness of the proposed model, we conduct ablation experiments and order experiments.
5.1	Datasets and Baselines
Our experiments are based on three datasets which are publicly available:
•	Traffic 1: This dataset is composed of 48 months hourly data from the California Depart-
ment of Transportation during 2015 and 2016. The data describes the road occupancy rates
(between 0 and 1) measured by different sensors on San Francisco Bay area freeways.
•	Exchange-Rate: A dataset that consist of the daily exchange rates of eight countries in-
cluding Australia, British, Canada, Switzerland, China, Japan, New Zealand and Singapore
ranging from 1990 to 2016.
•	Solar-Energy 2: This dataset consists of the solar power production records in the year of
2006 and these records are sampled every 10 minutes from 137 PV plants in Alabama State.
•	Electricity 3: This dataset from the UCI Machine Learning Repository is composed of the
electricity consumption in kWh which was recorded every 15 minutes from 2012 to 2014
for 321 clients.
We compare with a number of forecasting methods. AR: An auto-regressive model for time series
forecasting. GP (Frigola, 2015; Roberts et al., 2012): A Gaussian Process time series model for
prediction. LSTNet-skip (Lai et al., 2018): A LSTNet model (A deep neural network that combines
convolutional neural networks and recurrent neural networks, and could catch the long-term and
short-term patterns of time series) with skip-RNN layer. LSTNet-Attn (Lai et al., 2018): A LSTNet
model with temporal attention layer. TPA-LSTM (Shih et al., 2019): An attention-recurrent neural
network for multivariate time series forecasting. MTGNN (Wu et al., 2020): A graph neural net-
work model for the forecasting of multivariate time series. MTGNN-sampling (Wu et al., 2020):
MTGNN model trained on a sampled subset ofa graph in each iteration.
All methods are evaluated with two metrics: root relative squared (RSE) and empirical correla-
tion Coefficient (CORR). Lower value is better for RSE while higher value is better for CORR. In
addition, the details of the datasets and metrics are in Appendix B.
5.2	Training Details
For all tasks, we implement our model with Pytorch-1.20, and train them on a NVIDIA GeForce
RTX 2080 Ti GPU. For Traffic and Solar datasets, the size of the series history window T is 168,
for Solar-Energy it is 144, and for Exchange-rate it is 120. All the weight parameters are initial-
ized with Xavier (Glorot & Bengio, 2010) and normalized by weight normalization (Salimans &
1http://pems.dot.ca.gov
2http://www.nrel.gov/grid/solar-power-data.html
3https://archive.ics.uci.edu/ml/datasets/ElectricityLoadDiagrams20112014
7
Under review as a conference paper at ICLR 2022
Table 1: Results summary (in RSE and CORR) of all methods on four datasets.
Dateset		Solar-Energy		Traffic		Electricity		Exchange-Rate	
		Horizon		Horizon		Horizon		Horizon	
Models	Metrics	6	24	6	24	6	24	6	24
AR	RSE	0.379	0.8699	0.6218	0.63	0.1035	0.1054	0.0279	0.0445
	CORR	0.9263	0.5314	0.7568	0.7519	0.8632	0.8595	0.9656	0.9357
GP	RSE	0.3286	0.7973	0.6772	0.5995	0.1907	0.1273	0.0272	0.058
	CORR	0.9448	0.5971	0.7406	0.7909	0.8334	0.8818	0.8193	0.8278
LSTNet-skip	RSE	0.2559	0.4643	0.4893	0.4973	0.0931	0.1007	0.028	0.0449
	CORR	0.969	0.887	0.869	0.8588	0.9135	0.9119	0.9658	0.9354
LSTNet-Attn	RSE	0.2538	0.4403	0.4973	0.53	0.0953	0.1059	0.0321	0.059
	CORR	0.9696	0.8995	0.8669	0.8429	0.9095	0.9025	0.9656	0.9339
TPA-LSTM	RSE	0.2347	0.4389	0.4658	0.4765	0.0916	0.1006	0.0241	0.0444
	CORR	0.9742	0.9081	0.8717	0.8629	0.9337	0.9133	0.9709	0.9381
MTGNN	RSE	0.2348	0.427	0.4754	0.4535	0.0878	0.0953	0.0259	0.0456
	CORR	0.9726	0.9031	0.8667	0.881	0.9316	0.9234	0.9708	0.9372
MTGNN-sampling	RSE	0.2521	0.4386	0.4435	0.4537	0.0862	0.0976	0.0271	0.0454
	CORR	0.9687	0.899	0.8815	0.8758	0.9354	0.9219	0.9704	0.9382
MVSRTN	RSE	0.2383	0.4165	0.4423	0.4598	0.0912	0.1003	0.0247	0.044
	CORR	0.9720	0.9070	0.8818	0.8714	0.9317	0.9242	0.9709	0.9384
Kingma, 2016). As for learning method, we use the Adam optimizer (Kingma & Ba, 2014) and
an exponentially decaying learning rate with a linear warm up. The initial learning rate is set from
0.0005 to 0.001 and the batch size is 128. We perform dropout after each layer, except input and
output ones, and the rate usually is set to 0.1 or 0.2. The 1D CNN component has 50 filters, the
filter size is set from 3 to 6. In the tensor network, the bond-dimension r is tuned range from 50 to
100, and the order of the residual connection is chosen from {1,2,4}. For the chosen size l and m in
Skip-Connection Layer, the l is 24 for all datasets. and the m is set to the history window size T for
different datasets.
5.3	Main Results
Table 1 shows the prediction performances of all the models on all datasets, and the metrics are RSE
and CORR. We set horizon = {6, 12}, respectively, which means the horizons are set to 6 or 24 days
over the Exchange-Rate dataset, to 6 or 24 hours over the Electricity and Traffic task, to 60 or 240
minutes over the Solar-Energy data. It is worth noting that the larger the horizons, the harder the
prediction tasks. The best result for each metric of different datasets is highlighted in bold face in
the table.
Compared with the MTGNN model (state-of-the-art method), our proposed model achieves com-
petitive results. In particular, for the exchange-rate dataset, the results of MVSRTN on the four
(horizon, metric) pairs all outperform the MTGNN model. For the Solar-Energy data when hori-
zon=24, MVSRTN lowers down RSE by 2.46%. In general, in addition to the traffic dataset, our
method has a greater advantage when the horizon is 24. The reasons are that the graph modeling
method of MTGNN is more suitable for traffic data, and when the series data is difficult to predict
(horizon=24), our model plays the role of modeling semantic space.
5.4	Ablation Experiments
To demonstrate the effectiveness of each model structure on Solar-Energy, Traffic, Electricity and
Exchange-Rate data, we compare MVSRTN with 4 variants as follows:
• MVSRTN-nA: We remove the self-attention at series and variable level component such
that there is a lack of global interactive information at series level and variable level.
8
Under review as a conference paper at ICLR 2022
Sotartnergy τramc ElecOWty ExcnangeRate
Datasets
0.95
0.90
0.85
0.80
0.75
0.70
≡
MVSA1N-∏A
MVSRHi-IlT
MVSA1N-∏S
MVSRTN-∏S
MVSRTN
0.65；
Soiartnergy Trgfflc Electridty ExchgngeRete
Datasets
LU
0.5
0.4
0.3
0.2
0.1
0.0
Datasets	Datasets
Figure 5: Order Analysis of residual connec-
tion on four datasets when horizon=24.
Figure 4: Ablation Experiments on four
datasets When horizon=24.
•	MVSRTN-nT: We remove all the proposed tensor network such that the model cannot
learn the variable space we defined.
•	MVSRTN-nS: MVSRTN without skip-connection layer, which means that scale and en-
coder information cannot be directly propagated to the output layer.
•	MVSRTN: Modeling Variable Space with Residual Tensor Networks.
As shown in Figure 4, reported results are the average of 10 runs. For all the datasets, removing the
residual tensor networks and removing the skip-connection layer both cause significant performance
degradation. In particular, for the CORR metric of the Exchange-Rate dataset, the MVSRTN-nS
variant basically loses the ability to accurately forecast, which means the exchange rate data is
more sensitive to scale information. Moreover, solar energy and electricity data are more obviously
affected by residual tensor network components.
5.5 Order Analysis
In order to verify the effects of different orders of the residual tensor network, as shown in Figure
5, we design the comparative experiments over the orders of 1, 2, 4 on the Solar-Energy, Traffic,
Electricity and Exchange-Rate datasets. The experimental results show that the second-order resid-
ual tensor network (RTN) achieves the best results on both RSE and CORR metrics for solar energy
data and exchange rate data. For traffic data, the effect of fourth-order RTN is better than that of
first-order and second-order. In addition, the result of the fourth-order RTN is similar to the second-
order RTN on the Electricity dataset. This verifies the effectiveness of the proposed higher-order
residual connection.
6 Conclusion
In this paper, we propose a novel framework (MVSRTN) for fully exploiting the dependencies in the
variable space in the task of multivariate time series forecasting. We exploit a tensor network based
on the idea of low-rank approximation to model the variable space and shared tensor components
to ensure the translation invariance of the network. Additionly, we propose an N-order residual
connection approach and couple it to the space-approximated tensor network to improve the ability
to model long-term sequences. Moreover, a series-variable encoder is designed to improve the
quality of the variable space, and we leverage the skip-connection layer to achieve the dissemination
of information such as scale. According to the comparison with 7 baselines, we show the efficiency
of the framework of MVSRTN , and experimental results show the effect of modeling variable space
for multivariate time series forecasting.
References
George EP Box, Gwilym M Jenkins, Gregory C Reinsel, and Greta M Ljung. Time series analysis:
forecasting and control. John Wiley & Sons, 2015.
Ricky T. Q. Chen, Yulia Rubanova, Jesse Bettencourt, and David K Duvenaud. Neural ordinary dif-
ferential equations. In S. Bengio, H. Wallach, H. Larochelle, K. Grauman, N. Cesa-Bianchi, and
9
Under review as a conference paper at ICLR 2022
R.	Garnett (eds.), Advances in Neural Information Processing Systems, volume 31. Curran As-
sociates, Inc., 2018. URL https://proceedings.neurips.cc/paper/2018/file/
69386f6bb1dfed68692a24c8686939b9-Paper.pdf.
Jiezhu Cheng, Kaizhu Huang, and Zibin Zheng. Towards better forecasting by fusing near and dis-
tant future visions. In Proceedings of the AAAI Conference on Artificial Intelligence, volume 34,
pp. 3593-3600, 2020.
Thomas Demeester. System identification with time-aware neural sequence models. In Proceedings
of the AAAI Conference on Artificial Intelligence, volume 34, pp. 3757-3764, 2020.
Roger Frigola. Bayesian time series learning with Gaussian processes. PhD thesis, University of
Cambridge, 2015.
Xavier Glorot and Yoshua Bengio. Understanding the difficulty of training deep feedforward neural
networks. volume 9 of Proceedings of Machine Learning Research, pp. 249-256, Chia Laguna
Resort, Sardinia, Italy, 13-15 May 2010. JMLR Workshop and Conference Proceedings. URL
http://proceedings.mlr.press/v9/glorot10a.html.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-
nition. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp.
770-778, 2016.
Dan Hendrycks and Kevin Gimpel. Gaussian error linear units (gelus). arXiv preprint
arXiv:1606.08415, 2016.
Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980, 2014.
Guokun Lai, Wei-Cheng Chang, Yiming Yang, and Hanxiao Liu. Modeling long-and short-term
temporal patterns with deep neural networks. In The 41st International ACM SIGIR Conference
on Research & Development in Information Retrieval, pp. 95-104, 2018.
Moshe Leshno, Vladimir Ya Lin, Allan Pinkus, and Shimon Schocken. Multilayer feedforward net-
works with a nonpolynomial activation function can approximate any function. Neural networks,
6(6):861-867, 1993.
Bei Li, Quan Du, Tao Zhou, Shuhan Zhou, Xin Zeng, Tong Xiao, and Jingbo Zhu. Ode transformer:
An ordinary differential equation-inspired model for neural machine translation. arXiv preprint
arXiv:2104.02308, 2021.
Xindian Ma, Peng Zhang, Shuai Zhang, Nan Duan, Yuexian Hou, Ming Zhou, and Dawei Song.
A tensorized transformer for language modeling. Advances in Neural Information Processing
Systems, 32:2232-2242, 2019.
Jacob Miller, Guillaume Rabusseau, and John Terilla. Tensor networks for probabilistic sequence
modeling. In International Conference on Artificial Intelligence and Statistics, pp. 3079-3087.
PMLR, 2021.
Vinod Nair and Geoffrey E Hinton. Rectified linear units improve restricted boltzmann machines.
In Icml, 2010.
I. V. Oseledets. Tensor-train decomposition. SIAM Journal on Scientific Computing, 33(5):2295-
2317, 2011. doi: 10.1137/090752286. URL https://doi.org/10.1137/090752286.
Syama Sundar Rangapuram, Matthias W Seeger, Jan Gasthaus, Lorenzo Stella, Yuyang Wang, and
Tim Januschowski. Deep state space models for time series forecasting. Advances in neural
information processing systems, 31:7785-7794, 2018.
S.	Roberts, M. Osborne, M. Ebden, S. Reece, N. Gibson, and S. Aigrain. Gaussian processes for
time-series modelling. Philosophical Transactions, 371(1984):20110550, 2012.
Tim Salimans and Durk P Kingma. Weight normalization: A simple reparameterization to accelerate
training of deep neural networks. In Advances in neural information processing systems, pp. 901-
909, 2016.
10
Under review as a conference paper at ICLR 2022
Shun-Yao Shih, Fan-Keng Sun, and Hung-yi Lee. Temporal pattern attention for multivariate time
series forecasting. Machine Learning, 108(8):1421-1441, 2θ19.
Edwin Stoudenmire and David J Schwab. Supervised learning with tensor net-
works. In D. Lee, M. Sugiyama, U. Luxburg, I. Guyon, and R. Garnett (eds.), Ad-
vances in Neural Information Processing Systems, volume 29. Curran Associates,
Inc., 2016. URL https://proceedings.neurips.cc/paper/2016/file/
5314b9674c86e3f9d1ba25ef9bb32895-Paper.pdf.
Zonghan Wu, Shirui Pan, Guodong Long, Jing Jiang, Xiaojun Chang, and Chengqi Zhang. Con-
necting the dots: Multivariate time series forecasting with graph neural networks. In Proceedings
of the 26th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining,
pp. 753-763, 2020.
Dongkuan Xu, Wei Cheng, Bo Zong, Dongjin Song, Jingchao Ni, Wenchao Yu, Yanchi Liu, Haifeng
Chen, and Xiang Zhang. Tensorized lstm with adaptive shared memory for learning trends in mul-
tivariate time series. In Proceedings of the AAAI Conference on Artificial Intelligence, volume 34,
pp. 1395-1402, 2020.
Valentin Zauner-Stauber, Laurens Vanderstraeten, Matthew T Fishman, Frank Verstraete, and Jutho
Haegeman. Variational optimization algorithms for uniform matrix product states. Physical Re-
view B, 97(4):045145, 2018.
Lipeng Zhang, Peng Zhang, Xindian Ma, Shuqin Gu, Zhan Su, and Dawei Song. A generalized
language model in tensor space. In Proceedings of the AAAI Conference on Artificial Intelligence,
volume 33, pp. 7450-7458, 2019.
Hang Zhao, Yujing Wang, Juanyong Duan, Congrui Huang, Defu Cao, Yunhai Tong, Bixiong Xu,
Jing Bai, Jie Tong, and Qi Zhang. Multivariate time-series anomaly detection via graph attention
network. In 2020 IEEE International Conference on Data Mining (ICDM), pp. 841-850. IEEE,
2020.
Mai Zhu, Bo Chang, and Chong Fu. Convolutional neural networks combined with runge-kutta
methods, 2019. URL https://openreview.net/forum?id=HJNJws0cF7.
A The Coefficient Values of Residual Tensor Network
Table 2: The coefficients of first-order, second-order, and fourth-order residual tensor networks.
Coefficients	First-order	Second-order	Fourth-order
a1	1.0	1/2	1/6
a2		1/2	1/3
a3	-	-	1/3
a4	-	-	1/6
b2	-	1.0	1/2
b3	-	-	1/2
b4	-	-	1.0
Table 2 shows the coefficients used in Equation 4.2.
B Datasets and Metrics
In Table 3, we summarize statistics of benchmark datasets. Moreover, two conventional evaluation
metrics exploited by us are defined as follows:
Root Relative Squared Error (RSE):
…	s Mes (YsLYG2
RSE = /	=
ʌ/ Σ^s∈Ωtest (Ys,i- mean(Y ))2
(18)
11
Under review as a conference paper at ICLR 2022
Table 3: Dataset Statistics
Datasets	# Sample	# Variables	# Sample Rate
Traffic	17544	862	1 hour
Solar-Energy	52560	137	10 minutes
Electricity	26304	321	1 hour
Exchange-Rate	7588	8	1 day
Empirical Correlation Coefficient (CORR):
CORR
1 XX Ps(Ys,i —mean(Yi))(Ysi — mean(Yi))
n i=1 ,Ps(K,i - mean(YO)2(Y0,i - mean(K0))2
(19)
where Ωtest is a set of time stamps for model test, and lower value is better for RSE while higher
value is better for CORR.
12