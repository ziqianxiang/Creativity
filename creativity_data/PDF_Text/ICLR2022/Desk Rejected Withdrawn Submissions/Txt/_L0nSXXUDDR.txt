Under review as a conference paper at ICLR 2022
Learning with Neighbor Consistency for Noisy
Labels
Anonymous authors
Paper under double-blind review
Ab stract
Recent advances in deep learning have relied on large, labelled datasets to train
high-capacity models. However, collecting large datasets in a time- and cost-efficient
manner often results in label noise. We present a method for learning from noisy
labels that leverages similarities between training examples in feature space, en-
couraging the prediction of each example to be similar to its nearest neighbours.
Compared to training algorithms that use multiple models or distinct stages, our ap-
proach takes the form of a simple, additional regularization term. It can be interpreted
as an inductive version of the classical, transductive label propagation algorithm. We
compare our approach to relevant baselines under both synthetic and realistic noise,
and demonstrate that our simple approach achieves state-of-the-art accuracy under
the realistic conditions of mini-ImageNet-Red, mini-WebVision and Clothing1M.
1	Introduction
While deep learning can achieve unprecedented accuracy in image classification tasks, it requires a
large, supervised dataset that is often expensive to obtain. Unsupervised and semi-supervised learning
seek to alleviate this requirement by incorporating unlabelled examples. However, these approaches
cannot take advantage of the various sources of noisy labels in the modern world, such as images
with hashtags in social media or images contained in webpages retrieved by a textual query. Training
algorithms that are robust to label noise are therefore highly attractive for deep learning.
The dominant approach to learning with noisy labels in recent work is to use the predictions of the
model itself to reject or modify training examples (e.g. Reed et al. (2015); Tanaka et al. (2018); Arazo
et al. (2019); Yang et al. (2020); Liu et al. (2020); Nguyen et al. (2020); Han et al. (2018); Li et al.
(2020)). This is inherently risky due to the ability of deep networks to fit arbitrary labels (Zhang et al.,
2016) and it is important to take significant measures against overfitting. Moreover, this paradigm
often leads to complicated training procedures, such as maintaining multiple models or alternating
between updating the model and updating the training set.
This paper proposes Neighbor Consistency Regularization (NCR) for the specific problem of learning
with noisy labels, illustrated in Figure 1. Rather than adopt model predictions as pseudo-labels, NCR
introduces an additional consistency loss that encourages each example to have similar predictions
to its neighbors. Concretely, the neighbor consistency loss penalizes the divergence of each example’s
prediction from a weighted combination of its neighbors’ predictions, with the weights determined
by their similarity in feature space. The motivation of NCR is to enable incorrect labels to be improved
or at least attenuated by the labels of their neighbors, relying on the assumption that the noise is
sufficiently weak or unstructured so as not to overwhelm the correct labels. Compared to the popular
approach of bootstrapping the model predictions (Reed et al., 2015), NCR can be seen as instead
bootstrapping the learned feature representation, which may reduce its susceptibility to overfitting
and improve its stability at random initialization.
NCR is inspired by label propagation algorithms for semi-supervised learning (Zhou et al., 2003;
Kipf & Welling, 2017; Iscen et al., 2019), which seek to transfer labels from supervised examples
to neighboring unsupervised examples according to their similarity in feature space. However,
whereas label propagation is typically performed in a batch setting over the entire dataset, our method
effectively performs label propagation online within mini-batches during stochastic gradient descent.
This results in a simple, single-stage training procedure. Moreover, whereas existing methods for label
propagation represent transductive learning in that they only produce labels for the specific examples
1
Under review as a conference paper at ICLR 2022
Figure 1: To address the problem of noisy labels in the training set, we propose Neighbor Consisteny
Regularization. This regularizer encourages examples with similar feature representations to have
similar outputs, thus mitigating the impact of training examples with incorrect labels.
which are provided during training, NCR can be understood as an inductive form of label propagation
in that it produces a model which can later be applied to classify unseen examples.
The key contributions of the paper are as follows.
-	We propose Neighbor Consistency Regularization, a novel loss term for deep learning with noisy
labels that encourages examples with similar feature representations to have similar predictions.
-	We verify empirically that NCR achieves better accuracy than several important baselines at a
wide range of noise levels from both synthetic and real distributions, and is complementary to
the popular regularization technique of mixup (Zhang et al., 2018).
-	We demonstrate that NCR achieves state-of-the-art accuracy on the mini-ImageNet-Red (Jiang
et al., 2020), mini-WebVision (Li et al., 2020) and Clothing1M (Xiao et al., 2015) datasets, which
contain realistic web noise.
2	Related work
This section reviews related work with a focus on image classification using deep learning and draws
comparisons to our proposed approach. Note that, while there is a significant body of work examining
the problem of noisy labels under the assumption that a small, trusted set of clean examples is available,
this paper considers the variant where this is not the case.
Regularization. Regularization has an integral role under label noise as it limits the ability of a high-
capacity model to fit arbitrary labels. Indeed, regularization alone can provide considerable robustness
to label noise and many algorithms couple an effective regularization strategy with an explicit noise-
handling technique to further robustness. One particularly effective form of regularization is mixup
augmentation of Zhang et al. (2018), which generates additional examples by linearly interpolating
between pairs of examples in both the image and label space. It was originally demonstrated to provide
robustness to synthetic label corruption on CIFAR-10.
Beyond the choice of regularization, there are numerous possible approaches to handle noisy labels.
Early investigation into deep learning with label noise concentrated on either estimation of the label
transition matrix (Sukhbaatar et al., 2014; Patrini et al., 2017) or loss functions that are robust to
outliers (Reed et al., 2015; Ghosh et al., 2017; Xu et al., 2019). More recently, numerous methods
have been proposed that re-weight or re-label the examples that are believed to have incorrect labels.
We briefly review this body of work in the following paragraphs.
Model predictions for noisy labels. Many methods have used the predictions of the model itself
during training to either generate pseudo-labels or to identify incorrect examples (or both). For deep
learning, this often leverages the phenomenon that correct labels tend to be fit earlier than incorrect
ones (Liu et al., 2020). Reed et al. (2015) first proposed the bootstrapping loss, in which a fixed
linear combination of the annotated label and the current prediction are adopted as the regression
2
Under review as a conference paper at ICLR 2022
target for each example. Our method can be considered a bootstrapping approach which uses the
learned similarity rather than the actual predictions. Extensions of this work have included setting the
proportion of annotated and predicted labels adaptively using the model confidence (Arazo et al., 2019;
Yang et al., 2020) and averaging model weights and predictions over time (Liu et al., 2020; Nguyen
et al., 2020). Lukasik et al. (2020) showed that some robustness to noise could be obtained by label
smoothing, which instead interpolates between the annotated label and a uniform distribution. To avoid
overfitting, several works have proposed to split the training set in half and train two models, with each
used to assess the training examples of the other (Han et al., 2018; Li et al., 2020).
Identifying noisy examples using neighbors. Whereas our method, in effect, uses neighbors to
modify the supervision of each example, several approaches have rather used neighbors with the
aim of identifying and eliminating noisy examples. Both Wang et al. (2018) and Guo et al. (2018)
proposed to identify and re-weight examples with incorrect labels using the local density of examples
with the same annotation. Wu et al. (2020) constructed a k-NN graph and kept only the examples
which constituted the core of the largest connected component per class. Bahri et al. (2020) eliminated
examples whose labels did not agree with the prediction of a k-NN classifier. Ortego et al. (2020)
proposed Multi-Objective Interpolation Training (MOIT), which identifies mislabelled examples by
comparing the predictions of each example to the average prediction of its neighbors and then replaces
the least reliable labels with the model’s current predictions. MOIT+ incorporates an additional stage
of semi-supervised learning, in which the labels believed to be noisy are discarded.
Label propagation. Variants of label propagation (Zhou et al., 2003) have been applied to various com-
puter vision tasks, including retrieval (Donoser & Bischof, 2013; Iscen et al., 2017), semi-supervised
learning (Kipf & Welling, 2017; Iscen et al., 2019) and few-shot learning (Douze et al., 2018; Liu et al.,
2019; RodHguez et al., 2θ20). For semi-supervised learning in particular, Iscen et al. (2019) used it to
obtain labels for unsupervised examples based on their neighbors in feature space. While most methods
perform label propagation over large graphs containing many examples in a batch fashion, Liu et al.
(2019) and Rodriguez et al. (2020) considered label propagation within stochastic gradient descent
for episodic few-shot learning (Vinyals et al., 2016). This is a meta-learning approach which seeks a
suitable feature representation with which to later perform label propagation during meta-testing. Itis
not directly applicable for learning with noisy labels and it does not scale to large sets of examples.
For learning with noisy labels, although neighbors have often been used to identify mislabelled
examples (see above), few works have considered the use of neighbors to generate pseudo-labels. Iscen
et al. (2020) used graph convolution to propagate labels from a small set of examples with trusted labels
to a large set of examples with noisy labels. By comparison, our approach does not require a clean
set and is inductive in nature. Perhaps the most similar method to our own is that of Yang et al. (2020),
in which graph filtering is applied once to the global graph of all examples to refine the predictions
ofan initial model. In contrast, our consistency loss encourages similar examples to have similar labels
throughout training and is much simpler to implement.
Consistency. The idea of constraining a network to produce consistent outputs as away to leverage
unlabelled data has appeared in several previous works. Verma et al. (2019) and Berthelot et al.
(2019) proposed variants of mixup for semi-supervised learning in which predictions replace the
labels for unsupervised examples. Xie et al. (2020) introduced Unsupervised Data Augmentation for
semi-supervised image classification, where a model is encouraged to be robust to label-preserving
transformations even when labels are not available by minimizing the divergence between predictions
for transformed and non-transformed images. Most relevant to our work, Englesson & Azizpour (2021)
used prediction consistency with respect to image transformations for the express purpose of learning
with noisy labels. While these forms of consistency are effective regularizers, neighbor consistency
offers the ability to transfer supervision directly to mislabelled examples.
3	Preliminaries
We first define our notation and formulate the task of learning with noisy labels. We then describe label
propagation, a graph-based semi-supervised learning method designed to work with closed datasets.
Problem formulation. We assume a dataset defined by X := {x1,...,xn}. Each example, e.g. an
image, Xi, has a corresponding true label yi ∈C. In our task, some of the labels, y%, are noisy: yi = yi
and do not correctly reflect the visual content of the example xi . During training, we do not know
3
Under review as a conference paper at ICLR 2022
whether yi is noisy (y% = yi) or clean (y% = yi). Our goal is to learn a model with the highest accuracy
on the true labels, y, although an unknown number of labels in our training set are noisy.
We learn a convolutional neural network for classification. The network, denoted by fθ,W : X →Rc,
takes a dataset example xi as the input and outputs logits for softmax classification. Its two learnable
variables θ and W correspond to the feature extractor and classifier, respectively. The feature extractor
maps an image Xi to a d-dimensional vector Vi := gθ (Xi) ∈ Rd. The classifier maps the d-dimensional
vector to class scores zi :=hW (vi) ∈Rc. Typically, the network parameters are learned by minimizing
a loss function for supervised classification:
m
Ls(X,Y ;θ,W ):=-X'(σ(%),yi),	(1)
m i=1
where X and Y correspond to the set of examples in the mini-batch, m= |X| = |Y| denotes the size of
the mini-batch, σ is the softmax function and '(q,p) is the cross-entropy loss function for predictions q.
When the target distribution P is a single label y ∈C, we adopt the short-hand '(q,y) = '(q,δy) for
cross-entropy with a one-hot vector δy.
Label propagation is a graph-based technique used in semi-supervised learning (Zhou et al., 2003). We
assume that we are given labeled and unlabeled examples in a dataset, and that the dataset is also defined
by a graph which is either given or created from the k-nearest neighbours of each example (Donoser &
Bischof, 2013). This method spreads the label information of each node to the other nodes based on the
connectivity in the graph. This process is repeated until a global equilibrium state is achieved. Finally,
unlabeled examples are assigned to the class from which they have received the most information.
Formally, for a graph of dataset X, represented by an affinity matrix W, where Wij = similarity(Xi,Xj),
Zhou et al. (2003) show that label propagation can be computed by minimizing
1 n	1 n	1	1	2
Q(F) = 2μXkFi-Yk +2XWijIl√d= Fi-pD= FjlI ,	⑵
where D is the degree matrix (a diagonal matrix with entries Dii = jWij), Y is the matrix of one-hot
labels for all examples and μ is a regularization parameter. This objective function comprises two
terms: a fitting constraint, which encourages the classification of each point to their assigned label,
and a smoothing term, which encourages the outputs of nearby points in the graph tobe similar.
One of the main limitations of label propagation is its transductive property. In transductive learning, the
goal is to classify seen unlabeled examples. This is different to inductive learning, which learns a generic
classifier to classify any unseen data. To apply label propagation on new test examples, anew graph
W needs tobe constructed each time a new test example is seen. This makes it inefficient in practice.
Another requirement for label propagation is that the feature space needs to be fixed to compute the
affinity matrix W. This requires the feature extractor to be learned beforehand, potentially from the
noisy data. Existing work (Iscen et al., 2019) has tried to overcome this issue by alternating between
optimizing the feature space, and performing label propagation. However, this does not directly
enforce smoothness, as the optimization of two components are done separately.
Our goal is to overcome the limitations of label propagation by 1) adapting itto an inductive setting
2) applying the smoothness constraint directly during optimization. In Section 4, we propose a simple
and efficient approach which generalizes label propagation by enforcing smoothness in the form of
a regularizer. As a result, we avoid constructing an explicit graph to propagate the information, and
inference can be performed on any unseen test example.
4	Method
We now present our method Neighbor Consistency Regularization and compare it to classical label
propagation. We then highlight its relationship to similar, online techniques.
4
Under review as a conference paper at ICLR 2022
4.1	Neighbor Consistency Regularization
When learning with noisy labels, the network is prone to overfit, or memorize, the mapping from xi to
a noisy label yi for the training data (Liu et al., 2020). This behavior typically results in a non-optimal
classification performance in a clean evaluation set, as the network does not generalize well.
To overcome this issue, we propose Neighbor Consistency Regularization (NCR). Our main assumption
is that the over-fitting occurs less dramatically before the classification layer hW. This is supported
by the work of Ortego et al. (2020), which shows that feature representations are robust enough to
discriminate between noisy and clean examples when training a network. With that assumption, we
can design a smoothness constraint similar to label propagation (2) when training the network. The
overview of our method is shown in Figure 1.
Let us define the similarity between two examples by the cosine similarity of their feature represen-
tations, i.e. si,j = cos(vi, vj) = viTvj/(kvi kkvj k). Note that the feature representations contain
non-negative values when obtained after a ReLU non-linearity, and therefore the cosine similarity is
bounded in the interval [0,1]. Our goal is to enforce neighbor consistency regularization by leveraging
the structure of the feature space produced by gθ to enhance the classifier hW . More specifically,
hW (vi) and hW(vj) should behave similarly if si,j is high, regardless of their labels yi and yj. This
would prevent the network from over-fitting to an incorrect mapping between an example xi and a
label yi, if either (or both) yi and yj are noisy.
To enforce NCR, we design an objective function which minimizes the distance between logits zi
and zj, if the corresponding feature representations vi and vj are similar:
m
1m
LNCR(X,Y:θ,W) ：= mEDKL (σ(zi∕T)	E
i=1	j∈NNk(zi)
Psjk ∙σ(zj/T)),⑶
i=1
where DKL is the KL-divergence loss to measure the difference between two distributions, T is the
temperature and NNk(zi) denotes the set of k nearest neighbors of i in the feature space. We set
T=2 throughout our experiments. We normalize the similarity values so that the second term of the
KL-divergence loss remains a probability distribution. We set the self-similarity si,i=0 so that it does
not dominate the normalized similarity. Gradients will be back-propagated to all inputs.
The objective (3) ensures that the output of xi will be consistent with the output of its neighbors
regardless of its potentially noisy label yi. We combine it with the supervised classification loss
function (1) to obtain the final objective to minimized during the training:
L(X,YW,W ):=(1-α)∙ Ls(X,Y[θ,W )+a-LNCR(X,Y；O,W),	(4)
where the hyper-parameter α ∈ [0, 1] controls the impact of the each loss term. Similar to label
propagation, the final loss objective (4) has two terms. The first term is the classification loss term
LS. This is analogous to the fitting constraint in (2). The second term is the NCR loss LNCR, which
is also similar to the smoothness constraint in (2). We find that it sometimes helps to train the network
with α=0 for several epochs (denoted by e in our experiments) before enabling the NCR term.
However, the main difference between label propagation and our method is that label propagation
applies smoothness based on the graph edges Wij computed over the entire dataset. On the other hand,
our method is online, and does not require a global graph W . We enforce the NCR through the local
neighborhood as the feature space is being learned. As a result, our method does not require a learned
feature representation with noisy examples. It enriches the learned feature representation by reducing
the negative impact of noisy examples.
Compared to standard training, NCR incurs an additional computational cost of order O(m2(d+c))
where m is the batch size, d is the feature dimension and c is the number of classes. This arises in
the computation of the similarity values and weighted predictions in (3). However, this operation is
relatively fast to compute for moderate values of m because it is a dense matrix multiplication, for
which modern GPUs are optimized.
4.2	Relation to other methods
Bootstrapping introduces an additional loss that adopts the model’s own predictions as labels (Reed
et al., 2015). Its motivation is to discourage the model from overfitting to examples which are difficult
5
Under review as a conference paper at ICLR 2022
100
80
60
40
20
—0%Noise —20%Noise —40%Noise —80%Noise
Figure 2: Ablation study. Impact of hyperparameters α, k and e are evaluated on the CIFAR-10
validation set. The ResNet-18 architecture is used.
to fit. The overall loss combines the supervised loss and the bootstrap loss in fixed proportion:
Lb(X,Y;0,W) :=— X(1-α)∙'(σ(zi),yi)+α∙'(σ(zi), gb(z/),
m
(5)
i=1
where σB is the bootstrap activation function, which may be argmax or softmax (with optional tem-
perature). NCR can be understood as bootstrapping from the neighborhood structure induced by
the representation rather than from the model’s predictions. This eliminates the dependency on the
classifier parameters W, which may be particularly advantageous as it has been shown that linear
models can fit random labels given a sufficiently high-dimensional representation (Liu et al., 2020).
Label smoothing is a regularization method (Szegedy et al., 2016) that mixes the ground truth labels
with a uniform distribution. It has been shown capable of denoising corrupted labels (Lukasik et al.,
2020). Under label smoothing, the supervised classification loss function becomes:
m
Lls(X,Y;0,W ):=	X(1-α)∙ '(σ(zi ),yi)+α∙'(σ(zi),春 1).	(6)
m i=1
Note that the linear combination of losses is equivalent to a linear combination of labels due to the
linearity of '(q,p) = -PTlogq with respect to p. Our method can be considered a modified version
of label smoothing where the uniform distribution is replaced with a distribution defined by the
neighboring examples. It would collapse to label smoothing if the neighbors were random orifahigh
temperature T were used.
Mixup (Zhang et al., 2018) bears some resemblance to our method in that it takes a convex combination
of labels. However, mixup uses this combination as the regression target for a novel example obtained
as the convex combination of the inputs, whereas NCR uses it as the target for an existing example.
5	Experiments
5.1	Experimental setup
We first perform experiments on datasets with synthetic noise, where the noise level can be varied,
before considering datasets with organic noise, where the noise level is fixed and unknown. For exper-
iments with synthetic noise, we use the standard variants of CIFAR-10 and -100 (Krizhevsky & Hinton,
2009) as well as mini-ImageNet with “Blue” and “Red” noise (Jiang et al., 2020). The CIFAR and
mini-ImageNet-Blue datasets are contaminated with uniform label noise, whereas mini-ImageNet-Red
is constructed by replacing some examples in each class with false positives from an image search
engine, representing more realistic noise. For experiments with organic noise, we use mini-WebVision
(Li et al., 2020) and Clothing1M (Xiao et al., 2015). All datasets include a clean validation and/or
final evaluation set. Implementation details and hyperparameters are described in Section A.1.
5.2	Ablation study
We first study the effect of the key hyperparameters of NCR at different noise levels using the
CIFAR-10 validation set. Specifically, we investigate the impact of α, which controls the strength
of the NCR term in (4), the number of neighbors k and the number of initialization epochs e. We first
set the number of neighbors k = m (the batch size) and the number of initialization epochs to zero
while varying α. Subsequently, we select the optimal α for each noise level and vary k. Finally, we
adopt the optimal k and vary e.
6
Under review as a conference paper at ICLR 2022
Table 1: Baseline and oracle comparison. Classification accuracy is reported on the mini-ImageNet-
{Blue, Red} datasets with the ResNet-18 architecture. The accuracy is reported for each individual noise
ratio (0%, 20%, 40%, 80%). We present the mean accuracy and standard deviation from five trials. The
oracle model is trained on only the known, clean examples in the training set using a cross-entropy loss.
mini-ImageNet-Blue			mini-ImageNet-Red	
Method	0%	20%	40%	80%	0%	20%	40%	80%
Baselines				
Standard	65.8±0.4	49.5±0.4	36.6±0.5	13.1±1.0	63.5±0.5	55.3±0.9	49.5±0.7	36.4±0.4
Mixup	67.4±0.4	60.1±0.2	51.6±0.8	21.0±0.5	65.5±0.5	61.6±0.5	57.2±0.6	43.7±0.3
Bootstrap	66.4±0.4	54.4±0.5	44.8±0.5	2.9±0.3	64.3±0.3	56.2±0.2	51.3±0.6	38.2±0.3
Bootstrap + Mixup	67.5±0.3	61.9±0.4	51.0±0.7	1.3±0.1	65.9±0.4	62.7±0.2	58.3±0.5	43.5±0.6
LS	67.5±0.8	60.2±0.5	50.2±0.4	20.9±0.8	65.7±0.5	59.7±0.4	54.0±0.6	39.7±0.5
LS + Mixup	68.6±0.3	63.3±1.0	57.1±0.2	14.4±0.3	66.9±0.2	63.4±0.4	59.2±0.4	45.5±0.7
Ours								
Ours: NCR	66.5±0.2	61.7±0.3	54.1±0.4	20.7±0.5	64.0±0.4	60.9±0.3	56.1±0.7	40.9±0.2
Ours: NCR + Mixup	67.9±0.6	64.3±0.1	59.2±0.6	14.2±0.4	66.3±0.5	64.6±0.6	60.4±0.3	45.4±0.4
Other works								
D-Mix (Li et al., 2020)	-	-	-	-	55.8	50.3	50.9	35.4
ELR (Liu et al., 2020)	-	-	-	-	57.4	58.1	50.6	41.7
MOIT (Ortego et al., 2020)	-	-	-	-	64.7	63.1	60.8	45.9
Oracle: Clean subset								
Standard	65.8±0.4	63.9±0.5	60.6±0.4	45.4±0.8	63.5±0.5	61.7±0.1	58.4±0.3	41.5±0.5
Mixup	67.4±0.4	64.2±0.5	61.5±0.3	46.9±0.8	65.5±0.5	63.1±0.6	59.7±0.7	43.6±0.4
Figure 2 shows the validation accuracy for different noise ratios. The performance remains relatively
stable over different hyperparameters for 0% and 20% noise ratios. It is optimal to set α to be high
(0.9) for any non-zero noise ratio, indicating that the greater influence of NCR benefits these settings.
Similarly, smaller k (e.g. k= 10) leads to higher accuracy when the noise ratio is above 0%. We also
observe that e = 0 performs better for higher noise ratios (i.e. 40% and 80%). This shows that the
NCR needs to be enabled early in training to prevent the network from memorizing the noisy labels
when the noise ratio is high.
5.3	Baseline comparison
We now compare NCR against the baselines defined in Section 4.2. The results are reported on the
official validation set of mini-ImageNet-{Red, Blue} datasets. We run each experiment five times and
report the mean accuracy at the completion of training. We do not report the peak validation accuracy
attained during training as the conclusions may be less likely to generalize to an unseen test set.
Table 1 shows the final accuracy for each method on the mini-ImageNet-{Red, Blue} datasets across
different noise splits. When compared with the standard baseline, our method significantly improves
the performance, up to 17.5% across all noise ratios. Furthermore, we show that our method is
compatible with some of the existing baselines. Combining mixup with our method leads to further
improvements in almost all scenarios. We observe that NCR improves the accuracy of the method
even at 0% noise. This suggests that it has a general regularization effect. However, the improvement
in accuracy is much more pronounced in the training sets which contain label noise.
Figure 3 presents further evidence that NCR inhibits memorization of noisy labels. After the training is
complete, we perform one last forward-pass and obtain the confidence p that the model assigns to the an-
notated label for each training example. The top row shows that the baseline model overfits to the noisy
labels, resulting in p = 1 for both clean and noisy images. On the other hand, NCR avoids overfitting and
assigns low confidence p = 0 to most of the noisy training labels. Some of the noisy examples are still
classified as their assigned label on mini-Imagenet-Red. This is likely due to the dataset containing real-
istic and correlated noise: the mislabelled class and the true class often have visual patterns in common.
For the synthetic noise (mini-Imagenet-Blue), NCR separates the clean and noisy examples up to 40%
noise ratio. However, the model underfits with 80% synthetic noise, resulting in p being close to 0
7
Under review as a conference paper at ICLR 2022
Standard
NCR
Blue-40%	Blue-80%	Red-40%
OJj 02 O* mi 03 UO
Red-80%
α> 1.0
αo Ui α<
I 1 clean I 1 noisy
Figure 3: Predicted confidence of training examples. Whereas the baseline assigns similar
confidence scores to clean and mislabelled examples (usually all high), NCR more often assigns lower
confidence to mislabelled examples and higher confidence to correct examples.
Blue-40%	Blue-80%	Red-40%	Red-80%
Standard
NCR
I	1 different class, labels correct	different class, same label
I	1 same class, labels correct	same class, different label
Figure 4: Similarity distributions. We compare the distribution of cosine similarities for training
examples in mini-ImageNet that are correctly and incorrectly labelled as the same class or different
classes. For mini-ImageNet-Blue, the features learned using NCR achieve significantly better class
separation with 40% noise (or less, not pictured). For the more realistic mini-ImageNet-Red, NCR
still achieves better separation of the clean examples but fails to separate examples that are incorrectly
labelled as the same class.
for both clean and noisy examples. This results in a small relative improvement for NCR in terms
of test accuracy, see mini-ImageNet-Blue with 80% noise in Table 1.
Table 1 also includes an oracle that is obtained by excluding the mislabelled examples from the training
set, reducing its size by 20%, 40% or 80% accordingly. Under realistic noise (mini-ImageNet-Red), the
results show that NCR outperforms the oracle across all noise ratios when using mixup. While this may
be surprising, it can be explained by the observation that the noisy examples for each class are often
visually similar to the clean examples, and thus still contain some useful information. However, the
performance of NCR is significantly less than the oracle under synthetic noise (mini-ImageNet-Blue),
where the noisy examples are often entirely dissimilar to the clean examples.
5.4	Effect on feature embeddings
Using the datasets with known noise, we can compare the feature similarity of training examples that
are correctly or incorrectly labelled as belonging to the same or different classes. In the ideal case, the
distributions of within-class and between-class similarities for clean examples would have zero overlap,
and would be identical to the true within-class and between-class similarities for mislabelled examples.
Figure 4 presents the similarity distributions for mini-ImageNet-Blue and -Red. (Note that, for mini-
ImageNet-Red, the set of clean examples is known but the true class of the mislabelled examples is not
known, so we cannot obtain the true within-class similarity for mislabelled examples.) We compare the
distributions for a baseline model and a model trained with NCR. While the distributions for the baseline
model overlap, they are not identical, showing that the feature similarities contain some signal for NCR
8
Under review as a conference paper at ICLR 2022
Table 2: State-of-the-art comparison. We compare NCR and our baseline impl ementation to other
methods on mini-WebVision, Clothing1M, CIFAR-10 and CIFAR-100. We report the mean accuracy
and standard deviation from five trials. The symbols denote: * result obtained using IncePtion-ResNet
instead of ResNet-50, ?result obtained from a publication other than the original. CIFAR results for
GJS, LDMI and the original ELR PaPer were not included because they use ResNet-34 instead of -18.
Additional data augmentation (+DA) can help when using a larger backbone.
	mini-WebVision	Clothing	CIFAR-10	CIFAR-100
		1M	0%	20%	40%	80%	0%	20%	40%	80%
Backbone	R-50	R-50	R-18	R-18
Standard	75.8±0.9	71.7	94.2±0.1 80.0±0.6 57.7±0.3 18.0±0.3	74.2±1.7 60.6±0.6 46.3±0.5 8.9±0.3
Mixup	77.2±0.2	72.2	95.6±0.1 87.2±0.4 72.9±0.5 56.3±0.6	76.7±0.2 68.6±0.2 56.5±0.2 17.8±0.3
Ours: NCR	77.1	74.4	94.4±0.2 91.8±0.3 88.3±0.2 34.2±2.3	75.8±0.3 70.1±0.5 64.5±0.3 15.1±7.9
Ours: NCR+Mixup	79.4	74.5	95.7±0.1 92.5±0.1 90.0±0.2 55.8±1.5	78∙1±0.3 72.5±0.3 66.8±0.3 30.4±0.4
Ours: NCR+Mixup+DA	80.5	74.6	95.5±0.1 92.0±0.1 89.3±0.3 54.7±2.7	77.8±0.2 72.3±0.5 65.8±0.4 33.1±0.5
MLNT; 3 iter.	-	73.5	—	—	—	—	—	—	—	—
CleanNet	-	74.7	—	—	—	—	—	—	—	—
LDMI	-	72.5	—	—	—	—	—	—	—	—
LongReMix	-	73.0	—	96.0	—	93.4	—	77.5	—	62.3
ELR	76.3t	-	95.5?	94.5?	92.6?	38.2?	78.0?	75.9?	72.9?	36.8?
ELR+	77.8t	74.8	-	94.6	-	91.1	—	77.5	—	60.8
DMix	76.3±0.4?	74.8	-	96.2	94.9	79.8	—	77.2	75.2	60.0
DMix+C2D	79.4±0.3	74.3	-	96.2±0.1 -	94.3±0.1	—	78.3±0.4 —	67.4±0.3
GJS	79.3±0.2	—	-	---	—	—	—	—
MOIT	-	-	95.2	92.9	90.6	70.5	75.8	72.8	67.4	45.6
MOIT+	-	-	95.7	94.1	92.0	75.8	77.1	75.9	70.9	51.4
to take advantage of. Training with NCR is shown to achieve greater seParation of the classes in feature
space, which must be due to the backpropagation of gradients through the feature similarities in (3).
5.5	State-of-the-art comparison
In addition to Table 1, which shows the state of the art comparison on mini-ImageNet-Red, we compare
NCR against the state of the art on mini-WebVision, Clothing1M and CIFAR-{10, 100} datasets in
Table 2. We also present a Data Augmentation (DA) variant of NCR in these comparisons, where
we generate a second view of each example in the minibatch by applying random color jittering.
NCR achieves state-of-the-art accuracy in datasets with realistic noise such as mini-WebVision
and mini-ImageNet-Red. We observe up to 1.5% improvement on mini-ImageNet-Red, and 1.1%
improvement on mini-WebVision. Our method is also competitive on Clothing1M, where it is only
0.2% less than the state of the art.
Note that unlike most of the existing work in the literature, NCR does not involve additional steps,
such as dividing the dataset into multiple splits, learning multiple models, applying semi-supervised
learning, or a second-stage with additional training. While NCR is orthogonal to these strategies, we
show that we achieve state of the art results with minimal additional processing (e.g. data augmentation).
Furthermore, NCR achieves higher performance compared to GJS (Englesson & Azizpour, 2021)
which applies a similar consistency regularization only on different augmentation of each example. This
confirms that the neighbor consistency brings further improvements on top of augmentation consistency.
6	Conclusion
This work has introduced Neighborhood Consistency Regularization and demonstrated that it is an effec-
tive strategy for deep learning with label noise. In particular, neighbor consistency compares favorably
against label smoothing and the bootstrapping loss as a technique to temper the influence of incorrect
labels. While our approach draws inspiration from multi-stage training procedures for semi-supervised
learning that employ transductive label propagation, it consists of a comparatively simple training
procedure, requiring only that an extra loss be added to the objective which is optimized in stochastic
gradient descent. NCR has been shown to achieve state-of-the-art results on the mini-WebVision
dataset, outperforming methods that use neighbors in feature space purely for the purpose of rejecting
mislabelled examples. Promising directions for future research include coupling NCR with a technique
to reject out-of-distribution examples and applying NCR to the problem of semi-supervised learning.
9
Under review as a conference paper at ICLR 2022
Ethics statement. Our work presents a method for learning image classifiers from noisy data. Image
classification is a general technology with a wide range of potential applications. While we are unaware
of all potential applications, it is important to be aware that each application has its own merits and
societal implications depending on the intentions of the individuals building and using the system.
Our proposed method is suited to learning from noisy data, as could be obtained by automatic scraping
of the internet (illustrated by our experiments on mini-ImageNet-Red and mini-WebVision). Data
collected in this fashion may contain bias (Birhane & Prabhu, 2021; de Vries et al., 2019) and a method
which is able to more effectively learn from such data may inadvertently cause these biases to be
amplified. Furthermore, when using training data automatically scraped from the web, it is possible
that the data is being used for a purpose to which the original owner did not consent, potentially
infringing on their privacy.
Reproducibility statement. We have included exhaustive descriptions of our datasets, training
hyperparameters and remaining experimental details in the main paper and appendices. All of our
experiments are also on publicly available datasets. We will release code and models upon acceptance.
References
Eric Arazo, Diego Ortego, Paul Albert, Noel O’Connor, and Kevin McGuinness. Unsupervised label noise
modeling and loss correction. In ICML, pp. 312-321. PMLR, 2019.
Dara Bahri, HeinriCh Jiang, and Maya Gupta. Deep k-NN for noisy labels. In ICML,pp. 540-550. PMLR, 2020.
David Berthelot, Nicholas Carlini, Ian Goodfellow, Nicolas Papernot, Avital Oliver, and Colin A Raffel.
MixMatch: A holistic approach to semi-supervised learning. In H. Wallach, H. Larochelle, A. Beygelzimer,
F. d'Alch6-Buc, E. Fox, and R. Garnett (eds.), NeurIPS, 2019.
Abeba Birhane and Vinay Uday Prabhu. Large image datasets: A pyrrhic win for computer vision? In Proceedings
of the IEEE/CVF Winter Conference on Applications of Computer Vision, 2021.
Terrance de Vries, Ishan Misra, Changhan Wang, and Laurens van der Maaten. Does object recognition work
for everyone? In CVPR Workshops, pp. 52-59, 2019.
Michael Donoser and Horst Bischof. Diffusion processes for retrieval revisited. In CVPR, 2013.
Matthijs Douze, Arthur Szlam, Bharath Hariharan, and Herv6 J6gou. Low-shot learning with large-scale diffusion.
In CVPR, 2018.
Erik Englesson and Hossein Azizpour. Generalized Jensen-Shannon divergence loss for learning with noisy
labels. arXiv preprint arXiv:2105.04522, 2021.
Aritra Ghosh, Himanshu Kumar, and PS Sastry. Robust loss functions under label noise for deep neural networks.
In AAAI, volume 31, 2017.
Sheng Guo, Weilin Huang, Haozhi Zhang, Chenfan Zhuang, Dengke Dong, Matthew R Scott, and Dinglong Huang.
CurriculumNet: Weakly supervised learning from large-scale web images. In ECCV, pp. 135-150, 2018.
Bo Han, Quanming Yao, Xingrui Yu, Gang Niu, Miao Xu, Weihua Hu, Ivor W. Tsang, and Masashi Sugiyama.
Co-teaching: Robust training of deep neural networks with extremely noisy labels. In NeurIPS, NIPS’18,
pp. 8536-8546, Red Hook, NY, USA, 2018. Curran Associates Inc.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In
CVPR, 2016.
Ahmet Iscen, Giorgos Tolias, Yannis Avrithis, Teddy Furon, and Ondrej Chum. Efficient diffusion on region
manifolds: Recovering small objects with compact cnn representations. In CVPR, 2017.
Ahmet Iscen, Giorgos Tolias, Yannis Avrithis, and Ondrej Chum. Label propagation for deep semi-supervised
learning. In CVPR, pp. 5070-5079, 2019.
Ahmet Iscen, Giorgos Tolias, Yannis Avrithis, Ondrej Chum, and Cordelia Schmid. Graph convolutional networks
for learning with few clean and many noisy labels. In European Conference on Computer Vision, pp. 286-302.
Springer, 2020.
Lu Jiang, Di Huang, Mason Liu, and Weilong Yang. Beyond synthetic noise: Deep learning on controlled noisy
labels. In International Conference on Machine Learning, pp. 4804-4815. PMLR, 2020.
10
Under review as a conference paper at ICLR 2022
Thomas N Kipf and Max Welling. Semi-supervised classification with graph convolutional networks. In ICLR,
2017.
Alex Krizhevsky and Geoffrey Hinton. Learning multiple layers of features from tiny images. Technical report,
University of Toronto, 2009.
Junnan Li, Yongkang Wong, Qi Zhao, and Mohan S Kankanhalli. Learning to learn from noisy labeled data. In
CVPR, pp. 5051-5059, 2019.
Junnan Li, Richard Socher, and Steven C H Hoi. DivideMix: Learning with noisy labels as semi-supervised
learning. ICLR, 2020.
Wen Li, Limin Wang, Wei Li, Eirikur Agustsson, and Luc Van Gool. Webvision database: Visual learning and
understanding from web data. arXiv preprint arXiv:1708.02862, 2017.
Sheng Liu, Jonathan Niles-Weed, Narges Razavian, and Carlos Fernandez-Granda. Early-learning regularization
prevents memorization of noisy labels. NeurIPS, 2020.
Yanbin Liu, Juho Lee, Minseop Park, Saehoon Kim, Eunho Yang, Sung Ju Hwang, and Yi Yang. Learning to
propagate labels: Transductive propagation network for few-shot learning. In ICLR, 2019.
Michal Lukasik, Srinadh Bhojanapalli, Aditya Menon, and Sanjiv Kumar. Does label smoothing mitigate label
noise? In ICML, 2020.
Duc Tam Nguyen, Chaithanya Kumar Mummadi, Thi Phuong Nhung Ngo, Thi Hoai Phuong Nguyen, Laura
Beggel, and Thomas Brox. SELF: Learning to filter noisy labels with self-ensembling. ICLR, 2020.
Diego Ortego, Eric Arazo, Paul Albert, Noel E O’Connor, and Kevin McGuinness. Multi-objective interpolation
training for robustness to label noise. arXiv preprint arXiv:2012.04462, 2020.
Giorgio Patrini, Alessandro Rozza, Aditya Krishna Menon, Richard Nock, and Lizhen Qu. Making deep neural
networks robust to label noise: A loss correction approach. In CVPR, 2017.
Scott Reed, Honglak Lee, Dragomir Anguelov, Christian Szegedy, Dumitru Erhan, and Andrew Rabinovich.
Training deep neural networks on noisy labels with bootstrapping. ICLR, 2015.
Pau Rodriguez,Issam Laradji, Alexandre Drouin, and Alexandre Lacoste. Embedding propagation: Smoother
manifold for few-shot classification. In ECCV, 2020.
Sainbayar Sukhbaatar, Joan Bruna, Manohar Paluri, Lubomir Bourdev, and Rob Fergus. Training convolutional
networks with noisy labels. arXiv preprint arXiv:1406.2080, 2014.
Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jon Shlens, and Zbigniew Wojna. Rethinking the inception
architecture for computer vision. In CVPR, pp. 2818-2826, 2016.
Daiki Tanaka, Daiki Ikami, Toshihiko Yamasaki, and Kiyoharu Aizawa. Joint optimization framework for
learning with noisy labels. In CVPR, pp. 5552-5560, 2018.
Vikas Verma, Alex Lamb, Juho Kannala, Yoshua Bengio, and David Lopez-Paz. Interpolation consistency
training for semi-supervised learning. In IJCAI, pp. 3635-3641, 7 2019. doi: 10.24963/ijcai.2019/504. URL
https://doi.org/10.24963/ijcai.2019/504.
Oriol Vinyals, Charles Blundell, Tim Lillicrap, Daan Wierstra, et al. Matching networks for one shot learning.
In NeurIPS, 2016.
Yisen Wang, Weiyang Liu, Xingjun Ma, James Bailey, Hongyuan Zha, Le Song, and Shu-Tao Xia. Iterative
learning with open-set noisy labels. In CVPR, 2018.
Pengxiang Wu, Songzhu Zheng, Mayank Goswami, Dimitris Metaxas, and Chao Chen. A topological filter for
learning with label noise. NeurIPS, 33, 2020.
Tong Xiao, Tian Xia, Yi Yang, Chang Huang, and Xiaogang Wang. Learning from massive noisy labeled data
for image classification. In CVPR, 2015.
Qizhe Xie, Zihang Dai, Eduard Hovy, Thang Luong, and Quoc Le. Unsupervised data augmentation for
consistency training. NeurIPS, 33, 2020.
Yilun Xu, Peng Cao, Yuqing Kong, and Yizhou Wang. LDMI: A novel information-theoretic loss function for
training deep nets robust to label noise. In NeurIPS, volume 32, 2019. URL https://proceedings.
neurips.cc/paper/2019/file/8a1ee9f2b7abe6e88d1a479ab6a42c5e- Paper.pdf.
11
Under review as a conference paper at ICLR 2022
Jingkang Yang, Litong Feng, Weirong Chen, Xiaopeng Yan, Huabin Zheng, Ping Luo, and Wayne Zhang. Webly
supervised image classification with self-contained confidence. arXiv preprint arXiv:2008.11894, 2020.
Chiyuan Zhang, Samy Bengio, Moritz Hardt, Benjamin Recht, and Oriol Vinyals. Understanding deep learning
requires rethinking generalization. arXiv preprint arXiv:1611.03530, 2016.
Hongyi Zhang, Moustapha Cisse, Yann N Dauphin, and David Lopez-Paz. mixup: Beyond empirical risk
minimization. ICLR, 2018.
Dengyong Zhou, Olivier Bousquet, Thomas Navin Lal, Jason Weston, and Bernhard Scholkopf. Learning With
local and global consistency. In NeurIPS, 2003.
12
Under review as a conference paper at ICLR 2022
	CIFAR-{10,100}	mini-ImageNet-{Red, Blue}	mini-Webvision	Clothing1M
	 Optimizer		SGD		
Momentum		0.9		
Batch size	256	128	256	128
Learning Rate	0.1	0.1	0.1	0.002
LR Schedule		cosine decay with linear warmup		
Warmup epochs		5		
Epochs	250	130	130	80
Weight decay	5e-4	5e-4	1e-3	1e-3
Architecture		ResNet-18	ResNet-50	
Table 3: List of network hyperparameters used to train the network in our experiments.
	mini-ImageNet	CIFAR-10	CIFAR-100	Clothing1M
	0% 20% 40% 80%	0% 20% 40% 80%	0% 20% 40% 80%	
α	0.7 0.7 0.7 0.5	0.7 0.9 0.9 0.9	0.1 0.9 0.9 0.9	0.9
k	50 1	1	1	50 10	10	10	1	1	1	50	1
e	100 50	50 0	150 50 0	0	50 50	0	100	40
Table 4: List of NCR hyperparameters used to train the network in our experiments.
A Appendix
A.1 Training details
Implementation details. We use the ResNet-18 and -50 architectures (He et al., 2016) in our
experiments. To be comparable to the existing state-of-the-art (Ortego et al., 2020), we mostly adopt
the same training hyperparameters as Ortego et al. (2020), only changing the batch size of CIFAR
experiments to accelarate the training. For Clothing1M, we follow the work of Li et al. (2020) and
fine-tune a pre-trained ResNet-50 for 80 epochs, where each epoch contains 1000 mini-batches. Table 3
lists the network hyperparameters used to train the network throughout our experiments. We train the
network with the typical dot-product linear classifier hW () in all datasets except for mini-WebVision.
For the mini-WebVision experiments, we follow the work of Ortego et al. (2020) and use a cosine
classifier for hW (). Cosine classifier is also a linear classifier, however, the features and the classifier
weights are '2 -normalized unlike the dot-product classifier.
We employ random crop augmentation during training in all experiments and resize images to
224 × 224 pixels. For experiments with CIFAR, we use 32 × 32 images and reduce the strides. We
trained each model on a single Nvidia V100 GPU, and will release all code upon acceptance.
NCR hyperparameters. We sweep over the NCR hyperparameters α, k and e, and choose a set
of hyperparameter based on the validation set accuracy on CIFAR-{10, 100} and Clothing1M. This
hyperparameter sweep is done for each noise ratio separately. Since mini-ImageNet-{Red, Blue} does
not contain a held-out validation set , we create a held-out set from the mini-ImageNet-Red dataset
which comprises the (clean) examples from the 0% noise dataset that do not appear in the datasets with
20%, 40% or 80% noise. The held-out set allows us to choose hyperparameters without overfitting on
the final evaluation set. We use the same hyperparameters on mini-ImageNet-Blue as well. Table 4
shows the list of hyperparameters for each dataset.
A.2 Dataset details
Mini-ImageNet-Red contains 50 000 training examples and 5 000 validation examples. The noisy
images are retrieved by text-to-image and image-to-image search. They come from an open vocabulary
outside of the set of classes in the training set. Depending on the noise ratio, a subset of clean images
are replaced by the noisy images to construct the training set.
Mini-ImageNet-Blue contains 60 000 training examples. The validation set is the same as
mini-ImageNet-Red. The noise in mini-ImageNet-Blue is synthetic. The label of each example is
13
Under review as a conference paper at ICLR 2022
I	mini-ImageNet-PurPle				
Method	0%	20%	40%	80%
Baselines				
Standard	65.8±0.4	16.1±0.0	11.9±0.0	0.05±0.0
Data Aug.	67.8±o.3	28.3±0.0	23.2±0.0	12.7±0.0
Mix-UP Zhang et al. (2018)	67.4±o.4	35.4±0.0	30.9±0.0	14.3±0.0
DataAug.+MixUP	69.7±o.4	49.6±0.0	42.6±0.0	18.4±0.0
Oracle				
Standard	-	63.9±0.5	60.6±0.4	45.4±0.8
Data Aug.	-	65.2±0.4	62.4±0.6	48.8±0.7
DataAug.+MixUP	-	67.1±0.3	64.0±0.3	49.9±0.5
Ours				
NCR - Standard	67.8±o.2	34.7±0.0	25.9±0.0	10.2±0.0
NCR - Data Aug	69.4±o.3	44.2±0.0	33.3±0.0	15.3±0.0
NCR - DataAug.+MixUP	69.4±o.4	53.6±0.0	43.1±0.0	16.1±0.0
Table 5: Baseline and oracle comparison. Classification accuracy is reported on the mini-ImageNet-
Purple with the ResNet-18 architecture. The accuracy is reported for each individual noise ratio (0%,
20%, 40%, 80%). We present the mean accuracy and standard deviation from five trials. The oracle
model is trained on only the known, clean examples in the training set using a cross-entropy loss.
independently and uniformly changed according to a probability. The noisy examples come from
a fixed vocabulary, i.e. their true label belongs to another class in the training set.
Mini-Webvision contains a subset of the original Webvision dataset Li et al. (2017). It contains only
the first 50 classes of the Google image subset. This corresponds to 65 944 training images. The
validation set contains 2 500 images corresponding to the 50 training classes.
Clothing1M (Xiao et al., 2015) is a large-scale dataset containing 1 million images and 14 categories.
Images are collected from the web, and the noisy labels are assigned based on the surrounding text.
We do not use the clean training subset with human-verified labels. We follow the existing protocol (Li
et al., 2019) and fine-tune a ResNet-50 model which is pre-trained on ImageNet.
14