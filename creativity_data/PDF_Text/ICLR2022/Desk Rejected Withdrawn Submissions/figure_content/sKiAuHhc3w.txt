Figure 1: An example of a buffer er-ror vulnerability source code function.
Figure 2: An example of the improper validation of array index flaw pattern (i.e., the left-handfigure) with two real-world source code functions (i.e., the middle and right-hand figures) containingthis pattern. In each function, there are some parts omitted for the brevity.
Figure 3: A demonstration of different vulnerability patterns forming different patterns in the latentspace for the buffer overflow error. In this one, we assume that there are three different patternscausing the buffer overflow error (e.g., the CWE-119 dataset). Note that each data point in a patternis a specific Ftop of a corresponding function F. In reality, we can have more different vulnerabilitypatterns in the the buffer overflow error.
Figure 4: The source code function and selectedcode statements highlighted relevant to vulner-abilities are shown with K = 5. The green andred lines highlight the detected code statementswhile red lines specify the core vulnerable state-ments obtained from the ground truth, and theselines are detected by our method. For demon-stration purpose, we choose a simple and shortvulnerable source code function.
Figure 5: The left-hand and right-hand fig-ures are the first and second parts of the func-tion respectively. The source code functionand selected code statements highlighted rele-vant to vulnerabilities are shown with K = 5.
Figure 6: The correlation between the number of chosen clusters and the trade-off hyper-parameterÎ±, and the VCP and VCA measures.
