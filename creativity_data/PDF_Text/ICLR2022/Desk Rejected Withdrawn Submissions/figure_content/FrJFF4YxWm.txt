Figure 1: Interpreting a demonstration and its description in terms of RatSkills: (a) Each RatSkillconsists of two conditions Io and G°. (b) The system infers a transition to the next skill if both the Gcondition of the current skill and the I condition of the next skill are satisfied. Such transition rulescan be used to interpret demonstrations and to plan for tasks that require multiple skills to achieve.
Figure 2: Illustrative example of how finite statemachines (FSM) are constructed from task descrip-tions. The super-starting node vo and the super-terminal node VT are highlighted.
Figure 3: An example of the value function for task-Task TrajectoryINlTO ,GOALo ) (D(D(DSearch: A*∕RRTBeUman-Ford for]t(s, vl a')	<，Dynamic Programming for score (s, ɑ, t)Back	ZiʌPropagation	£ Jaugmented states on a simple FSM. maXa∈A Jt (s,v,a) Figure 4: An overview of the trainingare plotted at each location at each FSM node. Deeper paradigm for RatSkills. The dashed line in-color indicates larger cost. Dotted lines illustrate one ra- dicates that We only compute policy and Jttional trajectory for each skill; red boxes indicate goals. values for states along s. See Section 3.4.
Figure 5: An illustrationof the Playroom environ-ment and a trajectory forthe task: turn-on-musicthen Play-With-ball thenturn-off-music.
Figure 6: RatSkills applied to planning with ablack-box goal test. We do evaluation on 3 plan-ning tasks in the Crafting World environment.
Figure 7: An example of optimal interleaving skills: s1 is "mine gold", and s2 is "craft boat". Itis valid that the agent first goes to collect wood (for accompolishing s2), and then mine gold (foraccompolishing s1), and finally crafts boat. In this case, the action sequences for completing s1 ands2 are interleaved. However, they can are be recognized as s2 then s2 because s1 is accomplishedbefore s2 .
Figure 8: A running example of the FSM-A * algorithm for the task “(mine wood or mine coal) thenmine gold." For simplicity, We only show a subset of states visited on each FSM node. The bluearrows indicate transitions by primitive actions (in this example, each primitive action takes a cost of0.1). The yellow arrows are transitions on the FSM, which can only be performed when Gv (∙) andIvo(∙) evaluates to True (in practice, the reward is computed as - (log Pr(Gv(∙) + log Pr(Iv，(•)))).
