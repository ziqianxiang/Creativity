Figure 1: The architecture of using adversariallearning framework such as GAN to bridge thegap between the source and target domains in thelatent space.
Figure 2: The architecture of our proposed cross-domain kernel classifier in the feature space. Byusing our proposed DAM2P method, we can gradually bridge the gap between the source and targetdomains in the latent space, while in the feature space our proposed cross-domain kernel classifierhelps to distinguish the vulnerable and non-vulnerable data. At the end, when the source and targetdomains are intermingled, we can transfer our trained cross-domain kernel classifier to classify thedata of the target domain.
Figure 3: A 2D t-SNE projection for the case of the FFmpeg → LibPNG without undertakingdomain adaptation (the left-hand figure, using the VulDeePecker method) and with undertakingdomain adaptation (the right-hand figure, using our proposed DAM2P method). The blue and redpoints represent the source and target domains in the joint space respectively. In both cases of thesource and target domains, data points labeled 0 stand for non-vulnerable samples and data pointslabeled 1 stand for vulnerable samples.
Figure 4: An example of a source code statement embedding process.
Figure 5: An example of the procedure for data processing and embedding. We use a source codefunction in the C language programming from the FFmpeg project. After the data preprocessing step,we obtain a preprocessed function, and then using the embedding process we obtain the embeddedvectors corresponding to statements of the function.
Figure 6: The correlation between h and F1-measure of our proposed DAM2P method.
Figure 7: The correlation between (λ and α) and F1-measure of our proposed DAM2P method.
