{
    "Decision": {
        "metareview": "Learning on Riemannian manifolds can be easily done  with this Python package.  Considering the recent work on these in latent-variable models, the package can be quite a useful approach.\n\nBut its novelty is disputed.  In particular Pymanopt is a package that does mostly the same, even though that may be computationally more expensive.  The merits of Geomstats vs. Pymanopt is not clarified.  But be that as it may, there is interest amongst the reviewers for the software package.\n\nIn the end, too, it's not uniformly agreed upon that a software-describing paper fits ICLR.",
        "confidence": "5: The area chair is absolutely certain",
        "recommendation": "Reject",
        "title": "perhaps for another venue?"
    },
    "Reviews": [
        {
            "title": "Nice package but with limited novelty and largely undemonstrated advantages to existing frameworks",
            "review": "The paper introduces the software package geomstats which provides simple use of Riemannian manifolds and metrics within machine learning models. Like theanogeometry, geomstats provides a backend for fast computation. Instead of theano, they interface tensorflow and numpy.\n\nThe core problem the author’s have to argue against is the existence of various other packages like pymanopt (which are mentioned in the paper) providing similar functionality.\n\nThe main advantage to pymanopt is stated to be lower computational cost. Unfortunately, this is not evaluated empirically. Pymanopt similarly provides the option to provide the cost function with tensorflow and uses numpy/scipy internally, therefore also making use of vectorization. A favorable empirical comparison would have been a compelling case for geomstats. While geomstats provides some more metrics than pymanopt, it lacks in other areas in comparison. Such metrics could be added relatively easily to pymanopt (or some of the other competing libraries).\n\nTruly novel is the update for Keras which allows Riemannian gradient descent on parameters living on manifolds. Unfortunately, this is not directly shown and discussed further in the paper, but the reader is referred to the code base. While plenty of examples were provided in the supplementary material, I’d have preferred to see specific example(s) being shown and discussed in the paper. In the end, the main paper alone only gives an overview of what exists, but gives me no idea on how the package is used.\n\nIn parts, the paper reads more like an argument in favor of Riemannian modelization and optimization, instead of advocating for the specific package. While it is very important to demonstrate potential applications for the framework - an area in which this paper excelled - other, more important parts (mentioned above), were omitted because of it. Similarly, a lot of time is needlessly spent on defining well-known manifolds.\n\nOn the formal side, the formatting of the citations within the text don’t adhere to the official style guide which prescribes the use of authors’ last names and year.\n\nOverall, the software package seems to provide nice functionality with integration into a currently popular machine learning framework, but it’s novelty compared to existing software packages is limited. The novel parts (performance improvements, integration with keras) are not sufficiently demonstrated in the paper.",
            "rating": "4: Ok but not good enough - rejection",
            "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"
        },
        {
            "title": "Novelty not clear",
            "review": "Summary:\nThe paper is well written and easy to follow. The paper proposes a Python package for optimization and applications on Riemannian manifolds.  \n\nComments: \n\nC1.\nThe main concern of the package is on novelty. That there exist other packages, e.g., Pymanopt [1], Manopt [2], ROPTLIB [3], which do a similar job as Geomstats. It is hard to understand from the paper on what is the key contribution of the present package. The paper does try to highlight the differences between the Goemstats package and others by emphasizing the lack of “choice of other metrics and high computational costs of” others. This is, however, not shown in the paper as to how Geomstats is better in terms of computational complexity. On the choice of the metrics too, it should be noted that all the new geometries of the manifolds (for different metrics) can be easily added to the toolboxes [1,2,3]. Those toolboxes are modular and come with a lot of solvers and have already been used in many large-scale applications.\n\nHaving said that, one key strength of the Geomstats package is that it can be used in a deep learning framework in a relatively straightforward manner. This is mentioned in the paper but is not properly emphasized. However, here also, the paper does not say what algorithms can be used as part of Geomstats (except the stochastic gradient descent optimizer). \n\nOverall, I got the impression that the proposed package positions itself as a package of Riemannian manifolds (and all of the differential geometric notions). If that is so, then this is problematic. Pymanopt and others already do that fairly well, and consequently, the justification for a new package on that basis is difficult.  \n\n[1] https://pymanopt.github.io/\n[2] https://www.manopt.org/\n[3] https://www.math.fsu.edu/~whuang2/Indices/index_ROPTLIB.html\n\n\nC2.\nThe citations are not properly rendered. It is hard to distinguish between the equations in the paper and the references in the paper.\n\nC3.\nInstead of multiple use cases in the paper, could the paper focus one particular use case to show the important functionalities of Geomstats? Currently, it seems that the paper is more about surveying where all Riemannian geometry is useful.\n",
            "rating": "4: Ok but not good enough - rejection",
            "confidence": "5: The reviewer is absolutely certain that the evaluation is correct and very familiar with the relevant literature"
        },
        {
            "title": "More of a software document than a scientific paper!",
            "review": "This paper introduces Geomstats, a geometric toolbox for machine learning on Riemannian manifolds. In comparison to previous packages such as manopt and pymanopt, the paper claims that the proposed software provide more efficient implementations, and is integrated with deep learning backends. Several potential applications settings for the software are explored, introducing some performance gains on specific problems when one resorts to the geometry of the space. An example setting for deep learning on SE(3) is also presented.\n\nStrengths: The use of such a toolbox could be a significant step to leveraging geometric models in deep learning.\n\nWeakness: \n\n1. The paper is written as more of a software document than a scientific paper. Several well-known manifolds are presented in the setting of Geomstats, however what is lacking is a treatment of some of the internals of how backpropagation can be implemented effectively for such a toolbox. For example, many of the Riemannian geometric algorithms need to resort to numerical algorithms such as SVD and such; how effective or feasible is automatic differentiation in dealing with such cases? \n\n2. The paper discusses computational advantages in the introduction -- however such advantages are not quantitatively analyzed across different platforms or prior softwares. \n\nOverall, it is not clear why this work needs to be treated as a scientific paper? It appears to be more of a tutorial on the use of the proposed software.",
            "rating": "3: Clear rejection",
            "confidence": "5: The reviewer is absolutely certain that the evaluation is correct and very familiar with the relevant literature"
        },
        {
            "title": "geomstats has a potential to generate large impact to the community",
            "review": "This white paper presents the geomstats package. The package provides tools for Riemannian modelization and\noptimization over manifolds. Especially, the package supports several important manifolds: hyperspheres, hyperbolic spaces, spaces of SPD matrices or Lie groups of transformations. \n\nPros: \n1. the paper shows ever use cases of machine learning with manifolds. These use cases are concrete and representative. \n2. the code in the package is extensively tested. \n\nCons:\n\nThere is no discussion about the scalability of the package. ",
            "rating": "8: Top 50% of accepted papers, clear accept",
            "confidence": "2: The reviewer is willing to defend the evaluation, but it is quite likely that the reviewer did not understand central parts of the paper"
        }
    ]
}