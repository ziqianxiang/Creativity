{
    "Decision": {
        "metareview": "The manuscript describes a procedure for prioritizing the contents of an experience replay buffer in a UVFA setting based on a density model of the trajectory of the achieved goal states. A rank-based transformation of densities is used to stochastically prioritize the replay memory.\n\nReducing the sample complexity of RL is a worthy goal and reviewers found the overall approach is interesting, if somewhat arbitrary in the implementation details. Concerns were raised about clarity and justification, and the restriction of experiments to fully deterministic environments.\n\nAfter personally reading the updated manuscript I found clarity to still be lacking. Statements like \"... uses the ranking number (starting from zero) directly as the probability for sampling\" -- this is not true (it is normalized, as confusingly laid out in equation 2 with the same symbol used for the unnormalized and normalized densities), and also implies that the least likely trajectory under the model is never sampled, which doesn't seem like a desirable property. Schaul's \"prioritized experience replay\" is cited for the choice of rank-based distribution, but the distribution employed in that work has rather different form. The related work section is also very poor given the existing body of literature on curiosity in a reinforcement learning context, and the new \"importance sampling perspective\" section serves little explicatory purpose given that an importance re-weighting is not performed. \n\nOverall, I concur most strongly with AnonReviewer1 that more work is needed to motivate the method and prove its robustness applicability, as well as to polish the presentation.",
        "confidence": "4: The area chair is confident but not absolutely certain",
        "recommendation": "Reject",
        "title": "Insufficient clarity and detail, reviewer concerns not addressed."
    },
    "Reviews": [
        {
            "title": "review for Curiosity-Driven Experience Prioritization via Density Estimation",
            "review": "The paper proposes a novel method for sampling examples for experience replay. It addresses the problem of having inbalanced data (in the experience buffer during training). The authors trained a density model and replay the trajectories that has a low density under the model. \n\nNovelty:\n\nThe approach is related to prioritized experience replay, PER is computational expensive because of the TD error update, in comparison, CDR only updates trajectory density once per trajectory.\n\nClarity:\n\nThe paper seems to lack clarity on certain design/ architecture/ model decisions.  For example, the authors did not justify why VGMM model was chosen and how does it compare to other density estimators.  Also, I had to go through a large chunk of the paper before coming across the exact setup. I think the paper could benefit from having this in the earlier sections.\n\n\nOther comments about the paper:\n\n-  I do like the idea of the paper. It also seems that curiosity in this context seems to be very related to surprise? There are neuroscience evidence indicating that humans turns to remember (putting more weights) on events that are more surprising.\n\n- The entire trajectory needs to be stored, so the memory wold grow with episode length. I could see this being an issue when episode length is too long.\n\n\n",
            "rating": "6: Marginally above acceptance threshold",
            "confidence": "3: The reviewer is fairly confident that the evaluation is correct"
        },
        {
            "title": "Handling unbalanced target distributions when conditioning on goal in RL",
            "review": "This paper addresses a problem that arises in \"universal\" value-function approximation (that is, reinforcement-learning when a current goal is included as part of the input);  when doing experience replay, the experience buffer might have much more representation of some goals than others, and it's important to keep the training appropriately balanced over goals.\n\nSo, the idea is to a kind of importance weighting of the trajectory memory, by doing a density estimation on the goal distribution represented in the memory and then sample them for training in a way that is inversely related to their densities.  This method results in a moderate improvement in the effectiveness of DDPG, compared to the previous method for hindsight experience replay.\n\nThe idea is intuitively sensible, but I believe this paper falls short of being ready for publication for three major reasons.\n\nFirst, the mechanism provided has no mathematical justification--it seems fairly arbitrary.   Even if it's not possible to prove something about this strategy, it would be useful to just state a desirable property that the sampling mechanism should have and then argue informally that this mechanism has that property.  As it is, it's just one point in a large space of possible mechanisms.\n\nI have a substantial concern that this method might end up assigning a high likelihood of resampling trajectories where something unusual happened, not because of the agent's actions, but because of the world having made a very unusual stochastic transition.   If that's true, then this distribution would be very bad for training a value function, which is supposed to involve an expectation over \"nature\"'s choices in the MDP.\n\nSecond, the experiments are (as I understand it, but I may be wrong) in deterministic domains, which definitely does not constitute a general test of a proposed RL  method.  \n- I'm not sure we can conclude much from the results on fetchSlide (and it would make sense not to use the last set of parameters but the best one encountered during training)\n- What implementation of the other algorithms did you use?\n\nThird, the writing in the paper has some significant lapses in clarity.  I was a substantial way through the paper before understanding exactly what the set-up was;  in particular, exactly what \"state\" meant was not clear.  I would suggest saying something like s = ((x^g, x^c), g) where s is a state from the perspective of value iteration, (x^g, x^c) is a state of the system, which is a vector of values divided into two sub-vectors, x^g is the part of the system state that involves the state variables that are specified in the goal, x^c (for 'context') is the rest of the system state, and g is the goal.  The dimensions of x^g and g should line up.\n- This sentence  was particularly troublesome:  \"Each  state s_t also includes the state of the achieved goal, meaning the goal state is a subset of the normal state.  Here, we overwrite the notation s_t  as the achieved goal state, i.e., the state of the object.\"\n- Also, it's important to say what the goal actually is, since it doesn't make sense for it to be a point in a continuous space.  (You do say this later, but it would be helpful to the reader to say it earlier.)\n",
            "rating": "4: Ok but not good enough - rejection",
            "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"
        },
        {
            "title": "The method proposed in the paper may have poor generalization and scaling performance",
            "review": "This work considers a version of importance sampling of states from the replay buffer.  Each trajectory is assigned a rank, inversely proportional to its probability according to a GMM. The trajectories with lower rank are preferred at sampling.\n\nMain issues:\n\n1. Estimating rank from a density estimator\n\n- the reasoning behind picking VGMM as the density estimator is not fully convincing and (dis)advantages of other candidate density estimators are almost not highlighted.\n\n- it is unclear and possibly could be better explained why one needs to concatenate the goals (what would change if we would not concatenate but estimate state densities rather than trajectories?)\n\n2. Generalization issues\n\n- the method is not applicable to episodes of different length\n- the approach assumes existence of a state to goal function f(s)->g\n- although the paper does not expose this point (it is discussed the HER paper)\n\n3. Scaling issues\n\n- length of the vector grows linearly with the episode length\n- length of the vector grows linearly with the size of the goal vector\n\nFor long episodes or episodes with large goal vectors it is quite possible that there will not be enough data to fit the GMM model or one would need to collect many samples prior.\n\n4. Minor issues\n\n- 3.3 \"It is known that PER can become very expensive in computational time\" - please supply a reference\n \n\n- 3.3 \"After each update of the model, the agent needs to update the priorities of the transitions in the replay buffer with the new TD-errors\" - However the method only renews priorities of randomly selected transitions (why would there be a large overhead?). Here is from the PER paper \"Our final implementation for rank-based prioritization produced an additional 2%-4% increase in running time and negligible additional memory usage\"\n",
            "rating": "6: Marginally above acceptance threshold",
            "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"
        }
    ]
}