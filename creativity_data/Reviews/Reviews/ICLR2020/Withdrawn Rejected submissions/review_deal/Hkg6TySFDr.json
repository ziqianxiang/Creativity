{
    "Decision": "",
    "Reviews": [
        {
            "experience_assessment": "I have read many papers in this area.",
            "rating": "3: Weak Reject",
            "review_assessment:_thoroughness_in_paper_reading": "I read the paper at least twice and used my best judgement in assessing the paper.",
            "review_assessment:_checking_correctness_of_experiments": "I assessed the sensibility of the experiments.",
            "title": "Official Blind Review #1",
            "review_assessment:_checking_correctness_of_derivations_and_theory": "I assessed the sensibility of the derivations and theory.",
            "review": "This paper explores the problem of reversed engineering of stripped executes. The main idea is to formulate the problem as a sequence-to-sequence problem namely a mapping from a set of call site sequences to procedure names. The main contribution of this paper is the application of seq2seq models with attention mechanism to the aforementioned task. The authors evaluated their method only one dataset which they constructed themselves.\n\nOverall, this paper is interesting because of its quite special application. However, the contribution from methodic perspectives is very limited. Furthermore, it is difficult for me to make sense of all the numbers, whether they are good or bad although the authors show consistent improvements compared to state-of-the-art methods. It also means that this paper lacks a deep analysis which will help readers to better understand the impact of the proposed method within the target domain. \n\nOverall, I recommend to reject this paper because of its very limited impact to the representation learning research field.\n"
        },
        {
            "rating": "3: Weak Reject",
            "experience_assessment": "I have published in this field for several years.",
            "review_assessment:_checking_correctness_of_derivations_and_theory": "N/A",
            "review_assessment:_checking_correctness_of_experiments": "I assessed the sensibility of the experiments.",
            "title": "Official Blind Review #2",
            "review_assessment:_thoroughness_in_paper_reading": "I read the paper thoroughly.",
            "review": "= Summary\nNero, a method for naming procedures when decompiling binary executables is presented. It consists of a static analysis-based approach to extract a set of sequences of calls to (named) library methods present in the procedure under analysis, and a (mostly standard) seq2seq architecture to predict the procedure name as a sequence of subtokens. Experiments on real-world data show that the method performs well and outperforms some baselines.\n\n= Strong/Weak Points\n+ The method seems to work in practice\n+ The writing is reasonably clear, and it feels sufficiently precise to reproduce the results (given enough time)\n- Little novelty on modeling side (straightforward extension of seq2seq) and data extraction (straightforward application of control flow graphs)\n- The central novelty in the analysis (extracting \"kinds\") seems to contribute very little to results (cf. Tab. 2)\n- Bad fit for ICLR, as the paper is written with a focus on the PL analysis side\n\n= Recommendation\nOverall, I believe that this is an application with little novelty, and few lessons to be learned for the ICLR audience - a PL or Software Engineering conference (such as VMCAI or FSE) may be a better fit for this work. Hence, I would tend to reject this in favour of more ML-heavy papers.\n\n= Minor Comments\n* It may make sense to compare to https://2019.ase-conferences.org/details/ase-2019-papers/49/DIRE-A-Neural-Approach-to-Decompiled-Identifier-Renaming, which was very recently published (at least I only saw this after the ICLR submission deadline closed, so this is no way meant as a negative)\n* page 3, second to last paragraph: \"basic blocks in ,\" but  is undefined?\n* page 4, \"Combined Example\": I found the writing slightly misleading here: the extracted path does not show that \"(ii) getaddrinfo ... stores the results _in the previously initialized memory_\" or \"(iii) configure _it_ to be a TCP socket.\" The extracted information provides no information about the flow of information or values, which seems to be a weakness of the method.\n* page 4, last par:  - this should be up to ?\n* page 5, footnote 1: \"each call site may participates\" -> participate\n* page 8: \"In our approach, there is no need to manually define rules for building the graph as in Allamanis et al. (2018)\" - this is confusing to me, as I believe the rules for building the call graph (and abstracting kinds!) to be manually defined?"
        },
        {
            "rating": "6: Weak Accept",
            "experience_assessment": "I have published one or two papers in this area.",
            "review_assessment:_checking_correctness_of_derivations_and_theory": "N/A",
            "review_assessment:_checking_correctness_of_experiments": "I carefully checked the experiments.",
            "title": "Official Blind Review #3",
            "review_assessment:_thoroughness_in_paper_reading": "N/A",
            "review": "This work presets a neural network method for the reverse engineering of binaries. The authors, build the CFG from the assembly, extract the invoked function names and generate sequences of these function calls as they would appear in execution traces. Using these sequences, a set-of-sequences2seqence model is used to predict the subwords of the name of the procedure.\nOverall, the approach seems reasonable, the performance gains are good and the application is important. The paper is also well-written. Therefore, I believe that this paper should get accepted.\n\n* It's unclear to me how the sequences of calls are extracted. Is this exhaustive? How are loops treated?\n\n* A comparison to a GNN-based architecture would certainly strengthen the paper. I imagine a GNN (such as a GCN) over the CFG, where the initial node states are the output of the `encode_callsite`. This would certainly be interesting and _might_ be relatively easy since the authors seem to already construct the graph.\n\nMinor:\n* p6 \"LSTMS\" -> \"LSTMs\""
        }
    ]
}