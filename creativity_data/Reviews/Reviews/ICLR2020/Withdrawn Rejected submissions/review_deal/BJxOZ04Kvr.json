{
    "Decision": "",
    "Reviews": [
        {
            "rating": "1: Reject",
            "experience_assessment": "I do not know much about this area.",
            "review_assessment:_checking_correctness_of_derivations_and_theory": "I assessed the sensibility of the derivations and theory.",
            "review_assessment:_checking_correctness_of_experiments": "I assessed the sensibility of the experiments.",
            "title": "Official Blind Review #1",
            "review_assessment:_thoroughness_in_paper_reading": "I made a quick assessment of this paper.",
            "review": "The paper proposes a code completion tool InvocMap, to predict nested method invocations in programming language code. \n\nI do not entirely buy the premise that \"developers need to remember the structure and the combination of invocations depending on their purpose.\" which is stated as a reason for why the task is challenging. The order of nesting in method invocation can be resolved often by examining the return type and argument type(s) of each method.\n\nWeaknesses\n1. Writing can be improved significantly. It is hard to understand the difficulty of the problem that is being addressed.\n2. Little novelty. A standard SMT approach is adopted with little modification. \n3. How is it ensured that the output is syntactically correct? \n4. Little analysis in the experiments, no strong baselines. Why not try a neural seq2seq model?\n\nTypos/Grammar\n1. There are two reasons \"cause to\" this challenge.\n2.  First, large scale code corpus contains \"noise\" data\n\nI am not entirely certain that this paper is appropriate for this venue.  "
        },
        {
            "experience_assessment": "I do not know much about this area.",
            "rating": "1: Reject",
            "review_assessment:_thoroughness_in_paper_reading": "I made a quick assessment of this paper.",
            "review_assessment:_checking_correctness_of_experiments": "I assessed the sensibility of the experiments.",
            "title": "Official Blind Review #3",
            "review_assessment:_checking_correctness_of_derivations_and_theory": "N/A",
            "review": "This paper present a strategy to map the method name to method invocation. This contains several modules: a classifier module to classify the invocation by level of abstraction; A rule-based system to extract code; an algorithm to visit a method invocation inside the code environment; and finally a SMT system for predicting the sequences of AST (abstract syntax tree) structure given method name and content. I am not an expert on program synthesis, so I am evaluating this paper based on my educated guess, thus probably underestimate or miss some merits of this paper. I think the writing is clear and pedagogical, so that a non-expert reader can learn how such a system can be designed. However, although this task sounds interesting to me, this appears to me more like a system design paper rather than a typical top-notch machine learning paper. Specifically,\n\n1. the technical innovations and the existing strategies are presented in a mixed way, rendering it quite difficult to clearly distinguish the novelty of this paper. \n\n2. Although I am not familiar with the evaluation metrics as presented in this paper, I feel that the judgements are rather subjective as no baselines are included in the comparison. \n\n"
        },
        {
            "rating": "1: Reject",
            "experience_assessment": "I have published in this field for several years.",
            "review_assessment:_checking_correctness_of_derivations_and_theory": "N/A",
            "review_assessment:_checking_correctness_of_experiments": "I assessed the sensibility of the experiments.",
            "title": "Official Blind Review #2",
            "review_assessment:_thoroughness_in_paper_reading": "I made a quick assessment of this paper.",
            "review": "This paper presents a method for predicting method invocations in source code. The authors use an off-the-shelf NMT model to predict the method invocation at specific location. They show that their tool works reasonably well.\n\nThe application of this paper is interesting. However, I do not believe that ICLR is the appropriate venue for this work since it uses off-the-shelf phrase-based MT tool and a very simple representation to solve the problem. There is marginal novelty that relates to ICLR. Furthermore, the paper is badly written with multiple typos and lacks a rigorous evaluation.\n\n* I would suggest to the authors to thoroughly spell and grammar-check this work. The grammar errors are too many to list here.\n\n* Maybe the Mining Software Repositories is a better venue for this work, although I believe that it would still require significant improvements for it to be accepted there. https://2020.msrconf.org/track/msr-2020-papers#Call-for-Papers \n\n* The evaluation lacks any comparison with standard language models that have been employed in this field. A reasonable token-level language model (RNN/LSTM) would be necessary provide sufficient confidence that the representation method is useful.\n\n* Data derived from scraping GitHub has been found to be very repetitive [a,b]. The authors are encouraged to check their corpus for duplicates.\n\n\nSome Typos:\n\n* \"may be in the risk*s* of being\" \n* \"These challenges hinder*s*\"\n* \"Can perform to predict the...\" -> \"can predict\"\n\n[a] Lopes, Cristina V., et al. \"DéjàVu: a map of code duplicates on GitHub.\" Proceedings of the ACM on Programming Languages 1.OOPSLA (2017): 84.\n\n[b] Allamanis, Miltiadis. \"The Adverse Effects of Code Duplication in Machine Learning Models of Code.\" arXiv preprint arXiv:1812.06469 (2018)."
        }
    ]
}